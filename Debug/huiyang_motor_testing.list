
huiyang_motor_testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016fd4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c4  08017274  08017274  00018274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08017838  08017838  00018838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08017840  08017840  00018840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000008  08017848  08017848  00018848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000070  24000000  08017850  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000543c  24000070  080178c0  00019070  2**2
                  ALLOC
  8 ._user_heap_stack 00004004  240054ac  080178c0  000194ac  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00019070  2**0
                  CONTENTS, READONLY
 10 .debug_info   00038ccf  00000000  00000000  0001909e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006c0a  00000000  00000000  00051d6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000023b0  00000000  00000000  00058978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001ba4  00000000  00000000  0005ad28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000d92a  00000000  00000000  0005c8cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00030e2b  00000000  00000000  0006a1f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017ed4e  00000000  00000000  0009b021  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00219d6f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a004  00000000  00000000  00219db4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000056  00000000  00000000  00223db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000070 	.word	0x24000070
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801725c 	.word	0x0801725c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000074 	.word	0x24000074
 80002dc:	0801725c 	.word	0x0801725c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <_ZNK21ModbusAbsoluteEncoder13isInitializedEv>:
    explicit ModbusAbsoluteEncoder(TIM_HandleTypeDef *htim = nullptr, uint8_t unit_id = 1);
    virtual ~ModbusAbsoluteEncoder() = default;
    // Initialization
    void init();

    bool isInitialized() const{return encoder_initialized;};
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	f893 31b8 	ldrb.w	r3, [r3, #440]	@ 0x1b8
 80006ca:	4618      	mov	r0, r3
 80006cc:	370c      	adds	r7, #12
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr

080006d6 <_ZL10MPU_Configv>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void MPU_Config(void)
{
 80006d6:	b580      	push	{r7, lr}
 80006d8:	b084      	sub	sp, #16
 80006da:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80006dc:	463b      	mov	r3, r7
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]
 80006e4:	609a      	str	r2, [r3, #8]
 80006e6:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80006e8:	f003 fc78 	bl	8003fdc <HAL_MPU_Disable>

  /* Configure the MPU attributes for the QSPI 256MB without instruction access */
  MPU_InitStruct.Enable           = MPU_REGION_ENABLE;
 80006ec:	2301      	movs	r3, #1
 80006ee:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number           = MPU_REGION_NUMBER0;
 80006f0:	2300      	movs	r3, #0
 80006f2:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress      = QSPI_BASE;
 80006f4:	f04f 4310 	mov.w	r3, #2415919104	@ 0x90000000
 80006f8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size             = MPU_REGION_SIZE_256MB;
 80006fa:	231b      	movs	r3, #27
 80006fc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80006fe:	2300      	movs	r3, #0
 8000700:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable     = MPU_ACCESS_NOT_BUFFERABLE;
 8000702:	2300      	movs	r3, #0
 8000704:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable      = MPU_ACCESS_NOT_CACHEABLE;
 8000706:	2300      	movs	r3, #0
 8000708:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable      = MPU_ACCESS_NOT_SHAREABLE;
 800070a:	2300      	movs	r3, #0
 800070c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.DisableExec      = MPU_INSTRUCTION_ACCESS_DISABLE;
 800070e:	2301      	movs	r3, #1
 8000710:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.TypeExtField     = MPU_TEX_LEVEL1;
 8000712:	2301      	movs	r3, #1
 8000714:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 8000716:	2300      	movs	r3, #0
 8000718:	727b      	strb	r3, [r7, #9]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800071a:	463b      	mov	r3, r7
 800071c:	4618      	mov	r0, r3
 800071e:	f003 fc95 	bl	800404c <HAL_MPU_ConfigRegion>

  /* Configure the MPU attributes for the QSPI 8MB (QSPI Flash Size) to Cacheable WT */
  MPU_InitStruct.Enable           = MPU_REGION_ENABLE;
 8000722:	2301      	movs	r3, #1
 8000724:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number           = MPU_REGION_NUMBER1;
 8000726:	2301      	movs	r3, #1
 8000728:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress      = QSPI_BASE;
 800072a:	f04f 4310 	mov.w	r3, #2415919104	@ 0x90000000
 800072e:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size             = MPU_REGION_SIZE_8MB;
 8000730:	2316      	movs	r3, #22
 8000732:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RO;
 8000734:	2305      	movs	r3, #5
 8000736:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable     = MPU_ACCESS_BUFFERABLE;
 8000738:	2301      	movs	r3, #1
 800073a:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable      = MPU_ACCESS_CACHEABLE;
 800073c:	2301      	movs	r3, #1
 800073e:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable      = MPU_ACCESS_NOT_SHAREABLE;
 8000740:	2300      	movs	r3, #0
 8000742:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.DisableExec      = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000744:	2300      	movs	r3, #0
 8000746:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.TypeExtField     = MPU_TEX_LEVEL1;
 8000748:	2301      	movs	r3, #1
 800074a:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 800074c:	2300      	movs	r3, #0
 800074e:	727b      	strb	r3, [r7, #9]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000750:	463b      	mov	r3, r7
 8000752:	4618      	mov	r0, r3
 8000754:	f003 fc7a 	bl	800404c <HAL_MPU_ConfigRegion>

  /* Setup AXI SRAM in Cacheable WB */
  MPU_InitStruct.Enable           = MPU_REGION_ENABLE;
 8000758:	2301      	movs	r3, #1
 800075a:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress      = D1_AXISRAM_BASE;
 800075c:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 8000760:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size             = MPU_REGION_SIZE_512KB;
 8000762:	2312      	movs	r3, #18
 8000764:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000766:	2303      	movs	r3, #3
 8000768:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable     = MPU_ACCESS_BUFFERABLE;
 800076a:	2301      	movs	r3, #1
 800076c:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable      = MPU_ACCESS_CACHEABLE;
 800076e:	2301      	movs	r3, #1
 8000770:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable      = MPU_ACCESS_SHAREABLE;
 8000772:	2301      	movs	r3, #1
 8000774:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number           = MPU_REGION_NUMBER2;
 8000776:	2302      	movs	r3, #2
 8000778:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField     = MPU_TEX_LEVEL1;
 800077a:	2301      	movs	r3, #1
 800077c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 800077e:	2300      	movs	r3, #0
 8000780:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec      = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000782:	2300      	movs	r3, #0
 8000784:	733b      	strb	r3, [r7, #12]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000786:	463b      	mov	r3, r7
 8000788:	4618      	mov	r0, r3
 800078a:	f003 fc5f 	bl	800404c <HAL_MPU_ConfigRegion>

  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800078e:	2004      	movs	r0, #4
 8000790:	f003 fc3c 	bl	800400c <HAL_MPU_Enable>
}
 8000794:	bf00      	nop
 8000796:	3710      	adds	r7, #16
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}

0800079c <_ZL16CPU_CACHE_Enablev>:

static void CPU_CACHE_Enable(void)
{
 800079c:	b480      	push	{r7}
 800079e:	b085      	sub	sp, #20
 80007a0:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80007a2:	4b3e      	ldr	r3, [pc, #248]	@ (800089c <_ZL16CPU_CACHE_Enablev+0x100>)
 80007a4:	695b      	ldr	r3, [r3, #20]
 80007a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	bf14      	ite	ne
 80007ae:	2301      	movne	r3, #1
 80007b0:	2300      	moveq	r3, #0
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d11b      	bne.n	80007f0 <_ZL16CPU_CACHE_Enablev+0x54>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80007b8:	f3bf 8f4f 	dsb	sy
}
 80007bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007be:	f3bf 8f6f 	isb	sy
}
 80007c2:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80007c4:	4b35      	ldr	r3, [pc, #212]	@ (800089c <_ZL16CPU_CACHE_Enablev+0x100>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80007cc:	f3bf 8f4f 	dsb	sy
}
 80007d0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007d2:	f3bf 8f6f 	isb	sy
}
 80007d6:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80007d8:	4b30      	ldr	r3, [pc, #192]	@ (800089c <_ZL16CPU_CACHE_Enablev+0x100>)
 80007da:	695b      	ldr	r3, [r3, #20]
 80007dc:	4a2f      	ldr	r2, [pc, #188]	@ (800089c <_ZL16CPU_CACHE_Enablev+0x100>)
 80007de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007e2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80007e4:	f3bf 8f4f 	dsb	sy
}
 80007e8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007ea:	f3bf 8f6f 	isb	sy
}
 80007ee:	e000      	b.n	80007f2 <_ZL16CPU_CACHE_Enablev+0x56>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80007f0:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80007f2:	4b2a      	ldr	r3, [pc, #168]	@ (800089c <_ZL16CPU_CACHE_Enablev+0x100>)
 80007f4:	695b      	ldr	r3, [r3, #20]
 80007f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	bf14      	ite	ne
 80007fe:	2301      	movne	r3, #1
 8000800:	2300      	moveq	r3, #0
 8000802:	b2db      	uxtb	r3, r3
 8000804:	2b00      	cmp	r3, #0
 8000806:	d142      	bne.n	800088e <_ZL16CPU_CACHE_Enablev+0xf2>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000808:	4b24      	ldr	r3, [pc, #144]	@ (800089c <_ZL16CPU_CACHE_Enablev+0x100>)
 800080a:	2200      	movs	r2, #0
 800080c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000810:	f3bf 8f4f 	dsb	sy
}
 8000814:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000816:	4b21      	ldr	r3, [pc, #132]	@ (800089c <_ZL16CPU_CACHE_Enablev+0x100>)
 8000818:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800081c:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	0b5b      	lsrs	r3, r3, #13
 8000822:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000826:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	08db      	lsrs	r3, r3, #3
 800082c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000830:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000832:	68bb      	ldr	r3, [r7, #8]
 8000834:	015a      	lsls	r2, r3, #5
 8000836:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800083a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800083c:	687a      	ldr	r2, [r7, #4]
 800083e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000840:	4916      	ldr	r1, [pc, #88]	@ (800089c <_ZL16CPU_CACHE_Enablev+0x100>)
 8000842:	4313      	orrs	r3, r2
 8000844:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	1e5a      	subs	r2, r3, #1
 800084c:	607a      	str	r2, [r7, #4]
 800084e:	2b00      	cmp	r3, #0
 8000850:	bf14      	ite	ne
 8000852:	2301      	movne	r3, #1
 8000854:	2300      	moveq	r3, #0
 8000856:	b2db      	uxtb	r3, r3
 8000858:	2b00      	cmp	r3, #0
 800085a:	d1ea      	bne.n	8000832 <_ZL16CPU_CACHE_Enablev+0x96>
    } while(sets-- != 0U);
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	1e5a      	subs	r2, r3, #1
 8000860:	60ba      	str	r2, [r7, #8]
 8000862:	2b00      	cmp	r3, #0
 8000864:	bf14      	ite	ne
 8000866:	2301      	movne	r3, #1
 8000868:	2300      	moveq	r3, #0
 800086a:	b2db      	uxtb	r3, r3
 800086c:	2b00      	cmp	r3, #0
 800086e:	d1db      	bne.n	8000828 <_ZL16CPU_CACHE_Enablev+0x8c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000870:	f3bf 8f4f 	dsb	sy
}
 8000874:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000876:	4b09      	ldr	r3, [pc, #36]	@ (800089c <_ZL16CPU_CACHE_Enablev+0x100>)
 8000878:	695b      	ldr	r3, [r3, #20]
 800087a:	4a08      	ldr	r2, [pc, #32]	@ (800089c <_ZL16CPU_CACHE_Enablev+0x100>)
 800087c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000880:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000882:	f3bf 8f4f 	dsb	sy
}
 8000886:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000888:	f3bf 8f6f 	isb	sy
}
 800088c:	e000      	b.n	8000890 <_ZL16CPU_CACHE_Enablev+0xf4>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800088e:	bf00      	nop
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 8000890:	bf00      	nop
 8000892:	3714      	adds	r7, #20
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr
 800089c:	e000ed00 	.word	0xe000ed00

080008a0 <_Z11bsp_sd_initv>:
BYTE WriteBuffer[] =            /* 写缓冲区 */
    "hello word\r\n";
uint16_t file_memory=0;
uint32_t lastWriteTime = 0;     /* 上次写入时间 */
char timeStr[20];               /* 时间字符串缓冲区 */
void bsp_sd_init(){
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b090      	sub	sp, #64	@ 0x40
 80008a4:	af00      	add	r7, sp, #0
    printf("\r\n****** FatFs Example ******\r\n\r\n");
 80008a6:	484e      	ldr	r0, [pc, #312]	@ (80009e0 <_Z11bsp_sd_initv+0x140>)
 80008a8:	f015 fc3a 	bl	8016120 <puts>
    
    // 1. 先卸载文件系统（如果之前已经挂载）
    f_mount(NULL, "0:", 0);
 80008ac:	2200      	movs	r2, #0
 80008ae:	494d      	ldr	r1, [pc, #308]	@ (80009e4 <_Z11bsp_sd_initv+0x144>)
 80008b0:	2000      	movs	r0, #0
 80008b2:	f010 fa9b 	bl	8010dec <f_mount>
    
    // 2. 挂载文件系统
    printf("正在挂载文件系统...\r\n");
 80008b6:	484c      	ldr	r0, [pc, #304]	@ (80009e8 <_Z11bsp_sd_initv+0x148>)
 80008b8:	f015 fc32 	bl	8016120 <puts>
    f_res = f_mount(&fs, "0:", 1);
 80008bc:	2201      	movs	r2, #1
 80008be:	4949      	ldr	r1, [pc, #292]	@ (80009e4 <_Z11bsp_sd_initv+0x144>)
 80008c0:	484a      	ldr	r0, [pc, #296]	@ (80009ec <_Z11bsp_sd_initv+0x14c>)
 80008c2:	f010 fa93 	bl	8010dec <f_mount>
 80008c6:	4603      	mov	r3, r0
 80008c8:	461a      	mov	r2, r3
 80008ca:	4b49      	ldr	r3, [pc, #292]	@ (80009f0 <_Z11bsp_sd_initv+0x150>)
 80008cc:	701a      	strb	r2, [r3, #0]
    if(f_res != FR_OK) {
 80008ce:	4b48      	ldr	r3, [pc, #288]	@ (80009f0 <_Z11bsp_sd_initv+0x150>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d021      	beq.n	800091a <_Z11bsp_sd_initv+0x7a>
        printf("SD卡挂载失败，错误代码: %d\r\n", f_res);
 80008d6:	4b46      	ldr	r3, [pc, #280]	@ (80009f0 <_Z11bsp_sd_initv+0x150>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	4619      	mov	r1, r3
 80008dc:	4845      	ldr	r0, [pc, #276]	@ (80009f4 <_Z11bsp_sd_initv+0x154>)
 80008de:	f015 fbb7 	bl	8016050 <iprintf>
        
        // 检查具体错误原因
        switch(f_res) {
 80008e2:	4b43      	ldr	r3, [pc, #268]	@ (80009f0 <_Z11bsp_sd_initv+0x150>)
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	2b0d      	cmp	r3, #13
 80008e8:	d00e      	beq.n	8000908 <_Z11bsp_sd_initv+0x68>
 80008ea:	2b0d      	cmp	r3, #13
 80008ec:	dc10      	bgt.n	8000910 <_Z11bsp_sd_initv+0x70>
 80008ee:	2b01      	cmp	r3, #1
 80008f0:	d002      	beq.n	80008f8 <_Z11bsp_sd_initv+0x58>
 80008f2:	2b03      	cmp	r3, #3
 80008f4:	d004      	beq.n	8000900 <_Z11bsp_sd_initv+0x60>
 80008f6:	e00b      	b.n	8000910 <_Z11bsp_sd_initv+0x70>
            case FR_DISK_ERR:
                printf("物理设备故障\r\n");
 80008f8:	483f      	ldr	r0, [pc, #252]	@ (80009f8 <_Z11bsp_sd_initv+0x158>)
 80008fa:	f015 fc11 	bl	8016120 <puts>
                break;
 80008fe:	e00b      	b.n	8000918 <_Z11bsp_sd_initv+0x78>
            case FR_NOT_READY:
                printf("SD卡未插入或未就绪\r\n");
 8000900:	483e      	ldr	r0, [pc, #248]	@ (80009fc <_Z11bsp_sd_initv+0x15c>)
 8000902:	f015 fc0d 	bl	8016120 <puts>
                break;
 8000906:	e007      	b.n	8000918 <_Z11bsp_sd_initv+0x78>
            case FR_NO_FILESYSTEM:
                printf("无效的文件系统或未格式化\r\n");
 8000908:	483d      	ldr	r0, [pc, #244]	@ (8000a00 <_Z11bsp_sd_initv+0x160>)
 800090a:	f015 fc09 	bl	8016120 <puts>
                break;
 800090e:	e003      	b.n	8000918 <_Z11bsp_sd_initv+0x78>
            default:
                printf("其他错误\r\n");
 8000910:	483c      	ldr	r0, [pc, #240]	@ (8000a04 <_Z11bsp_sd_initv+0x164>)
 8000912:	f015 fc05 	bl	8016120 <puts>
        }
        return;
 8000916:	e060      	b.n	80009da <_Z11bsp_sd_initv+0x13a>
 8000918:	e05f      	b.n	80009da <_Z11bsp_sd_initv+0x13a>
    }
    printf("SD卡挂载成功\r\n");
 800091a:	483b      	ldr	r0, [pc, #236]	@ (8000a08 <_Z11bsp_sd_initv+0x168>)
 800091c:	f015 fc00 	bl	8016120 <puts>

    // 3. 尝试打开目录确认文件系统可访问
    DIR dir;
    f_res = f_opendir(&dir, "/");
 8000920:	f107 0308 	add.w	r3, r7, #8
 8000924:	4939      	ldr	r1, [pc, #228]	@ (8000a0c <_Z11bsp_sd_initv+0x16c>)
 8000926:	4618      	mov	r0, r3
 8000928:	f010 fee1 	bl	80116ee <f_opendir>
 800092c:	4603      	mov	r3, r0
 800092e:	461a      	mov	r2, r3
 8000930:	4b2f      	ldr	r3, [pc, #188]	@ (80009f0 <_Z11bsp_sd_initv+0x150>)
 8000932:	701a      	strb	r2, [r3, #0]
    if(f_res != FR_OK) {
 8000934:	4b2e      	ldr	r3, [pc, #184]	@ (80009f0 <_Z11bsp_sd_initv+0x150>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d006      	beq.n	800094a <_Z11bsp_sd_initv+0xaa>
        printf("无法访问根目录，错误代码: %d\r\n", f_res);
 800093c:	4b2c      	ldr	r3, [pc, #176]	@ (80009f0 <_Z11bsp_sd_initv+0x150>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	4619      	mov	r1, r3
 8000942:	4833      	ldr	r0, [pc, #204]	@ (8000a10 <_Z11bsp_sd_initv+0x170>)
 8000944:	f015 fb84 	bl	8016050 <iprintf>
        return;
 8000948:	e047      	b.n	80009da <_Z11bsp_sd_initv+0x13a>
    }
    f_closedir(&dir);
 800094a:	f107 0308 	add.w	r3, r7, #8
 800094e:	4618      	mov	r0, r3
 8000950:	f010 ff46 	bl	80117e0 <f_closedir>

    // 4. 打开或创建文件
    printf("正在打开文件...\r\n");
 8000954:	482f      	ldr	r0, [pc, #188]	@ (8000a14 <_Z11bsp_sd_initv+0x174>)
 8000956:	f015 fbe3 	bl	8016120 <puts>
    FRESULT open_res = f_open(&file, "testing.csv", FA_CREATE_ALWAYS | FA_WRITE | FA_READ);
 800095a:	220b      	movs	r2, #11
 800095c:	492e      	ldr	r1, [pc, #184]	@ (8000a18 <_Z11bsp_sd_initv+0x178>)
 800095e:	482f      	ldr	r0, [pc, #188]	@ (8000a1c <_Z11bsp_sd_initv+0x17c>)
 8000960:	f010 faa8 	bl	8010eb4 <f_open>
 8000964:	4603      	mov	r3, r0
 8000966:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    if(open_res != FR_OK) {
 800096a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800096e:	2b00      	cmp	r3, #0
 8000970:	d006      	beq.n	8000980 <_Z11bsp_sd_initv+0xe0>
        printf("文件创建失败，错误代码: %d\r\n", open_res);
 8000972:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000976:	4619      	mov	r1, r3
 8000978:	4829      	ldr	r0, [pc, #164]	@ (8000a20 <_Z11bsp_sd_initv+0x180>)
 800097a:	f015 fb69 	bl	8016050 <iprintf>
        return;
 800097e:	e02c      	b.n	80009da <_Z11bsp_sd_initv+0x13a>
    }
    printf("文件创建成功\r\n");
 8000980:	4828      	ldr	r0, [pc, #160]	@ (8000a24 <_Z11bsp_sd_initv+0x184>)
 8000982:	f015 fbcd 	bl	8016120 <puts>

    // 5. 写入表头
    const char *header = "Time(hh:mm:ss:msms),Position\r\n";
 8000986:	4b28      	ldr	r3, [pc, #160]	@ (8000a28 <_Z11bsp_sd_initv+0x188>)
 8000988:	63bb      	str	r3, [r7, #56]	@ 0x38
    UINT bw;
    f_res = f_write(&file, header, strlen(header), &bw);
 800098a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800098c:	f7ff fca8 	bl	80002e0 <strlen>
 8000990:	4602      	mov	r2, r0
 8000992:	1d3b      	adds	r3, r7, #4
 8000994:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8000996:	4821      	ldr	r0, [pc, #132]	@ (8000a1c <_Z11bsp_sd_initv+0x17c>)
 8000998:	f010 fc4d 	bl	8011236 <f_write>
 800099c:	4603      	mov	r3, r0
 800099e:	461a      	mov	r2, r3
 80009a0:	4b13      	ldr	r3, [pc, #76]	@ (80009f0 <_Z11bsp_sd_initv+0x150>)
 80009a2:	701a      	strb	r2, [r3, #0]
    if(f_res != FR_OK || bw != strlen(header)) {
 80009a4:	4b12      	ldr	r3, [pc, #72]	@ (80009f0 <_Z11bsp_sd_initv+0x150>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d106      	bne.n	80009ba <_Z11bsp_sd_initv+0x11a>
 80009ac:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80009ae:	f7ff fc97 	bl	80002e0 <strlen>
 80009b2:	4602      	mov	r2, r0
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	429a      	cmp	r2, r3
 80009b8:	d009      	beq.n	80009ce <_Z11bsp_sd_initv+0x12e>
        printf("表头写入失败，错误代码: %d\r\n", f_res);
 80009ba:	4b0d      	ldr	r3, [pc, #52]	@ (80009f0 <_Z11bsp_sd_initv+0x150>)
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	4619      	mov	r1, r3
 80009c0:	481a      	ldr	r0, [pc, #104]	@ (8000a2c <_Z11bsp_sd_initv+0x18c>)
 80009c2:	f015 fb45 	bl	8016050 <iprintf>
        f_close(&file);
 80009c6:	4815      	ldr	r0, [pc, #84]	@ (8000a1c <_Z11bsp_sd_initv+0x17c>)
 80009c8:	f010 fe62 	bl	8011690 <f_close>
        return;
 80009cc:	e005      	b.n	80009da <_Z11bsp_sd_initv+0x13a>
    }
    
    // 6. 确保数据写入磁盘
    f_sync(&file);
 80009ce:	4813      	ldr	r0, [pc, #76]	@ (8000a1c <_Z11bsp_sd_initv+0x17c>)
 80009d0:	f010 fdd5 	bl	801157e <f_sync>
    printf("文件系统初始化完成\r\n");
 80009d4:	4816      	ldr	r0, [pc, #88]	@ (8000a30 <_Z11bsp_sd_initv+0x190>)
 80009d6:	f015 fba3 	bl	8016120 <puts>
}
 80009da:	3740      	adds	r7, #64	@ 0x40
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	08017280 	.word	0x08017280
 80009e4:	080172a4 	.word	0x080172a4
 80009e8:	080172a8 	.word	0x080172a8
 80009ec:	24000280 	.word	0x24000280
 80009f0:	240006e4 	.word	0x240006e4
 80009f4:	080172c8 	.word	0x080172c8
 80009f8:	080172f0 	.word	0x080172f0
 80009fc:	08017304 	.word	0x08017304
 8000a00:	08017320 	.word	0x08017320
 8000a04:	08017348 	.word	0x08017348
 8000a08:	08017358 	.word	0x08017358
 8000a0c:	0801736c 	.word	0x0801736c
 8000a10:	08017370 	.word	0x08017370
 8000a14:	0801739c 	.word	0x0801739c
 8000a18:	080173b4 	.word	0x080173b4
 8000a1c:	240004b4 	.word	0x240004b4
 8000a20:	080173c0 	.word	0x080173c0
 8000a24:	080173e8 	.word	0x080173e8
 8000a28:	080173fc 	.word	0x080173fc
 8000a2c:	0801741c 	.word	0x0801741c
 8000a30:	08017444 	.word	0x08017444

08000a34 <_Z20bsp_sd_write_testingv>:

void bsp_sd_write_testing(){
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08a      	sub	sp, #40	@ 0x28
 8000a38:	af02      	add	r7, sp, #8
    uint32_t currentTime = HAL_GetTick();
 8000a3a:	f003 f9b3 	bl	8003da4 <HAL_GetTick>
 8000a3e:	61f8      	str	r0, [r7, #28]

    // 每6000ms (6秒) 写入一次
    if(currentTime - lastWriteTime >= 6000)
 8000a40:	4b34      	ldr	r3, [pc, #208]	@ (8000b14 <_Z20bsp_sd_write_testingv+0xe0>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	69fa      	ldr	r2, [r7, #28]
 8000a46:	1ad3      	subs	r3, r2, r3
 8000a48:	f241 726f 	movw	r2, #5999	@ 0x176f
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d95d      	bls.n	8000b0c <_Z20bsp_sd_write_testingv+0xd8>
    {
      uint32_t totalMs = currentTime;
 8000a50:	69fb      	ldr	r3, [r7, #28]
 8000a52:	61bb      	str	r3, [r7, #24]
      uint32_t ms = totalMs % 1000;
 8000a54:	69bb      	ldr	r3, [r7, #24]
 8000a56:	4a30      	ldr	r2, [pc, #192]	@ (8000b18 <_Z20bsp_sd_write_testingv+0xe4>)
 8000a58:	fba2 1203 	umull	r1, r2, r2, r3
 8000a5c:	0992      	lsrs	r2, r2, #6
 8000a5e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000a62:	fb01 f202 	mul.w	r2, r1, r2
 8000a66:	1a9b      	subs	r3, r3, r2
 8000a68:	617b      	str	r3, [r7, #20]
      uint32_t totalSec = totalMs / 1000;
 8000a6a:	69bb      	ldr	r3, [r7, #24]
 8000a6c:	4a2a      	ldr	r2, [pc, #168]	@ (8000b18 <_Z20bsp_sd_write_testingv+0xe4>)
 8000a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a72:	099b      	lsrs	r3, r3, #6
 8000a74:	613b      	str	r3, [r7, #16]
      uint32_t sec = totalSec % 60;
 8000a76:	693a      	ldr	r2, [r7, #16]
 8000a78:	4b28      	ldr	r3, [pc, #160]	@ (8000b1c <_Z20bsp_sd_write_testingv+0xe8>)
 8000a7a:	fba3 1302 	umull	r1, r3, r3, r2
 8000a7e:	0959      	lsrs	r1, r3, #5
 8000a80:	460b      	mov	r3, r1
 8000a82:	011b      	lsls	r3, r3, #4
 8000a84:	1a5b      	subs	r3, r3, r1
 8000a86:	009b      	lsls	r3, r3, #2
 8000a88:	1ad3      	subs	r3, r2, r3
 8000a8a:	60fb      	str	r3, [r7, #12]
      uint32_t totalMin = totalSec / 60;
 8000a8c:	693b      	ldr	r3, [r7, #16]
 8000a8e:	4a23      	ldr	r2, [pc, #140]	@ (8000b1c <_Z20bsp_sd_write_testingv+0xe8>)
 8000a90:	fba2 2303 	umull	r2, r3, r2, r3
 8000a94:	095b      	lsrs	r3, r3, #5
 8000a96:	60bb      	str	r3, [r7, #8]
      uint32_t min = totalMin % 60;
 8000a98:	68ba      	ldr	r2, [r7, #8]
 8000a9a:	4b20      	ldr	r3, [pc, #128]	@ (8000b1c <_Z20bsp_sd_write_testingv+0xe8>)
 8000a9c:	fba3 1302 	umull	r1, r3, r3, r2
 8000aa0:	0959      	lsrs	r1, r3, #5
 8000aa2:	460b      	mov	r3, r1
 8000aa4:	011b      	lsls	r3, r3, #4
 8000aa6:	1a5b      	subs	r3, r3, r1
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	1ad3      	subs	r3, r2, r3
 8000aac:	607b      	str	r3, [r7, #4]
      uint32_t hour = totalMin / 60;
 8000aae:	68bb      	ldr	r3, [r7, #8]
 8000ab0:	4a1a      	ldr	r2, [pc, #104]	@ (8000b1c <_Z20bsp_sd_write_testingv+0xe8>)
 8000ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ab6:	095b      	lsrs	r3, r3, #5
 8000ab8:	603b      	str	r3, [r7, #0]

     // 格式化时间字符串
     sprintf(timeStr, "%02lu:%02lu:%02lu:%03lu\r\n", hour, min, sec, ms);
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	9301      	str	r3, [sp, #4]
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	9300      	str	r3, [sp, #0]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	683a      	ldr	r2, [r7, #0]
 8000ac6:	4916      	ldr	r1, [pc, #88]	@ (8000b20 <_Z20bsp_sd_write_testingv+0xec>)
 8000ac8:	4816      	ldr	r0, [pc, #88]	@ (8000b24 <_Z20bsp_sd_write_testingv+0xf0>)
 8000aca:	f015 fbe5 	bl	8016298 <siprintf>

      // 写入文件
     if(f_write(&file, timeStr, strlen(timeStr), &fnum) == FR_OK)
 8000ace:	4815      	ldr	r0, [pc, #84]	@ (8000b24 <_Z20bsp_sd_write_testingv+0xf0>)
 8000ad0:	f7ff fc06 	bl	80002e0 <strlen>
 8000ad4:	4602      	mov	r2, r0
 8000ad6:	4b14      	ldr	r3, [pc, #80]	@ (8000b28 <_Z20bsp_sd_write_testingv+0xf4>)
 8000ad8:	4912      	ldr	r1, [pc, #72]	@ (8000b24 <_Z20bsp_sd_write_testingv+0xf0>)
 8000ada:	4814      	ldr	r0, [pc, #80]	@ (8000b2c <_Z20bsp_sd_write_testingv+0xf8>)
 8000adc:	f010 fbab 	bl	8011236 <f_write>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	bf0c      	ite	eq
 8000ae6:	2301      	moveq	r3, #1
 8000ae8:	2300      	movne	r3, #0
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d007      	beq.n	8000b00 <_Z20bsp_sd_write_testingv+0xcc>
     {
       // 确保数据写入到磁盘
       f_sync(&file);
 8000af0:	480e      	ldr	r0, [pc, #56]	@ (8000b2c <_Z20bsp_sd_write_testingv+0xf8>)
 8000af2:	f010 fd44 	bl	801157e <f_sync>
       printf("写入成功: %s", timeStr);
 8000af6:	490b      	ldr	r1, [pc, #44]	@ (8000b24 <_Z20bsp_sd_write_testingv+0xf0>)
 8000af8:	480d      	ldr	r0, [pc, #52]	@ (8000b30 <_Z20bsp_sd_write_testingv+0xfc>)
 8000afa:	f015 faa9 	bl	8016050 <iprintf>
 8000afe:	e002      	b.n	8000b06 <_Z20bsp_sd_write_testingv+0xd2>
     }
     else
     {
       printf("写入失败\r\n");
 8000b00:	480c      	ldr	r0, [pc, #48]	@ (8000b34 <_Z20bsp_sd_write_testingv+0x100>)
 8000b02:	f015 fb0d 	bl	8016120 <puts>
     }

      lastWriteTime = currentTime;
 8000b06:	4a03      	ldr	r2, [pc, #12]	@ (8000b14 <_Z20bsp_sd_write_testingv+0xe0>)
 8000b08:	69fb      	ldr	r3, [r7, #28]
 8000b0a:	6013      	str	r3, [r2, #0]
    }
}
 8000b0c:	bf00      	nop
 8000b0e:	3720      	adds	r7, #32
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	240006ec 	.word	0x240006ec
 8000b18:	10624dd3 	.word	0x10624dd3
 8000b1c:	88888889 	.word	0x88888889
 8000b20:	08017464 	.word	0x08017464
 8000b24:	240006f0 	.word	0x240006f0
 8000b28:	240006e8 	.word	0x240006e8
 8000b2c:	240004b4 	.word	0x240004b4
 8000b30:	08017480 	.word	0x08017480
 8000b34:	08017494 	.word	0x08017494

08000b38 <_Z19angleUpdateCallbackm>:

Encoder485 encoder485(&htim3, 1, &huart2);
EventGroupHandle_t encoderEventGroup = NULL; // 事件组用于编码器任务同步
#define ENCODER_TICK_EVENT_BIT (1 << 0)

void angleUpdateCallback(uint32_t position){
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  // if(f_write(&file, timeStr, strlen(timeStr), &fnum) == FR_OK) {
  //   f_sync(&file);  // 确保数据写入到磁盘
  // } else {
  //   printf("data write failed\r\n");
  // }
  printf("angleUpdateCallback: %lu\n", position);
 8000b40:	6879      	ldr	r1, [r7, #4]
 8000b42:	4803      	ldr	r0, [pc, #12]	@ (8000b50 <_Z19angleUpdateCallbackm+0x18>)
 8000b44:	f015 fa84 	bl	8016050 <iprintf>
}
 8000b48:	bf00      	nop
 8000b4a:	3708      	adds	r7, #8
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	080174a4 	.word	0x080174a4

08000b54 <_Z16StartDefaultTaskPv>:



void StartDefaultTask(void *argument)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af02      	add	r7, sp, #8
 8000b5a:	6078      	str	r0, [r7, #4]
  encoder485.setAngleUpdateCallback(angleUpdateCallback);
 8000b5c:	4925      	ldr	r1, [pc, #148]	@ (8000bf4 <_Z16StartDefaultTaskPv+0xa0>)
 8000b5e:	4826      	ldr	r0, [pc, #152]	@ (8000bf8 <_Z16StartDefaultTaskPv+0xa4>)
 8000b60:	f002 fde0 	bl	8003724 <_ZN21ModbusAbsoluteEncoder22setAngleUpdateCallbackEPFvmE>
  // 初始化编码器
  while(!encoder485.isInitialized()){
 8000b64:	e012      	b.n	8000b8c <_Z16StartDefaultTaskPv+0x38>
    encoder485.init();
 8000b66:	4824      	ldr	r0, [pc, #144]	@ (8000bf8 <_Z16StartDefaultTaskPv+0xa4>)
 8000b68:	f000 fec8 	bl	80018fc <_ZN10Encoder4854initEv>
    if(!encoder485.isInitialized()){
 8000b6c:	4822      	ldr	r0, [pc, #136]	@ (8000bf8 <_Z16StartDefaultTaskPv+0xa4>)
 8000b6e:	f7ff fda5 	bl	80006bc <_ZNK21ModbusAbsoluteEncoder13isInitializedEv>
 8000b72:	4603      	mov	r3, r0
 8000b74:	f083 0301 	eor.w	r3, r3, #1
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d006      	beq.n	8000b8c <_Z16StartDefaultTaskPv+0x38>
      printf("Encoder initialization failed, retrying in 10s...");
 8000b7e:	481f      	ldr	r0, [pc, #124]	@ (8000bfc <_Z16StartDefaultTaskPv+0xa8>)
 8000b80:	f015 fa66 	bl	8016050 <iprintf>
      osDelay(10000);
 8000b84:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000b88:	f011 f85a 	bl	8011c40 <osDelay>
  while(!encoder485.isInitialized()){
 8000b8c:	481a      	ldr	r0, [pc, #104]	@ (8000bf8 <_Z16StartDefaultTaskPv+0xa4>)
 8000b8e:	f7ff fd95 	bl	80006bc <_ZNK21ModbusAbsoluteEncoder13isInitializedEv>
 8000b92:	4603      	mov	r3, r0
 8000b94:	f083 0301 	eor.w	r3, r3, #1
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d1e3      	bne.n	8000b66 <_Z16StartDefaultTaskPv+0x12>
    }
  }
  // 创建事件组（若尚未创建）
  if(encoderEventGroup == NULL){
 8000b9e:	4b18      	ldr	r3, [pc, #96]	@ (8000c00 <_Z16StartDefaultTaskPv+0xac>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d104      	bne.n	8000bb0 <_Z16StartDefaultTaskPv+0x5c>
      encoderEventGroup = xEventGroupCreate();
 8000ba6:	f011 fb0f 	bl	80121c8 <xEventGroupCreate>
 8000baa:	4603      	mov	r3, r0
 8000bac:	4a14      	ldr	r2, [pc, #80]	@ (8000c00 <_Z16StartDefaultTaskPv+0xac>)
 8000bae:	6013      	str	r3, [r2, #0]
  }
  encoder485.startAsyncReading(400);
 8000bb0:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8000bb4:	4810      	ldr	r0, [pc, #64]	@ (8000bf8 <_Z16StartDefaultTaskPv+0xa4>)
 8000bb6:	f002 fc4b 	bl	8003450 <_ZN21ModbusAbsoluteEncoder17startAsyncReadingEm>
   printf("Encoder task ready, waiting for TIM3 notifications...");
 8000bba:	4812      	ldr	r0, [pc, #72]	@ (8000c04 <_Z16StartDefaultTaskPv+0xb0>)
 8000bbc:	f015 fa48 	bl	8016050 <iprintf>
  for(;;)
  {
    osDelay(1000);
 8000bc0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bc4:	f011 f83c 	bl	8011c40 <osDelay>
    HAL_GPIO_TogglePin(PE3_GPIO_Port,PE3_Pin);
 8000bc8:	2108      	movs	r1, #8
 8000bca:	480f      	ldr	r0, [pc, #60]	@ (8000c08 <_Z16StartDefaultTaskPv+0xb4>)
 8000bcc:	f004 f9af 	bl	8004f2e <HAL_GPIO_TogglePin>
    bsp_sd_write_testing();
 8000bd0:	f7ff ff30 	bl	8000a34 <_Z20bsp_sd_write_testingv>
    xEventGroupWaitBits(encoderEventGroup, ENCODER_TICK_EVENT_BIT, pdTRUE, pdFALSE, portMAX_DELAY);
 8000bd4:	4b0a      	ldr	r3, [pc, #40]	@ (8000c00 <_Z16StartDefaultTaskPv+0xac>)
 8000bd6:	6818      	ldr	r0, [r3, #0]
 8000bd8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000bdc:	9300      	str	r3, [sp, #0]
 8000bde:	2300      	movs	r3, #0
 8000be0:	2201      	movs	r2, #1
 8000be2:	2101      	movs	r1, #1
 8000be4:	f011 fb0a 	bl	80121fc <xEventGroupWaitBits>
    encoder485.asyncUpdateCallback();
 8000be8:	4803      	ldr	r0, [pc, #12]	@ (8000bf8 <_Z16StartDefaultTaskPv+0xa4>)
 8000bea:	f002 fd19 	bl	8003620 <_ZN21ModbusAbsoluteEncoder19asyncUpdateCallbackEv>
    osDelay(1000);
 8000bee:	bf00      	nop
 8000bf0:	e7e6      	b.n	8000bc0 <_Z16StartDefaultTaskPv+0x6c>
 8000bf2:	bf00      	nop
 8000bf4:	08000b39 	.word	0x08000b39
 8000bf8:	24000704 	.word	0x24000704
 8000bfc:	080174c0 	.word	0x080174c0
 8000c00:	240008c4 	.word	0x240008c4
 8000c04:	080174f4 	.word	0x080174f4
 8000c08:	58021000 	.word	0x58021000

08000c0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	#ifdef W25Qxx
	  SCB->VTOR = QSPI_BASE;
		#endif
	MPU_Config();
 8000c10:	f7ff fd61 	bl	80006d6 <_ZL10MPU_Configv>
	CPU_CACHE_Enable();
 8000c14:	f7ff fdc2 	bl	800079c <_ZL16CPU_CACHE_Enablev>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c18:	f003 f874 	bl	8003d04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c1c:	f000 f82e 	bl	8000c7c <_Z18SystemClock_Configv>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000c20:	f000 f8b6 	bl	8000d90 <_Z24PeriphCommonClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c24:	f000 fa30 	bl	8001088 <_ZL12MX_GPIO_Initv>
  MX_SDMMC1_SD_Init();
 8000c28:	f000 f8ea 	bl	8000e00 <_ZL17MX_SDMMC1_SD_Initv>
  MX_USART2_UART_Init();
 8000c2c:	f000 f96c 	bl	8000f08 <_ZL19MX_USART2_UART_Initv>
  MX_USART3_UART_Init();
 8000c30:	f000 f9ca 	bl	8000fc8 <_ZL19MX_USART3_UART_Initv>
  MX_FATFS_Init();
 8000c34:	f00e f908 	bl	800ee48 <MX_FATFS_Init>
  MX_TIM3_Init();
 8000c38:	f000 f900 	bl	8000e3c <_ZL12MX_TIM3_Initv>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart3);
 8000c3c:	480b      	ldr	r0, [pc, #44]	@ (8000c6c <main+0x60>)
 8000c3e:	f002 ff9b 	bl	8003b78 <RetargetInit>
  HAL_Delay(1000);
 8000c42:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c46:	f003 f8b9 	bl	8003dbc <HAL_Delay>
  bsp_sd_init();
 8000c4a:	f7ff fe29 	bl	80008a0 <_Z11bsp_sd_initv>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000c4e:	f010 fed9 	bl	8011a04 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of DefaultTask */
  DefaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &DefaultTask_attributes);
 8000c52:	4a07      	ldr	r2, [pc, #28]	@ (8000c70 <main+0x64>)
 8000c54:	2100      	movs	r1, #0
 8000c56:	4807      	ldr	r0, [pc, #28]	@ (8000c74 <main+0x68>)
 8000c58:	f010 ff55 	bl	8011b06 <osThreadNew>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	4a06      	ldr	r2, [pc, #24]	@ (8000c78 <main+0x6c>)
 8000c60:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000c62:	f010 ff15 	bl	8011a90 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c66:	bf00      	nop
 8000c68:	e7fd      	b.n	8000c66 <main+0x5a>
 8000c6a:	bf00      	nop
 8000c6c:	240001e8 	.word	0x240001e8
 8000c70:	08017600 	.word	0x08017600
 8000c74:	08000b55 	.word	0x08000b55
 8000c78:	2400027c 	.word	0x2400027c

08000c7c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b09c      	sub	sp, #112	@ 0x70
 8000c80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c86:	224c      	movs	r2, #76	@ 0x4c
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f015 fbfe 	bl	801648c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c90:	1d3b      	adds	r3, r7, #4
 8000c92:	2220      	movs	r2, #32
 8000c94:	2100      	movs	r1, #0
 8000c96:	4618      	mov	r0, r3
 8000c98:	f015 fbf8 	bl	801648c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000c9c:	2002      	movs	r0, #2
 8000c9e:	f004 f961 	bl	8004f64 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	603b      	str	r3, [r7, #0]
 8000ca6:	4b38      	ldr	r3, [pc, #224]	@ (8000d88 <_Z18SystemClock_Configv+0x10c>)
 8000ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000caa:	4a37      	ldr	r2, [pc, #220]	@ (8000d88 <_Z18SystemClock_Configv+0x10c>)
 8000cac:	f023 0301 	bic.w	r3, r3, #1
 8000cb0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000cb2:	4b35      	ldr	r3, [pc, #212]	@ (8000d88 <_Z18SystemClock_Configv+0x10c>)
 8000cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cb6:	f003 0301 	and.w	r3, r3, #1
 8000cba:	603b      	str	r3, [r7, #0]
 8000cbc:	4b33      	ldr	r3, [pc, #204]	@ (8000d8c <_Z18SystemClock_Configv+0x110>)
 8000cbe:	699b      	ldr	r3, [r3, #24]
 8000cc0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000cc4:	4a31      	ldr	r2, [pc, #196]	@ (8000d8c <_Z18SystemClock_Configv+0x110>)
 8000cc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000cca:	6193      	str	r3, [r2, #24]
 8000ccc:	4b2f      	ldr	r3, [pc, #188]	@ (8000d8c <_Z18SystemClock_Configv+0x110>)
 8000cce:	699b      	ldr	r3, [r3, #24]
 8000cd0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000cd4:	603b      	str	r3, [r7, #0]
 8000cd6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000cd8:	bf00      	nop
 8000cda:	4b2c      	ldr	r3, [pc, #176]	@ (8000d8c <_Z18SystemClock_Configv+0x110>)
 8000cdc:	699b      	ldr	r3, [r3, #24]
 8000cde:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ce2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000ce6:	bf14      	ite	ne
 8000ce8:	2301      	movne	r3, #1
 8000cea:	2300      	moveq	r3, #0
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d1f3      	bne.n	8000cda <_Z18SystemClock_Configv+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cf6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000cfa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d00:	2302      	movs	r3, #2
 8000d02:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000d04:	2305      	movs	r3, #5
 8000d06:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000d08:	2360      	movs	r3, #96	@ 0x60
 8000d0a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 10;
 8000d10:	230a      	movs	r3, #10
 8000d12:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d14:	2302      	movs	r3, #2
 8000d16:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000d18:	2308      	movs	r3, #8
 8000d1a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d20:	2300      	movs	r3, #0
 8000d22:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f004 f955 	bl	8004fd8 <HAL_RCC_OscConfig>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	bf14      	ite	ne
 8000d34:	2301      	movne	r3, #1
 8000d36:	2300      	moveq	r3, #0
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <_Z18SystemClock_Configv+0xc6>
  {
    Error_Handler();
 8000d3e:	f000 fa27 	bl	8001190 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d42:	233f      	movs	r3, #63	@ 0x3f
 8000d44:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d46:	2303      	movs	r3, #3
 8000d48:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000d4e:	2308      	movs	r3, #8
 8000d50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000d52:	2300      	movs	r3, #0
 8000d54:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000d56:	2300      	movs	r3, #0
 8000d58:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d62:	1d3b      	adds	r3, r7, #4
 8000d64:	2102      	movs	r1, #2
 8000d66:	4618      	mov	r0, r3
 8000d68:	f004 fd90 	bl	800588c <HAL_RCC_ClockConfig>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	bf14      	ite	ne
 8000d72:	2301      	movne	r3, #1
 8000d74:	2300      	moveq	r3, #0
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <_Z18SystemClock_Configv+0x104>
  {
    Error_Handler();
 8000d7c:	f000 fa08 	bl	8001190 <Error_Handler>
  }
}
 8000d80:	bf00      	nop
 8000d82:	3770      	adds	r7, #112	@ 0x70
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	58000400 	.word	0x58000400
 8000d8c:	58024800 	.word	0x58024800

08000d90 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b0b0      	sub	sp, #192	@ 0xc0
 8000d94:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d96:	463b      	mov	r3, r7
 8000d98:	22c0      	movs	r2, #192	@ 0xc0
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f015 fb75 	bl	801648c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_USART2
 8000da2:	4a16      	ldr	r2, [pc, #88]	@ (8000dfc <_Z24PeriphCommonClock_Configv+0x6c>)
 8000da4:	f04f 0300 	mov.w	r3, #0
 8000da8:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_USART3;
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000dac:	2302      	movs	r3, #2
 8000dae:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000db0:	230c      	movs	r3, #12
 8000db2:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000db4:	2302      	movs	r3, #2
 8000db6:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000db8:	2302      	movs	r3, #2
 8000dba:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 3;
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000dc0:	23c0      	movs	r3, #192	@ 0xc0
 8000dc2:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000dc4:	2320      	movs	r3, #32
 8000dc6:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8000dcc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000dd0:	653b      	str	r3, [r7, #80]	@ 0x50
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL2;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dd6:	463b      	mov	r3, r7
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f005 f925 	bl	8006028 <HAL_RCCEx_PeriphCLKConfig>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	bf14      	ite	ne
 8000de4:	2301      	movne	r3, #1
 8000de6:	2300      	moveq	r3, #0
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <_Z24PeriphCommonClock_Configv+0x62>
  {
    Error_Handler();
 8000dee:	f000 f9cf 	bl	8001190 <Error_Handler>
  }
}
 8000df2:	bf00      	nop
 8000df4:	37c0      	adds	r7, #192	@ 0xc0
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	00010002 	.word	0x00010002

08000e00 <_ZL17MX_SDMMC1_SD_Initv>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000e04:	4b0b      	ldr	r3, [pc, #44]	@ (8000e34 <_ZL17MX_SDMMC1_SD_Initv+0x34>)
 8000e06:	4a0c      	ldr	r2, [pc, #48]	@ (8000e38 <_ZL17MX_SDMMC1_SD_Initv+0x38>)
 8000e08:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000e0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e34 <_ZL17MX_SDMMC1_SD_Initv+0x34>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000e10:	4b08      	ldr	r3, [pc, #32]	@ (8000e34 <_ZL17MX_SDMMC1_SD_Initv+0x34>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000e16:	4b07      	ldr	r3, [pc, #28]	@ (8000e34 <_ZL17MX_SDMMC1_SD_Initv+0x34>)
 8000e18:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e1c:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000e1e:	4b05      	ldr	r3, [pc, #20]	@ (8000e34 <_ZL17MX_SDMMC1_SD_Initv+0x34>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000e24:	4b03      	ldr	r3, [pc, #12]	@ (8000e34 <_ZL17MX_SDMMC1_SD_Initv+0x34>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000e2a:	bf00      	nop
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	2400008c 	.word	0x2400008c
 8000e38:	52007000 	.word	0x52007000

08000e3c <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b08a      	sub	sp, #40	@ 0x28
 8000e40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e42:	f107 031c 	add.w	r3, r7, #28
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	605a      	str	r2, [r3, #4]
 8000e4c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e4e:	463b      	mov	r3, r7
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]
 8000e5a:	611a      	str	r2, [r3, #16]
 8000e5c:	615a      	str	r2, [r3, #20]
 8000e5e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e60:	4b27      	ldr	r3, [pc, #156]	@ (8000f00 <_ZL12MX_TIM3_Initv+0xc4>)
 8000e62:	4a28      	ldr	r2, [pc, #160]	@ (8000f04 <_ZL12MX_TIM3_Initv+0xc8>)
 8000e64:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2399;
 8000e66:	4b26      	ldr	r3, [pc, #152]	@ (8000f00 <_ZL12MX_TIM3_Initv+0xc4>)
 8000e68:	f640 125f 	movw	r2, #2399	@ 0x95f
 8000e6c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e6e:	4b24      	ldr	r3, [pc, #144]	@ (8000f00 <_ZL12MX_TIM3_Initv+0xc4>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000e74:	4b22      	ldr	r3, [pc, #136]	@ (8000f00 <_ZL12MX_TIM3_Initv+0xc4>)
 8000e76:	2263      	movs	r2, #99	@ 0x63
 8000e78:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e7a:	4b21      	ldr	r3, [pc, #132]	@ (8000f00 <_ZL12MX_TIM3_Initv+0xc4>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e80:	4b1f      	ldr	r3, [pc, #124]	@ (8000f00 <_ZL12MX_TIM3_Initv+0xc4>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000e86:	481e      	ldr	r0, [pc, #120]	@ (8000f00 <_ZL12MX_TIM3_Initv+0xc4>)
 8000e88:	f009 fb0a 	bl	800a4a0 <HAL_TIM_OC_Init>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	bf14      	ite	ne
 8000e92:	2301      	movne	r3, #1
 8000e94:	2300      	moveq	r3, #0
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <_ZL12MX_TIM3_Initv+0x64>
  {
    Error_Handler();
 8000e9c:	f000 f978 	bl	8001190 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ea8:	f107 031c 	add.w	r3, r7, #28
 8000eac:	4619      	mov	r1, r3
 8000eae:	4814      	ldr	r0, [pc, #80]	@ (8000f00 <_ZL12MX_TIM3_Initv+0xc4>)
 8000eb0:	f00a f87e 	bl	800afb0 <HAL_TIMEx_MasterConfigSynchronization>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	bf14      	ite	ne
 8000eba:	2301      	movne	r3, #1
 8000ebc:	2300      	moveq	r3, #0
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <_ZL12MX_TIM3_Initv+0x8c>
  {
    Error_Handler();
 8000ec4:	f000 f964 	bl	8001190 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ed8:	463b      	mov	r3, r7
 8000eda:	2200      	movs	r2, #0
 8000edc:	4619      	mov	r1, r3
 8000ede:	4808      	ldr	r0, [pc, #32]	@ (8000f00 <_ZL12MX_TIM3_Initv+0xc4>)
 8000ee0:	f009 fc54 	bl	800a78c <HAL_TIM_OC_ConfigChannel>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	bf14      	ite	ne
 8000eea:	2301      	movne	r3, #1
 8000eec:	2300      	moveq	r3, #0
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <_ZL12MX_TIM3_Initv+0xbc>
  {
    Error_Handler();
 8000ef4:	f000 f94c 	bl	8001190 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000ef8:	bf00      	nop
 8000efa:	3728      	adds	r7, #40	@ 0x28
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	24000108 	.word	0x24000108
 8000f04:	40000400 	.word	0x40000400

08000f08 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f0c:	4b2c      	ldr	r3, [pc, #176]	@ (8000fc0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000f0e:	4a2d      	ldr	r2, [pc, #180]	@ (8000fc4 <_ZL19MX_USART2_UART_Initv+0xbc>)
 8000f10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000f12:	4b2b      	ldr	r3, [pc, #172]	@ (8000fc0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000f14:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000f18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f1a:	4b29      	ldr	r3, [pc, #164]	@ (8000fc0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f20:	4b27      	ldr	r3, [pc, #156]	@ (8000fc0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f26:	4b26      	ldr	r3, [pc, #152]	@ (8000fc0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f2c:	4b24      	ldr	r3, [pc, #144]	@ (8000fc0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000f2e:	220c      	movs	r2, #12
 8000f30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f32:	4b23      	ldr	r3, [pc, #140]	@ (8000fc0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f38:	4b21      	ldr	r3, [pc, #132]	@ (8000fc0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f3e:	4b20      	ldr	r3, [pc, #128]	@ (8000fc0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f44:	4b1e      	ldr	r3, [pc, #120]	@ (8000fc0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f4a:	4b1d      	ldr	r3, [pc, #116]	@ (8000fc0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f50:	481b      	ldr	r0, [pc, #108]	@ (8000fc0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000f52:	f00a f8d9 	bl	800b108 <HAL_UART_Init>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	bf14      	ite	ne
 8000f5c:	2301      	movne	r3, #1
 8000f5e:	2300      	moveq	r3, #0
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <_ZL19MX_USART2_UART_Initv+0x62>
  {
    Error_Handler();
 8000f66:	f000 f913 	bl	8001190 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	4814      	ldr	r0, [pc, #80]	@ (8000fc0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000f6e:	f00d f8d6 	bl	800e11e <HAL_UARTEx_SetTxFifoThreshold>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	bf14      	ite	ne
 8000f78:	2301      	movne	r3, #1
 8000f7a:	2300      	moveq	r3, #0
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <_ZL19MX_USART2_UART_Initv+0x7e>
  {
    Error_Handler();
 8000f82:	f000 f905 	bl	8001190 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f86:	2100      	movs	r1, #0
 8000f88:	480d      	ldr	r0, [pc, #52]	@ (8000fc0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000f8a:	f00d f906 	bl	800e19a <HAL_UARTEx_SetRxFifoThreshold>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	bf14      	ite	ne
 8000f94:	2301      	movne	r3, #1
 8000f96:	2300      	moveq	r3, #0
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <_ZL19MX_USART2_UART_Initv+0x9a>
  {
    Error_Handler();
 8000f9e:	f000 f8f7 	bl	8001190 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000fa2:	4807      	ldr	r0, [pc, #28]	@ (8000fc0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000fa4:	f00d f882 	bl	800e0ac <HAL_UARTEx_DisableFifoMode>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	bf14      	ite	ne
 8000fae:	2301      	movne	r3, #1
 8000fb0:	2300      	moveq	r3, #0
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <_ZL19MX_USART2_UART_Initv+0xb4>
  {
    Error_Handler();
 8000fb8:	f000 f8ea 	bl	8001190 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	24000154 	.word	0x24000154
 8000fc4:	40004400 	.word	0x40004400

08000fc8 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000fcc:	4b2c      	ldr	r3, [pc, #176]	@ (8001080 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000fce:	4a2d      	ldr	r2, [pc, #180]	@ (8001084 <_ZL19MX_USART3_UART_Initv+0xbc>)
 8000fd0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000fd2:	4b2b      	ldr	r3, [pc, #172]	@ (8001080 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000fd4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fd8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000fda:	4b29      	ldr	r3, [pc, #164]	@ (8001080 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000fe0:	4b27      	ldr	r3, [pc, #156]	@ (8001080 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000fe6:	4b26      	ldr	r3, [pc, #152]	@ (8001080 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000fec:	4b24      	ldr	r3, [pc, #144]	@ (8001080 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000fee:	220c      	movs	r2, #12
 8000ff0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ff2:	4b23      	ldr	r3, [pc, #140]	@ (8001080 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ff8:	4b21      	ldr	r3, [pc, #132]	@ (8001080 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ffe:	4b20      	ldr	r3, [pc, #128]	@ (8001080 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001000:	2200      	movs	r2, #0
 8001002:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001004:	4b1e      	ldr	r3, [pc, #120]	@ (8001080 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001006:	2200      	movs	r2, #0
 8001008:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800100a:	4b1d      	ldr	r3, [pc, #116]	@ (8001080 <_ZL19MX_USART3_UART_Initv+0xb8>)
 800100c:	2200      	movs	r2, #0
 800100e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001010:	481b      	ldr	r0, [pc, #108]	@ (8001080 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001012:	f00a f879 	bl	800b108 <HAL_UART_Init>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	bf14      	ite	ne
 800101c:	2301      	movne	r3, #1
 800101e:	2300      	moveq	r3, #0
 8001020:	b2db      	uxtb	r3, r3
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <_ZL19MX_USART3_UART_Initv+0x62>
  {
    Error_Handler();
 8001026:	f000 f8b3 	bl	8001190 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800102a:	2100      	movs	r1, #0
 800102c:	4814      	ldr	r0, [pc, #80]	@ (8001080 <_ZL19MX_USART3_UART_Initv+0xb8>)
 800102e:	f00d f876 	bl	800e11e <HAL_UARTEx_SetTxFifoThreshold>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	bf14      	ite	ne
 8001038:	2301      	movne	r3, #1
 800103a:	2300      	moveq	r3, #0
 800103c:	b2db      	uxtb	r3, r3
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <_ZL19MX_USART3_UART_Initv+0x7e>
  {
    Error_Handler();
 8001042:	f000 f8a5 	bl	8001190 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001046:	2100      	movs	r1, #0
 8001048:	480d      	ldr	r0, [pc, #52]	@ (8001080 <_ZL19MX_USART3_UART_Initv+0xb8>)
 800104a:	f00d f8a6 	bl	800e19a <HAL_UARTEx_SetRxFifoThreshold>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	bf14      	ite	ne
 8001054:	2301      	movne	r3, #1
 8001056:	2300      	moveq	r3, #0
 8001058:	b2db      	uxtb	r3, r3
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <_ZL19MX_USART3_UART_Initv+0x9a>
  {
    Error_Handler();
 800105e:	f000 f897 	bl	8001190 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001062:	4807      	ldr	r0, [pc, #28]	@ (8001080 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001064:	f00d f822 	bl	800e0ac <HAL_UARTEx_DisableFifoMode>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	bf14      	ite	ne
 800106e:	2301      	movne	r3, #1
 8001070:	2300      	moveq	r3, #0
 8001072:	b2db      	uxtb	r3, r3
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <_ZL19MX_USART3_UART_Initv+0xb4>
  {
    Error_Handler();
 8001078:	f000 f88a 	bl	8001190 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800107c:	bf00      	nop
 800107e:	bd80      	pop	{r7, pc}
 8001080:	240001e8 	.word	0x240001e8
 8001084:	40004800 	.word	0x40004800

08001088 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08a      	sub	sp, #40	@ 0x28
 800108c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108e:	f107 0314 	add.w	r3, r7, #20
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	605a      	str	r2, [r3, #4]
 8001098:	609a      	str	r2, [r3, #8]
 800109a:	60da      	str	r2, [r3, #12]
 800109c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800109e:	4b31      	ldr	r3, [pc, #196]	@ (8001164 <_ZL12MX_GPIO_Initv+0xdc>)
 80010a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010a4:	4a2f      	ldr	r2, [pc, #188]	@ (8001164 <_ZL12MX_GPIO_Initv+0xdc>)
 80010a6:	f043 0310 	orr.w	r3, r3, #16
 80010aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010ae:	4b2d      	ldr	r3, [pc, #180]	@ (8001164 <_ZL12MX_GPIO_Initv+0xdc>)
 80010b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010b4:	f003 0310 	and.w	r3, r3, #16
 80010b8:	613b      	str	r3, [r7, #16]
 80010ba:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010bc:	4b29      	ldr	r3, [pc, #164]	@ (8001164 <_ZL12MX_GPIO_Initv+0xdc>)
 80010be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010c2:	4a28      	ldr	r2, [pc, #160]	@ (8001164 <_ZL12MX_GPIO_Initv+0xdc>)
 80010c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010cc:	4b25      	ldr	r3, [pc, #148]	@ (8001164 <_ZL12MX_GPIO_Initv+0xdc>)
 80010ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010da:	4b22      	ldr	r3, [pc, #136]	@ (8001164 <_ZL12MX_GPIO_Initv+0xdc>)
 80010dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010e0:	4a20      	ldr	r2, [pc, #128]	@ (8001164 <_ZL12MX_GPIO_Initv+0xdc>)
 80010e2:	f043 0308 	orr.w	r3, r3, #8
 80010e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010ea:	4b1e      	ldr	r3, [pc, #120]	@ (8001164 <_ZL12MX_GPIO_Initv+0xdc>)
 80010ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010f0:	f003 0308 	and.w	r3, r3, #8
 80010f4:	60bb      	str	r3, [r7, #8]
 80010f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001164 <_ZL12MX_GPIO_Initv+0xdc>)
 80010fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010fe:	4a19      	ldr	r2, [pc, #100]	@ (8001164 <_ZL12MX_GPIO_Initv+0xdc>)
 8001100:	f043 0304 	orr.w	r3, r3, #4
 8001104:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001108:	4b16      	ldr	r3, [pc, #88]	@ (8001164 <_ZL12MX_GPIO_Initv+0xdc>)
 800110a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800110e:	f003 0304 	and.w	r3, r3, #4
 8001112:	607b      	str	r3, [r7, #4]
 8001114:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001116:	4b13      	ldr	r3, [pc, #76]	@ (8001164 <_ZL12MX_GPIO_Initv+0xdc>)
 8001118:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800111c:	4a11      	ldr	r2, [pc, #68]	@ (8001164 <_ZL12MX_GPIO_Initv+0xdc>)
 800111e:	f043 0301 	orr.w	r3, r3, #1
 8001122:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001126:	4b0f      	ldr	r3, [pc, #60]	@ (8001164 <_ZL12MX_GPIO_Initv+0xdc>)
 8001128:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800112c:	f003 0301 	and.w	r3, r3, #1
 8001130:	603b      	str	r3, [r7, #0]
 8001132:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PE3_GPIO_Port, PE3_Pin, GPIO_PIN_RESET);
 8001134:	2200      	movs	r2, #0
 8001136:	2108      	movs	r1, #8
 8001138:	480b      	ldr	r0, [pc, #44]	@ (8001168 <_ZL12MX_GPIO_Initv+0xe0>)
 800113a:	f003 fedf 	bl	8004efc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3_Pin */
  GPIO_InitStruct.Pin = PE3_Pin;
 800113e:	2308      	movs	r3, #8
 8001140:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001142:	2301      	movs	r3, #1
 8001144:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114a:	2300      	movs	r3, #0
 800114c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PE3_GPIO_Port, &GPIO_InitStruct);
 800114e:	f107 0314 	add.w	r3, r7, #20
 8001152:	4619      	mov	r1, r3
 8001154:	4804      	ldr	r0, [pc, #16]	@ (8001168 <_ZL12MX_GPIO_Initv+0xe0>)
 8001156:	f003 fd21 	bl	8004b9c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800115a:	bf00      	nop
 800115c:	3728      	adds	r7, #40	@ 0x28
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	58024400 	.word	0x58024400
 8001168:	58021000 	.word	0x58021000

0800116c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a04      	ldr	r2, [pc, #16]	@ (800118c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d101      	bne.n	8001182 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800117e:	f002 fdfd 	bl	8003d7c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40001000 	.word	0x40001000

08001190 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001194:	b672      	cpsid	i
}
 8001196:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001198:	bf00      	nop
 800119a:	e7fd      	b.n	8001198 <Error_Handler+0x8>

0800119c <_Z41__static_initialization_and_destruction_0v>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
Encoder485 encoder485(&htim3, 1, &huart2);
 80011a0:	4b03      	ldr	r3, [pc, #12]	@ (80011b0 <_Z41__static_initialization_and_destruction_0v+0x14>)
 80011a2:	2201      	movs	r2, #1
 80011a4:	4903      	ldr	r1, [pc, #12]	@ (80011b4 <_Z41__static_initialization_and_destruction_0v+0x18>)
 80011a6:	4804      	ldr	r0, [pc, #16]	@ (80011b8 <_Z41__static_initialization_and_destruction_0v+0x1c>)
 80011a8:	f000 fb8c 	bl	80018c4 <_ZN10Encoder485C1EP17TIM_HandleTypeDefhP20__UART_HandleTypeDef>
}
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	24000154 	.word	0x24000154
 80011b4:	24000108 	.word	0x24000108
 80011b8:	24000704 	.word	0x24000704

080011bc <_ZN21ModbusAbsoluteEncoderD1Ev>:
    virtual ~ModbusAbsoluteEncoder() = default;
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	4a04      	ldr	r2, [pc, #16]	@ (80011d8 <_ZN21ModbusAbsoluteEncoderD1Ev+0x1c>)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4618      	mov	r0, r3
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	080176ec 	.word	0x080176ec

080011dc <_ZN21ModbusAbsoluteEncoderD0Ev>:
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f7ff ffe9 	bl	80011bc <_ZN21ModbusAbsoluteEncoderD1Ev>
 80011ea:	f44f 71de 	mov.w	r1, #444	@ 0x1bc
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f014 fdaa 	bl	8015d48 <_ZdlPvj>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4618      	mov	r0, r3
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
	...

08001200 <_ZN10Encoder485D1Ev>:

#include "ModbusAbsoluteEncoder.h"
#include "main.h"
#include <stdint.h>

class Encoder485 : public ModbusAbsoluteEncoder {
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	4a05      	ldr	r2, [pc, #20]	@ (8001220 <_ZN10Encoder485D1Ev+0x20>)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff ffd3 	bl	80011bc <_ZN21ModbusAbsoluteEncoderD1Ev>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4618      	mov	r0, r3
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	0801763c 	.word	0x0801763c

08001224 <_ZN10Encoder485D0Ev>:
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f7ff ffe7 	bl	8001200 <_ZN10Encoder485D1Ev>
 8001232:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f014 fd86 	bl	8015d48 <_ZdlPvj>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	4618      	mov	r0, r3
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
	...

08001248 <_Z41__static_initialization_and_destruction_1v>:
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
Encoder485 encoder485(&htim3, 1, &huart2);
 800124c:	4802      	ldr	r0, [pc, #8]	@ (8001258 <_Z41__static_initialization_and_destruction_1v+0x10>)
 800124e:	f7ff ffd7 	bl	8001200 <_ZN10Encoder485D1Ev>
}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	24000704 	.word	0x24000704

0800125c <_GLOBAL__sub_I_hsd1>:
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
 8001260:	f7ff ff9c 	bl	800119c <_Z41__static_initialization_and_destruction_0v>
 8001264:	bd80      	pop	{r7, pc}

08001266 <_GLOBAL__sub_D_hsd1>:
 8001266:	b580      	push	{r7, lr}
 8001268:	af00      	add	r7, sp, #0
 800126a:	f7ff ffed 	bl	8001248 <_Z41__static_initialization_and_destruction_1v>
 800126e:	bd80      	pop	{r7, pc}

08001270 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001276:	4b0c      	ldr	r3, [pc, #48]	@ (80012a8 <HAL_MspInit+0x38>)
 8001278:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800127c:	4a0a      	ldr	r2, [pc, #40]	@ (80012a8 <HAL_MspInit+0x38>)
 800127e:	f043 0302 	orr.w	r3, r3, #2
 8001282:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001286:	4b08      	ldr	r3, [pc, #32]	@ (80012a8 <HAL_MspInit+0x38>)
 8001288:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800128c:	f003 0302 	and.w	r3, r3, #2
 8001290:	607b      	str	r3, [r7, #4]
 8001292:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001294:	2200      	movs	r2, #0
 8001296:	210f      	movs	r1, #15
 8001298:	f06f 0001 	mvn.w	r0, #1
 800129c:	f002 fe76 	bl	8003f8c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012a0:	bf00      	nop
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	58024400 	.word	0x58024400

080012ac <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08a      	sub	sp, #40	@ 0x28
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b4:	f107 0314 	add.w	r3, r7, #20
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]
 80012c2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a2e      	ldr	r2, [pc, #184]	@ (8001384 <HAL_SD_MspInit+0xd8>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d155      	bne.n	800137a <HAL_SD_MspInit+0xce>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80012ce:	4b2e      	ldr	r3, [pc, #184]	@ (8001388 <HAL_SD_MspInit+0xdc>)
 80012d0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80012d4:	4a2c      	ldr	r2, [pc, #176]	@ (8001388 <HAL_SD_MspInit+0xdc>)
 80012d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012da:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80012de:	4b2a      	ldr	r3, [pc, #168]	@ (8001388 <HAL_SD_MspInit+0xdc>)
 80012e0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80012e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012e8:	613b      	str	r3, [r7, #16]
 80012ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ec:	4b26      	ldr	r3, [pc, #152]	@ (8001388 <HAL_SD_MspInit+0xdc>)
 80012ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012f2:	4a25      	ldr	r2, [pc, #148]	@ (8001388 <HAL_SD_MspInit+0xdc>)
 80012f4:	f043 0304 	orr.w	r3, r3, #4
 80012f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012fc:	4b22      	ldr	r3, [pc, #136]	@ (8001388 <HAL_SD_MspInit+0xdc>)
 80012fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001302:	f003 0304 	and.w	r3, r3, #4
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800130a:	4b1f      	ldr	r3, [pc, #124]	@ (8001388 <HAL_SD_MspInit+0xdc>)
 800130c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001310:	4a1d      	ldr	r2, [pc, #116]	@ (8001388 <HAL_SD_MspInit+0xdc>)
 8001312:	f043 0308 	orr.w	r3, r3, #8
 8001316:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800131a:	4b1b      	ldr	r3, [pc, #108]	@ (8001388 <HAL_SD_MspInit+0xdc>)
 800131c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001320:	f003 0308 	and.w	r3, r3, #8
 8001324:	60bb      	str	r3, [r7, #8]
 8001326:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001328:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800132c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132e:	2302      	movs	r3, #2
 8001330:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001336:	2303      	movs	r3, #3
 8001338:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800133a:	230c      	movs	r3, #12
 800133c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800133e:	f107 0314 	add.w	r3, r7, #20
 8001342:	4619      	mov	r1, r3
 8001344:	4811      	ldr	r0, [pc, #68]	@ (800138c <HAL_SD_MspInit+0xe0>)
 8001346:	f003 fc29 	bl	8004b9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800134a:	2304      	movs	r3, #4
 800134c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134e:	2302      	movs	r3, #2
 8001350:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	2300      	movs	r3, #0
 8001354:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001356:	2303      	movs	r3, #3
 8001358:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800135a:	230c      	movs	r3, #12
 800135c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800135e:	f107 0314 	add.w	r3, r7, #20
 8001362:	4619      	mov	r1, r3
 8001364:	480a      	ldr	r0, [pc, #40]	@ (8001390 <HAL_SD_MspInit+0xe4>)
 8001366:	f003 fc19 	bl	8004b9c <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 800136a:	2200      	movs	r2, #0
 800136c:	2105      	movs	r1, #5
 800136e:	2031      	movs	r0, #49	@ 0x31
 8001370:	f002 fe0c 	bl	8003f8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001374:	2031      	movs	r0, #49	@ 0x31
 8001376:	f002 fe23 	bl	8003fc0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800137a:	bf00      	nop
 800137c:	3728      	adds	r7, #40	@ 0x28
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	52007000 	.word	0x52007000
 8001388:	58024400 	.word	0x58024400
 800138c:	58020800 	.word	0x58020800
 8001390:	58020c00 	.word	0x58020c00

08001394 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM3)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a0e      	ldr	r2, [pc, #56]	@ (80013dc <HAL_TIM_OC_MspInit+0x48>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d116      	bne.n	80013d4 <HAL_TIM_OC_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013a6:	4b0e      	ldr	r3, [pc, #56]	@ (80013e0 <HAL_TIM_OC_MspInit+0x4c>)
 80013a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013ac:	4a0c      	ldr	r2, [pc, #48]	@ (80013e0 <HAL_TIM_OC_MspInit+0x4c>)
 80013ae:	f043 0302 	orr.w	r3, r3, #2
 80013b2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80013b6:	4b0a      	ldr	r3, [pc, #40]	@ (80013e0 <HAL_TIM_OC_MspInit+0x4c>)
 80013b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013bc:	f003 0302 	and.w	r3, r3, #2
 80013c0:	60fb      	str	r3, [r7, #12]
 80013c2:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80013c4:	2200      	movs	r2, #0
 80013c6:	2105      	movs	r1, #5
 80013c8:	201d      	movs	r0, #29
 80013ca:	f002 fddf 	bl	8003f8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80013ce:	201d      	movs	r0, #29
 80013d0:	f002 fdf6 	bl	8003fc0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80013d4:	bf00      	nop
 80013d6:	3710      	adds	r7, #16
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	40000400 	.word	0x40000400
 80013e0:	58024400 	.word	0x58024400

080013e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b08c      	sub	sp, #48	@ 0x30
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ec:	f107 031c 	add.w	r3, r7, #28
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a3c      	ldr	r2, [pc, #240]	@ (80014f4 <HAL_UART_MspInit+0x110>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d136      	bne.n	8001474 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001406:	4b3c      	ldr	r3, [pc, #240]	@ (80014f8 <HAL_UART_MspInit+0x114>)
 8001408:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800140c:	4a3a      	ldr	r2, [pc, #232]	@ (80014f8 <HAL_UART_MspInit+0x114>)
 800140e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001412:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001416:	4b38      	ldr	r3, [pc, #224]	@ (80014f8 <HAL_UART_MspInit+0x114>)
 8001418:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800141c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001420:	61bb      	str	r3, [r7, #24]
 8001422:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001424:	4b34      	ldr	r3, [pc, #208]	@ (80014f8 <HAL_UART_MspInit+0x114>)
 8001426:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800142a:	4a33      	ldr	r2, [pc, #204]	@ (80014f8 <HAL_UART_MspInit+0x114>)
 800142c:	f043 0308 	orr.w	r3, r3, #8
 8001430:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001434:	4b30      	ldr	r3, [pc, #192]	@ (80014f8 <HAL_UART_MspInit+0x114>)
 8001436:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800143a:	f003 0308 	and.w	r3, r3, #8
 800143e:	617b      	str	r3, [r7, #20]
 8001440:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001442:	2360      	movs	r3, #96	@ 0x60
 8001444:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001446:	2302      	movs	r3, #2
 8001448:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	2300      	movs	r3, #0
 800144c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144e:	2300      	movs	r3, #0
 8001450:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001452:	2307      	movs	r3, #7
 8001454:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001456:	f107 031c 	add.w	r3, r7, #28
 800145a:	4619      	mov	r1, r3
 800145c:	4827      	ldr	r0, [pc, #156]	@ (80014fc <HAL_UART_MspInit+0x118>)
 800145e:	f003 fb9d 	bl	8004b9c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001462:	2200      	movs	r2, #0
 8001464:	2105      	movs	r1, #5
 8001466:	2026      	movs	r0, #38	@ 0x26
 8001468:	f002 fd90 	bl	8003f8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800146c:	2026      	movs	r0, #38	@ 0x26
 800146e:	f002 fda7 	bl	8003fc0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001472:	e03b      	b.n	80014ec <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART3)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a21      	ldr	r2, [pc, #132]	@ (8001500 <HAL_UART_MspInit+0x11c>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d136      	bne.n	80014ec <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART3_CLK_ENABLE();
 800147e:	4b1e      	ldr	r3, [pc, #120]	@ (80014f8 <HAL_UART_MspInit+0x114>)
 8001480:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001484:	4a1c      	ldr	r2, [pc, #112]	@ (80014f8 <HAL_UART_MspInit+0x114>)
 8001486:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800148a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800148e:	4b1a      	ldr	r3, [pc, #104]	@ (80014f8 <HAL_UART_MspInit+0x114>)
 8001490:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001494:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001498:	613b      	str	r3, [r7, #16]
 800149a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800149c:	4b16      	ldr	r3, [pc, #88]	@ (80014f8 <HAL_UART_MspInit+0x114>)
 800149e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014a2:	4a15      	ldr	r2, [pc, #84]	@ (80014f8 <HAL_UART_MspInit+0x114>)
 80014a4:	f043 0308 	orr.w	r3, r3, #8
 80014a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014ac:	4b12      	ldr	r3, [pc, #72]	@ (80014f8 <HAL_UART_MspInit+0x114>)
 80014ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014b2:	f003 0308 	and.w	r3, r3, #8
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014ba:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80014be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c0:	2302      	movs	r3, #2
 80014c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c8:	2300      	movs	r3, #0
 80014ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014cc:	2307      	movs	r3, #7
 80014ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014d0:	f107 031c 	add.w	r3, r7, #28
 80014d4:	4619      	mov	r1, r3
 80014d6:	4809      	ldr	r0, [pc, #36]	@ (80014fc <HAL_UART_MspInit+0x118>)
 80014d8:	f003 fb60 	bl	8004b9c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80014dc:	2200      	movs	r2, #0
 80014de:	2105      	movs	r1, #5
 80014e0:	2027      	movs	r0, #39	@ 0x27
 80014e2:	f002 fd53 	bl	8003f8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80014e6:	2027      	movs	r0, #39	@ 0x27
 80014e8:	f002 fd6a 	bl	8003fc0 <HAL_NVIC_EnableIRQ>
}
 80014ec:	bf00      	nop
 80014ee:	3730      	adds	r7, #48	@ 0x30
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40004400 	.word	0x40004400
 80014f8:	58024400 	.word	0x58024400
 80014fc:	58020c00 	.word	0x58020c00
 8001500:	40004800 	.word	0x40004800

08001504 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b090      	sub	sp, #64	@ 0x40
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2b0f      	cmp	r3, #15
 8001510:	d827      	bhi.n	8001562 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001512:	2200      	movs	r2, #0
 8001514:	6879      	ldr	r1, [r7, #4]
 8001516:	2036      	movs	r0, #54	@ 0x36
 8001518:	f002 fd38 	bl	8003f8c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800151c:	2036      	movs	r0, #54	@ 0x36
 800151e:	f002 fd4f 	bl	8003fc0 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001522:	4a29      	ldr	r2, [pc, #164]	@ (80015c8 <HAL_InitTick+0xc4>)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001528:	4b28      	ldr	r3, [pc, #160]	@ (80015cc <HAL_InitTick+0xc8>)
 800152a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800152e:	4a27      	ldr	r2, [pc, #156]	@ (80015cc <HAL_InitTick+0xc8>)
 8001530:	f043 0310 	orr.w	r3, r3, #16
 8001534:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001538:	4b24      	ldr	r3, [pc, #144]	@ (80015cc <HAL_InitTick+0xc8>)
 800153a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800153e:	f003 0310 	and.w	r3, r3, #16
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001546:	f107 0210 	add.w	r2, r7, #16
 800154a:	f107 0314 	add.w	r3, r7, #20
 800154e:	4611      	mov	r1, r2
 8001550:	4618      	mov	r0, r3
 8001552:	f004 fd27 	bl	8005fa4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001558:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800155a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800155c:	2b00      	cmp	r3, #0
 800155e:	d106      	bne.n	800156e <HAL_InitTick+0x6a>
 8001560:	e001      	b.n	8001566 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e02b      	b.n	80015be <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001566:	f004 fcf1 	bl	8005f4c <HAL_RCC_GetPCLK1Freq>
 800156a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800156c:	e004      	b.n	8001578 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800156e:	f004 fced 	bl	8005f4c <HAL_RCC_GetPCLK1Freq>
 8001572:	4603      	mov	r3, r0
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001578:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800157a:	4a15      	ldr	r2, [pc, #84]	@ (80015d0 <HAL_InitTick+0xcc>)
 800157c:	fba2 2303 	umull	r2, r3, r2, r3
 8001580:	0c9b      	lsrs	r3, r3, #18
 8001582:	3b01      	subs	r3, #1
 8001584:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001586:	4b13      	ldr	r3, [pc, #76]	@ (80015d4 <HAL_InitTick+0xd0>)
 8001588:	4a13      	ldr	r2, [pc, #76]	@ (80015d8 <HAL_InitTick+0xd4>)
 800158a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800158c:	4b11      	ldr	r3, [pc, #68]	@ (80015d4 <HAL_InitTick+0xd0>)
 800158e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001592:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001594:	4a0f      	ldr	r2, [pc, #60]	@ (80015d4 <HAL_InitTick+0xd0>)
 8001596:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001598:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800159a:	4b0e      	ldr	r3, [pc, #56]	@ (80015d4 <HAL_InitTick+0xd0>)
 800159c:	2200      	movs	r2, #0
 800159e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015a0:	4b0c      	ldr	r3, [pc, #48]	@ (80015d4 <HAL_InitTick+0xd0>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80015a6:	480b      	ldr	r0, [pc, #44]	@ (80015d4 <HAL_InitTick+0xd0>)
 80015a8:	f008 fea0 	bl	800a2ec <HAL_TIM_Base_Init>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d104      	bne.n	80015bc <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80015b2:	4808      	ldr	r0, [pc, #32]	@ (80015d4 <HAL_InitTick+0xd0>)
 80015b4:	f008 fefc 	bl	800a3b0 <HAL_TIM_Base_Start_IT>
 80015b8:	4603      	mov	r3, r0
 80015ba:	e000      	b.n	80015be <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3740      	adds	r7, #64	@ 0x40
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	24000008 	.word	0x24000008
 80015cc:	58024400 	.word	0x58024400
 80015d0:	431bde83 	.word	0x431bde83
 80015d4:	240008c8 	.word	0x240008c8
 80015d8:	40001000 	.word	0x40001000

080015dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015e0:	bf00      	nop
 80015e2:	e7fd      	b.n	80015e0 <NMI_Handler+0x4>

080015e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015e8:	bf00      	nop
 80015ea:	e7fd      	b.n	80015e8 <HardFault_Handler+0x4>

080015ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015f0:	bf00      	nop
 80015f2:	e7fd      	b.n	80015f0 <MemManage_Handler+0x4>

080015f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015f8:	bf00      	nop
 80015fa:	e7fd      	b.n	80015f8 <BusFault_Handler+0x4>

080015fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001600:	bf00      	nop
 8001602:	e7fd      	b.n	8001600 <UsageFault_Handler+0x4>

08001604 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
	...

08001614 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800161a:	481c      	ldr	r0, [pc, #112]	@ (800168c <TIM3_IRQHandler+0x78>)
 800161c:	f008 ff97 	bl	800a54e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  // 使用任务通知替代直接调用编码器更新函数
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001620:	2300      	movs	r3, #0
 8001622:	603b      	str	r3, [r7, #0]

  // 发送任务通知给编码器任务
  if (encoderEventGroup != NULL) {
 8001624:	4b1a      	ldr	r3, [pc, #104]	@ (8001690 <TIM3_IRQHandler+0x7c>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d006      	beq.n	800163a <TIM3_IRQHandler+0x26>
    xEventGroupSetBitsFromISR(encoderEventGroup, ENCODER_TICK_EVENT_BIT, &xHigherPriorityTaskWoken);
 800162c:	4b18      	ldr	r3, [pc, #96]	@ (8001690 <TIM3_IRQHandler+0x7c>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	463a      	mov	r2, r7
 8001632:	2101      	movs	r1, #1
 8001634:	4618      	mov	r0, r3
 8001636:	f010 ff6f 	bl	8012518 <xEventGroupSetBitsFromISR>
  }

  // 中断频率统计
  tim3_irq_count++;
 800163a:	4b16      	ldr	r3, [pc, #88]	@ (8001694 <TIM3_IRQHandler+0x80>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	3301      	adds	r3, #1
 8001640:	4a14      	ldr	r2, [pc, #80]	@ (8001694 <TIM3_IRQHandler+0x80>)
 8001642:	6013      	str	r3, [r2, #0]
  uint32_t current_tick = HAL_GetTick();
 8001644:	f002 fbae 	bl	8003da4 <HAL_GetTick>
 8001648:	6078      	str	r0, [r7, #4]

  // 每1000毫秒（1秒）统计一次频率
  if (current_tick - tim3_last_tick >= 1000) {
 800164a:	4b13      	ldr	r3, [pc, #76]	@ (8001698 <TIM3_IRQHandler+0x84>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001656:	d309      	bcc.n	800166c <TIM3_IRQHandler+0x58>
    tim3_frequency = tim3_irq_count;
 8001658:	4b0e      	ldr	r3, [pc, #56]	@ (8001694 <TIM3_IRQHandler+0x80>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a0f      	ldr	r2, [pc, #60]	@ (800169c <TIM3_IRQHandler+0x88>)
 800165e:	6013      	str	r3, [r2, #0]

    // 重置计数器和时间戳
    tim3_irq_count = 0;
 8001660:	4b0c      	ldr	r3, [pc, #48]	@ (8001694 <TIM3_IRQHandler+0x80>)
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
    tim3_last_tick = current_tick;
 8001666:	4a0c      	ldr	r2, [pc, #48]	@ (8001698 <TIM3_IRQHandler+0x84>)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6013      	str	r3, [r2, #0]
  }

  // 如果需要进行任务切换，则执行
  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d007      	beq.n	8001682 <TIM3_IRQHandler+0x6e>
 8001672:	4b0b      	ldr	r3, [pc, #44]	@ (80016a0 <TIM3_IRQHandler+0x8c>)
 8001674:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	f3bf 8f4f 	dsb	sy
 800167e:	f3bf 8f6f 	isb	sy
  /* USER CODE END TIM3_IRQn 1 */
}
 8001682:	bf00      	nop
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	24000108 	.word	0x24000108
 8001690:	240008c4 	.word	0x240008c4
 8001694:	24000914 	.word	0x24000914
 8001698:	24000918 	.word	0x24000918
 800169c:	2400091c 	.word	0x2400091c
 80016a0:	e000ed04 	.word	0xe000ed04

080016a4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80016a8:	4802      	ldr	r0, [pc, #8]	@ (80016b4 <USART2_IRQHandler+0x10>)
 80016aa:	f00a f881 	bl	800b7b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	24000154 	.word	0x24000154

080016b8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80016bc:	4802      	ldr	r0, [pc, #8]	@ (80016c8 <USART3_IRQHandler+0x10>)
 80016be:	f00a f877 	bl	800b7b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	240001e8 	.word	0x240001e8

080016cc <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80016d0:	4802      	ldr	r0, [pc, #8]	@ (80016dc <SDMMC1_IRQHandler+0x10>)
 80016d2:	f007 fc17 	bl	8008f04 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	2400008c 	.word	0x2400008c

080016e0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80016e4:	4802      	ldr	r0, [pc, #8]	@ (80016f0 <TIM6_DAC_IRQHandler+0x10>)
 80016e6:	f008 ff32 	bl	800a54e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	240008c8 	.word	0x240008c8

080016f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016fc:	4a14      	ldr	r2, [pc, #80]	@ (8001750 <_sbrk+0x5c>)
 80016fe:	4b15      	ldr	r3, [pc, #84]	@ (8001754 <_sbrk+0x60>)
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001708:	4b13      	ldr	r3, [pc, #76]	@ (8001758 <_sbrk+0x64>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d102      	bne.n	8001716 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001710:	4b11      	ldr	r3, [pc, #68]	@ (8001758 <_sbrk+0x64>)
 8001712:	4a12      	ldr	r2, [pc, #72]	@ (800175c <_sbrk+0x68>)
 8001714:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001716:	4b10      	ldr	r3, [pc, #64]	@ (8001758 <_sbrk+0x64>)
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4413      	add	r3, r2
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	429a      	cmp	r2, r3
 8001722:	d207      	bcs.n	8001734 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001724:	f014 ff6e 	bl	8016604 <__errno>
 8001728:	4603      	mov	r3, r0
 800172a:	220c      	movs	r2, #12
 800172c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800172e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001732:	e009      	b.n	8001748 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001734:	4b08      	ldr	r3, [pc, #32]	@ (8001758 <_sbrk+0x64>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800173a:	4b07      	ldr	r3, [pc, #28]	@ (8001758 <_sbrk+0x64>)
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4413      	add	r3, r2
 8001742:	4a05      	ldr	r2, [pc, #20]	@ (8001758 <_sbrk+0x64>)
 8001744:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001746:	68fb      	ldr	r3, [r7, #12]
}
 8001748:	4618      	mov	r0, r3
 800174a:	3718      	adds	r7, #24
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	24080000 	.word	0x24080000
 8001754:	00002000 	.word	0x00002000
 8001758:	24000920 	.word	0x24000920
 800175c:	240054b0 	.word	0x240054b0

08001760 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001764:	4b37      	ldr	r3, [pc, #220]	@ (8001844 <SystemInit+0xe4>)
 8001766:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800176a:	4a36      	ldr	r2, [pc, #216]	@ (8001844 <SystemInit+0xe4>)
 800176c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001770:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001774:	4b34      	ldr	r3, [pc, #208]	@ (8001848 <SystemInit+0xe8>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 030f 	and.w	r3, r3, #15
 800177c:	2b06      	cmp	r3, #6
 800177e:	d807      	bhi.n	8001790 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001780:	4b31      	ldr	r3, [pc, #196]	@ (8001848 <SystemInit+0xe8>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f023 030f 	bic.w	r3, r3, #15
 8001788:	4a2f      	ldr	r2, [pc, #188]	@ (8001848 <SystemInit+0xe8>)
 800178a:	f043 0307 	orr.w	r3, r3, #7
 800178e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001790:	4b2e      	ldr	r3, [pc, #184]	@ (800184c <SystemInit+0xec>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a2d      	ldr	r2, [pc, #180]	@ (800184c <SystemInit+0xec>)
 8001796:	f043 0301 	orr.w	r3, r3, #1
 800179a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800179c:	4b2b      	ldr	r3, [pc, #172]	@ (800184c <SystemInit+0xec>)
 800179e:	2200      	movs	r2, #0
 80017a0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80017a2:	4b2a      	ldr	r3, [pc, #168]	@ (800184c <SystemInit+0xec>)
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	4929      	ldr	r1, [pc, #164]	@ (800184c <SystemInit+0xec>)
 80017a8:	4b29      	ldr	r3, [pc, #164]	@ (8001850 <SystemInit+0xf0>)
 80017aa:	4013      	ands	r3, r2
 80017ac:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80017ae:	4b26      	ldr	r3, [pc, #152]	@ (8001848 <SystemInit+0xe8>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0308 	and.w	r3, r3, #8
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d007      	beq.n	80017ca <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80017ba:	4b23      	ldr	r3, [pc, #140]	@ (8001848 <SystemInit+0xe8>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f023 030f 	bic.w	r3, r3, #15
 80017c2:	4a21      	ldr	r2, [pc, #132]	@ (8001848 <SystemInit+0xe8>)
 80017c4:	f043 0307 	orr.w	r3, r3, #7
 80017c8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80017ca:	4b20      	ldr	r3, [pc, #128]	@ (800184c <SystemInit+0xec>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80017d0:	4b1e      	ldr	r3, [pc, #120]	@ (800184c <SystemInit+0xec>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80017d6:	4b1d      	ldr	r3, [pc, #116]	@ (800184c <SystemInit+0xec>)
 80017d8:	2200      	movs	r2, #0
 80017da:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80017dc:	4b1b      	ldr	r3, [pc, #108]	@ (800184c <SystemInit+0xec>)
 80017de:	4a1d      	ldr	r2, [pc, #116]	@ (8001854 <SystemInit+0xf4>)
 80017e0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80017e2:	4b1a      	ldr	r3, [pc, #104]	@ (800184c <SystemInit+0xec>)
 80017e4:	4a1c      	ldr	r2, [pc, #112]	@ (8001858 <SystemInit+0xf8>)
 80017e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80017e8:	4b18      	ldr	r3, [pc, #96]	@ (800184c <SystemInit+0xec>)
 80017ea:	4a1c      	ldr	r2, [pc, #112]	@ (800185c <SystemInit+0xfc>)
 80017ec:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80017ee:	4b17      	ldr	r3, [pc, #92]	@ (800184c <SystemInit+0xec>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80017f4:	4b15      	ldr	r3, [pc, #84]	@ (800184c <SystemInit+0xec>)
 80017f6:	4a19      	ldr	r2, [pc, #100]	@ (800185c <SystemInit+0xfc>)
 80017f8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80017fa:	4b14      	ldr	r3, [pc, #80]	@ (800184c <SystemInit+0xec>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001800:	4b12      	ldr	r3, [pc, #72]	@ (800184c <SystemInit+0xec>)
 8001802:	4a16      	ldr	r2, [pc, #88]	@ (800185c <SystemInit+0xfc>)
 8001804:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001806:	4b11      	ldr	r3, [pc, #68]	@ (800184c <SystemInit+0xec>)
 8001808:	2200      	movs	r2, #0
 800180a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800180c:	4b0f      	ldr	r3, [pc, #60]	@ (800184c <SystemInit+0xec>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a0e      	ldr	r2, [pc, #56]	@ (800184c <SystemInit+0xec>)
 8001812:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001816:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001818:	4b0c      	ldr	r3, [pc, #48]	@ (800184c <SystemInit+0xec>)
 800181a:	2200      	movs	r2, #0
 800181c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800181e:	4b10      	ldr	r3, [pc, #64]	@ (8001860 <SystemInit+0x100>)
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	4b10      	ldr	r3, [pc, #64]	@ (8001864 <SystemInit+0x104>)
 8001824:	4013      	ands	r3, r2
 8001826:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800182a:	d202      	bcs.n	8001832 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800182c:	4b0e      	ldr	r3, [pc, #56]	@ (8001868 <SystemInit+0x108>)
 800182e:	2201      	movs	r2, #1
 8001830:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001832:	4b0e      	ldr	r3, [pc, #56]	@ (800186c <SystemInit+0x10c>)
 8001834:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001838:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800183a:	bf00      	nop
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	e000ed00 	.word	0xe000ed00
 8001848:	52002000 	.word	0x52002000
 800184c:	58024400 	.word	0x58024400
 8001850:	eaf6ed7f 	.word	0xeaf6ed7f
 8001854:	02020200 	.word	0x02020200
 8001858:	01ff0000 	.word	0x01ff0000
 800185c:	01010280 	.word	0x01010280
 8001860:	5c001000 	.word	0x5c001000
 8001864:	ffff0000 	.word	0xffff0000
 8001868:	51008108 	.word	0x51008108
 800186c:	52004000 	.word	0x52004000

08001870 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001870:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018a8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001874:	f7ff ff74 	bl	8001760 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001878:	480c      	ldr	r0, [pc, #48]	@ (80018ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800187a:	490d      	ldr	r1, [pc, #52]	@ (80018b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800187c:	4a0d      	ldr	r2, [pc, #52]	@ (80018b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800187e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001880:	e002      	b.n	8001888 <LoopCopyDataInit>

08001882 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001882:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001884:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001886:	3304      	adds	r3, #4

08001888 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001888:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800188a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800188c:	d3f9      	bcc.n	8001882 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800188e:	4a0a      	ldr	r2, [pc, #40]	@ (80018b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001890:	4c0a      	ldr	r4, [pc, #40]	@ (80018bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001892:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001894:	e001      	b.n	800189a <LoopFillZerobss>

08001896 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001896:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001898:	3204      	adds	r2, #4

0800189a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800189a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800189c:	d3fb      	bcc.n	8001896 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800189e:	f014 feb7 	bl	8016610 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018a2:	f7ff f9b3 	bl	8000c0c <main>
  bx  lr
 80018a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018a8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80018ac:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80018b0:	24000070 	.word	0x24000070
  ldr r2, =_sidata
 80018b4:	08017850 	.word	0x08017850
  ldr r2, =_sbss
 80018b8:	24000070 	.word	0x24000070
  ldr r4, =_ebss
 80018bc:	240054ac 	.word	0x240054ac

080018c0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018c0:	e7fe      	b.n	80018c0 <ADC3_IRQHandler>
	...

080018c4 <_ZN10Encoder485C1EP17TIM_HandleTypeDefhP20__UART_HandleTypeDef>:

#include "Encoder485.h"
#include <cmath>


Encoder485::Encoder485(TIM_HandleTypeDef *htim, uint8_t unit_id, UART_HandleTypeDef *huart)
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	60f8      	str	r0, [r7, #12]
 80018cc:	60b9      	str	r1, [r7, #8]
 80018ce:	603b      	str	r3, [r7, #0]
 80018d0:	4613      	mov	r3, r2
 80018d2:	71fb      	strb	r3, [r7, #7]
  : ModbusAbsoluteEncoder(htim, unit_id),
    huart(huart)
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	79fa      	ldrb	r2, [r7, #7]
 80018d8:	68b9      	ldr	r1, [r7, #8]
 80018da:	4618      	mov	r0, r3
 80018dc:	f001 fcde 	bl	800329c <_ZN21ModbusAbsoluteEncoderC1EP17TIM_HandleTypeDefh>
 80018e0:	4a05      	ldr	r2, [pc, #20]	@ (80018f8 <_ZN10Encoder485C1EP17TIM_HandleTypeDefhP20__UART_HandleTypeDef+0x34>)
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	683a      	ldr	r2, [r7, #0]
 80018ea:	f8c3 21bc 	str.w	r2, [r3, #444]	@ 0x1bc
{
}
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	4618      	mov	r0, r3
 80018f2:	3710      	adds	r7, #16
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	0801763c 	.word	0x0801763c

080018fc <_ZN10Encoder4854initEv>:

void Encoder485::init(){
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
    /* Modbus Master initialization */
  ModbusH.uModbusType = MB_MASTER;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2204      	movs	r2, #4
 8001908:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ModbusH.port = huart; 
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f8d3 21bc 	ldr.w	r2, [r3, #444]	@ 0x1bc
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	629a      	str	r2, [r3, #40]	@ 0x28
  ModbusH.u8id = 0; //master ID
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  ModbusH.u16timeOut = 1000;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001924:	f8a3 20c6 	strh.w	r2, [r3, #198]	@ 0xc6
  ModbusH.EN_Port = NULL; // No RS485
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	631a      	str	r2, [r3, #48]	@ 0x30
  ModbusH.u16regs = ModbusDATA;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f503 72b6 	add.w	r2, r3, #364	@ 0x16c
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  ModbusH.u16regsize= sizeof(ModbusDATA)/sizeof(ModbusDATA[0]);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2208      	movs	r2, #8
 800193e:	f8a3 20c8 	strh.w	r2, [r3, #200]	@ 0xc8
  ModbusH.xTypeHW = USART_HW;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2201      	movs	r2, #1
 8001946:	f883 2168 	strb.w	r2, [r3, #360]	@ 0x168
  
  ModbusAbsoluteEncoder::init();
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4618      	mov	r0, r3
 800194e:	f001 fcff 	bl	8003350 <_ZN21ModbusAbsoluteEncoder4initEv>
}
 8001952:	bf00      	nop
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <_ZN10Encoder48514constructQueryEP8modbus_t>:

bool Encoder485::constructQuery(modbus_t* modbusQuary) {
 800195a:	b480      	push	{r7}
 800195c:	b083      	sub	sp, #12
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
 8001962:	6039      	str	r1, [r7, #0]
    modbusQuary->u8id = unit_id;                      // 从站地址03
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f893 217c 	ldrb.w	r2, [r3, #380]	@ 0x17c
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	701a      	strb	r2, [r3, #0]
    modbusQuary->u8fct = MB_FC_READ_REGISTERS;  // 功能码03：读取保持寄存器
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	2203      	movs	r2, #3
 8001972:	705a      	strb	r2, [r3, #1]
    modbusQuary->u16RegAdd = 0x0000;            // 寄存器起始地址0x00
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	2200      	movs	r2, #0
 8001978:	805a      	strh	r2, [r3, #2]
    modbusQuary->u16CoilsNo = 2;                // 读取2个寄存器（0x00和0x01）
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	2202      	movs	r2, #2
 800197e:	809a      	strh	r2, [r3, #4]
    modbusQuary->u16reg = ModbusDATA;           // 数据存储缓冲区
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f503 72b6 	add.w	r2, r3, #364	@ 0x16c
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	609a      	str	r2, [r3, #8]
    return true;
 800198a:	2301      	movs	r3, #1
 800198c:	4618      	mov	r0, r3
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <RingAdd>:
#endif

/* Ring Buffer functions */
// This function must be called only after disabling USART RX interrupt or inside of the RX interrupt
void RingAdd(modbusRingBuffer_t *xRingBuffer, uint8_t u8Val)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	460b      	mov	r3, r1
 80019a2:	70fb      	strb	r3, [r7, #3]

	xRingBuffer->uxBuffer[xRingBuffer->u8end] = u8Val;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80019aa:	4619      	mov	r1, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	78fa      	ldrb	r2, [r7, #3]
 80019b0:	545a      	strb	r2, [r3, r1]
	xRingBuffer->u8end = (xRingBuffer->u8end + 1) % MAX_BUFFER;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80019b8:	3301      	adds	r3, #1
 80019ba:	425a      	negs	r2, r3
 80019bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80019c0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80019c4:	bf58      	it	pl
 80019c6:	4253      	negpl	r3, r2
 80019c8:	b2da      	uxtb	r2, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
	if (xRingBuffer->u8available == MAX_BUFFER)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 80019d6:	2b80      	cmp	r3, #128	@ 0x80
 80019d8:	d113      	bne.n	8001a02 <RingAdd+0x6a>
	{
		xRingBuffer->overflow = true;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2201      	movs	r2, #1
 80019de:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80019e8:	3301      	adds	r3, #1
 80019ea:	425a      	negs	r2, r3
 80019ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80019f0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80019f4:	bf58      	it	pl
 80019f6:	4253      	negpl	r3, r2
 80019f8:	b2da      	uxtb	r2, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
	{
		xRingBuffer->overflow = false;
		xRingBuffer->u8available++;
	}

}
 8001a00:	e00b      	b.n	8001a1a <RingAdd+0x82>
		xRingBuffer->overflow = false;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2200      	movs	r2, #0
 8001a06:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
		xRingBuffer->u8available++;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8001a10:	3301      	adds	r3, #1
 8001a12:	b2da      	uxtb	r2, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr

08001a26 <RingGetAllBytes>:

// This function must be called only after disabling USART RX interrupt
uint8_t RingGetAllBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b082      	sub	sp, #8
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
 8001a2e:	6039      	str	r1, [r7, #0]
	return RingGetNBytes(xRingBuffer, buffer, xRingBuffer->u8available);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8001a36:	461a      	mov	r2, r3
 8001a38:	6839      	ldr	r1, [r7, #0]
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f000 f805 	bl	8001a4a <RingGetNBytes>
 8001a40:	4603      	mov	r3, r0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <RingGetNBytes>:

// This function must be called only after disabling USART RX interrupt
uint8_t RingGetNBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer, uint8_t uNumber)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b086      	sub	sp, #24
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	60f8      	str	r0, [r7, #12]
 8001a52:	60b9      	str	r1, [r7, #8]
 8001a54:	4613      	mov	r3, r2
 8001a56:	71fb      	strb	r3, [r7, #7]
	uint8_t uCounter;
	if(xRingBuffer->u8available == 0  || uNumber == 0 ) return 0;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d002      	beq.n	8001a68 <RingGetNBytes+0x1e>
 8001a62:	79fb      	ldrb	r3, [r7, #7]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d101      	bne.n	8001a6c <RingGetNBytes+0x22>
 8001a68:	2300      	movs	r3, #0
 8001a6a:	e03e      	b.n	8001aea <RingGetNBytes+0xa0>
	if(uNumber > MAX_BUFFER) return 0;
 8001a6c:	79fb      	ldrb	r3, [r7, #7]
 8001a6e:	2b80      	cmp	r3, #128	@ 0x80
 8001a70:	d901      	bls.n	8001a76 <RingGetNBytes+0x2c>
 8001a72:	2300      	movs	r3, #0
 8001a74:	e039      	b.n	8001aea <RingGetNBytes+0xa0>

	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 8001a76:	2300      	movs	r3, #0
 8001a78:	75fb      	strb	r3, [r7, #23]
 8001a7a:	e01b      	b.n	8001ab4 <RingGetNBytes+0x6a>
	{
		buffer[uCounter] = xRingBuffer->uxBuffer[xRingBuffer->u8start];
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8001a82:	4619      	mov	r1, r3
 8001a84:	7dfb      	ldrb	r3, [r7, #23]
 8001a86:	68ba      	ldr	r2, [r7, #8]
 8001a88:	4413      	add	r3, r2
 8001a8a:	68fa      	ldr	r2, [r7, #12]
 8001a8c:	5c52      	ldrb	r2, [r2, r1]
 8001a8e:	701a      	strb	r2, [r3, #0]
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8001a96:	3301      	adds	r3, #1
 8001a98:	425a      	negs	r2, r3
 8001a9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001a9e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001aa2:	bf58      	it	pl
 8001aa4:	4253      	negpl	r3, r2
 8001aa6:	b2da      	uxtb	r2, r3
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 8001aae:	7dfb      	ldrb	r3, [r7, #23]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	75fb      	strb	r3, [r7, #23]
 8001ab4:	7dfa      	ldrb	r2, [r7, #23]
 8001ab6:	79fb      	ldrb	r3, [r7, #7]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d205      	bcs.n	8001ac8 <RingGetNBytes+0x7e>
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8001ac2:	7dfa      	ldrb	r2, [r7, #23]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d3d9      	bcc.n	8001a7c <RingGetNBytes+0x32>
	}
	xRingBuffer->u8available = xRingBuffer->u8available - uCounter;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f893 2082 	ldrb.w	r2, [r3, #130]	@ 0x82
 8001ace:	7dfb      	ldrb	r3, [r7, #23]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	b2da      	uxtb	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
	xRingBuffer->overflow = false;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
	RingClear(xRingBuffer);
 8001ae2:	68f8      	ldr	r0, [r7, #12]
 8001ae4:	f000 f805 	bl	8001af2 <RingClear>

	return uCounter;
 8001ae8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3718      	adds	r7, #24
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <RingClear>:
{
return xRingBuffer->u8available;
}

void RingClear(modbusRingBuffer_t *xRingBuffer)
{
 8001af2:	b480      	push	{r7}
 8001af4:	b083      	sub	sp, #12
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
xRingBuffer->u8start = 0;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
xRingBuffer->u8end = 0;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
xRingBuffer->u8available = 0;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
xRingBuffer->overflow = false;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
}
 8001b1a:	bf00      	nop
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
	...

08001b28 <ModbusInit>:
 * of the modbus handler
 *
 * @param modH   modbus handler
 */
void ModbusInit(modbusHandler_t * modH)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af02      	add	r7, sp, #8
 8001b2e:	6078      	str	r0, [r7, #4]

  if (numberHandlers < MAX_M_HANDLERS)
 8001b30:	4b45      	ldr	r3, [pc, #276]	@ (8001c48 <ModbusInit+0x120>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	f200 8083 	bhi.w	8001c40 <ModbusInit+0x118>
  {

	  //Initialize the ring buffer

	  RingClear(&modH->xBufferRX);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	33c0      	adds	r3, #192	@ 0xc0
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff ffd7 	bl	8001af2 <RingClear>

	  if(modH->uModbusType == MB_SLAVE)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	2b03      	cmp	r3, #3
 8001b4a:	d109      	bne.n	8001b60 <ModbusInit+0x38>
		  }
		  else{
			  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusSlave, modH, &myTaskModbusA_attributes);
		  }
#else
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusSlave, modH, &myTaskModbusA_attributes);
 8001b4c:	4a3f      	ldr	r2, [pc, #252]	@ (8001c4c <ModbusInit+0x124>)
 8001b4e:	6879      	ldr	r1, [r7, #4]
 8001b50:	483f      	ldr	r0, [pc, #252]	@ (8001c50 <ModbusInit+0x128>)
 8001b52:	f00f ffd8 	bl	8011b06 <osThreadNew>
 8001b56:	4602      	mov	r2, r0
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8001b5e:	e035      	b.n	8001bcc <ModbusInit+0xa4>
#endif


	  }
	  else if (modH->uModbusType == MB_MASTER)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	2b04      	cmp	r3, #4
 8001b66:	d130      	bne.n	8001bca <ModbusInit+0xa2>
		  else
		  {
		     modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &myTaskModbusB_attributes);
		  }
#else
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &myTaskModbusB_attributes);
 8001b68:	4a3a      	ldr	r2, [pc, #232]	@ (8001c54 <ModbusInit+0x12c>)
 8001b6a:	6879      	ldr	r1, [r7, #4]
 8001b6c:	483a      	ldr	r0, [pc, #232]	@ (8001c58 <ModbusInit+0x130>)
 8001b6e:	f00f ffca 	bl	8011b06 <osThreadNew>
 8001b72:	4602      	mov	r2, r0
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
#endif



		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
				  	  	modH->u16timeOut ,     		// The timer period in ticks.
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	@ 0xa2
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 8001b80:	4619      	mov	r1, r3
						pdFALSE,         // The timers will auto-reload themselves when they expire.
						( void * )modH->xTimerTimeout,     // Assign each timer a unique id equal to its array index.
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 8001b88:	4a34      	ldr	r2, [pc, #208]	@ (8001c5c <ModbusInit+0x134>)
 8001b8a:	9200      	str	r2, [sp, #0]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	4834      	ldr	r0, [pc, #208]	@ (8001c60 <ModbusInit+0x138>)
 8001b90:	f013 f90a 	bl	8014da8 <xTimerCreate>
 8001b94:	4602      	mov	r2, r0
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
						(TimerCallbackFunction_t) vTimerCallbackTimeout  // Each timer calls the same callback when it expires.
                  	  	);

		  if(modH->xTimerTimeout == NULL)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d101      	bne.n	8001baa <ModbusInit+0x82>
		  {
			  while(1); //error creating timer, check heap and stack size
 8001ba6:	bf00      	nop
 8001ba8:	e7fd      	b.n	8001ba6 <ModbusInit+0x7e>
		  }


		  modH->QueueTelegramHandle = osMessageQueueNew (MAX_TELEGRAMS, sizeof(modbus_t), &QueueTelegram_attributes);
 8001baa:	4a2e      	ldr	r2, [pc, #184]	@ (8001c64 <ModbusInit+0x13c>)
 8001bac:	2110      	movs	r1, #16
 8001bae:	2002      	movs	r0, #2
 8001bb0:	f010 f9a4 	bl	8011efc <osMessageQueueNew>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac

		  if(modH->QueueTelegramHandle == NULL)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d102      	bne.n	8001bcc <ModbusInit+0xa4>
		  {
			  while(1); //error creating queue for telegrams, check heap and stack size
 8001bc6:	bf00      	nop
 8001bc8:	e7fd      	b.n	8001bc6 <ModbusInit+0x9e>
		  }

	  }
	  else
	  {
		  while(1); //Error Modbus type not supported choose a valid Type
 8001bca:	e7fe      	b.n	8001bca <ModbusInit+0xa2>
	  }

	  if  (modH->myTaskModbusAHandle == NULL)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d101      	bne.n	8001bda <ModbusInit+0xb2>
	  {
		  while(1); //Error creating Modbus task, check heap and stack size
 8001bd6:	bf00      	nop
 8001bd8:	e7fd      	b.n	8001bd6 <ModbusInit+0xae>


	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
		  	  	  	  	  	  	  	T35 ,     // The timer period in ticks.
                                    pdFALSE,         // The timers will auto-reload themselves when they expire.
									( void * )modH->xTimerT35,     // Assign each timer a unique id equal to its array index.
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
 8001be0:	4a21      	ldr	r2, [pc, #132]	@ (8001c68 <ModbusInit+0x140>)
 8001be2:	9200      	str	r2, [sp, #0]
 8001be4:	2200      	movs	r2, #0
 8001be6:	2105      	movs	r1, #5
 8001be8:	4820      	ldr	r0, [pc, #128]	@ (8001c6c <ModbusInit+0x144>)
 8001bea:	f013 f8dd 	bl	8014da8 <xTimerCreate>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
                                    (TimerCallbackFunction_t) vTimerCallbackT35     // Each timer calls the same callback when it expires.
                                    );
	  if (modH->xTimerT35 == NULL)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d101      	bne.n	8001c04 <ModbusInit+0xdc>
	  {
		  while(1); //Error creating the timer, check heap and stack size
 8001c00:	bf00      	nop
 8001c02:	e7fd      	b.n	8001c00 <ModbusInit+0xd8>
	  }


	  modH->ModBusSphrHandle = osSemaphoreNew(1, 1, &ModBusSphr_attributes);
 8001c04:	4a1a      	ldr	r2, [pc, #104]	@ (8001c70 <ModbusInit+0x148>)
 8001c06:	2101      	movs	r1, #1
 8001c08:	2001      	movs	r0, #1
 8001c0a:	f010 f834 	bl	8011c76 <osSemaphoreNew>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc

	  if(modH->ModBusSphrHandle == NULL)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d101      	bne.n	8001c24 <ModbusInit+0xfc>
	  {
		  while(1); //Error creating the semaphore, check heap and stack size
 8001c20:	bf00      	nop
 8001c22:	e7fd      	b.n	8001c20 <ModbusInit+0xf8>
	  }

	  mHandlers[numberHandlers] = modH;
 8001c24:	4b08      	ldr	r3, [pc, #32]	@ (8001c48 <ModbusInit+0x120>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4a12      	ldr	r2, [pc, #72]	@ (8001c74 <ModbusInit+0x14c>)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	  numberHandlers++;
 8001c32:	4b05      	ldr	r3, [pc, #20]	@ (8001c48 <ModbusInit+0x120>)
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	3301      	adds	r3, #1
 8001c38:	b2da      	uxtb	r2, r3
 8001c3a:	4b03      	ldr	r3, [pc, #12]	@ (8001c48 <ModbusInit+0x120>)
 8001c3c:	701a      	strb	r2, [r3, #0]
  else
  {
	  while(1); //error no more Modbus handlers supported
  }

}
 8001c3e:	e000      	b.n	8001c42 <ModbusInit+0x11a>
	  while(1); //error no more Modbus handlers supported
 8001c40:	e7fe      	b.n	8001c40 <ModbusInit+0x118>
}
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	2400092c 	.word	0x2400092c
 8001c4c:	08017684 	.word	0x08017684
 8001c50:	08001e6d 	.word	0x08001e6d
 8001c54:	080176a8 	.word	0x080176a8
 8001c58:	08002401 	.word	0x08002401
 8001c5c:	08001e11 	.word	0x08001e11
 8001c60:	08017570 	.word	0x08017570
 8001c64:	0801766c 	.word	0x0801766c
 8001c68:	08001d8d 	.word	0x08001d8d
 8001c6c:	08017580 	.word	0x08017580
 8001c70:	080176cc 	.word	0x080176cc
 8001c74:	24000924 	.word	0x24000924

08001c78 <ModbusStart>:
 * ModbusRtu's own begin() functions.)
 *
 * @ingroup setup
 */
void ModbusStart(modbusHandler_t * modH)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]

	if(modH->xTypeHW != USART_HW && modH->xTypeHW != TCP_HW && modH->xTypeHW != USB_CDC_HW  && modH->xTypeHW != USART_HW_DMA )
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d010      	beq.n	8001cac <ModbusStart+0x34>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8001c90:	2b03      	cmp	r3, #3
 8001c92:	d00b      	beq.n	8001cac <ModbusStart+0x34>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d006      	beq.n	8001cac <ModbusStart+0x34>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8001ca4:	2b04      	cmp	r3, #4
 8001ca6:	d001      	beq.n	8001cac <ModbusStart+0x34>
	{

		while(1); //ERROR select the type of hardware
 8001ca8:	bf00      	nop
 8001caa:	e7fd      	b.n	8001ca8 <ModbusStart+0x30>
	}

	if (modH->xTypeHW == USART_HW_DMA && ENABLE_USART_DMA == 0  )
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8001cb2:	2b04      	cmp	r3, #4
 8001cb4:	d101      	bne.n	8001cba <ModbusStart+0x42>
	{
		while(1); //ERROR To use USART_HW_DMA you need to enable it in the ModbusConfig.h file
 8001cb6:	bf00      	nop
 8001cb8:	e7fd      	b.n	8001cb6 <ModbusStart+0x3e>
	}



	if (modH->xTypeHW == USART_HW || modH->xTypeHW ==  USART_HW_DMA )
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d004      	beq.n	8001cce <ModbusStart+0x56>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8001cca:	2b04      	cmp	r3, #4
 8001ccc:	d140      	bne.n	8001d50 <ModbusStart+0xd8>
	{

	      if (modH->EN_Port != NULL )
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d007      	beq.n	8001ce6 <ModbusStart+0x6e>
          {
              // return RS485 transceiver to receive mode
          	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	68d8      	ldr	r0, [r3, #12]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	8a1b      	ldrh	r3, [r3, #16]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	f003 f90b 	bl	8004efc <HAL_GPIO_WritePin>
          }

          if (modH->uModbusType == MB_SLAVE &&  modH->u16regs == NULL )
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	2b03      	cmp	r3, #3
 8001cec:	d106      	bne.n	8001cfc <ModbusStart+0x84>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d101      	bne.n	8001cfc <ModbusStart+0x84>
          {
          	while(1); //ERROR define the DATA pointer shared through Modbus
 8001cf8:	bf00      	nop
 8001cfa:	e7fd      	b.n	8001cf8 <ModbusStart+0x80>
          }

          //check that port is initialized
          while (HAL_UART_GetState(modH->port) != HAL_UART_STATE_READY)
 8001cfc:	bf00      	nop
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f00a f9d6 	bl	800c0b4 <HAL_UART_GetState>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b20      	cmp	r3, #32
 8001d0c:	d1f7      	bne.n	8001cfe <ModbusStart+0x86>
          }


#else
          // Receive data from serial port for Modbus using interrupt
          if(HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1) != HAL_OK)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6858      	ldr	r0, [r3, #4]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	33a6      	adds	r3, #166	@ 0xa6
 8001d16:	2201      	movs	r2, #1
 8001d18:	4619      	mov	r1, r3
 8001d1a:	f009 fc2f 	bl	800b57c <HAL_UART_Receive_IT>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <ModbusStart+0xb0>
          {
                while(1)
 8001d24:	bf00      	nop
 8001d26:	e7fd      	b.n	8001d24 <ModbusStart+0xac>
                 }
          }

#endif

          if(modH->u8id !=0 && modH->uModbusType == MB_MASTER )
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	7a1b      	ldrb	r3, [r3, #8]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d005      	beq.n	8001d3c <ModbusStart+0xc4>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	2b04      	cmp	r3, #4
 8001d36:	d101      	bne.n	8001d3c <ModbusStart+0xc4>
          {
        	  while(1)
 8001d38:	bf00      	nop
 8001d3a:	e7fd      	b.n	8001d38 <ModbusStart+0xc0>
        	     	  //error Master ID must be zero
        	  }

          }

          if(modH->u8id ==0 && modH->uModbusType == MB_SLAVE )
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	7a1b      	ldrb	r3, [r3, #8]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d105      	bne.n	8001d50 <ModbusStart+0xd8>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	2b03      	cmp	r3, #3
 8001d4a:	d101      	bne.n	8001d50 <ModbusStart+0xd8>
          {
             	  while(1)
 8001d4c:	bf00      	nop
 8001d4e:	e7fd      	b.n	8001d4c <ModbusStart+0xd4>


#endif


    modH->u8lastRec = modH->u8BufferSize = 0;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2200      	movs	r2, #0
 8001d54:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f893 2093 	ldrb.w	r2, [r3, #147]	@ 0x93
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
    modH->u16InCnt = modH->u16OutCnt = modH->u16errCnt = 0;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f8b3 20a0 	ldrh.w	r2, [r3, #160]	@ 0xa0
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f8b3 209e 	ldrh.w	r2, [r3, #158]	@ 0x9e
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c

}
 8001d84:	bf00      	nop
 8001d86:	3708      	adds	r7, #8
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <vTimerCallbackT35>:
}
#endif


void vTimerCallbackT35(TimerHandle_t *pxTimer)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b086      	sub	sp, #24
 8001d90:	af02      	add	r7, sp, #8
 8001d92:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 8001d94:	2300      	movs	r3, #0
 8001d96:	60fb      	str	r3, [r7, #12]
 8001d98:	e02a      	b.n	8001df0 <vTimerCallbackT35+0x64>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerT35 ==  pxTimer ){
 8001d9a:	4a1b      	ldr	r2, [pc, #108]	@ (8001e08 <vTimerCallbackT35+0x7c>)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001da2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d11e      	bne.n	8001dea <vTimerCallbackT35+0x5e>
			if(mHandlers[i]->uModbusType == MB_MASTER)
 8001dac:	4a16      	ldr	r2, [pc, #88]	@ (8001e08 <vTimerCallbackT35+0x7c>)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	2b04      	cmp	r3, #4
 8001db8:	d10c      	bne.n	8001dd4 <vTimerCallbackT35+0x48>
			{
				xTimerStop(mHandlers[i]->xTimerTimeout,0);
 8001dba:	4a13      	ldr	r2, [pc, #76]	@ (8001e08 <vTimerCallbackT35+0x7c>)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dc2:	f8d3 00b8 	ldr.w	r0, [r3, #184]	@ 0xb8
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	9300      	str	r3, [sp, #0]
 8001dca:	2300      	movs	r3, #0
 8001dcc:	2200      	movs	r2, #0
 8001dce:	2103      	movs	r1, #3
 8001dd0:	f013 f848 	bl	8014e64 <xTimerGenericCommand>
			}
			xTaskNotify(mHandlers[i]->myTaskModbusAHandle, 0, eSetValueWithOverwrite);
 8001dd4:	4a0c      	ldr	r2, [pc, #48]	@ (8001e08 <vTimerCallbackT35+0x7c>)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ddc:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
 8001de0:	2300      	movs	r3, #0
 8001de2:	2203      	movs	r2, #3
 8001de4:	2100      	movs	r1, #0
 8001de6:	f012 fd99 	bl	801491c <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	3301      	adds	r3, #1
 8001dee:	60fb      	str	r3, [r7, #12]
 8001df0:	4b06      	ldr	r3, [pc, #24]	@ (8001e0c <vTimerCallbackT35+0x80>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	461a      	mov	r2, r3
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	dbce      	blt.n	8001d9a <vTimerCallbackT35+0xe>
		}

	}
}
 8001dfc:	bf00      	nop
 8001dfe:	bf00      	nop
 8001e00:	3710      	adds	r7, #16
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	24000924 	.word	0x24000924
 8001e0c:	2400092c 	.word	0x2400092c

08001e10 <vTimerCallbackTimeout>:

void vTimerCallbackTimeout(TimerHandle_t *pxTimer)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 8001e18:	2300      	movs	r3, #0
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	e016      	b.n	8001e4c <vTimerCallbackTimeout+0x3c>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerTimeout ==  pxTimer ){
 8001e1e:	4a11      	ldr	r2, [pc, #68]	@ (8001e64 <vTimerCallbackTimeout+0x54>)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e26:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d10a      	bne.n	8001e46 <vTimerCallbackTimeout+0x36>
				xTaskNotify(mHandlers[i]->myTaskModbusAHandle, ERR_TIME_OUT, eSetValueWithOverwrite);
 8001e30:	4a0c      	ldr	r2, [pc, #48]	@ (8001e64 <vTimerCallbackTimeout+0x54>)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e38:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	2203      	movs	r2, #3
 8001e40:	2111      	movs	r1, #17
 8001e42:	f012 fd6b 	bl	801491c <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	3301      	adds	r3, #1
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	4b06      	ldr	r3, [pc, #24]	@ (8001e68 <vTimerCallbackTimeout+0x58>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	461a      	mov	r2, r3
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	4293      	cmp	r3, r2
 8001e56:	dbe2      	blt.n	8001e1e <vTimerCallbackTimeout+0xe>
		}

	}

}
 8001e58:	bf00      	nop
 8001e5a:	bf00      	nop
 8001e5c:	3710      	adds	r7, #16
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	24000924 	.word	0x24000924
 8001e68:	2400092c 	.word	0x2400092c

08001e6c <StartTaskModbusSlave>:
#endif



void StartTaskModbusSlave(void *argument)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	60fb      	str	r3, [r7, #12]
#endif

  for(;;)
  {

	modH->i8lastError = 0;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	749a      	strb	r2, [r3, #18]

	  }
#endif


   if(modH->xTypeHW == USART_HW || modH->xTypeHW == USART_HW_DMA)
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d004      	beq.n	8001e92 <StartTaskModbusSlave+0x26>
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8001e8e:	2b04      	cmp	r3, #4
 8001e90:	d116      	bne.n	8001ec0 <StartTaskModbusSlave+0x54>
   {

	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY); /* Block until a Modbus Frame arrives */
 8001e92:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001e96:	2001      	movs	r0, #1
 8001e98:	f012 fcf4 	bl	8014884 <ulTaskNotifyTake>

	  if (getRxBuffer(modH) == ERR_BUFF_OVERFLOW)
 8001e9c:	68f8      	ldr	r0, [r7, #12]
 8001e9e:	f000 fc8f 	bl	80027c0 <getRxBuffer>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b0c      	cmp	r3, #12
 8001ea6:	d10b      	bne.n	8001ec0 <StartTaskModbusSlave+0x54>
	  {
	      modH->i8lastError = ERR_BUFF_OVERFLOW;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	220c      	movs	r2, #12
 8001eac:	749a      	strb	r2, [r3, #18]
	   	  modH->u16errCnt++;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
		  continue;
 8001ebe:	e0c2      	b.n	8002046 <StartTaskModbusSlave+0x1da>
	  }

   }

   if (modH->u8BufferSize < 7)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8001ec6:	2b06      	cmp	r3, #6
 8001ec8:	d80b      	bhi.n	8001ee2 <StartTaskModbusSlave+0x76>
   {
      //The size of the frame is invalid
      modH->i8lastError = ERR_BAD_SIZE;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	220f      	movs	r2, #15
 8001ece:	749a      	strb	r2, [r3, #18]
      modH->u16errCnt++;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0

	  continue;
 8001ee0:	e0b1      	b.n	8002046 <StartTaskModbusSlave+0x1da>
    }

    //check broadcast mode
    modH->u8AddressMode = ADDRESS_NORMAL;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
    if (modH->u8Buffer[ID] == ADDRESS_BROADCAST)
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	7cdb      	ldrb	r3, [r3, #19]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d103      	bne.n	8001efa <StartTaskModbusSlave+0x8e>
    {
        modH->u8AddressMode = ADDRESS_BROADCAST;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
    }

   // check slave id
    if ( modH->u8Buffer[ID] !=  modH->u8id && modH->u8AddressMode != ADDRESS_BROADCAST)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	7cda      	ldrb	r2, [r3, #19]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	7a1b      	ldrb	r3, [r3, #8]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d005      	beq.n	8001f12 <StartTaskModbusSlave+0xa6>
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	f040 8099 	bne.w	8002044 <StartTaskModbusSlave+0x1d8>
    	}
#endif
	 }

	  // validate message: CRC, FCT, address and size
    uint8_t u8exception = validateRequest(modH);
 8001f12:	68f8      	ldr	r0, [r7, #12]
 8001f14:	f000 fc9c 	bl	8002850 <validateRequest>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	72fb      	strb	r3, [r7, #11]
	if (u8exception > 0)
 8001f1c:	7afb      	ldrb	r3, [r7, #11]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d00e      	beq.n	8001f40 <StartTaskModbusSlave+0xd4>
	{
	    if (u8exception != ERR_TIME_OUT)
 8001f22:	7afb      	ldrb	r3, [r7, #11]
 8001f24:	2b11      	cmp	r3, #17
 8001f26:	d007      	beq.n	8001f38 <StartTaskModbusSlave+0xcc>
		{
		    buildException( u8exception, modH);
 8001f28:	7afb      	ldrb	r3, [r7, #11]
 8001f2a:	68f9      	ldr	r1, [r7, #12]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f000 fe32 	bl	8002b96 <buildException>
			sendTxBuffer(modH);
 8001f32:	68f8      	ldr	r0, [r7, #12]
 8001f34:	f000 fe4e 	bl	8002bd4 <sendTxBuffer>
		}
		modH->i8lastError = u8exception;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	7afa      	ldrb	r2, [r7, #11]
 8001f3c:	749a      	strb	r2, [r3, #18]
		//return u8exception

		continue;
 8001f3e:	e082      	b.n	8002046 <StartTaskModbusSlave+0x1da>
	 }

	 modH->i8lastError = 0;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2200      	movs	r2, #0
 8001f44:	749a      	strb	r2, [r3, #18]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8001f4c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001f50:	4618      	mov	r0, r3
 8001f52:	f011 f86f 	bl	8013034 <xQueueSemaphoreTake>

	 // process message
	 switch(modH->u8Buffer[ FUNC ] )
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	7d1b      	ldrb	r3, [r3, #20]
 8001f5a:	3b01      	subs	r3, #1
 8001f5c:	2b0f      	cmp	r3, #15
 8001f5e:	d863      	bhi.n	8002028 <StartTaskModbusSlave+0x1bc>
 8001f60:	a201      	add	r2, pc, #4	@ (adr r2, 8001f68 <StartTaskModbusSlave+0xfc>)
 8001f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f66:	bf00      	nop
 8001f68:	08001fa9 	.word	0x08001fa9
 8001f6c:	08001fa9 	.word	0x08001fa9
 8001f70:	08001fc5 	.word	0x08001fc5
 8001f74:	08001fc5 	.word	0x08001fc5
 8001f78:	08001fe1 	.word	0x08001fe1
 8001f7c:	08001ff3 	.word	0x08001ff3
 8001f80:	08002029 	.word	0x08002029
 8001f84:	08002029 	.word	0x08002029
 8001f88:	08002029 	.word	0x08002029
 8001f8c:	08002029 	.word	0x08002029
 8001f90:	08002029 	.word	0x08002029
 8001f94:	08002029 	.word	0x08002029
 8001f98:	08002029 	.word	0x08002029
 8001f9c:	08002029 	.word	0x08002029
 8001fa0:	08002005 	.word	0x08002005
 8001fa4:	08002017 	.word	0x08002017
	 {
		case MB_FC_READ_COILS:
		case MB_FC_READ_DISCRETE_INPUT:
			if (modH->u8AddressMode == ADDRESS_BROADCAST)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d03c      	beq.n	800202c <StartTaskModbusSlave+0x1c0>
			{
				/* broadcast mode should ignore read function */
				break;
			}
			modH->i8state = process_FC1(modH);
 8001fb2:	68f8      	ldr	r0, [r7, #12]
 8001fb4:	f000 feb2 	bl	8002d1c <process_FC1>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	461a      	mov	r2, r3
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7
			break;
 8001fc2:	e036      	b.n	8002032 <StartTaskModbusSlave+0x1c6>
		case MB_FC_READ_INPUT_REGISTER:
		case MB_FC_READ_REGISTERS :
			if (modH->u8AddressMode == ADDRESS_BROADCAST)
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d030      	beq.n	8002030 <StartTaskModbusSlave+0x1c4>
			{
				/* broadcast mode should ignore read function */
				break;
			}
			modH->i8state = process_FC3(modH);
 8001fce:	68f8      	ldr	r0, [r7, #12]
 8001fd0:	f000 ff59 	bl	8002e86 <process_FC3>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7
			break;
 8001fde:	e028      	b.n	8002032 <StartTaskModbusSlave+0x1c6>
		case MB_FC_WRITE_COIL:
			modH->i8state = process_FC5(modH);
 8001fe0:	68f8      	ldr	r0, [r7, #12]
 8001fe2:	f000 ffbb 	bl	8002f5c <process_FC5>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	461a      	mov	r2, r3
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7
			break;
 8001ff0:	e01f      	b.n	8002032 <StartTaskModbusSlave+0x1c6>
		case MB_FC_WRITE_REGISTER :
			modH->i8state = process_FC6(modH);
 8001ff2:	68f8      	ldr	r0, [r7, #12]
 8001ff4:	f001 f80b 	bl	800300e <process_FC6>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7
			break;
 8002002:	e016      	b.n	8002032 <StartTaskModbusSlave+0x1c6>
		case MB_FC_WRITE_MULTIPLE_COILS:
			modH->i8state = process_FC15(modH);
 8002004:	68f8      	ldr	r0, [r7, #12]
 8002006:	f001 f834 	bl	8003072 <process_FC15>
 800200a:	4603      	mov	r3, r0
 800200c:	461a      	mov	r2, r3
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7
			break;
 8002014:	e00d      	b.n	8002032 <StartTaskModbusSlave+0x1c6>
		case MB_FC_WRITE_MULTIPLE_REGISTERS :
			modH->i8state = process_FC16(modH);
 8002016:	68f8      	ldr	r0, [r7, #12]
 8002018:	f001 f8b9 	bl	800318e <process_FC16>
 800201c:	4603      	mov	r3, r0
 800201e:	461a      	mov	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7
			break;
 8002026:	e004      	b.n	8002032 <StartTaskModbusSlave+0x1c6>
		default:
			break;
 8002028:	bf00      	nop
 800202a:	e002      	b.n	8002032 <StartTaskModbusSlave+0x1c6>
				break;
 800202c:	bf00      	nop
 800202e:	e000      	b.n	8002032 <StartTaskModbusSlave+0x1c6>
				break;
 8002030:	bf00      	nop
	 }


	 xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f8d3 00bc 	ldr.w	r0, [r3, #188]	@ 0xbc
 8002038:	2300      	movs	r3, #0
 800203a:	2200      	movs	r2, #0
 800203c:	2100      	movs	r1, #0
 800203e:	f010 fce7 	bl	8012a10 <xQueueGenericSend>

	 continue;
 8002042:	e000      	b.n	8002046 <StartTaskModbusSlave+0x1da>
    	continue; // continue this is not for us
 8002044:	bf00      	nop
  {
 8002046:	e717      	b.n	8001e78 <StartTaskModbusSlave+0xc>

08002048 <ModbusQuery>:
}



void ModbusQuery(modbusHandler_t * modH, modbus_t telegram )
{
 8002048:	b084      	sub	sp, #16
 800204a:	b580      	push	{r7, lr}
 800204c:	b084      	sub	sp, #16
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
 8002052:	f107 001c 	add.w	r0, r7, #28
 8002056:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	//Add the telegram to the TX tail Queue of Modbus
	if (modH->uModbusType == MB_MASTER)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	2b04      	cmp	r3, #4
 8002060:	d12b      	bne.n	80020ba <ModbusQuery+0x72>
	{
	telegram.u32CurrentTask = (uint32_t *) osThreadGetId();
 8002062:	f00f fde2 	bl	8011c2a <osThreadGetId>
 8002066:	4603      	mov	r3, r0
 8002068:	62bb      	str	r3, [r7, #40]	@ 0x28
	// 检查是否在中断中运行
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800206a:	2300      	movs	r3, #0
 800206c:	60fb      	str	r3, [r7, #12]
	if (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) {
 800206e:	4b17      	ldr	r3, [pc, #92]	@ (80020cc <ModbusQuery+0x84>)
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002076:	2b00      	cmp	r3, #0
 8002078:	d015      	beq.n	80020a6 <ModbusQuery+0x5e>
		// 在中断中，使用FromISR版本
		xQueueSendToBackFromISR(modH->QueueTelegramHandle, &telegram, &xHigherPriorityTaskWoken);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f8d3 00ac 	ldr.w	r0, [r3, #172]	@ 0xac
 8002080:	f107 020c 	add.w	r2, r7, #12
 8002084:	f107 011c 	add.w	r1, r7, #28
 8002088:	2300      	movs	r3, #0
 800208a:	f010 fdc3 	bl	8012c14 <xQueueGenericSendFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d013      	beq.n	80020bc <ModbusQuery+0x74>
 8002094:	4b0e      	ldr	r3, [pc, #56]	@ (80020d0 <ModbusQuery+0x88>)
 8002096:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	f3bf 8f4f 	dsb	sy
 80020a0:	f3bf 8f6f 	isb	sy
	}
	else{
//		LED_Toggle("red");
		while(1);// error a slave cannot send queries as a master
	}
}
 80020a4:	e00a      	b.n	80020bc <ModbusQuery+0x74>
		xQueueSendToBack(modH->QueueTelegramHandle, &telegram, 0);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f8d3 00ac 	ldr.w	r0, [r3, #172]	@ 0xac
 80020ac:	f107 011c 	add.w	r1, r7, #28
 80020b0:	2300      	movs	r3, #0
 80020b2:	2200      	movs	r2, #0
 80020b4:	f010 fcac 	bl	8012a10 <xQueueGenericSend>
}
 80020b8:	e000      	b.n	80020bc <ModbusQuery+0x74>
		while(1);// error a slave cannot send queries as a master
 80020ba:	e7fe      	b.n	80020ba <ModbusQuery+0x72>
}
 80020bc:	bf00      	nop
 80020be:	3710      	adds	r7, #16
 80020c0:	46bd      	mov	sp, r7
 80020c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80020c6:	b004      	add	sp, #16
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	e000ed00 	.word	0xe000ed00
 80020d0:	e000ed04 	.word	0xe000ed04

080020d4 <ModbusQueryV2>:

uint32_t ModbusQueryV2(modbusHandler_t * modH, modbus_t telegram )
{
 80020d4:	b084      	sub	sp, #16
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b082      	sub	sp, #8
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
 80020de:	f107 0014 	add.w	r0, r7, #20
 80020e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	//Add the telegram to the TX tail Queue of Modbus
	if (modH->uModbusType == MB_MASTER)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	2b04      	cmp	r3, #4
 80020ec:	d113      	bne.n	8002116 <ModbusQueryV2+0x42>
	{
	telegram.u32CurrentTask = (uint32_t *) osThreadGetId();
 80020ee:	f00f fd9c 	bl	8011c2a <osThreadGetId>
 80020f2:	4603      	mov	r3, r0
 80020f4:	623b      	str	r3, [r7, #32]
	xQueueSendToBack(modH->QueueTelegramHandle, &telegram, 0);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f8d3 00ac 	ldr.w	r0, [r3, #172]	@ 0xac
 80020fc:	f107 0114 	add.w	r1, r7, #20
 8002100:	2300      	movs	r3, #0
 8002102:	2200      	movs	r2, #0
 8002104:	f010 fc84 	bl	8012a10 <xQueueGenericSend>

	return ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8002108:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800210c:	2001      	movs	r0, #1
 800210e:	f012 fbb9 	bl	8014884 <ulTaskNotifyTake>
 8002112:	4603      	mov	r3, r0
 8002114:	e000      	b.n	8002118 <ModbusQueryV2+0x44>

	}
	else{
//		LED_Toggle("red");
		while(1);// error a slave cannot send queries as a master
 8002116:	e7fe      	b.n	8002116 <ModbusQueryV2+0x42>
	}
}
 8002118:	4618      	mov	r0, r3
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002122:	b004      	add	sp, #16
 8002124:	4770      	bx	lr
	...

08002128 <SendQuery>:
 * @param modH  modbus handler
 * @param modbus_t  modbus telegram structure (id, fct, ...)
 * @ingroup loop
 */
int8_t SendQuery(modbusHandler_t *modH ,  modbus_t telegram )
{
 8002128:	b084      	sub	sp, #16
 800212a:	b580      	push	{r7, lr}
 800212c:	b084      	sub	sp, #16
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
 8002132:	f107 001c 	add.w	r0, r7, #28
 8002136:	e880 000e 	stmia.w	r0, {r1, r2, r3}


	uint8_t u8regsno, u8bytesno;
	uint8_t  error = 0;
 800213a:	2300      	movs	r3, #0
 800213c:	73bb      	strb	r3, [r7, #14]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8002144:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002148:	4618      	mov	r0, r3
 800214a:	f010 ff73 	bl	8013034 <xQueueSemaphoreTake>

	if (modH->u8id!=0) error = ERR_NOT_MASTER;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	7a1b      	ldrb	r3, [r3, #8]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <SendQuery+0x32>
 8002156:	230a      	movs	r3, #10
 8002158:	73bb      	strb	r3, [r7, #14]
	if (modH->i8state != COM_IDLE) error = ERR_POLLING ;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f993 30a7 	ldrsb.w	r3, [r3, #167]	@ 0xa7
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <SendQuery+0x40>
 8002164:	230b      	movs	r3, #11
 8002166:	73bb      	strb	r3, [r7, #14]
	if ((telegram.u8id==0) || (telegram.u8id>247)) error = ERR_BAD_SLAVE_ID;
 8002168:	7f3b      	ldrb	r3, [r7, #28]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d002      	beq.n	8002174 <SendQuery+0x4c>
 800216e:	7f3b      	ldrb	r3, [r7, #28]
 8002170:	2bf7      	cmp	r3, #247	@ 0xf7
 8002172:	d901      	bls.n	8002178 <SendQuery+0x50>
 8002174:	2312      	movs	r3, #18
 8002176:	73bb      	strb	r3, [r7, #14]


	if(error)
 8002178:	7bbb      	ldrb	r3, [r7, #14]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d00d      	beq.n	800219a <SendQuery+0x72>
	{
		 modH->i8lastError = error;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	7bba      	ldrb	r2, [r7, #14]
 8002182:	749a      	strb	r2, [r3, #18]
		 xSemaphoreGive(modH->ModBusSphrHandle);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f8d3 00bc 	ldr.w	r0, [r3, #188]	@ 0xbc
 800218a:	2300      	movs	r3, #0
 800218c:	2200      	movs	r2, #0
 800218e:	2100      	movs	r1, #0
 8002190:	f010 fc3e 	bl	8012a10 <xQueueGenericSend>
		 return error;
 8002194:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002198:	e12a      	b.n	80023f0 <SendQuery+0x2c8>
	}


	modH->u16regs = telegram.u16reg;
 800219a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

	// telegram header
	modH->u8Buffer[ ID ]         = telegram.u8id;
 80021a2:	7f3a      	ldrb	r2, [r7, #28]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	74da      	strb	r2, [r3, #19]
	modH->u8Buffer[ FUNC ]       = telegram.u8fct;
 80021a8:	7f7a      	ldrb	r2, [r7, #29]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	751a      	strb	r2, [r3, #20]
	modH->u8Buffer[ ADD_HI ]     = highByte(telegram.u16RegAdd );
 80021ae:	8bfb      	ldrh	r3, [r7, #30]
 80021b0:	0a1b      	lsrs	r3, r3, #8
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	b2da      	uxtb	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	755a      	strb	r2, [r3, #21]
	modH->u8Buffer[ ADD_LO ]     = lowByte( telegram.u16RegAdd );
 80021ba:	8bfb      	ldrh	r3, [r7, #30]
 80021bc:	b2da      	uxtb	r2, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	759a      	strb	r2, [r3, #22]

	switch( telegram.u8fct )
 80021c2:	7f7b      	ldrb	r3, [r7, #29]
 80021c4:	3b01      	subs	r3, #1
 80021c6:	2b0f      	cmp	r3, #15
 80021c8:	f200 80ff 	bhi.w	80023ca <SendQuery+0x2a2>
 80021cc:	a201      	add	r2, pc, #4	@ (adr r2, 80021d4 <SendQuery+0xac>)
 80021ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021d2:	bf00      	nop
 80021d4:	08002215 	.word	0x08002215
 80021d8:	08002215 	.word	0x08002215
 80021dc:	08002215 	.word	0x08002215
 80021e0:	08002215 	.word	0x08002215
 80021e4:	08002233 	.word	0x08002233
 80021e8:	08002255 	.word	0x08002255
 80021ec:	080023cb 	.word	0x080023cb
 80021f0:	080023cb 	.word	0x080023cb
 80021f4:	080023cb 	.word	0x080023cb
 80021f8:	080023cb 	.word	0x080023cb
 80021fc:	080023cb 	.word	0x080023cb
 8002200:	080023cb 	.word	0x080023cb
 8002204:	080023cb 	.word	0x080023cb
 8002208:	080023cb 	.word	0x080023cb
 800220c:	08002277 	.word	0x08002277
 8002210:	08002335 	.word	0x08002335
	{
	case MB_FC_READ_COILS:
	case MB_FC_READ_DISCRETE_INPUT:
	case MB_FC_READ_REGISTERS:
	case MB_FC_READ_INPUT_REGISTER:
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 8002214:	8c3b      	ldrh	r3, [r7, #32]
 8002216:	0a1b      	lsrs	r3, r3, #8
 8002218:	b29b      	uxth	r3, r3
 800221a:	b2da      	uxtb	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 8002220:	8c3b      	ldrh	r3, [r7, #32]
 8002222:	b2da      	uxtb	r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2206      	movs	r2, #6
 800222c:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
	    break;
 8002230:	e0cb      	b.n	80023ca <SendQuery+0x2a2>
	case MB_FC_WRITE_COIL:
	    modH->u8Buffer[ NB_HI ]      = (( telegram.u16reg[0]> 0) ? 0xff : 0);
 8002232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002234:	881b      	ldrh	r3, [r3, #0]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <SendQuery+0x116>
 800223a:	22ff      	movs	r2, #255	@ 0xff
 800223c:	e000      	b.n	8002240 <SendQuery+0x118>
 800223e:	2200      	movs	r2, #0
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = 0;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2206      	movs	r2, #6
 800224e:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
	    break;
 8002252:	e0ba      	b.n	80023ca <SendQuery+0x2a2>
	case MB_FC_WRITE_REGISTER:
	    modH->u8Buffer[ NB_HI ]      = highByte( telegram.u16reg[0]);
 8002254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002256:	881b      	ldrh	r3, [r3, #0]
 8002258:	0a1b      	lsrs	r3, r3, #8
 800225a:	b29b      	uxth	r3, r3
 800225c:	b2da      	uxtb	r2, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16reg[0]);
 8002262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002264:	881b      	ldrh	r3, [r3, #0]
 8002266:	b2da      	uxtb	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2206      	movs	r2, #6
 8002270:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
	    break;
 8002274:	e0a9      	b.n	80023ca <SendQuery+0x2a2>
	case MB_FC_WRITE_MULTIPLE_COILS: // TODO: implement "sending coils"
	    u8regsno = telegram.u16CoilsNo / 16;
 8002276:	8c3b      	ldrh	r3, [r7, #32]
 8002278:	091b      	lsrs	r3, r3, #4
 800227a:	b29b      	uxth	r3, r3
 800227c:	727b      	strb	r3, [r7, #9]
	    u8bytesno = u8regsno * 2;
 800227e:	7a7b      	ldrb	r3, [r7, #9]
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	73fb      	strb	r3, [r7, #15]
	    if ((telegram.u16CoilsNo % 16) != 0)
 8002284:	8c3b      	ldrh	r3, [r7, #32]
 8002286:	f003 030f 	and.w	r3, r3, #15
 800228a:	b29b      	uxth	r3, r3
 800228c:	2b00      	cmp	r3, #0
 800228e:	d005      	beq.n	800229c <SendQuery+0x174>
	    {
	        u8bytesno++;
 8002290:	7bfb      	ldrb	r3, [r7, #15]
 8002292:	3301      	adds	r3, #1
 8002294:	73fb      	strb	r3, [r7, #15]
	        u8regsno++;
 8002296:	7a7b      	ldrb	r3, [r7, #9]
 8002298:	3301      	adds	r3, #1
 800229a:	727b      	strb	r3, [r7, #9]
	    }

	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 800229c:	8c3b      	ldrh	r3, [r7, #32]
 800229e:	0a1b      	lsrs	r3, r3, #8
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	b2da      	uxtb	r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 80022a8:	8c3b      	ldrh	r3, [r7, #32]
 80022aa:	b2da      	uxtb	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	761a      	strb	r2, [r3, #24]
	    modH->u8Buffer[ BYTE_CNT ]    = u8bytesno;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	7bfa      	ldrb	r2, [r7, #15]
 80022b4:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2207      	movs	r2, #7
 80022ba:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93

	    for (uint16_t i = 0; i < u8bytesno; i++)
 80022be:	2300      	movs	r3, #0
 80022c0:	81bb      	strh	r3, [r7, #12]
 80022c2:	e031      	b.n	8002328 <SendQuery+0x200>
	    {
	        if(i%2)
 80022c4:	89bb      	ldrh	r3, [r7, #12]
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d00f      	beq.n	80022f0 <SendQuery+0x1c8>
	        {
	        	modH->u8Buffer[ modH->u8BufferSize ] = lowByte( telegram.u16reg[ i/2 ] );
 80022d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022d2:	89bb      	ldrh	r3, [r7, #12]
 80022d4:	085b      	lsrs	r3, r3, #1
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	4413      	add	r3, r2
 80022dc:	881a      	ldrh	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 80022e4:	4619      	mov	r1, r3
 80022e6:	b2d2      	uxtb	r2, r2
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	440b      	add	r3, r1
 80022ec:	74da      	strb	r2, [r3, #19]
 80022ee:	e010      	b.n	8002312 <SendQuery+0x1ea>
	        }
	        else
	        {
	        	modH->u8Buffer[  modH->u8BufferSize ] = highByte( telegram.u16reg[ i/2 ] );
 80022f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022f2:	89bb      	ldrh	r3, [r7, #12]
 80022f4:	085b      	lsrs	r3, r3, #1
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	4413      	add	r3, r2
 80022fc:	881b      	ldrh	r3, [r3, #0]
 80022fe:	0a1b      	lsrs	r3, r3, #8
 8002300:	b29a      	uxth	r2, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002308:	4619      	mov	r1, r3
 800230a:	b2d2      	uxtb	r2, r2
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	440b      	add	r3, r1
 8002310:	74da      	strb	r2, [r3, #19]

	        }
	        modH->u8BufferSize++;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002318:	3301      	adds	r3, #1
 800231a:	b2da      	uxtb	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
	    for (uint16_t i = 0; i < u8bytesno; i++)
 8002322:	89bb      	ldrh	r3, [r7, #12]
 8002324:	3301      	adds	r3, #1
 8002326:	81bb      	strh	r3, [r7, #12]
 8002328:	7bfb      	ldrb	r3, [r7, #15]
 800232a:	b29b      	uxth	r3, r3
 800232c:	89ba      	ldrh	r2, [r7, #12]
 800232e:	429a      	cmp	r2, r3
 8002330:	d3c8      	bcc.n	80022c4 <SendQuery+0x19c>
	    }
	    break;
 8002332:	e04a      	b.n	80023ca <SendQuery+0x2a2>

	case MB_FC_WRITE_MULTIPLE_REGISTERS:
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 8002334:	8c3b      	ldrh	r3, [r7, #32]
 8002336:	0a1b      	lsrs	r3, r3, #8
 8002338:	b29b      	uxth	r3, r3
 800233a:	b2da      	uxtb	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 8002340:	8c3b      	ldrh	r3, [r7, #32]
 8002342:	b2da      	uxtb	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	761a      	strb	r2, [r3, #24]
	    modH->u8Buffer[ BYTE_CNT ]    = (uint8_t) ( telegram.u16CoilsNo * 2 );
 8002348:	8c3b      	ldrh	r3, [r7, #32]
 800234a:	b2db      	uxtb	r3, r3
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	b2da      	uxtb	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2207      	movs	r2, #7
 8002358:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93

	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 800235c:	2300      	movs	r3, #0
 800235e:	817b      	strh	r3, [r7, #10]
 8002360:	e02e      	b.n	80023c0 <SendQuery+0x298>
	    {

	        modH->u8Buffer[  modH->u8BufferSize ] = highByte(  telegram.u16reg[ i ] );
 8002362:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002364:	897b      	ldrh	r3, [r7, #10]
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	4413      	add	r3, r2
 800236a:	881b      	ldrh	r3, [r3, #0]
 800236c:	0a1b      	lsrs	r3, r3, #8
 800236e:	b29a      	uxth	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002376:	4619      	mov	r1, r3
 8002378:	b2d2      	uxtb	r2, r2
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	440b      	add	r3, r1
 800237e:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002386:	3301      	adds	r3, #1
 8002388:	b2da      	uxtb	r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
	        modH->u8Buffer[  modH->u8BufferSize ] = lowByte( telegram.u16reg[ i ] );
 8002390:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002392:	897b      	ldrh	r3, [r7, #10]
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	4413      	add	r3, r2
 8002398:	881a      	ldrh	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 80023a0:	4619      	mov	r1, r3
 80023a2:	b2d2      	uxtb	r2, r2
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	440b      	add	r3, r1
 80023a8:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 80023b0:	3301      	adds	r3, #1
 80023b2:	b2da      	uxtb	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 80023ba:	897b      	ldrh	r3, [r7, #10]
 80023bc:	3301      	adds	r3, #1
 80023be:	817b      	strh	r3, [r7, #10]
 80023c0:	8c3b      	ldrh	r3, [r7, #32]
 80023c2:	897a      	ldrh	r2, [r7, #10]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d3cc      	bcc.n	8002362 <SendQuery+0x23a>
	    }
	    break;
 80023c8:	bf00      	nop
	}


	sendTxBuffer(modH);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 fc02 	bl	8002bd4 <sendTxBuffer>

	xSemaphoreGive(modH->ModBusSphrHandle);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f8d3 00bc 	ldr.w	r0, [r3, #188]	@ 0xbc
 80023d6:	2300      	movs	r3, #0
 80023d8:	2200      	movs	r2, #0
 80023da:	2100      	movs	r1, #0
 80023dc:	f010 fb18 	bl	8012a10 <xQueueGenericSend>

	modH->i8state = COM_WAITING;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7
	modH->i8lastError = 0;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	749a      	strb	r2, [r3, #18]
	return 0;
 80023ee:	2300      	movs	r3, #0


}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3710      	adds	r7, #16
 80023f4:	46bd      	mov	sp, r7
 80023f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80023fa:	b004      	add	sp, #16
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop

08002400 <StartTaskModbusMaster>:
}

#endif

void StartTaskModbusMaster(void *argument)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b08c      	sub	sp, #48	@ 0x30
 8002404:	af02      	add	r7, sp, #8
 8002406:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	627b      	str	r3, [r7, #36]	@ 0x24


  for(;;)
  {
	  /*Wait indefinitely for a telegram to send */
	  xQueueReceive(modH->QueueTelegramHandle, &telegram, portMAX_DELAY);
 800240c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800240e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002412:	f107 010c 	add.w	r1, r7, #12
 8002416:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800241a:	4618      	mov	r0, r3
 800241c:	f010 fd28 	bl	8012e70 <xQueueReceive>
       /* Block until a Modbus Frame arrives or query timeouts*/
   	   ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
     }
#else
     /*Wait period of silence between modbus frame */
	 if(modH->port->Init.BaudRate <= 19200)
 8002420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f5b3 4f96 	cmp.w	r3, #19200	@ 0x4b00
 800242a:	d80b      	bhi.n	8002444 <StartTaskModbusMaster+0x44>
	 	osDelay((int)(35000/modH->port->Init.BaudRate) + 2);
 800242c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f648 02b8 	movw	r2, #35000	@ 0x88b8
 8002436:	fbb2 f3f3 	udiv	r3, r2, r3
 800243a:	3302      	adds	r3, #2
 800243c:	4618      	mov	r0, r3
 800243e:	f00f fbff 	bl	8011c40 <osDelay>
 8002442:	e002      	b.n	800244a <StartTaskModbusMaster+0x4a>
	 else
	 	osDelay(3);
 8002444:	2003      	movs	r0, #3
 8002446:	f00f fbfb 	bl	8011c40 <osDelay>

     // This is the case for implementations with only USART support
     SendQuery(modH, telegram);
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	9300      	str	r3, [sp, #0]
 800244e:	f107 030c 	add.w	r3, r7, #12
 8002452:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002454:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002456:	f7ff fe67 	bl	8002128 <SendQuery>
     /* Block indefinitely until a Modbus Frame arrives or query timeouts*/
     ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800245a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800245e:	2001      	movs	r0, #1
 8002460:	f012 fa10 	bl	8014884 <ulTaskNotifyTake>
 8002464:	6238      	str	r0, [r7, #32]

#endif

	  // notify the task the request timeout
      modH->i8lastError = 0;
 8002466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002468:	2200      	movs	r2, #0
 800246a:	749a      	strb	r2, [r3, #18]
      if(ulNotificationValue)
 800246c:	6a3b      	ldr	r3, [r7, #32]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d017      	beq.n	80024a2 <StartTaskModbusMaster+0xa2>
      {
    	  modH->i8state = COM_IDLE;
 8002472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002474:	2200      	movs	r2, #0
 8002476:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7
    	  modH->i8lastError = ERR_TIME_OUT;
 800247a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800247c:	2211      	movs	r2, #17
 800247e:	749a      	strb	r2, [r3, #18]
    	  modH->u16errCnt++;
 8002480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002482:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8002486:	3301      	adds	r3, #1
 8002488:	b29a      	uxth	r2, r3
 800248a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800248c:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
    	  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 8002490:	69b8      	ldr	r0, [r7, #24]
 8002492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002494:	7c9b      	ldrb	r3, [r3, #18]
 8002496:	4619      	mov	r1, r3
 8002498:	2300      	movs	r3, #0
 800249a:	2203      	movs	r2, #3
 800249c:	f012 fa3e 	bl	801491c <xTaskGenericNotify>
    	  continue;
 80024a0:	e096      	b.n	80025d0 <StartTaskModbusMaster+0x1d0>
      {
    	  getRxBuffer(modH);
      }

#else
      getRxBuffer(modH);
 80024a2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80024a4:	f000 f98c 	bl	80027c0 <getRxBuffer>
#endif



	  if ( modH->u8BufferSize < 6){
 80024a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024aa:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 80024ae:	2b05      	cmp	r3, #5
 80024b0:	d817      	bhi.n	80024e2 <StartTaskModbusMaster+0xe2>

		  modH->i8state = COM_IDLE;
 80024b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7
		  modH->i8lastError = ERR_BAD_SIZE;
 80024ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024bc:	220f      	movs	r2, #15
 80024be:	749a      	strb	r2, [r3, #18]
		  modH->u16errCnt++;
 80024c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c2:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 80024c6:	3301      	adds	r3, #1
 80024c8:	b29a      	uxth	r2, r3
 80024ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024cc:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 80024d0:	69b8      	ldr	r0, [r7, #24]
 80024d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d4:	7c9b      	ldrb	r3, [r3, #18]
 80024d6:	4619      	mov	r1, r3
 80024d8:	2300      	movs	r3, #0
 80024da:	2203      	movs	r2, #3
 80024dc:	f012 fa1e 	bl	801491c <xTaskGenericNotify>
		  continue;
 80024e0:	e076      	b.n	80025d0 <StartTaskModbusMaster+0x1d0>
	  }

	  xTimerStop(modH->xTimerTimeout,0); // cancel timeout timer
 80024e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e4:	f8d3 00b8 	ldr.w	r0, [r3, #184]	@ 0xb8
 80024e8:	2300      	movs	r3, #0
 80024ea:	9300      	str	r3, [sp, #0]
 80024ec:	2300      	movs	r3, #0
 80024ee:	2200      	movs	r2, #0
 80024f0:	2103      	movs	r1, #3
 80024f2:	f012 fcb7 	bl	8014e64 <xTimerGenericCommand>


	  // validate message: id, CRC, FCT, exception
	  int8_t u8exception = validateAnswer(modH);
 80024f6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80024f8:	f000 f8f2 	bl	80026e0 <validateAnswer>
 80024fc:	4603      	mov	r3, r0
 80024fe:	77fb      	strb	r3, [r7, #31]
	  if (u8exception != 0)
 8002500:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d00f      	beq.n	8002528 <StartTaskModbusMaster+0x128>
	  {
		 modH->i8state = COM_IDLE;
 8002508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800250a:	2200      	movs	r2, #0
 800250c:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7
         modH->i8lastError = u8exception;
 8002510:	7ffa      	ldrb	r2, [r7, #31]
 8002512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002514:	749a      	strb	r2, [r3, #18]
		 xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 8002516:	69b8      	ldr	r0, [r7, #24]
 8002518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800251a:	7c9b      	ldrb	r3, [r3, #18]
 800251c:	4619      	mov	r1, r3
 800251e:	2300      	movs	r3, #0
 8002520:	2203      	movs	r2, #3
 8002522:	f012 f9fb 	bl	801491c <xTaskGenericNotify>
	     continue;
 8002526:	e053      	b.n	80025d0 <StartTaskModbusMaster+0x1d0>
	  }

	  modH->i8lastError = u8exception;
 8002528:	7ffa      	ldrb	r2, [r7, #31]
 800252a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800252c:	749a      	strb	r2, [r3, #18]

	  xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 800252e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002530:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8002534:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002538:	4618      	mov	r0, r3
 800253a:	f010 fd7b 	bl	8013034 <xQueueSemaphoreTake>
	  // process answer
	  switch( modH->u8Buffer[ FUNC ] )
 800253e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002540:	7d1b      	ldrb	r3, [r3, #20]
 8002542:	3b01      	subs	r3, #1
 8002544:	2b0f      	cmp	r3, #15
 8002546:	d82b      	bhi.n	80025a0 <StartTaskModbusMaster+0x1a0>
 8002548:	a201      	add	r2, pc, #4	@ (adr r2, 8002550 <StartTaskModbusMaster+0x150>)
 800254a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800254e:	bf00      	nop
 8002550:	08002591 	.word	0x08002591
 8002554:	08002591 	.word	0x08002591
 8002558:	08002599 	.word	0x08002599
 800255c:	08002599 	.word	0x08002599
 8002560:	080025a1 	.word	0x080025a1
 8002564:	080025a1 	.word	0x080025a1
 8002568:	080025a1 	.word	0x080025a1
 800256c:	080025a1 	.word	0x080025a1
 8002570:	080025a1 	.word	0x080025a1
 8002574:	080025a1 	.word	0x080025a1
 8002578:	080025a1 	.word	0x080025a1
 800257c:	080025a1 	.word	0x080025a1
 8002580:	080025a1 	.word	0x080025a1
 8002584:	080025a1 	.word	0x080025a1
 8002588:	080025a1 	.word	0x080025a1
 800258c:	080025a1 	.word	0x080025a1
	  {
	  case MB_FC_READ_COILS:
	  case MB_FC_READ_DISCRETE_INPUT:
	      //call get_FC1 to transfer the incoming message to u16regs buffer
	      get_FC1(modH);
 8002590:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002592:	f000 f81f 	bl	80025d4 <get_FC1>
	      break;
 8002596:	e004      	b.n	80025a2 <StartTaskModbusMaster+0x1a2>
	  case MB_FC_READ_INPUT_REGISTER:
	  case MB_FC_READ_REGISTERS :
	      // call get_FC3 to transfer the incoming message to u16regs buffer
	      get_FC3(modH);
 8002598:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800259a:	f000 f872 	bl	8002682 <get_FC3>
	      break;
 800259e:	e000      	b.n	80025a2 <StartTaskModbusMaster+0x1a2>
	  case MB_FC_WRITE_MULTIPLE_COILS:
	  case MB_FC_WRITE_MULTIPLE_REGISTERS :
	      // nothing to do
	      break;
	  default:
	      break;
 80025a0:	bf00      	nop
	  }
	  modH->i8state = COM_IDLE;
 80025a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7

	  if (modH->i8lastError ==0) // no error, we use OP_OK_QUERY, since we need to use a different value than 0 to detect the timeout
 80025aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ac:	7c9b      	ldrb	r3, [r3, #18]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d10d      	bne.n	80025ce <StartTaskModbusMaster+0x1ce>
	  {
		  xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 80025b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b4:	f8d3 00bc 	ldr.w	r0, [r3, #188]	@ 0xbc
 80025b8:	2300      	movs	r3, #0
 80025ba:	2200      	movs	r2, #0
 80025bc:	2100      	movs	r1, #0
 80025be:	f010 fa27 	bl	8012a10 <xQueueGenericSend>
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, OP_OK_QUERY, eSetValueWithOverwrite);
 80025c2:	69b8      	ldr	r0, [r7, #24]
 80025c4:	2300      	movs	r3, #0
 80025c6:	2203      	movs	r2, #3
 80025c8:	2114      	movs	r1, #20
 80025ca:	f012 f9a7 	bl	801491c <xTaskGenericNotify>
	  }


	  continue;
 80025ce:	bf00      	nop
  {
 80025d0:	e71c      	b.n	800240c <StartTaskModbusMaster+0xc>
 80025d2:	bf00      	nop

080025d4 <get_FC1>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC1(modbusHandler_t *modH)
{
 80025d4:	b590      	push	{r4, r7, lr}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 80025dc:	2303      	movs	r3, #3
 80025de:	73bb      	strb	r3, [r7, #14]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 80025e0:	2300      	movs	r3, #0
 80025e2:	73fb      	strb	r3, [r7, #15]
 80025e4:	e043      	b.n	800266e <get_FC1+0x9a>

        if(i%2)
 80025e6:	7bfb      	ldrb	r3, [r7, #15]
 80025e8:	f003 0301 	and.w	r3, r3, #1
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d01c      	beq.n	800262c <get_FC1+0x58>
        {
        	modH->u16regs[i/2]= word(modH->u8Buffer[i+u8byte], lowByte(modH->u16regs[i/2]));
 80025f2:	7bfa      	ldrb	r2, [r7, #15]
 80025f4:	7bbb      	ldrb	r3, [r7, #14]
 80025f6:	4413      	add	r3, r2
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	4413      	add	r3, r2
 80025fc:	7cd8      	ldrb	r0, [r3, #19]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8002604:	7bfb      	ldrb	r3, [r7, #15]
 8002606:	085b      	lsrs	r3, r3, #1
 8002608:	b2db      	uxtb	r3, r3
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	4413      	add	r3, r2
 800260e:	881b      	ldrh	r3, [r3, #0]
 8002610:	b2d9      	uxtb	r1, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8002618:	7bfb      	ldrb	r3, [r7, #15]
 800261a:	085b      	lsrs	r3, r3, #1
 800261c:	b2db      	uxtb	r3, r3
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	18d4      	adds	r4, r2, r3
 8002622:	f000 fa5f 	bl	8002ae4 <word>
 8002626:	4603      	mov	r3, r0
 8002628:	8023      	strh	r3, [r4, #0]
 800262a:	e01d      	b.n	8002668 <get_FC1+0x94>
        }
        else
        {

        	modH->u16regs[i/2]= word(highByte(modH->u16regs[i/2]), modH->u8Buffer[i+u8byte]);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8002632:	7bfb      	ldrb	r3, [r7, #15]
 8002634:	085b      	lsrs	r3, r3, #1
 8002636:	b2db      	uxtb	r3, r3
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	4413      	add	r3, r2
 800263c:	881b      	ldrh	r3, [r3, #0]
 800263e:	0a1b      	lsrs	r3, r3, #8
 8002640:	b29b      	uxth	r3, r3
 8002642:	b2d8      	uxtb	r0, r3
 8002644:	7bfa      	ldrb	r2, [r7, #15]
 8002646:	7bbb      	ldrb	r3, [r7, #14]
 8002648:	4413      	add	r3, r2
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	4413      	add	r3, r2
 800264e:	7cd9      	ldrb	r1, [r3, #19]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8002656:	7bfb      	ldrb	r3, [r7, #15]
 8002658:	085b      	lsrs	r3, r3, #1
 800265a:	b2db      	uxtb	r3, r3
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	18d4      	adds	r4, r2, r3
 8002660:	f000 fa40 	bl	8002ae4 <word>
 8002664:	4603      	mov	r3, r0
 8002666:	8023      	strh	r3, [r4, #0]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 8002668:	7bfb      	ldrb	r3, [r7, #15]
 800266a:	3301      	adds	r3, #1
 800266c:	73fb      	strb	r3, [r7, #15]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	7d5b      	ldrb	r3, [r3, #21]
 8002672:	7bfa      	ldrb	r2, [r7, #15]
 8002674:	429a      	cmp	r2, r3
 8002676:	d3b6      	bcc.n	80025e6 <get_FC1+0x12>
        }

     }
}
 8002678:	bf00      	nop
 800267a:	bf00      	nop
 800267c:	3714      	adds	r7, #20
 800267e:	46bd      	mov	sp, r7
 8002680:	bd90      	pop	{r4, r7, pc}

08002682 <get_FC3>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC3(modbusHandler_t *modH)
{
 8002682:	b590      	push	{r4, r7, lr}
 8002684:	b085      	sub	sp, #20
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 800268a:	2303      	movs	r3, #3
 800268c:	73fb      	strb	r3, [r7, #15]

    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 800268e:	2300      	movs	r3, #0
 8002690:	73bb      	strb	r3, [r7, #14]
 8002692:	e018      	b.n	80026c6 <get_FC3+0x44>
    {
    	modH->u16regs[ i ] = word(modH->u8Buffer[ u8byte ], modH->u8Buffer[ u8byte +1 ]);
 8002694:	7bfb      	ldrb	r3, [r7, #15]
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	4413      	add	r3, r2
 800269a:	7cd8      	ldrb	r0, [r3, #19]
 800269c:	7bfb      	ldrb	r3, [r7, #15]
 800269e:	3301      	adds	r3, #1
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	4413      	add	r3, r2
 80026a4:	7cd9      	ldrb	r1, [r3, #19]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80026ac:	7bbb      	ldrb	r3, [r7, #14]
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	18d4      	adds	r4, r2, r3
 80026b2:	f000 fa17 	bl	8002ae4 <word>
 80026b6:	4603      	mov	r3, r0
 80026b8:	8023      	strh	r3, [r4, #0]
        u8byte += 2;
 80026ba:	7bfb      	ldrb	r3, [r7, #15]
 80026bc:	3302      	adds	r3, #2
 80026be:	73fb      	strb	r3, [r7, #15]
    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 80026c0:	7bbb      	ldrb	r3, [r7, #14]
 80026c2:	3301      	adds	r3, #1
 80026c4:	73bb      	strb	r3, [r7, #14]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	7d5b      	ldrb	r3, [r3, #21]
 80026ca:	085b      	lsrs	r3, r3, #1
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	7bba      	ldrb	r2, [r7, #14]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d3df      	bcc.n	8002694 <get_FC3+0x12>
    }
}
 80026d4:	bf00      	nop
 80026d6:	bf00      	nop
 80026d8:	3714      	adds	r7, #20
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd90      	pop	{r4, r7, pc}
	...

080026e0 <validateAnswer>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup buffer
 */
uint8_t validateAnswer(modbusHandler_t *modH)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
#if ENABLE_TCP ==1
	if(modH->xTypeHW != TCP_HW)
	{
#endif
	uint16_t u16MsgCRC =
        ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 80026ee:	3b02      	subs	r3, #2
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	4413      	add	r3, r2
 80026f4:	7cdb      	ldrb	r3, [r3, #19]
         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 80026f6:	b21b      	sxth	r3, r3
 80026f8:	021b      	lsls	r3, r3, #8
 80026fa:	b21a      	sxth	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002702:	3b01      	subs	r3, #1
 8002704:	6879      	ldr	r1, [r7, #4]
 8002706:	440b      	add	r3, r1
 8002708:	7cdb      	ldrb	r3, [r3, #19]
 800270a:	b21b      	sxth	r3, r3
 800270c:	4313      	orrs	r3, r2
 800270e:	b21b      	sxth	r3, r3
	uint16_t u16MsgCRC =
 8002710:	81bb      	strh	r3, [r7, #12]
    if ( calcCRC(modH->u8Buffer,  modH->u8BufferSize-2) != u16MsgCRC )
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f103 0213 	add.w	r2, r3, #19
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 800271e:	3b02      	subs	r3, #2
 8002720:	b2db      	uxtb	r3, r3
 8002722:	4619      	mov	r1, r3
 8002724:	4610      	mov	r0, r2
 8002726:	f000 f9f0 	bl	8002b0a <calcCRC>
 800272a:	4603      	mov	r3, r0
 800272c:	461a      	mov	r2, r3
 800272e:	89bb      	ldrh	r3, [r7, #12]
 8002730:	4293      	cmp	r3, r2
 8002732:	d009      	beq.n	8002748 <validateAnswer+0x68>
    {
    	modH->u16errCnt ++;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 800273a:	3301      	adds	r3, #1
 800273c:	b29a      	uxth	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
        return ERR_BAD_CRC;
 8002744:	230d      	movs	r3, #13
 8002746:	e034      	b.n	80027b2 <validateAnswer+0xd2>
	}
#endif


    // check exception
    if ((modH->u8Buffer[ FUNC ] & 0x80) != 0)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	7d1b      	ldrb	r3, [r3, #20]
 800274c:	b25b      	sxtb	r3, r3
 800274e:	2b00      	cmp	r3, #0
 8002750:	da09      	bge.n	8002766 <validateAnswer+0x86>
    {
    	modH->u16errCnt ++;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8002758:	3301      	adds	r3, #1
 800275a:	b29a      	uxth	r2, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
        return ERR_EXCEPTION;
 8002762:	230e      	movs	r3, #14
 8002764:	e025      	b.n	80027b2 <validateAnswer+0xd2>
    }

    // check fct code
    bool isSupported = false;
 8002766:	2300      	movs	r3, #0
 8002768:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 800276a:	2300      	movs	r3, #0
 800276c:	73bb      	strb	r3, [r7, #14]
 800276e:	e00c      	b.n	800278a <validateAnswer+0xaa>
    {
        if (fctsupported[i] == modH->u8Buffer[FUNC])
 8002770:	7bbb      	ldrb	r3, [r7, #14]
 8002772:	4a12      	ldr	r2, [pc, #72]	@ (80027bc <validateAnswer+0xdc>)
 8002774:	5cd2      	ldrb	r2, [r2, r3]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	7d1b      	ldrb	r3, [r3, #20]
 800277a:	429a      	cmp	r2, r3
 800277c:	d102      	bne.n	8002784 <validateAnswer+0xa4>
        {
            isSupported = 1;
 800277e:	2301      	movs	r3, #1
 8002780:	73fb      	strb	r3, [r7, #15]
            break;
 8002782:	e005      	b.n	8002790 <validateAnswer+0xb0>
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8002784:	7bbb      	ldrb	r3, [r7, #14]
 8002786:	3301      	adds	r3, #1
 8002788:	73bb      	strb	r3, [r7, #14]
 800278a:	7bbb      	ldrb	r3, [r7, #14]
 800278c:	2b07      	cmp	r3, #7
 800278e:	d9ef      	bls.n	8002770 <validateAnswer+0x90>
        }
    }
    if (!isSupported)
 8002790:	7bfb      	ldrb	r3, [r7, #15]
 8002792:	f083 0301 	eor.w	r3, r3, #1
 8002796:	b2db      	uxtb	r3, r3
 8002798:	2b00      	cmp	r3, #0
 800279a:	d009      	beq.n	80027b0 <validateAnswer+0xd0>
    {
    	modH->u16errCnt ++;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 80027a2:	3301      	adds	r3, #1
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
        return EXC_FUNC_CODE;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e000      	b.n	80027b2 <validateAnswer+0xd2>
    }

    return 0; // OK, no exception code thrown
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3710      	adds	r7, #16
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	080176dc 	.word	0x080176dc

080027c0 <getRxBuffer>:
 *
 * @return buffer size if OK, ERR_BUFF_OVERFLOW if u8BufferSize >= MAX_BUFFER
 * @ingroup buffer
 */
int16_t getRxBuffer(modbusHandler_t *modH)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]

    int16_t i16result;

    if(modH->xTypeHW == USART_HW)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d104      	bne.n	80027dc <getRxBuffer+0x1c>
    {
    	HAL_UART_AbortReceive_IT(modH->port); // disable interrupts to avoid race conditions on serial port
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f008 ff1c 	bl	800b614 <HAL_UART_AbortReceive_IT>
    }

	if (modH->xBufferRX.overflow)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f893 3143 	ldrb.w	r3, [r3, #323]	@ 0x143
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d007      	beq.n	80027f6 <getRxBuffer+0x36>
    {
       	RingClear(&modH->xBufferRX); // clean up the overflowed buffer
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	33c0      	adds	r3, #192	@ 0xc0
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7ff f981 	bl	8001af2 <RingClear>
       	i16result =  ERR_BUFF_OVERFLOW;
 80027f0:	230c      	movs	r3, #12
 80027f2:	81fb      	strh	r3, [r7, #14]
 80027f4:	e019      	b.n	800282a <getRxBuffer+0x6a>
    }
	else
	{
		modH->u8BufferSize = RingGetAllBytes(&modH->xBufferRX, modH->u8Buffer);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f103 02c0 	add.w	r2, r3, #192	@ 0xc0
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	3313      	adds	r3, #19
 8002800:	4619      	mov	r1, r3
 8002802:	4610      	mov	r0, r2
 8002804:	f7ff f90f 	bl	8001a26 <RingGetAllBytes>
 8002808:	4603      	mov	r3, r0
 800280a:	461a      	mov	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
		modH->u16InCnt++;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 8002818:	3301      	adds	r3, #1
 800281a:	b29a      	uxth	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
		i16result = modH->u8BufferSize;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002828:	81fb      	strh	r3, [r7, #14]
	}

	if(modH->xTypeHW == USART_HW)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8002830:	2b01      	cmp	r3, #1
 8002832:	d107      	bne.n	8002844 <getRxBuffer+0x84>
	{
		HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6858      	ldr	r0, [r3, #4]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	33a6      	adds	r3, #166	@ 0xa6
 800283c:	2201      	movs	r2, #1
 800283e:	4619      	mov	r1, r3
 8002840:	f008 fe9c 	bl	800b57c <HAL_UART_Receive_IT>
	}

    return i16result;
 8002844:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8002848:	4618      	mov	r0, r3
 800284a:	3710      	adds	r7, #16
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <validateRequest>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup modH Modbus handler
 */
uint8_t validateRequest(modbusHandler_t *modH)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
	    		return ERR_BAD_CRC;
	    		}
	    }
#else
	    uint16_t u16MsgCRC;
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 800285e:	3b02      	subs	r3, #2
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	4413      	add	r3, r2
 8002864:	7cdb      	ldrb	r3, [r3, #19]
	    		   	         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 8002866:	b21b      	sxth	r3, r3
 8002868:	021b      	lsls	r3, r3, #8
 800286a:	b21a      	sxth	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002872:	3b01      	subs	r3, #1
 8002874:	6879      	ldr	r1, [r7, #4]
 8002876:	440b      	add	r3, r1
 8002878:	7cdb      	ldrb	r3, [r3, #19]
 800287a:	b21b      	sxth	r3, r3
 800287c:	4313      	orrs	r3, r2
 800287e:	b21b      	sxth	r3, r3
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 8002880:	813b      	strh	r3, [r7, #8]


	    if ( calcCRC( modH->u8Buffer,  modH->u8BufferSize-2 ) != u16MsgCRC )
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f103 0213 	add.w	r2, r3, #19
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 800288e:	3b02      	subs	r3, #2
 8002890:	b2db      	uxtb	r3, r3
 8002892:	4619      	mov	r1, r3
 8002894:	4610      	mov	r0, r2
 8002896:	f000 f938 	bl	8002b0a <calcCRC>
 800289a:	4603      	mov	r3, r0
 800289c:	461a      	mov	r2, r3
 800289e:	893b      	ldrh	r3, [r7, #8]
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d009      	beq.n	80028b8 <validateRequest+0x68>
	    {
	       		modH->u16errCnt ++;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 80028aa:	3301      	adds	r3, #1
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
	       		return ERR_BAD_CRC;
 80028b4:	230d      	movs	r3, #13
 80028b6:	e10e      	b.n	8002ad6 <validateRequest+0x286>


#endif

	    // check fct code
	    bool isSupported = false;
 80028b8:	2300      	movs	r3, #0
 80028ba:	73fb      	strb	r3, [r7, #15]
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 80028bc:	2300      	movs	r3, #0
 80028be:	73bb      	strb	r3, [r7, #14]
 80028c0:	e00c      	b.n	80028dc <validateRequest+0x8c>
	    {
	        if (fctsupported[i] == modH->u8Buffer[FUNC])
 80028c2:	7bbb      	ldrb	r3, [r7, #14]
 80028c4:	4a86      	ldr	r2, [pc, #536]	@ (8002ae0 <validateRequest+0x290>)
 80028c6:	5cd2      	ldrb	r2, [r2, r3]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	7d1b      	ldrb	r3, [r3, #20]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d102      	bne.n	80028d6 <validateRequest+0x86>
	        {
	            isSupported = 1;
 80028d0:	2301      	movs	r3, #1
 80028d2:	73fb      	strb	r3, [r7, #15]
	            break;
 80028d4:	e005      	b.n	80028e2 <validateRequest+0x92>
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 80028d6:	7bbb      	ldrb	r3, [r7, #14]
 80028d8:	3301      	adds	r3, #1
 80028da:	73bb      	strb	r3, [r7, #14]
 80028dc:	7bbb      	ldrb	r3, [r7, #14]
 80028de:	2b07      	cmp	r3, #7
 80028e0:	d9ef      	bls.n	80028c2 <validateRequest+0x72>
	        }
	    }
	    if (!isSupported)
 80028e2:	7bfb      	ldrb	r3, [r7, #15]
 80028e4:	f083 0301 	eor.w	r3, r3, #1
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d009      	beq.n	8002902 <validateRequest+0xb2>
	    {
	    	modH->u16errCnt ++;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 80028f4:	3301      	adds	r3, #1
 80028f6:	b29a      	uxth	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
	        return EXC_FUNC_CODE;
 80028fe:	2301      	movs	r3, #1
 8002900:	e0e9      	b.n	8002ad6 <validateRequest+0x286>
	    }

	    // check start address & nb range
	    uint16_t u16AdRegs = 0;
 8002902:	2300      	movs	r3, #0
 8002904:	81bb      	strh	r3, [r7, #12]
	    uint16_t u16NRegs = 0;
 8002906:	2300      	movs	r3, #0
 8002908:	817b      	strh	r3, [r7, #10]

	    //uint8_t u8regs;
	    switch ( modH->u8Buffer[ FUNC ] )
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	7d1b      	ldrb	r3, [r3, #20]
 800290e:	3b01      	subs	r3, #1
 8002910:	2b0f      	cmp	r3, #15
 8002912:	f200 80df 	bhi.w	8002ad4 <validateRequest+0x284>
 8002916:	a201      	add	r2, pc, #4	@ (adr r2, 800291c <validateRequest+0xcc>)
 8002918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800291c:	0800295d 	.word	0x0800295d
 8002920:	0800295d 	.word	0x0800295d
 8002924:	08002a75 	.word	0x08002a75
 8002928:	08002a75 	.word	0x08002a75
 800292c:	08002a09 	.word	0x08002a09
 8002930:	08002a51 	.word	0x08002a51
 8002934:	08002ad5 	.word	0x08002ad5
 8002938:	08002ad5 	.word	0x08002ad5
 800293c:	08002ad5 	.word	0x08002ad5
 8002940:	08002ad5 	.word	0x08002ad5
 8002944:	08002ad5 	.word	0x08002ad5
 8002948:	08002ad5 	.word	0x08002ad5
 800294c:	08002ad5 	.word	0x08002ad5
 8002950:	08002ad5 	.word	0x08002ad5
 8002954:	0800295d 	.word	0x0800295d
 8002958:	08002a75 	.word	0x08002a75
	    {
	    case MB_FC_READ_COILS:
	    case MB_FC_READ_DISCRETE_INPUT:
	    case MB_FC_WRITE_MULTIPLE_COILS:
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	7d5a      	ldrb	r2, [r3, #21]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	7d9b      	ldrb	r3, [r3, #22]
 8002964:	4619      	mov	r1, r3
 8002966:	4610      	mov	r0, r2
 8002968:	f000 f8bc 	bl	8002ae4 <word>
 800296c:	4603      	mov	r3, r0
 800296e:	091b      	lsrs	r3, r3, #4
 8002970:	81bb      	strh	r3, [r7, #12]
	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) /16;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	7dda      	ldrb	r2, [r3, #23]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	7e1b      	ldrb	r3, [r3, #24]
 800297a:	4619      	mov	r1, r3
 800297c:	4610      	mov	r0, r2
 800297e:	f000 f8b1 	bl	8002ae4 <word>
 8002982:	4603      	mov	r3, r0
 8002984:	091b      	lsrs	r3, r3, #4
 8002986:	817b      	strh	r3, [r7, #10]
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 16) u16NRegs++; // check for incomplete words
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	7dda      	ldrb	r2, [r3, #23]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	7e1b      	ldrb	r3, [r3, #24]
 8002990:	4619      	mov	r1, r3
 8002992:	4610      	mov	r0, r2
 8002994:	f000 f8a6 	bl	8002ae4 <word>
 8002998:	4603      	mov	r3, r0
 800299a:	f003 030f 	and.w	r3, r3, #15
 800299e:	b29b      	uxth	r3, r3
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d002      	beq.n	80029aa <validateRequest+0x15a>
 80029a4:	897b      	ldrh	r3, [r7, #10]
 80029a6:	3301      	adds	r3, #1
 80029a8:	817b      	strh	r3, [r7, #10]
	    	// verify address range
	    	if((u16AdRegs + u16NRegs) > modH->u16regsize) return EXC_ADDR_RANGE;
 80029aa:	89ba      	ldrh	r2, [r7, #12]
 80029ac:	897b      	ldrh	r3, [r7, #10]
 80029ae:	4413      	add	r3, r2
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	f8b2 20a4 	ldrh.w	r2, [r2, #164]	@ 0xa4
 80029b6:	4293      	cmp	r3, r2
 80029b8:	dd01      	ble.n	80029be <validateRequest+0x16e>
 80029ba:	2302      	movs	r3, #2
 80029bc:	e08b      	b.n	8002ad6 <validateRequest+0x286>

	    	//verify answer frame size in bytes

	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) / 8;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	7dda      	ldrb	r2, [r3, #23]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	7e1b      	ldrb	r3, [r3, #24]
 80029c6:	4619      	mov	r1, r3
 80029c8:	4610      	mov	r0, r2
 80029ca:	f000 f88b 	bl	8002ae4 <word>
 80029ce:	4603      	mov	r3, r0
 80029d0:	08db      	lsrs	r3, r3, #3
 80029d2:	817b      	strh	r3, [r7, #10]
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 8) u16NRegs++;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	7dda      	ldrb	r2, [r3, #23]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	7e1b      	ldrb	r3, [r3, #24]
 80029dc:	4619      	mov	r1, r3
 80029de:	4610      	mov	r0, r2
 80029e0:	f000 f880 	bl	8002ae4 <word>
 80029e4:	4603      	mov	r3, r0
 80029e6:	f003 0307 	and.w	r3, r3, #7
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d002      	beq.n	80029f6 <validateRequest+0x1a6>
 80029f0:	897b      	ldrh	r3, [r7, #10]
 80029f2:	3301      	adds	r3, #1
 80029f4:	817b      	strh	r3, [r7, #10]
	    	u16NRegs = u16NRegs + 5; // adding the header  and CRC ( Slave address + Function code  + number of data bytes to follow + 2-byte CRC )
 80029f6:	897b      	ldrh	r3, [r7, #10]
 80029f8:	3305      	adds	r3, #5
 80029fa:	817b      	strh	r3, [r7, #10]
	        if(u16NRegs > 256) return EXC_REGS_QUANT;
 80029fc:	897b      	ldrh	r3, [r7, #10]
 80029fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a02:	d960      	bls.n	8002ac6 <validateRequest+0x276>
 8002a04:	2303      	movs	r3, #3
 8002a06:	e066      	b.n	8002ad6 <validateRequest+0x286>

	        break;
	    case MB_FC_WRITE_COIL:
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	7d5a      	ldrb	r2, [r3, #21]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	7d9b      	ldrb	r3, [r3, #22]
 8002a10:	4619      	mov	r1, r3
 8002a12:	4610      	mov	r0, r2
 8002a14:	f000 f866 	bl	8002ae4 <word>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	091b      	lsrs	r3, r3, #4
 8002a1c:	81bb      	strh	r3, [r7, #12]
	    	if(word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) % 16) u16AdRegs++;	// check for incomplete words
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	7d5a      	ldrb	r2, [r3, #21]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	7d9b      	ldrb	r3, [r3, #22]
 8002a26:	4619      	mov	r1, r3
 8002a28:	4610      	mov	r0, r2
 8002a2a:	f000 f85b 	bl	8002ae4 <word>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	f003 030f 	and.w	r3, r3, #15
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d002      	beq.n	8002a40 <validateRequest+0x1f0>
 8002a3a:	89bb      	ldrh	r3, [r7, #12]
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	81bb      	strh	r3, [r7, #12]
	        if (u16AdRegs >= modH->u16regsize) return EXC_ADDR_RANGE;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	@ 0xa4
 8002a46:	89ba      	ldrh	r2, [r7, #12]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d33e      	bcc.n	8002aca <validateRequest+0x27a>
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	e042      	b.n	8002ad6 <validateRequest+0x286>
	        break;
	    case MB_FC_WRITE_REGISTER :
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	7d5a      	ldrb	r2, [r3, #21]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	7d9b      	ldrb	r3, [r3, #22]
 8002a58:	4619      	mov	r1, r3
 8002a5a:	4610      	mov	r0, r2
 8002a5c:	f000 f842 	bl	8002ae4 <word>
 8002a60:	4603      	mov	r3, r0
 8002a62:	81bb      	strh	r3, [r7, #12]
	        if (u16AdRegs >= modH-> u16regsize) return EXC_ADDR_RANGE;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	@ 0xa4
 8002a6a:	89ba      	ldrh	r2, [r7, #12]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d32e      	bcc.n	8002ace <validateRequest+0x27e>
 8002a70:	2302      	movs	r3, #2
 8002a72:	e030      	b.n	8002ad6 <validateRequest+0x286>
	        break;
	    case MB_FC_READ_REGISTERS :
	    case MB_FC_READ_INPUT_REGISTER :
	    case MB_FC_WRITE_MULTIPLE_REGISTERS :
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	7d5a      	ldrb	r2, [r3, #21]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	7d9b      	ldrb	r3, [r3, #22]
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	4610      	mov	r0, r2
 8002a80:	f000 f830 	bl	8002ae4 <word>
 8002a84:	4603      	mov	r3, r0
 8002a86:	81bb      	strh	r3, [r7, #12]
	        u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	7dda      	ldrb	r2, [r3, #23]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	7e1b      	ldrb	r3, [r3, #24]
 8002a90:	4619      	mov	r1, r3
 8002a92:	4610      	mov	r0, r2
 8002a94:	f000 f826 	bl	8002ae4 <word>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	817b      	strh	r3, [r7, #10]
	        if (( u16AdRegs + u16NRegs ) > modH->u16regsize) return EXC_ADDR_RANGE;
 8002a9c:	89ba      	ldrh	r2, [r7, #12]
 8002a9e:	897b      	ldrh	r3, [r7, #10]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	f8b2 20a4 	ldrh.w	r2, [r2, #164]	@ 0xa4
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	dd01      	ble.n	8002ab0 <validateRequest+0x260>
 8002aac:	2302      	movs	r3, #2
 8002aae:	e012      	b.n	8002ad6 <validateRequest+0x286>

	        //verify answer frame size in bytes
	        u16NRegs = u16NRegs*2 + 5; // adding the header  and CRC
 8002ab0:	897b      	ldrh	r3, [r7, #10]
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	3305      	adds	r3, #5
 8002ab8:	817b      	strh	r3, [r7, #10]
	        if ( u16NRegs > 256 ) return EXC_REGS_QUANT;
 8002aba:	897b      	ldrh	r3, [r7, #10]
 8002abc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ac0:	d907      	bls.n	8002ad2 <validateRequest+0x282>
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e007      	b.n	8002ad6 <validateRequest+0x286>
	        break;
 8002ac6:	bf00      	nop
 8002ac8:	e004      	b.n	8002ad4 <validateRequest+0x284>
	        break;
 8002aca:	bf00      	nop
 8002acc:	e002      	b.n	8002ad4 <validateRequest+0x284>
	        break;
 8002ace:	bf00      	nop
 8002ad0:	e000      	b.n	8002ad4 <validateRequest+0x284>
	        break;
 8002ad2:	bf00      	nop
	    }
	    return 0; // OK, no exception code thrown
 8002ad4:	2300      	movs	r3, #0

}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3710      	adds	r7, #16
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	080176dc 	.word	0x080176dc

08002ae4 <word>:
 * @return uint16_t (word)
 * @ingroup H  Most significant byte
 * @ingroup L  Less significant byte
 */
uint16_t word(uint8_t H, uint8_t L)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	4603      	mov	r3, r0
 8002aec:	460a      	mov	r2, r1
 8002aee:	71fb      	strb	r3, [r7, #7]
 8002af0:	4613      	mov	r3, r2
 8002af2:	71bb      	strb	r3, [r7, #6]
	bytesFields W;
	W.u8[0] = L;
 8002af4:	79bb      	ldrb	r3, [r7, #6]
 8002af6:	733b      	strb	r3, [r7, #12]
	W.u8[1] = H;
 8002af8:	79fb      	ldrb	r3, [r7, #7]
 8002afa:	737b      	strb	r3, [r7, #13]

	return W.u16[0];
 8002afc:	89bb      	ldrh	r3, [r7, #12]
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3714      	adds	r7, #20
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr

08002b0a <calcCRC>:
 * @return uint16_t calculated CRC value for the message
 * @ingroup Buffer
 * @ingroup u8length
 */
uint16_t calcCRC(uint8_t *Buffer, uint8_t u8length)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	b087      	sub	sp, #28
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
 8002b12:	460b      	mov	r3, r1
 8002b14:	70fb      	strb	r3, [r7, #3]
    unsigned int temp, temp2, flag;
    temp = 0xFFFF;
 8002b16:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002b1a:	617b      	str	r3, [r7, #20]
    for (unsigned char i = 0; i < u8length; i++)
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	74fb      	strb	r3, [r7, #19]
 8002b20:	e022      	b.n	8002b68 <calcCRC+0x5e>
    {
        temp = temp ^ Buffer[i];
 8002b22:	7cfb      	ldrb	r3, [r7, #19]
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	4413      	add	r3, r2
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	4053      	eors	r3, r2
 8002b30:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 8002b32:	2301      	movs	r3, #1
 8002b34:	74bb      	strb	r3, [r7, #18]
 8002b36:	e011      	b.n	8002b5c <calcCRC+0x52>
        {
            flag = temp & 0x0001;
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	60bb      	str	r3, [r7, #8]
            temp >>=1;
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	085b      	lsrs	r3, r3, #1
 8002b44:	617b      	str	r3, [r7, #20]
            if (flag)
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d004      	beq.n	8002b56 <calcCRC+0x4c>
                temp ^= 0xA001;
 8002b4c:	697a      	ldr	r2, [r7, #20]
 8002b4e:	f24a 0301 	movw	r3, #40961	@ 0xa001
 8002b52:	4053      	eors	r3, r2
 8002b54:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 8002b56:	7cbb      	ldrb	r3, [r7, #18]
 8002b58:	3301      	adds	r3, #1
 8002b5a:	74bb      	strb	r3, [r7, #18]
 8002b5c:	7cbb      	ldrb	r3, [r7, #18]
 8002b5e:	2b08      	cmp	r3, #8
 8002b60:	d9ea      	bls.n	8002b38 <calcCRC+0x2e>
    for (unsigned char i = 0; i < u8length; i++)
 8002b62:	7cfb      	ldrb	r3, [r7, #19]
 8002b64:	3301      	adds	r3, #1
 8002b66:	74fb      	strb	r3, [r7, #19]
 8002b68:	7cfa      	ldrb	r2, [r7, #19]
 8002b6a:	78fb      	ldrb	r3, [r7, #3]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d3d8      	bcc.n	8002b22 <calcCRC+0x18>
        }
    }
    // Reverse byte order.
    temp2 = temp >> 8;
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	0a1b      	lsrs	r3, r3, #8
 8002b74:	60fb      	str	r3, [r7, #12]
    temp = (temp << 8) | temp2;
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	021b      	lsls	r3, r3, #8
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	617b      	str	r3, [r7, #20]
    temp &= 0xFFFF;
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	617b      	str	r3, [r7, #20]
    // the returned value is already swapped
    // crcLo byte is first & crcHi byte is last
    return temp;
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	b29b      	uxth	r3, r3

}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	371c      	adds	r7, #28
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr

08002b96 <buildException>:
 *
 * @ingroup u8exception exception number
 * @ingroup modH modbus handler
 */
void buildException( uint8_t u8exception, modbusHandler_t *modH )
{
 8002b96:	b480      	push	{r7}
 8002b98:	b085      	sub	sp, #20
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	6039      	str	r1, [r7, #0]
 8002ba0:	71fb      	strb	r3, [r7, #7]
    uint8_t u8func = modH->u8Buffer[ FUNC ];  // get the original FUNC code
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	7d1b      	ldrb	r3, [r3, #20]
 8002ba6:	73fb      	strb	r3, [r7, #15]

    modH->u8Buffer[ ID ]      = modH->u8id;
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	7a1a      	ldrb	r2, [r3, #8]
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	74da      	strb	r2, [r3, #19]
    modH->u8Buffer[ FUNC ]    = u8func + 0x80;
 8002bb0:	7bfb      	ldrb	r3, [r7, #15]
 8002bb2:	3b80      	subs	r3, #128	@ 0x80
 8002bb4:	b2da      	uxtb	r2, r3
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	751a      	strb	r2, [r3, #20]
    modH->u8Buffer[ 2 ]       = u8exception;
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	79fa      	ldrb	r2, [r7, #7]
 8002bbe:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = EXCEPTION_SIZE;
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	2203      	movs	r2, #3
 8002bc4:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
}
 8002bc8:	bf00      	nop
 8002bca:	3714      	adds	r7, #20
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <sendTxBuffer>:
 *
 * @return nothing
 * @ingroup modH Modbus handler
 */
static void sendTxBuffer(modbusHandler_t *modH)
{
 8002bd4:	b590      	push	{r4, r7, lr}
 8002bd6:	b087      	sub	sp, #28
 8002bd8:	af02      	add	r7, sp, #8
 8002bda:	6078      	str	r0, [r7, #4]
    // when in slaveType and u8AddressMode == ADDRESS_BROADCAST, do not send anything
    if (modH->uModbusType == MB_SLAVE && modH->u8AddressMode == ADDRESS_BROADCAST)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	2b03      	cmp	r3, #3
 8002be2:	d111      	bne.n	8002c08 <sendTxBuffer+0x34>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d10c      	bne.n	8002c08 <sendTxBuffer+0x34>
    {
        modH->u8BufferSize = 0;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
        // increase message counter
        modH->u16OutCnt++;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f8b3 309e 	ldrh.w	r3, [r3, #158]	@ 0x9e
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	b29a      	uxth	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
        return;
 8002c06:	e086      	b.n	8002d16 <sendTxBuffer+0x142>
#if  ENABLE_TCP == 1
if(modH->xTypeHW != TCP_HW)
	 {
#endif

	uint16_t u16crc = calcCRC(modH->u8Buffer, modH->u8BufferSize);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f103 0213 	add.w	r2, r3, #19
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002c14:	4619      	mov	r1, r3
 8002c16:	4610      	mov	r0, r2
 8002c18:	f7ff ff77 	bl	8002b0a <calcCRC>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	81fb      	strh	r3, [r7, #14]
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc >> 8;
 8002c20:	89fb      	ldrh	r3, [r7, #14]
 8002c22:	0a1b      	lsrs	r3, r3, #8
 8002c24:	b29a      	uxth	r2, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	b2d2      	uxtb	r2, r2
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	440b      	add	r3, r1
 8002c34:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	b2da      	uxtb	r2, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc & 0x00ff;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	89fb      	ldrh	r3, [r7, #14]
 8002c50:	b2da      	uxtb	r2, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	440b      	add	r3, r1
 8002c56:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002c5e:	3301      	adds	r3, #1
 8002c60:	b2da      	uxtb	r2, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
#if ENABLE_USB_CDC == 1 || ENABLE_TCP == 1
    if(modH->xTypeHW == USART_HW || modH->xTypeHW == USART_HW_DMA )
    {
#endif

    	if (modH->EN_Port != NULL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d00c      	beq.n	8002c8a <sendTxBuffer+0xb6>
        {
    		//enable transmitter, disable receiver to avoid echo on RS485 transceivers
    		HAL_HalfDuplex_EnableTransmitter(modH->port);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	4618      	mov	r0, r3
 8002c76:	f009 f975 	bl	800bf64 <HAL_HalfDuplex_EnableTransmitter>
    		HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_SET);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	68d8      	ldr	r0, [r3, #12]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	8a1b      	ldrh	r3, [r3, #16]
 8002c82:	2201      	movs	r2, #1
 8002c84:	4619      	mov	r1, r3
 8002c86:	f002 f939 	bl	8004efc <HAL_GPIO_WritePin>
#if ENABLE_USART_DMA ==1
    	if(modH->xTypeHW == USART_HW)
    	{
#endif
    		// transfer buffer to serial line IT
    		HAL_UART_Transmit_IT(modH->port, modH->u8Buffer,  modH->u8BufferSize);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6858      	ldr	r0, [r3, #4]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f103 0113 	add.w	r1, r3, #19
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	f008 fbda 	bl	800b454 <HAL_UART_Transmit_IT>
        	HAL_UART_Transmit_DMA(modH->port, modH->u8Buffer, modH->u8BufferSize);

        }
#endif

        ulTaskNotifyTake(pdTRUE, 250); //wait notification from TXE interrupt
 8002ca0:	21fa      	movs	r1, #250	@ 0xfa
 8002ca2:	2001      	movs	r0, #1
 8002ca4:	f011 fdee 	bl	8014884 <ulTaskNotifyTake>
* If you are porting the library to a different MCU check the 
* USART datasheet and add the corresponding family in the following
* preprocessor conditions
*/
#if defined(STM32H7)  || defined(STM32F3) || defined(STM32L4) || defined(STM32L082xx) || defined(STM32F7) || defined(STM32WB) || defined(STM32G070xx) || defined(STM32F0) || defined(STM32G431xx) || defined(STM32H5)
          while((modH->port->Instance->ISR & USART_ISR_TC) ==0 )
 8002ca8:	bf00      	nop
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	69db      	ldr	r3, [r3, #28]
 8002cb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d0f7      	beq.n	8002caa <sendTxBuffer+0xd6>
         {
 	        //block the task until the the last byte is send out of the shifting buffer in USART
         }


         if (modH->EN_Port != NULL)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00c      	beq.n	8002cdc <sendTxBuffer+0x108>
         {

             //return RS485 transceiver to receive mode
        	 HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	68d8      	ldr	r0, [r3, #12]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	8a1b      	ldrh	r3, [r3, #16]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	4619      	mov	r1, r3
 8002cce:	f002 f915 	bl	8004efc <HAL_GPIO_WritePin>
        	 //enable receiver, disable transmitter
        	 HAL_HalfDuplex_EnableReceiver(modH->port);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f009 f998 	bl	800c00c <HAL_HalfDuplex_EnableReceiver>

         }

         // set timeout for master query
         if(modH->uModbusType == MB_MASTER )
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	2b04      	cmp	r3, #4
 8002ce2:	d10c      	bne.n	8002cfe <sendTxBuffer+0x12a>
         {
        	 xTimerReset(modH->xTimerTimeout,0);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f8d3 40b8 	ldr.w	r4, [r3, #184]	@ 0xb8
 8002cea:	f011 f819 	bl	8013d20 <xTaskGetTickCount>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	9300      	str	r3, [sp, #0]
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	2102      	movs	r1, #2
 8002cf8:	4620      	mov	r0, r4
 8002cfa:	f012 f8b3 	bl	8014e64 <xTimerGenericCommand>

#endif

#endif

     modH->u8BufferSize = 0;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
     // increase message counter
     modH->u16OutCnt++;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f8b3 309e 	ldrh.w	r3, [r3, #158]	@ 0x9e
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	b29a      	uxth	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e


}
 8002d16:	3714      	adds	r7, #20
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd90      	pop	{r4, r7, pc}

08002d1c <process_FC1>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC1(modbusHandler_t *modH )
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b086      	sub	sp, #24
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
    uint8_t u8currentBit, u8bytesno, u8bitsno;
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	7d5a      	ldrb	r2, [r3, #21]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	7d9b      	ldrb	r3, [r3, #22]
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	4610      	mov	r0, r2
 8002d30:	f7ff fed8 	bl	8002ae4 <word>
 8002d34:	4603      	mov	r3, r0
 8002d36:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	7dda      	ldrb	r2, [r3, #23]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	7e1b      	ldrb	r3, [r3, #24]
 8002d40:	4619      	mov	r1, r3
 8002d42:	4610      	mov	r0, r2
 8002d44:	f7ff fece 	bl	8002ae4 <word>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	823b      	strh	r3, [r7, #16]

    // put the number of bytes in the outcoming message
    u8bytesno = (uint8_t) (u16Coilno / 8);
 8002d4c:	8a3b      	ldrh	r3, [r7, #16]
 8002d4e:	08db      	lsrs	r3, r3, #3
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	75fb      	strb	r3, [r7, #23]
    if (u16Coilno % 8 != 0) u8bytesno ++;
 8002d54:	8a3b      	ldrh	r3, [r7, #16]
 8002d56:	f003 0307 	and.w	r3, r3, #7
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d002      	beq.n	8002d66 <process_FC1+0x4a>
 8002d60:	7dfb      	ldrb	r3, [r7, #23]
 8002d62:	3301      	adds	r3, #1
 8002d64:	75fb      	strb	r3, [r7, #23]
    modH->u8Buffer[ ADD_HI ]  = u8bytesno;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	7dfa      	ldrb	r2, [r7, #23]
 8002d6a:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = ADD_LO;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2203      	movs	r2, #3
 8002d70:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
    modH->u8Buffer[modH->u8BufferSize + u8bytesno - 1 ] = 0;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	7dfb      	ldrb	r3, [r7, #23]
 8002d7e:	4413      	add	r3, r2
 8002d80:	3b01      	subs	r3, #1
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	4413      	add	r3, r2
 8002d86:	2200      	movs	r2, #0
 8002d88:	74da      	strb	r2, [r3, #19]

    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	75bb      	strb	r3, [r7, #22]

    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8002d8e:	2300      	movs	r3, #0
 8002d90:	82bb      	strh	r3, [r7, #20]
 8002d92:	e058      	b.n	8002e46 <process_FC1+0x12a>
    {
        u16coil = u16StartCoil + u16currentCoil;
 8002d94:	8a7a      	ldrh	r2, [r7, #18]
 8002d96:	8abb      	ldrh	r3, [r7, #20]
 8002d98:	4413      	add	r3, r2
 8002d9a:	81bb      	strh	r3, [r7, #12]
        u16currentRegister =  (u16coil / 16);
 8002d9c:	89bb      	ldrh	r3, [r7, #12]
 8002d9e:	091b      	lsrs	r3, r3, #4
 8002da0:	817b      	strh	r3, [r7, #10]
        u8currentBit = (uint8_t) (u16coil % 16);
 8002da2:	89bb      	ldrh	r3, [r7, #12]
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	f003 030f 	and.w	r3, r3, #15
 8002daa:	727b      	strb	r3, [r7, #9]

        bitWrite(
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8002db2:	897b      	ldrh	r3, [r7, #10]
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	4413      	add	r3, r2
 8002db8:	881b      	ldrh	r3, [r3, #0]
 8002dba:	461a      	mov	r2, r3
 8002dbc:	7a7b      	ldrb	r3, [r7, #9]
 8002dbe:	fa42 f303 	asr.w	r3, r2, r3
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d014      	beq.n	8002df4 <process_FC1+0xd8>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	7cda      	ldrb	r2, [r3, #19]
 8002dd8:	7dbb      	ldrb	r3, [r7, #22]
 8002dda:	2101      	movs	r1, #1
 8002ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	6879      	ldr	r1, [r7, #4]
 8002de4:	f891 1093 	ldrb.w	r1, [r1, #147]	@ 0x93
 8002de8:	4313      	orrs	r3, r2
 8002dea:	b2da      	uxtb	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	440b      	add	r3, r1
 8002df0:	74da      	strb	r2, [r3, #19]
 8002df2:	e015      	b.n	8002e20 <process_FC1+0x104>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4413      	add	r3, r2
 8002e00:	7cda      	ldrb	r2, [r3, #19]
 8002e02:	7dbb      	ldrb	r3, [r7, #22]
 8002e04:	2101      	movs	r1, #1
 8002e06:	fa01 f303 	lsl.w	r3, r1, r3
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	43db      	mvns	r3, r3
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	6879      	ldr	r1, [r7, #4]
 8002e12:	f891 1093 	ldrb.w	r1, [r1, #147]	@ 0x93
 8002e16:	4013      	ands	r3, r2
 8002e18:	b2da      	uxtb	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	440b      	add	r3, r1
 8002e1e:	74da      	strb	r2, [r3, #19]
        	modH->u8Buffer[ modH->u8BufferSize ],
            u8bitsno,
		    bitRead( modH->u16regs[ u16currentRegister ], u8currentBit ) );
        u8bitsno ++;
 8002e20:	7dbb      	ldrb	r3, [r7, #22]
 8002e22:	3301      	adds	r3, #1
 8002e24:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 8002e26:	7dbb      	ldrb	r3, [r7, #22]
 8002e28:	2b07      	cmp	r3, #7
 8002e2a:	d909      	bls.n	8002e40 <process_FC1+0x124>
        {
            u8bitsno = 0;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	75bb      	strb	r3, [r7, #22]
            modH->u8BufferSize++;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002e36:	3301      	adds	r3, #1
 8002e38:	b2da      	uxtb	r2, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8002e40:	8abb      	ldrh	r3, [r7, #20]
 8002e42:	3301      	adds	r3, #1
 8002e44:	82bb      	strh	r3, [r7, #20]
 8002e46:	8aba      	ldrh	r2, [r7, #20]
 8002e48:	8a3b      	ldrh	r3, [r7, #16]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d3a2      	bcc.n	8002d94 <process_FC1+0x78>
        }
    }

    // send outcoming message
    if (u16Coilno % 8 != 0) modH->u8BufferSize ++;
 8002e4e:	8a3b      	ldrh	r3, [r7, #16]
 8002e50:	f003 0307 	and.w	r3, r3, #7
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d007      	beq.n	8002e6a <process_FC1+0x14e>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002e60:	3301      	adds	r3, #1
 8002e62:	b2da      	uxtb	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002e70:	3302      	adds	r3, #2
 8002e72:	73fb      	strb	r3, [r7, #15]
    sendTxBuffer(modH);
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f7ff fead 	bl	8002bd4 <sendTxBuffer>
    return u8CopyBufferSize;
 8002e7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3718      	adds	r7, #24
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <process_FC3>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC3(modbusHandler_t *modH)
{
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b084      	sub	sp, #16
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]

    uint16_t u16StartAdd = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	7d5a      	ldrb	r2, [r3, #21]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	7d9b      	ldrb	r3, [r3, #22]
 8002e96:	4619      	mov	r1, r3
 8002e98:	4610      	mov	r0, r2
 8002e9a:	f7ff fe23 	bl	8002ae4 <word>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	81bb      	strh	r3, [r7, #12]
    uint8_t u8regsno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	7dda      	ldrb	r2, [r3, #23]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	7e1b      	ldrb	r3, [r3, #24]
 8002eaa:	4619      	mov	r1, r3
 8002eac:	4610      	mov	r0, r2
 8002eae:	f7ff fe19 	bl	8002ae4 <word>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	72fb      	strb	r3, [r7, #11]
    uint8_t u8CopyBufferSize;
    uint16_t i;

    modH->u8Buffer[ 2 ]       = u8regsno * 2;
 8002eb6:	7afb      	ldrb	r3, [r7, #11]
 8002eb8:	005b      	lsls	r3, r3, #1
 8002eba:	b2da      	uxtb	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = 3;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2203      	movs	r2, #3
 8002ec4:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93

    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 8002ec8:	89bb      	ldrh	r3, [r7, #12]
 8002eca:	81fb      	strh	r3, [r7, #14]
 8002ecc:	e032      	b.n	8002f34 <process_FC3+0xae>
    {
    	modH->u8Buffer[ modH->u8BufferSize ] = highByte(modH->u16regs[i]);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8002ed4:	89fb      	ldrh	r3, [r7, #14]
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	4413      	add	r3, r2
 8002eda:	881b      	ldrh	r3, [r3, #0]
 8002edc:	0a1b      	lsrs	r3, r3, #8
 8002ede:	b29a      	uxth	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	b2d2      	uxtb	r2, r2
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	440b      	add	r3, r1
 8002eee:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	b2da      	uxtb	r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
    	modH->u8Buffer[ modH->u8BufferSize ] = lowByte(modH->u16regs[i]);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8002f06:	89fb      	ldrh	r3, [r7, #14]
 8002f08:	005b      	lsls	r3, r3, #1
 8002f0a:	4413      	add	r3, r2
 8002f0c:	881a      	ldrh	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002f14:	4619      	mov	r1, r3
 8002f16:	b2d2      	uxtb	r2, r2
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	440b      	add	r3, r1
 8002f1c:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002f24:	3301      	adds	r3, #1
 8002f26:	b2da      	uxtb	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 8002f2e:	89fb      	ldrh	r3, [r7, #14]
 8002f30:	3301      	adds	r3, #1
 8002f32:	81fb      	strh	r3, [r7, #14]
 8002f34:	89fa      	ldrh	r2, [r7, #14]
 8002f36:	89b9      	ldrh	r1, [r7, #12]
 8002f38:	7afb      	ldrb	r3, [r7, #11]
 8002f3a:	440b      	add	r3, r1
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	dbc6      	blt.n	8002ece <process_FC3+0x48>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002f46:	3302      	adds	r3, #2
 8002f48:	72bb      	strb	r3, [r7, #10]
    sendTxBuffer(modH);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f7ff fe42 	bl	8002bd4 <sendTxBuffer>

    return u8CopyBufferSize;
 8002f50:	f997 300a 	ldrsb.w	r3, [r7, #10]
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3710      	adds	r7, #16
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <process_FC5>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC5( modbusHandler_t *modH )
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
    uint8_t u8currentBit;
    uint16_t u16currentRegister;
    uint8_t u8CopyBufferSize;
    uint16_t u16coil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	7d5a      	ldrb	r2, [r3, #21]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	7d9b      	ldrb	r3, [r3, #22]
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	4610      	mov	r0, r2
 8002f70:	f7ff fdb8 	bl	8002ae4 <word>
 8002f74:	4603      	mov	r3, r0
 8002f76:	81fb      	strh	r3, [r7, #14]

    // point to the register and its bit
    u16currentRegister = (u16coil / 16);
 8002f78:	89fb      	ldrh	r3, [r7, #14]
 8002f7a:	091b      	lsrs	r3, r3, #4
 8002f7c:	81bb      	strh	r3, [r7, #12]
    u8currentBit = (uint8_t) (u16coil % 16);
 8002f7e:	89fb      	ldrh	r3, [r7, #14]
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	f003 030f 	and.w	r3, r3, #15
 8002f86:	72fb      	strb	r3, [r7, #11]

    // write to coil
    bitWrite(
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	7ddb      	ldrb	r3, [r3, #23]
 8002f8c:	2bff      	cmp	r3, #255	@ 0xff
 8002f8e:	d115      	bne.n	8002fbc <process_FC5+0x60>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8002f96:	89bb      	ldrh	r3, [r7, #12]
 8002f98:	005b      	lsls	r3, r3, #1
 8002f9a:	4413      	add	r3, r2
 8002f9c:	8819      	ldrh	r1, [r3, #0]
 8002f9e:	7afb      	ldrb	r3, [r7, #11]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa6:	b29a      	uxth	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f8d3 0098 	ldr.w	r0, [r3, #152]	@ 0x98
 8002fae:	89bb      	ldrh	r3, [r7, #12]
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	4403      	add	r3, r0
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	b292      	uxth	r2, r2
 8002fb8:	801a      	strh	r2, [r3, #0]
 8002fba:	e016      	b.n	8002fea <process_FC5+0x8e>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8002fc2:	89bb      	ldrh	r3, [r7, #12]
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	4413      	add	r3, r2
 8002fc8:	8819      	ldrh	r1, [r3, #0]
 8002fca:	7afb      	ldrb	r3, [r7, #11]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	43db      	mvns	r3, r3
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f8d3 0098 	ldr.w	r0, [r3, #152]	@ 0x98
 8002fde:	89bb      	ldrh	r3, [r7, #12]
 8002fe0:	005b      	lsls	r3, r3, #1
 8002fe2:	4403      	add	r3, r0
 8002fe4:	400a      	ands	r2, r1
 8002fe6:	b292      	uxth	r2, r2
 8002fe8:	801a      	strh	r2, [r3, #0]
        u8currentBit,
		modH->u8Buffer[ NB_HI ] == 0xff );


    // send answer to master
    modH->u8BufferSize = 6;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2206      	movs	r2, #6
 8002fee:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
    u8CopyBufferSize =  modH->u8BufferSize +2;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002ff8:	3302      	adds	r3, #2
 8002ffa:	72bb      	strb	r3, [r7, #10]
    sendTxBuffer(modH);
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f7ff fde9 	bl	8002bd4 <sendTxBuffer>

    return u8CopyBufferSize;
 8003002:	f997 300a 	ldrsb.w	r3, [r7, #10]
}
 8003006:	4618      	mov	r0, r3
 8003008:	3710      	adds	r7, #16
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}

0800300e <process_FC6>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC6(modbusHandler_t *modH )
{
 800300e:	b580      	push	{r7, lr}
 8003010:	b084      	sub	sp, #16
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]

    uint16_t u16add = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	7d5a      	ldrb	r2, [r3, #21]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	7d9b      	ldrb	r3, [r3, #22]
 800301e:	4619      	mov	r1, r3
 8003020:	4610      	mov	r0, r2
 8003022:	f7ff fd5f 	bl	8002ae4 <word>
 8003026:	4603      	mov	r3, r0
 8003028:	81fb      	strh	r3, [r7, #14]
    uint8_t u8CopyBufferSize;
    uint16_t u16val = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	7dda      	ldrb	r2, [r3, #23]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	7e1b      	ldrb	r3, [r3, #24]
 8003032:	4619      	mov	r1, r3
 8003034:	4610      	mov	r0, r2
 8003036:	f7ff fd55 	bl	8002ae4 <word>
 800303a:	4603      	mov	r3, r0
 800303c:	81bb      	strh	r3, [r7, #12]

    modH->u16regs[ u16add ] = u16val;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8003044:	89fb      	ldrh	r3, [r7, #14]
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	4413      	add	r3, r2
 800304a:	89ba      	ldrh	r2, [r7, #12]
 800304c:	801a      	strh	r2, [r3, #0]

    // keep the same header
    modH->u8BufferSize = RESPONSE_SIZE;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2206      	movs	r2, #6
 8003052:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93

    u8CopyBufferSize = modH->u8BufferSize + 2;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 800305c:	3302      	adds	r3, #2
 800305e:	72fb      	strb	r3, [r7, #11]
    sendTxBuffer(modH);
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f7ff fdb7 	bl	8002bd4 <sendTxBuffer>

    return u8CopyBufferSize;
 8003066:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800306a:	4618      	mov	r0, r3
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <process_FC15>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC15( modbusHandler_t *modH )
{
 8003072:	b580      	push	{r7, lr}
 8003074:	b086      	sub	sp, #24
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;
    bool bTemp;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	7d5a      	ldrb	r2, [r3, #21]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	7d9b      	ldrb	r3, [r3, #22]
 8003082:	4619      	mov	r1, r3
 8003084:	4610      	mov	r0, r2
 8003086:	f7ff fd2d 	bl	8002ae4 <word>
 800308a:	4603      	mov	r3, r0
 800308c:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	7dda      	ldrb	r2, [r3, #23]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	7e1b      	ldrb	r3, [r3, #24]
 8003096:	4619      	mov	r1, r3
 8003098:	4610      	mov	r0, r2
 800309a:	f7ff fd23 	bl	8002ae4 <word>
 800309e:	4603      	mov	r3, r0
 80030a0:	823b      	strh	r3, [r7, #16]


    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 80030a2:	2300      	movs	r3, #0
 80030a4:	75bb      	strb	r3, [r7, #22]
    u8frameByte = 7;
 80030a6:	2307      	movs	r3, #7
 80030a8:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 80030aa:	2300      	movs	r3, #0
 80030ac:	82bb      	strh	r3, [r7, #20]
 80030ae:	e058      	b.n	8003162 <process_FC15+0xf0>
    {

        u16coil = u16StartCoil + u16currentCoil;
 80030b0:	8a7a      	ldrh	r2, [r7, #18]
 80030b2:	8abb      	ldrh	r3, [r7, #20]
 80030b4:	4413      	add	r3, r2
 80030b6:	81bb      	strh	r3, [r7, #12]
        u16currentRegister = (u16coil / 16);
 80030b8:	89bb      	ldrh	r3, [r7, #12]
 80030ba:	091b      	lsrs	r3, r3, #4
 80030bc:	817b      	strh	r3, [r7, #10]
        u8currentBit = (uint8_t) (u16coil % 16);
 80030be:	89bb      	ldrh	r3, [r7, #12]
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	f003 030f 	and.w	r3, r3, #15
 80030c6:	727b      	strb	r3, [r7, #9]

        bTemp = bitRead(
 80030c8:	7dfb      	ldrb	r3, [r7, #23]
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	4413      	add	r3, r2
 80030ce:	7cdb      	ldrb	r3, [r3, #19]
 80030d0:	461a      	mov	r2, r3
 80030d2:	7dbb      	ldrb	r3, [r7, #22]
 80030d4:	fa42 f303 	asr.w	r3, r2, r3
 80030d8:	f003 0301 	and.w	r3, r3, #1
 80030dc:	2b00      	cmp	r3, #0
 80030de:	bf14      	ite	ne
 80030e0:	2301      	movne	r3, #1
 80030e2:	2300      	moveq	r3, #0
 80030e4:	723b      	strb	r3, [r7, #8]
        			modH->u8Buffer[ u8frameByte ],
                    u8bitsno );

        bitWrite(
 80030e6:	7a3b      	ldrb	r3, [r7, #8]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d015      	beq.n	8003118 <process_FC15+0xa6>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80030f2:	897b      	ldrh	r3, [r7, #10]
 80030f4:	005b      	lsls	r3, r3, #1
 80030f6:	4413      	add	r3, r2
 80030f8:	8819      	ldrh	r1, [r3, #0]
 80030fa:	7a7b      	ldrb	r3, [r7, #9]
 80030fc:	2201      	movs	r2, #1
 80030fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003102:	b29a      	uxth	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f8d3 0098 	ldr.w	r0, [r3, #152]	@ 0x98
 800310a:	897b      	ldrh	r3, [r7, #10]
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	4403      	add	r3, r0
 8003110:	430a      	orrs	r2, r1
 8003112:	b292      	uxth	r2, r2
 8003114:	801a      	strh	r2, [r3, #0]
 8003116:	e016      	b.n	8003146 <process_FC15+0xd4>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800311e:	897b      	ldrh	r3, [r7, #10]
 8003120:	005b      	lsls	r3, r3, #1
 8003122:	4413      	add	r3, r2
 8003124:	8819      	ldrh	r1, [r3, #0]
 8003126:	7a7b      	ldrb	r3, [r7, #9]
 8003128:	2201      	movs	r2, #1
 800312a:	fa02 f303 	lsl.w	r3, r2, r3
 800312e:	b29b      	uxth	r3, r3
 8003130:	43db      	mvns	r3, r3
 8003132:	b29a      	uxth	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f8d3 0098 	ldr.w	r0, [r3, #152]	@ 0x98
 800313a:	897b      	ldrh	r3, [r7, #10]
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	4403      	add	r3, r0
 8003140:	400a      	ands	r2, r1
 8003142:	b292      	uxth	r2, r2
 8003144:	801a      	strh	r2, [r3, #0]
            modH->u16regs[ u16currentRegister ],
            u8currentBit,
            bTemp );

        u8bitsno ++;
 8003146:	7dbb      	ldrb	r3, [r7, #22]
 8003148:	3301      	adds	r3, #1
 800314a:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 800314c:	7dbb      	ldrb	r3, [r7, #22]
 800314e:	2b07      	cmp	r3, #7
 8003150:	d904      	bls.n	800315c <process_FC15+0xea>
        {
            u8bitsno = 0;
 8003152:	2300      	movs	r3, #0
 8003154:	75bb      	strb	r3, [r7, #22]
            u8frameByte++;
 8003156:	7dfb      	ldrb	r3, [r7, #23]
 8003158:	3301      	adds	r3, #1
 800315a:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800315c:	8abb      	ldrh	r3, [r7, #20]
 800315e:	3301      	adds	r3, #1
 8003160:	82bb      	strh	r3, [r7, #20]
 8003162:	8aba      	ldrh	r2, [r7, #20]
 8003164:	8a3b      	ldrh	r3, [r7, #16]
 8003166:	429a      	cmp	r2, r3
 8003168:	d3a2      	bcc.n	80030b0 <process_FC15+0x3e>
        }
    }

    // send outcoming message
    // it's just a copy of the incomping frame until 6th byte
    modH->u8BufferSize         = 6;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2206      	movs	r2, #6
 800316e:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8003178:	3302      	adds	r3, #2
 800317a:	73fb      	strb	r3, [r7, #15]
    sendTxBuffer(modH);
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f7ff fd29 	bl	8002bd4 <sendTxBuffer>
    return u8CopyBufferSize;
 8003182:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003186:	4618      	mov	r0, r3
 8003188:	3718      	adds	r7, #24
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <process_FC16>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC16(modbusHandler_t *modH )
{
 800318e:	b580      	push	{r7, lr}
 8003190:	b086      	sub	sp, #24
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
    uint16_t u16StartAdd = modH->u8Buffer[ ADD_HI ] << 8 | modH->u8Buffer[ ADD_LO ];
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	7d5b      	ldrb	r3, [r3, #21]
 800319a:	b21b      	sxth	r3, r3
 800319c:	021b      	lsls	r3, r3, #8
 800319e:	b21a      	sxth	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	7d9b      	ldrb	r3, [r3, #22]
 80031a4:	b21b      	sxth	r3, r3
 80031a6:	4313      	orrs	r3, r2
 80031a8:	b21b      	sxth	r3, r3
 80031aa:	82bb      	strh	r3, [r7, #20]
    uint16_t u16regsno = modH->u8Buffer[ NB_HI ] << 8 | modH->u8Buffer[ NB_LO ];
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	7ddb      	ldrb	r3, [r3, #23]
 80031b0:	b21b      	sxth	r3, r3
 80031b2:	021b      	lsls	r3, r3, #8
 80031b4:	b21a      	sxth	r2, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	7e1b      	ldrb	r3, [r3, #24]
 80031ba:	b21b      	sxth	r3, r3
 80031bc:	4313      	orrs	r3, r2
 80031be:	b21b      	sxth	r3, r3
 80031c0:	827b      	strh	r3, [r7, #18]
    uint8_t u8CopyBufferSize;
    uint16_t i;
    uint16_t temp;

    // build header
    modH->u8Buffer[ NB_HI ]   = 0;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	75da      	strb	r2, [r3, #23]
    modH->u8Buffer[ NB_LO ]   = (uint8_t) u16regsno; // answer is always 256 or less bytes
 80031c8:	8a7b      	ldrh	r3, [r7, #18]
 80031ca:	b2da      	uxtb	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	761a      	strb	r2, [r3, #24]
    modH->u8BufferSize         = RESPONSE_SIZE;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2206      	movs	r2, #6
 80031d4:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93

    // write registers
    for (i = 0; i < u16regsno; i++)
 80031d8:	2300      	movs	r3, #0
 80031da:	82fb      	strh	r3, [r7, #22]
 80031dc:	e01d      	b.n	800321a <process_FC16+0x8c>
    {
        temp = word(
        		modH->u8Buffer[ (BYTE_CNT + 1) + i * 2 ],
 80031de:	8afb      	ldrh	r3, [r7, #22]
 80031e0:	005b      	lsls	r3, r3, #1
 80031e2:	3307      	adds	r3, #7
        temp = word(
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	4413      	add	r3, r2
 80031e8:	7cd8      	ldrb	r0, [r3, #19]
				modH->u8Buffer[ (BYTE_CNT + 2) + i * 2 ]);
 80031ea:	8afb      	ldrh	r3, [r7, #22]
 80031ec:	3304      	adds	r3, #4
 80031ee:	005b      	lsls	r3, r3, #1
        temp = word(
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	4413      	add	r3, r2
 80031f4:	7cdb      	ldrb	r3, [r3, #19]
 80031f6:	4619      	mov	r1, r3
 80031f8:	f7ff fc74 	bl	8002ae4 <word>
 80031fc:	4603      	mov	r3, r0
 80031fe:	81fb      	strh	r3, [r7, #14]

        modH->u16regs[ u16StartAdd + i ] = temp;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8003206:	8ab9      	ldrh	r1, [r7, #20]
 8003208:	8afb      	ldrh	r3, [r7, #22]
 800320a:	440b      	add	r3, r1
 800320c:	005b      	lsls	r3, r3, #1
 800320e:	4413      	add	r3, r2
 8003210:	89fa      	ldrh	r2, [r7, #14]
 8003212:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < u16regsno; i++)
 8003214:	8afb      	ldrh	r3, [r7, #22]
 8003216:	3301      	adds	r3, #1
 8003218:	82fb      	strh	r3, [r7, #22]
 800321a:	8afa      	ldrh	r2, [r7, #22]
 800321c:	8a7b      	ldrh	r3, [r7, #18]
 800321e:	429a      	cmp	r2, r3
 8003220:	d3dd      	bcc.n	80031de <process_FC16+0x50>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8003228:	3302      	adds	r3, #2
 800322a:	747b      	strb	r3, [r7, #17]
    sendTxBuffer(modH);
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f7ff fcd1 	bl	8002bd4 <sendTxBuffer>

    return u8CopyBufferSize;
 8003232:	f997 3011 	ldrsb.w	r3, [r7, #17]
}
 8003236:	4618      	mov	r0, r3
 8003238:	3718      	adds	r7, #24
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
	...

08003240 <_ZN6SensorC1Ev>:
 * The Sensor base class provides an implementation of getVelocity(), and takes care of counting full
 * revolutions in a precise way, but if you wish you can additionally override these methods to provide more
 * optimal implementations for your hardware.
 * 
 */
class Sensor{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	4a12      	ldr	r2, [pc, #72]	@ (8003294 <_ZN6SensorC1Ev+0x54>)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	601a      	str	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a11      	ldr	r2, [pc, #68]	@ (8003298 <_ZN6SensorC1Ev+0x58>)
 8003252:	605a      	str	r2, [r3, #4]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f04f 0200 	mov.w	r2, #0
 800325a:	609a      	str	r2, [r3, #8]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f04f 0200 	mov.w	r2, #0
 8003262:	60da      	str	r2, [r3, #12]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	611a      	str	r2, [r3, #16]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f04f 0200 	mov.w	r2, #0
 8003270:	615a      	str	r2, [r3, #20]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	619a      	str	r2, [r3, #24]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	61da      	str	r2, [r3, #28]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	621a      	str	r2, [r3, #32]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4618      	mov	r0, r3
 8003288:	370c      	adds	r7, #12
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop
 8003294:	08017724 	.word	0x08017724
 8003298:	38d1b717 	.word	0x38d1b717

0800329c <_ZN21ModbusAbsoluteEncoderC1EP17TIM_HandleTypeDefh>:
#include <cstdio>
#include "retarget.h"
// Define static constant
const float ModbusAbsoluteEncoder::RADIANS_PER_COUNT = 2.0f * M_PI / ModbusAbsoluteEncoder::ENCODER_RESOLUTION;

ModbusAbsoluteEncoder::ModbusAbsoluteEncoder(TIM_HandleTypeDef *htim, uint8_t unit_id)
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	4613      	mov	r3, r2
 80032a8:	71fb      	strb	r3, [r7, #7]
    last_position(0),
    full_rotations(0),
    zero_position(0),
    frequency_start_time(0),
    last_receive_count(0),
    encoder_initialized(false)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7ff ffc7 	bl	8003240 <_ZN6SensorC1Ev>
 80032b2:	4a26      	ldr	r2, [pc, #152]	@ (800334c <_ZN21ModbusAbsoluteEncoderC1EP17TIM_HandleTypeDefh+0xb0>)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	601a      	str	r2, [r3, #0]
  : unit_id(unit_id),
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	79fa      	ldrb	r2, [r7, #7]
 80032bc:	f883 217c 	strb.w	r2, [r3, #380]	@ 0x17c
    encoder_initialized(false)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
    comm_ok(false),
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 2184 	strb.w	r2, [r3, #388]	@ 0x184
    modbus_state(IDLE),
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 2185 	strb.w	r2, [r3, #389]	@ 0x185
    cached_angle(0.0f),
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f04f 0200 	mov.w	r2, #0
 80032de:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
    async_enabled(false),
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 218c 	strb.w	r2, [r3, #396]	@ 0x18c
    last_update_time(0),
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
    encoder_receive_count(0),
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
    query_start_time(0),
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f8c3 2198 	str.w	r2, [r3, #408]	@ 0x198
    first_read(true),
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2201      	movs	r2, #1
 8003306:	f883 219c 	strb.w	r2, [r3, #412]	@ 0x19c
    htim(htim),
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	68ba      	ldr	r2, [r7, #8]
 800330e:	f8c3 21a0 	str.w	r2, [r3, #416]	@ 0x1a0
    last_position(0),
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2200      	movs	r2, #0
 8003316:	f8c3 21a4 	str.w	r2, [r3, #420]	@ 0x1a4
    full_rotations(0),
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2200      	movs	r2, #0
 800331e:	f8c3 21a8 	str.w	r2, [r3, #424]	@ 0x1a8
    zero_position(0),
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2200      	movs	r2, #0
 8003326:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
    frequency_start_time(0),
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2200      	movs	r2, #0
 800332e:	f8c3 21b0 	str.w	r2, [r3, #432]	@ 0x1b0
    last_receive_count(0),
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2200      	movs	r2, #0
 8003336:	f8c3 21b4 	str.w	r2, [r3, #436]	@ 0x1b4
    encoder_initialized(false)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 21b8 	strb.w	r2, [r3, #440]	@ 0x1b8
{
}
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	4618      	mov	r0, r3
 8003346:	3710      	adds	r7, #16
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	080176ec 	.word	0x080176ec

08003350 <_ZN21ModbusAbsoluteEncoder4initEv>:

void ModbusAbsoluteEncoder::init() {
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
    // Initialise timer stats
    //Initialize Modbus library
    ModbusInit(&ModbusH);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	3324      	adds	r3, #36	@ 0x24
 800335c:	4618      	mov	r0, r3
 800335e:	f7fe fbe3 	bl	8001b28 <ModbusInit>
    //Start capturing traffic on serial Port
    ModbusStart(&ModbusH);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	3324      	adds	r3, #36	@ 0x24
 8003366:	4618      	mov	r0, r3
 8003368:	f7fe fc86 	bl	8001c78 <ModbusStart>
    frequency_start_time = HAL_GetTick();
 800336c:	f000 fd1a 	bl	8003da4 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f8c3 21b0 	str.w	r2, [r3, #432]	@ 0x1b0
    last_receive_count = 0;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	f8c3 21b4 	str.w	r2, [r3, #436]	@ 0x1b4
    encoder_initialized = true;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 21b8 	strb.w	r2, [r3, #440]	@ 0x1b8
}
 8003388:	bf00      	nop
 800338a:	3708      	adds	r7, #8
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <_ZN21ModbusAbsoluteEncoder15sendModbusQueryEv>:

bool ModbusAbsoluteEncoder::sendModbusQuery() {
 8003390:	b580      	push	{r7, lr}
 8003392:	b088      	sub	sp, #32
 8003394:	af02      	add	r7, sp, #8
 8003396:	6078      	str	r0, [r7, #4]
    modbus_t telegram;
    constructQuery(&telegram);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	332c      	adds	r3, #44	@ 0x2c
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f107 0208 	add.w	r2, r7, #8
 80033a4:	4611      	mov	r1, r2
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	4798      	blx	r3
    // 发送Modbus查询（非阻塞）
    ModbusDATA[0] = ~ModbusDATA[0];
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f8b3 316c 	ldrh.w	r3, [r3, #364]	@ 0x16c
 80033b0:	43db      	mvns	r3, r3
 80033b2:	b29a      	uxth	r2, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f8a3 216c 	strh.w	r2, [r3, #364]	@ 0x16c
    ModbusQuery(&ModbusH, telegram);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	9300      	str	r3, [sp, #0]
 80033c4:	f107 0308 	add.w	r3, r7, #8
 80033c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033ca:	f7fe fe3d 	bl	8002048 <ModbusQuery>

    modbus_state = QUERY_SENT;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2201      	movs	r2, #1
 80033d2:	f883 2185 	strb.w	r2, [r3, #389]	@ 0x185
    query_start_time = HAL_GetTick();
 80033d6:	f000 fce5 	bl	8003da4 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f8c3 2198 	str.w	r2, [r3, #408]	@ 0x198
    return true;
 80033e2:	2301      	movs	r3, #1
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3718      	adds	r7, #24
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <_ZN21ModbusAbsoluteEncoder19checkModbusResponseEv>:

bool ModbusAbsoluteEncoder::checkModbusResponse() {
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
    // 检查Modbus响应是否准备好
    // 这里需要根据具体的Modbus库实现来检查
    // 假设ModbusQueryV2是阻塞版本，我们需要非阻塞检查
    
    // 简化实现：检查Modbus状态
    uint32_t u32NotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // block until query finishes or timeouts
 80033f4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80033f8:	2001      	movs	r0, #1
 80033fa:	f011 fa43 	bl	8014884 <ulTaskNotifyTake>
 80033fe:	60f8      	str	r0, [r7, #12]
    if(u32NotificationValue != OP_OK_QUERY)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2b14      	cmp	r3, #20
 8003404:	d001      	beq.n	800340a <_ZN21ModbusAbsoluteEncoder19checkModbusResponseEv+0x1e>
    {
        return false;
 8003406:	2300      	movs	r3, #0
 8003408:	e01e      	b.n	8003448 <_ZN21ModbusAbsoluteEncoder19checkModbusResponseEv+0x5c>
    } else {
        // 成功接收到响应
        encoder_receive_count++;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f8d3 3194 	ldr.w	r3, [r3, #404]	@ 0x194
 8003410:	1c5a      	adds	r2, r3, #1
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
        uint32_t current_position = ((uint32_t)ModbusDATA[0] << 16) | ModbusDATA[1];
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f8b3 316c 	ldrh.w	r3, [r3, #364]	@ 0x16c
 800341e:	041b      	lsls	r3, r3, #16
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	f8b2 216e 	ldrh.w	r2, [r2, #366]	@ 0x16e
 8003426:	4313      	orrs	r3, r2
 8003428:	60bb      	str	r3, [r7, #8]
        updateAngleFromPosition(current_position);
 800342a:	68b9      	ldr	r1, [r7, #8]
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f000 f947 	bl	80036c0 <_ZN21ModbusAbsoluteEncoder23updateAngleFromPositionEm>
        comm_ok = true;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2201      	movs	r2, #1
 8003436:	f883 2184 	strb.w	r2, [r3, #388]	@ 0x184
        last_update_time = HAL_GetTick();
 800343a:	f000 fcb3 	bl	8003da4 <HAL_GetTick>
 800343e:	4602      	mov	r2, r0
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
        // 通讯完成，检查结果
        return true;
 8003446:	2301      	movs	r3, #1
    }
}
 8003448:	4618      	mov	r0, r3
 800344a:	3710      	adds	r7, #16
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <_ZN21ModbusAbsoluteEncoder17startAsyncReadingEm>:

void ModbusAbsoluteEncoder::startAsyncReading(uint32_t update_frequency_hz) {
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
    if(!htim) {
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d104      	bne.n	800346e <_ZN21ModbusAbsoluteEncoder17startAsyncReadingEm+0x1e>
        async_enabled = false;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 218c 	strb.w	r2, [r3, #396]	@ 0x18c
        return;
 800346c:	e058      	b.n	8003520 <_ZN21ModbusAbsoluteEncoder17startAsyncReadingEm+0xd0>
    }

    // Configure TIM ARR based on requested frequency (assuming clock already set as in Encoder485)
    uint32_t arr_value = (100000 / update_frequency_hz) - 1;
 800346e:	4a2e      	ldr	r2, [pc, #184]	@ (8003528 <_ZN21ModbusAbsoluteEncoder17startAsyncReadingEm+0xd8>)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	fbb2 f3f3 	udiv	r3, r2, r3
 8003476:	3b01      	subs	r3, #1
 8003478:	60fb      	str	r3, [r7, #12]
    if(arr_value > 65535) arr_value = 65535;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003480:	d302      	bcc.n	8003488 <_ZN21ModbusAbsoluteEncoder17startAsyncReadingEm+0x38>
 8003482:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003486:	60fb      	str	r3, [r7, #12]
    if(arr_value < 10) arr_value = 10;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2b09      	cmp	r3, #9
 800348c:	d801      	bhi.n	8003492 <_ZN21ModbusAbsoluteEncoder17startAsyncReadingEm+0x42>
 800348e:	230a      	movs	r3, #10
 8003490:	60fb      	str	r3, [r7, #12]
    __HAL_TIM_DISABLE(htim);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	6a1a      	ldr	r2, [r3, #32]
 800349c:	f241 1311 	movw	r3, #4369	@ 0x1111
 80034a0:	4013      	ands	r3, r2
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	bf0c      	ite	eq
 80034a6:	2301      	moveq	r3, #1
 80034a8:	2300      	movne	r3, #0
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d01a      	beq.n	80034e6 <_ZN21ModbusAbsoluteEncoder17startAsyncReadingEm+0x96>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	6a1a      	ldr	r2, [r3, #32]
 80034ba:	f240 4344 	movw	r3, #1092	@ 0x444
 80034be:	4013      	ands	r3, r2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	bf0c      	ite	eq
 80034c4:	2301      	moveq	r3, #1
 80034c6:	2300      	movne	r3, #0
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d00b      	beq.n	80034e6 <_ZN21ModbusAbsoluteEncoder17startAsyncReadingEm+0x96>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f022 0201 	bic.w	r2, r2, #1
 80034e4:	601a      	str	r2, [r3, #0]
    htim->Instance->ARR = arr_value;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	68fa      	ldr	r2, [r7, #12]
 80034f0:	62da      	str	r2, [r3, #44]	@ 0x2c
    __HAL_TIM_SET_COUNTER(htim, 0);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	2200      	movs	r2, #0
 80034fc:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_TIM_Base_Start_IT(htim);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 8003504:	4618      	mov	r0, r3
 8003506:	f006 ff53 	bl	800a3b0 <HAL_TIM_Base_Start_IT>

    async_enabled = true;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2201      	movs	r2, #1
 800350e:	f883 218c 	strb.w	r2, [r3, #396]	@ 0x18c
    modbus_state = IDLE;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 2185 	strb.w	r2, [r3, #389]	@ 0x185

    // Initial query so first value is available quickly
    sendModbusQuery();
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f7ff ff38 	bl	8003390 <_ZN21ModbusAbsoluteEncoder15sendModbusQueryEv>
}
 8003520:	3710      	adds	r7, #16
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	000186a0 	.word	0x000186a0
 800352c:	00000000 	.word	0x00000000

08003530 <_ZN21ModbusAbsoluteEncoder8getAngleEv>:
        HAL_TIM_Base_Stop_IT(htim);
    }
}


float ModbusAbsoluteEncoder::getAngle() {
 8003530:	b580      	push	{r7, lr}
 8003532:	b08a      	sub	sp, #40	@ 0x28
 8003534:	af02      	add	r7, sp, #8
 8003536:	6078      	str	r0, [r7, #4]
    if(async_enabled) {
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f893 318c 	ldrb.w	r3, [r3, #396]	@ 0x18c
 800353e:	b2db      	uxtb	r3, r3
 8003540:	2b00      	cmp	r3, #0
 8003542:	d003      	beq.n	800354c <_ZN21ModbusAbsoluteEncoder8getAngleEv+0x1c>
        return cached_angle;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	edd3 7a62 	vldr	s15, [r3, #392]	@ 0x188
 800354a:	e059      	b.n	8003600 <_ZN21ModbusAbsoluteEncoder8getAngleEv+0xd0>
    }
    // 构建Modbus查询结构体
    modbus_t telegram;
    constructQuery(&telegram);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	332c      	adds	r3, #44	@ 0x2c
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f107 0208 	add.w	r2, r7, #8
 8003558:	4611      	mov	r1, r2
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	4798      	blx	r3
    // 发送Modbus查询（非阻塞）
    ModbusDATA[0] = ~ModbusDATA[0];
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f8b3 316c 	ldrh.w	r3, [r3, #364]	@ 0x16c
 8003564:	43db      	mvns	r3, r3
 8003566:	b29a      	uxth	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f8a3 216c 	strh.w	r2, [r3, #364]	@ 0x16c
    
    uint32_t result = ModbusQueryV2(&ModbusH, telegram);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	9300      	str	r3, [sp, #0]
 8003578:	f107 0308 	add.w	r3, r7, #8
 800357c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800357e:	f7fe fda9 	bl	80020d4 <ModbusQueryV2>
 8003582:	61f8      	str	r0, [r7, #28]
    
    if (result != OP_OK_QUERY) {
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	2b14      	cmp	r3, #20
 8003588:	d02a      	beq.n	80035e0 <_ZN21ModbusAbsoluteEncoder8getAngleEv+0xb0>
        if (first_read) {
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f893 319c 	ldrb.w	r3, [r3, #412]	@ 0x19c
 8003590:	2b00      	cmp	r3, #0
 8003592:	d002      	beq.n	800359a <_ZN21ModbusAbsoluteEncoder8getAngleEv+0x6a>
            return 0.0f;
 8003594:	eddf 7a20 	vldr	s15, [pc, #128]	@ 8003618 <_ZN21ModbusAbsoluteEncoder8getAngleEv+0xe8>
 8003598:	e032      	b.n	8003600 <_ZN21ModbusAbsoluteEncoder8getAngleEv+0xd0>
        } else {
            return (float)(last_position % ENCODER_RESOLUTION) * RADIANS_PER_COUNT + 
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 80035a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80035a4:	ee07 3a90 	vmov	s15, r3
 80035a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035ac:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 800361c <_ZN21ModbusAbsoluteEncoder8getAngleEv+0xec>
 80035b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035b4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
                    (float)full_rotations * 2.0f * M_PI;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 80035be:	ee07 3a90 	vmov	s15, r3
 80035c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035c6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80035ca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80035ce:	ed9f 5b10 	vldr	d5, [pc, #64]	@ 8003610 <_ZN21ModbusAbsoluteEncoder8getAngleEv+0xe0>
 80035d2:	ee27 7b05 	vmul.f64	d7, d7, d5
            return (float)(last_position % ENCODER_RESOLUTION) * RADIANS_PER_COUNT + 
 80035d6:	ee36 7b07 	vadd.f64	d7, d6, d7
                    (float)full_rotations * 2.0f * M_PI;
 80035da:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80035de:	e00f      	b.n	8003600 <_ZN21ModbusAbsoluteEncoder8getAngleEv+0xd0>
        }
    }
    
    uint32_t current_position = ((uint32_t)ModbusDATA[0] << 16) | ModbusDATA[1];
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f8b3 316c 	ldrh.w	r3, [r3, #364]	@ 0x16c
 80035e6:	041b      	lsls	r3, r3, #16
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	f8b2 216e 	ldrh.w	r2, [r2, #366]	@ 0x16e
 80035ee:	4313      	orrs	r3, r2
 80035f0:	61bb      	str	r3, [r7, #24]
    updateAngleFromPosition(current_position);
 80035f2:	69b9      	ldr	r1, [r7, #24]
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f000 f863 	bl	80036c0 <_ZN21ModbusAbsoluteEncoder23updateAngleFromPositionEm>
    
    return cached_angle;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	edd3 7a62 	vldr	s15, [r3, #392]	@ 0x188
}
 8003600:	eeb0 0a67 	vmov.f32	s0, s15
 8003604:	3720      	adds	r7, #32
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	f3af 8000 	nop.w
 8003610:	54442d18 	.word	0x54442d18
 8003614:	400921fb 	.word	0x400921fb
 8003618:	00000000 	.word	0x00000000
 800361c:	3a490fdb 	.word	0x3a490fdb

08003620 <_ZN21ModbusAbsoluteEncoder19asyncUpdateCallbackEv>:

void ModbusAbsoluteEncoder::asyncUpdateCallback() {
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
    if(!async_enabled) return;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f893 318c 	ldrb.w	r3, [r3, #396]	@ 0x18c
 800362e:	b2db      	uxtb	r3, r3
 8003630:	f083 0301 	eor.w	r3, r3, #1
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d122      	bne.n	8003680 <_ZN21ModbusAbsoluteEncoder19asyncUpdateCallbackEv+0x60>

    switch(modbus_state) {
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f893 3185 	ldrb.w	r3, [r3, #389]	@ 0x185
 8003640:	2b00      	cmp	r3, #0
 8003642:	d002      	beq.n	800364a <_ZN21ModbusAbsoluteEncoder19asyncUpdateCallbackEv+0x2a>
 8003644:	2b01      	cmp	r3, #1
 8003646:	d004      	beq.n	8003652 <_ZN21ModbusAbsoluteEncoder19asyncUpdateCallbackEv+0x32>
 8003648:	e01b      	b.n	8003682 <_ZN21ModbusAbsoluteEncoder19asyncUpdateCallbackEv+0x62>
        case IDLE:
            sendModbusQuery();
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f7ff fea0 	bl	8003390 <_ZN21ModbusAbsoluteEncoder15sendModbusQueryEv>
//             printf("Sending query...");
            break;
 8003650:	e017      	b.n	8003682 <_ZN21ModbusAbsoluteEncoder19asyncUpdateCallbackEv+0x62>
        case QUERY_SENT:
            if(checkModbusResponse()) {
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f7ff feca 	bl	80033ec <_ZN21ModbusAbsoluteEncoder19checkModbusResponseEv>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d004      	beq.n	8003668 <_ZN21ModbusAbsoluteEncoder19asyncUpdateCallbackEv+0x48>
                modbus_state = IDLE;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 2185 	strb.w	r2, [r3, #389]	@ 0x185
                // timeout
                comm_ok = false;
                modbus_state = IDLE;
                printf("Timeout, retrying...");
            }
            break;
 8003666:	e00c      	b.n	8003682 <_ZN21ModbusAbsoluteEncoder19asyncUpdateCallbackEv+0x62>
                comm_ok = false;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 2184 	strb.w	r2, [r3, #388]	@ 0x184
                modbus_state = IDLE;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 2185 	strb.w	r2, [r3, #389]	@ 0x185
                printf("Timeout, retrying...");
 8003678:	4803      	ldr	r0, [pc, #12]	@ (8003688 <_ZN21ModbusAbsoluteEncoder19asyncUpdateCallbackEv+0x68>)
 800367a:	f012 fce9 	bl	8016050 <iprintf>
            break;
 800367e:	e000      	b.n	8003682 <_ZN21ModbusAbsoluteEncoder19asyncUpdateCallbackEv+0x62>
    if(!async_enabled) return;
 8003680:	bf00      	nop
    }
}
 8003682:	3708      	adds	r7, #8
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	0801758c 	.word	0x0801758c

0800368c <_ZN21ModbusAbsoluteEncoder14getSensorAngleEv>:

float ModbusAbsoluteEncoder::getSensorAngle() {
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
    return (float)(last_position % ENCODER_RESOLUTION) * RADIANS_PER_COUNT;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 800369a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800369e:	ee07 3a90 	vmov	s15, r3
 80036a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036a6:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80036bc <_ZN21ModbusAbsoluteEncoder14getSensorAngleEv+0x30>
 80036aa:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80036ae:	eeb0 0a67 	vmov.f32	s0, s15
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr
 80036bc:	3a490fdb 	.word	0x3a490fdb

080036c0 <_ZN21ModbusAbsoluteEncoder23updateAngleFromPositionEm>:

uint32_t ModbusAbsoluteEncoder::reg2u32(uint16_t reg) {
    return (uint32_t)reg + ENCODER_ZERO_POSITION;
}

void ModbusAbsoluteEncoder::updateAngleFromPosition(uint32_t current_position) {
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
    if(first_read) {
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f893 319c 	ldrb.w	r3, [r3, #412]	@ 0x19c
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d007      	beq.n	80036e4 <_ZN21ModbusAbsoluteEncoder23updateAngleFromPositionEm+0x24>
        zero_position = current_position;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	683a      	ldr	r2, [r7, #0]
 80036d8:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
        first_read = false;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 219c 	strb.w	r2, [r3, #412]	@ 0x19c
    }

    last_position = current_position;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	683a      	ldr	r2, [r7, #0]
 80036e8:	f8c3 21a4 	str.w	r2, [r3, #420]	@ 0x1a4
    cached_angle = current_position * RADIANS_PER_COUNT;
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	ee07 3a90 	vmov	s15, r3
 80036f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036f6:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8003720 <_ZN21ModbusAbsoluteEncoder23updateAngleFromPositionEm+0x60>
 80036fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	edc3 7a62 	vstr	s15, [r3, #392]	@ 0x188
    if(angleUpdateCallback) {
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 800370a:	2b00      	cmp	r3, #0
 800370c:	d004      	beq.n	8003718 <_ZN21ModbusAbsoluteEncoder23updateAngleFromPositionEm+0x58>
        angleUpdateCallback(current_position);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 8003714:	6838      	ldr	r0, [r7, #0]
 8003716:	4798      	blx	r3
    }
}
 8003718:	bf00      	nop
 800371a:	3708      	adds	r7, #8
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	3a490fdb 	.word	0x3a490fdb

08003724 <_ZN21ModbusAbsoluteEncoder22setAngleUpdateCallbackEPFvmE>:

void ModbusAbsoluteEncoder::setAngleUpdateCallback(void (*callback)(uint32_t position)) {
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
    angleUpdateCallback = callback;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	683a      	ldr	r2, [r7, #0]
 8003732:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
}
 8003736:	bf00      	nop
 8003738:	370c      	adds	r7, #12
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr

08003742 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8003742:	b480      	push	{r7}
 8003744:	b083      	sub	sp, #12
 8003746:	af00      	add	r7, sp, #0
 8003748:	ed87 0a01 	vstr	s0, [r7, #4]
 800374c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003750:	eef0 7ae7 	vabs.f32	s15, s15
 8003754:	eeb0 0a67 	vmov.f32	s0, s15
 8003758:	370c      	adds	r7, #12
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr
	...

08003764 <_ZN6Sensor6updateEv>:
#include "main.h"
#include <cmath>
#include "cmsis_os.h"
#define _2PI 6.28318530718f

void Sensor::update() {
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
    float val = getSensorAngle();
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	331c      	adds	r3, #28
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	4798      	blx	r3
 8003778:	ed87 0a03 	vstr	s0, [r7, #12]
    if (val<0) // sensor angles are strictly non-negative. Negative values are used to signal errors.
 800377c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003780:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003788:	d434      	bmi.n	80037f4 <_ZN6Sensor6updateEv+0x90>
        return; // TODO signal error, e.g. via a flag and counter
    angle_prev_ts = HAL_GetTick();
 800378a:	f000 fb0b 	bl	8003da4 <HAL_GetTick>
 800378e:	4603      	mov	r3, r0
 8003790:	461a      	mov	r2, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	611a      	str	r2, [r3, #16]
    float d_angle = val - angle_prev;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	edd3 7a03 	vldr	s15, [r3, #12]
 800379c:	ed97 7a03 	vldr	s14, [r7, #12]
 80037a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037a4:	edc7 7a02 	vstr	s15, [r7, #8]
    // if overflow happened track it as full rotation
    if(abs(d_angle) > (0.8f*_2PI) ) full_rotations += ( d_angle > 0 ) ? -1 : 1; 
 80037a8:	ed97 0a02 	vldr	s0, [r7, #8]
 80037ac:	f7ff ffc9 	bl	8003742 <_ZSt3absf>
 80037b0:	eef0 7a40 	vmov.f32	s15, s0
 80037b4:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 80037fc <_ZN6Sensor6updateEv+0x98>
 80037b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037c0:	bfcc      	ite	gt
 80037c2:	2301      	movgt	r3, #1
 80037c4:	2300      	movle	r3, #0
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d00f      	beq.n	80037ec <_ZN6Sensor6updateEv+0x88>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	69db      	ldr	r3, [r3, #28]
 80037d0:	edd7 7a02 	vldr	s15, [r7, #8]
 80037d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80037d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037dc:	dd02      	ble.n	80037e4 <_ZN6Sensor6updateEv+0x80>
 80037de:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80037e2:	e000      	b.n	80037e6 <_ZN6Sensor6updateEv+0x82>
 80037e4:	2201      	movs	r2, #1
 80037e6:	441a      	add	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	61da      	str	r2, [r3, #28]
    angle_prev = val;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	60da      	str	r2, [r3, #12]
 80037f2:	e000      	b.n	80037f6 <_ZN6Sensor6updateEv+0x92>
        return; // TODO signal error, e.g. via a flag and counter
 80037f4:	bf00      	nop
}
 80037f6:	3710      	adds	r7, #16
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	40a0d97c 	.word	0x40a0d97c

08003800 <_ZN6Sensor11getVelocityEv>:


 /** get current angular velocity (rad/s) */
float Sensor::getVelocity() {
 8003800:	b480      	push	{r7}
 8003802:	b085      	sub	sp, #20
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
    // calculate sample time
    float Ts = (angle_prev_ts - vel_angle_prev_ts)*1e-6f;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	691a      	ldr	r2, [r3, #16]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	699b      	ldr	r3, [r3, #24]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	ee07 3a90 	vmov	s15, r3
 8003816:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800381a:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80038d8 <_ZN6Sensor11getVelocityEv+0xd8>
 800381e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003822:	edc7 7a03 	vstr	s15, [r7, #12]
    if (Ts < 0.0f) {    // handle micros() overflow - we need to reset vel_angle_prev_ts
 8003826:	edd7 7a03 	vldr	s15, [r7, #12]
 800382a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800382e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003832:	d50e      	bpl.n	8003852 <_ZN6Sensor11getVelocityEv+0x52>
        vel_angle_prev = angle_prev;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	68da      	ldr	r2, [r3, #12]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	615a      	str	r2, [r3, #20]
        vel_full_rotations = full_rotations;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	69da      	ldr	r2, [r3, #28]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	621a      	str	r2, [r3, #32]
        vel_angle_prev_ts = angle_prev_ts;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	691a      	ldr	r2, [r3, #16]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	619a      	str	r2, [r3, #24]
        return velocity;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	e038      	b.n	80038c4 <_ZN6Sensor11getVelocityEv+0xc4>
    }
    if (Ts < min_elapsed_time) return velocity; // don't update velocity if deltaT is too small
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	edd3 7a01 	vldr	s15, [r3, #4]
 8003858:	ed97 7a03 	vldr	s14, [r7, #12]
 800385c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003864:	d502      	bpl.n	800386c <_ZN6Sensor11getVelocityEv+0x6c>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	e02b      	b.n	80038c4 <_ZN6Sensor11getVelocityEv+0xc4>

    velocity = ( (float)(full_rotations - vel_full_rotations)*_2PI + (angle_prev - vel_angle_prev) ) / Ts;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	69da      	ldr	r2, [r3, #28]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a1b      	ldr	r3, [r3, #32]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	ee07 3a90 	vmov	s15, r3
 800387a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800387e:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80038dc <_ZN6Sensor11getVelocityEv+0xdc>
 8003882:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	edd3 6a03 	vldr	s13, [r3, #12]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	edd3 7a05 	vldr	s15, [r3, #20]
 8003892:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003896:	ee77 6a27 	vadd.f32	s13, s14, s15
 800389a:	ed97 7a03 	vldr	s14, [r7, #12]
 800389e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	edc3 7a02 	vstr	s15, [r3, #8]
    vel_angle_prev = angle_prev;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	68da      	ldr	r2, [r3, #12]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	615a      	str	r2, [r3, #20]
    vel_full_rotations = full_rotations;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	69da      	ldr	r2, [r3, #28]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	621a      	str	r2, [r3, #32]
    vel_angle_prev_ts = angle_prev_ts;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	691a      	ldr	r2, [r3, #16]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	619a      	str	r2, [r3, #24]
    return velocity;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	689b      	ldr	r3, [r3, #8]
}
 80038c4:	ee07 3a90 	vmov	s15, r3
 80038c8:	eeb0 0a67 	vmov.f32	s0, s15
 80038cc:	3714      	adds	r7, #20
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop
 80038d8:	358637bd 	.word	0x358637bd
 80038dc:	40c90fdb 	.word	0x40c90fdb

080038e0 <_ZN6Sensor4initEv>:



void Sensor::init() {
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
    // initialize all the internal variables of Sensor to ensure a "smooth" startup (without a 'jump' from zero)
    getSensorAngle(); // call once
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	331c      	adds	r3, #28
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	4798      	blx	r3
    osDelay(1);
 80038f4:	2001      	movs	r0, #1
 80038f6:	f00e f9a3 	bl	8011c40 <osDelay>
    vel_angle_prev = getSensorAngle(); // call again
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	331c      	adds	r3, #28
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	4798      	blx	r3
 8003906:	eef0 7a40 	vmov.f32	s15, s0
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	edc3 7a05 	vstr	s15, [r3, #20]
    vel_angle_prev_ts = HAL_GetTick();
 8003910:	f000 fa48 	bl	8003da4 <HAL_GetTick>
 8003914:	4603      	mov	r3, r0
 8003916:	461a      	mov	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	619a      	str	r2, [r3, #24]
    osDelay(1);
 800391c:	2001      	movs	r0, #1
 800391e:	f00e f98f 	bl	8011c40 <osDelay>
    getSensorAngle(); // call once
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	331c      	adds	r3, #28
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	4798      	blx	r3
    osDelay(1);
 800392e:	2001      	movs	r0, #1
 8003930:	f00e f986 	bl	8011c40 <osDelay>
    angle_prev = getSensorAngle(); // call again
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	331c      	adds	r3, #28
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	4798      	blx	r3
 8003940:	eef0 7a40 	vmov.f32	s15, s0
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	edc3 7a03 	vstr	s15, [r3, #12]
    angle_prev_ts = HAL_GetTick();
 800394a:	f000 fa2b 	bl	8003da4 <HAL_GetTick>
 800394e:	4603      	mov	r3, r0
 8003950:	461a      	mov	r2, r3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	611a      	str	r2, [r3, #16]
}
 8003956:	bf00      	nop
 8003958:	3708      	adds	r7, #8
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <_ZN6Sensor18getMechanicalAngleEv>:


float Sensor::getMechanicalAngle() {
 800395e:	b480      	push	{r7}
 8003960:	b083      	sub	sp, #12
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
    return angle_prev;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	ee07 3a90 	vmov	s15, r3
}
 800396e:	eeb0 0a67 	vmov.f32	s0, s15
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <_ZN6Sensor8getAngleEv>:



float Sensor::getAngle(){
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
    return (float)full_rotations * _2PI + angle_prev;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	69db      	ldr	r3, [r3, #28]
 8003988:	ee07 3a90 	vmov	s15, r3
 800398c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003990:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80039b0 <_ZN6Sensor8getAngleEv+0x34>
 8003994:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	edd3 7a03 	vldr	s15, [r3, #12]
 800399e:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80039a2:	eeb0 0a67 	vmov.f32	s0, s15
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr
 80039b0:	40c90fdb 	.word	0x40c90fdb
 80039b4:	00000000 	.word	0x00000000

080039b8 <_ZN6Sensor15getPreciseAngleEv>:



double Sensor::getPreciseAngle() {
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
    return (double)full_rotations * (double)_2PI + (double)angle_prev;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	69db      	ldr	r3, [r3, #28]
 80039c4:	ee07 3a90 	vmov	s15, r3
 80039c8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80039cc:	ed9f 6b08 	vldr	d6, [pc, #32]	@ 80039f0 <_ZN6Sensor15getPreciseAngleEv+0x38>
 80039d0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	edd3 7a03 	vldr	s15, [r3, #12]
 80039da:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80039de:	ee36 7b07 	vadd.f64	d7, d6, d7
}
 80039e2:	eeb0 0b47 	vmov.f64	d0, d7
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr
 80039f0:	60000000 	.word	0x60000000
 80039f4:	401921fb 	.word	0x401921fb

080039f8 <_ZN6Sensor16getFullRotationsEv>:



int32_t Sensor::getFullRotations() {
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
    return full_rotations;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	69db      	ldr	r3, [r3, #28]
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr

08003a10 <_ZN6Sensor11needsSearchEv>:



int Sensor::needsSearch() {
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
    return 0; // default false
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	370c      	adds	r7, #12
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
	...

08003a28 <HAL_UART_TxCpltCallback>:
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b086      	sub	sp, #24
 8003a2c:	af02      	add	r7, sp, #8
 8003a2e:	6078      	str	r0, [r7, #4]
	/* Modbus RTU TX callback BEGIN */
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8003a30:	2300      	movs	r3, #0
 8003a32:	60bb      	str	r3, [r7, #8]
	int i;
	for (i = 0; i < numberHandlers; i++ )
 8003a34:	2300      	movs	r3, #0
 8003a36:	60fb      	str	r3, [r7, #12]
 8003a38:	e019      	b.n	8003a6e <HAL_UART_TxCpltCallback+0x46>
	{
	   	if (mHandlers[i]->port == huart  )
 8003a3a:	4a17      	ldr	r2, [pc, #92]	@ (8003a98 <HAL_UART_TxCpltCallback+0x70>)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d10e      	bne.n	8003a68 <HAL_UART_TxCpltCallback+0x40>
	   	{
	   		// notify the end of TX
	   		xTaskNotifyFromISR(mHandlers[i]->myTaskModbusAHandle, 0, eNoAction, &xHigherPriorityTaskWoken);
 8003a4a:	4a13      	ldr	r2, [pc, #76]	@ (8003a98 <HAL_UART_TxCpltCallback+0x70>)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a52:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
 8003a56:	f107 0308 	add.w	r3, r7, #8
 8003a5a:	9300      	str	r3, [sp, #0]
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	2200      	movs	r2, #0
 8003a60:	2100      	movs	r1, #0
 8003a62:	f011 f81d 	bl	8014aa0 <xTaskGenericNotifyFromISR>
	   		break;
 8003a66:	e008      	b.n	8003a7a <HAL_UART_TxCpltCallback+0x52>
	for (i = 0; i < numberHandlers; i++ )
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	60fb      	str	r3, [r7, #12]
 8003a6e:	4b0b      	ldr	r3, [pc, #44]	@ (8003a9c <HAL_UART_TxCpltCallback+0x74>)
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	461a      	mov	r2, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	4293      	cmp	r3, r2
 8003a78:	dbdf      	blt.n	8003a3a <HAL_UART_TxCpltCallback+0x12>
	   	}

	}
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d007      	beq.n	8003a90 <HAL_UART_TxCpltCallback+0x68>
 8003a80:	4b07      	ldr	r3, [pc, #28]	@ (8003aa0 <HAL_UART_TxCpltCallback+0x78>)
 8003a82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a86:	601a      	str	r2, [r3, #0]
 8003a88:	f3bf 8f4f 	dsb	sy
 8003a8c:	f3bf 8f6f 	isb	sy
	/*
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 * */

}
 8003a90:	bf00      	nop
 8003a92:	3710      	adds	r7, #16
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	24000924 	.word	0x24000924
 8003a9c:	2400092c 	.word	0x2400092c
 8003aa0:	e000ed04 	.word	0xe000ed04

08003aa4 <HAL_UART_RxCpltCallback>:
 * user should implement the correct control flow and verification to maintain
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8003aa4:	b590      	push	{r4, r7, lr}
 8003aa6:	b087      	sub	sp, #28
 8003aa8:	af02      	add	r7, sp, #8
 8003aaa:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8003aac:	2300      	movs	r3, #0
 8003aae:	60bb      	str	r3, [r7, #8]

	/* Modbus RTU RX callback BEGIN */
    int i;
    for (i = 0; i < numberHandlers; i++ )
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	60fb      	str	r3, [r7, #12]
 8003ab4:	e042      	b.n	8003b3c <HAL_UART_RxCpltCallback+0x98>
    {
    	if (mHandlers[i]->port == UartHandle  )
 8003ab6:	4a2d      	ldr	r2, [pc, #180]	@ (8003b6c <HAL_UART_RxCpltCallback+0xc8>)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d137      	bne.n	8003b36 <HAL_UART_RxCpltCallback+0x92>
    	{

    		if(mHandlers[i]->xTypeHW == USART_HW)
 8003ac6:	4a29      	ldr	r2, [pc, #164]	@ (8003b6c <HAL_UART_RxCpltCallback+0xc8>)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ace:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d139      	bne.n	8003b4a <HAL_UART_RxCpltCallback+0xa6>
    		{
    			RingAdd(&mHandlers[i]->xBufferRX, mHandlers[i]->dataRX);
 8003ad6:	4a25      	ldr	r2, [pc, #148]	@ (8003b6c <HAL_UART_RxCpltCallback+0xc8>)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ade:	f103 02c0 	add.w	r2, r3, #192	@ 0xc0
 8003ae2:	4922      	ldr	r1, [pc, #136]	@ (8003b6c <HAL_UART_RxCpltCallback+0xc8>)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003aea:	f893 30a6 	ldrb.w	r3, [r3, #166]	@ 0xa6
 8003aee:	4619      	mov	r1, r3
 8003af0:	4610      	mov	r0, r2
 8003af2:	f7fd ff51 	bl	8001998 <RingAdd>
    			HAL_UART_Receive_IT(mHandlers[i]->port, &mHandlers[i]->dataRX, 1);
 8003af6:	4a1d      	ldr	r2, [pc, #116]	@ (8003b6c <HAL_UART_RxCpltCallback+0xc8>)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003afe:	6858      	ldr	r0, [r3, #4]
 8003b00:	4a1a      	ldr	r2, [pc, #104]	@ (8003b6c <HAL_UART_RxCpltCallback+0xc8>)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b08:	33a6      	adds	r3, #166	@ 0xa6
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	f007 fd35 	bl	800b57c <HAL_UART_Receive_IT>
    			xTimerResetFromISR(mHandlers[i]->xTimerT35, &xHigherPriorityTaskWoken);
 8003b12:	4a16      	ldr	r2, [pc, #88]	@ (8003b6c <HAL_UART_RxCpltCallback+0xc8>)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b1a:	f8d3 40b4 	ldr.w	r4, [r3, #180]	@ 0xb4
 8003b1e:	f010 f90f 	bl	8013d40 <xTaskGetTickCountFromISR>
 8003b22:	4602      	mov	r2, r0
 8003b24:	f107 0308 	add.w	r3, r7, #8
 8003b28:	2100      	movs	r1, #0
 8003b2a:	9100      	str	r1, [sp, #0]
 8003b2c:	2107      	movs	r1, #7
 8003b2e:	4620      	mov	r0, r4
 8003b30:	f011 f998 	bl	8014e64 <xTimerGenericCommand>
    		}
    		break;
 8003b34:	e009      	b.n	8003b4a <HAL_UART_RxCpltCallback+0xa6>
    for (i = 0; i < numberHandlers; i++ )
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	3301      	adds	r3, #1
 8003b3a:	60fb      	str	r3, [r7, #12]
 8003b3c:	4b0c      	ldr	r3, [pc, #48]	@ (8003b70 <HAL_UART_RxCpltCallback+0xcc>)
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	461a      	mov	r2, r3
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	4293      	cmp	r3, r2
 8003b46:	dbb6      	blt.n	8003ab6 <HAL_UART_RxCpltCallback+0x12>
 8003b48:	e000      	b.n	8003b4c <HAL_UART_RxCpltCallback+0xa8>
    		break;
 8003b4a:	bf00      	nop
    	}
    }
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d007      	beq.n	8003b62 <HAL_UART_RxCpltCallback+0xbe>
 8003b52:	4b08      	ldr	r3, [pc, #32]	@ (8003b74 <HAL_UART_RxCpltCallback+0xd0>)
 8003b54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b58:	601a      	str	r2, [r3, #0]
 8003b5a:	f3bf 8f4f 	dsb	sy
 8003b5e:	f3bf 8f6f 	isb	sy
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 *
	 * */

}
 8003b62:	bf00      	nop
 8003b64:	3714      	adds	r7, #20
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd90      	pop	{r4, r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	24000924 	.word	0x24000924
 8003b70:	2400092c 	.word	0x2400092c
 8003b74:	e000ed04 	.word	0xe000ed04

08003b78 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8003b80:	4a07      	ldr	r2, [pc, #28]	@ (8003ba0 <RetargetInit+0x28>)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8003b86:	4b07      	ldr	r3, [pc, #28]	@ (8003ba4 <RetargetInit+0x2c>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	6898      	ldr	r0, [r3, #8]
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	2202      	movs	r2, #2
 8003b90:	2100      	movs	r1, #0
 8003b92:	f012 facd 	bl	8016130 <setvbuf>
}
 8003b96:	bf00      	nop
 8003b98:	3708      	adds	r7, #8
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	24000930 	.word	0x24000930
 8003ba4:	24000020 	.word	0x24000020

08003ba8 <_isatty>:

int _isatty(int fd) {
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	db04      	blt.n	8003bc0 <_isatty+0x18>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	dc01      	bgt.n	8003bc0 <_isatty+0x18>
    return 1;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e005      	b.n	8003bcc <_isatty+0x24>

  errno = EBADF;
 8003bc0:	f012 fd20 	bl	8016604 <__errno>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2209      	movs	r2, #9
 8003bc8:	601a      	str	r2, [r3, #0]
  return 0;
 8003bca:	2300      	movs	r3, #0
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3708      	adds	r7, #8
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <_write>:

int _write(int fd, char* ptr, int len) {
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b086      	sub	sp, #24
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	607a      	str	r2, [r7, #4]
 HAL_StatusTypeDef hstatus;

 if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d002      	beq.n	8003bec <_write+0x18>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	d111      	bne.n	8003c10 <_write+0x3c>
   hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8003bec:	4b0e      	ldr	r3, [pc, #56]	@ (8003c28 <_write+0x54>)
 8003bee:	6818      	ldr	r0, [r3, #0]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	b29a      	uxth	r2, r3
 8003bf4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003bf8:	68b9      	ldr	r1, [r7, #8]
 8003bfa:	f007 fad5 	bl	800b1a8 <HAL_UART_Transmit>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	75fb      	strb	r3, [r7, #23]
   if (hstatus == HAL_OK)
 8003c02:	7dfb      	ldrb	r3, [r7, #23]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d101      	bne.n	8003c0c <_write+0x38>
     return len;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	e008      	b.n	8003c1e <_write+0x4a>
   else
     return EIO;
 8003c0c:	2305      	movs	r3, #5
 8003c0e:	e006      	b.n	8003c1e <_write+0x4a>
 }
 errno = EBADF;
 8003c10:	f012 fcf8 	bl	8016604 <__errno>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2209      	movs	r2, #9
 8003c18:	601a      	str	r2, [r3, #0]
 return -1;
 8003c1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3718      	adds	r7, #24
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	24000930 	.word	0x24000930

08003c2c <_close>:
//         ITM_SendChar(*ptr++);
//     }
//     return len;
// }

int _close(int fd) {
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	db04      	blt.n	8003c44 <_close+0x18>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	dc01      	bgt.n	8003c44 <_close+0x18>
    return 0;
 8003c40:	2300      	movs	r3, #0
 8003c42:	e006      	b.n	8003c52 <_close+0x26>

  errno = EBADF;
 8003c44:	f012 fcde 	bl	8016604 <__errno>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2209      	movs	r2, #9
 8003c4c:	601a      	str	r2, [r3, #0]
  return -1;
 8003c4e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3708      	adds	r7, #8
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	b084      	sub	sp, #16
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	60f8      	str	r0, [r7, #12]
 8003c62:	60b9      	str	r1, [r7, #8]
 8003c64:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8003c66:	f012 fccd 	bl	8016604 <__errno>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2209      	movs	r2, #9
 8003c6e:	601a      	str	r2, [r3, #0]
  return -1;
 8003c70:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3710      	adds	r7, #16
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <_read>:

int _read(int fd, char* ptr, int len) {
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b086      	sub	sp, #24
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	60b9      	str	r1, [r7, #8]
 8003c86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d110      	bne.n	8003cb0 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8003c8e:	4b0e      	ldr	r3, [pc, #56]	@ (8003cc8 <_read+0x4c>)
 8003c90:	6818      	ldr	r0, [r3, #0]
 8003c92:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003c96:	2201      	movs	r2, #1
 8003c98:	68b9      	ldr	r1, [r7, #8]
 8003c9a:	f007 fb13 	bl	800b2c4 <HAL_UART_Receive>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8003ca2:	7dfb      	ldrb	r3, [r7, #23]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d101      	bne.n	8003cac <_read+0x30>
      return 1;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e008      	b.n	8003cbe <_read+0x42>
    else
      return EIO;
 8003cac:	2305      	movs	r3, #5
 8003cae:	e006      	b.n	8003cbe <_read+0x42>
  }
  errno = EBADF;
 8003cb0:	f012 fca8 	bl	8016604 <__errno>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2209      	movs	r2, #9
 8003cb8:	601a      	str	r2, [r3, #0]
  return -1;
 8003cba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3718      	adds	r7, #24
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	24000930 	.word	0x24000930

08003ccc <_fstat>:

int _fstat(int fd, struct stat* st) {
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	db08      	blt.n	8003cee <_fstat+0x22>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	dc05      	bgt.n	8003cee <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003ce8:	605a      	str	r2, [r3, #4]
    return 0;
 8003cea:	2300      	movs	r3, #0
 8003cec:	e005      	b.n	8003cfa <_fstat+0x2e>
  }

  errno = EBADF;
 8003cee:	f012 fc89 	bl	8016604 <__errno>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2209      	movs	r2, #9
 8003cf6:	601a      	str	r2, [r3, #0]
  return 0;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3708      	adds	r7, #8
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
	...

08003d04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d0a:	2003      	movs	r0, #3
 8003d0c:	f000 f933 	bl	8003f76 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003d10:	f001 ff72 	bl	8005bf8 <HAL_RCC_GetSysClockFreq>
 8003d14:	4602      	mov	r2, r0
 8003d16:	4b15      	ldr	r3, [pc, #84]	@ (8003d6c <HAL_Init+0x68>)
 8003d18:	699b      	ldr	r3, [r3, #24]
 8003d1a:	0a1b      	lsrs	r3, r3, #8
 8003d1c:	f003 030f 	and.w	r3, r3, #15
 8003d20:	4913      	ldr	r1, [pc, #76]	@ (8003d70 <HAL_Init+0x6c>)
 8003d22:	5ccb      	ldrb	r3, [r1, r3]
 8003d24:	f003 031f 	and.w	r3, r3, #31
 8003d28:	fa22 f303 	lsr.w	r3, r2, r3
 8003d2c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003d2e:	4b0f      	ldr	r3, [pc, #60]	@ (8003d6c <HAL_Init+0x68>)
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	f003 030f 	and.w	r3, r3, #15
 8003d36:	4a0e      	ldr	r2, [pc, #56]	@ (8003d70 <HAL_Init+0x6c>)
 8003d38:	5cd3      	ldrb	r3, [r2, r3]
 8003d3a:	f003 031f 	and.w	r3, r3, #31
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	fa22 f303 	lsr.w	r3, r2, r3
 8003d44:	4a0b      	ldr	r2, [pc, #44]	@ (8003d74 <HAL_Init+0x70>)
 8003d46:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003d48:	4a0b      	ldr	r2, [pc, #44]	@ (8003d78 <HAL_Init+0x74>)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003d4e:	200f      	movs	r0, #15
 8003d50:	f7fd fbd8 	bl	8001504 <HAL_InitTick>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d001      	beq.n	8003d5e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e002      	b.n	8003d64 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003d5e:	f7fd fa87 	bl	8001270 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d62:	2300      	movs	r3, #0
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3708      	adds	r7, #8
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	58024400 	.word	0x58024400
 8003d70:	08017624 	.word	0x08017624
 8003d74:	24000004 	.word	0x24000004
 8003d78:	24000000 	.word	0x24000000

08003d7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003d80:	4b06      	ldr	r3, [pc, #24]	@ (8003d9c <HAL_IncTick+0x20>)
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	461a      	mov	r2, r3
 8003d86:	4b06      	ldr	r3, [pc, #24]	@ (8003da0 <HAL_IncTick+0x24>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	4a04      	ldr	r2, [pc, #16]	@ (8003da0 <HAL_IncTick+0x24>)
 8003d8e:	6013      	str	r3, [r2, #0]
}
 8003d90:	bf00      	nop
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	2400000c 	.word	0x2400000c
 8003da0:	24000934 	.word	0x24000934

08003da4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003da4:	b480      	push	{r7}
 8003da6:	af00      	add	r7, sp, #0
  return uwTick;
 8003da8:	4b03      	ldr	r3, [pc, #12]	@ (8003db8 <HAL_GetTick+0x14>)
 8003daa:	681b      	ldr	r3, [r3, #0]
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	24000934 	.word	0x24000934

08003dbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003dc4:	f7ff ffee 	bl	8003da4 <HAL_GetTick>
 8003dc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003dd4:	d005      	beq.n	8003de2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003dd6:	4b0a      	ldr	r3, [pc, #40]	@ (8003e00 <HAL_Delay+0x44>)
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	461a      	mov	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	4413      	add	r3, r2
 8003de0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003de2:	bf00      	nop
 8003de4:	f7ff ffde 	bl	8003da4 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	68fa      	ldr	r2, [r7, #12]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d8f7      	bhi.n	8003de4 <HAL_Delay+0x28>
  {
  }
}
 8003df4:	bf00      	nop
 8003df6:	bf00      	nop
 8003df8:	3710      	adds	r7, #16
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	2400000c 	.word	0x2400000c

08003e04 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003e04:	b480      	push	{r7}
 8003e06:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003e08:	4b03      	ldr	r3, [pc, #12]	@ (8003e18 <HAL_GetREVID+0x14>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	0c1b      	lsrs	r3, r3, #16
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr
 8003e18:	5c001000 	.word	0x5c001000

08003e1c <__NVIC_SetPriorityGrouping>:
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b085      	sub	sp, #20
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f003 0307 	and.w	r3, r3, #7
 8003e2a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e2c:	4b0b      	ldr	r3, [pc, #44]	@ (8003e5c <__NVIC_SetPriorityGrouping+0x40>)
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e32:	68ba      	ldr	r2, [r7, #8]
 8003e34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003e38:	4013      	ands	r3, r2
 8003e3a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003e44:	4b06      	ldr	r3, [pc, #24]	@ (8003e60 <__NVIC_SetPriorityGrouping+0x44>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e4a:	4a04      	ldr	r2, [pc, #16]	@ (8003e5c <__NVIC_SetPriorityGrouping+0x40>)
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	60d3      	str	r3, [r2, #12]
}
 8003e50:	bf00      	nop
 8003e52:	3714      	adds	r7, #20
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr
 8003e5c:	e000ed00 	.word	0xe000ed00
 8003e60:	05fa0000 	.word	0x05fa0000

08003e64 <__NVIC_GetPriorityGrouping>:
{
 8003e64:	b480      	push	{r7}
 8003e66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e68:	4b04      	ldr	r3, [pc, #16]	@ (8003e7c <__NVIC_GetPriorityGrouping+0x18>)
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	0a1b      	lsrs	r3, r3, #8
 8003e6e:	f003 0307 	and.w	r3, r3, #7
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr
 8003e7c:	e000ed00 	.word	0xe000ed00

08003e80 <__NVIC_EnableIRQ>:
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	4603      	mov	r3, r0
 8003e88:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003e8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	db0b      	blt.n	8003eaa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e92:	88fb      	ldrh	r3, [r7, #6]
 8003e94:	f003 021f 	and.w	r2, r3, #31
 8003e98:	4907      	ldr	r1, [pc, #28]	@ (8003eb8 <__NVIC_EnableIRQ+0x38>)
 8003e9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e9e:	095b      	lsrs	r3, r3, #5
 8003ea0:	2001      	movs	r0, #1
 8003ea2:	fa00 f202 	lsl.w	r2, r0, r2
 8003ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003eaa:	bf00      	nop
 8003eac:	370c      	adds	r7, #12
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop
 8003eb8:	e000e100 	.word	0xe000e100

08003ebc <__NVIC_SetPriority>:
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	6039      	str	r1, [r7, #0]
 8003ec6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003ec8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	db0a      	blt.n	8003ee6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	b2da      	uxtb	r2, r3
 8003ed4:	490c      	ldr	r1, [pc, #48]	@ (8003f08 <__NVIC_SetPriority+0x4c>)
 8003ed6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003eda:	0112      	lsls	r2, r2, #4
 8003edc:	b2d2      	uxtb	r2, r2
 8003ede:	440b      	add	r3, r1
 8003ee0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003ee4:	e00a      	b.n	8003efc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	b2da      	uxtb	r2, r3
 8003eea:	4908      	ldr	r1, [pc, #32]	@ (8003f0c <__NVIC_SetPriority+0x50>)
 8003eec:	88fb      	ldrh	r3, [r7, #6]
 8003eee:	f003 030f 	and.w	r3, r3, #15
 8003ef2:	3b04      	subs	r3, #4
 8003ef4:	0112      	lsls	r2, r2, #4
 8003ef6:	b2d2      	uxtb	r2, r2
 8003ef8:	440b      	add	r3, r1
 8003efa:	761a      	strb	r2, [r3, #24]
}
 8003efc:	bf00      	nop
 8003efe:	370c      	adds	r7, #12
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr
 8003f08:	e000e100 	.word	0xe000e100
 8003f0c:	e000ed00 	.word	0xe000ed00

08003f10 <NVIC_EncodePriority>:
{
 8003f10:	b480      	push	{r7}
 8003f12:	b089      	sub	sp, #36	@ 0x24
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f003 0307 	and.w	r3, r3, #7
 8003f22:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	f1c3 0307 	rsb	r3, r3, #7
 8003f2a:	2b04      	cmp	r3, #4
 8003f2c:	bf28      	it	cs
 8003f2e:	2304      	movcs	r3, #4
 8003f30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	3304      	adds	r3, #4
 8003f36:	2b06      	cmp	r3, #6
 8003f38:	d902      	bls.n	8003f40 <NVIC_EncodePriority+0x30>
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	3b03      	subs	r3, #3
 8003f3e:	e000      	b.n	8003f42 <NVIC_EncodePriority+0x32>
 8003f40:	2300      	movs	r3, #0
 8003f42:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f44:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4e:	43da      	mvns	r2, r3
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	401a      	ands	r2, r3
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f58:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f62:	43d9      	mvns	r1, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f68:	4313      	orrs	r3, r2
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3724      	adds	r7, #36	@ 0x24
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr

08003f76 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f76:	b580      	push	{r7, lr}
 8003f78:	b082      	sub	sp, #8
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f7ff ff4c 	bl	8003e1c <__NVIC_SetPriorityGrouping>
}
 8003f84:	bf00      	nop
 8003f86:	3708      	adds	r7, #8
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b086      	sub	sp, #24
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	4603      	mov	r3, r0
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	607a      	str	r2, [r7, #4]
 8003f98:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003f9a:	f7ff ff63 	bl	8003e64 <__NVIC_GetPriorityGrouping>
 8003f9e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	68b9      	ldr	r1, [r7, #8]
 8003fa4:	6978      	ldr	r0, [r7, #20]
 8003fa6:	f7ff ffb3 	bl	8003f10 <NVIC_EncodePriority>
 8003faa:	4602      	mov	r2, r0
 8003fac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003fb0:	4611      	mov	r1, r2
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7ff ff82 	bl	8003ebc <__NVIC_SetPriority>
}
 8003fb8:	bf00      	nop
 8003fba:	3718      	adds	r7, #24
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003fca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7ff ff56 	bl	8003e80 <__NVIC_EnableIRQ>
}
 8003fd4:	bf00      	nop
 8003fd6:	3708      	adds	r7, #8
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003fe0:	f3bf 8f5f 	dmb	sy
}
 8003fe4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003fe6:	4b07      	ldr	r3, [pc, #28]	@ (8004004 <HAL_MPU_Disable+0x28>)
 8003fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fea:	4a06      	ldr	r2, [pc, #24]	@ (8004004 <HAL_MPU_Disable+0x28>)
 8003fec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ff0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003ff2:	4b05      	ldr	r3, [pc, #20]	@ (8004008 <HAL_MPU_Disable+0x2c>)
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	605a      	str	r2, [r3, #4]
}
 8003ff8:	bf00      	nop
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	e000ed00 	.word	0xe000ed00
 8004008:	e000ed90 	.word	0xe000ed90

0800400c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8004014:	4a0b      	ldr	r2, [pc, #44]	@ (8004044 <HAL_MPU_Enable+0x38>)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f043 0301 	orr.w	r3, r3, #1
 800401c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800401e:	4b0a      	ldr	r3, [pc, #40]	@ (8004048 <HAL_MPU_Enable+0x3c>)
 8004020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004022:	4a09      	ldr	r2, [pc, #36]	@ (8004048 <HAL_MPU_Enable+0x3c>)
 8004024:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004028:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800402a:	f3bf 8f4f 	dsb	sy
}
 800402e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004030:	f3bf 8f6f 	isb	sy
}
 8004034:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8004036:	bf00      	nop
 8004038:	370c      	adds	r7, #12
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	e000ed90 	.word	0xe000ed90
 8004048:	e000ed00 	.word	0xe000ed00

0800404c <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	785a      	ldrb	r2, [r3, #1]
 8004058:	4b1d      	ldr	r3, [pc, #116]	@ (80040d0 <HAL_MPU_ConfigRegion+0x84>)
 800405a:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d029      	beq.n	80040b8 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8004064:	4a1a      	ldr	r2, [pc, #104]	@ (80040d0 <HAL_MPU_ConfigRegion+0x84>)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	7b1b      	ldrb	r3, [r3, #12]
 8004070:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	7adb      	ldrb	r3, [r3, #11]
 8004076:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004078:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	7a9b      	ldrb	r3, [r3, #10]
 800407e:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004080:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	7b5b      	ldrb	r3, [r3, #13]
 8004086:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004088:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	7b9b      	ldrb	r3, [r3, #14]
 800408e:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004090:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	7bdb      	ldrb	r3, [r3, #15]
 8004096:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004098:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	7a5b      	ldrb	r3, [r3, #9]
 800409e:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80040a0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	7a1b      	ldrb	r3, [r3, #8]
 80040a6:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80040a8:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	7812      	ldrb	r2, [r2, #0]
 80040ae:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80040b0:	4a07      	ldr	r2, [pc, #28]	@ (80040d0 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80040b2:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80040b4:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80040b6:	e005      	b.n	80040c4 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80040b8:	4b05      	ldr	r3, [pc, #20]	@ (80040d0 <HAL_MPU_ConfigRegion+0x84>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80040be:	4b04      	ldr	r3, [pc, #16]	@ (80040d0 <HAL_MPU_ConfigRegion+0x84>)
 80040c0:	2200      	movs	r2, #0
 80040c2:	611a      	str	r2, [r3, #16]
}
 80040c4:	bf00      	nop
 80040c6:	370c      	adds	r7, #12
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr
 80040d0:	e000ed90 	.word	0xe000ed90

080040d4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b086      	sub	sp, #24
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80040dc:	f7ff fe62 	bl	8003da4 <HAL_GetTick>
 80040e0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d101      	bne.n	80040ec <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e2dc      	b.n	80046a6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d008      	beq.n	800410a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2280      	movs	r2, #128	@ 0x80
 80040fc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e2cd      	b.n	80046a6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a76      	ldr	r2, [pc, #472]	@ (80042e8 <HAL_DMA_Abort+0x214>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d04a      	beq.n	80041aa <HAL_DMA_Abort+0xd6>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a74      	ldr	r2, [pc, #464]	@ (80042ec <HAL_DMA_Abort+0x218>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d045      	beq.n	80041aa <HAL_DMA_Abort+0xd6>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a73      	ldr	r2, [pc, #460]	@ (80042f0 <HAL_DMA_Abort+0x21c>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d040      	beq.n	80041aa <HAL_DMA_Abort+0xd6>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a71      	ldr	r2, [pc, #452]	@ (80042f4 <HAL_DMA_Abort+0x220>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d03b      	beq.n	80041aa <HAL_DMA_Abort+0xd6>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a70      	ldr	r2, [pc, #448]	@ (80042f8 <HAL_DMA_Abort+0x224>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d036      	beq.n	80041aa <HAL_DMA_Abort+0xd6>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a6e      	ldr	r2, [pc, #440]	@ (80042fc <HAL_DMA_Abort+0x228>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d031      	beq.n	80041aa <HAL_DMA_Abort+0xd6>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a6d      	ldr	r2, [pc, #436]	@ (8004300 <HAL_DMA_Abort+0x22c>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d02c      	beq.n	80041aa <HAL_DMA_Abort+0xd6>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a6b      	ldr	r2, [pc, #428]	@ (8004304 <HAL_DMA_Abort+0x230>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d027      	beq.n	80041aa <HAL_DMA_Abort+0xd6>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a6a      	ldr	r2, [pc, #424]	@ (8004308 <HAL_DMA_Abort+0x234>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d022      	beq.n	80041aa <HAL_DMA_Abort+0xd6>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a68      	ldr	r2, [pc, #416]	@ (800430c <HAL_DMA_Abort+0x238>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d01d      	beq.n	80041aa <HAL_DMA_Abort+0xd6>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a67      	ldr	r2, [pc, #412]	@ (8004310 <HAL_DMA_Abort+0x23c>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d018      	beq.n	80041aa <HAL_DMA_Abort+0xd6>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a65      	ldr	r2, [pc, #404]	@ (8004314 <HAL_DMA_Abort+0x240>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d013      	beq.n	80041aa <HAL_DMA_Abort+0xd6>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a64      	ldr	r2, [pc, #400]	@ (8004318 <HAL_DMA_Abort+0x244>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d00e      	beq.n	80041aa <HAL_DMA_Abort+0xd6>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a62      	ldr	r2, [pc, #392]	@ (800431c <HAL_DMA_Abort+0x248>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d009      	beq.n	80041aa <HAL_DMA_Abort+0xd6>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a61      	ldr	r2, [pc, #388]	@ (8004320 <HAL_DMA_Abort+0x24c>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d004      	beq.n	80041aa <HAL_DMA_Abort+0xd6>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a5f      	ldr	r2, [pc, #380]	@ (8004324 <HAL_DMA_Abort+0x250>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d101      	bne.n	80041ae <HAL_DMA_Abort+0xda>
 80041aa:	2301      	movs	r3, #1
 80041ac:	e000      	b.n	80041b0 <HAL_DMA_Abort+0xdc>
 80041ae:	2300      	movs	r3, #0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d013      	beq.n	80041dc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f022 021e 	bic.w	r2, r2, #30
 80041c2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	695a      	ldr	r2, [r3, #20]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80041d2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	617b      	str	r3, [r7, #20]
 80041da:	e00a      	b.n	80041f2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f022 020e 	bic.w	r2, r2, #14
 80041ea:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a3c      	ldr	r2, [pc, #240]	@ (80042e8 <HAL_DMA_Abort+0x214>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d072      	beq.n	80042e2 <HAL_DMA_Abort+0x20e>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a3a      	ldr	r2, [pc, #232]	@ (80042ec <HAL_DMA_Abort+0x218>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d06d      	beq.n	80042e2 <HAL_DMA_Abort+0x20e>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a39      	ldr	r2, [pc, #228]	@ (80042f0 <HAL_DMA_Abort+0x21c>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d068      	beq.n	80042e2 <HAL_DMA_Abort+0x20e>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a37      	ldr	r2, [pc, #220]	@ (80042f4 <HAL_DMA_Abort+0x220>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d063      	beq.n	80042e2 <HAL_DMA_Abort+0x20e>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a36      	ldr	r2, [pc, #216]	@ (80042f8 <HAL_DMA_Abort+0x224>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d05e      	beq.n	80042e2 <HAL_DMA_Abort+0x20e>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a34      	ldr	r2, [pc, #208]	@ (80042fc <HAL_DMA_Abort+0x228>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d059      	beq.n	80042e2 <HAL_DMA_Abort+0x20e>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a33      	ldr	r2, [pc, #204]	@ (8004300 <HAL_DMA_Abort+0x22c>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d054      	beq.n	80042e2 <HAL_DMA_Abort+0x20e>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a31      	ldr	r2, [pc, #196]	@ (8004304 <HAL_DMA_Abort+0x230>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d04f      	beq.n	80042e2 <HAL_DMA_Abort+0x20e>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a30      	ldr	r2, [pc, #192]	@ (8004308 <HAL_DMA_Abort+0x234>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d04a      	beq.n	80042e2 <HAL_DMA_Abort+0x20e>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a2e      	ldr	r2, [pc, #184]	@ (800430c <HAL_DMA_Abort+0x238>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d045      	beq.n	80042e2 <HAL_DMA_Abort+0x20e>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a2d      	ldr	r2, [pc, #180]	@ (8004310 <HAL_DMA_Abort+0x23c>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d040      	beq.n	80042e2 <HAL_DMA_Abort+0x20e>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a2b      	ldr	r2, [pc, #172]	@ (8004314 <HAL_DMA_Abort+0x240>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d03b      	beq.n	80042e2 <HAL_DMA_Abort+0x20e>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a2a      	ldr	r2, [pc, #168]	@ (8004318 <HAL_DMA_Abort+0x244>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d036      	beq.n	80042e2 <HAL_DMA_Abort+0x20e>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a28      	ldr	r2, [pc, #160]	@ (800431c <HAL_DMA_Abort+0x248>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d031      	beq.n	80042e2 <HAL_DMA_Abort+0x20e>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a27      	ldr	r2, [pc, #156]	@ (8004320 <HAL_DMA_Abort+0x24c>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d02c      	beq.n	80042e2 <HAL_DMA_Abort+0x20e>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a25      	ldr	r2, [pc, #148]	@ (8004324 <HAL_DMA_Abort+0x250>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d027      	beq.n	80042e2 <HAL_DMA_Abort+0x20e>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a24      	ldr	r2, [pc, #144]	@ (8004328 <HAL_DMA_Abort+0x254>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d022      	beq.n	80042e2 <HAL_DMA_Abort+0x20e>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a22      	ldr	r2, [pc, #136]	@ (800432c <HAL_DMA_Abort+0x258>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d01d      	beq.n	80042e2 <HAL_DMA_Abort+0x20e>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a21      	ldr	r2, [pc, #132]	@ (8004330 <HAL_DMA_Abort+0x25c>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d018      	beq.n	80042e2 <HAL_DMA_Abort+0x20e>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a1f      	ldr	r2, [pc, #124]	@ (8004334 <HAL_DMA_Abort+0x260>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d013      	beq.n	80042e2 <HAL_DMA_Abort+0x20e>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a1e      	ldr	r2, [pc, #120]	@ (8004338 <HAL_DMA_Abort+0x264>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d00e      	beq.n	80042e2 <HAL_DMA_Abort+0x20e>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a1c      	ldr	r2, [pc, #112]	@ (800433c <HAL_DMA_Abort+0x268>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d009      	beq.n	80042e2 <HAL_DMA_Abort+0x20e>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a1b      	ldr	r2, [pc, #108]	@ (8004340 <HAL_DMA_Abort+0x26c>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d004      	beq.n	80042e2 <HAL_DMA_Abort+0x20e>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a19      	ldr	r2, [pc, #100]	@ (8004344 <HAL_DMA_Abort+0x270>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d132      	bne.n	8004348 <HAL_DMA_Abort+0x274>
 80042e2:	2301      	movs	r3, #1
 80042e4:	e031      	b.n	800434a <HAL_DMA_Abort+0x276>
 80042e6:	bf00      	nop
 80042e8:	40020010 	.word	0x40020010
 80042ec:	40020028 	.word	0x40020028
 80042f0:	40020040 	.word	0x40020040
 80042f4:	40020058 	.word	0x40020058
 80042f8:	40020070 	.word	0x40020070
 80042fc:	40020088 	.word	0x40020088
 8004300:	400200a0 	.word	0x400200a0
 8004304:	400200b8 	.word	0x400200b8
 8004308:	40020410 	.word	0x40020410
 800430c:	40020428 	.word	0x40020428
 8004310:	40020440 	.word	0x40020440
 8004314:	40020458 	.word	0x40020458
 8004318:	40020470 	.word	0x40020470
 800431c:	40020488 	.word	0x40020488
 8004320:	400204a0 	.word	0x400204a0
 8004324:	400204b8 	.word	0x400204b8
 8004328:	58025408 	.word	0x58025408
 800432c:	5802541c 	.word	0x5802541c
 8004330:	58025430 	.word	0x58025430
 8004334:	58025444 	.word	0x58025444
 8004338:	58025458 	.word	0x58025458
 800433c:	5802546c 	.word	0x5802546c
 8004340:	58025480 	.word	0x58025480
 8004344:	58025494 	.word	0x58025494
 8004348:	2300      	movs	r3, #0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d007      	beq.n	800435e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004358:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800435c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a6d      	ldr	r2, [pc, #436]	@ (8004518 <HAL_DMA_Abort+0x444>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d04a      	beq.n	80043fe <HAL_DMA_Abort+0x32a>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a6b      	ldr	r2, [pc, #428]	@ (800451c <HAL_DMA_Abort+0x448>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d045      	beq.n	80043fe <HAL_DMA_Abort+0x32a>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a6a      	ldr	r2, [pc, #424]	@ (8004520 <HAL_DMA_Abort+0x44c>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d040      	beq.n	80043fe <HAL_DMA_Abort+0x32a>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a68      	ldr	r2, [pc, #416]	@ (8004524 <HAL_DMA_Abort+0x450>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d03b      	beq.n	80043fe <HAL_DMA_Abort+0x32a>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a67      	ldr	r2, [pc, #412]	@ (8004528 <HAL_DMA_Abort+0x454>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d036      	beq.n	80043fe <HAL_DMA_Abort+0x32a>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a65      	ldr	r2, [pc, #404]	@ (800452c <HAL_DMA_Abort+0x458>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d031      	beq.n	80043fe <HAL_DMA_Abort+0x32a>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a64      	ldr	r2, [pc, #400]	@ (8004530 <HAL_DMA_Abort+0x45c>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d02c      	beq.n	80043fe <HAL_DMA_Abort+0x32a>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a62      	ldr	r2, [pc, #392]	@ (8004534 <HAL_DMA_Abort+0x460>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d027      	beq.n	80043fe <HAL_DMA_Abort+0x32a>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a61      	ldr	r2, [pc, #388]	@ (8004538 <HAL_DMA_Abort+0x464>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d022      	beq.n	80043fe <HAL_DMA_Abort+0x32a>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a5f      	ldr	r2, [pc, #380]	@ (800453c <HAL_DMA_Abort+0x468>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d01d      	beq.n	80043fe <HAL_DMA_Abort+0x32a>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a5e      	ldr	r2, [pc, #376]	@ (8004540 <HAL_DMA_Abort+0x46c>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d018      	beq.n	80043fe <HAL_DMA_Abort+0x32a>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a5c      	ldr	r2, [pc, #368]	@ (8004544 <HAL_DMA_Abort+0x470>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d013      	beq.n	80043fe <HAL_DMA_Abort+0x32a>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a5b      	ldr	r2, [pc, #364]	@ (8004548 <HAL_DMA_Abort+0x474>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d00e      	beq.n	80043fe <HAL_DMA_Abort+0x32a>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a59      	ldr	r2, [pc, #356]	@ (800454c <HAL_DMA_Abort+0x478>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d009      	beq.n	80043fe <HAL_DMA_Abort+0x32a>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a58      	ldr	r2, [pc, #352]	@ (8004550 <HAL_DMA_Abort+0x47c>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d004      	beq.n	80043fe <HAL_DMA_Abort+0x32a>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a56      	ldr	r2, [pc, #344]	@ (8004554 <HAL_DMA_Abort+0x480>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d108      	bne.n	8004410 <HAL_DMA_Abort+0x33c>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f022 0201 	bic.w	r2, r2, #1
 800440c:	601a      	str	r2, [r3, #0]
 800440e:	e007      	b.n	8004420 <HAL_DMA_Abort+0x34c>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f022 0201 	bic.w	r2, r2, #1
 800441e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004420:	e013      	b.n	800444a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004422:	f7ff fcbf 	bl	8003da4 <HAL_GetTick>
 8004426:	4602      	mov	r2, r0
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	2b05      	cmp	r3, #5
 800442e:	d90c      	bls.n	800444a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2220      	movs	r2, #32
 8004434:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2203      	movs	r2, #3
 800443a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e12d      	b.n	80046a6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0301 	and.w	r3, r3, #1
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1e5      	bne.n	8004422 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a2f      	ldr	r2, [pc, #188]	@ (8004518 <HAL_DMA_Abort+0x444>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d04a      	beq.n	80044f6 <HAL_DMA_Abort+0x422>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a2d      	ldr	r2, [pc, #180]	@ (800451c <HAL_DMA_Abort+0x448>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d045      	beq.n	80044f6 <HAL_DMA_Abort+0x422>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a2c      	ldr	r2, [pc, #176]	@ (8004520 <HAL_DMA_Abort+0x44c>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d040      	beq.n	80044f6 <HAL_DMA_Abort+0x422>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a2a      	ldr	r2, [pc, #168]	@ (8004524 <HAL_DMA_Abort+0x450>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d03b      	beq.n	80044f6 <HAL_DMA_Abort+0x422>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a29      	ldr	r2, [pc, #164]	@ (8004528 <HAL_DMA_Abort+0x454>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d036      	beq.n	80044f6 <HAL_DMA_Abort+0x422>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a27      	ldr	r2, [pc, #156]	@ (800452c <HAL_DMA_Abort+0x458>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d031      	beq.n	80044f6 <HAL_DMA_Abort+0x422>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a26      	ldr	r2, [pc, #152]	@ (8004530 <HAL_DMA_Abort+0x45c>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d02c      	beq.n	80044f6 <HAL_DMA_Abort+0x422>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a24      	ldr	r2, [pc, #144]	@ (8004534 <HAL_DMA_Abort+0x460>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d027      	beq.n	80044f6 <HAL_DMA_Abort+0x422>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a23      	ldr	r2, [pc, #140]	@ (8004538 <HAL_DMA_Abort+0x464>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d022      	beq.n	80044f6 <HAL_DMA_Abort+0x422>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a21      	ldr	r2, [pc, #132]	@ (800453c <HAL_DMA_Abort+0x468>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d01d      	beq.n	80044f6 <HAL_DMA_Abort+0x422>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a20      	ldr	r2, [pc, #128]	@ (8004540 <HAL_DMA_Abort+0x46c>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d018      	beq.n	80044f6 <HAL_DMA_Abort+0x422>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a1e      	ldr	r2, [pc, #120]	@ (8004544 <HAL_DMA_Abort+0x470>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d013      	beq.n	80044f6 <HAL_DMA_Abort+0x422>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a1d      	ldr	r2, [pc, #116]	@ (8004548 <HAL_DMA_Abort+0x474>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d00e      	beq.n	80044f6 <HAL_DMA_Abort+0x422>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a1b      	ldr	r2, [pc, #108]	@ (800454c <HAL_DMA_Abort+0x478>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d009      	beq.n	80044f6 <HAL_DMA_Abort+0x422>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a1a      	ldr	r2, [pc, #104]	@ (8004550 <HAL_DMA_Abort+0x47c>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d004      	beq.n	80044f6 <HAL_DMA_Abort+0x422>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a18      	ldr	r2, [pc, #96]	@ (8004554 <HAL_DMA_Abort+0x480>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d101      	bne.n	80044fa <HAL_DMA_Abort+0x426>
 80044f6:	2301      	movs	r3, #1
 80044f8:	e000      	b.n	80044fc <HAL_DMA_Abort+0x428>
 80044fa:	2300      	movs	r3, #0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d02b      	beq.n	8004558 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004504:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800450a:	f003 031f 	and.w	r3, r3, #31
 800450e:	223f      	movs	r2, #63	@ 0x3f
 8004510:	409a      	lsls	r2, r3
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	609a      	str	r2, [r3, #8]
 8004516:	e02a      	b.n	800456e <HAL_DMA_Abort+0x49a>
 8004518:	40020010 	.word	0x40020010
 800451c:	40020028 	.word	0x40020028
 8004520:	40020040 	.word	0x40020040
 8004524:	40020058 	.word	0x40020058
 8004528:	40020070 	.word	0x40020070
 800452c:	40020088 	.word	0x40020088
 8004530:	400200a0 	.word	0x400200a0
 8004534:	400200b8 	.word	0x400200b8
 8004538:	40020410 	.word	0x40020410
 800453c:	40020428 	.word	0x40020428
 8004540:	40020440 	.word	0x40020440
 8004544:	40020458 	.word	0x40020458
 8004548:	40020470 	.word	0x40020470
 800454c:	40020488 	.word	0x40020488
 8004550:	400204a0 	.word	0x400204a0
 8004554:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800455c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004562:	f003 031f 	and.w	r3, r3, #31
 8004566:	2201      	movs	r2, #1
 8004568:	409a      	lsls	r2, r3
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a4f      	ldr	r2, [pc, #316]	@ (80046b0 <HAL_DMA_Abort+0x5dc>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d072      	beq.n	800465e <HAL_DMA_Abort+0x58a>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a4d      	ldr	r2, [pc, #308]	@ (80046b4 <HAL_DMA_Abort+0x5e0>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d06d      	beq.n	800465e <HAL_DMA_Abort+0x58a>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a4c      	ldr	r2, [pc, #304]	@ (80046b8 <HAL_DMA_Abort+0x5e4>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d068      	beq.n	800465e <HAL_DMA_Abort+0x58a>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a4a      	ldr	r2, [pc, #296]	@ (80046bc <HAL_DMA_Abort+0x5e8>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d063      	beq.n	800465e <HAL_DMA_Abort+0x58a>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a49      	ldr	r2, [pc, #292]	@ (80046c0 <HAL_DMA_Abort+0x5ec>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d05e      	beq.n	800465e <HAL_DMA_Abort+0x58a>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a47      	ldr	r2, [pc, #284]	@ (80046c4 <HAL_DMA_Abort+0x5f0>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d059      	beq.n	800465e <HAL_DMA_Abort+0x58a>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a46      	ldr	r2, [pc, #280]	@ (80046c8 <HAL_DMA_Abort+0x5f4>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d054      	beq.n	800465e <HAL_DMA_Abort+0x58a>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a44      	ldr	r2, [pc, #272]	@ (80046cc <HAL_DMA_Abort+0x5f8>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d04f      	beq.n	800465e <HAL_DMA_Abort+0x58a>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a43      	ldr	r2, [pc, #268]	@ (80046d0 <HAL_DMA_Abort+0x5fc>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d04a      	beq.n	800465e <HAL_DMA_Abort+0x58a>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a41      	ldr	r2, [pc, #260]	@ (80046d4 <HAL_DMA_Abort+0x600>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d045      	beq.n	800465e <HAL_DMA_Abort+0x58a>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a40      	ldr	r2, [pc, #256]	@ (80046d8 <HAL_DMA_Abort+0x604>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d040      	beq.n	800465e <HAL_DMA_Abort+0x58a>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a3e      	ldr	r2, [pc, #248]	@ (80046dc <HAL_DMA_Abort+0x608>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d03b      	beq.n	800465e <HAL_DMA_Abort+0x58a>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a3d      	ldr	r2, [pc, #244]	@ (80046e0 <HAL_DMA_Abort+0x60c>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d036      	beq.n	800465e <HAL_DMA_Abort+0x58a>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a3b      	ldr	r2, [pc, #236]	@ (80046e4 <HAL_DMA_Abort+0x610>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d031      	beq.n	800465e <HAL_DMA_Abort+0x58a>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a3a      	ldr	r2, [pc, #232]	@ (80046e8 <HAL_DMA_Abort+0x614>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d02c      	beq.n	800465e <HAL_DMA_Abort+0x58a>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a38      	ldr	r2, [pc, #224]	@ (80046ec <HAL_DMA_Abort+0x618>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d027      	beq.n	800465e <HAL_DMA_Abort+0x58a>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a37      	ldr	r2, [pc, #220]	@ (80046f0 <HAL_DMA_Abort+0x61c>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d022      	beq.n	800465e <HAL_DMA_Abort+0x58a>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a35      	ldr	r2, [pc, #212]	@ (80046f4 <HAL_DMA_Abort+0x620>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d01d      	beq.n	800465e <HAL_DMA_Abort+0x58a>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a34      	ldr	r2, [pc, #208]	@ (80046f8 <HAL_DMA_Abort+0x624>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d018      	beq.n	800465e <HAL_DMA_Abort+0x58a>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a32      	ldr	r2, [pc, #200]	@ (80046fc <HAL_DMA_Abort+0x628>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d013      	beq.n	800465e <HAL_DMA_Abort+0x58a>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a31      	ldr	r2, [pc, #196]	@ (8004700 <HAL_DMA_Abort+0x62c>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d00e      	beq.n	800465e <HAL_DMA_Abort+0x58a>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a2f      	ldr	r2, [pc, #188]	@ (8004704 <HAL_DMA_Abort+0x630>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d009      	beq.n	800465e <HAL_DMA_Abort+0x58a>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a2e      	ldr	r2, [pc, #184]	@ (8004708 <HAL_DMA_Abort+0x634>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d004      	beq.n	800465e <HAL_DMA_Abort+0x58a>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a2c      	ldr	r2, [pc, #176]	@ (800470c <HAL_DMA_Abort+0x638>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d101      	bne.n	8004662 <HAL_DMA_Abort+0x58e>
 800465e:	2301      	movs	r3, #1
 8004660:	e000      	b.n	8004664 <HAL_DMA_Abort+0x590>
 8004662:	2300      	movs	r3, #0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d015      	beq.n	8004694 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004670:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00c      	beq.n	8004694 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004684:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004688:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004692:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3718      	adds	r7, #24
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	40020010 	.word	0x40020010
 80046b4:	40020028 	.word	0x40020028
 80046b8:	40020040 	.word	0x40020040
 80046bc:	40020058 	.word	0x40020058
 80046c0:	40020070 	.word	0x40020070
 80046c4:	40020088 	.word	0x40020088
 80046c8:	400200a0 	.word	0x400200a0
 80046cc:	400200b8 	.word	0x400200b8
 80046d0:	40020410 	.word	0x40020410
 80046d4:	40020428 	.word	0x40020428
 80046d8:	40020440 	.word	0x40020440
 80046dc:	40020458 	.word	0x40020458
 80046e0:	40020470 	.word	0x40020470
 80046e4:	40020488 	.word	0x40020488
 80046e8:	400204a0 	.word	0x400204a0
 80046ec:	400204b8 	.word	0x400204b8
 80046f0:	58025408 	.word	0x58025408
 80046f4:	5802541c 	.word	0x5802541c
 80046f8:	58025430 	.word	0x58025430
 80046fc:	58025444 	.word	0x58025444
 8004700:	58025458 	.word	0x58025458
 8004704:	5802546c 	.word	0x5802546c
 8004708:	58025480 	.word	0x58025480
 800470c:	58025494 	.word	0x58025494

08004710 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d101      	bne.n	8004722 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e237      	b.n	8004b92 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004728:	b2db      	uxtb	r3, r3
 800472a:	2b02      	cmp	r3, #2
 800472c:	d004      	beq.n	8004738 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2280      	movs	r2, #128	@ 0x80
 8004732:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e22c      	b.n	8004b92 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a5c      	ldr	r2, [pc, #368]	@ (80048b0 <HAL_DMA_Abort_IT+0x1a0>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d04a      	beq.n	80047d8 <HAL_DMA_Abort_IT+0xc8>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a5b      	ldr	r2, [pc, #364]	@ (80048b4 <HAL_DMA_Abort_IT+0x1a4>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d045      	beq.n	80047d8 <HAL_DMA_Abort_IT+0xc8>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a59      	ldr	r2, [pc, #356]	@ (80048b8 <HAL_DMA_Abort_IT+0x1a8>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d040      	beq.n	80047d8 <HAL_DMA_Abort_IT+0xc8>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a58      	ldr	r2, [pc, #352]	@ (80048bc <HAL_DMA_Abort_IT+0x1ac>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d03b      	beq.n	80047d8 <HAL_DMA_Abort_IT+0xc8>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a56      	ldr	r2, [pc, #344]	@ (80048c0 <HAL_DMA_Abort_IT+0x1b0>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d036      	beq.n	80047d8 <HAL_DMA_Abort_IT+0xc8>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a55      	ldr	r2, [pc, #340]	@ (80048c4 <HAL_DMA_Abort_IT+0x1b4>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d031      	beq.n	80047d8 <HAL_DMA_Abort_IT+0xc8>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a53      	ldr	r2, [pc, #332]	@ (80048c8 <HAL_DMA_Abort_IT+0x1b8>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d02c      	beq.n	80047d8 <HAL_DMA_Abort_IT+0xc8>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a52      	ldr	r2, [pc, #328]	@ (80048cc <HAL_DMA_Abort_IT+0x1bc>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d027      	beq.n	80047d8 <HAL_DMA_Abort_IT+0xc8>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a50      	ldr	r2, [pc, #320]	@ (80048d0 <HAL_DMA_Abort_IT+0x1c0>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d022      	beq.n	80047d8 <HAL_DMA_Abort_IT+0xc8>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a4f      	ldr	r2, [pc, #316]	@ (80048d4 <HAL_DMA_Abort_IT+0x1c4>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d01d      	beq.n	80047d8 <HAL_DMA_Abort_IT+0xc8>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a4d      	ldr	r2, [pc, #308]	@ (80048d8 <HAL_DMA_Abort_IT+0x1c8>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d018      	beq.n	80047d8 <HAL_DMA_Abort_IT+0xc8>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a4c      	ldr	r2, [pc, #304]	@ (80048dc <HAL_DMA_Abort_IT+0x1cc>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d013      	beq.n	80047d8 <HAL_DMA_Abort_IT+0xc8>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a4a      	ldr	r2, [pc, #296]	@ (80048e0 <HAL_DMA_Abort_IT+0x1d0>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d00e      	beq.n	80047d8 <HAL_DMA_Abort_IT+0xc8>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a49      	ldr	r2, [pc, #292]	@ (80048e4 <HAL_DMA_Abort_IT+0x1d4>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d009      	beq.n	80047d8 <HAL_DMA_Abort_IT+0xc8>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a47      	ldr	r2, [pc, #284]	@ (80048e8 <HAL_DMA_Abort_IT+0x1d8>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d004      	beq.n	80047d8 <HAL_DMA_Abort_IT+0xc8>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a46      	ldr	r2, [pc, #280]	@ (80048ec <HAL_DMA_Abort_IT+0x1dc>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d101      	bne.n	80047dc <HAL_DMA_Abort_IT+0xcc>
 80047d8:	2301      	movs	r3, #1
 80047da:	e000      	b.n	80047de <HAL_DMA_Abort_IT+0xce>
 80047dc:	2300      	movs	r3, #0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	f000 8086 	beq.w	80048f0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2204      	movs	r2, #4
 80047e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a2f      	ldr	r2, [pc, #188]	@ (80048b0 <HAL_DMA_Abort_IT+0x1a0>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d04a      	beq.n	800488c <HAL_DMA_Abort_IT+0x17c>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a2e      	ldr	r2, [pc, #184]	@ (80048b4 <HAL_DMA_Abort_IT+0x1a4>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d045      	beq.n	800488c <HAL_DMA_Abort_IT+0x17c>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a2c      	ldr	r2, [pc, #176]	@ (80048b8 <HAL_DMA_Abort_IT+0x1a8>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d040      	beq.n	800488c <HAL_DMA_Abort_IT+0x17c>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a2b      	ldr	r2, [pc, #172]	@ (80048bc <HAL_DMA_Abort_IT+0x1ac>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d03b      	beq.n	800488c <HAL_DMA_Abort_IT+0x17c>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a29      	ldr	r2, [pc, #164]	@ (80048c0 <HAL_DMA_Abort_IT+0x1b0>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d036      	beq.n	800488c <HAL_DMA_Abort_IT+0x17c>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a28      	ldr	r2, [pc, #160]	@ (80048c4 <HAL_DMA_Abort_IT+0x1b4>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d031      	beq.n	800488c <HAL_DMA_Abort_IT+0x17c>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a26      	ldr	r2, [pc, #152]	@ (80048c8 <HAL_DMA_Abort_IT+0x1b8>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d02c      	beq.n	800488c <HAL_DMA_Abort_IT+0x17c>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a25      	ldr	r2, [pc, #148]	@ (80048cc <HAL_DMA_Abort_IT+0x1bc>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d027      	beq.n	800488c <HAL_DMA_Abort_IT+0x17c>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a23      	ldr	r2, [pc, #140]	@ (80048d0 <HAL_DMA_Abort_IT+0x1c0>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d022      	beq.n	800488c <HAL_DMA_Abort_IT+0x17c>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a22      	ldr	r2, [pc, #136]	@ (80048d4 <HAL_DMA_Abort_IT+0x1c4>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d01d      	beq.n	800488c <HAL_DMA_Abort_IT+0x17c>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a20      	ldr	r2, [pc, #128]	@ (80048d8 <HAL_DMA_Abort_IT+0x1c8>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d018      	beq.n	800488c <HAL_DMA_Abort_IT+0x17c>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a1f      	ldr	r2, [pc, #124]	@ (80048dc <HAL_DMA_Abort_IT+0x1cc>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d013      	beq.n	800488c <HAL_DMA_Abort_IT+0x17c>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a1d      	ldr	r2, [pc, #116]	@ (80048e0 <HAL_DMA_Abort_IT+0x1d0>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d00e      	beq.n	800488c <HAL_DMA_Abort_IT+0x17c>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a1c      	ldr	r2, [pc, #112]	@ (80048e4 <HAL_DMA_Abort_IT+0x1d4>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d009      	beq.n	800488c <HAL_DMA_Abort_IT+0x17c>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a1a      	ldr	r2, [pc, #104]	@ (80048e8 <HAL_DMA_Abort_IT+0x1d8>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d004      	beq.n	800488c <HAL_DMA_Abort_IT+0x17c>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a19      	ldr	r2, [pc, #100]	@ (80048ec <HAL_DMA_Abort_IT+0x1dc>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d108      	bne.n	800489e <HAL_DMA_Abort_IT+0x18e>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f022 0201 	bic.w	r2, r2, #1
 800489a:	601a      	str	r2, [r3, #0]
 800489c:	e178      	b.n	8004b90 <HAL_DMA_Abort_IT+0x480>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f022 0201 	bic.w	r2, r2, #1
 80048ac:	601a      	str	r2, [r3, #0]
 80048ae:	e16f      	b.n	8004b90 <HAL_DMA_Abort_IT+0x480>
 80048b0:	40020010 	.word	0x40020010
 80048b4:	40020028 	.word	0x40020028
 80048b8:	40020040 	.word	0x40020040
 80048bc:	40020058 	.word	0x40020058
 80048c0:	40020070 	.word	0x40020070
 80048c4:	40020088 	.word	0x40020088
 80048c8:	400200a0 	.word	0x400200a0
 80048cc:	400200b8 	.word	0x400200b8
 80048d0:	40020410 	.word	0x40020410
 80048d4:	40020428 	.word	0x40020428
 80048d8:	40020440 	.word	0x40020440
 80048dc:	40020458 	.word	0x40020458
 80048e0:	40020470 	.word	0x40020470
 80048e4:	40020488 	.word	0x40020488
 80048e8:	400204a0 	.word	0x400204a0
 80048ec:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f022 020e 	bic.w	r2, r2, #14
 80048fe:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a6c      	ldr	r2, [pc, #432]	@ (8004ab8 <HAL_DMA_Abort_IT+0x3a8>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d04a      	beq.n	80049a0 <HAL_DMA_Abort_IT+0x290>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a6b      	ldr	r2, [pc, #428]	@ (8004abc <HAL_DMA_Abort_IT+0x3ac>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d045      	beq.n	80049a0 <HAL_DMA_Abort_IT+0x290>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a69      	ldr	r2, [pc, #420]	@ (8004ac0 <HAL_DMA_Abort_IT+0x3b0>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d040      	beq.n	80049a0 <HAL_DMA_Abort_IT+0x290>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a68      	ldr	r2, [pc, #416]	@ (8004ac4 <HAL_DMA_Abort_IT+0x3b4>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d03b      	beq.n	80049a0 <HAL_DMA_Abort_IT+0x290>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a66      	ldr	r2, [pc, #408]	@ (8004ac8 <HAL_DMA_Abort_IT+0x3b8>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d036      	beq.n	80049a0 <HAL_DMA_Abort_IT+0x290>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a65      	ldr	r2, [pc, #404]	@ (8004acc <HAL_DMA_Abort_IT+0x3bc>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d031      	beq.n	80049a0 <HAL_DMA_Abort_IT+0x290>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a63      	ldr	r2, [pc, #396]	@ (8004ad0 <HAL_DMA_Abort_IT+0x3c0>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d02c      	beq.n	80049a0 <HAL_DMA_Abort_IT+0x290>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a62      	ldr	r2, [pc, #392]	@ (8004ad4 <HAL_DMA_Abort_IT+0x3c4>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d027      	beq.n	80049a0 <HAL_DMA_Abort_IT+0x290>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a60      	ldr	r2, [pc, #384]	@ (8004ad8 <HAL_DMA_Abort_IT+0x3c8>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d022      	beq.n	80049a0 <HAL_DMA_Abort_IT+0x290>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a5f      	ldr	r2, [pc, #380]	@ (8004adc <HAL_DMA_Abort_IT+0x3cc>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d01d      	beq.n	80049a0 <HAL_DMA_Abort_IT+0x290>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a5d      	ldr	r2, [pc, #372]	@ (8004ae0 <HAL_DMA_Abort_IT+0x3d0>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d018      	beq.n	80049a0 <HAL_DMA_Abort_IT+0x290>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a5c      	ldr	r2, [pc, #368]	@ (8004ae4 <HAL_DMA_Abort_IT+0x3d4>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d013      	beq.n	80049a0 <HAL_DMA_Abort_IT+0x290>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a5a      	ldr	r2, [pc, #360]	@ (8004ae8 <HAL_DMA_Abort_IT+0x3d8>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d00e      	beq.n	80049a0 <HAL_DMA_Abort_IT+0x290>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a59      	ldr	r2, [pc, #356]	@ (8004aec <HAL_DMA_Abort_IT+0x3dc>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d009      	beq.n	80049a0 <HAL_DMA_Abort_IT+0x290>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a57      	ldr	r2, [pc, #348]	@ (8004af0 <HAL_DMA_Abort_IT+0x3e0>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d004      	beq.n	80049a0 <HAL_DMA_Abort_IT+0x290>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a56      	ldr	r2, [pc, #344]	@ (8004af4 <HAL_DMA_Abort_IT+0x3e4>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d108      	bne.n	80049b2 <HAL_DMA_Abort_IT+0x2a2>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f022 0201 	bic.w	r2, r2, #1
 80049ae:	601a      	str	r2, [r3, #0]
 80049b0:	e007      	b.n	80049c2 <HAL_DMA_Abort_IT+0x2b2>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f022 0201 	bic.w	r2, r2, #1
 80049c0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a3c      	ldr	r2, [pc, #240]	@ (8004ab8 <HAL_DMA_Abort_IT+0x3a8>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d072      	beq.n	8004ab2 <HAL_DMA_Abort_IT+0x3a2>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a3a      	ldr	r2, [pc, #232]	@ (8004abc <HAL_DMA_Abort_IT+0x3ac>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d06d      	beq.n	8004ab2 <HAL_DMA_Abort_IT+0x3a2>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a39      	ldr	r2, [pc, #228]	@ (8004ac0 <HAL_DMA_Abort_IT+0x3b0>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d068      	beq.n	8004ab2 <HAL_DMA_Abort_IT+0x3a2>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a37      	ldr	r2, [pc, #220]	@ (8004ac4 <HAL_DMA_Abort_IT+0x3b4>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d063      	beq.n	8004ab2 <HAL_DMA_Abort_IT+0x3a2>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a36      	ldr	r2, [pc, #216]	@ (8004ac8 <HAL_DMA_Abort_IT+0x3b8>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d05e      	beq.n	8004ab2 <HAL_DMA_Abort_IT+0x3a2>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a34      	ldr	r2, [pc, #208]	@ (8004acc <HAL_DMA_Abort_IT+0x3bc>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d059      	beq.n	8004ab2 <HAL_DMA_Abort_IT+0x3a2>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a33      	ldr	r2, [pc, #204]	@ (8004ad0 <HAL_DMA_Abort_IT+0x3c0>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d054      	beq.n	8004ab2 <HAL_DMA_Abort_IT+0x3a2>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a31      	ldr	r2, [pc, #196]	@ (8004ad4 <HAL_DMA_Abort_IT+0x3c4>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d04f      	beq.n	8004ab2 <HAL_DMA_Abort_IT+0x3a2>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a30      	ldr	r2, [pc, #192]	@ (8004ad8 <HAL_DMA_Abort_IT+0x3c8>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d04a      	beq.n	8004ab2 <HAL_DMA_Abort_IT+0x3a2>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a2e      	ldr	r2, [pc, #184]	@ (8004adc <HAL_DMA_Abort_IT+0x3cc>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d045      	beq.n	8004ab2 <HAL_DMA_Abort_IT+0x3a2>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a2d      	ldr	r2, [pc, #180]	@ (8004ae0 <HAL_DMA_Abort_IT+0x3d0>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d040      	beq.n	8004ab2 <HAL_DMA_Abort_IT+0x3a2>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a2b      	ldr	r2, [pc, #172]	@ (8004ae4 <HAL_DMA_Abort_IT+0x3d4>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d03b      	beq.n	8004ab2 <HAL_DMA_Abort_IT+0x3a2>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a2a      	ldr	r2, [pc, #168]	@ (8004ae8 <HAL_DMA_Abort_IT+0x3d8>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d036      	beq.n	8004ab2 <HAL_DMA_Abort_IT+0x3a2>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a28      	ldr	r2, [pc, #160]	@ (8004aec <HAL_DMA_Abort_IT+0x3dc>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d031      	beq.n	8004ab2 <HAL_DMA_Abort_IT+0x3a2>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a27      	ldr	r2, [pc, #156]	@ (8004af0 <HAL_DMA_Abort_IT+0x3e0>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d02c      	beq.n	8004ab2 <HAL_DMA_Abort_IT+0x3a2>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a25      	ldr	r2, [pc, #148]	@ (8004af4 <HAL_DMA_Abort_IT+0x3e4>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d027      	beq.n	8004ab2 <HAL_DMA_Abort_IT+0x3a2>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a24      	ldr	r2, [pc, #144]	@ (8004af8 <HAL_DMA_Abort_IT+0x3e8>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d022      	beq.n	8004ab2 <HAL_DMA_Abort_IT+0x3a2>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a22      	ldr	r2, [pc, #136]	@ (8004afc <HAL_DMA_Abort_IT+0x3ec>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d01d      	beq.n	8004ab2 <HAL_DMA_Abort_IT+0x3a2>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a21      	ldr	r2, [pc, #132]	@ (8004b00 <HAL_DMA_Abort_IT+0x3f0>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d018      	beq.n	8004ab2 <HAL_DMA_Abort_IT+0x3a2>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a1f      	ldr	r2, [pc, #124]	@ (8004b04 <HAL_DMA_Abort_IT+0x3f4>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d013      	beq.n	8004ab2 <HAL_DMA_Abort_IT+0x3a2>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a1e      	ldr	r2, [pc, #120]	@ (8004b08 <HAL_DMA_Abort_IT+0x3f8>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d00e      	beq.n	8004ab2 <HAL_DMA_Abort_IT+0x3a2>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a1c      	ldr	r2, [pc, #112]	@ (8004b0c <HAL_DMA_Abort_IT+0x3fc>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d009      	beq.n	8004ab2 <HAL_DMA_Abort_IT+0x3a2>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a1b      	ldr	r2, [pc, #108]	@ (8004b10 <HAL_DMA_Abort_IT+0x400>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d004      	beq.n	8004ab2 <HAL_DMA_Abort_IT+0x3a2>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a19      	ldr	r2, [pc, #100]	@ (8004b14 <HAL_DMA_Abort_IT+0x404>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d132      	bne.n	8004b18 <HAL_DMA_Abort_IT+0x408>
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e031      	b.n	8004b1a <HAL_DMA_Abort_IT+0x40a>
 8004ab6:	bf00      	nop
 8004ab8:	40020010 	.word	0x40020010
 8004abc:	40020028 	.word	0x40020028
 8004ac0:	40020040 	.word	0x40020040
 8004ac4:	40020058 	.word	0x40020058
 8004ac8:	40020070 	.word	0x40020070
 8004acc:	40020088 	.word	0x40020088
 8004ad0:	400200a0 	.word	0x400200a0
 8004ad4:	400200b8 	.word	0x400200b8
 8004ad8:	40020410 	.word	0x40020410
 8004adc:	40020428 	.word	0x40020428
 8004ae0:	40020440 	.word	0x40020440
 8004ae4:	40020458 	.word	0x40020458
 8004ae8:	40020470 	.word	0x40020470
 8004aec:	40020488 	.word	0x40020488
 8004af0:	400204a0 	.word	0x400204a0
 8004af4:	400204b8 	.word	0x400204b8
 8004af8:	58025408 	.word	0x58025408
 8004afc:	5802541c 	.word	0x5802541c
 8004b00:	58025430 	.word	0x58025430
 8004b04:	58025444 	.word	0x58025444
 8004b08:	58025458 	.word	0x58025458
 8004b0c:	5802546c 	.word	0x5802546c
 8004b10:	58025480 	.word	0x58025480
 8004b14:	58025494 	.word	0x58025494
 8004b18:	2300      	movs	r3, #0
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d028      	beq.n	8004b70 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b2c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b32:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b38:	f003 031f 	and.w	r3, r3, #31
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	409a      	lsls	r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004b4c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d00c      	beq.n	8004b70 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b60:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b64:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004b6e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d003      	beq.n	8004b90 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004b90:	2300      	movs	r3, #0
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3710      	adds	r7, #16
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop

08004b9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b089      	sub	sp, #36	@ 0x24
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004baa:	4b89      	ldr	r3, [pc, #548]	@ (8004dd0 <HAL_GPIO_Init+0x234>)
 8004bac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004bae:	e194      	b.n	8004eda <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	2101      	movs	r1, #1
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	f000 8186 	beq.w	8004ed4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	f003 0303 	and.w	r3, r3, #3
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d005      	beq.n	8004be0 <HAL_GPIO_Init+0x44>
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	f003 0303 	and.w	r3, r3, #3
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d130      	bne.n	8004c42 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	005b      	lsls	r3, r3, #1
 8004bea:	2203      	movs	r2, #3
 8004bec:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf0:	43db      	mvns	r3, r3
 8004bf2:	69ba      	ldr	r2, [r7, #24]
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	68da      	ldr	r2, [r3, #12]
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	005b      	lsls	r3, r3, #1
 8004c00:	fa02 f303 	lsl.w	r3, r2, r3
 8004c04:	69ba      	ldr	r2, [r7, #24]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	69ba      	ldr	r2, [r7, #24]
 8004c0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004c16:	2201      	movs	r2, #1
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c1e:	43db      	mvns	r3, r3
 8004c20:	69ba      	ldr	r2, [r7, #24]
 8004c22:	4013      	ands	r3, r2
 8004c24:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	091b      	lsrs	r3, r3, #4
 8004c2c:	f003 0201 	and.w	r2, r3, #1
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	fa02 f303 	lsl.w	r3, r2, r3
 8004c36:	69ba      	ldr	r2, [r7, #24]
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	69ba      	ldr	r2, [r7, #24]
 8004c40:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	f003 0303 	and.w	r3, r3, #3
 8004c4a:	2b03      	cmp	r3, #3
 8004c4c:	d017      	beq.n	8004c7e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	005b      	lsls	r3, r3, #1
 8004c58:	2203      	movs	r2, #3
 8004c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c5e:	43db      	mvns	r3, r3
 8004c60:	69ba      	ldr	r2, [r7, #24]
 8004c62:	4013      	ands	r3, r2
 8004c64:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	689a      	ldr	r2, [r3, #8]
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	005b      	lsls	r3, r3, #1
 8004c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c72:	69ba      	ldr	r2, [r7, #24]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	69ba      	ldr	r2, [r7, #24]
 8004c7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	f003 0303 	and.w	r3, r3, #3
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d123      	bne.n	8004cd2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	08da      	lsrs	r2, r3, #3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	3208      	adds	r2, #8
 8004c92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	f003 0307 	and.w	r3, r3, #7
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	220f      	movs	r2, #15
 8004ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca6:	43db      	mvns	r3, r3
 8004ca8:	69ba      	ldr	r2, [r7, #24]
 8004caa:	4013      	ands	r3, r2
 8004cac:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	691a      	ldr	r2, [r3, #16]
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	f003 0307 	and.w	r3, r3, #7
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	fa02 f303 	lsl.w	r3, r2, r3
 8004cbe:	69ba      	ldr	r2, [r7, #24]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	08da      	lsrs	r2, r3, #3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	3208      	adds	r2, #8
 8004ccc:	69b9      	ldr	r1, [r7, #24]
 8004cce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	005b      	lsls	r3, r3, #1
 8004cdc:	2203      	movs	r2, #3
 8004cde:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce2:	43db      	mvns	r3, r3
 8004ce4:	69ba      	ldr	r2, [r7, #24]
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f003 0203 	and.w	r2, r3, #3
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	005b      	lsls	r3, r3, #1
 8004cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cfa:	69ba      	ldr	r2, [r7, #24]
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	69ba      	ldr	r2, [r7, #24]
 8004d04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	f000 80e0 	beq.w	8004ed4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d14:	4b2f      	ldr	r3, [pc, #188]	@ (8004dd4 <HAL_GPIO_Init+0x238>)
 8004d16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004d1a:	4a2e      	ldr	r2, [pc, #184]	@ (8004dd4 <HAL_GPIO_Init+0x238>)
 8004d1c:	f043 0302 	orr.w	r3, r3, #2
 8004d20:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004d24:	4b2b      	ldr	r3, [pc, #172]	@ (8004dd4 <HAL_GPIO_Init+0x238>)
 8004d26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004d2a:	f003 0302 	and.w	r3, r3, #2
 8004d2e:	60fb      	str	r3, [r7, #12]
 8004d30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d32:	4a29      	ldr	r2, [pc, #164]	@ (8004dd8 <HAL_GPIO_Init+0x23c>)
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	089b      	lsrs	r3, r3, #2
 8004d38:	3302      	adds	r3, #2
 8004d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	f003 0303 	and.w	r3, r3, #3
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	220f      	movs	r2, #15
 8004d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4e:	43db      	mvns	r3, r3
 8004d50:	69ba      	ldr	r2, [r7, #24]
 8004d52:	4013      	ands	r3, r2
 8004d54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a20      	ldr	r2, [pc, #128]	@ (8004ddc <HAL_GPIO_Init+0x240>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d052      	beq.n	8004e04 <HAL_GPIO_Init+0x268>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a1f      	ldr	r2, [pc, #124]	@ (8004de0 <HAL_GPIO_Init+0x244>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d031      	beq.n	8004dca <HAL_GPIO_Init+0x22e>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a1e      	ldr	r2, [pc, #120]	@ (8004de4 <HAL_GPIO_Init+0x248>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d02b      	beq.n	8004dc6 <HAL_GPIO_Init+0x22a>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a1d      	ldr	r2, [pc, #116]	@ (8004de8 <HAL_GPIO_Init+0x24c>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d025      	beq.n	8004dc2 <HAL_GPIO_Init+0x226>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a1c      	ldr	r2, [pc, #112]	@ (8004dec <HAL_GPIO_Init+0x250>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d01f      	beq.n	8004dbe <HAL_GPIO_Init+0x222>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a1b      	ldr	r2, [pc, #108]	@ (8004df0 <HAL_GPIO_Init+0x254>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d019      	beq.n	8004dba <HAL_GPIO_Init+0x21e>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a1a      	ldr	r2, [pc, #104]	@ (8004df4 <HAL_GPIO_Init+0x258>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d013      	beq.n	8004db6 <HAL_GPIO_Init+0x21a>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a19      	ldr	r2, [pc, #100]	@ (8004df8 <HAL_GPIO_Init+0x25c>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d00d      	beq.n	8004db2 <HAL_GPIO_Init+0x216>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a18      	ldr	r2, [pc, #96]	@ (8004dfc <HAL_GPIO_Init+0x260>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d007      	beq.n	8004dae <HAL_GPIO_Init+0x212>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a17      	ldr	r2, [pc, #92]	@ (8004e00 <HAL_GPIO_Init+0x264>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d101      	bne.n	8004daa <HAL_GPIO_Init+0x20e>
 8004da6:	2309      	movs	r3, #9
 8004da8:	e02d      	b.n	8004e06 <HAL_GPIO_Init+0x26a>
 8004daa:	230a      	movs	r3, #10
 8004dac:	e02b      	b.n	8004e06 <HAL_GPIO_Init+0x26a>
 8004dae:	2308      	movs	r3, #8
 8004db0:	e029      	b.n	8004e06 <HAL_GPIO_Init+0x26a>
 8004db2:	2307      	movs	r3, #7
 8004db4:	e027      	b.n	8004e06 <HAL_GPIO_Init+0x26a>
 8004db6:	2306      	movs	r3, #6
 8004db8:	e025      	b.n	8004e06 <HAL_GPIO_Init+0x26a>
 8004dba:	2305      	movs	r3, #5
 8004dbc:	e023      	b.n	8004e06 <HAL_GPIO_Init+0x26a>
 8004dbe:	2304      	movs	r3, #4
 8004dc0:	e021      	b.n	8004e06 <HAL_GPIO_Init+0x26a>
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	e01f      	b.n	8004e06 <HAL_GPIO_Init+0x26a>
 8004dc6:	2302      	movs	r3, #2
 8004dc8:	e01d      	b.n	8004e06 <HAL_GPIO_Init+0x26a>
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e01b      	b.n	8004e06 <HAL_GPIO_Init+0x26a>
 8004dce:	bf00      	nop
 8004dd0:	58000080 	.word	0x58000080
 8004dd4:	58024400 	.word	0x58024400
 8004dd8:	58000400 	.word	0x58000400
 8004ddc:	58020000 	.word	0x58020000
 8004de0:	58020400 	.word	0x58020400
 8004de4:	58020800 	.word	0x58020800
 8004de8:	58020c00 	.word	0x58020c00
 8004dec:	58021000 	.word	0x58021000
 8004df0:	58021400 	.word	0x58021400
 8004df4:	58021800 	.word	0x58021800
 8004df8:	58021c00 	.word	0x58021c00
 8004dfc:	58022000 	.word	0x58022000
 8004e00:	58022400 	.word	0x58022400
 8004e04:	2300      	movs	r3, #0
 8004e06:	69fa      	ldr	r2, [r7, #28]
 8004e08:	f002 0203 	and.w	r2, r2, #3
 8004e0c:	0092      	lsls	r2, r2, #2
 8004e0e:	4093      	lsls	r3, r2
 8004e10:	69ba      	ldr	r2, [r7, #24]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e16:	4938      	ldr	r1, [pc, #224]	@ (8004ef8 <HAL_GPIO_Init+0x35c>)
 8004e18:	69fb      	ldr	r3, [r7, #28]
 8004e1a:	089b      	lsrs	r3, r3, #2
 8004e1c:	3302      	adds	r3, #2
 8004e1e:	69ba      	ldr	r2, [r7, #24]
 8004e20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004e24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	43db      	mvns	r3, r3
 8004e30:	69ba      	ldr	r2, [r7, #24]
 8004e32:	4013      	ands	r3, r2
 8004e34:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d003      	beq.n	8004e4a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004e42:	69ba      	ldr	r2, [r7, #24]
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004e4a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004e52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	43db      	mvns	r3, r3
 8004e5e:	69ba      	ldr	r2, [r7, #24]
 8004e60:	4013      	ands	r3, r2
 8004e62:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d003      	beq.n	8004e78 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004e70:	69ba      	ldr	r2, [r7, #24]
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004e78:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	43db      	mvns	r3, r3
 8004e8a:	69ba      	ldr	r2, [r7, #24]
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d003      	beq.n	8004ea4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004e9c:	69ba      	ldr	r2, [r7, #24]
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	69ba      	ldr	r2, [r7, #24]
 8004ea8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	43db      	mvns	r3, r3
 8004eb4:	69ba      	ldr	r2, [r7, #24]
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d003      	beq.n	8004ece <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004ec6:	69ba      	ldr	r2, [r7, #24]
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	69ba      	ldr	r2, [r7, #24]
 8004ed2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	f47f ae63 	bne.w	8004bb0 <HAL_GPIO_Init+0x14>
  }
}
 8004eea:	bf00      	nop
 8004eec:	bf00      	nop
 8004eee:	3724      	adds	r7, #36	@ 0x24
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr
 8004ef8:	58000400 	.word	0x58000400

08004efc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	460b      	mov	r3, r1
 8004f06:	807b      	strh	r3, [r7, #2]
 8004f08:	4613      	mov	r3, r2
 8004f0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004f0c:	787b      	ldrb	r3, [r7, #1]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d003      	beq.n	8004f1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f12:	887a      	ldrh	r2, [r7, #2]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004f18:	e003      	b.n	8004f22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004f1a:	887b      	ldrh	r3, [r7, #2]
 8004f1c:	041a      	lsls	r2, r3, #16
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	619a      	str	r2, [r3, #24]
}
 8004f22:	bf00      	nop
 8004f24:	370c      	adds	r7, #12
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr

08004f2e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004f2e:	b480      	push	{r7}
 8004f30:	b085      	sub	sp, #20
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
 8004f36:	460b      	mov	r3, r1
 8004f38:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	695b      	ldr	r3, [r3, #20]
 8004f3e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004f40:	887a      	ldrh	r2, [r7, #2]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	4013      	ands	r3, r2
 8004f46:	041a      	lsls	r2, r3, #16
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	43d9      	mvns	r1, r3
 8004f4c:	887b      	ldrh	r3, [r7, #2]
 8004f4e:	400b      	ands	r3, r1
 8004f50:	431a      	orrs	r2, r3
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	619a      	str	r2, [r3, #24]
}
 8004f56:	bf00      	nop
 8004f58:	3714      	adds	r7, #20
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
	...

08004f64 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004f6c:	4b19      	ldr	r3, [pc, #100]	@ (8004fd4 <HAL_PWREx_ConfigSupply+0x70>)
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	f003 0304 	and.w	r3, r3, #4
 8004f74:	2b04      	cmp	r3, #4
 8004f76:	d00a      	beq.n	8004f8e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004f78:	4b16      	ldr	r3, [pc, #88]	@ (8004fd4 <HAL_PWREx_ConfigSupply+0x70>)
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	f003 0307 	and.w	r3, r3, #7
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d001      	beq.n	8004f8a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e01f      	b.n	8004fca <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	e01d      	b.n	8004fca <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004f8e:	4b11      	ldr	r3, [pc, #68]	@ (8004fd4 <HAL_PWREx_ConfigSupply+0x70>)
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	f023 0207 	bic.w	r2, r3, #7
 8004f96:	490f      	ldr	r1, [pc, #60]	@ (8004fd4 <HAL_PWREx_ConfigSupply+0x70>)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004f9e:	f7fe ff01 	bl	8003da4 <HAL_GetTick>
 8004fa2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004fa4:	e009      	b.n	8004fba <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004fa6:	f7fe fefd 	bl	8003da4 <HAL_GetTick>
 8004faa:	4602      	mov	r2, r0
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004fb4:	d901      	bls.n	8004fba <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e007      	b.n	8004fca <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004fba:	4b06      	ldr	r3, [pc, #24]	@ (8004fd4 <HAL_PWREx_ConfigSupply+0x70>)
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004fc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004fc6:	d1ee      	bne.n	8004fa6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004fc8:	2300      	movs	r3, #0
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3710      	adds	r7, #16
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
 8004fd2:	bf00      	nop
 8004fd4:	58024800 	.word	0x58024800

08004fd8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b08c      	sub	sp, #48	@ 0x30
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d102      	bne.n	8004fec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	f000 bc48 	b.w	800587c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0301 	and.w	r3, r3, #1
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	f000 8088 	beq.w	800510a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ffa:	4b99      	ldr	r3, [pc, #612]	@ (8005260 <HAL_RCC_OscConfig+0x288>)
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005002:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005004:	4b96      	ldr	r3, [pc, #600]	@ (8005260 <HAL_RCC_OscConfig+0x288>)
 8005006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005008:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800500a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800500c:	2b10      	cmp	r3, #16
 800500e:	d007      	beq.n	8005020 <HAL_RCC_OscConfig+0x48>
 8005010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005012:	2b18      	cmp	r3, #24
 8005014:	d111      	bne.n	800503a <HAL_RCC_OscConfig+0x62>
 8005016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005018:	f003 0303 	and.w	r3, r3, #3
 800501c:	2b02      	cmp	r3, #2
 800501e:	d10c      	bne.n	800503a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005020:	4b8f      	ldr	r3, [pc, #572]	@ (8005260 <HAL_RCC_OscConfig+0x288>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005028:	2b00      	cmp	r3, #0
 800502a:	d06d      	beq.n	8005108 <HAL_RCC_OscConfig+0x130>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d169      	bne.n	8005108 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	f000 bc21 	b.w	800587c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005042:	d106      	bne.n	8005052 <HAL_RCC_OscConfig+0x7a>
 8005044:	4b86      	ldr	r3, [pc, #536]	@ (8005260 <HAL_RCC_OscConfig+0x288>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a85      	ldr	r2, [pc, #532]	@ (8005260 <HAL_RCC_OscConfig+0x288>)
 800504a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800504e:	6013      	str	r3, [r2, #0]
 8005050:	e02e      	b.n	80050b0 <HAL_RCC_OscConfig+0xd8>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d10c      	bne.n	8005074 <HAL_RCC_OscConfig+0x9c>
 800505a:	4b81      	ldr	r3, [pc, #516]	@ (8005260 <HAL_RCC_OscConfig+0x288>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a80      	ldr	r2, [pc, #512]	@ (8005260 <HAL_RCC_OscConfig+0x288>)
 8005060:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005064:	6013      	str	r3, [r2, #0]
 8005066:	4b7e      	ldr	r3, [pc, #504]	@ (8005260 <HAL_RCC_OscConfig+0x288>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a7d      	ldr	r2, [pc, #500]	@ (8005260 <HAL_RCC_OscConfig+0x288>)
 800506c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005070:	6013      	str	r3, [r2, #0]
 8005072:	e01d      	b.n	80050b0 <HAL_RCC_OscConfig+0xd8>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800507c:	d10c      	bne.n	8005098 <HAL_RCC_OscConfig+0xc0>
 800507e:	4b78      	ldr	r3, [pc, #480]	@ (8005260 <HAL_RCC_OscConfig+0x288>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a77      	ldr	r2, [pc, #476]	@ (8005260 <HAL_RCC_OscConfig+0x288>)
 8005084:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005088:	6013      	str	r3, [r2, #0]
 800508a:	4b75      	ldr	r3, [pc, #468]	@ (8005260 <HAL_RCC_OscConfig+0x288>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a74      	ldr	r2, [pc, #464]	@ (8005260 <HAL_RCC_OscConfig+0x288>)
 8005090:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005094:	6013      	str	r3, [r2, #0]
 8005096:	e00b      	b.n	80050b0 <HAL_RCC_OscConfig+0xd8>
 8005098:	4b71      	ldr	r3, [pc, #452]	@ (8005260 <HAL_RCC_OscConfig+0x288>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a70      	ldr	r2, [pc, #448]	@ (8005260 <HAL_RCC_OscConfig+0x288>)
 800509e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050a2:	6013      	str	r3, [r2, #0]
 80050a4:	4b6e      	ldr	r3, [pc, #440]	@ (8005260 <HAL_RCC_OscConfig+0x288>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a6d      	ldr	r2, [pc, #436]	@ (8005260 <HAL_RCC_OscConfig+0x288>)
 80050aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80050ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d013      	beq.n	80050e0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050b8:	f7fe fe74 	bl	8003da4 <HAL_GetTick>
 80050bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80050be:	e008      	b.n	80050d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050c0:	f7fe fe70 	bl	8003da4 <HAL_GetTick>
 80050c4:	4602      	mov	r2, r0
 80050c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	2b64      	cmp	r3, #100	@ 0x64
 80050cc:	d901      	bls.n	80050d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e3d4      	b.n	800587c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80050d2:	4b63      	ldr	r3, [pc, #396]	@ (8005260 <HAL_RCC_OscConfig+0x288>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d0f0      	beq.n	80050c0 <HAL_RCC_OscConfig+0xe8>
 80050de:	e014      	b.n	800510a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050e0:	f7fe fe60 	bl	8003da4 <HAL_GetTick>
 80050e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80050e6:	e008      	b.n	80050fa <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050e8:	f7fe fe5c 	bl	8003da4 <HAL_GetTick>
 80050ec:	4602      	mov	r2, r0
 80050ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	2b64      	cmp	r3, #100	@ 0x64
 80050f4:	d901      	bls.n	80050fa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e3c0      	b.n	800587c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80050fa:	4b59      	ldr	r3, [pc, #356]	@ (8005260 <HAL_RCC_OscConfig+0x288>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005102:	2b00      	cmp	r3, #0
 8005104:	d1f0      	bne.n	80050e8 <HAL_RCC_OscConfig+0x110>
 8005106:	e000      	b.n	800510a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005108:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0302 	and.w	r3, r3, #2
 8005112:	2b00      	cmp	r3, #0
 8005114:	f000 80ca 	beq.w	80052ac <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005118:	4b51      	ldr	r3, [pc, #324]	@ (8005260 <HAL_RCC_OscConfig+0x288>)
 800511a:	691b      	ldr	r3, [r3, #16]
 800511c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005120:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005122:	4b4f      	ldr	r3, [pc, #316]	@ (8005260 <HAL_RCC_OscConfig+0x288>)
 8005124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005126:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005128:	6a3b      	ldr	r3, [r7, #32]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d007      	beq.n	800513e <HAL_RCC_OscConfig+0x166>
 800512e:	6a3b      	ldr	r3, [r7, #32]
 8005130:	2b18      	cmp	r3, #24
 8005132:	d156      	bne.n	80051e2 <HAL_RCC_OscConfig+0x20a>
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	f003 0303 	and.w	r3, r3, #3
 800513a:	2b00      	cmp	r3, #0
 800513c:	d151      	bne.n	80051e2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800513e:	4b48      	ldr	r3, [pc, #288]	@ (8005260 <HAL_RCC_OscConfig+0x288>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 0304 	and.w	r3, r3, #4
 8005146:	2b00      	cmp	r3, #0
 8005148:	d005      	beq.n	8005156 <HAL_RCC_OscConfig+0x17e>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	68db      	ldr	r3, [r3, #12]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d101      	bne.n	8005156 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e392      	b.n	800587c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005156:	4b42      	ldr	r3, [pc, #264]	@ (8005260 <HAL_RCC_OscConfig+0x288>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f023 0219 	bic.w	r2, r3, #25
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	493f      	ldr	r1, [pc, #252]	@ (8005260 <HAL_RCC_OscConfig+0x288>)
 8005164:	4313      	orrs	r3, r2
 8005166:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005168:	f7fe fe1c 	bl	8003da4 <HAL_GetTick>
 800516c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800516e:	e008      	b.n	8005182 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005170:	f7fe fe18 	bl	8003da4 <HAL_GetTick>
 8005174:	4602      	mov	r2, r0
 8005176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	2b02      	cmp	r3, #2
 800517c:	d901      	bls.n	8005182 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800517e:	2303      	movs	r3, #3
 8005180:	e37c      	b.n	800587c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005182:	4b37      	ldr	r3, [pc, #220]	@ (8005260 <HAL_RCC_OscConfig+0x288>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 0304 	and.w	r3, r3, #4
 800518a:	2b00      	cmp	r3, #0
 800518c:	d0f0      	beq.n	8005170 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800518e:	f7fe fe39 	bl	8003e04 <HAL_GetREVID>
 8005192:	4603      	mov	r3, r0
 8005194:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005198:	4293      	cmp	r3, r2
 800519a:	d817      	bhi.n	80051cc <HAL_RCC_OscConfig+0x1f4>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	691b      	ldr	r3, [r3, #16]
 80051a0:	2b40      	cmp	r3, #64	@ 0x40
 80051a2:	d108      	bne.n	80051b6 <HAL_RCC_OscConfig+0x1de>
 80051a4:	4b2e      	ldr	r3, [pc, #184]	@ (8005260 <HAL_RCC_OscConfig+0x288>)
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80051ac:	4a2c      	ldr	r2, [pc, #176]	@ (8005260 <HAL_RCC_OscConfig+0x288>)
 80051ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051b2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051b4:	e07a      	b.n	80052ac <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051b6:	4b2a      	ldr	r3, [pc, #168]	@ (8005260 <HAL_RCC_OscConfig+0x288>)
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	031b      	lsls	r3, r3, #12
 80051c4:	4926      	ldr	r1, [pc, #152]	@ (8005260 <HAL_RCC_OscConfig+0x288>)
 80051c6:	4313      	orrs	r3, r2
 80051c8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051ca:	e06f      	b.n	80052ac <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051cc:	4b24      	ldr	r3, [pc, #144]	@ (8005260 <HAL_RCC_OscConfig+0x288>)
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	061b      	lsls	r3, r3, #24
 80051da:	4921      	ldr	r1, [pc, #132]	@ (8005260 <HAL_RCC_OscConfig+0x288>)
 80051dc:	4313      	orrs	r3, r2
 80051de:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051e0:	e064      	b.n	80052ac <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d047      	beq.n	800527a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80051ea:	4b1d      	ldr	r3, [pc, #116]	@ (8005260 <HAL_RCC_OscConfig+0x288>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f023 0219 	bic.w	r2, r3, #25
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	491a      	ldr	r1, [pc, #104]	@ (8005260 <HAL_RCC_OscConfig+0x288>)
 80051f8:	4313      	orrs	r3, r2
 80051fa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051fc:	f7fe fdd2 	bl	8003da4 <HAL_GetTick>
 8005200:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005202:	e008      	b.n	8005216 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005204:	f7fe fdce 	bl	8003da4 <HAL_GetTick>
 8005208:	4602      	mov	r2, r0
 800520a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	2b02      	cmp	r3, #2
 8005210:	d901      	bls.n	8005216 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005212:	2303      	movs	r3, #3
 8005214:	e332      	b.n	800587c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005216:	4b12      	ldr	r3, [pc, #72]	@ (8005260 <HAL_RCC_OscConfig+0x288>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 0304 	and.w	r3, r3, #4
 800521e:	2b00      	cmp	r3, #0
 8005220:	d0f0      	beq.n	8005204 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005222:	f7fe fdef 	bl	8003e04 <HAL_GetREVID>
 8005226:	4603      	mov	r3, r0
 8005228:	f241 0203 	movw	r2, #4099	@ 0x1003
 800522c:	4293      	cmp	r3, r2
 800522e:	d819      	bhi.n	8005264 <HAL_RCC_OscConfig+0x28c>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	691b      	ldr	r3, [r3, #16]
 8005234:	2b40      	cmp	r3, #64	@ 0x40
 8005236:	d108      	bne.n	800524a <HAL_RCC_OscConfig+0x272>
 8005238:	4b09      	ldr	r3, [pc, #36]	@ (8005260 <HAL_RCC_OscConfig+0x288>)
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005240:	4a07      	ldr	r2, [pc, #28]	@ (8005260 <HAL_RCC_OscConfig+0x288>)
 8005242:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005246:	6053      	str	r3, [r2, #4]
 8005248:	e030      	b.n	80052ac <HAL_RCC_OscConfig+0x2d4>
 800524a:	4b05      	ldr	r3, [pc, #20]	@ (8005260 <HAL_RCC_OscConfig+0x288>)
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	031b      	lsls	r3, r3, #12
 8005258:	4901      	ldr	r1, [pc, #4]	@ (8005260 <HAL_RCC_OscConfig+0x288>)
 800525a:	4313      	orrs	r3, r2
 800525c:	604b      	str	r3, [r1, #4]
 800525e:	e025      	b.n	80052ac <HAL_RCC_OscConfig+0x2d4>
 8005260:	58024400 	.word	0x58024400
 8005264:	4b9a      	ldr	r3, [pc, #616]	@ (80054d0 <HAL_RCC_OscConfig+0x4f8>)
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	691b      	ldr	r3, [r3, #16]
 8005270:	061b      	lsls	r3, r3, #24
 8005272:	4997      	ldr	r1, [pc, #604]	@ (80054d0 <HAL_RCC_OscConfig+0x4f8>)
 8005274:	4313      	orrs	r3, r2
 8005276:	604b      	str	r3, [r1, #4]
 8005278:	e018      	b.n	80052ac <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800527a:	4b95      	ldr	r3, [pc, #596]	@ (80054d0 <HAL_RCC_OscConfig+0x4f8>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a94      	ldr	r2, [pc, #592]	@ (80054d0 <HAL_RCC_OscConfig+0x4f8>)
 8005280:	f023 0301 	bic.w	r3, r3, #1
 8005284:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005286:	f7fe fd8d 	bl	8003da4 <HAL_GetTick>
 800528a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800528c:	e008      	b.n	80052a0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800528e:	f7fe fd89 	bl	8003da4 <HAL_GetTick>
 8005292:	4602      	mov	r2, r0
 8005294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	2b02      	cmp	r3, #2
 800529a:	d901      	bls.n	80052a0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800529c:	2303      	movs	r3, #3
 800529e:	e2ed      	b.n	800587c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80052a0:	4b8b      	ldr	r3, [pc, #556]	@ (80054d0 <HAL_RCC_OscConfig+0x4f8>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 0304 	and.w	r3, r3, #4
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d1f0      	bne.n	800528e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 0310 	and.w	r3, r3, #16
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	f000 80a9 	beq.w	800540c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052ba:	4b85      	ldr	r3, [pc, #532]	@ (80054d0 <HAL_RCC_OscConfig+0x4f8>)
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80052c2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80052c4:	4b82      	ldr	r3, [pc, #520]	@ (80054d0 <HAL_RCC_OscConfig+0x4f8>)
 80052c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052c8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	2b08      	cmp	r3, #8
 80052ce:	d007      	beq.n	80052e0 <HAL_RCC_OscConfig+0x308>
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	2b18      	cmp	r3, #24
 80052d4:	d13a      	bne.n	800534c <HAL_RCC_OscConfig+0x374>
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	f003 0303 	and.w	r3, r3, #3
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d135      	bne.n	800534c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80052e0:	4b7b      	ldr	r3, [pc, #492]	@ (80054d0 <HAL_RCC_OscConfig+0x4f8>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d005      	beq.n	80052f8 <HAL_RCC_OscConfig+0x320>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	69db      	ldr	r3, [r3, #28]
 80052f0:	2b80      	cmp	r3, #128	@ 0x80
 80052f2:	d001      	beq.n	80052f8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e2c1      	b.n	800587c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80052f8:	f7fe fd84 	bl	8003e04 <HAL_GetREVID>
 80052fc:	4603      	mov	r3, r0
 80052fe:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005302:	4293      	cmp	r3, r2
 8005304:	d817      	bhi.n	8005336 <HAL_RCC_OscConfig+0x35e>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a1b      	ldr	r3, [r3, #32]
 800530a:	2b20      	cmp	r3, #32
 800530c:	d108      	bne.n	8005320 <HAL_RCC_OscConfig+0x348>
 800530e:	4b70      	ldr	r3, [pc, #448]	@ (80054d0 <HAL_RCC_OscConfig+0x4f8>)
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005316:	4a6e      	ldr	r2, [pc, #440]	@ (80054d0 <HAL_RCC_OscConfig+0x4f8>)
 8005318:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800531c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800531e:	e075      	b.n	800540c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005320:	4b6b      	ldr	r3, [pc, #428]	@ (80054d0 <HAL_RCC_OscConfig+0x4f8>)
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a1b      	ldr	r3, [r3, #32]
 800532c:	069b      	lsls	r3, r3, #26
 800532e:	4968      	ldr	r1, [pc, #416]	@ (80054d0 <HAL_RCC_OscConfig+0x4f8>)
 8005330:	4313      	orrs	r3, r2
 8005332:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005334:	e06a      	b.n	800540c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005336:	4b66      	ldr	r3, [pc, #408]	@ (80054d0 <HAL_RCC_OscConfig+0x4f8>)
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a1b      	ldr	r3, [r3, #32]
 8005342:	061b      	lsls	r3, r3, #24
 8005344:	4962      	ldr	r1, [pc, #392]	@ (80054d0 <HAL_RCC_OscConfig+0x4f8>)
 8005346:	4313      	orrs	r3, r2
 8005348:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800534a:	e05f      	b.n	800540c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	69db      	ldr	r3, [r3, #28]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d042      	beq.n	80053da <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005354:	4b5e      	ldr	r3, [pc, #376]	@ (80054d0 <HAL_RCC_OscConfig+0x4f8>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a5d      	ldr	r2, [pc, #372]	@ (80054d0 <HAL_RCC_OscConfig+0x4f8>)
 800535a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800535e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005360:	f7fe fd20 	bl	8003da4 <HAL_GetTick>
 8005364:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005366:	e008      	b.n	800537a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005368:	f7fe fd1c 	bl	8003da4 <HAL_GetTick>
 800536c:	4602      	mov	r2, r0
 800536e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	2b02      	cmp	r3, #2
 8005374:	d901      	bls.n	800537a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005376:	2303      	movs	r3, #3
 8005378:	e280      	b.n	800587c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800537a:	4b55      	ldr	r3, [pc, #340]	@ (80054d0 <HAL_RCC_OscConfig+0x4f8>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005382:	2b00      	cmp	r3, #0
 8005384:	d0f0      	beq.n	8005368 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005386:	f7fe fd3d 	bl	8003e04 <HAL_GetREVID>
 800538a:	4603      	mov	r3, r0
 800538c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005390:	4293      	cmp	r3, r2
 8005392:	d817      	bhi.n	80053c4 <HAL_RCC_OscConfig+0x3ec>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6a1b      	ldr	r3, [r3, #32]
 8005398:	2b20      	cmp	r3, #32
 800539a:	d108      	bne.n	80053ae <HAL_RCC_OscConfig+0x3d6>
 800539c:	4b4c      	ldr	r3, [pc, #304]	@ (80054d0 <HAL_RCC_OscConfig+0x4f8>)
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80053a4:	4a4a      	ldr	r2, [pc, #296]	@ (80054d0 <HAL_RCC_OscConfig+0x4f8>)
 80053a6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80053aa:	6053      	str	r3, [r2, #4]
 80053ac:	e02e      	b.n	800540c <HAL_RCC_OscConfig+0x434>
 80053ae:	4b48      	ldr	r3, [pc, #288]	@ (80054d0 <HAL_RCC_OscConfig+0x4f8>)
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6a1b      	ldr	r3, [r3, #32]
 80053ba:	069b      	lsls	r3, r3, #26
 80053bc:	4944      	ldr	r1, [pc, #272]	@ (80054d0 <HAL_RCC_OscConfig+0x4f8>)
 80053be:	4313      	orrs	r3, r2
 80053c0:	604b      	str	r3, [r1, #4]
 80053c2:	e023      	b.n	800540c <HAL_RCC_OscConfig+0x434>
 80053c4:	4b42      	ldr	r3, [pc, #264]	@ (80054d0 <HAL_RCC_OscConfig+0x4f8>)
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6a1b      	ldr	r3, [r3, #32]
 80053d0:	061b      	lsls	r3, r3, #24
 80053d2:	493f      	ldr	r1, [pc, #252]	@ (80054d0 <HAL_RCC_OscConfig+0x4f8>)
 80053d4:	4313      	orrs	r3, r2
 80053d6:	60cb      	str	r3, [r1, #12]
 80053d8:	e018      	b.n	800540c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80053da:	4b3d      	ldr	r3, [pc, #244]	@ (80054d0 <HAL_RCC_OscConfig+0x4f8>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a3c      	ldr	r2, [pc, #240]	@ (80054d0 <HAL_RCC_OscConfig+0x4f8>)
 80053e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053e6:	f7fe fcdd 	bl	8003da4 <HAL_GetTick>
 80053ea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80053ec:	e008      	b.n	8005400 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80053ee:	f7fe fcd9 	bl	8003da4 <HAL_GetTick>
 80053f2:	4602      	mov	r2, r0
 80053f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d901      	bls.n	8005400 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80053fc:	2303      	movs	r3, #3
 80053fe:	e23d      	b.n	800587c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005400:	4b33      	ldr	r3, [pc, #204]	@ (80054d0 <HAL_RCC_OscConfig+0x4f8>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005408:	2b00      	cmp	r3, #0
 800540a:	d1f0      	bne.n	80053ee <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0308 	and.w	r3, r3, #8
 8005414:	2b00      	cmp	r3, #0
 8005416:	d036      	beq.n	8005486 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	695b      	ldr	r3, [r3, #20]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d019      	beq.n	8005454 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005420:	4b2b      	ldr	r3, [pc, #172]	@ (80054d0 <HAL_RCC_OscConfig+0x4f8>)
 8005422:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005424:	4a2a      	ldr	r2, [pc, #168]	@ (80054d0 <HAL_RCC_OscConfig+0x4f8>)
 8005426:	f043 0301 	orr.w	r3, r3, #1
 800542a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800542c:	f7fe fcba 	bl	8003da4 <HAL_GetTick>
 8005430:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005432:	e008      	b.n	8005446 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005434:	f7fe fcb6 	bl	8003da4 <HAL_GetTick>
 8005438:	4602      	mov	r2, r0
 800543a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800543c:	1ad3      	subs	r3, r2, r3
 800543e:	2b02      	cmp	r3, #2
 8005440:	d901      	bls.n	8005446 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005442:	2303      	movs	r3, #3
 8005444:	e21a      	b.n	800587c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005446:	4b22      	ldr	r3, [pc, #136]	@ (80054d0 <HAL_RCC_OscConfig+0x4f8>)
 8005448:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800544a:	f003 0302 	and.w	r3, r3, #2
 800544e:	2b00      	cmp	r3, #0
 8005450:	d0f0      	beq.n	8005434 <HAL_RCC_OscConfig+0x45c>
 8005452:	e018      	b.n	8005486 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005454:	4b1e      	ldr	r3, [pc, #120]	@ (80054d0 <HAL_RCC_OscConfig+0x4f8>)
 8005456:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005458:	4a1d      	ldr	r2, [pc, #116]	@ (80054d0 <HAL_RCC_OscConfig+0x4f8>)
 800545a:	f023 0301 	bic.w	r3, r3, #1
 800545e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005460:	f7fe fca0 	bl	8003da4 <HAL_GetTick>
 8005464:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005466:	e008      	b.n	800547a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005468:	f7fe fc9c 	bl	8003da4 <HAL_GetTick>
 800546c:	4602      	mov	r2, r0
 800546e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	2b02      	cmp	r3, #2
 8005474:	d901      	bls.n	800547a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005476:	2303      	movs	r3, #3
 8005478:	e200      	b.n	800587c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800547a:	4b15      	ldr	r3, [pc, #84]	@ (80054d0 <HAL_RCC_OscConfig+0x4f8>)
 800547c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800547e:	f003 0302 	and.w	r3, r3, #2
 8005482:	2b00      	cmp	r3, #0
 8005484:	d1f0      	bne.n	8005468 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 0320 	and.w	r3, r3, #32
 800548e:	2b00      	cmp	r3, #0
 8005490:	d039      	beq.n	8005506 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	699b      	ldr	r3, [r3, #24]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d01c      	beq.n	80054d4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800549a:	4b0d      	ldr	r3, [pc, #52]	@ (80054d0 <HAL_RCC_OscConfig+0x4f8>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a0c      	ldr	r2, [pc, #48]	@ (80054d0 <HAL_RCC_OscConfig+0x4f8>)
 80054a0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80054a4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80054a6:	f7fe fc7d 	bl	8003da4 <HAL_GetTick>
 80054aa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80054ac:	e008      	b.n	80054c0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80054ae:	f7fe fc79 	bl	8003da4 <HAL_GetTick>
 80054b2:	4602      	mov	r2, r0
 80054b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b6:	1ad3      	subs	r3, r2, r3
 80054b8:	2b02      	cmp	r3, #2
 80054ba:	d901      	bls.n	80054c0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80054bc:	2303      	movs	r3, #3
 80054be:	e1dd      	b.n	800587c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80054c0:	4b03      	ldr	r3, [pc, #12]	@ (80054d0 <HAL_RCC_OscConfig+0x4f8>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d0f0      	beq.n	80054ae <HAL_RCC_OscConfig+0x4d6>
 80054cc:	e01b      	b.n	8005506 <HAL_RCC_OscConfig+0x52e>
 80054ce:	bf00      	nop
 80054d0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80054d4:	4b9b      	ldr	r3, [pc, #620]	@ (8005744 <HAL_RCC_OscConfig+0x76c>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a9a      	ldr	r2, [pc, #616]	@ (8005744 <HAL_RCC_OscConfig+0x76c>)
 80054da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80054de:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80054e0:	f7fe fc60 	bl	8003da4 <HAL_GetTick>
 80054e4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80054e6:	e008      	b.n	80054fa <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80054e8:	f7fe fc5c 	bl	8003da4 <HAL_GetTick>
 80054ec:	4602      	mov	r2, r0
 80054ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	2b02      	cmp	r3, #2
 80054f4:	d901      	bls.n	80054fa <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80054f6:	2303      	movs	r3, #3
 80054f8:	e1c0      	b.n	800587c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80054fa:	4b92      	ldr	r3, [pc, #584]	@ (8005744 <HAL_RCC_OscConfig+0x76c>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005502:	2b00      	cmp	r3, #0
 8005504:	d1f0      	bne.n	80054e8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 0304 	and.w	r3, r3, #4
 800550e:	2b00      	cmp	r3, #0
 8005510:	f000 8081 	beq.w	8005616 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005514:	4b8c      	ldr	r3, [pc, #560]	@ (8005748 <HAL_RCC_OscConfig+0x770>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a8b      	ldr	r2, [pc, #556]	@ (8005748 <HAL_RCC_OscConfig+0x770>)
 800551a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800551e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005520:	f7fe fc40 	bl	8003da4 <HAL_GetTick>
 8005524:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005526:	e008      	b.n	800553a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005528:	f7fe fc3c 	bl	8003da4 <HAL_GetTick>
 800552c:	4602      	mov	r2, r0
 800552e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	2b64      	cmp	r3, #100	@ 0x64
 8005534:	d901      	bls.n	800553a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e1a0      	b.n	800587c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800553a:	4b83      	ldr	r3, [pc, #524]	@ (8005748 <HAL_RCC_OscConfig+0x770>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005542:	2b00      	cmp	r3, #0
 8005544:	d0f0      	beq.n	8005528 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	2b01      	cmp	r3, #1
 800554c:	d106      	bne.n	800555c <HAL_RCC_OscConfig+0x584>
 800554e:	4b7d      	ldr	r3, [pc, #500]	@ (8005744 <HAL_RCC_OscConfig+0x76c>)
 8005550:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005552:	4a7c      	ldr	r2, [pc, #496]	@ (8005744 <HAL_RCC_OscConfig+0x76c>)
 8005554:	f043 0301 	orr.w	r3, r3, #1
 8005558:	6713      	str	r3, [r2, #112]	@ 0x70
 800555a:	e02d      	b.n	80055b8 <HAL_RCC_OscConfig+0x5e0>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d10c      	bne.n	800557e <HAL_RCC_OscConfig+0x5a6>
 8005564:	4b77      	ldr	r3, [pc, #476]	@ (8005744 <HAL_RCC_OscConfig+0x76c>)
 8005566:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005568:	4a76      	ldr	r2, [pc, #472]	@ (8005744 <HAL_RCC_OscConfig+0x76c>)
 800556a:	f023 0301 	bic.w	r3, r3, #1
 800556e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005570:	4b74      	ldr	r3, [pc, #464]	@ (8005744 <HAL_RCC_OscConfig+0x76c>)
 8005572:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005574:	4a73      	ldr	r2, [pc, #460]	@ (8005744 <HAL_RCC_OscConfig+0x76c>)
 8005576:	f023 0304 	bic.w	r3, r3, #4
 800557a:	6713      	str	r3, [r2, #112]	@ 0x70
 800557c:	e01c      	b.n	80055b8 <HAL_RCC_OscConfig+0x5e0>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	2b05      	cmp	r3, #5
 8005584:	d10c      	bne.n	80055a0 <HAL_RCC_OscConfig+0x5c8>
 8005586:	4b6f      	ldr	r3, [pc, #444]	@ (8005744 <HAL_RCC_OscConfig+0x76c>)
 8005588:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800558a:	4a6e      	ldr	r2, [pc, #440]	@ (8005744 <HAL_RCC_OscConfig+0x76c>)
 800558c:	f043 0304 	orr.w	r3, r3, #4
 8005590:	6713      	str	r3, [r2, #112]	@ 0x70
 8005592:	4b6c      	ldr	r3, [pc, #432]	@ (8005744 <HAL_RCC_OscConfig+0x76c>)
 8005594:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005596:	4a6b      	ldr	r2, [pc, #428]	@ (8005744 <HAL_RCC_OscConfig+0x76c>)
 8005598:	f043 0301 	orr.w	r3, r3, #1
 800559c:	6713      	str	r3, [r2, #112]	@ 0x70
 800559e:	e00b      	b.n	80055b8 <HAL_RCC_OscConfig+0x5e0>
 80055a0:	4b68      	ldr	r3, [pc, #416]	@ (8005744 <HAL_RCC_OscConfig+0x76c>)
 80055a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055a4:	4a67      	ldr	r2, [pc, #412]	@ (8005744 <HAL_RCC_OscConfig+0x76c>)
 80055a6:	f023 0301 	bic.w	r3, r3, #1
 80055aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80055ac:	4b65      	ldr	r3, [pc, #404]	@ (8005744 <HAL_RCC_OscConfig+0x76c>)
 80055ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055b0:	4a64      	ldr	r2, [pc, #400]	@ (8005744 <HAL_RCC_OscConfig+0x76c>)
 80055b2:	f023 0304 	bic.w	r3, r3, #4
 80055b6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d015      	beq.n	80055ec <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055c0:	f7fe fbf0 	bl	8003da4 <HAL_GetTick>
 80055c4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80055c6:	e00a      	b.n	80055de <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055c8:	f7fe fbec 	bl	8003da4 <HAL_GetTick>
 80055cc:	4602      	mov	r2, r0
 80055ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d901      	bls.n	80055de <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80055da:	2303      	movs	r3, #3
 80055dc:	e14e      	b.n	800587c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80055de:	4b59      	ldr	r3, [pc, #356]	@ (8005744 <HAL_RCC_OscConfig+0x76c>)
 80055e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055e2:	f003 0302 	and.w	r3, r3, #2
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d0ee      	beq.n	80055c8 <HAL_RCC_OscConfig+0x5f0>
 80055ea:	e014      	b.n	8005616 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055ec:	f7fe fbda 	bl	8003da4 <HAL_GetTick>
 80055f0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80055f2:	e00a      	b.n	800560a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055f4:	f7fe fbd6 	bl	8003da4 <HAL_GetTick>
 80055f8:	4602      	mov	r2, r0
 80055fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055fc:	1ad3      	subs	r3, r2, r3
 80055fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005602:	4293      	cmp	r3, r2
 8005604:	d901      	bls.n	800560a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	e138      	b.n	800587c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800560a:	4b4e      	ldr	r3, [pc, #312]	@ (8005744 <HAL_RCC_OscConfig+0x76c>)
 800560c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800560e:	f003 0302 	and.w	r3, r3, #2
 8005612:	2b00      	cmp	r3, #0
 8005614:	d1ee      	bne.n	80055f4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800561a:	2b00      	cmp	r3, #0
 800561c:	f000 812d 	beq.w	800587a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005620:	4b48      	ldr	r3, [pc, #288]	@ (8005744 <HAL_RCC_OscConfig+0x76c>)
 8005622:	691b      	ldr	r3, [r3, #16]
 8005624:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005628:	2b18      	cmp	r3, #24
 800562a:	f000 80bd 	beq.w	80057a8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005632:	2b02      	cmp	r3, #2
 8005634:	f040 809e 	bne.w	8005774 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005638:	4b42      	ldr	r3, [pc, #264]	@ (8005744 <HAL_RCC_OscConfig+0x76c>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a41      	ldr	r2, [pc, #260]	@ (8005744 <HAL_RCC_OscConfig+0x76c>)
 800563e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005642:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005644:	f7fe fbae 	bl	8003da4 <HAL_GetTick>
 8005648:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800564a:	e008      	b.n	800565e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800564c:	f7fe fbaa 	bl	8003da4 <HAL_GetTick>
 8005650:	4602      	mov	r2, r0
 8005652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	2b02      	cmp	r3, #2
 8005658:	d901      	bls.n	800565e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800565a:	2303      	movs	r3, #3
 800565c:	e10e      	b.n	800587c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800565e:	4b39      	ldr	r3, [pc, #228]	@ (8005744 <HAL_RCC_OscConfig+0x76c>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005666:	2b00      	cmp	r3, #0
 8005668:	d1f0      	bne.n	800564c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800566a:	4b36      	ldr	r3, [pc, #216]	@ (8005744 <HAL_RCC_OscConfig+0x76c>)
 800566c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800566e:	4b37      	ldr	r3, [pc, #220]	@ (800574c <HAL_RCC_OscConfig+0x774>)
 8005670:	4013      	ands	r3, r2
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800567a:	0112      	lsls	r2, r2, #4
 800567c:	430a      	orrs	r2, r1
 800567e:	4931      	ldr	r1, [pc, #196]	@ (8005744 <HAL_RCC_OscConfig+0x76c>)
 8005680:	4313      	orrs	r3, r2
 8005682:	628b      	str	r3, [r1, #40]	@ 0x28
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005688:	3b01      	subs	r3, #1
 800568a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005692:	3b01      	subs	r3, #1
 8005694:	025b      	lsls	r3, r3, #9
 8005696:	b29b      	uxth	r3, r3
 8005698:	431a      	orrs	r2, r3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800569e:	3b01      	subs	r3, #1
 80056a0:	041b      	lsls	r3, r3, #16
 80056a2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80056a6:	431a      	orrs	r2, r3
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056ac:	3b01      	subs	r3, #1
 80056ae:	061b      	lsls	r3, r3, #24
 80056b0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80056b4:	4923      	ldr	r1, [pc, #140]	@ (8005744 <HAL_RCC_OscConfig+0x76c>)
 80056b6:	4313      	orrs	r3, r2
 80056b8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80056ba:	4b22      	ldr	r3, [pc, #136]	@ (8005744 <HAL_RCC_OscConfig+0x76c>)
 80056bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056be:	4a21      	ldr	r2, [pc, #132]	@ (8005744 <HAL_RCC_OscConfig+0x76c>)
 80056c0:	f023 0301 	bic.w	r3, r3, #1
 80056c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80056c6:	4b1f      	ldr	r3, [pc, #124]	@ (8005744 <HAL_RCC_OscConfig+0x76c>)
 80056c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80056ca:	4b21      	ldr	r3, [pc, #132]	@ (8005750 <HAL_RCC_OscConfig+0x778>)
 80056cc:	4013      	ands	r3, r2
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80056d2:	00d2      	lsls	r2, r2, #3
 80056d4:	491b      	ldr	r1, [pc, #108]	@ (8005744 <HAL_RCC_OscConfig+0x76c>)
 80056d6:	4313      	orrs	r3, r2
 80056d8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80056da:	4b1a      	ldr	r3, [pc, #104]	@ (8005744 <HAL_RCC_OscConfig+0x76c>)
 80056dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056de:	f023 020c 	bic.w	r2, r3, #12
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056e6:	4917      	ldr	r1, [pc, #92]	@ (8005744 <HAL_RCC_OscConfig+0x76c>)
 80056e8:	4313      	orrs	r3, r2
 80056ea:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80056ec:	4b15      	ldr	r3, [pc, #84]	@ (8005744 <HAL_RCC_OscConfig+0x76c>)
 80056ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056f0:	f023 0202 	bic.w	r2, r3, #2
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056f8:	4912      	ldr	r1, [pc, #72]	@ (8005744 <HAL_RCC_OscConfig+0x76c>)
 80056fa:	4313      	orrs	r3, r2
 80056fc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80056fe:	4b11      	ldr	r3, [pc, #68]	@ (8005744 <HAL_RCC_OscConfig+0x76c>)
 8005700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005702:	4a10      	ldr	r2, [pc, #64]	@ (8005744 <HAL_RCC_OscConfig+0x76c>)
 8005704:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005708:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800570a:	4b0e      	ldr	r3, [pc, #56]	@ (8005744 <HAL_RCC_OscConfig+0x76c>)
 800570c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800570e:	4a0d      	ldr	r2, [pc, #52]	@ (8005744 <HAL_RCC_OscConfig+0x76c>)
 8005710:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005714:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005716:	4b0b      	ldr	r3, [pc, #44]	@ (8005744 <HAL_RCC_OscConfig+0x76c>)
 8005718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800571a:	4a0a      	ldr	r2, [pc, #40]	@ (8005744 <HAL_RCC_OscConfig+0x76c>)
 800571c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005720:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005722:	4b08      	ldr	r3, [pc, #32]	@ (8005744 <HAL_RCC_OscConfig+0x76c>)
 8005724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005726:	4a07      	ldr	r2, [pc, #28]	@ (8005744 <HAL_RCC_OscConfig+0x76c>)
 8005728:	f043 0301 	orr.w	r3, r3, #1
 800572c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800572e:	4b05      	ldr	r3, [pc, #20]	@ (8005744 <HAL_RCC_OscConfig+0x76c>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a04      	ldr	r2, [pc, #16]	@ (8005744 <HAL_RCC_OscConfig+0x76c>)
 8005734:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005738:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800573a:	f7fe fb33 	bl	8003da4 <HAL_GetTick>
 800573e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005740:	e011      	b.n	8005766 <HAL_RCC_OscConfig+0x78e>
 8005742:	bf00      	nop
 8005744:	58024400 	.word	0x58024400
 8005748:	58024800 	.word	0x58024800
 800574c:	fffffc0c 	.word	0xfffffc0c
 8005750:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005754:	f7fe fb26 	bl	8003da4 <HAL_GetTick>
 8005758:	4602      	mov	r2, r0
 800575a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	2b02      	cmp	r3, #2
 8005760:	d901      	bls.n	8005766 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005762:	2303      	movs	r3, #3
 8005764:	e08a      	b.n	800587c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005766:	4b47      	ldr	r3, [pc, #284]	@ (8005884 <HAL_RCC_OscConfig+0x8ac>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800576e:	2b00      	cmp	r3, #0
 8005770:	d0f0      	beq.n	8005754 <HAL_RCC_OscConfig+0x77c>
 8005772:	e082      	b.n	800587a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005774:	4b43      	ldr	r3, [pc, #268]	@ (8005884 <HAL_RCC_OscConfig+0x8ac>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a42      	ldr	r2, [pc, #264]	@ (8005884 <HAL_RCC_OscConfig+0x8ac>)
 800577a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800577e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005780:	f7fe fb10 	bl	8003da4 <HAL_GetTick>
 8005784:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005786:	e008      	b.n	800579a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005788:	f7fe fb0c 	bl	8003da4 <HAL_GetTick>
 800578c:	4602      	mov	r2, r0
 800578e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	2b02      	cmp	r3, #2
 8005794:	d901      	bls.n	800579a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	e070      	b.n	800587c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800579a:	4b3a      	ldr	r3, [pc, #232]	@ (8005884 <HAL_RCC_OscConfig+0x8ac>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d1f0      	bne.n	8005788 <HAL_RCC_OscConfig+0x7b0>
 80057a6:	e068      	b.n	800587a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80057a8:	4b36      	ldr	r3, [pc, #216]	@ (8005884 <HAL_RCC_OscConfig+0x8ac>)
 80057aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057ac:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80057ae:	4b35      	ldr	r3, [pc, #212]	@ (8005884 <HAL_RCC_OscConfig+0x8ac>)
 80057b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057b2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d031      	beq.n	8005820 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	f003 0203 	and.w	r2, r3, #3
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d12a      	bne.n	8005820 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	091b      	lsrs	r3, r3, #4
 80057ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d122      	bne.n	8005820 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057e4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d11a      	bne.n	8005820 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	0a5b      	lsrs	r3, r3, #9
 80057ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057f6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d111      	bne.n	8005820 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	0c1b      	lsrs	r3, r3, #16
 8005800:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005808:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800580a:	429a      	cmp	r2, r3
 800580c:	d108      	bne.n	8005820 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	0e1b      	lsrs	r3, r3, #24
 8005812:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800581a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800581c:	429a      	cmp	r2, r3
 800581e:	d001      	beq.n	8005824 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e02b      	b.n	800587c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005824:	4b17      	ldr	r3, [pc, #92]	@ (8005884 <HAL_RCC_OscConfig+0x8ac>)
 8005826:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005828:	08db      	lsrs	r3, r3, #3
 800582a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800582e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005834:	693a      	ldr	r2, [r7, #16]
 8005836:	429a      	cmp	r2, r3
 8005838:	d01f      	beq.n	800587a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800583a:	4b12      	ldr	r3, [pc, #72]	@ (8005884 <HAL_RCC_OscConfig+0x8ac>)
 800583c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800583e:	4a11      	ldr	r2, [pc, #68]	@ (8005884 <HAL_RCC_OscConfig+0x8ac>)
 8005840:	f023 0301 	bic.w	r3, r3, #1
 8005844:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005846:	f7fe faad 	bl	8003da4 <HAL_GetTick>
 800584a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800584c:	bf00      	nop
 800584e:	f7fe faa9 	bl	8003da4 <HAL_GetTick>
 8005852:	4602      	mov	r2, r0
 8005854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005856:	4293      	cmp	r3, r2
 8005858:	d0f9      	beq.n	800584e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800585a:	4b0a      	ldr	r3, [pc, #40]	@ (8005884 <HAL_RCC_OscConfig+0x8ac>)
 800585c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800585e:	4b0a      	ldr	r3, [pc, #40]	@ (8005888 <HAL_RCC_OscConfig+0x8b0>)
 8005860:	4013      	ands	r3, r2
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005866:	00d2      	lsls	r2, r2, #3
 8005868:	4906      	ldr	r1, [pc, #24]	@ (8005884 <HAL_RCC_OscConfig+0x8ac>)
 800586a:	4313      	orrs	r3, r2
 800586c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800586e:	4b05      	ldr	r3, [pc, #20]	@ (8005884 <HAL_RCC_OscConfig+0x8ac>)
 8005870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005872:	4a04      	ldr	r2, [pc, #16]	@ (8005884 <HAL_RCC_OscConfig+0x8ac>)
 8005874:	f043 0301 	orr.w	r3, r3, #1
 8005878:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800587a:	2300      	movs	r3, #0
}
 800587c:	4618      	mov	r0, r3
 800587e:	3730      	adds	r7, #48	@ 0x30
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}
 8005884:	58024400 	.word	0x58024400
 8005888:	ffff0007 	.word	0xffff0007

0800588c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b086      	sub	sp, #24
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d101      	bne.n	80058a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	e19c      	b.n	8005bda <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80058a0:	4b8a      	ldr	r3, [pc, #552]	@ (8005acc <HAL_RCC_ClockConfig+0x240>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 030f 	and.w	r3, r3, #15
 80058a8:	683a      	ldr	r2, [r7, #0]
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d910      	bls.n	80058d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058ae:	4b87      	ldr	r3, [pc, #540]	@ (8005acc <HAL_RCC_ClockConfig+0x240>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f023 020f 	bic.w	r2, r3, #15
 80058b6:	4985      	ldr	r1, [pc, #532]	@ (8005acc <HAL_RCC_ClockConfig+0x240>)
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058be:	4b83      	ldr	r3, [pc, #524]	@ (8005acc <HAL_RCC_ClockConfig+0x240>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 030f 	and.w	r3, r3, #15
 80058c6:	683a      	ldr	r2, [r7, #0]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d001      	beq.n	80058d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e184      	b.n	8005bda <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0304 	and.w	r3, r3, #4
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d010      	beq.n	80058fe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	691a      	ldr	r2, [r3, #16]
 80058e0:	4b7b      	ldr	r3, [pc, #492]	@ (8005ad0 <HAL_RCC_ClockConfig+0x244>)
 80058e2:	699b      	ldr	r3, [r3, #24]
 80058e4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d908      	bls.n	80058fe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80058ec:	4b78      	ldr	r3, [pc, #480]	@ (8005ad0 <HAL_RCC_ClockConfig+0x244>)
 80058ee:	699b      	ldr	r3, [r3, #24]
 80058f0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	691b      	ldr	r3, [r3, #16]
 80058f8:	4975      	ldr	r1, [pc, #468]	@ (8005ad0 <HAL_RCC_ClockConfig+0x244>)
 80058fa:	4313      	orrs	r3, r2
 80058fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 0308 	and.w	r3, r3, #8
 8005906:	2b00      	cmp	r3, #0
 8005908:	d010      	beq.n	800592c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	695a      	ldr	r2, [r3, #20]
 800590e:	4b70      	ldr	r3, [pc, #448]	@ (8005ad0 <HAL_RCC_ClockConfig+0x244>)
 8005910:	69db      	ldr	r3, [r3, #28]
 8005912:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005916:	429a      	cmp	r2, r3
 8005918:	d908      	bls.n	800592c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800591a:	4b6d      	ldr	r3, [pc, #436]	@ (8005ad0 <HAL_RCC_ClockConfig+0x244>)
 800591c:	69db      	ldr	r3, [r3, #28]
 800591e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	695b      	ldr	r3, [r3, #20]
 8005926:	496a      	ldr	r1, [pc, #424]	@ (8005ad0 <HAL_RCC_ClockConfig+0x244>)
 8005928:	4313      	orrs	r3, r2
 800592a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 0310 	and.w	r3, r3, #16
 8005934:	2b00      	cmp	r3, #0
 8005936:	d010      	beq.n	800595a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	699a      	ldr	r2, [r3, #24]
 800593c:	4b64      	ldr	r3, [pc, #400]	@ (8005ad0 <HAL_RCC_ClockConfig+0x244>)
 800593e:	69db      	ldr	r3, [r3, #28]
 8005940:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005944:	429a      	cmp	r2, r3
 8005946:	d908      	bls.n	800595a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005948:	4b61      	ldr	r3, [pc, #388]	@ (8005ad0 <HAL_RCC_ClockConfig+0x244>)
 800594a:	69db      	ldr	r3, [r3, #28]
 800594c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	699b      	ldr	r3, [r3, #24]
 8005954:	495e      	ldr	r1, [pc, #376]	@ (8005ad0 <HAL_RCC_ClockConfig+0x244>)
 8005956:	4313      	orrs	r3, r2
 8005958:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 0320 	and.w	r3, r3, #32
 8005962:	2b00      	cmp	r3, #0
 8005964:	d010      	beq.n	8005988 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	69da      	ldr	r2, [r3, #28]
 800596a:	4b59      	ldr	r3, [pc, #356]	@ (8005ad0 <HAL_RCC_ClockConfig+0x244>)
 800596c:	6a1b      	ldr	r3, [r3, #32]
 800596e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005972:	429a      	cmp	r2, r3
 8005974:	d908      	bls.n	8005988 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005976:	4b56      	ldr	r3, [pc, #344]	@ (8005ad0 <HAL_RCC_ClockConfig+0x244>)
 8005978:	6a1b      	ldr	r3, [r3, #32]
 800597a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	69db      	ldr	r3, [r3, #28]
 8005982:	4953      	ldr	r1, [pc, #332]	@ (8005ad0 <HAL_RCC_ClockConfig+0x244>)
 8005984:	4313      	orrs	r3, r2
 8005986:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 0302 	and.w	r3, r3, #2
 8005990:	2b00      	cmp	r3, #0
 8005992:	d010      	beq.n	80059b6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	68da      	ldr	r2, [r3, #12]
 8005998:	4b4d      	ldr	r3, [pc, #308]	@ (8005ad0 <HAL_RCC_ClockConfig+0x244>)
 800599a:	699b      	ldr	r3, [r3, #24]
 800599c:	f003 030f 	and.w	r3, r3, #15
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d908      	bls.n	80059b6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059a4:	4b4a      	ldr	r3, [pc, #296]	@ (8005ad0 <HAL_RCC_ClockConfig+0x244>)
 80059a6:	699b      	ldr	r3, [r3, #24]
 80059a8:	f023 020f 	bic.w	r2, r3, #15
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	4947      	ldr	r1, [pc, #284]	@ (8005ad0 <HAL_RCC_ClockConfig+0x244>)
 80059b2:	4313      	orrs	r3, r2
 80059b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 0301 	and.w	r3, r3, #1
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d055      	beq.n	8005a6e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80059c2:	4b43      	ldr	r3, [pc, #268]	@ (8005ad0 <HAL_RCC_ClockConfig+0x244>)
 80059c4:	699b      	ldr	r3, [r3, #24]
 80059c6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	4940      	ldr	r1, [pc, #256]	@ (8005ad0 <HAL_RCC_ClockConfig+0x244>)
 80059d0:	4313      	orrs	r3, r2
 80059d2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	2b02      	cmp	r3, #2
 80059da:	d107      	bne.n	80059ec <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80059dc:	4b3c      	ldr	r3, [pc, #240]	@ (8005ad0 <HAL_RCC_ClockConfig+0x244>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d121      	bne.n	8005a2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e0f6      	b.n	8005bda <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	2b03      	cmp	r3, #3
 80059f2:	d107      	bne.n	8005a04 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80059f4:	4b36      	ldr	r3, [pc, #216]	@ (8005ad0 <HAL_RCC_ClockConfig+0x244>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d115      	bne.n	8005a2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	e0ea      	b.n	8005bda <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d107      	bne.n	8005a1c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005a0c:	4b30      	ldr	r3, [pc, #192]	@ (8005ad0 <HAL_RCC_ClockConfig+0x244>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d109      	bne.n	8005a2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e0de      	b.n	8005bda <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a1c:	4b2c      	ldr	r3, [pc, #176]	@ (8005ad0 <HAL_RCC_ClockConfig+0x244>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 0304 	and.w	r3, r3, #4
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d101      	bne.n	8005a2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	e0d6      	b.n	8005bda <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005a2c:	4b28      	ldr	r3, [pc, #160]	@ (8005ad0 <HAL_RCC_ClockConfig+0x244>)
 8005a2e:	691b      	ldr	r3, [r3, #16]
 8005a30:	f023 0207 	bic.w	r2, r3, #7
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	4925      	ldr	r1, [pc, #148]	@ (8005ad0 <HAL_RCC_ClockConfig+0x244>)
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a3e:	f7fe f9b1 	bl	8003da4 <HAL_GetTick>
 8005a42:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a44:	e00a      	b.n	8005a5c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a46:	f7fe f9ad 	bl	8003da4 <HAL_GetTick>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	1ad3      	subs	r3, r2, r3
 8005a50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d901      	bls.n	8005a5c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005a58:	2303      	movs	r3, #3
 8005a5a:	e0be      	b.n	8005bda <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a5c:	4b1c      	ldr	r3, [pc, #112]	@ (8005ad0 <HAL_RCC_ClockConfig+0x244>)
 8005a5e:	691b      	ldr	r3, [r3, #16]
 8005a60:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	00db      	lsls	r3, r3, #3
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d1eb      	bne.n	8005a46 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 0302 	and.w	r3, r3, #2
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d010      	beq.n	8005a9c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	68da      	ldr	r2, [r3, #12]
 8005a7e:	4b14      	ldr	r3, [pc, #80]	@ (8005ad0 <HAL_RCC_ClockConfig+0x244>)
 8005a80:	699b      	ldr	r3, [r3, #24]
 8005a82:	f003 030f 	and.w	r3, r3, #15
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d208      	bcs.n	8005a9c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a8a:	4b11      	ldr	r3, [pc, #68]	@ (8005ad0 <HAL_RCC_ClockConfig+0x244>)
 8005a8c:	699b      	ldr	r3, [r3, #24]
 8005a8e:	f023 020f 	bic.w	r2, r3, #15
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	490e      	ldr	r1, [pc, #56]	@ (8005ad0 <HAL_RCC_ClockConfig+0x244>)
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a9c:	4b0b      	ldr	r3, [pc, #44]	@ (8005acc <HAL_RCC_ClockConfig+0x240>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 030f 	and.w	r3, r3, #15
 8005aa4:	683a      	ldr	r2, [r7, #0]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d214      	bcs.n	8005ad4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005aaa:	4b08      	ldr	r3, [pc, #32]	@ (8005acc <HAL_RCC_ClockConfig+0x240>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f023 020f 	bic.w	r2, r3, #15
 8005ab2:	4906      	ldr	r1, [pc, #24]	@ (8005acc <HAL_RCC_ClockConfig+0x240>)
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005aba:	4b04      	ldr	r3, [pc, #16]	@ (8005acc <HAL_RCC_ClockConfig+0x240>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f003 030f 	and.w	r3, r3, #15
 8005ac2:	683a      	ldr	r2, [r7, #0]
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d005      	beq.n	8005ad4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e086      	b.n	8005bda <HAL_RCC_ClockConfig+0x34e>
 8005acc:	52002000 	.word	0x52002000
 8005ad0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 0304 	and.w	r3, r3, #4
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d010      	beq.n	8005b02 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	691a      	ldr	r2, [r3, #16]
 8005ae4:	4b3f      	ldr	r3, [pc, #252]	@ (8005be4 <HAL_RCC_ClockConfig+0x358>)
 8005ae6:	699b      	ldr	r3, [r3, #24]
 8005ae8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d208      	bcs.n	8005b02 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005af0:	4b3c      	ldr	r3, [pc, #240]	@ (8005be4 <HAL_RCC_ClockConfig+0x358>)
 8005af2:	699b      	ldr	r3, [r3, #24]
 8005af4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	691b      	ldr	r3, [r3, #16]
 8005afc:	4939      	ldr	r1, [pc, #228]	@ (8005be4 <HAL_RCC_ClockConfig+0x358>)
 8005afe:	4313      	orrs	r3, r2
 8005b00:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 0308 	and.w	r3, r3, #8
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d010      	beq.n	8005b30 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	695a      	ldr	r2, [r3, #20]
 8005b12:	4b34      	ldr	r3, [pc, #208]	@ (8005be4 <HAL_RCC_ClockConfig+0x358>)
 8005b14:	69db      	ldr	r3, [r3, #28]
 8005b16:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d208      	bcs.n	8005b30 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005b1e:	4b31      	ldr	r3, [pc, #196]	@ (8005be4 <HAL_RCC_ClockConfig+0x358>)
 8005b20:	69db      	ldr	r3, [r3, #28]
 8005b22:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	695b      	ldr	r3, [r3, #20]
 8005b2a:	492e      	ldr	r1, [pc, #184]	@ (8005be4 <HAL_RCC_ClockConfig+0x358>)
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 0310 	and.w	r3, r3, #16
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d010      	beq.n	8005b5e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	699a      	ldr	r2, [r3, #24]
 8005b40:	4b28      	ldr	r3, [pc, #160]	@ (8005be4 <HAL_RCC_ClockConfig+0x358>)
 8005b42:	69db      	ldr	r3, [r3, #28]
 8005b44:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d208      	bcs.n	8005b5e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005b4c:	4b25      	ldr	r3, [pc, #148]	@ (8005be4 <HAL_RCC_ClockConfig+0x358>)
 8005b4e:	69db      	ldr	r3, [r3, #28]
 8005b50:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	699b      	ldr	r3, [r3, #24]
 8005b58:	4922      	ldr	r1, [pc, #136]	@ (8005be4 <HAL_RCC_ClockConfig+0x358>)
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f003 0320 	and.w	r3, r3, #32
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d010      	beq.n	8005b8c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	69da      	ldr	r2, [r3, #28]
 8005b6e:	4b1d      	ldr	r3, [pc, #116]	@ (8005be4 <HAL_RCC_ClockConfig+0x358>)
 8005b70:	6a1b      	ldr	r3, [r3, #32]
 8005b72:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d208      	bcs.n	8005b8c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005b7a:	4b1a      	ldr	r3, [pc, #104]	@ (8005be4 <HAL_RCC_ClockConfig+0x358>)
 8005b7c:	6a1b      	ldr	r3, [r3, #32]
 8005b7e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	69db      	ldr	r3, [r3, #28]
 8005b86:	4917      	ldr	r1, [pc, #92]	@ (8005be4 <HAL_RCC_ClockConfig+0x358>)
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005b8c:	f000 f834 	bl	8005bf8 <HAL_RCC_GetSysClockFreq>
 8005b90:	4602      	mov	r2, r0
 8005b92:	4b14      	ldr	r3, [pc, #80]	@ (8005be4 <HAL_RCC_ClockConfig+0x358>)
 8005b94:	699b      	ldr	r3, [r3, #24]
 8005b96:	0a1b      	lsrs	r3, r3, #8
 8005b98:	f003 030f 	and.w	r3, r3, #15
 8005b9c:	4912      	ldr	r1, [pc, #72]	@ (8005be8 <HAL_RCC_ClockConfig+0x35c>)
 8005b9e:	5ccb      	ldrb	r3, [r1, r3]
 8005ba0:	f003 031f 	and.w	r3, r3, #31
 8005ba4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ba8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005baa:	4b0e      	ldr	r3, [pc, #56]	@ (8005be4 <HAL_RCC_ClockConfig+0x358>)
 8005bac:	699b      	ldr	r3, [r3, #24]
 8005bae:	f003 030f 	and.w	r3, r3, #15
 8005bb2:	4a0d      	ldr	r2, [pc, #52]	@ (8005be8 <HAL_RCC_ClockConfig+0x35c>)
 8005bb4:	5cd3      	ldrb	r3, [r2, r3]
 8005bb6:	f003 031f 	and.w	r3, r3, #31
 8005bba:	693a      	ldr	r2, [r7, #16]
 8005bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8005bc0:	4a0a      	ldr	r2, [pc, #40]	@ (8005bec <HAL_RCC_ClockConfig+0x360>)
 8005bc2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005bc4:	4a0a      	ldr	r2, [pc, #40]	@ (8005bf0 <HAL_RCC_ClockConfig+0x364>)
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005bca:	4b0a      	ldr	r3, [pc, #40]	@ (8005bf4 <HAL_RCC_ClockConfig+0x368>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f7fb fc98 	bl	8001504 <HAL_InitTick>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3718      	adds	r7, #24
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
 8005be2:	bf00      	nop
 8005be4:	58024400 	.word	0x58024400
 8005be8:	08017624 	.word	0x08017624
 8005bec:	24000004 	.word	0x24000004
 8005bf0:	24000000 	.word	0x24000000
 8005bf4:	24000008 	.word	0x24000008

08005bf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b089      	sub	sp, #36	@ 0x24
 8005bfc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005bfe:	4bb3      	ldr	r3, [pc, #716]	@ (8005ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c00:	691b      	ldr	r3, [r3, #16]
 8005c02:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005c06:	2b18      	cmp	r3, #24
 8005c08:	f200 8155 	bhi.w	8005eb6 <HAL_RCC_GetSysClockFreq+0x2be>
 8005c0c:	a201      	add	r2, pc, #4	@ (adr r2, 8005c14 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c12:	bf00      	nop
 8005c14:	08005c79 	.word	0x08005c79
 8005c18:	08005eb7 	.word	0x08005eb7
 8005c1c:	08005eb7 	.word	0x08005eb7
 8005c20:	08005eb7 	.word	0x08005eb7
 8005c24:	08005eb7 	.word	0x08005eb7
 8005c28:	08005eb7 	.word	0x08005eb7
 8005c2c:	08005eb7 	.word	0x08005eb7
 8005c30:	08005eb7 	.word	0x08005eb7
 8005c34:	08005c9f 	.word	0x08005c9f
 8005c38:	08005eb7 	.word	0x08005eb7
 8005c3c:	08005eb7 	.word	0x08005eb7
 8005c40:	08005eb7 	.word	0x08005eb7
 8005c44:	08005eb7 	.word	0x08005eb7
 8005c48:	08005eb7 	.word	0x08005eb7
 8005c4c:	08005eb7 	.word	0x08005eb7
 8005c50:	08005eb7 	.word	0x08005eb7
 8005c54:	08005ca5 	.word	0x08005ca5
 8005c58:	08005eb7 	.word	0x08005eb7
 8005c5c:	08005eb7 	.word	0x08005eb7
 8005c60:	08005eb7 	.word	0x08005eb7
 8005c64:	08005eb7 	.word	0x08005eb7
 8005c68:	08005eb7 	.word	0x08005eb7
 8005c6c:	08005eb7 	.word	0x08005eb7
 8005c70:	08005eb7 	.word	0x08005eb7
 8005c74:	08005cab 	.word	0x08005cab
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c78:	4b94      	ldr	r3, [pc, #592]	@ (8005ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 0320 	and.w	r3, r3, #32
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d009      	beq.n	8005c98 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c84:	4b91      	ldr	r3, [pc, #580]	@ (8005ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	08db      	lsrs	r3, r3, #3
 8005c8a:	f003 0303 	and.w	r3, r3, #3
 8005c8e:	4a90      	ldr	r2, [pc, #576]	@ (8005ed0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005c90:	fa22 f303 	lsr.w	r3, r2, r3
 8005c94:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005c96:	e111      	b.n	8005ebc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005c98:	4b8d      	ldr	r3, [pc, #564]	@ (8005ed0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005c9a:	61bb      	str	r3, [r7, #24]
      break;
 8005c9c:	e10e      	b.n	8005ebc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005c9e:	4b8d      	ldr	r3, [pc, #564]	@ (8005ed4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005ca0:	61bb      	str	r3, [r7, #24]
      break;
 8005ca2:	e10b      	b.n	8005ebc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005ca4:	4b8c      	ldr	r3, [pc, #560]	@ (8005ed8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005ca6:	61bb      	str	r3, [r7, #24]
      break;
 8005ca8:	e108      	b.n	8005ebc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005caa:	4b88      	ldr	r3, [pc, #544]	@ (8005ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cae:	f003 0303 	and.w	r3, r3, #3
 8005cb2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005cb4:	4b85      	ldr	r3, [pc, #532]	@ (8005ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cb8:	091b      	lsrs	r3, r3, #4
 8005cba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005cbe:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005cc0:	4b82      	ldr	r3, [pc, #520]	@ (8005ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cc4:	f003 0301 	and.w	r3, r3, #1
 8005cc8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005cca:	4b80      	ldr	r3, [pc, #512]	@ (8005ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ccc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cce:	08db      	lsrs	r3, r3, #3
 8005cd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005cd4:	68fa      	ldr	r2, [r7, #12]
 8005cd6:	fb02 f303 	mul.w	r3, r2, r3
 8005cda:	ee07 3a90 	vmov	s15, r3
 8005cde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ce2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	f000 80e1 	beq.w	8005eb0 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	2b02      	cmp	r3, #2
 8005cf2:	f000 8083 	beq.w	8005dfc <HAL_RCC_GetSysClockFreq+0x204>
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	2b02      	cmp	r3, #2
 8005cfa:	f200 80a1 	bhi.w	8005e40 <HAL_RCC_GetSysClockFreq+0x248>
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d003      	beq.n	8005d0c <HAL_RCC_GetSysClockFreq+0x114>
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d056      	beq.n	8005db8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005d0a:	e099      	b.n	8005e40 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d0c:	4b6f      	ldr	r3, [pc, #444]	@ (8005ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 0320 	and.w	r3, r3, #32
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d02d      	beq.n	8005d74 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d18:	4b6c      	ldr	r3, [pc, #432]	@ (8005ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	08db      	lsrs	r3, r3, #3
 8005d1e:	f003 0303 	and.w	r3, r3, #3
 8005d22:	4a6b      	ldr	r2, [pc, #428]	@ (8005ed0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005d24:	fa22 f303 	lsr.w	r3, r2, r3
 8005d28:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	ee07 3a90 	vmov	s15, r3
 8005d30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	ee07 3a90 	vmov	s15, r3
 8005d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d42:	4b62      	ldr	r3, [pc, #392]	@ (8005ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d4a:	ee07 3a90 	vmov	s15, r3
 8005d4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d52:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d56:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005edc <HAL_RCC_GetSysClockFreq+0x2e4>
 8005d5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d6e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005d72:	e087      	b.n	8005e84 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	ee07 3a90 	vmov	s15, r3
 8005d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d7e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005ee0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005d82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d86:	4b51      	ldr	r3, [pc, #324]	@ (8005ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d8e:	ee07 3a90 	vmov	s15, r3
 8005d92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d96:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d9a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005edc <HAL_RCC_GetSysClockFreq+0x2e4>
 8005d9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005da2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005da6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005daa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005db2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005db6:	e065      	b.n	8005e84 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	ee07 3a90 	vmov	s15, r3
 8005dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dc2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005ee4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005dc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dca:	4b40      	ldr	r3, [pc, #256]	@ (8005ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dd2:	ee07 3a90 	vmov	s15, r3
 8005dd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dda:	ed97 6a02 	vldr	s12, [r7, #8]
 8005dde:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005edc <HAL_RCC_GetSysClockFreq+0x2e4>
 8005de2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005de6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005dee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005df6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005dfa:	e043      	b.n	8005e84 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	ee07 3a90 	vmov	s15, r3
 8005e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e06:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005ee8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005e0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e0e:	4b2f      	ldr	r3, [pc, #188]	@ (8005ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e16:	ee07 3a90 	vmov	s15, r3
 8005e1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e22:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005edc <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e3a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005e3e:	e021      	b.n	8005e84 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	ee07 3a90 	vmov	s15, r3
 8005e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e4a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005ee4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005e4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e52:	4b1e      	ldr	r3, [pc, #120]	@ (8005ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e5a:	ee07 3a90 	vmov	s15, r3
 8005e5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e62:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e66:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005edc <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e7e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005e82:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005e84:	4b11      	ldr	r3, [pc, #68]	@ (8005ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e88:	0a5b      	lsrs	r3, r3, #9
 8005e8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e8e:	3301      	adds	r3, #1
 8005e90:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	ee07 3a90 	vmov	s15, r3
 8005e98:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005e9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ea0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ea4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ea8:	ee17 3a90 	vmov	r3, s15
 8005eac:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005eae:	e005      	b.n	8005ebc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	61bb      	str	r3, [r7, #24]
      break;
 8005eb4:	e002      	b.n	8005ebc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005eb6:	4b07      	ldr	r3, [pc, #28]	@ (8005ed4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005eb8:	61bb      	str	r3, [r7, #24]
      break;
 8005eba:	bf00      	nop
  }

  return sysclockfreq;
 8005ebc:	69bb      	ldr	r3, [r7, #24]
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3724      	adds	r7, #36	@ 0x24
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr
 8005eca:	bf00      	nop
 8005ecc:	58024400 	.word	0x58024400
 8005ed0:	03d09000 	.word	0x03d09000
 8005ed4:	003d0900 	.word	0x003d0900
 8005ed8:	017d7840 	.word	0x017d7840
 8005edc:	46000000 	.word	0x46000000
 8005ee0:	4c742400 	.word	0x4c742400
 8005ee4:	4a742400 	.word	0x4a742400
 8005ee8:	4bbebc20 	.word	0x4bbebc20

08005eec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b082      	sub	sp, #8
 8005ef0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005ef2:	f7ff fe81 	bl	8005bf8 <HAL_RCC_GetSysClockFreq>
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	4b10      	ldr	r3, [pc, #64]	@ (8005f3c <HAL_RCC_GetHCLKFreq+0x50>)
 8005efa:	699b      	ldr	r3, [r3, #24]
 8005efc:	0a1b      	lsrs	r3, r3, #8
 8005efe:	f003 030f 	and.w	r3, r3, #15
 8005f02:	490f      	ldr	r1, [pc, #60]	@ (8005f40 <HAL_RCC_GetHCLKFreq+0x54>)
 8005f04:	5ccb      	ldrb	r3, [r1, r3]
 8005f06:	f003 031f 	and.w	r3, r3, #31
 8005f0a:	fa22 f303 	lsr.w	r3, r2, r3
 8005f0e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005f10:	4b0a      	ldr	r3, [pc, #40]	@ (8005f3c <HAL_RCC_GetHCLKFreq+0x50>)
 8005f12:	699b      	ldr	r3, [r3, #24]
 8005f14:	f003 030f 	and.w	r3, r3, #15
 8005f18:	4a09      	ldr	r2, [pc, #36]	@ (8005f40 <HAL_RCC_GetHCLKFreq+0x54>)
 8005f1a:	5cd3      	ldrb	r3, [r2, r3]
 8005f1c:	f003 031f 	and.w	r3, r3, #31
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	fa22 f303 	lsr.w	r3, r2, r3
 8005f26:	4a07      	ldr	r2, [pc, #28]	@ (8005f44 <HAL_RCC_GetHCLKFreq+0x58>)
 8005f28:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005f2a:	4a07      	ldr	r2, [pc, #28]	@ (8005f48 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005f30:	4b04      	ldr	r3, [pc, #16]	@ (8005f44 <HAL_RCC_GetHCLKFreq+0x58>)
 8005f32:	681b      	ldr	r3, [r3, #0]
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3708      	adds	r7, #8
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}
 8005f3c:	58024400 	.word	0x58024400
 8005f40:	08017624 	.word	0x08017624
 8005f44:	24000004 	.word	0x24000004
 8005f48:	24000000 	.word	0x24000000

08005f4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005f50:	f7ff ffcc 	bl	8005eec <HAL_RCC_GetHCLKFreq>
 8005f54:	4602      	mov	r2, r0
 8005f56:	4b06      	ldr	r3, [pc, #24]	@ (8005f70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f58:	69db      	ldr	r3, [r3, #28]
 8005f5a:	091b      	lsrs	r3, r3, #4
 8005f5c:	f003 0307 	and.w	r3, r3, #7
 8005f60:	4904      	ldr	r1, [pc, #16]	@ (8005f74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005f62:	5ccb      	ldrb	r3, [r1, r3]
 8005f64:	f003 031f 	and.w	r3, r3, #31
 8005f68:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	bd80      	pop	{r7, pc}
 8005f70:	58024400 	.word	0x58024400
 8005f74:	08017624 	.word	0x08017624

08005f78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005f7c:	f7ff ffb6 	bl	8005eec <HAL_RCC_GetHCLKFreq>
 8005f80:	4602      	mov	r2, r0
 8005f82:	4b06      	ldr	r3, [pc, #24]	@ (8005f9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f84:	69db      	ldr	r3, [r3, #28]
 8005f86:	0a1b      	lsrs	r3, r3, #8
 8005f88:	f003 0307 	and.w	r3, r3, #7
 8005f8c:	4904      	ldr	r1, [pc, #16]	@ (8005fa0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005f8e:	5ccb      	ldrb	r3, [r1, r3]
 8005f90:	f003 031f 	and.w	r3, r3, #31
 8005f94:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	bd80      	pop	{r7, pc}
 8005f9c:	58024400 	.word	0x58024400
 8005fa0:	08017624 	.word	0x08017624

08005fa4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	223f      	movs	r2, #63	@ 0x3f
 8005fb2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005fb4:	4b1a      	ldr	r3, [pc, #104]	@ (8006020 <HAL_RCC_GetClockConfig+0x7c>)
 8005fb6:	691b      	ldr	r3, [r3, #16]
 8005fb8:	f003 0207 	and.w	r2, r3, #7
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8005fc0:	4b17      	ldr	r3, [pc, #92]	@ (8006020 <HAL_RCC_GetClockConfig+0x7c>)
 8005fc2:	699b      	ldr	r3, [r3, #24]
 8005fc4:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8005fcc:	4b14      	ldr	r3, [pc, #80]	@ (8006020 <HAL_RCC_GetClockConfig+0x7c>)
 8005fce:	699b      	ldr	r3, [r3, #24]
 8005fd0:	f003 020f 	and.w	r2, r3, #15
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8005fd8:	4b11      	ldr	r3, [pc, #68]	@ (8006020 <HAL_RCC_GetClockConfig+0x7c>)
 8005fda:	699b      	ldr	r3, [r3, #24]
 8005fdc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8005fe4:	4b0e      	ldr	r3, [pc, #56]	@ (8006020 <HAL_RCC_GetClockConfig+0x7c>)
 8005fe6:	69db      	ldr	r3, [r3, #28]
 8005fe8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8005ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8006020 <HAL_RCC_GetClockConfig+0x7c>)
 8005ff2:	69db      	ldr	r3, [r3, #28]
 8005ff4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8005ffc:	4b08      	ldr	r3, [pc, #32]	@ (8006020 <HAL_RCC_GetClockConfig+0x7c>)
 8005ffe:	6a1b      	ldr	r3, [r3, #32]
 8006000:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006008:	4b06      	ldr	r3, [pc, #24]	@ (8006024 <HAL_RCC_GetClockConfig+0x80>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f003 020f 	and.w	r2, r3, #15
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	601a      	str	r2, [r3, #0]
}
 8006014:	bf00      	nop
 8006016:	370c      	adds	r7, #12
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr
 8006020:	58024400 	.word	0x58024400
 8006024:	52002000 	.word	0x52002000

08006028 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006028:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800602c:	b0ca      	sub	sp, #296	@ 0x128
 800602e:	af00      	add	r7, sp, #0
 8006030:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006034:	2300      	movs	r3, #0
 8006036:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800603a:	2300      	movs	r3, #0
 800603c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006040:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006048:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800604c:	2500      	movs	r5, #0
 800604e:	ea54 0305 	orrs.w	r3, r4, r5
 8006052:	d049      	beq.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006054:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006058:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800605a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800605e:	d02f      	beq.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006060:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006064:	d828      	bhi.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006066:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800606a:	d01a      	beq.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800606c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006070:	d822      	bhi.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006072:	2b00      	cmp	r3, #0
 8006074:	d003      	beq.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006076:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800607a:	d007      	beq.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800607c:	e01c      	b.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800607e:	4bb8      	ldr	r3, [pc, #736]	@ (8006360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006082:	4ab7      	ldr	r2, [pc, #732]	@ (8006360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006084:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006088:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800608a:	e01a      	b.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800608c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006090:	3308      	adds	r3, #8
 8006092:	2102      	movs	r1, #2
 8006094:	4618      	mov	r0, r3
 8006096:	f002 fb61 	bl	800875c <RCCEx_PLL2_Config>
 800609a:	4603      	mov	r3, r0
 800609c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80060a0:	e00f      	b.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80060a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060a6:	3328      	adds	r3, #40	@ 0x28
 80060a8:	2102      	movs	r1, #2
 80060aa:	4618      	mov	r0, r3
 80060ac:	f002 fc08 	bl	80088c0 <RCCEx_PLL3_Config>
 80060b0:	4603      	mov	r3, r0
 80060b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80060b6:	e004      	b.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80060be:	e000      	b.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80060c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d10a      	bne.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80060ca:	4ba5      	ldr	r3, [pc, #660]	@ (8006360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80060cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060ce:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80060d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80060d8:	4aa1      	ldr	r2, [pc, #644]	@ (8006360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80060da:	430b      	orrs	r3, r1
 80060dc:	6513      	str	r3, [r2, #80]	@ 0x50
 80060de:	e003      	b.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80060e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80060f4:	f04f 0900 	mov.w	r9, #0
 80060f8:	ea58 0309 	orrs.w	r3, r8, r9
 80060fc:	d047      	beq.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80060fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006102:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006104:	2b04      	cmp	r3, #4
 8006106:	d82a      	bhi.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006108:	a201      	add	r2, pc, #4	@ (adr r2, 8006110 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800610a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800610e:	bf00      	nop
 8006110:	08006125 	.word	0x08006125
 8006114:	08006133 	.word	0x08006133
 8006118:	08006149 	.word	0x08006149
 800611c:	08006167 	.word	0x08006167
 8006120:	08006167 	.word	0x08006167
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006124:	4b8e      	ldr	r3, [pc, #568]	@ (8006360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006128:	4a8d      	ldr	r2, [pc, #564]	@ (8006360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800612a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800612e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006130:	e01a      	b.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006132:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006136:	3308      	adds	r3, #8
 8006138:	2100      	movs	r1, #0
 800613a:	4618      	mov	r0, r3
 800613c:	f002 fb0e 	bl	800875c <RCCEx_PLL2_Config>
 8006140:	4603      	mov	r3, r0
 8006142:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006146:	e00f      	b.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006148:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800614c:	3328      	adds	r3, #40	@ 0x28
 800614e:	2100      	movs	r1, #0
 8006150:	4618      	mov	r0, r3
 8006152:	f002 fbb5 	bl	80088c0 <RCCEx_PLL3_Config>
 8006156:	4603      	mov	r3, r0
 8006158:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800615c:	e004      	b.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006164:	e000      	b.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006166:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006168:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800616c:	2b00      	cmp	r3, #0
 800616e:	d10a      	bne.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006170:	4b7b      	ldr	r3, [pc, #492]	@ (8006360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006172:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006174:	f023 0107 	bic.w	r1, r3, #7
 8006178:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800617c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800617e:	4a78      	ldr	r2, [pc, #480]	@ (8006360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006180:	430b      	orrs	r3, r1
 8006182:	6513      	str	r3, [r2, #80]	@ 0x50
 8006184:	e003      	b.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006186:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800618a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800618e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006196:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800619a:	f04f 0b00 	mov.w	fp, #0
 800619e:	ea5a 030b 	orrs.w	r3, sl, fp
 80061a2:	d04c      	beq.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80061a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061ae:	d030      	beq.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80061b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061b4:	d829      	bhi.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80061b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80061b8:	d02d      	beq.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80061ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80061bc:	d825      	bhi.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80061be:	2b80      	cmp	r3, #128	@ 0x80
 80061c0:	d018      	beq.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80061c2:	2b80      	cmp	r3, #128	@ 0x80
 80061c4:	d821      	bhi.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d002      	beq.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80061ca:	2b40      	cmp	r3, #64	@ 0x40
 80061cc:	d007      	beq.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80061ce:	e01c      	b.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061d0:	4b63      	ldr	r3, [pc, #396]	@ (8006360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80061d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061d4:	4a62      	ldr	r2, [pc, #392]	@ (8006360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80061d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80061dc:	e01c      	b.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80061de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061e2:	3308      	adds	r3, #8
 80061e4:	2100      	movs	r1, #0
 80061e6:	4618      	mov	r0, r3
 80061e8:	f002 fab8 	bl	800875c <RCCEx_PLL2_Config>
 80061ec:	4603      	mov	r3, r0
 80061ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80061f2:	e011      	b.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80061f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061f8:	3328      	adds	r3, #40	@ 0x28
 80061fa:	2100      	movs	r1, #0
 80061fc:	4618      	mov	r0, r3
 80061fe:	f002 fb5f 	bl	80088c0 <RCCEx_PLL3_Config>
 8006202:	4603      	mov	r3, r0
 8006204:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006208:	e006      	b.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006210:	e002      	b.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006212:	bf00      	nop
 8006214:	e000      	b.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006216:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006218:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800621c:	2b00      	cmp	r3, #0
 800621e:	d10a      	bne.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006220:	4b4f      	ldr	r3, [pc, #316]	@ (8006360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006222:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006224:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006228:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800622c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800622e:	4a4c      	ldr	r2, [pc, #304]	@ (8006360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006230:	430b      	orrs	r3, r1
 8006232:	6513      	str	r3, [r2, #80]	@ 0x50
 8006234:	e003      	b.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006236:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800623a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800623e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006246:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800624a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800624e:	2300      	movs	r3, #0
 8006250:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8006254:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8006258:	460b      	mov	r3, r1
 800625a:	4313      	orrs	r3, r2
 800625c:	d053      	beq.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800625e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006262:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006266:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800626a:	d035      	beq.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800626c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006270:	d82e      	bhi.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006272:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006276:	d031      	beq.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006278:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800627c:	d828      	bhi.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800627e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006282:	d01a      	beq.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006284:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006288:	d822      	bhi.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800628a:	2b00      	cmp	r3, #0
 800628c:	d003      	beq.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800628e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006292:	d007      	beq.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006294:	e01c      	b.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006296:	4b32      	ldr	r3, [pc, #200]	@ (8006360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800629a:	4a31      	ldr	r2, [pc, #196]	@ (8006360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800629c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80062a2:	e01c      	b.n	80062de <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80062a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062a8:	3308      	adds	r3, #8
 80062aa:	2100      	movs	r1, #0
 80062ac:	4618      	mov	r0, r3
 80062ae:	f002 fa55 	bl	800875c <RCCEx_PLL2_Config>
 80062b2:	4603      	mov	r3, r0
 80062b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80062b8:	e011      	b.n	80062de <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80062ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062be:	3328      	adds	r3, #40	@ 0x28
 80062c0:	2100      	movs	r1, #0
 80062c2:	4618      	mov	r0, r3
 80062c4:	f002 fafc 	bl	80088c0 <RCCEx_PLL3_Config>
 80062c8:	4603      	mov	r3, r0
 80062ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80062ce:	e006      	b.n	80062de <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80062d6:	e002      	b.n	80062de <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80062d8:	bf00      	nop
 80062da:	e000      	b.n	80062de <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80062dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d10b      	bne.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80062e6:	4b1e      	ldr	r3, [pc, #120]	@ (8006360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80062e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062ea:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80062ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80062f6:	4a1a      	ldr	r2, [pc, #104]	@ (8006360 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80062f8:	430b      	orrs	r3, r1
 80062fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80062fc:	e003      	b.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006302:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006306:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800630a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800630e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006312:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006316:	2300      	movs	r3, #0
 8006318:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800631c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8006320:	460b      	mov	r3, r1
 8006322:	4313      	orrs	r3, r2
 8006324:	d056      	beq.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006326:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800632a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800632e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006332:	d038      	beq.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006334:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006338:	d831      	bhi.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800633a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800633e:	d034      	beq.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006340:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006344:	d82b      	bhi.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006346:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800634a:	d01d      	beq.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800634c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006350:	d825      	bhi.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006352:	2b00      	cmp	r3, #0
 8006354:	d006      	beq.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006356:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800635a:	d00a      	beq.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800635c:	e01f      	b.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800635e:	bf00      	nop
 8006360:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006364:	4ba2      	ldr	r3, [pc, #648]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006368:	4aa1      	ldr	r2, [pc, #644]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800636a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800636e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006370:	e01c      	b.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006372:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006376:	3308      	adds	r3, #8
 8006378:	2100      	movs	r1, #0
 800637a:	4618      	mov	r0, r3
 800637c:	f002 f9ee 	bl	800875c <RCCEx_PLL2_Config>
 8006380:	4603      	mov	r3, r0
 8006382:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006386:	e011      	b.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006388:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800638c:	3328      	adds	r3, #40	@ 0x28
 800638e:	2100      	movs	r1, #0
 8006390:	4618      	mov	r0, r3
 8006392:	f002 fa95 	bl	80088c0 <RCCEx_PLL3_Config>
 8006396:	4603      	mov	r3, r0
 8006398:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800639c:	e006      	b.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80063a4:	e002      	b.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80063a6:	bf00      	nop
 80063a8:	e000      	b.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80063aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d10b      	bne.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80063b4:	4b8e      	ldr	r3, [pc, #568]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80063b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063b8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80063bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063c0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80063c4:	4a8a      	ldr	r2, [pc, #552]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80063c6:	430b      	orrs	r3, r1
 80063c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80063ca:	e003      	b.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80063d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063dc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80063e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80063e4:	2300      	movs	r3, #0
 80063e6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80063ea:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80063ee:	460b      	mov	r3, r1
 80063f0:	4313      	orrs	r3, r2
 80063f2:	d03a      	beq.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80063f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80063fa:	2b30      	cmp	r3, #48	@ 0x30
 80063fc:	d01f      	beq.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x416>
 80063fe:	2b30      	cmp	r3, #48	@ 0x30
 8006400:	d819      	bhi.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006402:	2b20      	cmp	r3, #32
 8006404:	d00c      	beq.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006406:	2b20      	cmp	r3, #32
 8006408:	d815      	bhi.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800640a:	2b00      	cmp	r3, #0
 800640c:	d019      	beq.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800640e:	2b10      	cmp	r3, #16
 8006410:	d111      	bne.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006412:	4b77      	ldr	r3, [pc, #476]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006416:	4a76      	ldr	r2, [pc, #472]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006418:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800641c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800641e:	e011      	b.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006420:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006424:	3308      	adds	r3, #8
 8006426:	2102      	movs	r1, #2
 8006428:	4618      	mov	r0, r3
 800642a:	f002 f997 	bl	800875c <RCCEx_PLL2_Config>
 800642e:	4603      	mov	r3, r0
 8006430:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006434:	e006      	b.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800643c:	e002      	b.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800643e:	bf00      	nop
 8006440:	e000      	b.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006442:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006444:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006448:	2b00      	cmp	r3, #0
 800644a:	d10a      	bne.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800644c:	4b68      	ldr	r3, [pc, #416]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800644e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006450:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006454:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800645a:	4a65      	ldr	r2, [pc, #404]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800645c:	430b      	orrs	r3, r1
 800645e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006460:	e003      	b.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006462:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006466:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800646a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800646e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006472:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006476:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800647a:	2300      	movs	r3, #0
 800647c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006480:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006484:	460b      	mov	r3, r1
 8006486:	4313      	orrs	r3, r2
 8006488:	d051      	beq.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800648a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800648e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006490:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006494:	d035      	beq.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006496:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800649a:	d82e      	bhi.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800649c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80064a0:	d031      	beq.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80064a2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80064a6:	d828      	bhi.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80064a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064ac:	d01a      	beq.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80064ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064b2:	d822      	bhi.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d003      	beq.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80064b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064bc:	d007      	beq.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80064be:	e01c      	b.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064c0:	4b4b      	ldr	r3, [pc, #300]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80064c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064c4:	4a4a      	ldr	r2, [pc, #296]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80064c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80064cc:	e01c      	b.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80064ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064d2:	3308      	adds	r3, #8
 80064d4:	2100      	movs	r1, #0
 80064d6:	4618      	mov	r0, r3
 80064d8:	f002 f940 	bl	800875c <RCCEx_PLL2_Config>
 80064dc:	4603      	mov	r3, r0
 80064de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80064e2:	e011      	b.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80064e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064e8:	3328      	adds	r3, #40	@ 0x28
 80064ea:	2100      	movs	r1, #0
 80064ec:	4618      	mov	r0, r3
 80064ee:	f002 f9e7 	bl	80088c0 <RCCEx_PLL3_Config>
 80064f2:	4603      	mov	r3, r0
 80064f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80064f8:	e006      	b.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006500:	e002      	b.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006502:	bf00      	nop
 8006504:	e000      	b.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006506:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006508:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800650c:	2b00      	cmp	r3, #0
 800650e:	d10a      	bne.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006510:	4b37      	ldr	r3, [pc, #220]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006512:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006514:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006518:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800651c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800651e:	4a34      	ldr	r2, [pc, #208]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006520:	430b      	orrs	r3, r1
 8006522:	6513      	str	r3, [r2, #80]	@ 0x50
 8006524:	e003      	b.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006526:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800652a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800652e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006536:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800653a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800653e:	2300      	movs	r3, #0
 8006540:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006544:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006548:	460b      	mov	r3, r1
 800654a:	4313      	orrs	r3, r2
 800654c:	d056      	beq.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800654e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006552:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006554:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006558:	d033      	beq.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800655a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800655e:	d82c      	bhi.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006560:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006564:	d02f      	beq.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006566:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800656a:	d826      	bhi.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x592>
 800656c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006570:	d02b      	beq.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8006572:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006576:	d820      	bhi.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006578:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800657c:	d012      	beq.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800657e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006582:	d81a      	bhi.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006584:	2b00      	cmp	r3, #0
 8006586:	d022      	beq.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006588:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800658c:	d115      	bne.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800658e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006592:	3308      	adds	r3, #8
 8006594:	2101      	movs	r1, #1
 8006596:	4618      	mov	r0, r3
 8006598:	f002 f8e0 	bl	800875c <RCCEx_PLL2_Config>
 800659c:	4603      	mov	r3, r0
 800659e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80065a2:	e015      	b.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80065a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065a8:	3328      	adds	r3, #40	@ 0x28
 80065aa:	2101      	movs	r1, #1
 80065ac:	4618      	mov	r0, r3
 80065ae:	f002 f987 	bl	80088c0 <RCCEx_PLL3_Config>
 80065b2:	4603      	mov	r3, r0
 80065b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80065b8:	e00a      	b.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80065c0:	e006      	b.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80065c2:	bf00      	nop
 80065c4:	e004      	b.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80065c6:	bf00      	nop
 80065c8:	e002      	b.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80065ca:	bf00      	nop
 80065cc:	e000      	b.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80065ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d10d      	bne.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80065d8:	4b05      	ldr	r3, [pc, #20]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80065da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065dc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80065e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80065e6:	4a02      	ldr	r2, [pc, #8]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80065e8:	430b      	orrs	r3, r1
 80065ea:	6513      	str	r3, [r2, #80]	@ 0x50
 80065ec:	e006      	b.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80065ee:	bf00      	nop
 80065f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80065fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006604:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006608:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800660c:	2300      	movs	r3, #0
 800660e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006612:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006616:	460b      	mov	r3, r1
 8006618:	4313      	orrs	r3, r2
 800661a:	d055      	beq.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800661c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006620:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006624:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006628:	d033      	beq.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800662a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800662e:	d82c      	bhi.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006630:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006634:	d02f      	beq.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8006636:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800663a:	d826      	bhi.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800663c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006640:	d02b      	beq.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006642:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006646:	d820      	bhi.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006648:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800664c:	d012      	beq.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800664e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006652:	d81a      	bhi.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006654:	2b00      	cmp	r3, #0
 8006656:	d022      	beq.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006658:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800665c:	d115      	bne.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800665e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006662:	3308      	adds	r3, #8
 8006664:	2101      	movs	r1, #1
 8006666:	4618      	mov	r0, r3
 8006668:	f002 f878 	bl	800875c <RCCEx_PLL2_Config>
 800666c:	4603      	mov	r3, r0
 800666e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006672:	e015      	b.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006674:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006678:	3328      	adds	r3, #40	@ 0x28
 800667a:	2101      	movs	r1, #1
 800667c:	4618      	mov	r0, r3
 800667e:	f002 f91f 	bl	80088c0 <RCCEx_PLL3_Config>
 8006682:	4603      	mov	r3, r0
 8006684:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006688:	e00a      	b.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006690:	e006      	b.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006692:	bf00      	nop
 8006694:	e004      	b.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006696:	bf00      	nop
 8006698:	e002      	b.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800669a:	bf00      	nop
 800669c:	e000      	b.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800669e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d10b      	bne.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80066a8:	4ba3      	ldr	r3, [pc, #652]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80066aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066ac:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80066b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80066b8:	4a9f      	ldr	r2, [pc, #636]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80066ba:	430b      	orrs	r3, r1
 80066bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80066be:	e003      	b.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80066c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066d0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80066d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80066d8:	2300      	movs	r3, #0
 80066da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80066de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80066e2:	460b      	mov	r3, r1
 80066e4:	4313      	orrs	r3, r2
 80066e6:	d037      	beq.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80066e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066f2:	d00e      	beq.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80066f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066f8:	d816      	bhi.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d018      	beq.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80066fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006702:	d111      	bne.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006704:	4b8c      	ldr	r3, [pc, #560]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006708:	4a8b      	ldr	r2, [pc, #556]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800670a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800670e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006710:	e00f      	b.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006712:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006716:	3308      	adds	r3, #8
 8006718:	2101      	movs	r1, #1
 800671a:	4618      	mov	r0, r3
 800671c:	f002 f81e 	bl	800875c <RCCEx_PLL2_Config>
 8006720:	4603      	mov	r3, r0
 8006722:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006726:	e004      	b.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800672e:	e000      	b.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006730:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006732:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006736:	2b00      	cmp	r3, #0
 8006738:	d10a      	bne.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800673a:	4b7f      	ldr	r3, [pc, #508]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800673c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800673e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006742:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006746:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006748:	4a7b      	ldr	r2, [pc, #492]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800674a:	430b      	orrs	r3, r1
 800674c:	6513      	str	r3, [r2, #80]	@ 0x50
 800674e:	e003      	b.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006750:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006754:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006758:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800675c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006760:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006764:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006768:	2300      	movs	r3, #0
 800676a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800676e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006772:	460b      	mov	r3, r1
 8006774:	4313      	orrs	r3, r2
 8006776:	d039      	beq.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006778:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800677c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800677e:	2b03      	cmp	r3, #3
 8006780:	d81c      	bhi.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x794>
 8006782:	a201      	add	r2, pc, #4	@ (adr r2, 8006788 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006788:	080067c5 	.word	0x080067c5
 800678c:	08006799 	.word	0x08006799
 8006790:	080067a7 	.word	0x080067a7
 8006794:	080067c5 	.word	0x080067c5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006798:	4b67      	ldr	r3, [pc, #412]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800679a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800679c:	4a66      	ldr	r2, [pc, #408]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800679e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80067a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80067a4:	e00f      	b.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80067a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067aa:	3308      	adds	r3, #8
 80067ac:	2102      	movs	r1, #2
 80067ae:	4618      	mov	r0, r3
 80067b0:	f001 ffd4 	bl	800875c <RCCEx_PLL2_Config>
 80067b4:	4603      	mov	r3, r0
 80067b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80067ba:	e004      	b.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80067bc:	2301      	movs	r3, #1
 80067be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80067c2:	e000      	b.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80067c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d10a      	bne.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80067ce:	4b5a      	ldr	r3, [pc, #360]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80067d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067d2:	f023 0103 	bic.w	r1, r3, #3
 80067d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067dc:	4a56      	ldr	r2, [pc, #344]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80067de:	430b      	orrs	r3, r1
 80067e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80067e2:	e003      	b.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80067ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80067f8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80067fc:	2300      	movs	r3, #0
 80067fe:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006802:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006806:	460b      	mov	r3, r1
 8006808:	4313      	orrs	r3, r2
 800680a:	f000 809f 	beq.w	800694c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800680e:	4b4b      	ldr	r3, [pc, #300]	@ (800693c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a4a      	ldr	r2, [pc, #296]	@ (800693c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006814:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006818:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800681a:	f7fd fac3 	bl	8003da4 <HAL_GetTick>
 800681e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006822:	e00b      	b.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006824:	f7fd fabe 	bl	8003da4 <HAL_GetTick>
 8006828:	4602      	mov	r2, r0
 800682a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800682e:	1ad3      	subs	r3, r2, r3
 8006830:	2b64      	cmp	r3, #100	@ 0x64
 8006832:	d903      	bls.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8006834:	2303      	movs	r3, #3
 8006836:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800683a:	e005      	b.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800683c:	4b3f      	ldr	r3, [pc, #252]	@ (800693c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006844:	2b00      	cmp	r3, #0
 8006846:	d0ed      	beq.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8006848:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800684c:	2b00      	cmp	r3, #0
 800684e:	d179      	bne.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006850:	4b39      	ldr	r3, [pc, #228]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006852:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006854:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006858:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800685c:	4053      	eors	r3, r2
 800685e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006862:	2b00      	cmp	r3, #0
 8006864:	d015      	beq.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006866:	4b34      	ldr	r3, [pc, #208]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006868:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800686a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800686e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006872:	4b31      	ldr	r3, [pc, #196]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006874:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006876:	4a30      	ldr	r2, [pc, #192]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006878:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800687c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800687e:	4b2e      	ldr	r3, [pc, #184]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006880:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006882:	4a2d      	ldr	r2, [pc, #180]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006884:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006888:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800688a:	4a2b      	ldr	r2, [pc, #172]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800688c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006890:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006896:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800689a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800689e:	d118      	bne.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068a0:	f7fd fa80 	bl	8003da4 <HAL_GetTick>
 80068a4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80068a8:	e00d      	b.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068aa:	f7fd fa7b 	bl	8003da4 <HAL_GetTick>
 80068ae:	4602      	mov	r2, r0
 80068b0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80068b4:	1ad2      	subs	r2, r2, r3
 80068b6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d903      	bls.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80068be:	2303      	movs	r3, #3
 80068c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80068c4:	e005      	b.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80068c6:	4b1c      	ldr	r3, [pc, #112]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068ca:	f003 0302 	and.w	r3, r3, #2
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d0eb      	beq.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80068d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d129      	bne.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80068da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80068e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80068ea:	d10e      	bne.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80068ec:	4b12      	ldr	r3, [pc, #72]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068ee:	691b      	ldr	r3, [r3, #16]
 80068f0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80068f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80068fc:	091a      	lsrs	r2, r3, #4
 80068fe:	4b10      	ldr	r3, [pc, #64]	@ (8006940 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006900:	4013      	ands	r3, r2
 8006902:	4a0d      	ldr	r2, [pc, #52]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006904:	430b      	orrs	r3, r1
 8006906:	6113      	str	r3, [r2, #16]
 8006908:	e005      	b.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800690a:	4b0b      	ldr	r3, [pc, #44]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800690c:	691b      	ldr	r3, [r3, #16]
 800690e:	4a0a      	ldr	r2, [pc, #40]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006910:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006914:	6113      	str	r3, [r2, #16]
 8006916:	4b08      	ldr	r3, [pc, #32]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006918:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800691a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800691e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006922:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006926:	4a04      	ldr	r2, [pc, #16]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006928:	430b      	orrs	r3, r1
 800692a:	6713      	str	r3, [r2, #112]	@ 0x70
 800692c:	e00e      	b.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800692e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006932:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8006936:	e009      	b.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006938:	58024400 	.word	0x58024400
 800693c:	58024800 	.word	0x58024800
 8006940:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006944:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006948:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800694c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006954:	f002 0301 	and.w	r3, r2, #1
 8006958:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800695c:	2300      	movs	r3, #0
 800695e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006962:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006966:	460b      	mov	r3, r1
 8006968:	4313      	orrs	r3, r2
 800696a:	f000 8089 	beq.w	8006a80 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800696e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006972:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006974:	2b28      	cmp	r3, #40	@ 0x28
 8006976:	d86b      	bhi.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006978:	a201      	add	r2, pc, #4	@ (adr r2, 8006980 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800697a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800697e:	bf00      	nop
 8006980:	08006a59 	.word	0x08006a59
 8006984:	08006a51 	.word	0x08006a51
 8006988:	08006a51 	.word	0x08006a51
 800698c:	08006a51 	.word	0x08006a51
 8006990:	08006a51 	.word	0x08006a51
 8006994:	08006a51 	.word	0x08006a51
 8006998:	08006a51 	.word	0x08006a51
 800699c:	08006a51 	.word	0x08006a51
 80069a0:	08006a25 	.word	0x08006a25
 80069a4:	08006a51 	.word	0x08006a51
 80069a8:	08006a51 	.word	0x08006a51
 80069ac:	08006a51 	.word	0x08006a51
 80069b0:	08006a51 	.word	0x08006a51
 80069b4:	08006a51 	.word	0x08006a51
 80069b8:	08006a51 	.word	0x08006a51
 80069bc:	08006a51 	.word	0x08006a51
 80069c0:	08006a3b 	.word	0x08006a3b
 80069c4:	08006a51 	.word	0x08006a51
 80069c8:	08006a51 	.word	0x08006a51
 80069cc:	08006a51 	.word	0x08006a51
 80069d0:	08006a51 	.word	0x08006a51
 80069d4:	08006a51 	.word	0x08006a51
 80069d8:	08006a51 	.word	0x08006a51
 80069dc:	08006a51 	.word	0x08006a51
 80069e0:	08006a59 	.word	0x08006a59
 80069e4:	08006a51 	.word	0x08006a51
 80069e8:	08006a51 	.word	0x08006a51
 80069ec:	08006a51 	.word	0x08006a51
 80069f0:	08006a51 	.word	0x08006a51
 80069f4:	08006a51 	.word	0x08006a51
 80069f8:	08006a51 	.word	0x08006a51
 80069fc:	08006a51 	.word	0x08006a51
 8006a00:	08006a59 	.word	0x08006a59
 8006a04:	08006a51 	.word	0x08006a51
 8006a08:	08006a51 	.word	0x08006a51
 8006a0c:	08006a51 	.word	0x08006a51
 8006a10:	08006a51 	.word	0x08006a51
 8006a14:	08006a51 	.word	0x08006a51
 8006a18:	08006a51 	.word	0x08006a51
 8006a1c:	08006a51 	.word	0x08006a51
 8006a20:	08006a59 	.word	0x08006a59
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006a24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a28:	3308      	adds	r3, #8
 8006a2a:	2101      	movs	r1, #1
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f001 fe95 	bl	800875c <RCCEx_PLL2_Config>
 8006a32:	4603      	mov	r3, r0
 8006a34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006a38:	e00f      	b.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a3e:	3328      	adds	r3, #40	@ 0x28
 8006a40:	2101      	movs	r1, #1
 8006a42:	4618      	mov	r0, r3
 8006a44:	f001 ff3c 	bl	80088c0 <RCCEx_PLL3_Config>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006a4e:	e004      	b.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006a56:	e000      	b.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006a58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d10a      	bne.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006a62:	4bbf      	ldr	r3, [pc, #764]	@ (8006d60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006a64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a66:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a6e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006a70:	4abb      	ldr	r2, [pc, #748]	@ (8006d60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006a72:	430b      	orrs	r3, r1
 8006a74:	6553      	str	r3, [r2, #84]	@ 0x54
 8006a76:	e003      	b.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a88:	f002 0302 	and.w	r3, r2, #2
 8006a8c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006a90:	2300      	movs	r3, #0
 8006a92:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006a96:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006a9a:	460b      	mov	r3, r1
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	d041      	beq.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aa4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006aa6:	2b05      	cmp	r3, #5
 8006aa8:	d824      	bhi.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006aaa:	a201      	add	r2, pc, #4	@ (adr r2, 8006ab0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ab0:	08006afd 	.word	0x08006afd
 8006ab4:	08006ac9 	.word	0x08006ac9
 8006ab8:	08006adf 	.word	0x08006adf
 8006abc:	08006afd 	.word	0x08006afd
 8006ac0:	08006afd 	.word	0x08006afd
 8006ac4:	08006afd 	.word	0x08006afd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006acc:	3308      	adds	r3, #8
 8006ace:	2101      	movs	r1, #1
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f001 fe43 	bl	800875c <RCCEx_PLL2_Config>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006adc:	e00f      	b.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ae2:	3328      	adds	r3, #40	@ 0x28
 8006ae4:	2101      	movs	r1, #1
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f001 feea 	bl	80088c0 <RCCEx_PLL3_Config>
 8006aec:	4603      	mov	r3, r0
 8006aee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006af2:	e004      	b.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006af4:	2301      	movs	r3, #1
 8006af6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006afa:	e000      	b.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006afc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006afe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d10a      	bne.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006b06:	4b96      	ldr	r3, [pc, #600]	@ (8006d60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006b08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b0a:	f023 0107 	bic.w	r1, r3, #7
 8006b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b12:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006b14:	4a92      	ldr	r2, [pc, #584]	@ (8006d60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006b16:	430b      	orrs	r3, r1
 8006b18:	6553      	str	r3, [r2, #84]	@ 0x54
 8006b1a:	e003      	b.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b20:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b2c:	f002 0304 	and.w	r3, r2, #4
 8006b30:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006b34:	2300      	movs	r3, #0
 8006b36:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006b3a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006b3e:	460b      	mov	r3, r1
 8006b40:	4313      	orrs	r3, r2
 8006b42:	d044      	beq.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b4c:	2b05      	cmp	r3, #5
 8006b4e:	d825      	bhi.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006b50:	a201      	add	r2, pc, #4	@ (adr r2, 8006b58 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8006b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b56:	bf00      	nop
 8006b58:	08006ba5 	.word	0x08006ba5
 8006b5c:	08006b71 	.word	0x08006b71
 8006b60:	08006b87 	.word	0x08006b87
 8006b64:	08006ba5 	.word	0x08006ba5
 8006b68:	08006ba5 	.word	0x08006ba5
 8006b6c:	08006ba5 	.word	0x08006ba5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b74:	3308      	adds	r3, #8
 8006b76:	2101      	movs	r1, #1
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f001 fdef 	bl	800875c <RCCEx_PLL2_Config>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006b84:	e00f      	b.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b8a:	3328      	adds	r3, #40	@ 0x28
 8006b8c:	2101      	movs	r1, #1
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f001 fe96 	bl	80088c0 <RCCEx_PLL3_Config>
 8006b94:	4603      	mov	r3, r0
 8006b96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006b9a:	e004      	b.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006ba2:	e000      	b.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006ba4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ba6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d10b      	bne.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006bae:	4b6c      	ldr	r3, [pc, #432]	@ (8006d60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006bb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bb2:	f023 0107 	bic.w	r1, r3, #7
 8006bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006bbe:	4a68      	ldr	r2, [pc, #416]	@ (8006d60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006bc0:	430b      	orrs	r3, r1
 8006bc2:	6593      	str	r3, [r2, #88]	@ 0x58
 8006bc4:	e003      	b.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd6:	f002 0320 	and.w	r3, r2, #32
 8006bda:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006bde:	2300      	movs	r3, #0
 8006be0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006be4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006be8:	460b      	mov	r3, r1
 8006bea:	4313      	orrs	r3, r2
 8006bec:	d055      	beq.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bf6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006bfa:	d033      	beq.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006bfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006c00:	d82c      	bhi.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006c02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c06:	d02f      	beq.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006c08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c0c:	d826      	bhi.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006c0e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006c12:	d02b      	beq.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006c14:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006c18:	d820      	bhi.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006c1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c1e:	d012      	beq.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006c20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c24:	d81a      	bhi.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d022      	beq.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006c2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c2e:	d115      	bne.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c34:	3308      	adds	r3, #8
 8006c36:	2100      	movs	r1, #0
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f001 fd8f 	bl	800875c <RCCEx_PLL2_Config>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006c44:	e015      	b.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c4a:	3328      	adds	r3, #40	@ 0x28
 8006c4c:	2102      	movs	r1, #2
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f001 fe36 	bl	80088c0 <RCCEx_PLL3_Config>
 8006c54:	4603      	mov	r3, r0
 8006c56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006c5a:	e00a      	b.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006c62:	e006      	b.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006c64:	bf00      	nop
 8006c66:	e004      	b.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006c68:	bf00      	nop
 8006c6a:	e002      	b.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006c6c:	bf00      	nop
 8006c6e:	e000      	b.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006c70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d10b      	bne.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006c7a:	4b39      	ldr	r3, [pc, #228]	@ (8006d60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006c7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c7e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c8a:	4a35      	ldr	r2, [pc, #212]	@ (8006d60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006c8c:	430b      	orrs	r3, r1
 8006c8e:	6553      	str	r3, [r2, #84]	@ 0x54
 8006c90:	e003      	b.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ca2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006ca6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006caa:	2300      	movs	r3, #0
 8006cac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006cb0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006cb4:	460b      	mov	r3, r1
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	d058      	beq.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006cc2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006cc6:	d033      	beq.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006cc8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006ccc:	d82c      	bhi.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006cce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006cd2:	d02f      	beq.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006cd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006cd8:	d826      	bhi.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006cda:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006cde:	d02b      	beq.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006ce0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006ce4:	d820      	bhi.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006ce6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006cea:	d012      	beq.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006cec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006cf0:	d81a      	bhi.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d022      	beq.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006cf6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cfa:	d115      	bne.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006cfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d00:	3308      	adds	r3, #8
 8006d02:	2100      	movs	r1, #0
 8006d04:	4618      	mov	r0, r3
 8006d06:	f001 fd29 	bl	800875c <RCCEx_PLL2_Config>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006d10:	e015      	b.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d16:	3328      	adds	r3, #40	@ 0x28
 8006d18:	2102      	movs	r1, #2
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f001 fdd0 	bl	80088c0 <RCCEx_PLL3_Config>
 8006d20:	4603      	mov	r3, r0
 8006d22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006d26:	e00a      	b.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006d2e:	e006      	b.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006d30:	bf00      	nop
 8006d32:	e004      	b.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006d34:	bf00      	nop
 8006d36:	e002      	b.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006d38:	bf00      	nop
 8006d3a:	e000      	b.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006d3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d10e      	bne.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006d46:	4b06      	ldr	r3, [pc, #24]	@ (8006d60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006d48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d4a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d52:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006d56:	4a02      	ldr	r2, [pc, #8]	@ (8006d60 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006d58:	430b      	orrs	r3, r1
 8006d5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8006d5c:	e006      	b.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006d5e:	bf00      	nop
 8006d60:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d74:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006d78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006d82:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006d86:	460b      	mov	r3, r1
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	d055      	beq.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006d8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d90:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006d94:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006d98:	d033      	beq.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006d9a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006d9e:	d82c      	bhi.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006da0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006da4:	d02f      	beq.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006da6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006daa:	d826      	bhi.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006dac:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006db0:	d02b      	beq.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006db2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006db6:	d820      	bhi.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006db8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006dbc:	d012      	beq.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006dbe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006dc2:	d81a      	bhi.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d022      	beq.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006dc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006dcc:	d115      	bne.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dd2:	3308      	adds	r3, #8
 8006dd4:	2100      	movs	r1, #0
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f001 fcc0 	bl	800875c <RCCEx_PLL2_Config>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006de2:	e015      	b.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006de8:	3328      	adds	r3, #40	@ 0x28
 8006dea:	2102      	movs	r1, #2
 8006dec:	4618      	mov	r0, r3
 8006dee:	f001 fd67 	bl	80088c0 <RCCEx_PLL3_Config>
 8006df2:	4603      	mov	r3, r0
 8006df4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006df8:	e00a      	b.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006e00:	e006      	b.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006e02:	bf00      	nop
 8006e04:	e004      	b.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006e06:	bf00      	nop
 8006e08:	e002      	b.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006e0a:	bf00      	nop
 8006e0c:	e000      	b.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006e0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d10b      	bne.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006e18:	4ba1      	ldr	r3, [pc, #644]	@ (80070a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006e1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e1c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e24:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006e28:	4a9d      	ldr	r2, [pc, #628]	@ (80070a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006e2a:	430b      	orrs	r3, r1
 8006e2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8006e2e:	e003      	b.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006e38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e40:	f002 0308 	and.w	r3, r2, #8
 8006e44:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006e48:	2300      	movs	r3, #0
 8006e4a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006e4e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006e52:	460b      	mov	r3, r1
 8006e54:	4313      	orrs	r3, r2
 8006e56:	d01e      	beq.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006e58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e64:	d10c      	bne.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e6a:	3328      	adds	r3, #40	@ 0x28
 8006e6c:	2102      	movs	r1, #2
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f001 fd26 	bl	80088c0 <RCCEx_PLL3_Config>
 8006e74:	4603      	mov	r3, r0
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d002      	beq.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006e80:	4b87      	ldr	r3, [pc, #540]	@ (80070a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006e82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e84:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006e88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e90:	4a83      	ldr	r2, [pc, #524]	@ (80070a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006e92:	430b      	orrs	r3, r1
 8006e94:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e9e:	f002 0310 	and.w	r3, r2, #16
 8006ea2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006eac:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006eb0:	460b      	mov	r3, r1
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	d01e      	beq.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006eb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006ebe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ec2:	d10c      	bne.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ec8:	3328      	adds	r3, #40	@ 0x28
 8006eca:	2102      	movs	r1, #2
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f001 fcf7 	bl	80088c0 <RCCEx_PLL3_Config>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d002      	beq.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006ede:	4b70      	ldr	r3, [pc, #448]	@ (80070a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006ee0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ee2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006eee:	4a6c      	ldr	r2, [pc, #432]	@ (80070a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006ef0:	430b      	orrs	r3, r1
 8006ef2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006ef4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006efc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006f00:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006f04:	2300      	movs	r3, #0
 8006f06:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006f0a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006f0e:	460b      	mov	r3, r1
 8006f10:	4313      	orrs	r3, r2
 8006f12:	d03e      	beq.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f18:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006f1c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f20:	d022      	beq.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006f22:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f26:	d81b      	bhi.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d003      	beq.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006f2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f30:	d00b      	beq.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006f32:	e015      	b.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f38:	3308      	adds	r3, #8
 8006f3a:	2100      	movs	r1, #0
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f001 fc0d 	bl	800875c <RCCEx_PLL2_Config>
 8006f42:	4603      	mov	r3, r0
 8006f44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006f48:	e00f      	b.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f4e:	3328      	adds	r3, #40	@ 0x28
 8006f50:	2102      	movs	r1, #2
 8006f52:	4618      	mov	r0, r3
 8006f54:	f001 fcb4 	bl	80088c0 <RCCEx_PLL3_Config>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006f5e:	e004      	b.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f60:	2301      	movs	r3, #1
 8006f62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006f66:	e000      	b.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006f68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d10b      	bne.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006f72:	4b4b      	ldr	r3, [pc, #300]	@ (80070a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006f74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f76:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006f7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f7e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006f82:	4a47      	ldr	r2, [pc, #284]	@ (80070a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006f84:	430b      	orrs	r3, r1
 8006f86:	6593      	str	r3, [r2, #88]	@ 0x58
 8006f88:	e003      	b.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f9a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006f9e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006fa4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006fa8:	460b      	mov	r3, r1
 8006faa:	4313      	orrs	r3, r2
 8006fac:	d03b      	beq.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fb6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006fba:	d01f      	beq.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006fbc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006fc0:	d818      	bhi.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006fc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006fc6:	d003      	beq.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006fc8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006fcc:	d007      	beq.n	8006fde <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006fce:	e011      	b.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fd0:	4b33      	ldr	r3, [pc, #204]	@ (80070a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fd4:	4a32      	ldr	r2, [pc, #200]	@ (80070a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006fd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006fda:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006fdc:	e00f      	b.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fe2:	3328      	adds	r3, #40	@ 0x28
 8006fe4:	2101      	movs	r1, #1
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f001 fc6a 	bl	80088c0 <RCCEx_PLL3_Config>
 8006fec:	4603      	mov	r3, r0
 8006fee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006ff2:	e004      	b.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006ffa:	e000      	b.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006ffc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ffe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007002:	2b00      	cmp	r3, #0
 8007004:	d10b      	bne.n	800701e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007006:	4b26      	ldr	r3, [pc, #152]	@ (80070a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007008:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800700a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800700e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007012:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007016:	4a22      	ldr	r2, [pc, #136]	@ (80070a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007018:	430b      	orrs	r3, r1
 800701a:	6553      	str	r3, [r2, #84]	@ 0x54
 800701c:	e003      	b.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800701e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007022:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007026:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800702a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800702e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007032:	673b      	str	r3, [r7, #112]	@ 0x70
 8007034:	2300      	movs	r3, #0
 8007036:	677b      	str	r3, [r7, #116]	@ 0x74
 8007038:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800703c:	460b      	mov	r3, r1
 800703e:	4313      	orrs	r3, r2
 8007040:	d034      	beq.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007042:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007046:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007048:	2b00      	cmp	r3, #0
 800704a:	d003      	beq.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800704c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007050:	d007      	beq.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007052:	e011      	b.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007054:	4b12      	ldr	r3, [pc, #72]	@ (80070a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007058:	4a11      	ldr	r2, [pc, #68]	@ (80070a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800705a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800705e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007060:	e00e      	b.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007062:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007066:	3308      	adds	r3, #8
 8007068:	2102      	movs	r1, #2
 800706a:	4618      	mov	r0, r3
 800706c:	f001 fb76 	bl	800875c <RCCEx_PLL2_Config>
 8007070:	4603      	mov	r3, r0
 8007072:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007076:	e003      	b.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007078:	2301      	movs	r3, #1
 800707a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800707e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007080:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007084:	2b00      	cmp	r3, #0
 8007086:	d10d      	bne.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007088:	4b05      	ldr	r3, [pc, #20]	@ (80070a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800708a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800708c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007090:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007094:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007096:	4a02      	ldr	r2, [pc, #8]	@ (80070a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007098:	430b      	orrs	r3, r1
 800709a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800709c:	e006      	b.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800709e:	bf00      	nop
 80070a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80070ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070b4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80070b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80070ba:	2300      	movs	r3, #0
 80070bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80070be:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80070c2:	460b      	mov	r3, r1
 80070c4:	4313      	orrs	r3, r2
 80070c6:	d00c      	beq.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80070c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070cc:	3328      	adds	r3, #40	@ 0x28
 80070ce:	2102      	movs	r1, #2
 80070d0:	4618      	mov	r0, r3
 80070d2:	f001 fbf5 	bl	80088c0 <RCCEx_PLL3_Config>
 80070d6:	4603      	mov	r3, r0
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d002      	beq.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80070dc:	2301      	movs	r3, #1
 80070de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80070e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ea:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80070ee:	663b      	str	r3, [r7, #96]	@ 0x60
 80070f0:	2300      	movs	r3, #0
 80070f2:	667b      	str	r3, [r7, #100]	@ 0x64
 80070f4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80070f8:	460b      	mov	r3, r1
 80070fa:	4313      	orrs	r3, r2
 80070fc:	d038      	beq.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80070fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007102:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007106:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800710a:	d018      	beq.n	800713e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800710c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007110:	d811      	bhi.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007112:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007116:	d014      	beq.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007118:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800711c:	d80b      	bhi.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800711e:	2b00      	cmp	r3, #0
 8007120:	d011      	beq.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007122:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007126:	d106      	bne.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007128:	4bc3      	ldr	r3, [pc, #780]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800712a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800712c:	4ac2      	ldr	r2, [pc, #776]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800712e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007132:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007134:	e008      	b.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800713c:	e004      	b.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800713e:	bf00      	nop
 8007140:	e002      	b.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007142:	bf00      	nop
 8007144:	e000      	b.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007146:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007148:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800714c:	2b00      	cmp	r3, #0
 800714e:	d10b      	bne.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007150:	4bb9      	ldr	r3, [pc, #740]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007152:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007154:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007158:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800715c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007160:	4ab5      	ldr	r2, [pc, #724]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007162:	430b      	orrs	r3, r1
 8007164:	6553      	str	r3, [r2, #84]	@ 0x54
 8007166:	e003      	b.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007168:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800716c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007170:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007178:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800717c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800717e:	2300      	movs	r3, #0
 8007180:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007182:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007186:	460b      	mov	r3, r1
 8007188:	4313      	orrs	r3, r2
 800718a:	d009      	beq.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800718c:	4baa      	ldr	r3, [pc, #680]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800718e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007190:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007194:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007198:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800719a:	4aa7      	ldr	r2, [pc, #668]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800719c:	430b      	orrs	r3, r1
 800719e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80071a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071a8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80071ac:	653b      	str	r3, [r7, #80]	@ 0x50
 80071ae:	2300      	movs	r3, #0
 80071b0:	657b      	str	r3, [r7, #84]	@ 0x54
 80071b2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80071b6:	460b      	mov	r3, r1
 80071b8:	4313      	orrs	r3, r2
 80071ba:	d00a      	beq.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80071bc:	4b9e      	ldr	r3, [pc, #632]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80071be:	691b      	ldr	r3, [r3, #16]
 80071c0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80071c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071c8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80071cc:	4a9a      	ldr	r2, [pc, #616]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80071ce:	430b      	orrs	r3, r1
 80071d0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80071d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071da:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80071de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80071e0:	2300      	movs	r3, #0
 80071e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80071e4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80071e8:	460b      	mov	r3, r1
 80071ea:	4313      	orrs	r3, r2
 80071ec:	d009      	beq.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80071ee:	4b92      	ldr	r3, [pc, #584]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80071f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071f2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80071f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071fc:	4a8e      	ldr	r2, [pc, #568]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80071fe:	430b      	orrs	r3, r1
 8007200:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007202:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800720a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800720e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007210:	2300      	movs	r3, #0
 8007212:	647b      	str	r3, [r7, #68]	@ 0x44
 8007214:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007218:	460b      	mov	r3, r1
 800721a:	4313      	orrs	r3, r2
 800721c:	d00e      	beq.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800721e:	4b86      	ldr	r3, [pc, #536]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007220:	691b      	ldr	r3, [r3, #16]
 8007222:	4a85      	ldr	r2, [pc, #532]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007224:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007228:	6113      	str	r3, [r2, #16]
 800722a:	4b83      	ldr	r3, [pc, #524]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800722c:	6919      	ldr	r1, [r3, #16]
 800722e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007232:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007236:	4a80      	ldr	r2, [pc, #512]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007238:	430b      	orrs	r3, r1
 800723a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800723c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007244:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007248:	63bb      	str	r3, [r7, #56]	@ 0x38
 800724a:	2300      	movs	r3, #0
 800724c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800724e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007252:	460b      	mov	r3, r1
 8007254:	4313      	orrs	r3, r2
 8007256:	d009      	beq.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007258:	4b77      	ldr	r3, [pc, #476]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800725a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800725c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007260:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007264:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007266:	4a74      	ldr	r2, [pc, #464]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007268:	430b      	orrs	r3, r1
 800726a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800726c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007274:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007278:	633b      	str	r3, [r7, #48]	@ 0x30
 800727a:	2300      	movs	r3, #0
 800727c:	637b      	str	r3, [r7, #52]	@ 0x34
 800727e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007282:	460b      	mov	r3, r1
 8007284:	4313      	orrs	r3, r2
 8007286:	d00a      	beq.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007288:	4b6b      	ldr	r3, [pc, #428]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800728a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800728c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007290:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007294:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007298:	4a67      	ldr	r2, [pc, #412]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800729a:	430b      	orrs	r3, r1
 800729c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800729e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a6:	2100      	movs	r1, #0
 80072a8:	62b9      	str	r1, [r7, #40]	@ 0x28
 80072aa:	f003 0301 	and.w	r3, r3, #1
 80072ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80072b0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80072b4:	460b      	mov	r3, r1
 80072b6:	4313      	orrs	r3, r2
 80072b8:	d011      	beq.n	80072de <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80072ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072be:	3308      	adds	r3, #8
 80072c0:	2100      	movs	r1, #0
 80072c2:	4618      	mov	r0, r3
 80072c4:	f001 fa4a 	bl	800875c <RCCEx_PLL2_Config>
 80072c8:	4603      	mov	r3, r0
 80072ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80072ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d003      	beq.n	80072de <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80072de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e6:	2100      	movs	r1, #0
 80072e8:	6239      	str	r1, [r7, #32]
 80072ea:	f003 0302 	and.w	r3, r3, #2
 80072ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80072f0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80072f4:	460b      	mov	r3, r1
 80072f6:	4313      	orrs	r3, r2
 80072f8:	d011      	beq.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80072fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072fe:	3308      	adds	r3, #8
 8007300:	2101      	movs	r1, #1
 8007302:	4618      	mov	r0, r3
 8007304:	f001 fa2a 	bl	800875c <RCCEx_PLL2_Config>
 8007308:	4603      	mov	r3, r0
 800730a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800730e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007312:	2b00      	cmp	r3, #0
 8007314:	d003      	beq.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007316:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800731a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800731e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007326:	2100      	movs	r1, #0
 8007328:	61b9      	str	r1, [r7, #24]
 800732a:	f003 0304 	and.w	r3, r3, #4
 800732e:	61fb      	str	r3, [r7, #28]
 8007330:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007334:	460b      	mov	r3, r1
 8007336:	4313      	orrs	r3, r2
 8007338:	d011      	beq.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800733a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800733e:	3308      	adds	r3, #8
 8007340:	2102      	movs	r1, #2
 8007342:	4618      	mov	r0, r3
 8007344:	f001 fa0a 	bl	800875c <RCCEx_PLL2_Config>
 8007348:	4603      	mov	r3, r0
 800734a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800734e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007352:	2b00      	cmp	r3, #0
 8007354:	d003      	beq.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007356:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800735a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800735e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007366:	2100      	movs	r1, #0
 8007368:	6139      	str	r1, [r7, #16]
 800736a:	f003 0308 	and.w	r3, r3, #8
 800736e:	617b      	str	r3, [r7, #20]
 8007370:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007374:	460b      	mov	r3, r1
 8007376:	4313      	orrs	r3, r2
 8007378:	d011      	beq.n	800739e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800737a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800737e:	3328      	adds	r3, #40	@ 0x28
 8007380:	2100      	movs	r1, #0
 8007382:	4618      	mov	r0, r3
 8007384:	f001 fa9c 	bl	80088c0 <RCCEx_PLL3_Config>
 8007388:	4603      	mov	r3, r0
 800738a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800738e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007392:	2b00      	cmp	r3, #0
 8007394:	d003      	beq.n	800739e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007396:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800739a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800739e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a6:	2100      	movs	r1, #0
 80073a8:	60b9      	str	r1, [r7, #8]
 80073aa:	f003 0310 	and.w	r3, r3, #16
 80073ae:	60fb      	str	r3, [r7, #12]
 80073b0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80073b4:	460b      	mov	r3, r1
 80073b6:	4313      	orrs	r3, r2
 80073b8:	d011      	beq.n	80073de <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80073ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073be:	3328      	adds	r3, #40	@ 0x28
 80073c0:	2101      	movs	r1, #1
 80073c2:	4618      	mov	r0, r3
 80073c4:	f001 fa7c 	bl	80088c0 <RCCEx_PLL3_Config>
 80073c8:	4603      	mov	r3, r0
 80073ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80073ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d003      	beq.n	80073de <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80073de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e6:	2100      	movs	r1, #0
 80073e8:	6039      	str	r1, [r7, #0]
 80073ea:	f003 0320 	and.w	r3, r3, #32
 80073ee:	607b      	str	r3, [r7, #4]
 80073f0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80073f4:	460b      	mov	r3, r1
 80073f6:	4313      	orrs	r3, r2
 80073f8:	d011      	beq.n	800741e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80073fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073fe:	3328      	adds	r3, #40	@ 0x28
 8007400:	2102      	movs	r1, #2
 8007402:	4618      	mov	r0, r3
 8007404:	f001 fa5c 	bl	80088c0 <RCCEx_PLL3_Config>
 8007408:	4603      	mov	r3, r0
 800740a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800740e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007412:	2b00      	cmp	r3, #0
 8007414:	d003      	beq.n	800741e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007416:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800741a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800741e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8007422:	2b00      	cmp	r3, #0
 8007424:	d101      	bne.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8007426:	2300      	movs	r3, #0
 8007428:	e000      	b.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800742a:	2301      	movs	r3, #1
}
 800742c:	4618      	mov	r0, r3
 800742e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8007432:	46bd      	mov	sp, r7
 8007434:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007438:	58024400 	.word	0x58024400

0800743c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b090      	sub	sp, #64	@ 0x40
 8007440:	af00      	add	r7, sp, #0
 8007442:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007446:	e9d7 2300 	ldrd	r2, r3, [r7]
 800744a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800744e:	430b      	orrs	r3, r1
 8007450:	f040 8094 	bne.w	800757c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007454:	4b9e      	ldr	r3, [pc, #632]	@ (80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007456:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007458:	f003 0307 	and.w	r3, r3, #7
 800745c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800745e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007460:	2b04      	cmp	r3, #4
 8007462:	f200 8087 	bhi.w	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007466:	a201      	add	r2, pc, #4	@ (adr r2, 800746c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800746c:	08007481 	.word	0x08007481
 8007470:	080074a9 	.word	0x080074a9
 8007474:	080074d1 	.word	0x080074d1
 8007478:	0800756d 	.word	0x0800756d
 800747c:	080074f9 	.word	0x080074f9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007480:	4b93      	ldr	r3, [pc, #588]	@ (80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007488:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800748c:	d108      	bne.n	80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800748e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007492:	4618      	mov	r0, r3
 8007494:	f001 f810 	bl	80084b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800749a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800749c:	f000 bd45 	b.w	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80074a0:	2300      	movs	r3, #0
 80074a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074a4:	f000 bd41 	b.w	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80074a8:	4b89      	ldr	r3, [pc, #548]	@ (80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80074b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80074b4:	d108      	bne.n	80074c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074b6:	f107 0318 	add.w	r3, r7, #24
 80074ba:	4618      	mov	r0, r3
 80074bc:	f000 fd54 	bl	8007f68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80074c0:	69bb      	ldr	r3, [r7, #24]
 80074c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80074c4:	f000 bd31 	b.w	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80074c8:	2300      	movs	r3, #0
 80074ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074cc:	f000 bd2d 	b.w	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80074d0:	4b7f      	ldr	r3, [pc, #508]	@ (80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80074d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80074dc:	d108      	bne.n	80074f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074de:	f107 030c 	add.w	r3, r7, #12
 80074e2:	4618      	mov	r0, r3
 80074e4:	f000 fe94 	bl	8008210 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80074ec:	f000 bd1d 	b.w	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80074f0:	2300      	movs	r3, #0
 80074f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074f4:	f000 bd19 	b.w	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80074f8:	4b75      	ldr	r3, [pc, #468]	@ (80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80074fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074fc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007500:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007502:	4b73      	ldr	r3, [pc, #460]	@ (80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f003 0304 	and.w	r3, r3, #4
 800750a:	2b04      	cmp	r3, #4
 800750c:	d10c      	bne.n	8007528 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800750e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007510:	2b00      	cmp	r3, #0
 8007512:	d109      	bne.n	8007528 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007514:	4b6e      	ldr	r3, [pc, #440]	@ (80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	08db      	lsrs	r3, r3, #3
 800751a:	f003 0303 	and.w	r3, r3, #3
 800751e:	4a6d      	ldr	r2, [pc, #436]	@ (80076d4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007520:	fa22 f303 	lsr.w	r3, r2, r3
 8007524:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007526:	e01f      	b.n	8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007528:	4b69      	ldr	r3, [pc, #420]	@ (80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007530:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007534:	d106      	bne.n	8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8007536:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007538:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800753c:	d102      	bne.n	8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800753e:	4b66      	ldr	r3, [pc, #408]	@ (80076d8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007540:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007542:	e011      	b.n	8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007544:	4b62      	ldr	r3, [pc, #392]	@ (80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800754c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007550:	d106      	bne.n	8007560 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8007552:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007554:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007558:	d102      	bne.n	8007560 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800755a:	4b60      	ldr	r3, [pc, #384]	@ (80076dc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800755c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800755e:	e003      	b.n	8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007560:	2300      	movs	r3, #0
 8007562:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007564:	f000 bce1 	b.w	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007568:	f000 bcdf 	b.w	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800756c:	4b5c      	ldr	r3, [pc, #368]	@ (80076e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800756e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007570:	f000 bcdb 	b.w	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007574:	2300      	movs	r3, #0
 8007576:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007578:	f000 bcd7 	b.w	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800757c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007580:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8007584:	430b      	orrs	r3, r1
 8007586:	f040 80ad 	bne.w	80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800758a:	4b51      	ldr	r3, [pc, #324]	@ (80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800758c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800758e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8007592:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007596:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800759a:	d056      	beq.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800759c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800759e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80075a2:	f200 8090 	bhi.w	80076c6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80075a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075a8:	2bc0      	cmp	r3, #192	@ 0xc0
 80075aa:	f000 8088 	beq.w	80076be <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80075ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075b0:	2bc0      	cmp	r3, #192	@ 0xc0
 80075b2:	f200 8088 	bhi.w	80076c6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80075b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075b8:	2b80      	cmp	r3, #128	@ 0x80
 80075ba:	d032      	beq.n	8007622 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80075bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075be:	2b80      	cmp	r3, #128	@ 0x80
 80075c0:	f200 8081 	bhi.w	80076c6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80075c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d003      	beq.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80075ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075cc:	2b40      	cmp	r3, #64	@ 0x40
 80075ce:	d014      	beq.n	80075fa <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80075d0:	e079      	b.n	80076c6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80075d2:	4b3f      	ldr	r3, [pc, #252]	@ (80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075da:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80075de:	d108      	bne.n	80075f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80075e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80075e4:	4618      	mov	r0, r3
 80075e6:	f000 ff67 	bl	80084b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80075ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075ee:	f000 bc9c 	b.w	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075f2:	2300      	movs	r3, #0
 80075f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075f6:	f000 bc98 	b.w	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80075fa:	4b35      	ldr	r3, [pc, #212]	@ (80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007602:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007606:	d108      	bne.n	800761a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007608:	f107 0318 	add.w	r3, r7, #24
 800760c:	4618      	mov	r0, r3
 800760e:	f000 fcab 	bl	8007f68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007612:	69bb      	ldr	r3, [r7, #24]
 8007614:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007616:	f000 bc88 	b.w	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800761a:	2300      	movs	r3, #0
 800761c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800761e:	f000 bc84 	b.w	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007622:	4b2b      	ldr	r3, [pc, #172]	@ (80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800762a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800762e:	d108      	bne.n	8007642 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007630:	f107 030c 	add.w	r3, r7, #12
 8007634:	4618      	mov	r0, r3
 8007636:	f000 fdeb 	bl	8008210 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800763e:	f000 bc74 	b.w	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007642:	2300      	movs	r3, #0
 8007644:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007646:	f000 bc70 	b.w	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800764a:	4b21      	ldr	r3, [pc, #132]	@ (80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800764c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800764e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007652:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007654:	4b1e      	ldr	r3, [pc, #120]	@ (80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f003 0304 	and.w	r3, r3, #4
 800765c:	2b04      	cmp	r3, #4
 800765e:	d10c      	bne.n	800767a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8007660:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007662:	2b00      	cmp	r3, #0
 8007664:	d109      	bne.n	800767a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007666:	4b1a      	ldr	r3, [pc, #104]	@ (80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	08db      	lsrs	r3, r3, #3
 800766c:	f003 0303 	and.w	r3, r3, #3
 8007670:	4a18      	ldr	r2, [pc, #96]	@ (80076d4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007672:	fa22 f303 	lsr.w	r3, r2, r3
 8007676:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007678:	e01f      	b.n	80076ba <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800767a:	4b15      	ldr	r3, [pc, #84]	@ (80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007682:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007686:	d106      	bne.n	8007696 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8007688:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800768a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800768e:	d102      	bne.n	8007696 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007690:	4b11      	ldr	r3, [pc, #68]	@ (80076d8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007692:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007694:	e011      	b.n	80076ba <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007696:	4b0e      	ldr	r3, [pc, #56]	@ (80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800769e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80076a2:	d106      	bne.n	80076b2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80076a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80076aa:	d102      	bne.n	80076b2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80076ac:	4b0b      	ldr	r3, [pc, #44]	@ (80076dc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80076ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80076b0:	e003      	b.n	80076ba <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80076b2:	2300      	movs	r3, #0
 80076b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80076b6:	f000 bc38 	b.w	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80076ba:	f000 bc36 	b.w	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80076be:	4b08      	ldr	r3, [pc, #32]	@ (80076e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80076c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076c2:	f000 bc32 	b.w	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80076c6:	2300      	movs	r3, #0
 80076c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076ca:	f000 bc2e 	b.w	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80076ce:	bf00      	nop
 80076d0:	58024400 	.word	0x58024400
 80076d4:	03d09000 	.word	0x03d09000
 80076d8:	003d0900 	.word	0x003d0900
 80076dc:	017d7840 	.word	0x017d7840
 80076e0:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80076e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076e8:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80076ec:	430b      	orrs	r3, r1
 80076ee:	f040 809c 	bne.w	800782a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80076f2:	4b9e      	ldr	r3, [pc, #632]	@ (800796c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80076f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076f6:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80076fa:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80076fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076fe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007702:	d054      	beq.n	80077ae <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8007704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007706:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800770a:	f200 808b 	bhi.w	8007824 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800770e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007710:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007714:	f000 8083 	beq.w	800781e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8007718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800771a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800771e:	f200 8081 	bhi.w	8007824 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007724:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007728:	d02f      	beq.n	800778a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800772a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800772c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007730:	d878      	bhi.n	8007824 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007734:	2b00      	cmp	r3, #0
 8007736:	d004      	beq.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8007738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800773a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800773e:	d012      	beq.n	8007766 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8007740:	e070      	b.n	8007824 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007742:	4b8a      	ldr	r3, [pc, #552]	@ (800796c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800774a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800774e:	d107      	bne.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007750:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007754:	4618      	mov	r0, r3
 8007756:	f000 feaf 	bl	80084b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800775a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800775c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800775e:	e3e4      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007760:	2300      	movs	r3, #0
 8007762:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007764:	e3e1      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007766:	4b81      	ldr	r3, [pc, #516]	@ (800796c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800776e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007772:	d107      	bne.n	8007784 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007774:	f107 0318 	add.w	r3, r7, #24
 8007778:	4618      	mov	r0, r3
 800777a:	f000 fbf5 	bl	8007f68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800777e:	69bb      	ldr	r3, [r7, #24]
 8007780:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007782:	e3d2      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007784:	2300      	movs	r3, #0
 8007786:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007788:	e3cf      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800778a:	4b78      	ldr	r3, [pc, #480]	@ (800796c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007792:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007796:	d107      	bne.n	80077a8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007798:	f107 030c 	add.w	r3, r7, #12
 800779c:	4618      	mov	r0, r3
 800779e:	f000 fd37 	bl	8008210 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80077a6:	e3c0      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80077a8:	2300      	movs	r3, #0
 80077aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077ac:	e3bd      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80077ae:	4b6f      	ldr	r3, [pc, #444]	@ (800796c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80077b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077b2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80077b6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80077b8:	4b6c      	ldr	r3, [pc, #432]	@ (800796c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f003 0304 	and.w	r3, r3, #4
 80077c0:	2b04      	cmp	r3, #4
 80077c2:	d10c      	bne.n	80077de <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80077c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d109      	bne.n	80077de <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80077ca:	4b68      	ldr	r3, [pc, #416]	@ (800796c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	08db      	lsrs	r3, r3, #3
 80077d0:	f003 0303 	and.w	r3, r3, #3
 80077d4:	4a66      	ldr	r2, [pc, #408]	@ (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80077d6:	fa22 f303 	lsr.w	r3, r2, r3
 80077da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80077dc:	e01e      	b.n	800781c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80077de:	4b63      	ldr	r3, [pc, #396]	@ (800796c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077ea:	d106      	bne.n	80077fa <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80077ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80077f2:	d102      	bne.n	80077fa <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80077f4:	4b5f      	ldr	r3, [pc, #380]	@ (8007974 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80077f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80077f8:	e010      	b.n	800781c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80077fa:	4b5c      	ldr	r3, [pc, #368]	@ (800796c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007802:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007806:	d106      	bne.n	8007816 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8007808:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800780a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800780e:	d102      	bne.n	8007816 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007810:	4b59      	ldr	r3, [pc, #356]	@ (8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007812:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007814:	e002      	b.n	800781c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007816:	2300      	movs	r3, #0
 8007818:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800781a:	e386      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800781c:	e385      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800781e:	4b57      	ldr	r3, [pc, #348]	@ (800797c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007820:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007822:	e382      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007824:	2300      	movs	r3, #0
 8007826:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007828:	e37f      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800782a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800782e:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8007832:	430b      	orrs	r3, r1
 8007834:	f040 80a7 	bne.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8007838:	4b4c      	ldr	r3, [pc, #304]	@ (800796c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800783a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800783c:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8007840:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007844:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007848:	d055      	beq.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800784a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800784c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007850:	f200 8096 	bhi.w	8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007856:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800785a:	f000 8084 	beq.w	8007966 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800785e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007860:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007864:	f200 808c 	bhi.w	8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800786a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800786e:	d030      	beq.n	80078d2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8007870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007872:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007876:	f200 8083 	bhi.w	8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800787a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800787c:	2b00      	cmp	r3, #0
 800787e:	d004      	beq.n	800788a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8007880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007882:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007886:	d012      	beq.n	80078ae <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8007888:	e07a      	b.n	8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800788a:	4b38      	ldr	r3, [pc, #224]	@ (800796c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007892:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007896:	d107      	bne.n	80078a8 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007898:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800789c:	4618      	mov	r0, r3
 800789e:	f000 fe0b 	bl	80084b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80078a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80078a6:	e340      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80078a8:	2300      	movs	r3, #0
 80078aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078ac:	e33d      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80078ae:	4b2f      	ldr	r3, [pc, #188]	@ (800796c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80078b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80078ba:	d107      	bne.n	80078cc <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078bc:	f107 0318 	add.w	r3, r7, #24
 80078c0:	4618      	mov	r0, r3
 80078c2:	f000 fb51 	bl	8007f68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80078c6:	69bb      	ldr	r3, [r7, #24]
 80078c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80078ca:	e32e      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80078cc:	2300      	movs	r3, #0
 80078ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078d0:	e32b      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80078d2:	4b26      	ldr	r3, [pc, #152]	@ (800796c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80078da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80078de:	d107      	bne.n	80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078e0:	f107 030c 	add.w	r3, r7, #12
 80078e4:	4618      	mov	r0, r3
 80078e6:	f000 fc93 	bl	8008210 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80078ee:	e31c      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80078f0:	2300      	movs	r3, #0
 80078f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078f4:	e319      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80078f6:	4b1d      	ldr	r3, [pc, #116]	@ (800796c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80078f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078fa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80078fe:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007900:	4b1a      	ldr	r3, [pc, #104]	@ (800796c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f003 0304 	and.w	r3, r3, #4
 8007908:	2b04      	cmp	r3, #4
 800790a:	d10c      	bne.n	8007926 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800790c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800790e:	2b00      	cmp	r3, #0
 8007910:	d109      	bne.n	8007926 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007912:	4b16      	ldr	r3, [pc, #88]	@ (800796c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	08db      	lsrs	r3, r3, #3
 8007918:	f003 0303 	and.w	r3, r3, #3
 800791c:	4a14      	ldr	r2, [pc, #80]	@ (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800791e:	fa22 f303 	lsr.w	r3, r2, r3
 8007922:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007924:	e01e      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007926:	4b11      	ldr	r3, [pc, #68]	@ (800796c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800792e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007932:	d106      	bne.n	8007942 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8007934:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007936:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800793a:	d102      	bne.n	8007942 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800793c:	4b0d      	ldr	r3, [pc, #52]	@ (8007974 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800793e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007940:	e010      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007942:	4b0a      	ldr	r3, [pc, #40]	@ (800796c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800794a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800794e:	d106      	bne.n	800795e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8007950:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007952:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007956:	d102      	bne.n	800795e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007958:	4b07      	ldr	r3, [pc, #28]	@ (8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800795a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800795c:	e002      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800795e:	2300      	movs	r3, #0
 8007960:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007962:	e2e2      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007964:	e2e1      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007966:	4b05      	ldr	r3, [pc, #20]	@ (800797c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007968:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800796a:	e2de      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800796c:	58024400 	.word	0x58024400
 8007970:	03d09000 	.word	0x03d09000
 8007974:	003d0900 	.word	0x003d0900
 8007978:	017d7840 	.word	0x017d7840
 800797c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8007980:	2300      	movs	r3, #0
 8007982:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007984:	e2d1      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007986:	e9d7 2300 	ldrd	r2, r3, [r7]
 800798a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800798e:	430b      	orrs	r3, r1
 8007990:	f040 809c 	bne.w	8007acc <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8007994:	4b93      	ldr	r3, [pc, #588]	@ (8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007996:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007998:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800799c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800799e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80079a4:	d054      	beq.n	8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80079a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80079ac:	f200 808b 	bhi.w	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80079b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079b2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80079b6:	f000 8083 	beq.w	8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80079ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079bc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80079c0:	f200 8081 	bhi.w	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80079c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80079ca:	d02f      	beq.n	8007a2c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80079cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80079d2:	d878      	bhi.n	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80079d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d004      	beq.n	80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80079da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079e0:	d012      	beq.n	8007a08 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80079e2:	e070      	b.n	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80079e4:	4b7f      	ldr	r3, [pc, #508]	@ (8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80079ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80079f0:	d107      	bne.n	8007a02 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80079f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80079f6:	4618      	mov	r0, r3
 80079f8:	f000 fd5e 	bl	80084b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80079fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a00:	e293      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007a02:	2300      	movs	r3, #0
 8007a04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a06:	e290      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007a08:	4b76      	ldr	r3, [pc, #472]	@ (8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007a10:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007a14:	d107      	bne.n	8007a26 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a16:	f107 0318 	add.w	r3, r7, #24
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f000 faa4 	bl	8007f68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007a20:	69bb      	ldr	r3, [r7, #24]
 8007a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a24:	e281      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007a26:	2300      	movs	r3, #0
 8007a28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a2a:	e27e      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007a2c:	4b6d      	ldr	r3, [pc, #436]	@ (8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007a34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a38:	d107      	bne.n	8007a4a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a3a:	f107 030c 	add.w	r3, r7, #12
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f000 fbe6 	bl	8008210 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a48:	e26f      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a4e:	e26c      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007a50:	4b64      	ldr	r3, [pc, #400]	@ (8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a54:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007a58:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007a5a:	4b62      	ldr	r3, [pc, #392]	@ (8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f003 0304 	and.w	r3, r3, #4
 8007a62:	2b04      	cmp	r3, #4
 8007a64:	d10c      	bne.n	8007a80 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8007a66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d109      	bne.n	8007a80 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007a6c:	4b5d      	ldr	r3, [pc, #372]	@ (8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	08db      	lsrs	r3, r3, #3
 8007a72:	f003 0303 	and.w	r3, r3, #3
 8007a76:	4a5c      	ldr	r2, [pc, #368]	@ (8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007a78:	fa22 f303 	lsr.w	r3, r2, r3
 8007a7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a7e:	e01e      	b.n	8007abe <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007a80:	4b58      	ldr	r3, [pc, #352]	@ (8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a8c:	d106      	bne.n	8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8007a8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a90:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a94:	d102      	bne.n	8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007a96:	4b55      	ldr	r3, [pc, #340]	@ (8007bec <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007a98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a9a:	e010      	b.n	8007abe <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007a9c:	4b51      	ldr	r3, [pc, #324]	@ (8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007aa4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007aa8:	d106      	bne.n	8007ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8007aaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007aac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ab0:	d102      	bne.n	8007ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007ab2:	4b4f      	ldr	r3, [pc, #316]	@ (8007bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007ab4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ab6:	e002      	b.n	8007abe <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007abc:	e235      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007abe:	e234      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007ac0:	4b4c      	ldr	r3, [pc, #304]	@ (8007bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8007ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ac4:	e231      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007aca:	e22e      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8007acc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ad0:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8007ad4:	430b      	orrs	r3, r1
 8007ad6:	f040 808f 	bne.w	8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8007ada:	4b42      	ldr	r3, [pc, #264]	@ (8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007adc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ade:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007ae2:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8007ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ae6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007aea:	d06b      	beq.n	8007bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8007aec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aee:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007af2:	d874      	bhi.n	8007bde <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007af4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007af6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007afa:	d056      	beq.n	8007baa <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8007afc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007afe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007b02:	d86c      	bhi.n	8007bde <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b06:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007b0a:	d03b      	beq.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8007b0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b0e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007b12:	d864      	bhi.n	8007bde <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007b14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b16:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b1a:	d021      	beq.n	8007b60 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007b1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b22:	d85c      	bhi.n	8007bde <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d004      	beq.n	8007b34 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8007b2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b30:	d004      	beq.n	8007b3c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8007b32:	e054      	b.n	8007bde <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8007b34:	f7fe fa0a 	bl	8005f4c <HAL_RCC_GetPCLK1Freq>
 8007b38:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007b3a:	e1f6      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007b3c:	4b29      	ldr	r3, [pc, #164]	@ (8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b44:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007b48:	d107      	bne.n	8007b5a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b4a:	f107 0318 	add.w	r3, r7, #24
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f000 fa0a 	bl	8007f68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007b54:	69fb      	ldr	r3, [r7, #28]
 8007b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b58:	e1e7      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b5e:	e1e4      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007b60:	4b20      	ldr	r3, [pc, #128]	@ (8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007b68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b6c:	d107      	bne.n	8007b7e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b6e:	f107 030c 	add.w	r3, r7, #12
 8007b72:	4618      	mov	r0, r3
 8007b74:	f000 fb4c 	bl	8008210 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b7c:	e1d5      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b82:	e1d2      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007b84:	4b17      	ldr	r3, [pc, #92]	@ (8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f003 0304 	and.w	r3, r3, #4
 8007b8c:	2b04      	cmp	r3, #4
 8007b8e:	d109      	bne.n	8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007b90:	4b14      	ldr	r3, [pc, #80]	@ (8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	08db      	lsrs	r3, r3, #3
 8007b96:	f003 0303 	and.w	r3, r3, #3
 8007b9a:	4a13      	ldr	r2, [pc, #76]	@ (8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007b9c:	fa22 f303 	lsr.w	r3, r2, r3
 8007ba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ba2:	e1c2      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ba8:	e1bf      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007baa:	4b0e      	ldr	r3, [pc, #56]	@ (8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007bb6:	d102      	bne.n	8007bbe <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8007bb8:	4b0c      	ldr	r3, [pc, #48]	@ (8007bec <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007bba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007bbc:	e1b5      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007bc2:	e1b2      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007bc4:	4b07      	ldr	r3, [pc, #28]	@ (8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007bcc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007bd0:	d102      	bne.n	8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8007bd2:	4b07      	ldr	r3, [pc, #28]	@ (8007bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007bd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007bd6:	e1a8      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007bdc:	e1a5      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007bde:	2300      	movs	r3, #0
 8007be0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007be2:	e1a2      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007be4:	58024400 	.word	0x58024400
 8007be8:	03d09000 	.word	0x03d09000
 8007bec:	003d0900 	.word	0x003d0900
 8007bf0:	017d7840 	.word	0x017d7840
 8007bf4:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007bf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bfc:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8007c00:	430b      	orrs	r3, r1
 8007c02:	d173      	bne.n	8007cec <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007c04:	4b9c      	ldr	r3, [pc, #624]	@ (8007e78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c08:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007c0c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007c0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c10:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c14:	d02f      	beq.n	8007c76 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8007c16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c1c:	d863      	bhi.n	8007ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8007c1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d004      	beq.n	8007c2e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8007c24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c2a:	d012      	beq.n	8007c52 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8007c2c:	e05b      	b.n	8007ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007c2e:	4b92      	ldr	r3, [pc, #584]	@ (8007e78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c36:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c3a:	d107      	bne.n	8007c4c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c3c:	f107 0318 	add.w	r3, r7, #24
 8007c40:	4618      	mov	r0, r3
 8007c42:	f000 f991 	bl	8007f68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007c46:	69bb      	ldr	r3, [r7, #24]
 8007c48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c4a:	e16e      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c50:	e16b      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007c52:	4b89      	ldr	r3, [pc, #548]	@ (8007e78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007c5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c5e:	d107      	bne.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c60:	f107 030c 	add.w	r3, r7, #12
 8007c64:	4618      	mov	r0, r3
 8007c66:	f000 fad3 	bl	8008210 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c6e:	e15c      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c70:	2300      	movs	r3, #0
 8007c72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c74:	e159      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007c76:	4b80      	ldr	r3, [pc, #512]	@ (8007e78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c7a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007c7e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007c80:	4b7d      	ldr	r3, [pc, #500]	@ (8007e78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f003 0304 	and.w	r3, r3, #4
 8007c88:	2b04      	cmp	r3, #4
 8007c8a:	d10c      	bne.n	8007ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8007c8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d109      	bne.n	8007ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c92:	4b79      	ldr	r3, [pc, #484]	@ (8007e78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	08db      	lsrs	r3, r3, #3
 8007c98:	f003 0303 	and.w	r3, r3, #3
 8007c9c:	4a77      	ldr	r2, [pc, #476]	@ (8007e7c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007c9e:	fa22 f303 	lsr.w	r3, r2, r3
 8007ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ca4:	e01e      	b.n	8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007ca6:	4b74      	ldr	r3, [pc, #464]	@ (8007e78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007cb2:	d106      	bne.n	8007cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8007cb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cb6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007cba:	d102      	bne.n	8007cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007cbc:	4b70      	ldr	r3, [pc, #448]	@ (8007e80 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007cc0:	e010      	b.n	8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007cc2:	4b6d      	ldr	r3, [pc, #436]	@ (8007e78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007cca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007cce:	d106      	bne.n	8007cde <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8007cd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cd2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007cd6:	d102      	bne.n	8007cde <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007cd8:	4b6a      	ldr	r3, [pc, #424]	@ (8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007cdc:	e002      	b.n	8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007ce2:	e122      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007ce4:	e121      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cea:	e11e      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007cec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cf0:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8007cf4:	430b      	orrs	r3, r1
 8007cf6:	d133      	bne.n	8007d60 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007cf8:	4b5f      	ldr	r3, [pc, #380]	@ (8007e78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007cfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007cfc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007d00:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007d02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d004      	beq.n	8007d12 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8007d08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d0e:	d012      	beq.n	8007d36 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8007d10:	e023      	b.n	8007d5a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007d12:	4b59      	ldr	r3, [pc, #356]	@ (8007e78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d1a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007d1e:	d107      	bne.n	8007d30 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007d24:	4618      	mov	r0, r3
 8007d26:	f000 fbc7 	bl	80084b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d2e:	e0fc      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d30:	2300      	movs	r3, #0
 8007d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d34:	e0f9      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007d36:	4b50      	ldr	r3, [pc, #320]	@ (8007e78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d3e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007d42:	d107      	bne.n	8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d44:	f107 0318 	add.w	r3, r7, #24
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f000 f90d 	bl	8007f68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007d4e:	6a3b      	ldr	r3, [r7, #32]
 8007d50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d52:	e0ea      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d54:	2300      	movs	r3, #0
 8007d56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d58:	e0e7      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d5e:	e0e4      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007d60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d64:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8007d68:	430b      	orrs	r3, r1
 8007d6a:	f040 808d 	bne.w	8007e88 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007d6e:	4b42      	ldr	r3, [pc, #264]	@ (8007e78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007d70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d72:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8007d76:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007d78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007d7e:	d06b      	beq.n	8007e58 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8007d80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d82:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007d86:	d874      	bhi.n	8007e72 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007d88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d8e:	d056      	beq.n	8007e3e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8007d90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d96:	d86c      	bhi.n	8007e72 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007d98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d9a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007d9e:	d03b      	beq.n	8007e18 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8007da0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007da2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007da6:	d864      	bhi.n	8007e72 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007da8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007daa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007dae:	d021      	beq.n	8007df4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007db2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007db6:	d85c      	bhi.n	8007e72 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007db8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d004      	beq.n	8007dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8007dbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dc0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007dc4:	d004      	beq.n	8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8007dc6:	e054      	b.n	8007e72 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007dc8:	f000 f8b8 	bl	8007f3c <HAL_RCCEx_GetD3PCLK1Freq>
 8007dcc:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007dce:	e0ac      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007dd0:	4b29      	ldr	r3, [pc, #164]	@ (8007e78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007dd8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007ddc:	d107      	bne.n	8007dee <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007dde:	f107 0318 	add.w	r3, r7, #24
 8007de2:	4618      	mov	r0, r3
 8007de4:	f000 f8c0 	bl	8007f68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007de8:	69fb      	ldr	r3, [r7, #28]
 8007dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007dec:	e09d      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007dee:	2300      	movs	r3, #0
 8007df0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007df2:	e09a      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007df4:	4b20      	ldr	r3, [pc, #128]	@ (8007e78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007dfc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e00:	d107      	bne.n	8007e12 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e02:	f107 030c 	add.w	r3, r7, #12
 8007e06:	4618      	mov	r0, r3
 8007e08:	f000 fa02 	bl	8008210 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e10:	e08b      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e12:	2300      	movs	r3, #0
 8007e14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e16:	e088      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007e18:	4b17      	ldr	r3, [pc, #92]	@ (8007e78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f003 0304 	and.w	r3, r3, #4
 8007e20:	2b04      	cmp	r3, #4
 8007e22:	d109      	bne.n	8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007e24:	4b14      	ldr	r3, [pc, #80]	@ (8007e78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	08db      	lsrs	r3, r3, #3
 8007e2a:	f003 0303 	and.w	r3, r3, #3
 8007e2e:	4a13      	ldr	r2, [pc, #76]	@ (8007e7c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007e30:	fa22 f303 	lsr.w	r3, r2, r3
 8007e34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e36:	e078      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e3c:	e075      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007e3e:	4b0e      	ldr	r3, [pc, #56]	@ (8007e78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e4a:	d102      	bne.n	8007e52 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8007e4c:	4b0c      	ldr	r3, [pc, #48]	@ (8007e80 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e50:	e06b      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e52:	2300      	movs	r3, #0
 8007e54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e56:	e068      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007e58:	4b07      	ldr	r3, [pc, #28]	@ (8007e78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e64:	d102      	bne.n	8007e6c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8007e66:	4b07      	ldr	r3, [pc, #28]	@ (8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007e68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e6a:	e05e      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e70:	e05b      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8007e72:	2300      	movs	r3, #0
 8007e74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e76:	e058      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007e78:	58024400 	.word	0x58024400
 8007e7c:	03d09000 	.word	0x03d09000
 8007e80:	003d0900 	.word	0x003d0900
 8007e84:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007e88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e8c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8007e90:	430b      	orrs	r3, r1
 8007e92:	d148      	bne.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007e94:	4b27      	ldr	r3, [pc, #156]	@ (8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007e96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e98:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007e9c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007e9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ea0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ea4:	d02a      	beq.n	8007efc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8007ea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ea8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007eac:	d838      	bhi.n	8007f20 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8007eae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d004      	beq.n	8007ebe <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8007eb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eb6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007eba:	d00d      	beq.n	8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8007ebc:	e030      	b.n	8007f20 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007ebe:	4b1d      	ldr	r3, [pc, #116]	@ (8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ec6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007eca:	d102      	bne.n	8007ed2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8007ecc:	4b1a      	ldr	r3, [pc, #104]	@ (8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007ece:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ed0:	e02b      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ed6:	e028      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007ed8:	4b16      	ldr	r3, [pc, #88]	@ (8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ee0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007ee4:	d107      	bne.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ee6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007eea:	4618      	mov	r0, r3
 8007eec:	f000 fae4 	bl	80084b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007ef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ef4:	e019      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007efa:	e016      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007efc:	4b0d      	ldr	r3, [pc, #52]	@ (8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f04:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007f08:	d107      	bne.n	8007f1a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f0a:	f107 0318 	add.w	r3, r7, #24
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f000 f82a 	bl	8007f68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007f14:	69fb      	ldr	r3, [r7, #28]
 8007f16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f18:	e007      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f1e:	e004      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007f20:	2300      	movs	r3, #0
 8007f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f24:	e001      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8007f26:	2300      	movs	r3, #0
 8007f28:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8007f2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3740      	adds	r7, #64	@ 0x40
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}
 8007f34:	58024400 	.word	0x58024400
 8007f38:	017d7840 	.word	0x017d7840

08007f3c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007f40:	f7fd ffd4 	bl	8005eec <HAL_RCC_GetHCLKFreq>
 8007f44:	4602      	mov	r2, r0
 8007f46:	4b06      	ldr	r3, [pc, #24]	@ (8007f60 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007f48:	6a1b      	ldr	r3, [r3, #32]
 8007f4a:	091b      	lsrs	r3, r3, #4
 8007f4c:	f003 0307 	and.w	r3, r3, #7
 8007f50:	4904      	ldr	r1, [pc, #16]	@ (8007f64 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007f52:	5ccb      	ldrb	r3, [r1, r3]
 8007f54:	f003 031f 	and.w	r3, r3, #31
 8007f58:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	bd80      	pop	{r7, pc}
 8007f60:	58024400 	.word	0x58024400
 8007f64:	08017624 	.word	0x08017624

08007f68 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b089      	sub	sp, #36	@ 0x24
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007f70:	4ba1      	ldr	r3, [pc, #644]	@ (80081f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f74:	f003 0303 	and.w	r3, r3, #3
 8007f78:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007f7a:	4b9f      	ldr	r3, [pc, #636]	@ (80081f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f7e:	0b1b      	lsrs	r3, r3, #12
 8007f80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007f84:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007f86:	4b9c      	ldr	r3, [pc, #624]	@ (80081f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f8a:	091b      	lsrs	r3, r3, #4
 8007f8c:	f003 0301 	and.w	r3, r3, #1
 8007f90:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007f92:	4b99      	ldr	r3, [pc, #612]	@ (80081f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f96:	08db      	lsrs	r3, r3, #3
 8007f98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007f9c:	693a      	ldr	r2, [r7, #16]
 8007f9e:	fb02 f303 	mul.w	r3, r2, r3
 8007fa2:	ee07 3a90 	vmov	s15, r3
 8007fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007faa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	f000 8111 	beq.w	80081d8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007fb6:	69bb      	ldr	r3, [r7, #24]
 8007fb8:	2b02      	cmp	r3, #2
 8007fba:	f000 8083 	beq.w	80080c4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007fbe:	69bb      	ldr	r3, [r7, #24]
 8007fc0:	2b02      	cmp	r3, #2
 8007fc2:	f200 80a1 	bhi.w	8008108 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007fc6:	69bb      	ldr	r3, [r7, #24]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d003      	beq.n	8007fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007fcc:	69bb      	ldr	r3, [r7, #24]
 8007fce:	2b01      	cmp	r3, #1
 8007fd0:	d056      	beq.n	8008080 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007fd2:	e099      	b.n	8008108 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007fd4:	4b88      	ldr	r3, [pc, #544]	@ (80081f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f003 0320 	and.w	r3, r3, #32
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d02d      	beq.n	800803c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007fe0:	4b85      	ldr	r3, [pc, #532]	@ (80081f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	08db      	lsrs	r3, r3, #3
 8007fe6:	f003 0303 	and.w	r3, r3, #3
 8007fea:	4a84      	ldr	r2, [pc, #528]	@ (80081fc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007fec:	fa22 f303 	lsr.w	r3, r2, r3
 8007ff0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	ee07 3a90 	vmov	s15, r3
 8007ff8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ffc:	697b      	ldr	r3, [r7, #20]
 8007ffe:	ee07 3a90 	vmov	s15, r3
 8008002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008006:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800800a:	4b7b      	ldr	r3, [pc, #492]	@ (80081f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800800c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800800e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008012:	ee07 3a90 	vmov	s15, r3
 8008016:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800801a:	ed97 6a03 	vldr	s12, [r7, #12]
 800801e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008200 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008022:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008026:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800802a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800802e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008032:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008036:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800803a:	e087      	b.n	800814c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	ee07 3a90 	vmov	s15, r3
 8008042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008046:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008204 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800804a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800804e:	4b6a      	ldr	r3, [pc, #424]	@ (80081f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008050:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008052:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008056:	ee07 3a90 	vmov	s15, r3
 800805a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800805e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008062:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008200 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008066:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800806a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800806e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008072:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800807a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800807e:	e065      	b.n	800814c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	ee07 3a90 	vmov	s15, r3
 8008086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800808a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008208 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800808e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008092:	4b59      	ldr	r3, [pc, #356]	@ (80081f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008094:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008096:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800809a:	ee07 3a90 	vmov	s15, r3
 800809e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80080a6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008200 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80080aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80080b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80080c2:	e043      	b.n	800814c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	ee07 3a90 	vmov	s15, r3
 80080ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080ce:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800820c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80080d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080d6:	4b48      	ldr	r3, [pc, #288]	@ (80081f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080de:	ee07 3a90 	vmov	s15, r3
 80080e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80080ea:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008200 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80080ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80080fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008102:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008106:	e021      	b.n	800814c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	ee07 3a90 	vmov	s15, r3
 800810e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008112:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008208 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008116:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800811a:	4b37      	ldr	r3, [pc, #220]	@ (80081f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800811c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800811e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008122:	ee07 3a90 	vmov	s15, r3
 8008126:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800812a:	ed97 6a03 	vldr	s12, [r7, #12]
 800812e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008200 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008132:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008136:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800813a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800813e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008142:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008146:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800814a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800814c:	4b2a      	ldr	r3, [pc, #168]	@ (80081f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800814e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008150:	0a5b      	lsrs	r3, r3, #9
 8008152:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008156:	ee07 3a90 	vmov	s15, r3
 800815a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800815e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008162:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008166:	edd7 6a07 	vldr	s13, [r7, #28]
 800816a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800816e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008172:	ee17 2a90 	vmov	r2, s15
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800817a:	4b1f      	ldr	r3, [pc, #124]	@ (80081f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800817c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800817e:	0c1b      	lsrs	r3, r3, #16
 8008180:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008184:	ee07 3a90 	vmov	s15, r3
 8008188:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800818c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008190:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008194:	edd7 6a07 	vldr	s13, [r7, #28]
 8008198:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800819c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80081a0:	ee17 2a90 	vmov	r2, s15
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80081a8:	4b13      	ldr	r3, [pc, #76]	@ (80081f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081ac:	0e1b      	lsrs	r3, r3, #24
 80081ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80081b2:	ee07 3a90 	vmov	s15, r3
 80081b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80081be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80081c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80081c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80081ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80081ce:	ee17 2a90 	vmov	r2, s15
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80081d6:	e008      	b.n	80081ea <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2200      	movs	r2, #0
 80081dc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2200      	movs	r2, #0
 80081e2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2200      	movs	r2, #0
 80081e8:	609a      	str	r2, [r3, #8]
}
 80081ea:	bf00      	nop
 80081ec:	3724      	adds	r7, #36	@ 0x24
 80081ee:	46bd      	mov	sp, r7
 80081f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f4:	4770      	bx	lr
 80081f6:	bf00      	nop
 80081f8:	58024400 	.word	0x58024400
 80081fc:	03d09000 	.word	0x03d09000
 8008200:	46000000 	.word	0x46000000
 8008204:	4c742400 	.word	0x4c742400
 8008208:	4a742400 	.word	0x4a742400
 800820c:	4bbebc20 	.word	0x4bbebc20

08008210 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008210:	b480      	push	{r7}
 8008212:	b089      	sub	sp, #36	@ 0x24
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008218:	4ba1      	ldr	r3, [pc, #644]	@ (80084a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800821a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800821c:	f003 0303 	and.w	r3, r3, #3
 8008220:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008222:	4b9f      	ldr	r3, [pc, #636]	@ (80084a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008224:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008226:	0d1b      	lsrs	r3, r3, #20
 8008228:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800822c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800822e:	4b9c      	ldr	r3, [pc, #624]	@ (80084a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008232:	0a1b      	lsrs	r3, r3, #8
 8008234:	f003 0301 	and.w	r3, r3, #1
 8008238:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800823a:	4b99      	ldr	r3, [pc, #612]	@ (80084a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800823c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800823e:	08db      	lsrs	r3, r3, #3
 8008240:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008244:	693a      	ldr	r2, [r7, #16]
 8008246:	fb02 f303 	mul.w	r3, r2, r3
 800824a:	ee07 3a90 	vmov	s15, r3
 800824e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008252:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	2b00      	cmp	r3, #0
 800825a:	f000 8111 	beq.w	8008480 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800825e:	69bb      	ldr	r3, [r7, #24]
 8008260:	2b02      	cmp	r3, #2
 8008262:	f000 8083 	beq.w	800836c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008266:	69bb      	ldr	r3, [r7, #24]
 8008268:	2b02      	cmp	r3, #2
 800826a:	f200 80a1 	bhi.w	80083b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800826e:	69bb      	ldr	r3, [r7, #24]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d003      	beq.n	800827c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008274:	69bb      	ldr	r3, [r7, #24]
 8008276:	2b01      	cmp	r3, #1
 8008278:	d056      	beq.n	8008328 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800827a:	e099      	b.n	80083b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800827c:	4b88      	ldr	r3, [pc, #544]	@ (80084a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f003 0320 	and.w	r3, r3, #32
 8008284:	2b00      	cmp	r3, #0
 8008286:	d02d      	beq.n	80082e4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008288:	4b85      	ldr	r3, [pc, #532]	@ (80084a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	08db      	lsrs	r3, r3, #3
 800828e:	f003 0303 	and.w	r3, r3, #3
 8008292:	4a84      	ldr	r2, [pc, #528]	@ (80084a4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008294:	fa22 f303 	lsr.w	r3, r2, r3
 8008298:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	ee07 3a90 	vmov	s15, r3
 80082a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	ee07 3a90 	vmov	s15, r3
 80082aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082b2:	4b7b      	ldr	r3, [pc, #492]	@ (80084a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082ba:	ee07 3a90 	vmov	s15, r3
 80082be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80082c6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80084a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80082ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80082d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082de:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80082e2:	e087      	b.n	80083f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	ee07 3a90 	vmov	s15, r3
 80082ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082ee:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80084ac <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80082f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082f6:	4b6a      	ldr	r3, [pc, #424]	@ (80084a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082fe:	ee07 3a90 	vmov	s15, r3
 8008302:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008306:	ed97 6a03 	vldr	s12, [r7, #12]
 800830a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80084a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800830e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008312:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008316:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800831a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800831e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008322:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008326:	e065      	b.n	80083f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	ee07 3a90 	vmov	s15, r3
 800832e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008332:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80084b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008336:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800833a:	4b59      	ldr	r3, [pc, #356]	@ (80084a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800833c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800833e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008342:	ee07 3a90 	vmov	s15, r3
 8008346:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800834a:	ed97 6a03 	vldr	s12, [r7, #12]
 800834e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80084a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008352:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008356:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800835a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800835e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008362:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008366:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800836a:	e043      	b.n	80083f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	ee07 3a90 	vmov	s15, r3
 8008372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008376:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80084b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800837a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800837e:	4b48      	ldr	r3, [pc, #288]	@ (80084a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008382:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008386:	ee07 3a90 	vmov	s15, r3
 800838a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800838e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008392:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80084a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008396:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800839a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800839e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80083a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80083ae:	e021      	b.n	80083f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	ee07 3a90 	vmov	s15, r3
 80083b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083ba:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80084b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80083be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083c2:	4b37      	ldr	r3, [pc, #220]	@ (80084a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083ca:	ee07 3a90 	vmov	s15, r3
 80083ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80083d6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80084a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80083da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80083e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80083f2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80083f4:	4b2a      	ldr	r3, [pc, #168]	@ (80084a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083f8:	0a5b      	lsrs	r3, r3, #9
 80083fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083fe:	ee07 3a90 	vmov	s15, r3
 8008402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008406:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800840a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800840e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008412:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008416:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800841a:	ee17 2a90 	vmov	r2, s15
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008422:	4b1f      	ldr	r3, [pc, #124]	@ (80084a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008426:	0c1b      	lsrs	r3, r3, #16
 8008428:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800842c:	ee07 3a90 	vmov	s15, r3
 8008430:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008434:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008438:	ee37 7a87 	vadd.f32	s14, s15, s14
 800843c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008440:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008444:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008448:	ee17 2a90 	vmov	r2, s15
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008450:	4b13      	ldr	r3, [pc, #76]	@ (80084a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008454:	0e1b      	lsrs	r3, r3, #24
 8008456:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800845a:	ee07 3a90 	vmov	s15, r3
 800845e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008462:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008466:	ee37 7a87 	vadd.f32	s14, s15, s14
 800846a:	edd7 6a07 	vldr	s13, [r7, #28]
 800846e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008472:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008476:	ee17 2a90 	vmov	r2, s15
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800847e:	e008      	b.n	8008492 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2200      	movs	r2, #0
 8008484:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2200      	movs	r2, #0
 800848a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2200      	movs	r2, #0
 8008490:	609a      	str	r2, [r3, #8]
}
 8008492:	bf00      	nop
 8008494:	3724      	adds	r7, #36	@ 0x24
 8008496:	46bd      	mov	sp, r7
 8008498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849c:	4770      	bx	lr
 800849e:	bf00      	nop
 80084a0:	58024400 	.word	0x58024400
 80084a4:	03d09000 	.word	0x03d09000
 80084a8:	46000000 	.word	0x46000000
 80084ac:	4c742400 	.word	0x4c742400
 80084b0:	4a742400 	.word	0x4a742400
 80084b4:	4bbebc20 	.word	0x4bbebc20

080084b8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b089      	sub	sp, #36	@ 0x24
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80084c0:	4ba0      	ldr	r3, [pc, #640]	@ (8008744 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80084c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084c4:	f003 0303 	and.w	r3, r3, #3
 80084c8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80084ca:	4b9e      	ldr	r3, [pc, #632]	@ (8008744 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80084cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084ce:	091b      	lsrs	r3, r3, #4
 80084d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80084d4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80084d6:	4b9b      	ldr	r3, [pc, #620]	@ (8008744 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80084d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084da:	f003 0301 	and.w	r3, r3, #1
 80084de:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80084e0:	4b98      	ldr	r3, [pc, #608]	@ (8008744 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80084e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084e4:	08db      	lsrs	r3, r3, #3
 80084e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80084ea:	693a      	ldr	r2, [r7, #16]
 80084ec:	fb02 f303 	mul.w	r3, r2, r3
 80084f0:	ee07 3a90 	vmov	s15, r3
 80084f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084f8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	f000 8111 	beq.w	8008726 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008504:	69bb      	ldr	r3, [r7, #24]
 8008506:	2b02      	cmp	r3, #2
 8008508:	f000 8083 	beq.w	8008612 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800850c:	69bb      	ldr	r3, [r7, #24]
 800850e:	2b02      	cmp	r3, #2
 8008510:	f200 80a1 	bhi.w	8008656 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008514:	69bb      	ldr	r3, [r7, #24]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d003      	beq.n	8008522 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800851a:	69bb      	ldr	r3, [r7, #24]
 800851c:	2b01      	cmp	r3, #1
 800851e:	d056      	beq.n	80085ce <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008520:	e099      	b.n	8008656 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008522:	4b88      	ldr	r3, [pc, #544]	@ (8008744 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f003 0320 	and.w	r3, r3, #32
 800852a:	2b00      	cmp	r3, #0
 800852c:	d02d      	beq.n	800858a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800852e:	4b85      	ldr	r3, [pc, #532]	@ (8008744 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	08db      	lsrs	r3, r3, #3
 8008534:	f003 0303 	and.w	r3, r3, #3
 8008538:	4a83      	ldr	r2, [pc, #524]	@ (8008748 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800853a:	fa22 f303 	lsr.w	r3, r2, r3
 800853e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	ee07 3a90 	vmov	s15, r3
 8008546:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800854a:	697b      	ldr	r3, [r7, #20]
 800854c:	ee07 3a90 	vmov	s15, r3
 8008550:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008554:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008558:	4b7a      	ldr	r3, [pc, #488]	@ (8008744 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800855a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800855c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008560:	ee07 3a90 	vmov	s15, r3
 8008564:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008568:	ed97 6a03 	vldr	s12, [r7, #12]
 800856c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800874c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008570:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008574:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008578:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800857c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008580:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008584:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008588:	e087      	b.n	800869a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	ee07 3a90 	vmov	s15, r3
 8008590:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008594:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8008750 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008598:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800859c:	4b69      	ldr	r3, [pc, #420]	@ (8008744 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800859e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085a4:	ee07 3a90 	vmov	s15, r3
 80085a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085ac:	ed97 6a03 	vldr	s12, [r7, #12]
 80085b0:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800874c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80085b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085bc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80085c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085c8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80085cc:	e065      	b.n	800869a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	ee07 3a90 	vmov	s15, r3
 80085d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085d8:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8008754 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80085dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085e0:	4b58      	ldr	r3, [pc, #352]	@ (8008744 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80085e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085e8:	ee07 3a90 	vmov	s15, r3
 80085ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085f0:	ed97 6a03 	vldr	s12, [r7, #12]
 80085f4:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800874c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80085f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008600:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008604:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008608:	ee67 7a27 	vmul.f32	s15, s14, s15
 800860c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008610:	e043      	b.n	800869a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	ee07 3a90 	vmov	s15, r3
 8008618:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800861c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8008758 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008620:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008624:	4b47      	ldr	r3, [pc, #284]	@ (8008744 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008628:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800862c:	ee07 3a90 	vmov	s15, r3
 8008630:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008634:	ed97 6a03 	vldr	s12, [r7, #12]
 8008638:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800874c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800863c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008640:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008644:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008648:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800864c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008650:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008654:	e021      	b.n	800869a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	ee07 3a90 	vmov	s15, r3
 800865c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008660:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8008750 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008664:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008668:	4b36      	ldr	r3, [pc, #216]	@ (8008744 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800866a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800866c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008670:	ee07 3a90 	vmov	s15, r3
 8008674:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008678:	ed97 6a03 	vldr	s12, [r7, #12]
 800867c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800874c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008680:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008684:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008688:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800868c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008690:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008694:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008698:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800869a:	4b2a      	ldr	r3, [pc, #168]	@ (8008744 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800869c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800869e:	0a5b      	lsrs	r3, r3, #9
 80086a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086a4:	ee07 3a90 	vmov	s15, r3
 80086a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80086b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80086b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80086b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086c0:	ee17 2a90 	vmov	r2, s15
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80086c8:	4b1e      	ldr	r3, [pc, #120]	@ (8008744 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80086ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086cc:	0c1b      	lsrs	r3, r3, #16
 80086ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086d2:	ee07 3a90 	vmov	s15, r3
 80086d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80086de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80086e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80086e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086ee:	ee17 2a90 	vmov	r2, s15
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80086f6:	4b13      	ldr	r3, [pc, #76]	@ (8008744 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80086f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086fa:	0e1b      	lsrs	r3, r3, #24
 80086fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008700:	ee07 3a90 	vmov	s15, r3
 8008704:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008708:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800870c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008710:	edd7 6a07 	vldr	s13, [r7, #28]
 8008714:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008718:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800871c:	ee17 2a90 	vmov	r2, s15
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008724:	e008      	b.n	8008738 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2200      	movs	r2, #0
 800872a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2200      	movs	r2, #0
 8008730:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2200      	movs	r2, #0
 8008736:	609a      	str	r2, [r3, #8]
}
 8008738:	bf00      	nop
 800873a:	3724      	adds	r7, #36	@ 0x24
 800873c:	46bd      	mov	sp, r7
 800873e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008742:	4770      	bx	lr
 8008744:	58024400 	.word	0x58024400
 8008748:	03d09000 	.word	0x03d09000
 800874c:	46000000 	.word	0x46000000
 8008750:	4c742400 	.word	0x4c742400
 8008754:	4a742400 	.word	0x4a742400
 8008758:	4bbebc20 	.word	0x4bbebc20

0800875c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b084      	sub	sp, #16
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
 8008764:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008766:	2300      	movs	r3, #0
 8008768:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800876a:	4b53      	ldr	r3, [pc, #332]	@ (80088b8 <RCCEx_PLL2_Config+0x15c>)
 800876c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800876e:	f003 0303 	and.w	r3, r3, #3
 8008772:	2b03      	cmp	r3, #3
 8008774:	d101      	bne.n	800877a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008776:	2301      	movs	r3, #1
 8008778:	e099      	b.n	80088ae <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800877a:	4b4f      	ldr	r3, [pc, #316]	@ (80088b8 <RCCEx_PLL2_Config+0x15c>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4a4e      	ldr	r2, [pc, #312]	@ (80088b8 <RCCEx_PLL2_Config+0x15c>)
 8008780:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008784:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008786:	f7fb fb0d 	bl	8003da4 <HAL_GetTick>
 800878a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800878c:	e008      	b.n	80087a0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800878e:	f7fb fb09 	bl	8003da4 <HAL_GetTick>
 8008792:	4602      	mov	r2, r0
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	1ad3      	subs	r3, r2, r3
 8008798:	2b02      	cmp	r3, #2
 800879a:	d901      	bls.n	80087a0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800879c:	2303      	movs	r3, #3
 800879e:	e086      	b.n	80088ae <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80087a0:	4b45      	ldr	r3, [pc, #276]	@ (80088b8 <RCCEx_PLL2_Config+0x15c>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d1f0      	bne.n	800878e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80087ac:	4b42      	ldr	r3, [pc, #264]	@ (80088b8 <RCCEx_PLL2_Config+0x15c>)
 80087ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087b0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	031b      	lsls	r3, r3, #12
 80087ba:	493f      	ldr	r1, [pc, #252]	@ (80088b8 <RCCEx_PLL2_Config+0x15c>)
 80087bc:	4313      	orrs	r3, r2
 80087be:	628b      	str	r3, [r1, #40]	@ 0x28
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	685b      	ldr	r3, [r3, #4]
 80087c4:	3b01      	subs	r3, #1
 80087c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	689b      	ldr	r3, [r3, #8]
 80087ce:	3b01      	subs	r3, #1
 80087d0:	025b      	lsls	r3, r3, #9
 80087d2:	b29b      	uxth	r3, r3
 80087d4:	431a      	orrs	r2, r3
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	68db      	ldr	r3, [r3, #12]
 80087da:	3b01      	subs	r3, #1
 80087dc:	041b      	lsls	r3, r3, #16
 80087de:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80087e2:	431a      	orrs	r2, r3
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	691b      	ldr	r3, [r3, #16]
 80087e8:	3b01      	subs	r3, #1
 80087ea:	061b      	lsls	r3, r3, #24
 80087ec:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80087f0:	4931      	ldr	r1, [pc, #196]	@ (80088b8 <RCCEx_PLL2_Config+0x15c>)
 80087f2:	4313      	orrs	r3, r2
 80087f4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80087f6:	4b30      	ldr	r3, [pc, #192]	@ (80088b8 <RCCEx_PLL2_Config+0x15c>)
 80087f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087fa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	695b      	ldr	r3, [r3, #20]
 8008802:	492d      	ldr	r1, [pc, #180]	@ (80088b8 <RCCEx_PLL2_Config+0x15c>)
 8008804:	4313      	orrs	r3, r2
 8008806:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008808:	4b2b      	ldr	r3, [pc, #172]	@ (80088b8 <RCCEx_PLL2_Config+0x15c>)
 800880a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800880c:	f023 0220 	bic.w	r2, r3, #32
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	699b      	ldr	r3, [r3, #24]
 8008814:	4928      	ldr	r1, [pc, #160]	@ (80088b8 <RCCEx_PLL2_Config+0x15c>)
 8008816:	4313      	orrs	r3, r2
 8008818:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800881a:	4b27      	ldr	r3, [pc, #156]	@ (80088b8 <RCCEx_PLL2_Config+0x15c>)
 800881c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800881e:	4a26      	ldr	r2, [pc, #152]	@ (80088b8 <RCCEx_PLL2_Config+0x15c>)
 8008820:	f023 0310 	bic.w	r3, r3, #16
 8008824:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008826:	4b24      	ldr	r3, [pc, #144]	@ (80088b8 <RCCEx_PLL2_Config+0x15c>)
 8008828:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800882a:	4b24      	ldr	r3, [pc, #144]	@ (80088bc <RCCEx_PLL2_Config+0x160>)
 800882c:	4013      	ands	r3, r2
 800882e:	687a      	ldr	r2, [r7, #4]
 8008830:	69d2      	ldr	r2, [r2, #28]
 8008832:	00d2      	lsls	r2, r2, #3
 8008834:	4920      	ldr	r1, [pc, #128]	@ (80088b8 <RCCEx_PLL2_Config+0x15c>)
 8008836:	4313      	orrs	r3, r2
 8008838:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800883a:	4b1f      	ldr	r3, [pc, #124]	@ (80088b8 <RCCEx_PLL2_Config+0x15c>)
 800883c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800883e:	4a1e      	ldr	r2, [pc, #120]	@ (80088b8 <RCCEx_PLL2_Config+0x15c>)
 8008840:	f043 0310 	orr.w	r3, r3, #16
 8008844:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d106      	bne.n	800885a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800884c:	4b1a      	ldr	r3, [pc, #104]	@ (80088b8 <RCCEx_PLL2_Config+0x15c>)
 800884e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008850:	4a19      	ldr	r2, [pc, #100]	@ (80088b8 <RCCEx_PLL2_Config+0x15c>)
 8008852:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008856:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008858:	e00f      	b.n	800887a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	2b01      	cmp	r3, #1
 800885e:	d106      	bne.n	800886e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008860:	4b15      	ldr	r3, [pc, #84]	@ (80088b8 <RCCEx_PLL2_Config+0x15c>)
 8008862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008864:	4a14      	ldr	r2, [pc, #80]	@ (80088b8 <RCCEx_PLL2_Config+0x15c>)
 8008866:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800886a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800886c:	e005      	b.n	800887a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800886e:	4b12      	ldr	r3, [pc, #72]	@ (80088b8 <RCCEx_PLL2_Config+0x15c>)
 8008870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008872:	4a11      	ldr	r2, [pc, #68]	@ (80088b8 <RCCEx_PLL2_Config+0x15c>)
 8008874:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008878:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800887a:	4b0f      	ldr	r3, [pc, #60]	@ (80088b8 <RCCEx_PLL2_Config+0x15c>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	4a0e      	ldr	r2, [pc, #56]	@ (80088b8 <RCCEx_PLL2_Config+0x15c>)
 8008880:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008884:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008886:	f7fb fa8d 	bl	8003da4 <HAL_GetTick>
 800888a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800888c:	e008      	b.n	80088a0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800888e:	f7fb fa89 	bl	8003da4 <HAL_GetTick>
 8008892:	4602      	mov	r2, r0
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	1ad3      	subs	r3, r2, r3
 8008898:	2b02      	cmp	r3, #2
 800889a:	d901      	bls.n	80088a0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800889c:	2303      	movs	r3, #3
 800889e:	e006      	b.n	80088ae <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80088a0:	4b05      	ldr	r3, [pc, #20]	@ (80088b8 <RCCEx_PLL2_Config+0x15c>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d0f0      	beq.n	800888e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80088ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3710      	adds	r7, #16
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}
 80088b6:	bf00      	nop
 80088b8:	58024400 	.word	0x58024400
 80088bc:	ffff0007 	.word	0xffff0007

080088c0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b084      	sub	sp, #16
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
 80088c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80088ca:	2300      	movs	r3, #0
 80088cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80088ce:	4b53      	ldr	r3, [pc, #332]	@ (8008a1c <RCCEx_PLL3_Config+0x15c>)
 80088d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088d2:	f003 0303 	and.w	r3, r3, #3
 80088d6:	2b03      	cmp	r3, #3
 80088d8:	d101      	bne.n	80088de <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80088da:	2301      	movs	r3, #1
 80088dc:	e099      	b.n	8008a12 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80088de:	4b4f      	ldr	r3, [pc, #316]	@ (8008a1c <RCCEx_PLL3_Config+0x15c>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4a4e      	ldr	r2, [pc, #312]	@ (8008a1c <RCCEx_PLL3_Config+0x15c>)
 80088e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80088e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088ea:	f7fb fa5b 	bl	8003da4 <HAL_GetTick>
 80088ee:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80088f0:	e008      	b.n	8008904 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80088f2:	f7fb fa57 	bl	8003da4 <HAL_GetTick>
 80088f6:	4602      	mov	r2, r0
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	1ad3      	subs	r3, r2, r3
 80088fc:	2b02      	cmp	r3, #2
 80088fe:	d901      	bls.n	8008904 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008900:	2303      	movs	r3, #3
 8008902:	e086      	b.n	8008a12 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008904:	4b45      	ldr	r3, [pc, #276]	@ (8008a1c <RCCEx_PLL3_Config+0x15c>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800890c:	2b00      	cmp	r3, #0
 800890e:	d1f0      	bne.n	80088f2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008910:	4b42      	ldr	r3, [pc, #264]	@ (8008a1c <RCCEx_PLL3_Config+0x15c>)
 8008912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008914:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	051b      	lsls	r3, r3, #20
 800891e:	493f      	ldr	r1, [pc, #252]	@ (8008a1c <RCCEx_PLL3_Config+0x15c>)
 8008920:	4313      	orrs	r3, r2
 8008922:	628b      	str	r3, [r1, #40]	@ 0x28
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	685b      	ldr	r3, [r3, #4]
 8008928:	3b01      	subs	r3, #1
 800892a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	689b      	ldr	r3, [r3, #8]
 8008932:	3b01      	subs	r3, #1
 8008934:	025b      	lsls	r3, r3, #9
 8008936:	b29b      	uxth	r3, r3
 8008938:	431a      	orrs	r2, r3
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	68db      	ldr	r3, [r3, #12]
 800893e:	3b01      	subs	r3, #1
 8008940:	041b      	lsls	r3, r3, #16
 8008942:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008946:	431a      	orrs	r2, r3
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	691b      	ldr	r3, [r3, #16]
 800894c:	3b01      	subs	r3, #1
 800894e:	061b      	lsls	r3, r3, #24
 8008950:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008954:	4931      	ldr	r1, [pc, #196]	@ (8008a1c <RCCEx_PLL3_Config+0x15c>)
 8008956:	4313      	orrs	r3, r2
 8008958:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800895a:	4b30      	ldr	r3, [pc, #192]	@ (8008a1c <RCCEx_PLL3_Config+0x15c>)
 800895c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800895e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	695b      	ldr	r3, [r3, #20]
 8008966:	492d      	ldr	r1, [pc, #180]	@ (8008a1c <RCCEx_PLL3_Config+0x15c>)
 8008968:	4313      	orrs	r3, r2
 800896a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800896c:	4b2b      	ldr	r3, [pc, #172]	@ (8008a1c <RCCEx_PLL3_Config+0x15c>)
 800896e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008970:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	699b      	ldr	r3, [r3, #24]
 8008978:	4928      	ldr	r1, [pc, #160]	@ (8008a1c <RCCEx_PLL3_Config+0x15c>)
 800897a:	4313      	orrs	r3, r2
 800897c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800897e:	4b27      	ldr	r3, [pc, #156]	@ (8008a1c <RCCEx_PLL3_Config+0x15c>)
 8008980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008982:	4a26      	ldr	r2, [pc, #152]	@ (8008a1c <RCCEx_PLL3_Config+0x15c>)
 8008984:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008988:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800898a:	4b24      	ldr	r3, [pc, #144]	@ (8008a1c <RCCEx_PLL3_Config+0x15c>)
 800898c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800898e:	4b24      	ldr	r3, [pc, #144]	@ (8008a20 <RCCEx_PLL3_Config+0x160>)
 8008990:	4013      	ands	r3, r2
 8008992:	687a      	ldr	r2, [r7, #4]
 8008994:	69d2      	ldr	r2, [r2, #28]
 8008996:	00d2      	lsls	r2, r2, #3
 8008998:	4920      	ldr	r1, [pc, #128]	@ (8008a1c <RCCEx_PLL3_Config+0x15c>)
 800899a:	4313      	orrs	r3, r2
 800899c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800899e:	4b1f      	ldr	r3, [pc, #124]	@ (8008a1c <RCCEx_PLL3_Config+0x15c>)
 80089a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089a2:	4a1e      	ldr	r2, [pc, #120]	@ (8008a1c <RCCEx_PLL3_Config+0x15c>)
 80089a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80089a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d106      	bne.n	80089be <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80089b0:	4b1a      	ldr	r3, [pc, #104]	@ (8008a1c <RCCEx_PLL3_Config+0x15c>)
 80089b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089b4:	4a19      	ldr	r2, [pc, #100]	@ (8008a1c <RCCEx_PLL3_Config+0x15c>)
 80089b6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80089ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80089bc:	e00f      	b.n	80089de <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	d106      	bne.n	80089d2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80089c4:	4b15      	ldr	r3, [pc, #84]	@ (8008a1c <RCCEx_PLL3_Config+0x15c>)
 80089c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089c8:	4a14      	ldr	r2, [pc, #80]	@ (8008a1c <RCCEx_PLL3_Config+0x15c>)
 80089ca:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80089ce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80089d0:	e005      	b.n	80089de <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80089d2:	4b12      	ldr	r3, [pc, #72]	@ (8008a1c <RCCEx_PLL3_Config+0x15c>)
 80089d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089d6:	4a11      	ldr	r2, [pc, #68]	@ (8008a1c <RCCEx_PLL3_Config+0x15c>)
 80089d8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80089dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80089de:	4b0f      	ldr	r3, [pc, #60]	@ (8008a1c <RCCEx_PLL3_Config+0x15c>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	4a0e      	ldr	r2, [pc, #56]	@ (8008a1c <RCCEx_PLL3_Config+0x15c>)
 80089e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80089e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089ea:	f7fb f9db 	bl	8003da4 <HAL_GetTick>
 80089ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80089f0:	e008      	b.n	8008a04 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80089f2:	f7fb f9d7 	bl	8003da4 <HAL_GetTick>
 80089f6:	4602      	mov	r2, r0
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	1ad3      	subs	r3, r2, r3
 80089fc:	2b02      	cmp	r3, #2
 80089fe:	d901      	bls.n	8008a04 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008a00:	2303      	movs	r3, #3
 8008a02:	e006      	b.n	8008a12 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008a04:	4b05      	ldr	r3, [pc, #20]	@ (8008a1c <RCCEx_PLL3_Config+0x15c>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d0f0      	beq.n	80089f2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	3710      	adds	r7, #16
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}
 8008a1a:	bf00      	nop
 8008a1c:	58024400 	.word	0x58024400
 8008a20:	ffff0007 	.word	0xffff0007

08008a24 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b08a      	sub	sp, #40	@ 0x28
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d101      	bne.n	8008a36 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008a32:	2301      	movs	r3, #1
 8008a34:	e075      	b.n	8008b22 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008a3c:	b2db      	uxtb	r3, r3
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d105      	bne.n	8008a4e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2200      	movs	r2, #0
 8008a46:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f7f8 fc2f 	bl	80012ac <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2204      	movs	r2, #4
 8008a52:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f000 f868 	bl	8008b2c <HAL_SD_InitCard>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d001      	beq.n	8008a66 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008a62:	2301      	movs	r3, #1
 8008a64:	e05d      	b.n	8008b22 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8008a66:	f107 0308 	add.w	r3, r7, #8
 8008a6a:	4619      	mov	r1, r3
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f000 fdaf 	bl	80095d0 <HAL_SD_GetCardStatus>
 8008a72:	4603      	mov	r3, r0
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d001      	beq.n	8008a7c <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8008a78:	2301      	movs	r3, #1
 8008a7a:	e052      	b.n	8008b22 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8008a7c:	7e3b      	ldrb	r3, [r7, #24]
 8008a7e:	b2db      	uxtb	r3, r3
 8008a80:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8008a82:	7e7b      	ldrb	r3, [r7, #25]
 8008a84:	b2db      	uxtb	r3, r3
 8008a86:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a8c:	2b01      	cmp	r3, #1
 8008a8e:	d10a      	bne.n	8008aa6 <HAL_SD_Init+0x82>
 8008a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d102      	bne.n	8008a9c <HAL_SD_Init+0x78>
 8008a96:	6a3b      	ldr	r3, [r7, #32]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d004      	beq.n	8008aa6 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008aa2:	659a      	str	r2, [r3, #88]	@ 0x58
 8008aa4:	e00b      	b.n	8008abe <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008aaa:	2b01      	cmp	r3, #1
 8008aac:	d104      	bne.n	8008ab8 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008ab4:	659a      	str	r2, [r3, #88]	@ 0x58
 8008ab6:	e002      	b.n	8008abe <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2200      	movs	r2, #0
 8008abc:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	68db      	ldr	r3, [r3, #12]
 8008ac2:	4619      	mov	r1, r3
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f000 fe6d 	bl	80097a4 <HAL_SD_ConfigWideBusOperation>
 8008aca:	4603      	mov	r3, r0
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d001      	beq.n	8008ad4 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	e026      	b.n	8008b22 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8008ad4:	f7fb f966 	bl	8003da4 <HAL_GetTick>
 8008ad8:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008ada:	e011      	b.n	8008b00 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008adc:	f7fb f962 	bl	8003da4 <HAL_GetTick>
 8008ae0:	4602      	mov	r2, r0
 8008ae2:	69fb      	ldr	r3, [r7, #28]
 8008ae4:	1ad3      	subs	r3, r2, r3
 8008ae6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008aea:	d109      	bne.n	8008b00 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008af2:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2201      	movs	r2, #1
 8008af8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8008afc:	2303      	movs	r3, #3
 8008afe:	e010      	b.n	8008b22 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f000 ff61 	bl	80099c8 <HAL_SD_GetCardState>
 8008b06:	4603      	mov	r3, r0
 8008b08:	2b04      	cmp	r3, #4
 8008b0a:	d1e7      	bne.n	8008adc <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2200      	movs	r2, #0
 8008b16:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2201      	movs	r2, #1
 8008b1c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8008b20:	2300      	movs	r3, #0
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3728      	adds	r7, #40	@ 0x28
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}
	...

08008b2c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008b2c:	b590      	push	{r4, r7, lr}
 8008b2e:	b08d      	sub	sp, #52	@ 0x34
 8008b30:	af02      	add	r7, sp, #8
 8008b32:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008b34:	2300      	movs	r3, #0
 8008b36:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008b40:	2300      	movs	r3, #0
 8008b42:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8008b44:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8008b48:	f04f 0100 	mov.w	r1, #0
 8008b4c:	f7fe fc76 	bl	800743c <HAL_RCCEx_GetPeriphCLKFreq>
 8008b50:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8008b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d109      	bne.n	8008b6c <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8008b66:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008b68:	2301      	movs	r3, #1
 8008b6a:	e070      	b.n	8008c4e <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8008b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b6e:	0a1b      	lsrs	r3, r3, #8
 8008b70:	4a39      	ldr	r2, [pc, #228]	@ (8008c58 <HAL_SD_InitCard+0x12c>)
 8008b72:	fba2 2303 	umull	r2, r3, r2, r3
 8008b76:	091b      	lsrs	r3, r3, #4
 8008b78:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681c      	ldr	r4, [r3, #0]
 8008b7e:	466a      	mov	r2, sp
 8008b80:	f107 0318 	add.w	r3, r7, #24
 8008b84:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008b88:	e882 0003 	stmia.w	r2, {r0, r1}
 8008b8c:	f107 030c 	add.w	r3, r7, #12
 8008b90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008b92:	4620      	mov	r0, r4
 8008b94:	f005 fb8e 	bl	800e2b4 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f005 fbd1 	bl	800e344 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8008ba2:	69fb      	ldr	r3, [r7, #28]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d005      	beq.n	8008bb4 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8008ba8:	69fb      	ldr	r3, [r7, #28]
 8008baa:	005b      	lsls	r3, r3, #1
 8008bac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bb2:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8008bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d007      	beq.n	8008bca <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8008bba:	4a28      	ldr	r2, [pc, #160]	@ (8008c5c <HAL_SD_InitCard+0x130>)
 8008bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bc2:	3301      	adds	r3, #1
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f7fb f8f9 	bl	8003dbc <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f000 ffea 	bl	8009ba4 <SD_PowerON>
 8008bd0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008bd2:	6a3b      	ldr	r3, [r7, #32]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d00b      	beq.n	8008bf0 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2201      	movs	r2, #1
 8008bdc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008be4:	6a3b      	ldr	r3, [r7, #32]
 8008be6:	431a      	orrs	r2, r3
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008bec:	2301      	movs	r3, #1
 8008bee:	e02e      	b.n	8008c4e <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f000 ff09 	bl	8009a08 <SD_InitCard>
 8008bf6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008bf8:	6a3b      	ldr	r3, [r7, #32]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d00b      	beq.n	8008c16 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2201      	movs	r2, #1
 8008c02:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008c0a:	6a3b      	ldr	r3, [r7, #32]
 8008c0c:	431a      	orrs	r2, r3
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008c12:	2301      	movs	r3, #1
 8008c14:	e01b      	b.n	8008c4e <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f005 fc26 	bl	800e470 <SDMMC_CmdBlockLength>
 8008c24:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008c26:	6a3b      	ldr	r3, [r7, #32]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d00f      	beq.n	8008c4c <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4a0b      	ldr	r2, [pc, #44]	@ (8008c60 <HAL_SD_InitCard+0x134>)
 8008c32:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008c38:	6a3b      	ldr	r3, [r7, #32]
 8008c3a:	431a      	orrs	r2, r3
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2201      	movs	r2, #1
 8008c44:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8008c48:	2301      	movs	r3, #1
 8008c4a:	e000      	b.n	8008c4e <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8008c4c:	2300      	movs	r3, #0
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	372c      	adds	r7, #44	@ 0x2c
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd90      	pop	{r4, r7, pc}
 8008c56:	bf00      	nop
 8008c58:	014f8b59 	.word	0x014f8b59
 8008c5c:	00012110 	.word	0x00012110
 8008c60:	1fe00fff 	.word	0x1fe00fff

08008c64 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b08c      	sub	sp, #48	@ 0x30
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	60f8      	str	r0, [r7, #12]
 8008c6c:	60b9      	str	r1, [r7, #8]
 8008c6e:	607a      	str	r2, [r7, #4]
 8008c70:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d107      	bne.n	8008c8c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c80:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008c88:	2301      	movs	r3, #1
 8008c8a:	e08d      	b.n	8008da8 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008c92:	b2db      	uxtb	r3, r3
 8008c94:	2b01      	cmp	r3, #1
 8008c96:	f040 8086 	bne.w	8008da6 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008ca0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	441a      	add	r2, r3
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008caa:	429a      	cmp	r2, r3
 8008cac:	d907      	bls.n	8008cbe <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cb2:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8008cba:	2301      	movs	r3, #1
 8008cbc:	e074      	b.n	8008da8 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	2203      	movs	r2, #3
 8008cc2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	68ba      	ldr	r2, [r7, #8]
 8008cd2:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	025a      	lsls	r2, r3, #9
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ce0:	2b01      	cmp	r3, #1
 8008ce2:	d002      	beq.n	8008cea <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8008ce4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ce6:	025b      	lsls	r3, r3, #9
 8008ce8:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008cea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008cee:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	025b      	lsls	r3, r3, #9
 8008cf4:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008cf6:	2390      	movs	r3, #144	@ 0x90
 8008cf8:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008cfa:	2302      	movs	r3, #2
 8008cfc:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008d02:	2300      	movs	r3, #0
 8008d04:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f107 0210 	add.w	r2, r7, #16
 8008d0e:	4611      	mov	r1, r2
 8008d10:	4618      	mov	r0, r3
 8008d12:	f005 fb81 	bl	800e418 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	68da      	ldr	r2, [r3, #12]
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008d24:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	68ba      	ldr	r2, [r7, #8]
 8008d2c:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	2201      	movs	r2, #1
 8008d34:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	2b01      	cmp	r3, #1
 8008d3a:	d90a      	bls.n	8008d52 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	2282      	movs	r2, #130	@ 0x82
 8008d40:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f005 fbd7 	bl	800e4fc <SDMMC_CmdReadMultiBlock>
 8008d4e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8008d50:	e009      	b.n	8008d66 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	2281      	movs	r2, #129	@ 0x81
 8008d56:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f005 fba9 	bl	800e4b6 <SDMMC_CmdReadSingleBlock>
 8008d64:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8008d66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d012      	beq.n	8008d92 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4a0f      	ldr	r2, [pc, #60]	@ (8008db0 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8008d72:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008d78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d7a:	431a      	orrs	r2, r3
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	2201      	movs	r2, #1
 8008d84:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8008d8e:	2301      	movs	r3, #1
 8008d90:	e00a      	b.n	8008da8 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8008da0:	63da      	str	r2, [r3, #60]	@ 0x3c


    return HAL_OK;
 8008da2:	2300      	movs	r3, #0
 8008da4:	e000      	b.n	8008da8 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8008da6:	2302      	movs	r3, #2
  }
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	3730      	adds	r7, #48	@ 0x30
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}
 8008db0:	1fe00fff 	.word	0x1fe00fff

08008db4 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b08c      	sub	sp, #48	@ 0x30
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	60f8      	str	r0, [r7, #12]
 8008dbc:	60b9      	str	r1, [r7, #8]
 8008dbe:	607a      	str	r2, [r7, #4]
 8008dc0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d107      	bne.n	8008ddc <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008dd0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008dd8:	2301      	movs	r3, #1
 8008dda:	e08d      	b.n	8008ef8 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008de2:	b2db      	uxtb	r3, r3
 8008de4:	2b01      	cmp	r3, #1
 8008de6:	f040 8086 	bne.w	8008ef6 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	2200      	movs	r2, #0
 8008dee:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008df0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	441a      	add	r2, r3
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008dfa:	429a      	cmp	r2, r3
 8008dfc:	d907      	bls.n	8008e0e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e02:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	e074      	b.n	8008ef8 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	2203      	movs	r2, #3
 8008e12:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	68ba      	ldr	r2, [r7, #8]
 8008e22:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	025a      	lsls	r2, r3, #9
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e30:	2b01      	cmp	r3, #1
 8008e32:	d002      	beq.n	8008e3a <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8008e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e36:	025b      	lsls	r3, r3, #9
 8008e38:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008e3a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008e3e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	025b      	lsls	r3, r3, #9
 8008e44:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008e46:	2390      	movs	r3, #144	@ 0x90
 8008e48:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008e52:	2300      	movs	r3, #0
 8008e54:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f107 0210 	add.w	r2, r7, #16
 8008e5e:	4611      	mov	r1, r2
 8008e60:	4618      	mov	r0, r3
 8008e62:	f005 fad9 	bl	800e418 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	68da      	ldr	r2, [r3, #12]
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008e74:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	68ba      	ldr	r2, [r7, #8]
 8008e7c:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	2201      	movs	r2, #1
 8008e84:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	2b01      	cmp	r3, #1
 8008e8a:	d90a      	bls.n	8008ea2 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	22a0      	movs	r2, #160	@ 0xa0
 8008e90:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f005 fb75 	bl	800e588 <SDMMC_CmdWriteMultiBlock>
 8008e9e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8008ea0:	e009      	b.n	8008eb6 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	2290      	movs	r2, #144	@ 0x90
 8008ea6:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f005 fb47 	bl	800e542 <SDMMC_CmdWriteSingleBlock>
 8008eb4:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8008eb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d012      	beq.n	8008ee2 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	4a0f      	ldr	r2, [pc, #60]	@ (8008f00 <HAL_SD_WriteBlocks_DMA+0x14c>)
 8008ec2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eca:	431a      	orrs	r2, r3
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	2200      	movs	r2, #0
 8008edc:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8008ede:	2301      	movs	r3, #1
 8008ee0:	e00a      	b.n	8008ef8 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 8008ef0:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	e000      	b.n	8008ef8 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8008ef6:	2302      	movs	r3, #2
  }
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	3730      	adds	r7, #48	@ 0x30
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}
 8008f00:	1fe00fff 	.word	0x1fe00fff

08008f04 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b084      	sub	sp, #16
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f10:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d008      	beq.n	8008f32 <HAL_SD_IRQHandler+0x2e>
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	f003 0308 	and.w	r3, r3, #8
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d003      	beq.n	8008f32 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f001 f926 	bl	800a17c <SD_Read_IT>
 8008f30:	e19a      	b.n	8009268 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	f000 80ac 	beq.w	800909a <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008f4a:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681a      	ldr	r2, [r3, #0]
 8008f56:	4b59      	ldr	r3, [pc, #356]	@ (80090bc <HAL_SD_IRQHandler+0x1b8>)
 8008f58:	400b      	ands	r3, r1
 8008f5a:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8008f6a:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	68da      	ldr	r2, [r3, #12]
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008f7a:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	f003 0308 	and.w	r3, r3, #8
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d038      	beq.n	8008ff8 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	f003 0302 	and.w	r3, r3, #2
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d104      	bne.n	8008f9a <HAL_SD_IRQHandler+0x96>
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	f003 0320 	and.w	r3, r3, #32
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d011      	beq.n	8008fbe <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f005 fb16 	bl	800e5d0 <SDMMC_CmdStopTransfer>
 8008fa4:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d008      	beq.n	8008fbe <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	431a      	orrs	r2, r3
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f000 f95b 	bl	8009274 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	4a3f      	ldr	r2, [pc, #252]	@ (80090c0 <HAL_SD_IRQHandler+0x1bc>)
 8008fc4:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2201      	movs	r2, #1
 8008fca:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	f003 0301 	and.w	r3, r3, #1
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d104      	bne.n	8008fe8 <HAL_SD_IRQHandler+0xe4>
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	f003 0302 	and.w	r3, r3, #2
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d003      	beq.n	8008ff0 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f005 ffc9 	bl	800ef80 <HAL_SD_RxCpltCallback>
 8008fee:	e13b      	b.n	8009268 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f005 ffbb 	bl	800ef6c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008ff6:	e137      	b.n	8009268 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	f000 8132 	beq.w	8009268 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	2200      	movs	r2, #0
 800900a:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	2200      	movs	r2, #0
 8009012:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	2200      	movs	r2, #0
 800901a:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	f003 0302 	and.w	r3, r3, #2
 8009022:	2b00      	cmp	r3, #0
 8009024:	d104      	bne.n	8009030 <HAL_SD_IRQHandler+0x12c>
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	f003 0320 	and.w	r3, r3, #32
 800902c:	2b00      	cmp	r3, #0
 800902e:	d011      	beq.n	8009054 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	4618      	mov	r0, r3
 8009036:	f005 facb 	bl	800e5d0 <SDMMC_CmdStopTransfer>
 800903a:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d008      	beq.n	8009054 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	431a      	orrs	r2, r3
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f000 f910 	bl	8009274 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2201      	movs	r2, #1
 8009058:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2200      	movs	r2, #0
 8009060:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	f003 0310 	and.w	r3, r3, #16
 8009068:	2b00      	cmp	r3, #0
 800906a:	d104      	bne.n	8009076 <HAL_SD_IRQHandler+0x172>
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	f003 0320 	and.w	r3, r3, #32
 8009072:	2b00      	cmp	r3, #0
 8009074:	d002      	beq.n	800907c <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f005 ff78 	bl	800ef6c <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	f003 0301 	and.w	r3, r3, #1
 8009082:	2b00      	cmp	r3, #0
 8009084:	d105      	bne.n	8009092 <HAL_SD_IRQHandler+0x18e>
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	f003 0302 	and.w	r3, r3, #2
 800908c:	2b00      	cmp	r3, #0
 800908e:	f000 80eb 	beq.w	8009268 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f005 ff74 	bl	800ef80 <HAL_SD_RxCpltCallback>
}
 8009098:	e0e6      	b.n	8009268 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d00d      	beq.n	80090c4 <HAL_SD_IRQHandler+0x1c0>
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	f003 0308 	and.w	r3, r3, #8
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d008      	beq.n	80090c4 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f001 f8a8 	bl	800a208 <SD_Write_IT>
 80090b8:	e0d6      	b.n	8009268 <HAL_SD_IRQHandler+0x364>
 80090ba:	bf00      	nop
 80090bc:	ffff3ec5 	.word	0xffff3ec5
 80090c0:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090ca:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	f000 809d 	beq.w	800920e <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090da:	f003 0302 	and.w	r3, r3, #2
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d005      	beq.n	80090ee <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090e6:	f043 0202 	orr.w	r2, r3, #2
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090f4:	f003 0308 	and.w	r3, r3, #8
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d005      	beq.n	8009108 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009100:	f043 0208 	orr.w	r2, r3, #8
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800910e:	f003 0320 	and.w	r3, r3, #32
 8009112:	2b00      	cmp	r3, #0
 8009114:	d005      	beq.n	8009122 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800911a:	f043 0220 	orr.w	r2, r3, #32
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009128:	f003 0310 	and.w	r3, r3, #16
 800912c:	2b00      	cmp	r3, #0
 800912e:	d005      	beq.n	800913c <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009134:	f043 0210 	orr.w	r2, r3, #16
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	4a4b      	ldr	r2, [pc, #300]	@ (8009270 <HAL_SD_IRQHandler+0x36c>)
 8009142:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8009152:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	68da      	ldr	r2, [r3, #12]
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009162:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009172:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	68da      	ldr	r2, [r3, #12]
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009182:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	4618      	mov	r0, r3
 800918a:	f005 fa21 	bl	800e5d0 <SDMMC_CmdStopTransfer>
 800918e:	4602      	mov	r2, r0
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009194:	431a      	orrs	r2, r3
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	68da      	ldr	r2, [r3, #12]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80091a8:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80091b2:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	f003 0308 	and.w	r3, r3, #8
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d00a      	beq.n	80091d4 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2201      	movs	r2, #1
 80091c2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2200      	movs	r2, #0
 80091ca:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f000 f851 	bl	8009274 <HAL_SD_ErrorCallback>
}
 80091d2:	e049      	b.n	8009268 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d044      	beq.n	8009268 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d040      	beq.n	8009268 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80091f4:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	2200      	movs	r2, #0
 80091fc:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2201      	movs	r2, #1
 8009202:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f000 f834 	bl	8009274 <HAL_SD_ErrorCallback>
}
 800920c:	e02c      	b.n	8009268 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009214:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009218:	2b00      	cmp	r3, #0
 800921a:	d025      	beq.n	8009268 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009224:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800922c:	f003 0304 	and.w	r3, r3, #4
 8009230:	2b00      	cmp	r3, #0
 8009232:	d10c      	bne.n	800924e <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	f003 0320 	and.w	r3, r3, #32
 800923a:	2b00      	cmp	r3, #0
 800923c:	d003      	beq.n	8009246 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f001 f84a 	bl	800a2d8 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8009244:	e010      	b.n	8009268 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f001 f832 	bl	800a2b0 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800924c:	e00c      	b.n	8009268 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	f003 0320 	and.w	r3, r3, #32
 8009254:	2b00      	cmp	r3, #0
 8009256:	d003      	beq.n	8009260 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f001 f833 	bl	800a2c4 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800925e:	e003      	b.n	8009268 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	f001 f81b 	bl	800a29c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8009266:	e7ff      	b.n	8009268 <HAL_SD_IRQHandler+0x364>
 8009268:	bf00      	nop
 800926a:	3710      	adds	r7, #16
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}
 8009270:	18000f3a 	.word	0x18000f3a

08009274 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8009274:	b480      	push	{r7}
 8009276:	b083      	sub	sp, #12
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800927c:	bf00      	nop
 800927e:	370c      	adds	r7, #12
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr

08009288 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009288:	b480      	push	{r7}
 800928a:	b083      	sub	sp, #12
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
 8009290:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009296:	0f9b      	lsrs	r3, r3, #30
 8009298:	b2da      	uxtb	r2, r3
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80092a2:	0e9b      	lsrs	r3, r3, #26
 80092a4:	b2db      	uxtb	r3, r3
 80092a6:	f003 030f 	and.w	r3, r3, #15
 80092aa:	b2da      	uxtb	r2, r3
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80092b4:	0e1b      	lsrs	r3, r3, #24
 80092b6:	b2db      	uxtb	r3, r3
 80092b8:	f003 0303 	and.w	r3, r3, #3
 80092bc:	b2da      	uxtb	r2, r3
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80092c6:	0c1b      	lsrs	r3, r3, #16
 80092c8:	b2da      	uxtb	r2, r3
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80092d2:	0a1b      	lsrs	r3, r3, #8
 80092d4:	b2da      	uxtb	r2, r3
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80092de:	b2da      	uxtb	r2, r3
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092e8:	0d1b      	lsrs	r3, r3, #20
 80092ea:	b29a      	uxth	r2, r3
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092f4:	0c1b      	lsrs	r3, r3, #16
 80092f6:	b2db      	uxtb	r3, r3
 80092f8:	f003 030f 	and.w	r3, r3, #15
 80092fc:	b2da      	uxtb	r2, r3
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009306:	0bdb      	lsrs	r3, r3, #15
 8009308:	b2db      	uxtb	r3, r3
 800930a:	f003 0301 	and.w	r3, r3, #1
 800930e:	b2da      	uxtb	r2, r3
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009318:	0b9b      	lsrs	r3, r3, #14
 800931a:	b2db      	uxtb	r3, r3
 800931c:	f003 0301 	and.w	r3, r3, #1
 8009320:	b2da      	uxtb	r2, r3
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800932a:	0b5b      	lsrs	r3, r3, #13
 800932c:	b2db      	uxtb	r3, r3
 800932e:	f003 0301 	and.w	r3, r3, #1
 8009332:	b2da      	uxtb	r2, r3
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800933c:	0b1b      	lsrs	r3, r3, #12
 800933e:	b2db      	uxtb	r3, r3
 8009340:	f003 0301 	and.w	r3, r3, #1
 8009344:	b2da      	uxtb	r2, r3
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	2200      	movs	r2, #0
 800934e:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009354:	2b00      	cmp	r3, #0
 8009356:	d163      	bne.n	8009420 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800935c:	009a      	lsls	r2, r3, #2
 800935e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8009362:	4013      	ands	r3, r2
 8009364:	687a      	ldr	r2, [r7, #4]
 8009366:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8009368:	0f92      	lsrs	r2, r2, #30
 800936a:	431a      	orrs	r2, r3
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009374:	0edb      	lsrs	r3, r3, #27
 8009376:	b2db      	uxtb	r3, r3
 8009378:	f003 0307 	and.w	r3, r3, #7
 800937c:	b2da      	uxtb	r2, r3
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009386:	0e1b      	lsrs	r3, r3, #24
 8009388:	b2db      	uxtb	r3, r3
 800938a:	f003 0307 	and.w	r3, r3, #7
 800938e:	b2da      	uxtb	r2, r3
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009398:	0d5b      	lsrs	r3, r3, #21
 800939a:	b2db      	uxtb	r3, r3
 800939c:	f003 0307 	and.w	r3, r3, #7
 80093a0:	b2da      	uxtb	r2, r3
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80093aa:	0c9b      	lsrs	r3, r3, #18
 80093ac:	b2db      	uxtb	r3, r3
 80093ae:	f003 0307 	and.w	r3, r3, #7
 80093b2:	b2da      	uxtb	r2, r3
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80093bc:	0bdb      	lsrs	r3, r3, #15
 80093be:	b2db      	uxtb	r3, r3
 80093c0:	f003 0307 	and.w	r3, r3, #7
 80093c4:	b2da      	uxtb	r2, r3
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	691b      	ldr	r3, [r3, #16]
 80093ce:	1c5a      	adds	r2, r3, #1
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	7e1b      	ldrb	r3, [r3, #24]
 80093d8:	b2db      	uxtb	r3, r3
 80093da:	f003 0307 	and.w	r3, r3, #7
 80093de:	3302      	adds	r3, #2
 80093e0:	2201      	movs	r2, #1
 80093e2:	fa02 f303 	lsl.w	r3, r2, r3
 80093e6:	687a      	ldr	r2, [r7, #4]
 80093e8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80093ea:	fb03 f202 	mul.w	r2, r3, r2
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	7a1b      	ldrb	r3, [r3, #8]
 80093f6:	b2db      	uxtb	r3, r3
 80093f8:	f003 030f 	and.w	r3, r3, #15
 80093fc:	2201      	movs	r2, #1
 80093fe:	409a      	lsls	r2, r3
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009408:	687a      	ldr	r2, [r7, #4]
 800940a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800940c:	0a52      	lsrs	r2, r2, #9
 800940e:	fb03 f202 	mul.w	r2, r3, r2
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800941c:	655a      	str	r2, [r3, #84]	@ 0x54
 800941e:	e031      	b.n	8009484 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009424:	2b01      	cmp	r3, #1
 8009426:	d11d      	bne.n	8009464 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800942c:	041b      	lsls	r3, r3, #16
 800942e:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009436:	0c1b      	lsrs	r3, r3, #16
 8009438:	431a      	orrs	r2, r3
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	691b      	ldr	r3, [r3, #16]
 8009442:	3301      	adds	r3, #1
 8009444:	029a      	lsls	r2, r3, #10
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009458:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	655a      	str	r2, [r3, #84]	@ 0x54
 8009462:	e00f      	b.n	8009484 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4a58      	ldr	r2, [pc, #352]	@ (80095cc <HAL_SD_GetCardCSD+0x344>)
 800946a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009470:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2201      	movs	r2, #1
 800947c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8009480:	2301      	movs	r3, #1
 8009482:	e09d      	b.n	80095c0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009488:	0b9b      	lsrs	r3, r3, #14
 800948a:	b2db      	uxtb	r3, r3
 800948c:	f003 0301 	and.w	r3, r3, #1
 8009490:	b2da      	uxtb	r2, r3
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800949a:	09db      	lsrs	r3, r3, #7
 800949c:	b2db      	uxtb	r3, r3
 800949e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094a2:	b2da      	uxtb	r2, r3
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80094ac:	b2db      	uxtb	r3, r3
 80094ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094b2:	b2da      	uxtb	r2, r3
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80094bc:	0fdb      	lsrs	r3, r3, #31
 80094be:	b2da      	uxtb	r2, r3
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80094c8:	0f5b      	lsrs	r3, r3, #29
 80094ca:	b2db      	uxtb	r3, r3
 80094cc:	f003 0303 	and.w	r3, r3, #3
 80094d0:	b2da      	uxtb	r2, r3
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80094da:	0e9b      	lsrs	r3, r3, #26
 80094dc:	b2db      	uxtb	r3, r3
 80094de:	f003 0307 	and.w	r3, r3, #7
 80094e2:	b2da      	uxtb	r2, r3
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80094ec:	0d9b      	lsrs	r3, r3, #22
 80094ee:	b2db      	uxtb	r3, r3
 80094f0:	f003 030f 	and.w	r3, r3, #15
 80094f4:	b2da      	uxtb	r2, r3
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80094fe:	0d5b      	lsrs	r3, r3, #21
 8009500:	b2db      	uxtb	r3, r3
 8009502:	f003 0301 	and.w	r3, r3, #1
 8009506:	b2da      	uxtb	r2, r3
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	2200      	movs	r2, #0
 8009512:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800951a:	0c1b      	lsrs	r3, r3, #16
 800951c:	b2db      	uxtb	r3, r3
 800951e:	f003 0301 	and.w	r3, r3, #1
 8009522:	b2da      	uxtb	r2, r3
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800952e:	0bdb      	lsrs	r3, r3, #15
 8009530:	b2db      	uxtb	r3, r3
 8009532:	f003 0301 	and.w	r3, r3, #1
 8009536:	b2da      	uxtb	r2, r3
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009542:	0b9b      	lsrs	r3, r3, #14
 8009544:	b2db      	uxtb	r3, r3
 8009546:	f003 0301 	and.w	r3, r3, #1
 800954a:	b2da      	uxtb	r2, r3
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009556:	0b5b      	lsrs	r3, r3, #13
 8009558:	b2db      	uxtb	r3, r3
 800955a:	f003 0301 	and.w	r3, r3, #1
 800955e:	b2da      	uxtb	r2, r3
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800956a:	0b1b      	lsrs	r3, r3, #12
 800956c:	b2db      	uxtb	r3, r3
 800956e:	f003 0301 	and.w	r3, r3, #1
 8009572:	b2da      	uxtb	r2, r3
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800957e:	0a9b      	lsrs	r3, r3, #10
 8009580:	b2db      	uxtb	r3, r3
 8009582:	f003 0303 	and.w	r3, r3, #3
 8009586:	b2da      	uxtb	r2, r3
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009592:	0a1b      	lsrs	r3, r3, #8
 8009594:	b2db      	uxtb	r3, r3
 8009596:	f003 0303 	and.w	r3, r3, #3
 800959a:	b2da      	uxtb	r2, r3
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80095a6:	085b      	lsrs	r3, r3, #1
 80095a8:	b2db      	uxtb	r3, r3
 80095aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80095ae:	b2da      	uxtb	r2, r3
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	2201      	movs	r2, #1
 80095ba:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 80095be:	2300      	movs	r3, #0
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	370c      	adds	r7, #12
 80095c4:	46bd      	mov	sp, r7
 80095c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ca:	4770      	bx	lr
 80095cc:	1fe00fff 	.word	0x1fe00fff

080095d0 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b094      	sub	sp, #80	@ 0x50
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
 80095d8:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80095da:	2300      	movs	r3, #0
 80095dc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80095e6:	b2db      	uxtb	r3, r3
 80095e8:	2b03      	cmp	r3, #3
 80095ea:	d101      	bne.n	80095f0 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 80095ec:	2301      	movs	r3, #1
 80095ee:	e0a7      	b.n	8009740 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80095f0:	f107 0308 	add.w	r3, r7, #8
 80095f4:	4619      	mov	r1, r3
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f000 fb62 	bl	8009cc0 <SD_SendSDStatus>
 80095fc:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80095fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009600:	2b00      	cmp	r3, #0
 8009602:	d011      	beq.n	8009628 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	4a4f      	ldr	r2, [pc, #316]	@ (8009748 <HAL_SD_GetCardStatus+0x178>)
 800960a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009610:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009612:	431a      	orrs	r2, r3
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2201      	movs	r2, #1
 800961c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8009620:	2301      	movs	r3, #1
 8009622:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8009626:	e070      	b.n	800970a <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	099b      	lsrs	r3, r3, #6
 800962c:	b2db      	uxtb	r3, r3
 800962e:	f003 0303 	and.w	r3, r3, #3
 8009632:	b2da      	uxtb	r2, r3
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	095b      	lsrs	r3, r3, #5
 800963c:	b2db      	uxtb	r3, r3
 800963e:	f003 0301 	and.w	r3, r3, #1
 8009642:	b2da      	uxtb	r2, r3
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	0a1b      	lsrs	r3, r3, #8
 800964c:	b29b      	uxth	r3, r3
 800964e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009652:	b29a      	uxth	r2, r3
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	0e1b      	lsrs	r3, r3, #24
 8009658:	b29b      	uxth	r3, r3
 800965a:	4313      	orrs	r3, r2
 800965c:	b29a      	uxth	r2, r3
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	061a      	lsls	r2, r3, #24
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	021b      	lsls	r3, r3, #8
 800966a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800966e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	0a1b      	lsrs	r3, r3, #8
 8009674:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009678:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	0e1b      	lsrs	r3, r3, #24
 800967e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8009684:	693b      	ldr	r3, [r7, #16]
 8009686:	b2da      	uxtb	r2, r3
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800968c:	693b      	ldr	r3, [r7, #16]
 800968e:	0a1b      	lsrs	r3, r3, #8
 8009690:	b2da      	uxtb	r2, r3
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8009696:	693b      	ldr	r3, [r7, #16]
 8009698:	0d1b      	lsrs	r3, r3, #20
 800969a:	b2db      	uxtb	r3, r3
 800969c:	f003 030f 	and.w	r3, r3, #15
 80096a0:	b2da      	uxtb	r2, r3
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80096a6:	693b      	ldr	r3, [r7, #16]
 80096a8:	0c1b      	lsrs	r3, r3, #16
 80096aa:	b29b      	uxth	r3, r3
 80096ac:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80096b0:	b29a      	uxth	r2, r3
 80096b2:	697b      	ldr	r3, [r7, #20]
 80096b4:	b29b      	uxth	r3, r3
 80096b6:	b2db      	uxtb	r3, r3
 80096b8:	b29b      	uxth	r3, r3
 80096ba:	4313      	orrs	r3, r2
 80096bc:	b29a      	uxth	r2, r3
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80096c2:	697b      	ldr	r3, [r7, #20]
 80096c4:	0a9b      	lsrs	r3, r3, #10
 80096c6:	b2db      	uxtb	r3, r3
 80096c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80096cc:	b2da      	uxtb	r2, r3
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80096d2:	697b      	ldr	r3, [r7, #20]
 80096d4:	0a1b      	lsrs	r3, r3, #8
 80096d6:	b2db      	uxtb	r3, r3
 80096d8:	f003 0303 	and.w	r3, r3, #3
 80096dc:	b2da      	uxtb	r2, r3
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	091b      	lsrs	r3, r3, #4
 80096e6:	b2db      	uxtb	r3, r3
 80096e8:	f003 030f 	and.w	r3, r3, #15
 80096ec:	b2da      	uxtb	r2, r3
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80096f2:	697b      	ldr	r3, [r7, #20]
 80096f4:	b2db      	uxtb	r3, r3
 80096f6:	f003 030f 	and.w	r3, r3, #15
 80096fa:	b2da      	uxtb	r2, r3
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8009700:	69bb      	ldr	r3, [r7, #24]
 8009702:	0e1b      	lsrs	r3, r3, #24
 8009704:	b2da      	uxtb	r2, r3
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009712:	4618      	mov	r0, r3
 8009714:	f004 feac 	bl	800e470 <SDMMC_CmdBlockLength>
 8009718:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800971a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800971c:	2b00      	cmp	r3, #0
 800971e:	d00d      	beq.n	800973c <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	4a08      	ldr	r2, [pc, #32]	@ (8009748 <HAL_SD_GetCardStatus+0x178>)
 8009726:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800972c:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2201      	movs	r2, #1
 8009732:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8009736:	2301      	movs	r3, #1
 8009738:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 800973c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8009740:	4618      	mov	r0, r3
 8009742:	3750      	adds	r7, #80	@ 0x50
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}
 8009748:	1fe00fff 	.word	0x1fe00fff

0800974c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800974c:	b480      	push	{r7}
 800974e:	b083      	sub	sp, #12
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
 8009754:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009796:	2300      	movs	r3, #0
}
 8009798:	4618      	mov	r0, r3
 800979a:	370c      	adds	r7, #12
 800979c:	46bd      	mov	sp, r7
 800979e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a2:	4770      	bx	lr

080097a4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80097a4:	b590      	push	{r4, r7, lr}
 80097a6:	b08d      	sub	sp, #52	@ 0x34
 80097a8:	af02      	add	r7, sp, #8
 80097aa:	6078      	str	r0, [r7, #4]
 80097ac:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 80097ae:	2300      	movs	r3, #0
 80097b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2203      	movs	r2, #3
 80097b8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097c0:	2b03      	cmp	r3, #3
 80097c2:	d02e      	beq.n	8009822 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80097ca:	d106      	bne.n	80097da <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097d0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	635a      	str	r2, [r3, #52]	@ 0x34
 80097d8:	e029      	b.n	800982e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80097e0:	d10a      	bne.n	80097f8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f000 fb64 	bl	8009eb0 <SD_WideBus_Enable>
 80097e8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80097ee:	6a3b      	ldr	r3, [r7, #32]
 80097f0:	431a      	orrs	r2, r3
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80097f6:	e01a      	b.n	800982e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d10a      	bne.n	8009814 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f000 fba1 	bl	8009f46 <SD_WideBus_Disable>
 8009804:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800980a:	6a3b      	ldr	r3, [r7, #32]
 800980c:	431a      	orrs	r2, r3
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	635a      	str	r2, [r3, #52]	@ 0x34
 8009812:	e00c      	b.n	800982e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009818:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	635a      	str	r2, [r3, #52]	@ 0x34
 8009820:	e005      	b.n	800982e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009826:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009832:	2b00      	cmp	r3, #0
 8009834:	d007      	beq.n	8009846 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	4a5f      	ldr	r2, [pc, #380]	@ (80099b8 <HAL_SD_ConfigWideBusOperation+0x214>)
 800983c:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800983e:	2301      	movs	r3, #1
 8009840:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009844:	e096      	b.n	8009974 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8009846:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800984a:	f04f 0100 	mov.w	r1, #0
 800984e:	f7fd fdf5 	bl	800743c <HAL_RCCEx_GetPeriphCLKFreq>
 8009852:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8009854:	69fb      	ldr	r3, [r7, #28]
 8009856:	2b00      	cmp	r3, #0
 8009858:	f000 8083 	beq.w	8009962 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	685b      	ldr	r3, [r3, #4]
 8009860:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	689b      	ldr	r3, [r3, #8]
 8009866:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	691b      	ldr	r3, [r3, #16]
 8009870:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	695a      	ldr	r2, [r3, #20]
 8009876:	69fb      	ldr	r3, [r7, #28]
 8009878:	4950      	ldr	r1, [pc, #320]	@ (80099bc <HAL_SD_ConfigWideBusOperation+0x218>)
 800987a:	fba1 1303 	umull	r1, r3, r1, r3
 800987e:	0e1b      	lsrs	r3, r3, #24
 8009880:	429a      	cmp	r2, r3
 8009882:	d303      	bcc.n	800988c <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	695b      	ldr	r3, [r3, #20]
 8009888:	61bb      	str	r3, [r7, #24]
 800988a:	e05a      	b.n	8009942 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009890:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009894:	d103      	bne.n	800989e <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	695b      	ldr	r3, [r3, #20]
 800989a:	61bb      	str	r3, [r7, #24]
 800989c:	e051      	b.n	8009942 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80098a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80098a6:	d126      	bne.n	80098f6 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	695b      	ldr	r3, [r3, #20]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d10e      	bne.n	80098ce <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 80098b0:	69fb      	ldr	r3, [r7, #28]
 80098b2:	4a43      	ldr	r2, [pc, #268]	@ (80099c0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80098b4:	4293      	cmp	r3, r2
 80098b6:	d906      	bls.n	80098c6 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80098b8:	69fb      	ldr	r3, [r7, #28]
 80098ba:	4a40      	ldr	r2, [pc, #256]	@ (80099bc <HAL_SD_ConfigWideBusOperation+0x218>)
 80098bc:	fba2 2303 	umull	r2, r3, r2, r3
 80098c0:	0e5b      	lsrs	r3, r3, #25
 80098c2:	61bb      	str	r3, [r7, #24]
 80098c4:	e03d      	b.n	8009942 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	695b      	ldr	r3, [r3, #20]
 80098ca:	61bb      	str	r3, [r7, #24]
 80098cc:	e039      	b.n	8009942 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	695b      	ldr	r3, [r3, #20]
 80098d2:	005b      	lsls	r3, r3, #1
 80098d4:	69fa      	ldr	r2, [r7, #28]
 80098d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80098da:	4a39      	ldr	r2, [pc, #228]	@ (80099c0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80098dc:	4293      	cmp	r3, r2
 80098de:	d906      	bls.n	80098ee <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80098e0:	69fb      	ldr	r3, [r7, #28]
 80098e2:	4a36      	ldr	r2, [pc, #216]	@ (80099bc <HAL_SD_ConfigWideBusOperation+0x218>)
 80098e4:	fba2 2303 	umull	r2, r3, r2, r3
 80098e8:	0e5b      	lsrs	r3, r3, #25
 80098ea:	61bb      	str	r3, [r7, #24]
 80098ec:	e029      	b.n	8009942 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	695b      	ldr	r3, [r3, #20]
 80098f2:	61bb      	str	r3, [r7, #24]
 80098f4:	e025      	b.n	8009942 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	695b      	ldr	r3, [r3, #20]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d10e      	bne.n	800991c <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 80098fe:	69fb      	ldr	r3, [r7, #28]
 8009900:	4a30      	ldr	r2, [pc, #192]	@ (80099c4 <HAL_SD_ConfigWideBusOperation+0x220>)
 8009902:	4293      	cmp	r3, r2
 8009904:	d906      	bls.n	8009914 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8009906:	69fb      	ldr	r3, [r7, #28]
 8009908:	4a2c      	ldr	r2, [pc, #176]	@ (80099bc <HAL_SD_ConfigWideBusOperation+0x218>)
 800990a:	fba2 2303 	umull	r2, r3, r2, r3
 800990e:	0e1b      	lsrs	r3, r3, #24
 8009910:	61bb      	str	r3, [r7, #24]
 8009912:	e016      	b.n	8009942 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	695b      	ldr	r3, [r3, #20]
 8009918:	61bb      	str	r3, [r7, #24]
 800991a:	e012      	b.n	8009942 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	695b      	ldr	r3, [r3, #20]
 8009920:	005b      	lsls	r3, r3, #1
 8009922:	69fa      	ldr	r2, [r7, #28]
 8009924:	fbb2 f3f3 	udiv	r3, r2, r3
 8009928:	4a26      	ldr	r2, [pc, #152]	@ (80099c4 <HAL_SD_ConfigWideBusOperation+0x220>)
 800992a:	4293      	cmp	r3, r2
 800992c:	d906      	bls.n	800993c <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800992e:	69fb      	ldr	r3, [r7, #28]
 8009930:	4a22      	ldr	r2, [pc, #136]	@ (80099bc <HAL_SD_ConfigWideBusOperation+0x218>)
 8009932:	fba2 2303 	umull	r2, r3, r2, r3
 8009936:	0e1b      	lsrs	r3, r3, #24
 8009938:	61bb      	str	r3, [r7, #24]
 800993a:	e002      	b.n	8009942 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	695b      	ldr	r3, [r3, #20]
 8009940:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681c      	ldr	r4, [r3, #0]
 8009946:	466a      	mov	r2, sp
 8009948:	f107 0314 	add.w	r3, r7, #20
 800994c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009950:	e882 0003 	stmia.w	r2, {r0, r1}
 8009954:	f107 0308 	add.w	r3, r7, #8
 8009958:	cb0e      	ldmia	r3, {r1, r2, r3}
 800995a:	4620      	mov	r0, r4
 800995c:	f004 fcaa 	bl	800e2b4 <SDMMC_Init>
 8009960:	e008      	b.n	8009974 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009966:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800996e:	2301      	movs	r3, #1
 8009970:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800997c:	4618      	mov	r0, r3
 800997e:	f004 fd77 	bl	800e470 <SDMMC_CmdBlockLength>
 8009982:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009984:	6a3b      	ldr	r3, [r7, #32]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d00c      	beq.n	80099a4 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	4a0a      	ldr	r2, [pc, #40]	@ (80099b8 <HAL_SD_ConfigWideBusOperation+0x214>)
 8009990:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009996:	6a3b      	ldr	r3, [r7, #32]
 8009998:	431a      	orrs	r2, r3
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800999e:	2301      	movs	r3, #1
 80099a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2201      	movs	r2, #1
 80099a8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 80099ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80099b0:	4618      	mov	r0, r3
 80099b2:	372c      	adds	r7, #44	@ 0x2c
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd90      	pop	{r4, r7, pc}
 80099b8:	1fe00fff 	.word	0x1fe00fff
 80099bc:	55e63b89 	.word	0x55e63b89
 80099c0:	02faf080 	.word	0x02faf080
 80099c4:	017d7840 	.word	0x017d7840

080099c8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b086      	sub	sp, #24
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80099d0:	2300      	movs	r3, #0
 80099d2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80099d4:	f107 030c 	add.w	r3, r7, #12
 80099d8:	4619      	mov	r1, r3
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	f000 fa40 	bl	8009e60 <SD_SendStatus>
 80099e0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d005      	beq.n	80099f4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80099ec:	697b      	ldr	r3, [r7, #20]
 80099ee:	431a      	orrs	r2, r3
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	0a5b      	lsrs	r3, r3, #9
 80099f8:	f003 030f 	and.w	r3, r3, #15
 80099fc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80099fe:	693b      	ldr	r3, [r7, #16]
}
 8009a00:	4618      	mov	r0, r3
 8009a02:	3718      	adds	r7, #24
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}

08009a08 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b090      	sub	sp, #64	@ 0x40
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8009a10:	2300      	movs	r3, #0
 8009a12:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8009a14:	f7fa f9c6 	bl	8003da4 <HAL_GetTick>
 8009a18:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f004 fca1 	bl	800e366 <SDMMC_GetPowerState>
 8009a24:	4603      	mov	r3, r0
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d102      	bne.n	8009a30 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009a2a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8009a2e:	e0b5      	b.n	8009b9c <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a34:	2b03      	cmp	r3, #3
 8009a36:	d02e      	beq.n	8009a96 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	f004 feec 	bl	800e81a <SDMMC_CmdSendCID>
 8009a42:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8009a44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d001      	beq.n	8009a4e <SD_InitCard+0x46>
    {
      return errorstate;
 8009a4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a4c:	e0a6      	b.n	8009b9c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	2100      	movs	r1, #0
 8009a54:	4618      	mov	r0, r3
 8009a56:	f004 fccc 	bl	800e3f2 <SDMMC_GetResponse>
 8009a5a:	4602      	mov	r2, r0
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	2104      	movs	r1, #4
 8009a66:	4618      	mov	r0, r3
 8009a68:	f004 fcc3 	bl	800e3f2 <SDMMC_GetResponse>
 8009a6c:	4602      	mov	r2, r0
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	2108      	movs	r1, #8
 8009a78:	4618      	mov	r0, r3
 8009a7a:	f004 fcba 	bl	800e3f2 <SDMMC_GetResponse>
 8009a7e:	4602      	mov	r2, r0
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	210c      	movs	r1, #12
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	f004 fcb1 	bl	800e3f2 <SDMMC_GetResponse>
 8009a90:	4602      	mov	r2, r0
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a9a:	2b03      	cmp	r3, #3
 8009a9c:	d01d      	beq.n	8009ada <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8009a9e:	e019      	b.n	8009ad4 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f107 020a 	add.w	r2, r7, #10
 8009aa8:	4611      	mov	r1, r2
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f004 fef4 	bl	800e898 <SDMMC_CmdSetRelAdd>
 8009ab0:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8009ab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d001      	beq.n	8009abc <SD_InitCard+0xb4>
      {
        return errorstate;
 8009ab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aba:	e06f      	b.n	8009b9c <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8009abc:	f7fa f972 	bl	8003da4 <HAL_GetTick>
 8009ac0:	4602      	mov	r2, r0
 8009ac2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ac4:	1ad3      	subs	r3, r2, r3
 8009ac6:	f241 3287 	movw	r2, #4999	@ 0x1387
 8009aca:	4293      	cmp	r3, r2
 8009acc:	d902      	bls.n	8009ad4 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8009ace:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009ad2:	e063      	b.n	8009b9c <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8009ad4:	897b      	ldrh	r3, [r7, #10]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d0e2      	beq.n	8009aa0 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ade:	2b03      	cmp	r3, #3
 8009ae0:	d036      	beq.n	8009b50 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009ae2:	897b      	ldrh	r3, [r7, #10]
 8009ae4:	461a      	mov	r2, r3
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681a      	ldr	r2, [r3, #0]
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009af2:	041b      	lsls	r3, r3, #16
 8009af4:	4619      	mov	r1, r3
 8009af6:	4610      	mov	r0, r2
 8009af8:	f004 feae 	bl	800e858 <SDMMC_CmdSendCSD>
 8009afc:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8009afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d001      	beq.n	8009b08 <SD_InitCard+0x100>
    {
      return errorstate;
 8009b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b06:	e049      	b.n	8009b9c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	2100      	movs	r1, #0
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f004 fc6f 	bl	800e3f2 <SDMMC_GetResponse>
 8009b14:	4602      	mov	r2, r0
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	2104      	movs	r1, #4
 8009b20:	4618      	mov	r0, r3
 8009b22:	f004 fc66 	bl	800e3f2 <SDMMC_GetResponse>
 8009b26:	4602      	mov	r2, r0
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	2108      	movs	r1, #8
 8009b32:	4618      	mov	r0, r3
 8009b34:	f004 fc5d 	bl	800e3f2 <SDMMC_GetResponse>
 8009b38:	4602      	mov	r2, r0
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	210c      	movs	r1, #12
 8009b44:	4618      	mov	r0, r3
 8009b46:	f004 fc54 	bl	800e3f2 <SDMMC_GetResponse>
 8009b4a:	4602      	mov	r2, r0
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	2104      	movs	r1, #4
 8009b56:	4618      	mov	r0, r3
 8009b58:	f004 fc4b 	bl	800e3f2 <SDMMC_GetResponse>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	0d1a      	lsrs	r2, r3, #20
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009b64:	f107 030c 	add.w	r3, r7, #12
 8009b68:	4619      	mov	r1, r3
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f7ff fb8c 	bl	8009288 <HAL_SD_GetCardCSD>
 8009b70:	4603      	mov	r3, r0
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d002      	beq.n	8009b7c <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009b76:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009b7a:	e00f      	b.n	8009b9c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681a      	ldr	r2, [r3, #0]
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b84:	041b      	lsls	r3, r3, #16
 8009b86:	4619      	mov	r1, r3
 8009b88:	4610      	mov	r0, r2
 8009b8a:	f004 fd5d 	bl	800e648 <SDMMC_CmdSelDesel>
 8009b8e:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8009b90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d001      	beq.n	8009b9a <SD_InitCard+0x192>
  {
    return errorstate;
 8009b96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b98:	e000      	b.n	8009b9c <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009b9a:	2300      	movs	r3, #0
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	3740      	adds	r7, #64	@ 0x40
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}

08009ba4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b086      	sub	sp, #24
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009bac:	2300      	movs	r3, #0
 8009bae:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	f004 fd66 	bl	800e68e <SDMMC_CmdGoIdleState>
 8009bc2:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d001      	beq.n	8009bce <SD_PowerON+0x2a>
  {
    return errorstate;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	e072      	b.n	8009cb4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f004 fd79 	bl	800e6ca <SDMMC_CmdOperCond>
 8009bd8:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009be0:	d10d      	bne.n	8009bfe <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2200      	movs	r2, #0
 8009be6:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	4618      	mov	r0, r3
 8009bee:	f004 fd4e 	bl	800e68e <SDMMC_CmdGoIdleState>
 8009bf2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d004      	beq.n	8009c04 <SD_PowerON+0x60>
    {
      return errorstate;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	e05a      	b.n	8009cb4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2201      	movs	r2, #1
 8009c02:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c08:	2b01      	cmp	r3, #1
 8009c0a:	d137      	bne.n	8009c7c <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	2100      	movs	r1, #0
 8009c12:	4618      	mov	r0, r3
 8009c14:	f004 fd79 	bl	800e70a <SDMMC_CmdAppCommand>
 8009c18:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d02d      	beq.n	8009c7c <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009c20:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009c24:	e046      	b.n	8009cb4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	2100      	movs	r1, #0
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	f004 fd6c 	bl	800e70a <SDMMC_CmdAppCommand>
 8009c32:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d001      	beq.n	8009c3e <SD_PowerON+0x9a>
    {
      return errorstate;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	e03a      	b.n	8009cb4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	491e      	ldr	r1, [pc, #120]	@ (8009cbc <SD_PowerON+0x118>)
 8009c44:	4618      	mov	r0, r3
 8009c46:	f004 fd83 	bl	800e750 <SDMMC_CmdAppOperCommand>
 8009c4a:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d002      	beq.n	8009c58 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009c52:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009c56:	e02d      	b.n	8009cb4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	2100      	movs	r1, #0
 8009c5e:	4618      	mov	r0, r3
 8009c60:	f004 fbc7 	bl	800e3f2 <SDMMC_GetResponse>
 8009c64:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009c66:	697b      	ldr	r3, [r7, #20]
 8009c68:	0fdb      	lsrs	r3, r3, #31
 8009c6a:	2b01      	cmp	r3, #1
 8009c6c:	d101      	bne.n	8009c72 <SD_PowerON+0xce>
 8009c6e:	2301      	movs	r3, #1
 8009c70:	e000      	b.n	8009c74 <SD_PowerON+0xd0>
 8009c72:	2300      	movs	r3, #0
 8009c74:	613b      	str	r3, [r7, #16]

    count++;
 8009c76:	68bb      	ldr	r3, [r7, #8]
 8009c78:	3301      	adds	r3, #1
 8009c7a:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009c82:	4293      	cmp	r3, r2
 8009c84:	d802      	bhi.n	8009c8c <SD_PowerON+0xe8>
 8009c86:	693b      	ldr	r3, [r7, #16]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d0cc      	beq.n	8009c26 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009c92:	4293      	cmp	r3, r2
 8009c94:	d902      	bls.n	8009c9c <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009c96:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009c9a:	e00b      	b.n	8009cb4 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8009ca2:	697b      	ldr	r3, [r7, #20]
 8009ca4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d002      	beq.n	8009cb2 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2201      	movs	r2, #1
 8009cb0:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8009cb2:	2300      	movs	r3, #0
}
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	3718      	adds	r7, #24
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}
 8009cbc:	c1100000 	.word	0xc1100000

08009cc0 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b08c      	sub	sp, #48	@ 0x30
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
 8009cc8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009cca:	f7fa f86b 	bl	8003da4 <HAL_GetTick>
 8009cce:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	2100      	movs	r1, #0
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f004 fb89 	bl	800e3f2 <SDMMC_GetResponse>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009ce6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009cea:	d102      	bne.n	8009cf2 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009cec:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009cf0:	e0b0      	b.n	8009e54 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	2140      	movs	r1, #64	@ 0x40
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	f004 fbb9 	bl	800e470 <SDMMC_CmdBlockLength>
 8009cfe:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009d00:	6a3b      	ldr	r3, [r7, #32]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d005      	beq.n	8009d12 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8009d0e:	6a3b      	ldr	r3, [r7, #32]
 8009d10:	e0a0      	b.n	8009e54 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681a      	ldr	r2, [r3, #0]
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d1a:	041b      	lsls	r3, r3, #16
 8009d1c:	4619      	mov	r1, r3
 8009d1e:	4610      	mov	r0, r2
 8009d20:	f004 fcf3 	bl	800e70a <SDMMC_CmdAppCommand>
 8009d24:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009d26:	6a3b      	ldr	r3, [r7, #32]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d005      	beq.n	8009d38 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8009d34:	6a3b      	ldr	r3, [r7, #32]
 8009d36:	e08d      	b.n	8009e54 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009d38:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009d3c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8009d3e:	2340      	movs	r3, #64	@ 0x40
 8009d40:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8009d42:	2360      	movs	r3, #96	@ 0x60
 8009d44:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009d46:	2302      	movs	r3, #2
 8009d48:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009d4e:	2301      	movs	r3, #1
 8009d50:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f107 0208 	add.w	r2, r7, #8
 8009d5a:	4611      	mov	r1, r2
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	f004 fb5b 	bl	800e418 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	4618      	mov	r0, r3
 8009d68:	f004 fddb 	bl	800e922 <SDMMC_CmdStatusRegister>
 8009d6c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009d6e:	6a3b      	ldr	r3, [r7, #32]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d02b      	beq.n	8009dcc <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8009d7c:	6a3b      	ldr	r3, [r7, #32]
 8009d7e:	e069      	b.n	8009e54 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d86:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d013      	beq.n	8009db6 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8009d8e:	2300      	movs	r3, #0
 8009d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009d92:	e00d      	b.n	8009db0 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	4618      	mov	r0, r3
 8009d9a:	f004 fab5 	bl	800e308 <SDMMC_ReadFIFO>
 8009d9e:	4602      	mov	r2, r0
 8009da0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009da2:	601a      	str	r2, [r3, #0]
        pData++;
 8009da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009da6:	3304      	adds	r3, #4
 8009da8:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 8009daa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dac:	3301      	adds	r3, #1
 8009dae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009db0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009db2:	2b07      	cmp	r3, #7
 8009db4:	d9ee      	bls.n	8009d94 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009db6:	f7f9 fff5 	bl	8003da4 <HAL_GetTick>
 8009dba:	4602      	mov	r2, r0
 8009dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dbe:	1ad3      	subs	r3, r2, r3
 8009dc0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009dc4:	d102      	bne.n	8009dcc <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009dc6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009dca:	e043      	b.n	8009e54 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009dd2:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d0d2      	beq.n	8009d80 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009de0:	f003 0308 	and.w	r3, r3, #8
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d001      	beq.n	8009dec <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009de8:	2308      	movs	r3, #8
 8009dea:	e033      	b.n	8009e54 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009df2:	f003 0302 	and.w	r3, r3, #2
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d001      	beq.n	8009dfe <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009dfa:	2302      	movs	r3, #2
 8009dfc:	e02a      	b.n	8009e54 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e04:	f003 0320 	and.w	r3, r3, #32
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d017      	beq.n	8009e3c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8009e0c:	2320      	movs	r3, #32
 8009e0e:	e021      	b.n	8009e54 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	4618      	mov	r0, r3
 8009e16:	f004 fa77 	bl	800e308 <SDMMC_ReadFIFO>
 8009e1a:	4602      	mov	r2, r0
 8009e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e1e:	601a      	str	r2, [r3, #0]
    pData++;
 8009e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e22:	3304      	adds	r3, #4
 8009e24:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009e26:	f7f9 ffbd 	bl	8003da4 <HAL_GetTick>
 8009e2a:	4602      	mov	r2, r0
 8009e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e2e:	1ad3      	subs	r3, r2, r3
 8009e30:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009e34:	d102      	bne.n	8009e3c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009e36:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009e3a:	e00b      	b.n	8009e54 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e42:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d1e2      	bne.n	8009e10 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	4a03      	ldr	r2, [pc, #12]	@ (8009e5c <SD_SendSDStatus+0x19c>)
 8009e50:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 8009e52:	2300      	movs	r3, #0
}
 8009e54:	4618      	mov	r0, r3
 8009e56:	3730      	adds	r7, #48	@ 0x30
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bd80      	pop	{r7, pc}
 8009e5c:	18000f3a 	.word	0x18000f3a

08009e60 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b084      	sub	sp, #16
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
 8009e68:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d102      	bne.n	8009e76 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009e70:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009e74:	e018      	b.n	8009ea8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681a      	ldr	r2, [r3, #0]
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e7e:	041b      	lsls	r3, r3, #16
 8009e80:	4619      	mov	r1, r3
 8009e82:	4610      	mov	r0, r2
 8009e84:	f004 fd2a 	bl	800e8dc <SDMMC_CmdSendStatus>
 8009e88:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d001      	beq.n	8009e94 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	e009      	b.n	8009ea8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	2100      	movs	r1, #0
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f004 faa9 	bl	800e3f2 <SDMMC_GetResponse>
 8009ea0:	4602      	mov	r2, r0
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009ea6:	2300      	movs	r3, #0
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	3710      	adds	r7, #16
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bd80      	pop	{r7, pc}

08009eb0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b086      	sub	sp, #24
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009eb8:	2300      	movs	r3, #0
 8009eba:	60fb      	str	r3, [r7, #12]
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	2100      	movs	r1, #0
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f004 fa93 	bl	800e3f2 <SDMMC_GetResponse>
 8009ecc:	4603      	mov	r3, r0
 8009ece:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009ed2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009ed6:	d102      	bne.n	8009ede <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009ed8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009edc:	e02f      	b.n	8009f3e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009ede:	f107 030c 	add.w	r3, r7, #12
 8009ee2:	4619      	mov	r1, r3
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f000 f879 	bl	8009fdc <SD_FindSCR>
 8009eea:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009eec:	697b      	ldr	r3, [r7, #20]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d001      	beq.n	8009ef6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009ef2:	697b      	ldr	r3, [r7, #20]
 8009ef4:	e023      	b.n	8009f3e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009ef6:	693b      	ldr	r3, [r7, #16]
 8009ef8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d01c      	beq.n	8009f3a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681a      	ldr	r2, [r3, #0]
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f08:	041b      	lsls	r3, r3, #16
 8009f0a:	4619      	mov	r1, r3
 8009f0c:	4610      	mov	r0, r2
 8009f0e:	f004 fbfc 	bl	800e70a <SDMMC_CmdAppCommand>
 8009f12:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009f14:	697b      	ldr	r3, [r7, #20]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d001      	beq.n	8009f1e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009f1a:	697b      	ldr	r3, [r7, #20]
 8009f1c:	e00f      	b.n	8009f3e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	2102      	movs	r1, #2
 8009f24:	4618      	mov	r0, r3
 8009f26:	f004 fc33 	bl	800e790 <SDMMC_CmdBusWidth>
 8009f2a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009f2c:	697b      	ldr	r3, [r7, #20]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d001      	beq.n	8009f36 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009f32:	697b      	ldr	r3, [r7, #20]
 8009f34:	e003      	b.n	8009f3e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009f36:	2300      	movs	r3, #0
 8009f38:	e001      	b.n	8009f3e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009f3a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	3718      	adds	r7, #24
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}

08009f46 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009f46:	b580      	push	{r7, lr}
 8009f48:	b086      	sub	sp, #24
 8009f4a:	af00      	add	r7, sp, #0
 8009f4c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009f4e:	2300      	movs	r3, #0
 8009f50:	60fb      	str	r3, [r7, #12]
 8009f52:	2300      	movs	r3, #0
 8009f54:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	2100      	movs	r1, #0
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f004 fa48 	bl	800e3f2 <SDMMC_GetResponse>
 8009f62:	4603      	mov	r3, r0
 8009f64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009f68:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009f6c:	d102      	bne.n	8009f74 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009f6e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009f72:	e02f      	b.n	8009fd4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009f74:	f107 030c 	add.w	r3, r7, #12
 8009f78:	4619      	mov	r1, r3
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f000 f82e 	bl	8009fdc <SD_FindSCR>
 8009f80:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009f82:	697b      	ldr	r3, [r7, #20]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d001      	beq.n	8009f8c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009f88:	697b      	ldr	r3, [r7, #20]
 8009f8a:	e023      	b.n	8009fd4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009f8c:	693b      	ldr	r3, [r7, #16]
 8009f8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d01c      	beq.n	8009fd0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681a      	ldr	r2, [r3, #0]
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f9e:	041b      	lsls	r3, r3, #16
 8009fa0:	4619      	mov	r1, r3
 8009fa2:	4610      	mov	r0, r2
 8009fa4:	f004 fbb1 	bl	800e70a <SDMMC_CmdAppCommand>
 8009fa8:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d001      	beq.n	8009fb4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009fb0:	697b      	ldr	r3, [r7, #20]
 8009fb2:	e00f      	b.n	8009fd4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	2100      	movs	r1, #0
 8009fba:	4618      	mov	r0, r3
 8009fbc:	f004 fbe8 	bl	800e790 <SDMMC_CmdBusWidth>
 8009fc0:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009fc2:	697b      	ldr	r3, [r7, #20]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d001      	beq.n	8009fcc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009fc8:	697b      	ldr	r3, [r7, #20]
 8009fca:	e003      	b.n	8009fd4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009fcc:	2300      	movs	r3, #0
 8009fce:	e001      	b.n	8009fd4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009fd0:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	3718      	adds	r7, #24
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bd80      	pop	{r7, pc}

08009fdc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b08e      	sub	sp, #56	@ 0x38
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
 8009fe4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009fe6:	f7f9 fedd 	bl	8003da4 <HAL_GetTick>
 8009fea:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8009fec:	2300      	movs	r3, #0
 8009fee:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	60bb      	str	r3, [r7, #8]
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	2108      	movs	r1, #8
 800a002:	4618      	mov	r0, r3
 800a004:	f004 fa34 	bl	800e470 <SDMMC_CmdBlockLength>
 800a008:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800a00a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d001      	beq.n	800a014 <SD_FindSCR+0x38>
  {
    return errorstate;
 800a010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a012:	e0ad      	b.n	800a170 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681a      	ldr	r2, [r3, #0]
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a01c:	041b      	lsls	r3, r3, #16
 800a01e:	4619      	mov	r1, r3
 800a020:	4610      	mov	r0, r2
 800a022:	f004 fb72 	bl	800e70a <SDMMC_CmdAppCommand>
 800a026:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800a028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d001      	beq.n	800a032 <SD_FindSCR+0x56>
  {
    return errorstate;
 800a02e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a030:	e09e      	b.n	800a170 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a032:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a036:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800a038:	2308      	movs	r3, #8
 800a03a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800a03c:	2330      	movs	r3, #48	@ 0x30
 800a03e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a040:	2302      	movs	r3, #2
 800a042:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a044:	2300      	movs	r3, #0
 800a046:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a048:	2301      	movs	r3, #1
 800a04a:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f107 0210 	add.w	r2, r7, #16
 800a054:	4611      	mov	r1, r2
 800a056:	4618      	mov	r0, r3
 800a058:	f004 f9de 	bl	800e418 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	4618      	mov	r0, r3
 800a062:	f004 fbb8 	bl	800e7d6 <SDMMC_CmdSendSCR>
 800a066:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800a068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d027      	beq.n	800a0be <SD_FindSCR+0xe2>
  {
    return errorstate;
 800a06e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a070:	e07e      	b.n	800a170 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a078:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d113      	bne.n	800a0a8 <SD_FindSCR+0xcc>
 800a080:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a082:	2b00      	cmp	r3, #0
 800a084:	d110      	bne.n	800a0a8 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	4618      	mov	r0, r3
 800a08c:	f004 f93c 	bl	800e308 <SDMMC_ReadFIFO>
 800a090:	4603      	mov	r3, r0
 800a092:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	4618      	mov	r0, r3
 800a09a:	f004 f935 	bl	800e308 <SDMMC_ReadFIFO>
 800a09e:	4603      	mov	r3, r0
 800a0a0:	60fb      	str	r3, [r7, #12]
      index++;
 800a0a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0a4:	3301      	adds	r3, #1
 800a0a6:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a0a8:	f7f9 fe7c 	bl	8003da4 <HAL_GetTick>
 800a0ac:	4602      	mov	r2, r0
 800a0ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0b0:	1ad3      	subs	r3, r2, r3
 800a0b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a0b6:	d102      	bne.n	800a0be <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a0b8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a0bc:	e058      	b.n	800a170 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a0c4:	f240 532a 	movw	r3, #1322	@ 0x52a
 800a0c8:	4013      	ands	r3, r2
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d0d1      	beq.n	800a072 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0d4:	f003 0308 	and.w	r3, r3, #8
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d005      	beq.n	800a0e8 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	2208      	movs	r2, #8
 800a0e2:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a0e4:	2308      	movs	r3, #8
 800a0e6:	e043      	b.n	800a170 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0ee:	f003 0302 	and.w	r3, r3, #2
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d005      	beq.n	800a102 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	2202      	movs	r2, #2
 800a0fc:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a0fe:	2302      	movs	r3, #2
 800a100:	e036      	b.n	800a170 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a108:	f003 0320 	and.w	r3, r3, #32
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d005      	beq.n	800a11c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	2220      	movs	r2, #32
 800a116:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800a118:	2320      	movs	r3, #32
 800a11a:	e029      	b.n	800a170 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	4a15      	ldr	r2, [pc, #84]	@ (800a178 <SD_FindSCR+0x19c>)
 800a122:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	061a      	lsls	r2, r3, #24
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	021b      	lsls	r3, r3, #8
 800a12c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a130:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	0a1b      	lsrs	r3, r3, #8
 800a136:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800a13a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	0e1b      	lsrs	r3, r3, #24
 800a140:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800a142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a144:	601a      	str	r2, [r3, #0]
    scr++;
 800a146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a148:	3304      	adds	r3, #4
 800a14a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	061a      	lsls	r2, r3, #24
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	021b      	lsls	r3, r3, #8
 800a154:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a158:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a15a:	68bb      	ldr	r3, [r7, #8]
 800a15c:	0a1b      	lsrs	r3, r3, #8
 800a15e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800a162:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a164:	68bb      	ldr	r3, [r7, #8]
 800a166:	0e1b      	lsrs	r3, r3, #24
 800a168:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800a16a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a16c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800a16e:	2300      	movs	r3, #0
}
 800a170:	4618      	mov	r0, r3
 800a172:	3738      	adds	r7, #56	@ 0x38
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}
 800a178:	18000f3a 	.word	0x18000f3a

0800a17c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b086      	sub	sp, #24
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a188:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a18e:	2b1f      	cmp	r3, #31
 800a190:	d936      	bls.n	800a200 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800a192:	2300      	movs	r3, #0
 800a194:	617b      	str	r3, [r7, #20]
 800a196:	e027      	b.n	800a1e8 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	4618      	mov	r0, r3
 800a19e:	f004 f8b3 	bl	800e308 <SDMMC_ReadFIFO>
 800a1a2:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	b2da      	uxtb	r2, r3
 800a1a8:	693b      	ldr	r3, [r7, #16]
 800a1aa:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a1ac:	693b      	ldr	r3, [r7, #16]
 800a1ae:	3301      	adds	r3, #1
 800a1b0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	0a1b      	lsrs	r3, r3, #8
 800a1b6:	b2da      	uxtb	r2, r3
 800a1b8:	693b      	ldr	r3, [r7, #16]
 800a1ba:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a1bc:	693b      	ldr	r3, [r7, #16]
 800a1be:	3301      	adds	r3, #1
 800a1c0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	0c1b      	lsrs	r3, r3, #16
 800a1c6:	b2da      	uxtb	r2, r3
 800a1c8:	693b      	ldr	r3, [r7, #16]
 800a1ca:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a1cc:	693b      	ldr	r3, [r7, #16]
 800a1ce:	3301      	adds	r3, #1
 800a1d0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	0e1b      	lsrs	r3, r3, #24
 800a1d6:	b2da      	uxtb	r2, r3
 800a1d8:	693b      	ldr	r3, [r7, #16]
 800a1da:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a1dc:	693b      	ldr	r3, [r7, #16]
 800a1de:	3301      	adds	r3, #1
 800a1e0:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800a1e2:	697b      	ldr	r3, [r7, #20]
 800a1e4:	3301      	adds	r3, #1
 800a1e6:	617b      	str	r3, [r7, #20]
 800a1e8:	697b      	ldr	r3, [r7, #20]
 800a1ea:	2b07      	cmp	r3, #7
 800a1ec:	d9d4      	bls.n	800a198 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	693a      	ldr	r2, [r7, #16]
 800a1f2:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1f8:	f1a3 0220 	sub.w	r2, r3, #32
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 800a200:	bf00      	nop
 800a202:	3718      	adds	r7, #24
 800a204:	46bd      	mov	sp, r7
 800a206:	bd80      	pop	{r7, pc}

0800a208 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b086      	sub	sp, #24
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	69db      	ldr	r3, [r3, #28]
 800a214:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6a1b      	ldr	r3, [r3, #32]
 800a21a:	2b1f      	cmp	r3, #31
 800a21c:	d93a      	bls.n	800a294 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800a21e:	2300      	movs	r3, #0
 800a220:	617b      	str	r3, [r7, #20]
 800a222:	e02b      	b.n	800a27c <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800a224:	693b      	ldr	r3, [r7, #16]
 800a226:	781b      	ldrb	r3, [r3, #0]
 800a228:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a22a:	693b      	ldr	r3, [r7, #16]
 800a22c:	3301      	adds	r3, #1
 800a22e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800a230:	693b      	ldr	r3, [r7, #16]
 800a232:	781b      	ldrb	r3, [r3, #0]
 800a234:	021a      	lsls	r2, r3, #8
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	4313      	orrs	r3, r2
 800a23a:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a23c:	693b      	ldr	r3, [r7, #16]
 800a23e:	3301      	adds	r3, #1
 800a240:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800a242:	693b      	ldr	r3, [r7, #16]
 800a244:	781b      	ldrb	r3, [r3, #0]
 800a246:	041a      	lsls	r2, r3, #16
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	4313      	orrs	r3, r2
 800a24c:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a24e:	693b      	ldr	r3, [r7, #16]
 800a250:	3301      	adds	r3, #1
 800a252:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800a254:	693b      	ldr	r3, [r7, #16]
 800a256:	781b      	ldrb	r3, [r3, #0]
 800a258:	061a      	lsls	r2, r3, #24
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	4313      	orrs	r3, r2
 800a25e:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a260:	693b      	ldr	r3, [r7, #16]
 800a262:	3301      	adds	r3, #1
 800a264:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	f107 020c 	add.w	r2, r7, #12
 800a26e:	4611      	mov	r1, r2
 800a270:	4618      	mov	r0, r3
 800a272:	f004 f856 	bl	800e322 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800a276:	697b      	ldr	r3, [r7, #20]
 800a278:	3301      	adds	r3, #1
 800a27a:	617b      	str	r3, [r7, #20]
 800a27c:	697b      	ldr	r3, [r7, #20]
 800a27e:	2b07      	cmp	r3, #7
 800a280:	d9d0      	bls.n	800a224 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	693a      	ldr	r2, [r7, #16]
 800a286:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	6a1b      	ldr	r3, [r3, #32]
 800a28c:	f1a3 0220 	sub.w	r2, r3, #32
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	621a      	str	r2, [r3, #32]
  }
}
 800a294:	bf00      	nop
 800a296:	3718      	adds	r7, #24
 800a298:	46bd      	mov	sp, r7
 800a29a:	bd80      	pop	{r7, pc}

0800a29c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800a29c:	b480      	push	{r7}
 800a29e:	b083      	sub	sp, #12
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800a2a4:	bf00      	nop
 800a2a6:	370c      	adds	r7, #12
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ae:	4770      	bx	lr

0800a2b0 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800a2b0:	b480      	push	{r7}
 800a2b2:	b083      	sub	sp, #12
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800a2b8:	bf00      	nop
 800a2ba:	370c      	adds	r7, #12
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c2:	4770      	bx	lr

0800a2c4 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	b083      	sub	sp, #12
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800a2cc:	bf00      	nop
 800a2ce:	370c      	adds	r7, #12
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d6:	4770      	bx	lr

0800a2d8 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800a2d8:	b480      	push	{r7}
 800a2da:	b083      	sub	sp, #12
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800a2e0:	bf00      	nop
 800a2e2:	370c      	adds	r7, #12
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ea:	4770      	bx	lr

0800a2ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b082      	sub	sp, #8
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d101      	bne.n	800a2fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a2fa:	2301      	movs	r3, #1
 800a2fc:	e049      	b.n	800a392 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a304:	b2db      	uxtb	r3, r3
 800a306:	2b00      	cmp	r3, #0
 800a308:	d106      	bne.n	800a318 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2200      	movs	r2, #0
 800a30e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f000 f841 	bl	800a39a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2202      	movs	r2, #2
 800a31c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681a      	ldr	r2, [r3, #0]
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	3304      	adds	r3, #4
 800a328:	4619      	mov	r1, r3
 800a32a:	4610      	mov	r0, r2
 800a32c:	f000 fad0 	bl	800a8d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2201      	movs	r2, #1
 800a334:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2201      	movs	r2, #1
 800a33c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2201      	movs	r2, #1
 800a344:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2201      	movs	r2, #1
 800a34c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2201      	movs	r2, #1
 800a354:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2201      	movs	r2, #1
 800a35c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2201      	movs	r2, #1
 800a364:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2201      	movs	r2, #1
 800a36c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2201      	movs	r2, #1
 800a374:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2201      	movs	r2, #1
 800a37c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2201      	movs	r2, #1
 800a384:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2201      	movs	r2, #1
 800a38c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a390:	2300      	movs	r3, #0
}
 800a392:	4618      	mov	r0, r3
 800a394:	3708      	adds	r7, #8
 800a396:	46bd      	mov	sp, r7
 800a398:	bd80      	pop	{r7, pc}

0800a39a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800a39a:	b480      	push	{r7}
 800a39c:	b083      	sub	sp, #12
 800a39e:	af00      	add	r7, sp, #0
 800a3a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a3a2:	bf00      	nop
 800a3a4:	370c      	adds	r7, #12
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ac:	4770      	bx	lr
	...

0800a3b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	b085      	sub	sp, #20
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a3be:	b2db      	uxtb	r3, r3
 800a3c0:	2b01      	cmp	r3, #1
 800a3c2:	d001      	beq.n	800a3c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a3c4:	2301      	movs	r3, #1
 800a3c6:	e054      	b.n	800a472 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2202      	movs	r2, #2
 800a3cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	68da      	ldr	r2, [r3, #12]
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f042 0201 	orr.w	r2, r2, #1
 800a3de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	4a26      	ldr	r2, [pc, #152]	@ (800a480 <HAL_TIM_Base_Start_IT+0xd0>)
 800a3e6:	4293      	cmp	r3, r2
 800a3e8:	d022      	beq.n	800a430 <HAL_TIM_Base_Start_IT+0x80>
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a3f2:	d01d      	beq.n	800a430 <HAL_TIM_Base_Start_IT+0x80>
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	4a22      	ldr	r2, [pc, #136]	@ (800a484 <HAL_TIM_Base_Start_IT+0xd4>)
 800a3fa:	4293      	cmp	r3, r2
 800a3fc:	d018      	beq.n	800a430 <HAL_TIM_Base_Start_IT+0x80>
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	4a21      	ldr	r2, [pc, #132]	@ (800a488 <HAL_TIM_Base_Start_IT+0xd8>)
 800a404:	4293      	cmp	r3, r2
 800a406:	d013      	beq.n	800a430 <HAL_TIM_Base_Start_IT+0x80>
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	4a1f      	ldr	r2, [pc, #124]	@ (800a48c <HAL_TIM_Base_Start_IT+0xdc>)
 800a40e:	4293      	cmp	r3, r2
 800a410:	d00e      	beq.n	800a430 <HAL_TIM_Base_Start_IT+0x80>
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	4a1e      	ldr	r2, [pc, #120]	@ (800a490 <HAL_TIM_Base_Start_IT+0xe0>)
 800a418:	4293      	cmp	r3, r2
 800a41a:	d009      	beq.n	800a430 <HAL_TIM_Base_Start_IT+0x80>
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	4a1c      	ldr	r2, [pc, #112]	@ (800a494 <HAL_TIM_Base_Start_IT+0xe4>)
 800a422:	4293      	cmp	r3, r2
 800a424:	d004      	beq.n	800a430 <HAL_TIM_Base_Start_IT+0x80>
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	4a1b      	ldr	r2, [pc, #108]	@ (800a498 <HAL_TIM_Base_Start_IT+0xe8>)
 800a42c:	4293      	cmp	r3, r2
 800a42e:	d115      	bne.n	800a45c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	689a      	ldr	r2, [r3, #8]
 800a436:	4b19      	ldr	r3, [pc, #100]	@ (800a49c <HAL_TIM_Base_Start_IT+0xec>)
 800a438:	4013      	ands	r3, r2
 800a43a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	2b06      	cmp	r3, #6
 800a440:	d015      	beq.n	800a46e <HAL_TIM_Base_Start_IT+0xbe>
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a448:	d011      	beq.n	800a46e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	681a      	ldr	r2, [r3, #0]
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	f042 0201 	orr.w	r2, r2, #1
 800a458:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a45a:	e008      	b.n	800a46e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	681a      	ldr	r2, [r3, #0]
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	f042 0201 	orr.w	r2, r2, #1
 800a46a:	601a      	str	r2, [r3, #0]
 800a46c:	e000      	b.n	800a470 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a46e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a470:	2300      	movs	r3, #0
}
 800a472:	4618      	mov	r0, r3
 800a474:	3714      	adds	r7, #20
 800a476:	46bd      	mov	sp, r7
 800a478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47c:	4770      	bx	lr
 800a47e:	bf00      	nop
 800a480:	40010000 	.word	0x40010000
 800a484:	40000400 	.word	0x40000400
 800a488:	40000800 	.word	0x40000800
 800a48c:	40000c00 	.word	0x40000c00
 800a490:	40010400 	.word	0x40010400
 800a494:	40001800 	.word	0x40001800
 800a498:	40014000 	.word	0x40014000
 800a49c:	00010007 	.word	0x00010007

0800a4a0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b082      	sub	sp, #8
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d101      	bne.n	800a4b2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	e049      	b.n	800a546 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a4b8:	b2db      	uxtb	r3, r3
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d106      	bne.n	800a4cc <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800a4c6:	6878      	ldr	r0, [r7, #4]
 800a4c8:	f7f6 ff64 	bl	8001394 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2202      	movs	r2, #2
 800a4d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681a      	ldr	r2, [r3, #0]
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	3304      	adds	r3, #4
 800a4dc:	4619      	mov	r1, r3
 800a4de:	4610      	mov	r0, r2
 800a4e0:	f000 f9f6 	bl	800a8d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2201      	movs	r2, #1
 800a4e8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2201      	movs	r2, #1
 800a4f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2201      	movs	r2, #1
 800a4f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2201      	movs	r2, #1
 800a500:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2201      	movs	r2, #1
 800a508:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2201      	movs	r2, #1
 800a510:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2201      	movs	r2, #1
 800a518:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2201      	movs	r2, #1
 800a520:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2201      	movs	r2, #1
 800a528:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2201      	movs	r2, #1
 800a530:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2201      	movs	r2, #1
 800a538:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2201      	movs	r2, #1
 800a540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a544:	2300      	movs	r3, #0
}
 800a546:	4618      	mov	r0, r3
 800a548:	3708      	adds	r7, #8
 800a54a:	46bd      	mov	sp, r7
 800a54c:	bd80      	pop	{r7, pc}

0800a54e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a54e:	b580      	push	{r7, lr}
 800a550:	b082      	sub	sp, #8
 800a552:	af00      	add	r7, sp, #0
 800a554:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	691b      	ldr	r3, [r3, #16]
 800a55c:	f003 0302 	and.w	r3, r3, #2
 800a560:	2b02      	cmp	r3, #2
 800a562:	d122      	bne.n	800a5aa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	68db      	ldr	r3, [r3, #12]
 800a56a:	f003 0302 	and.w	r3, r3, #2
 800a56e:	2b02      	cmp	r3, #2
 800a570:	d11b      	bne.n	800a5aa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f06f 0202 	mvn.w	r2, #2
 800a57a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2201      	movs	r2, #1
 800a580:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	699b      	ldr	r3, [r3, #24]
 800a588:	f003 0303 	and.w	r3, r3, #3
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d003      	beq.n	800a598 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a590:	6878      	ldr	r0, [r7, #4]
 800a592:	f000 f97f 	bl	800a894 <HAL_TIM_IC_CaptureCallback>
 800a596:	e005      	b.n	800a5a4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a598:	6878      	ldr	r0, [r7, #4]
 800a59a:	f000 f971 	bl	800a880 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	f000 f982 	bl	800a8a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	691b      	ldr	r3, [r3, #16]
 800a5b0:	f003 0304 	and.w	r3, r3, #4
 800a5b4:	2b04      	cmp	r3, #4
 800a5b6:	d122      	bne.n	800a5fe <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	68db      	ldr	r3, [r3, #12]
 800a5be:	f003 0304 	and.w	r3, r3, #4
 800a5c2:	2b04      	cmp	r3, #4
 800a5c4:	d11b      	bne.n	800a5fe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	f06f 0204 	mvn.w	r2, #4
 800a5ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2202      	movs	r2, #2
 800a5d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	699b      	ldr	r3, [r3, #24]
 800a5dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d003      	beq.n	800a5ec <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a5e4:	6878      	ldr	r0, [r7, #4]
 800a5e6:	f000 f955 	bl	800a894 <HAL_TIM_IC_CaptureCallback>
 800a5ea:	e005      	b.n	800a5f8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	f000 f947 	bl	800a880 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	f000 f958 	bl	800a8a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	691b      	ldr	r3, [r3, #16]
 800a604:	f003 0308 	and.w	r3, r3, #8
 800a608:	2b08      	cmp	r3, #8
 800a60a:	d122      	bne.n	800a652 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	68db      	ldr	r3, [r3, #12]
 800a612:	f003 0308 	and.w	r3, r3, #8
 800a616:	2b08      	cmp	r3, #8
 800a618:	d11b      	bne.n	800a652 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f06f 0208 	mvn.w	r2, #8
 800a622:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2204      	movs	r2, #4
 800a628:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	69db      	ldr	r3, [r3, #28]
 800a630:	f003 0303 	and.w	r3, r3, #3
 800a634:	2b00      	cmp	r3, #0
 800a636:	d003      	beq.n	800a640 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a638:	6878      	ldr	r0, [r7, #4]
 800a63a:	f000 f92b 	bl	800a894 <HAL_TIM_IC_CaptureCallback>
 800a63e:	e005      	b.n	800a64c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f000 f91d 	bl	800a880 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a646:	6878      	ldr	r0, [r7, #4]
 800a648:	f000 f92e 	bl	800a8a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2200      	movs	r2, #0
 800a650:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	691b      	ldr	r3, [r3, #16]
 800a658:	f003 0310 	and.w	r3, r3, #16
 800a65c:	2b10      	cmp	r3, #16
 800a65e:	d122      	bne.n	800a6a6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	68db      	ldr	r3, [r3, #12]
 800a666:	f003 0310 	and.w	r3, r3, #16
 800a66a:	2b10      	cmp	r3, #16
 800a66c:	d11b      	bne.n	800a6a6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f06f 0210 	mvn.w	r2, #16
 800a676:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2208      	movs	r2, #8
 800a67c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	69db      	ldr	r3, [r3, #28]
 800a684:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d003      	beq.n	800a694 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a68c:	6878      	ldr	r0, [r7, #4]
 800a68e:	f000 f901 	bl	800a894 <HAL_TIM_IC_CaptureCallback>
 800a692:	e005      	b.n	800a6a0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f000 f8f3 	bl	800a880 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a69a:	6878      	ldr	r0, [r7, #4]
 800a69c:	f000 f904 	bl	800a8a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	691b      	ldr	r3, [r3, #16]
 800a6ac:	f003 0301 	and.w	r3, r3, #1
 800a6b0:	2b01      	cmp	r3, #1
 800a6b2:	d10e      	bne.n	800a6d2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	68db      	ldr	r3, [r3, #12]
 800a6ba:	f003 0301 	and.w	r3, r3, #1
 800a6be:	2b01      	cmp	r3, #1
 800a6c0:	d107      	bne.n	800a6d2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	f06f 0201 	mvn.w	r2, #1
 800a6ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a6cc:	6878      	ldr	r0, [r7, #4]
 800a6ce:	f7f6 fd4d 	bl	800116c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	691b      	ldr	r3, [r3, #16]
 800a6d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a6dc:	2b80      	cmp	r3, #128	@ 0x80
 800a6de:	d10e      	bne.n	800a6fe <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	68db      	ldr	r3, [r3, #12]
 800a6e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a6ea:	2b80      	cmp	r3, #128	@ 0x80
 800a6ec:	d107      	bne.n	800a6fe <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800a6f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a6f8:	6878      	ldr	r0, [r7, #4]
 800a6fa:	f000 fcf1 	bl	800b0e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	691b      	ldr	r3, [r3, #16]
 800a704:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a708:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a70c:	d10e      	bne.n	800a72c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	68db      	ldr	r3, [r3, #12]
 800a714:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a718:	2b80      	cmp	r3, #128	@ 0x80
 800a71a:	d107      	bne.n	800a72c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a724:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a726:	6878      	ldr	r0, [r7, #4]
 800a728:	f000 fce4 	bl	800b0f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	691b      	ldr	r3, [r3, #16]
 800a732:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a736:	2b40      	cmp	r3, #64	@ 0x40
 800a738:	d10e      	bne.n	800a758 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	68db      	ldr	r3, [r3, #12]
 800a740:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a744:	2b40      	cmp	r3, #64	@ 0x40
 800a746:	d107      	bne.n	800a758 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a750:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a752:	6878      	ldr	r0, [r7, #4]
 800a754:	f000 f8b2 	bl	800a8bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	691b      	ldr	r3, [r3, #16]
 800a75e:	f003 0320 	and.w	r3, r3, #32
 800a762:	2b20      	cmp	r3, #32
 800a764:	d10e      	bne.n	800a784 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	68db      	ldr	r3, [r3, #12]
 800a76c:	f003 0320 	and.w	r3, r3, #32
 800a770:	2b20      	cmp	r3, #32
 800a772:	d107      	bne.n	800a784 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	f06f 0220 	mvn.w	r2, #32
 800a77c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	f000 fca4 	bl	800b0cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a784:	bf00      	nop
 800a786:	3708      	adds	r7, #8
 800a788:	46bd      	mov	sp, r7
 800a78a:	bd80      	pop	{r7, pc}

0800a78c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b086      	sub	sp, #24
 800a790:	af00      	add	r7, sp, #0
 800a792:	60f8      	str	r0, [r7, #12]
 800a794:	60b9      	str	r1, [r7, #8]
 800a796:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a798:	2300      	movs	r3, #0
 800a79a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a7a2:	2b01      	cmp	r3, #1
 800a7a4:	d101      	bne.n	800a7aa <HAL_TIM_OC_ConfigChannel+0x1e>
 800a7a6:	2302      	movs	r3, #2
 800a7a8:	e066      	b.n	800a878 <HAL_TIM_OC_ConfigChannel+0xec>
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	2201      	movs	r2, #1
 800a7ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	2b14      	cmp	r3, #20
 800a7b6:	d857      	bhi.n	800a868 <HAL_TIM_OC_ConfigChannel+0xdc>
 800a7b8:	a201      	add	r2, pc, #4	@ (adr r2, 800a7c0 <HAL_TIM_OC_ConfigChannel+0x34>)
 800a7ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7be:	bf00      	nop
 800a7c0:	0800a815 	.word	0x0800a815
 800a7c4:	0800a869 	.word	0x0800a869
 800a7c8:	0800a869 	.word	0x0800a869
 800a7cc:	0800a869 	.word	0x0800a869
 800a7d0:	0800a823 	.word	0x0800a823
 800a7d4:	0800a869 	.word	0x0800a869
 800a7d8:	0800a869 	.word	0x0800a869
 800a7dc:	0800a869 	.word	0x0800a869
 800a7e0:	0800a831 	.word	0x0800a831
 800a7e4:	0800a869 	.word	0x0800a869
 800a7e8:	0800a869 	.word	0x0800a869
 800a7ec:	0800a869 	.word	0x0800a869
 800a7f0:	0800a83f 	.word	0x0800a83f
 800a7f4:	0800a869 	.word	0x0800a869
 800a7f8:	0800a869 	.word	0x0800a869
 800a7fc:	0800a869 	.word	0x0800a869
 800a800:	0800a84d 	.word	0x0800a84d
 800a804:	0800a869 	.word	0x0800a869
 800a808:	0800a869 	.word	0x0800a869
 800a80c:	0800a869 	.word	0x0800a869
 800a810:	0800a85b 	.word	0x0800a85b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	68b9      	ldr	r1, [r7, #8]
 800a81a:	4618      	mov	r0, r3
 800a81c:	f000 f8f2 	bl	800aa04 <TIM_OC1_SetConfig>
      break;
 800a820:	e025      	b.n	800a86e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	68b9      	ldr	r1, [r7, #8]
 800a828:	4618      	mov	r0, r3
 800a82a:	f000 f97b 	bl	800ab24 <TIM_OC2_SetConfig>
      break;
 800a82e:	e01e      	b.n	800a86e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	68b9      	ldr	r1, [r7, #8]
 800a836:	4618      	mov	r0, r3
 800a838:	f000 f9fe 	bl	800ac38 <TIM_OC3_SetConfig>
      break;
 800a83c:	e017      	b.n	800a86e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	68b9      	ldr	r1, [r7, #8]
 800a844:	4618      	mov	r0, r3
 800a846:	f000 fa7f 	bl	800ad48 <TIM_OC4_SetConfig>
      break;
 800a84a:	e010      	b.n	800a86e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	68b9      	ldr	r1, [r7, #8]
 800a852:	4618      	mov	r0, r3
 800a854:	f000 fae2 	bl	800ae1c <TIM_OC5_SetConfig>
      break;
 800a858:	e009      	b.n	800a86e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	68b9      	ldr	r1, [r7, #8]
 800a860:	4618      	mov	r0, r3
 800a862:	f000 fb3f 	bl	800aee4 <TIM_OC6_SetConfig>
      break;
 800a866:	e002      	b.n	800a86e <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800a868:	2301      	movs	r3, #1
 800a86a:	75fb      	strb	r3, [r7, #23]
      break;
 800a86c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	2200      	movs	r2, #0
 800a872:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a876:	7dfb      	ldrb	r3, [r7, #23]
}
 800a878:	4618      	mov	r0, r3
 800a87a:	3718      	adds	r7, #24
 800a87c:	46bd      	mov	sp, r7
 800a87e:	bd80      	pop	{r7, pc}

0800a880 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a880:	b480      	push	{r7}
 800a882:	b083      	sub	sp, #12
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a888:	bf00      	nop
 800a88a:	370c      	adds	r7, #12
 800a88c:	46bd      	mov	sp, r7
 800a88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a892:	4770      	bx	lr

0800a894 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a894:	b480      	push	{r7}
 800a896:	b083      	sub	sp, #12
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a89c:	bf00      	nop
 800a89e:	370c      	adds	r7, #12
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a6:	4770      	bx	lr

0800a8a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a8a8:	b480      	push	{r7}
 800a8aa:	b083      	sub	sp, #12
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a8b0:	bf00      	nop
 800a8b2:	370c      	adds	r7, #12
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ba:	4770      	bx	lr

0800a8bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b083      	sub	sp, #12
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a8c4:	bf00      	nop
 800a8c6:	370c      	adds	r7, #12
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ce:	4770      	bx	lr

0800a8d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a8d0:	b480      	push	{r7}
 800a8d2:	b085      	sub	sp, #20
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
 800a8d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	4a40      	ldr	r2, [pc, #256]	@ (800a9e4 <TIM_Base_SetConfig+0x114>)
 800a8e4:	4293      	cmp	r3, r2
 800a8e6:	d013      	beq.n	800a910 <TIM_Base_SetConfig+0x40>
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a8ee:	d00f      	beq.n	800a910 <TIM_Base_SetConfig+0x40>
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	4a3d      	ldr	r2, [pc, #244]	@ (800a9e8 <TIM_Base_SetConfig+0x118>)
 800a8f4:	4293      	cmp	r3, r2
 800a8f6:	d00b      	beq.n	800a910 <TIM_Base_SetConfig+0x40>
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	4a3c      	ldr	r2, [pc, #240]	@ (800a9ec <TIM_Base_SetConfig+0x11c>)
 800a8fc:	4293      	cmp	r3, r2
 800a8fe:	d007      	beq.n	800a910 <TIM_Base_SetConfig+0x40>
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	4a3b      	ldr	r2, [pc, #236]	@ (800a9f0 <TIM_Base_SetConfig+0x120>)
 800a904:	4293      	cmp	r3, r2
 800a906:	d003      	beq.n	800a910 <TIM_Base_SetConfig+0x40>
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	4a3a      	ldr	r2, [pc, #232]	@ (800a9f4 <TIM_Base_SetConfig+0x124>)
 800a90c:	4293      	cmp	r3, r2
 800a90e:	d108      	bne.n	800a922 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a916:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	685b      	ldr	r3, [r3, #4]
 800a91c:	68fa      	ldr	r2, [r7, #12]
 800a91e:	4313      	orrs	r3, r2
 800a920:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	4a2f      	ldr	r2, [pc, #188]	@ (800a9e4 <TIM_Base_SetConfig+0x114>)
 800a926:	4293      	cmp	r3, r2
 800a928:	d01f      	beq.n	800a96a <TIM_Base_SetConfig+0x9a>
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a930:	d01b      	beq.n	800a96a <TIM_Base_SetConfig+0x9a>
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	4a2c      	ldr	r2, [pc, #176]	@ (800a9e8 <TIM_Base_SetConfig+0x118>)
 800a936:	4293      	cmp	r3, r2
 800a938:	d017      	beq.n	800a96a <TIM_Base_SetConfig+0x9a>
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	4a2b      	ldr	r2, [pc, #172]	@ (800a9ec <TIM_Base_SetConfig+0x11c>)
 800a93e:	4293      	cmp	r3, r2
 800a940:	d013      	beq.n	800a96a <TIM_Base_SetConfig+0x9a>
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	4a2a      	ldr	r2, [pc, #168]	@ (800a9f0 <TIM_Base_SetConfig+0x120>)
 800a946:	4293      	cmp	r3, r2
 800a948:	d00f      	beq.n	800a96a <TIM_Base_SetConfig+0x9a>
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	4a29      	ldr	r2, [pc, #164]	@ (800a9f4 <TIM_Base_SetConfig+0x124>)
 800a94e:	4293      	cmp	r3, r2
 800a950:	d00b      	beq.n	800a96a <TIM_Base_SetConfig+0x9a>
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	4a28      	ldr	r2, [pc, #160]	@ (800a9f8 <TIM_Base_SetConfig+0x128>)
 800a956:	4293      	cmp	r3, r2
 800a958:	d007      	beq.n	800a96a <TIM_Base_SetConfig+0x9a>
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	4a27      	ldr	r2, [pc, #156]	@ (800a9fc <TIM_Base_SetConfig+0x12c>)
 800a95e:	4293      	cmp	r3, r2
 800a960:	d003      	beq.n	800a96a <TIM_Base_SetConfig+0x9a>
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	4a26      	ldr	r2, [pc, #152]	@ (800aa00 <TIM_Base_SetConfig+0x130>)
 800a966:	4293      	cmp	r3, r2
 800a968:	d108      	bne.n	800a97c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a970:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	68db      	ldr	r3, [r3, #12]
 800a976:	68fa      	ldr	r2, [r7, #12]
 800a978:	4313      	orrs	r3, r2
 800a97a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	695b      	ldr	r3, [r3, #20]
 800a986:	4313      	orrs	r3, r2
 800a988:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	68fa      	ldr	r2, [r7, #12]
 800a98e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	689a      	ldr	r2, [r3, #8]
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	681a      	ldr	r2, [r3, #0]
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	4a10      	ldr	r2, [pc, #64]	@ (800a9e4 <TIM_Base_SetConfig+0x114>)
 800a9a4:	4293      	cmp	r3, r2
 800a9a6:	d00f      	beq.n	800a9c8 <TIM_Base_SetConfig+0xf8>
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	4a12      	ldr	r2, [pc, #72]	@ (800a9f4 <TIM_Base_SetConfig+0x124>)
 800a9ac:	4293      	cmp	r3, r2
 800a9ae:	d00b      	beq.n	800a9c8 <TIM_Base_SetConfig+0xf8>
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	4a11      	ldr	r2, [pc, #68]	@ (800a9f8 <TIM_Base_SetConfig+0x128>)
 800a9b4:	4293      	cmp	r3, r2
 800a9b6:	d007      	beq.n	800a9c8 <TIM_Base_SetConfig+0xf8>
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	4a10      	ldr	r2, [pc, #64]	@ (800a9fc <TIM_Base_SetConfig+0x12c>)
 800a9bc:	4293      	cmp	r3, r2
 800a9be:	d003      	beq.n	800a9c8 <TIM_Base_SetConfig+0xf8>
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	4a0f      	ldr	r2, [pc, #60]	@ (800aa00 <TIM_Base_SetConfig+0x130>)
 800a9c4:	4293      	cmp	r3, r2
 800a9c6:	d103      	bne.n	800a9d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	691a      	ldr	r2, [r3, #16]
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2201      	movs	r2, #1
 800a9d4:	615a      	str	r2, [r3, #20]
}
 800a9d6:	bf00      	nop
 800a9d8:	3714      	adds	r7, #20
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e0:	4770      	bx	lr
 800a9e2:	bf00      	nop
 800a9e4:	40010000 	.word	0x40010000
 800a9e8:	40000400 	.word	0x40000400
 800a9ec:	40000800 	.word	0x40000800
 800a9f0:	40000c00 	.word	0x40000c00
 800a9f4:	40010400 	.word	0x40010400
 800a9f8:	40014000 	.word	0x40014000
 800a9fc:	40014400 	.word	0x40014400
 800aa00:	40014800 	.word	0x40014800

0800aa04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aa04:	b480      	push	{r7}
 800aa06:	b087      	sub	sp, #28
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
 800aa0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6a1b      	ldr	r3, [r3, #32]
 800aa12:	f023 0201 	bic.w	r2, r3, #1
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6a1b      	ldr	r3, [r3, #32]
 800aa1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	685b      	ldr	r3, [r3, #4]
 800aa24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	699b      	ldr	r3, [r3, #24]
 800aa2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800aa2c:	68fa      	ldr	r2, [r7, #12]
 800aa2e:	4b37      	ldr	r3, [pc, #220]	@ (800ab0c <TIM_OC1_SetConfig+0x108>)
 800aa30:	4013      	ands	r3, r2
 800aa32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	f023 0303 	bic.w	r3, r3, #3
 800aa3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	68fa      	ldr	r2, [r7, #12]
 800aa42:	4313      	orrs	r3, r2
 800aa44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800aa46:	697b      	ldr	r3, [r7, #20]
 800aa48:	f023 0302 	bic.w	r3, r3, #2
 800aa4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	689b      	ldr	r3, [r3, #8]
 800aa52:	697a      	ldr	r2, [r7, #20]
 800aa54:	4313      	orrs	r3, r2
 800aa56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	4a2d      	ldr	r2, [pc, #180]	@ (800ab10 <TIM_OC1_SetConfig+0x10c>)
 800aa5c:	4293      	cmp	r3, r2
 800aa5e:	d00f      	beq.n	800aa80 <TIM_OC1_SetConfig+0x7c>
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	4a2c      	ldr	r2, [pc, #176]	@ (800ab14 <TIM_OC1_SetConfig+0x110>)
 800aa64:	4293      	cmp	r3, r2
 800aa66:	d00b      	beq.n	800aa80 <TIM_OC1_SetConfig+0x7c>
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	4a2b      	ldr	r2, [pc, #172]	@ (800ab18 <TIM_OC1_SetConfig+0x114>)
 800aa6c:	4293      	cmp	r3, r2
 800aa6e:	d007      	beq.n	800aa80 <TIM_OC1_SetConfig+0x7c>
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	4a2a      	ldr	r2, [pc, #168]	@ (800ab1c <TIM_OC1_SetConfig+0x118>)
 800aa74:	4293      	cmp	r3, r2
 800aa76:	d003      	beq.n	800aa80 <TIM_OC1_SetConfig+0x7c>
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	4a29      	ldr	r2, [pc, #164]	@ (800ab20 <TIM_OC1_SetConfig+0x11c>)
 800aa7c:	4293      	cmp	r3, r2
 800aa7e:	d10c      	bne.n	800aa9a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800aa80:	697b      	ldr	r3, [r7, #20]
 800aa82:	f023 0308 	bic.w	r3, r3, #8
 800aa86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	68db      	ldr	r3, [r3, #12]
 800aa8c:	697a      	ldr	r2, [r7, #20]
 800aa8e:	4313      	orrs	r3, r2
 800aa90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800aa92:	697b      	ldr	r3, [r7, #20]
 800aa94:	f023 0304 	bic.w	r3, r3, #4
 800aa98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	4a1c      	ldr	r2, [pc, #112]	@ (800ab10 <TIM_OC1_SetConfig+0x10c>)
 800aa9e:	4293      	cmp	r3, r2
 800aaa0:	d00f      	beq.n	800aac2 <TIM_OC1_SetConfig+0xbe>
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	4a1b      	ldr	r2, [pc, #108]	@ (800ab14 <TIM_OC1_SetConfig+0x110>)
 800aaa6:	4293      	cmp	r3, r2
 800aaa8:	d00b      	beq.n	800aac2 <TIM_OC1_SetConfig+0xbe>
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	4a1a      	ldr	r2, [pc, #104]	@ (800ab18 <TIM_OC1_SetConfig+0x114>)
 800aaae:	4293      	cmp	r3, r2
 800aab0:	d007      	beq.n	800aac2 <TIM_OC1_SetConfig+0xbe>
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	4a19      	ldr	r2, [pc, #100]	@ (800ab1c <TIM_OC1_SetConfig+0x118>)
 800aab6:	4293      	cmp	r3, r2
 800aab8:	d003      	beq.n	800aac2 <TIM_OC1_SetConfig+0xbe>
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	4a18      	ldr	r2, [pc, #96]	@ (800ab20 <TIM_OC1_SetConfig+0x11c>)
 800aabe:	4293      	cmp	r3, r2
 800aac0:	d111      	bne.n	800aae6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800aac2:	693b      	ldr	r3, [r7, #16]
 800aac4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aac8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800aaca:	693b      	ldr	r3, [r7, #16]
 800aacc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800aad0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	695b      	ldr	r3, [r3, #20]
 800aad6:	693a      	ldr	r2, [r7, #16]
 800aad8:	4313      	orrs	r3, r2
 800aada:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	699b      	ldr	r3, [r3, #24]
 800aae0:	693a      	ldr	r2, [r7, #16]
 800aae2:	4313      	orrs	r3, r2
 800aae4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	693a      	ldr	r2, [r7, #16]
 800aaea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	68fa      	ldr	r2, [r7, #12]
 800aaf0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	685a      	ldr	r2, [r3, #4]
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	697a      	ldr	r2, [r7, #20]
 800aafe:	621a      	str	r2, [r3, #32]
}
 800ab00:	bf00      	nop
 800ab02:	371c      	adds	r7, #28
 800ab04:	46bd      	mov	sp, r7
 800ab06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0a:	4770      	bx	lr
 800ab0c:	fffeff8f 	.word	0xfffeff8f
 800ab10:	40010000 	.word	0x40010000
 800ab14:	40010400 	.word	0x40010400
 800ab18:	40014000 	.word	0x40014000
 800ab1c:	40014400 	.word	0x40014400
 800ab20:	40014800 	.word	0x40014800

0800ab24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ab24:	b480      	push	{r7}
 800ab26:	b087      	sub	sp, #28
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
 800ab2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	6a1b      	ldr	r3, [r3, #32]
 800ab32:	f023 0210 	bic.w	r2, r3, #16
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	6a1b      	ldr	r3, [r3, #32]
 800ab3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	685b      	ldr	r3, [r3, #4]
 800ab44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	699b      	ldr	r3, [r3, #24]
 800ab4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ab4c:	68fa      	ldr	r2, [r7, #12]
 800ab4e:	4b34      	ldr	r3, [pc, #208]	@ (800ac20 <TIM_OC2_SetConfig+0xfc>)
 800ab50:	4013      	ands	r3, r2
 800ab52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ab5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	021b      	lsls	r3, r3, #8
 800ab62:	68fa      	ldr	r2, [r7, #12]
 800ab64:	4313      	orrs	r3, r2
 800ab66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ab68:	697b      	ldr	r3, [r7, #20]
 800ab6a:	f023 0320 	bic.w	r3, r3, #32
 800ab6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	689b      	ldr	r3, [r3, #8]
 800ab74:	011b      	lsls	r3, r3, #4
 800ab76:	697a      	ldr	r2, [r7, #20]
 800ab78:	4313      	orrs	r3, r2
 800ab7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	4a29      	ldr	r2, [pc, #164]	@ (800ac24 <TIM_OC2_SetConfig+0x100>)
 800ab80:	4293      	cmp	r3, r2
 800ab82:	d003      	beq.n	800ab8c <TIM_OC2_SetConfig+0x68>
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	4a28      	ldr	r2, [pc, #160]	@ (800ac28 <TIM_OC2_SetConfig+0x104>)
 800ab88:	4293      	cmp	r3, r2
 800ab8a:	d10d      	bne.n	800aba8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ab8c:	697b      	ldr	r3, [r7, #20]
 800ab8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ab92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	68db      	ldr	r3, [r3, #12]
 800ab98:	011b      	lsls	r3, r3, #4
 800ab9a:	697a      	ldr	r2, [r7, #20]
 800ab9c:	4313      	orrs	r3, r2
 800ab9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800aba0:	697b      	ldr	r3, [r7, #20]
 800aba2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aba6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	4a1e      	ldr	r2, [pc, #120]	@ (800ac24 <TIM_OC2_SetConfig+0x100>)
 800abac:	4293      	cmp	r3, r2
 800abae:	d00f      	beq.n	800abd0 <TIM_OC2_SetConfig+0xac>
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	4a1d      	ldr	r2, [pc, #116]	@ (800ac28 <TIM_OC2_SetConfig+0x104>)
 800abb4:	4293      	cmp	r3, r2
 800abb6:	d00b      	beq.n	800abd0 <TIM_OC2_SetConfig+0xac>
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	4a1c      	ldr	r2, [pc, #112]	@ (800ac2c <TIM_OC2_SetConfig+0x108>)
 800abbc:	4293      	cmp	r3, r2
 800abbe:	d007      	beq.n	800abd0 <TIM_OC2_SetConfig+0xac>
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	4a1b      	ldr	r2, [pc, #108]	@ (800ac30 <TIM_OC2_SetConfig+0x10c>)
 800abc4:	4293      	cmp	r3, r2
 800abc6:	d003      	beq.n	800abd0 <TIM_OC2_SetConfig+0xac>
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	4a1a      	ldr	r2, [pc, #104]	@ (800ac34 <TIM_OC2_SetConfig+0x110>)
 800abcc:	4293      	cmp	r3, r2
 800abce:	d113      	bne.n	800abf8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800abd0:	693b      	ldr	r3, [r7, #16]
 800abd2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800abd6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800abd8:	693b      	ldr	r3, [r7, #16]
 800abda:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800abde:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	695b      	ldr	r3, [r3, #20]
 800abe4:	009b      	lsls	r3, r3, #2
 800abe6:	693a      	ldr	r2, [r7, #16]
 800abe8:	4313      	orrs	r3, r2
 800abea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	699b      	ldr	r3, [r3, #24]
 800abf0:	009b      	lsls	r3, r3, #2
 800abf2:	693a      	ldr	r2, [r7, #16]
 800abf4:	4313      	orrs	r3, r2
 800abf6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	693a      	ldr	r2, [r7, #16]
 800abfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	68fa      	ldr	r2, [r7, #12]
 800ac02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ac04:	683b      	ldr	r3, [r7, #0]
 800ac06:	685a      	ldr	r2, [r3, #4]
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	697a      	ldr	r2, [r7, #20]
 800ac10:	621a      	str	r2, [r3, #32]
}
 800ac12:	bf00      	nop
 800ac14:	371c      	adds	r7, #28
 800ac16:	46bd      	mov	sp, r7
 800ac18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1c:	4770      	bx	lr
 800ac1e:	bf00      	nop
 800ac20:	feff8fff 	.word	0xfeff8fff
 800ac24:	40010000 	.word	0x40010000
 800ac28:	40010400 	.word	0x40010400
 800ac2c:	40014000 	.word	0x40014000
 800ac30:	40014400 	.word	0x40014400
 800ac34:	40014800 	.word	0x40014800

0800ac38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ac38:	b480      	push	{r7}
 800ac3a:	b087      	sub	sp, #28
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
 800ac40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6a1b      	ldr	r3, [r3, #32]
 800ac46:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	6a1b      	ldr	r3, [r3, #32]
 800ac52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	685b      	ldr	r3, [r3, #4]
 800ac58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	69db      	ldr	r3, [r3, #28]
 800ac5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ac60:	68fa      	ldr	r2, [r7, #12]
 800ac62:	4b33      	ldr	r3, [pc, #204]	@ (800ad30 <TIM_OC3_SetConfig+0xf8>)
 800ac64:	4013      	ands	r3, r2
 800ac66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	f023 0303 	bic.w	r3, r3, #3
 800ac6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	68fa      	ldr	r2, [r7, #12]
 800ac76:	4313      	orrs	r3, r2
 800ac78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ac7a:	697b      	ldr	r3, [r7, #20]
 800ac7c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ac80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	689b      	ldr	r3, [r3, #8]
 800ac86:	021b      	lsls	r3, r3, #8
 800ac88:	697a      	ldr	r2, [r7, #20]
 800ac8a:	4313      	orrs	r3, r2
 800ac8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	4a28      	ldr	r2, [pc, #160]	@ (800ad34 <TIM_OC3_SetConfig+0xfc>)
 800ac92:	4293      	cmp	r3, r2
 800ac94:	d003      	beq.n	800ac9e <TIM_OC3_SetConfig+0x66>
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	4a27      	ldr	r2, [pc, #156]	@ (800ad38 <TIM_OC3_SetConfig+0x100>)
 800ac9a:	4293      	cmp	r3, r2
 800ac9c:	d10d      	bne.n	800acba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ac9e:	697b      	ldr	r3, [r7, #20]
 800aca0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800aca4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	68db      	ldr	r3, [r3, #12]
 800acaa:	021b      	lsls	r3, r3, #8
 800acac:	697a      	ldr	r2, [r7, #20]
 800acae:	4313      	orrs	r3, r2
 800acb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800acb2:	697b      	ldr	r3, [r7, #20]
 800acb4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800acb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	4a1d      	ldr	r2, [pc, #116]	@ (800ad34 <TIM_OC3_SetConfig+0xfc>)
 800acbe:	4293      	cmp	r3, r2
 800acc0:	d00f      	beq.n	800ace2 <TIM_OC3_SetConfig+0xaa>
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	4a1c      	ldr	r2, [pc, #112]	@ (800ad38 <TIM_OC3_SetConfig+0x100>)
 800acc6:	4293      	cmp	r3, r2
 800acc8:	d00b      	beq.n	800ace2 <TIM_OC3_SetConfig+0xaa>
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	4a1b      	ldr	r2, [pc, #108]	@ (800ad3c <TIM_OC3_SetConfig+0x104>)
 800acce:	4293      	cmp	r3, r2
 800acd0:	d007      	beq.n	800ace2 <TIM_OC3_SetConfig+0xaa>
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	4a1a      	ldr	r2, [pc, #104]	@ (800ad40 <TIM_OC3_SetConfig+0x108>)
 800acd6:	4293      	cmp	r3, r2
 800acd8:	d003      	beq.n	800ace2 <TIM_OC3_SetConfig+0xaa>
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	4a19      	ldr	r2, [pc, #100]	@ (800ad44 <TIM_OC3_SetConfig+0x10c>)
 800acde:	4293      	cmp	r3, r2
 800ace0:	d113      	bne.n	800ad0a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ace2:	693b      	ldr	r3, [r7, #16]
 800ace4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ace8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800acea:	693b      	ldr	r3, [r7, #16]
 800acec:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800acf0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	695b      	ldr	r3, [r3, #20]
 800acf6:	011b      	lsls	r3, r3, #4
 800acf8:	693a      	ldr	r2, [r7, #16]
 800acfa:	4313      	orrs	r3, r2
 800acfc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	699b      	ldr	r3, [r3, #24]
 800ad02:	011b      	lsls	r3, r3, #4
 800ad04:	693a      	ldr	r2, [r7, #16]
 800ad06:	4313      	orrs	r3, r2
 800ad08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	693a      	ldr	r2, [r7, #16]
 800ad0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	68fa      	ldr	r2, [r7, #12]
 800ad14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	685a      	ldr	r2, [r3, #4]
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	697a      	ldr	r2, [r7, #20]
 800ad22:	621a      	str	r2, [r3, #32]
}
 800ad24:	bf00      	nop
 800ad26:	371c      	adds	r7, #28
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2e:	4770      	bx	lr
 800ad30:	fffeff8f 	.word	0xfffeff8f
 800ad34:	40010000 	.word	0x40010000
 800ad38:	40010400 	.word	0x40010400
 800ad3c:	40014000 	.word	0x40014000
 800ad40:	40014400 	.word	0x40014400
 800ad44:	40014800 	.word	0x40014800

0800ad48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ad48:	b480      	push	{r7}
 800ad4a:	b087      	sub	sp, #28
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
 800ad50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	6a1b      	ldr	r3, [r3, #32]
 800ad56:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	6a1b      	ldr	r3, [r3, #32]
 800ad62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	685b      	ldr	r3, [r3, #4]
 800ad68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	69db      	ldr	r3, [r3, #28]
 800ad6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ad70:	68fa      	ldr	r2, [r7, #12]
 800ad72:	4b24      	ldr	r3, [pc, #144]	@ (800ae04 <TIM_OC4_SetConfig+0xbc>)
 800ad74:	4013      	ands	r3, r2
 800ad76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ad7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ad80:	683b      	ldr	r3, [r7, #0]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	021b      	lsls	r3, r3, #8
 800ad86:	68fa      	ldr	r2, [r7, #12]
 800ad88:	4313      	orrs	r3, r2
 800ad8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ad8c:	693b      	ldr	r3, [r7, #16]
 800ad8e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ad92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	689b      	ldr	r3, [r3, #8]
 800ad98:	031b      	lsls	r3, r3, #12
 800ad9a:	693a      	ldr	r2, [r7, #16]
 800ad9c:	4313      	orrs	r3, r2
 800ad9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	4a19      	ldr	r2, [pc, #100]	@ (800ae08 <TIM_OC4_SetConfig+0xc0>)
 800ada4:	4293      	cmp	r3, r2
 800ada6:	d00f      	beq.n	800adc8 <TIM_OC4_SetConfig+0x80>
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	4a18      	ldr	r2, [pc, #96]	@ (800ae0c <TIM_OC4_SetConfig+0xc4>)
 800adac:	4293      	cmp	r3, r2
 800adae:	d00b      	beq.n	800adc8 <TIM_OC4_SetConfig+0x80>
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	4a17      	ldr	r2, [pc, #92]	@ (800ae10 <TIM_OC4_SetConfig+0xc8>)
 800adb4:	4293      	cmp	r3, r2
 800adb6:	d007      	beq.n	800adc8 <TIM_OC4_SetConfig+0x80>
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	4a16      	ldr	r2, [pc, #88]	@ (800ae14 <TIM_OC4_SetConfig+0xcc>)
 800adbc:	4293      	cmp	r3, r2
 800adbe:	d003      	beq.n	800adc8 <TIM_OC4_SetConfig+0x80>
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	4a15      	ldr	r2, [pc, #84]	@ (800ae18 <TIM_OC4_SetConfig+0xd0>)
 800adc4:	4293      	cmp	r3, r2
 800adc6:	d109      	bne.n	800addc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800adc8:	697b      	ldr	r3, [r7, #20]
 800adca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800adce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	695b      	ldr	r3, [r3, #20]
 800add4:	019b      	lsls	r3, r3, #6
 800add6:	697a      	ldr	r2, [r7, #20]
 800add8:	4313      	orrs	r3, r2
 800adda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	697a      	ldr	r2, [r7, #20]
 800ade0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	68fa      	ldr	r2, [r7, #12]
 800ade6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	685a      	ldr	r2, [r3, #4]
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	693a      	ldr	r2, [r7, #16]
 800adf4:	621a      	str	r2, [r3, #32]
}
 800adf6:	bf00      	nop
 800adf8:	371c      	adds	r7, #28
 800adfa:	46bd      	mov	sp, r7
 800adfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae00:	4770      	bx	lr
 800ae02:	bf00      	nop
 800ae04:	feff8fff 	.word	0xfeff8fff
 800ae08:	40010000 	.word	0x40010000
 800ae0c:	40010400 	.word	0x40010400
 800ae10:	40014000 	.word	0x40014000
 800ae14:	40014400 	.word	0x40014400
 800ae18:	40014800 	.word	0x40014800

0800ae1c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ae1c:	b480      	push	{r7}
 800ae1e:	b087      	sub	sp, #28
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
 800ae24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	6a1b      	ldr	r3, [r3, #32]
 800ae2a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	6a1b      	ldr	r3, [r3, #32]
 800ae36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	685b      	ldr	r3, [r3, #4]
 800ae3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ae44:	68fa      	ldr	r2, [r7, #12]
 800ae46:	4b21      	ldr	r3, [pc, #132]	@ (800aecc <TIM_OC5_SetConfig+0xb0>)
 800ae48:	4013      	ands	r3, r2
 800ae4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	68fa      	ldr	r2, [r7, #12]
 800ae52:	4313      	orrs	r3, r2
 800ae54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ae56:	693b      	ldr	r3, [r7, #16]
 800ae58:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800ae5c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	689b      	ldr	r3, [r3, #8]
 800ae62:	041b      	lsls	r3, r3, #16
 800ae64:	693a      	ldr	r2, [r7, #16]
 800ae66:	4313      	orrs	r3, r2
 800ae68:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	4a18      	ldr	r2, [pc, #96]	@ (800aed0 <TIM_OC5_SetConfig+0xb4>)
 800ae6e:	4293      	cmp	r3, r2
 800ae70:	d00f      	beq.n	800ae92 <TIM_OC5_SetConfig+0x76>
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	4a17      	ldr	r2, [pc, #92]	@ (800aed4 <TIM_OC5_SetConfig+0xb8>)
 800ae76:	4293      	cmp	r3, r2
 800ae78:	d00b      	beq.n	800ae92 <TIM_OC5_SetConfig+0x76>
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	4a16      	ldr	r2, [pc, #88]	@ (800aed8 <TIM_OC5_SetConfig+0xbc>)
 800ae7e:	4293      	cmp	r3, r2
 800ae80:	d007      	beq.n	800ae92 <TIM_OC5_SetConfig+0x76>
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	4a15      	ldr	r2, [pc, #84]	@ (800aedc <TIM_OC5_SetConfig+0xc0>)
 800ae86:	4293      	cmp	r3, r2
 800ae88:	d003      	beq.n	800ae92 <TIM_OC5_SetConfig+0x76>
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	4a14      	ldr	r2, [pc, #80]	@ (800aee0 <TIM_OC5_SetConfig+0xc4>)
 800ae8e:	4293      	cmp	r3, r2
 800ae90:	d109      	bne.n	800aea6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ae92:	697b      	ldr	r3, [r7, #20]
 800ae94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ae98:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	695b      	ldr	r3, [r3, #20]
 800ae9e:	021b      	lsls	r3, r3, #8
 800aea0:	697a      	ldr	r2, [r7, #20]
 800aea2:	4313      	orrs	r3, r2
 800aea4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	697a      	ldr	r2, [r7, #20]
 800aeaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	68fa      	ldr	r2, [r7, #12]
 800aeb0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	685a      	ldr	r2, [r3, #4]
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	693a      	ldr	r2, [r7, #16]
 800aebe:	621a      	str	r2, [r3, #32]
}
 800aec0:	bf00      	nop
 800aec2:	371c      	adds	r7, #28
 800aec4:	46bd      	mov	sp, r7
 800aec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeca:	4770      	bx	lr
 800aecc:	fffeff8f 	.word	0xfffeff8f
 800aed0:	40010000 	.word	0x40010000
 800aed4:	40010400 	.word	0x40010400
 800aed8:	40014000 	.word	0x40014000
 800aedc:	40014400 	.word	0x40014400
 800aee0:	40014800 	.word	0x40014800

0800aee4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800aee4:	b480      	push	{r7}
 800aee6:	b087      	sub	sp, #28
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
 800aeec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	6a1b      	ldr	r3, [r3, #32]
 800aef2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	6a1b      	ldr	r3, [r3, #32]
 800aefe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	685b      	ldr	r3, [r3, #4]
 800af04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800af0c:	68fa      	ldr	r2, [r7, #12]
 800af0e:	4b22      	ldr	r3, [pc, #136]	@ (800af98 <TIM_OC6_SetConfig+0xb4>)
 800af10:	4013      	ands	r3, r2
 800af12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	021b      	lsls	r3, r3, #8
 800af1a:	68fa      	ldr	r2, [r7, #12]
 800af1c:	4313      	orrs	r3, r2
 800af1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800af20:	693b      	ldr	r3, [r7, #16]
 800af22:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800af26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	689b      	ldr	r3, [r3, #8]
 800af2c:	051b      	lsls	r3, r3, #20
 800af2e:	693a      	ldr	r2, [r7, #16]
 800af30:	4313      	orrs	r3, r2
 800af32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	4a19      	ldr	r2, [pc, #100]	@ (800af9c <TIM_OC6_SetConfig+0xb8>)
 800af38:	4293      	cmp	r3, r2
 800af3a:	d00f      	beq.n	800af5c <TIM_OC6_SetConfig+0x78>
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	4a18      	ldr	r2, [pc, #96]	@ (800afa0 <TIM_OC6_SetConfig+0xbc>)
 800af40:	4293      	cmp	r3, r2
 800af42:	d00b      	beq.n	800af5c <TIM_OC6_SetConfig+0x78>
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	4a17      	ldr	r2, [pc, #92]	@ (800afa4 <TIM_OC6_SetConfig+0xc0>)
 800af48:	4293      	cmp	r3, r2
 800af4a:	d007      	beq.n	800af5c <TIM_OC6_SetConfig+0x78>
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	4a16      	ldr	r2, [pc, #88]	@ (800afa8 <TIM_OC6_SetConfig+0xc4>)
 800af50:	4293      	cmp	r3, r2
 800af52:	d003      	beq.n	800af5c <TIM_OC6_SetConfig+0x78>
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	4a15      	ldr	r2, [pc, #84]	@ (800afac <TIM_OC6_SetConfig+0xc8>)
 800af58:	4293      	cmp	r3, r2
 800af5a:	d109      	bne.n	800af70 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800af5c:	697b      	ldr	r3, [r7, #20]
 800af5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800af62:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	695b      	ldr	r3, [r3, #20]
 800af68:	029b      	lsls	r3, r3, #10
 800af6a:	697a      	ldr	r2, [r7, #20]
 800af6c:	4313      	orrs	r3, r2
 800af6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	697a      	ldr	r2, [r7, #20]
 800af74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	68fa      	ldr	r2, [r7, #12]
 800af7a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800af7c:	683b      	ldr	r3, [r7, #0]
 800af7e:	685a      	ldr	r2, [r3, #4]
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	693a      	ldr	r2, [r7, #16]
 800af88:	621a      	str	r2, [r3, #32]
}
 800af8a:	bf00      	nop
 800af8c:	371c      	adds	r7, #28
 800af8e:	46bd      	mov	sp, r7
 800af90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af94:	4770      	bx	lr
 800af96:	bf00      	nop
 800af98:	feff8fff 	.word	0xfeff8fff
 800af9c:	40010000 	.word	0x40010000
 800afa0:	40010400 	.word	0x40010400
 800afa4:	40014000 	.word	0x40014000
 800afa8:	40014400 	.word	0x40014400
 800afac:	40014800 	.word	0x40014800

0800afb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800afb0:	b480      	push	{r7}
 800afb2:	b085      	sub	sp, #20
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
 800afb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800afc0:	2b01      	cmp	r3, #1
 800afc2:	d101      	bne.n	800afc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800afc4:	2302      	movs	r3, #2
 800afc6:	e06d      	b.n	800b0a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2201      	movs	r2, #1
 800afcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2202      	movs	r2, #2
 800afd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	685b      	ldr	r3, [r3, #4]
 800afde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	689b      	ldr	r3, [r3, #8]
 800afe6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	4a30      	ldr	r2, [pc, #192]	@ (800b0b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800afee:	4293      	cmp	r3, r2
 800aff0:	d004      	beq.n	800affc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	4a2f      	ldr	r2, [pc, #188]	@ (800b0b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800aff8:	4293      	cmp	r3, r2
 800affa:	d108      	bne.n	800b00e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b002:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b004:	683b      	ldr	r3, [r7, #0]
 800b006:	685b      	ldr	r3, [r3, #4]
 800b008:	68fa      	ldr	r2, [r7, #12]
 800b00a:	4313      	orrs	r3, r2
 800b00c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b014:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b016:	683b      	ldr	r3, [r7, #0]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	68fa      	ldr	r2, [r7, #12]
 800b01c:	4313      	orrs	r3, r2
 800b01e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	68fa      	ldr	r2, [r7, #12]
 800b026:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	4a20      	ldr	r2, [pc, #128]	@ (800b0b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b02e:	4293      	cmp	r3, r2
 800b030:	d022      	beq.n	800b078 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b03a:	d01d      	beq.n	800b078 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	4a1d      	ldr	r2, [pc, #116]	@ (800b0b8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b042:	4293      	cmp	r3, r2
 800b044:	d018      	beq.n	800b078 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	4a1c      	ldr	r2, [pc, #112]	@ (800b0bc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b04c:	4293      	cmp	r3, r2
 800b04e:	d013      	beq.n	800b078 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	4a1a      	ldr	r2, [pc, #104]	@ (800b0c0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b056:	4293      	cmp	r3, r2
 800b058:	d00e      	beq.n	800b078 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	4a15      	ldr	r2, [pc, #84]	@ (800b0b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b060:	4293      	cmp	r3, r2
 800b062:	d009      	beq.n	800b078 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	4a16      	ldr	r2, [pc, #88]	@ (800b0c4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b06a:	4293      	cmp	r3, r2
 800b06c:	d004      	beq.n	800b078 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	4a15      	ldr	r2, [pc, #84]	@ (800b0c8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b074:	4293      	cmp	r3, r2
 800b076:	d10c      	bne.n	800b092 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b078:	68bb      	ldr	r3, [r7, #8]
 800b07a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b07e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	689b      	ldr	r3, [r3, #8]
 800b084:	68ba      	ldr	r2, [r7, #8]
 800b086:	4313      	orrs	r3, r2
 800b088:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	68ba      	ldr	r2, [r7, #8]
 800b090:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	2201      	movs	r2, #1
 800b096:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	2200      	movs	r2, #0
 800b09e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b0a2:	2300      	movs	r3, #0
}
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	3714      	adds	r7, #20
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ae:	4770      	bx	lr
 800b0b0:	40010000 	.word	0x40010000
 800b0b4:	40010400 	.word	0x40010400
 800b0b8:	40000400 	.word	0x40000400
 800b0bc:	40000800 	.word	0x40000800
 800b0c0:	40000c00 	.word	0x40000c00
 800b0c4:	40001800 	.word	0x40001800
 800b0c8:	40014000 	.word	0x40014000

0800b0cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b0cc:	b480      	push	{r7}
 800b0ce:	b083      	sub	sp, #12
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b0d4:	bf00      	nop
 800b0d6:	370c      	adds	r7, #12
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0de:	4770      	bx	lr

0800b0e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b0e0:	b480      	push	{r7}
 800b0e2:	b083      	sub	sp, #12
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b0e8:	bf00      	nop
 800b0ea:	370c      	adds	r7, #12
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f2:	4770      	bx	lr

0800b0f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b0f4:	b480      	push	{r7}
 800b0f6:	b083      	sub	sp, #12
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b0fc:	bf00      	nop
 800b0fe:	370c      	adds	r7, #12
 800b100:	46bd      	mov	sp, r7
 800b102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b106:	4770      	bx	lr

0800b108 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b082      	sub	sp, #8
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d101      	bne.n	800b11a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b116:	2301      	movs	r3, #1
 800b118:	e042      	b.n	800b1a0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b120:	2b00      	cmp	r3, #0
 800b122:	d106      	bne.n	800b132 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2200      	movs	r2, #0
 800b128:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b12c:	6878      	ldr	r0, [r7, #4]
 800b12e:	f7f6 f959 	bl	80013e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2224      	movs	r2, #36	@ 0x24
 800b136:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	681a      	ldr	r2, [r3, #0]
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	f022 0201 	bic.w	r2, r2, #1
 800b148:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b14a:	6878      	ldr	r0, [r7, #4]
 800b14c:	f000 ffc8 	bl	800c0e0 <UART_SetConfig>
 800b150:	4603      	mov	r3, r0
 800b152:	2b01      	cmp	r3, #1
 800b154:	d101      	bne.n	800b15a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b156:	2301      	movs	r3, #1
 800b158:	e022      	b.n	800b1a0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d002      	beq.n	800b168 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b162:	6878      	ldr	r0, [r7, #4]
 800b164:	f001 fd24 	bl	800cbb0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	685a      	ldr	r2, [r3, #4]
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b176:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	689a      	ldr	r2, [r3, #8]
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b186:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	681a      	ldr	r2, [r3, #0]
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	f042 0201 	orr.w	r2, r2, #1
 800b196:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b198:	6878      	ldr	r0, [r7, #4]
 800b19a:	f001 fdab 	bl	800ccf4 <UART_CheckIdleState>
 800b19e:	4603      	mov	r3, r0
}
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	3708      	adds	r7, #8
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	bd80      	pop	{r7, pc}

0800b1a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b08a      	sub	sp, #40	@ 0x28
 800b1ac:	af02      	add	r7, sp, #8
 800b1ae:	60f8      	str	r0, [r7, #12]
 800b1b0:	60b9      	str	r1, [r7, #8]
 800b1b2:	603b      	str	r3, [r7, #0]
 800b1b4:	4613      	mov	r3, r2
 800b1b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b1be:	2b20      	cmp	r3, #32
 800b1c0:	d17b      	bne.n	800b2ba <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800b1c2:	68bb      	ldr	r3, [r7, #8]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d002      	beq.n	800b1ce <HAL_UART_Transmit+0x26>
 800b1c8:	88fb      	ldrh	r3, [r7, #6]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d101      	bne.n	800b1d2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b1ce:	2301      	movs	r3, #1
 800b1d0:	e074      	b.n	800b2bc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	2221      	movs	r2, #33	@ 0x21
 800b1de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b1e2:	f7f8 fddf 	bl	8003da4 <HAL_GetTick>
 800b1e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	88fa      	ldrh	r2, [r7, #6]
 800b1ec:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	88fa      	ldrh	r2, [r7, #6]
 800b1f4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	689b      	ldr	r3, [r3, #8]
 800b1fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b200:	d108      	bne.n	800b214 <HAL_UART_Transmit+0x6c>
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	691b      	ldr	r3, [r3, #16]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d104      	bne.n	800b214 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b20a:	2300      	movs	r3, #0
 800b20c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b20e:	68bb      	ldr	r3, [r7, #8]
 800b210:	61bb      	str	r3, [r7, #24]
 800b212:	e003      	b.n	800b21c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b214:	68bb      	ldr	r3, [r7, #8]
 800b216:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b218:	2300      	movs	r3, #0
 800b21a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b21c:	e030      	b.n	800b280 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b21e:	683b      	ldr	r3, [r7, #0]
 800b220:	9300      	str	r3, [sp, #0]
 800b222:	697b      	ldr	r3, [r7, #20]
 800b224:	2200      	movs	r2, #0
 800b226:	2180      	movs	r1, #128	@ 0x80
 800b228:	68f8      	ldr	r0, [r7, #12]
 800b22a:	f001 fe0d 	bl	800ce48 <UART_WaitOnFlagUntilTimeout>
 800b22e:	4603      	mov	r3, r0
 800b230:	2b00      	cmp	r3, #0
 800b232:	d005      	beq.n	800b240 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	2220      	movs	r2, #32
 800b238:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800b23c:	2303      	movs	r3, #3
 800b23e:	e03d      	b.n	800b2bc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800b240:	69fb      	ldr	r3, [r7, #28]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d10b      	bne.n	800b25e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b246:	69bb      	ldr	r3, [r7, #24]
 800b248:	881b      	ldrh	r3, [r3, #0]
 800b24a:	461a      	mov	r2, r3
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b254:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800b256:	69bb      	ldr	r3, [r7, #24]
 800b258:	3302      	adds	r3, #2
 800b25a:	61bb      	str	r3, [r7, #24]
 800b25c:	e007      	b.n	800b26e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b25e:	69fb      	ldr	r3, [r7, #28]
 800b260:	781a      	ldrb	r2, [r3, #0]
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800b268:	69fb      	ldr	r3, [r7, #28]
 800b26a:	3301      	adds	r3, #1
 800b26c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b274:	b29b      	uxth	r3, r3
 800b276:	3b01      	subs	r3, #1
 800b278:	b29a      	uxth	r2, r3
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b286:	b29b      	uxth	r3, r3
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d1c8      	bne.n	800b21e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	9300      	str	r3, [sp, #0]
 800b290:	697b      	ldr	r3, [r7, #20]
 800b292:	2200      	movs	r2, #0
 800b294:	2140      	movs	r1, #64	@ 0x40
 800b296:	68f8      	ldr	r0, [r7, #12]
 800b298:	f001 fdd6 	bl	800ce48 <UART_WaitOnFlagUntilTimeout>
 800b29c:	4603      	mov	r3, r0
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d005      	beq.n	800b2ae <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	2220      	movs	r2, #32
 800b2a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800b2aa:	2303      	movs	r3, #3
 800b2ac:	e006      	b.n	800b2bc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	2220      	movs	r2, #32
 800b2b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	e000      	b.n	800b2bc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800b2ba:	2302      	movs	r3, #2
  }
}
 800b2bc:	4618      	mov	r0, r3
 800b2be:	3720      	adds	r7, #32
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	bd80      	pop	{r7, pc}

0800b2c4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b08a      	sub	sp, #40	@ 0x28
 800b2c8:	af02      	add	r7, sp, #8
 800b2ca:	60f8      	str	r0, [r7, #12]
 800b2cc:	60b9      	str	r1, [r7, #8]
 800b2ce:	603b      	str	r3, [r7, #0]
 800b2d0:	4613      	mov	r3, r2
 800b2d2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b2da:	2b20      	cmp	r3, #32
 800b2dc:	f040 80b5 	bne.w	800b44a <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800b2e0:	68bb      	ldr	r3, [r7, #8]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d002      	beq.n	800b2ec <HAL_UART_Receive+0x28>
 800b2e6:	88fb      	ldrh	r3, [r7, #6]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d101      	bne.n	800b2f0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800b2ec:	2301      	movs	r3, #1
 800b2ee:	e0ad      	b.n	800b44c <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	2222      	movs	r2, #34	@ 0x22
 800b2fc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	2200      	movs	r2, #0
 800b304:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b306:	f7f8 fd4d 	bl	8003da4 <HAL_GetTick>
 800b30a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	88fa      	ldrh	r2, [r7, #6]
 800b310:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	88fa      	ldrh	r2, [r7, #6]
 800b318:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	689b      	ldr	r3, [r3, #8]
 800b320:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b324:	d10e      	bne.n	800b344 <HAL_UART_Receive+0x80>
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	691b      	ldr	r3, [r3, #16]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d105      	bne.n	800b33a <HAL_UART_Receive+0x76>
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800b334:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b338:	e02d      	b.n	800b396 <HAL_UART_Receive+0xd2>
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	22ff      	movs	r2, #255	@ 0xff
 800b33e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b342:	e028      	b.n	800b396 <HAL_UART_Receive+0xd2>
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	689b      	ldr	r3, [r3, #8]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d10d      	bne.n	800b368 <HAL_UART_Receive+0xa4>
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	691b      	ldr	r3, [r3, #16]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d104      	bne.n	800b35e <HAL_UART_Receive+0x9a>
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	22ff      	movs	r2, #255	@ 0xff
 800b358:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b35c:	e01b      	b.n	800b396 <HAL_UART_Receive+0xd2>
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	227f      	movs	r2, #127	@ 0x7f
 800b362:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b366:	e016      	b.n	800b396 <HAL_UART_Receive+0xd2>
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	689b      	ldr	r3, [r3, #8]
 800b36c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b370:	d10d      	bne.n	800b38e <HAL_UART_Receive+0xca>
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	691b      	ldr	r3, [r3, #16]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d104      	bne.n	800b384 <HAL_UART_Receive+0xc0>
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	227f      	movs	r2, #127	@ 0x7f
 800b37e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b382:	e008      	b.n	800b396 <HAL_UART_Receive+0xd2>
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	223f      	movs	r2, #63	@ 0x3f
 800b388:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b38c:	e003      	b.n	800b396 <HAL_UART_Receive+0xd2>
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	2200      	movs	r2, #0
 800b392:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b39c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	689b      	ldr	r3, [r3, #8]
 800b3a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b3a6:	d108      	bne.n	800b3ba <HAL_UART_Receive+0xf6>
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	691b      	ldr	r3, [r3, #16]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d104      	bne.n	800b3ba <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b3b4:	68bb      	ldr	r3, [r7, #8]
 800b3b6:	61bb      	str	r3, [r7, #24]
 800b3b8:	e003      	b.n	800b3c2 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800b3ba:	68bb      	ldr	r3, [r7, #8]
 800b3bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b3be:	2300      	movs	r3, #0
 800b3c0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800b3c2:	e036      	b.n	800b432 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	9300      	str	r3, [sp, #0]
 800b3c8:	697b      	ldr	r3, [r7, #20]
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	2120      	movs	r1, #32
 800b3ce:	68f8      	ldr	r0, [r7, #12]
 800b3d0:	f001 fd3a 	bl	800ce48 <UART_WaitOnFlagUntilTimeout>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d005      	beq.n	800b3e6 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	2220      	movs	r2, #32
 800b3de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800b3e2:	2303      	movs	r3, #3
 800b3e4:	e032      	b.n	800b44c <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800b3e6:	69fb      	ldr	r3, [r7, #28]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d10c      	bne.n	800b406 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3f2:	b29a      	uxth	r2, r3
 800b3f4:	8a7b      	ldrh	r3, [r7, #18]
 800b3f6:	4013      	ands	r3, r2
 800b3f8:	b29a      	uxth	r2, r3
 800b3fa:	69bb      	ldr	r3, [r7, #24]
 800b3fc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800b3fe:	69bb      	ldr	r3, [r7, #24]
 800b400:	3302      	adds	r3, #2
 800b402:	61bb      	str	r3, [r7, #24]
 800b404:	e00c      	b.n	800b420 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b40c:	b2da      	uxtb	r2, r3
 800b40e:	8a7b      	ldrh	r3, [r7, #18]
 800b410:	b2db      	uxtb	r3, r3
 800b412:	4013      	ands	r3, r2
 800b414:	b2da      	uxtb	r2, r3
 800b416:	69fb      	ldr	r3, [r7, #28]
 800b418:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800b41a:	69fb      	ldr	r3, [r7, #28]
 800b41c:	3301      	adds	r3, #1
 800b41e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b426:	b29b      	uxth	r3, r3
 800b428:	3b01      	subs	r3, #1
 800b42a:	b29a      	uxth	r2, r3
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b438:	b29b      	uxth	r3, r3
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d1c2      	bne.n	800b3c4 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	2220      	movs	r2, #32
 800b442:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800b446:	2300      	movs	r3, #0
 800b448:	e000      	b.n	800b44c <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800b44a:	2302      	movs	r3, #2
  }
}
 800b44c:	4618      	mov	r0, r3
 800b44e:	3720      	adds	r7, #32
 800b450:	46bd      	mov	sp, r7
 800b452:	bd80      	pop	{r7, pc}

0800b454 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b454:	b480      	push	{r7}
 800b456:	b091      	sub	sp, #68	@ 0x44
 800b458:	af00      	add	r7, sp, #0
 800b45a:	60f8      	str	r0, [r7, #12]
 800b45c:	60b9      	str	r1, [r7, #8]
 800b45e:	4613      	mov	r3, r2
 800b460:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b468:	2b20      	cmp	r3, #32
 800b46a:	d178      	bne.n	800b55e <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b46c:	68bb      	ldr	r3, [r7, #8]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d002      	beq.n	800b478 <HAL_UART_Transmit_IT+0x24>
 800b472:	88fb      	ldrh	r3, [r7, #6]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d101      	bne.n	800b47c <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800b478:	2301      	movs	r3, #1
 800b47a:	e071      	b.n	800b560 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	68ba      	ldr	r2, [r7, #8]
 800b480:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	88fa      	ldrh	r2, [r7, #6]
 800b486:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	88fa      	ldrh	r2, [r7, #6]
 800b48e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	2200      	movs	r2, #0
 800b496:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	2200      	movs	r2, #0
 800b49c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	2221      	movs	r2, #33	@ 0x21
 800b4a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b4ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b4b0:	d12a      	bne.n	800b508 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	689b      	ldr	r3, [r3, #8]
 800b4b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b4ba:	d107      	bne.n	800b4cc <HAL_UART_Transmit_IT+0x78>
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	691b      	ldr	r3, [r3, #16]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d103      	bne.n	800b4cc <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	4a29      	ldr	r2, [pc, #164]	@ (800b56c <HAL_UART_Transmit_IT+0x118>)
 800b4c8:	679a      	str	r2, [r3, #120]	@ 0x78
 800b4ca:	e002      	b.n	800b4d2 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	4a28      	ldr	r2, [pc, #160]	@ (800b570 <HAL_UART_Transmit_IT+0x11c>)
 800b4d0:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	3308      	adds	r3, #8
 800b4d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4dc:	e853 3f00 	ldrex	r3, [r3]
 800b4e0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b4e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4e4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b4e8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	3308      	adds	r3, #8
 800b4f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b4f2:	637a      	str	r2, [r7, #52]	@ 0x34
 800b4f4:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4f6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b4f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b4fa:	e841 2300 	strex	r3, r2, [r1]
 800b4fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b502:	2b00      	cmp	r3, #0
 800b504:	d1e5      	bne.n	800b4d2 <HAL_UART_Transmit_IT+0x7e>
 800b506:	e028      	b.n	800b55a <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	689b      	ldr	r3, [r3, #8]
 800b50c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b510:	d107      	bne.n	800b522 <HAL_UART_Transmit_IT+0xce>
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	691b      	ldr	r3, [r3, #16]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d103      	bne.n	800b522 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	4a15      	ldr	r2, [pc, #84]	@ (800b574 <HAL_UART_Transmit_IT+0x120>)
 800b51e:	679a      	str	r2, [r3, #120]	@ 0x78
 800b520:	e002      	b.n	800b528 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	4a14      	ldr	r2, [pc, #80]	@ (800b578 <HAL_UART_Transmit_IT+0x124>)
 800b526:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b52e:	697b      	ldr	r3, [r7, #20]
 800b530:	e853 3f00 	ldrex	r3, [r3]
 800b534:	613b      	str	r3, [r7, #16]
   return(result);
 800b536:	693b      	ldr	r3, [r7, #16]
 800b538:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b53c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	461a      	mov	r2, r3
 800b544:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b546:	623b      	str	r3, [r7, #32]
 800b548:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b54a:	69f9      	ldr	r1, [r7, #28]
 800b54c:	6a3a      	ldr	r2, [r7, #32]
 800b54e:	e841 2300 	strex	r3, r2, [r1]
 800b552:	61bb      	str	r3, [r7, #24]
   return(result);
 800b554:	69bb      	ldr	r3, [r7, #24]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d1e6      	bne.n	800b528 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800b55a:	2300      	movs	r3, #0
 800b55c:	e000      	b.n	800b560 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800b55e:	2302      	movs	r3, #2
  }
}
 800b560:	4618      	mov	r0, r3
 800b562:	3744      	adds	r7, #68	@ 0x44
 800b564:	46bd      	mov	sp, r7
 800b566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56a:	4770      	bx	lr
 800b56c:	0800d4f9 	.word	0x0800d4f9
 800b570:	0800d419 	.word	0x0800d419
 800b574:	0800d357 	.word	0x0800d357
 800b578:	0800d29f 	.word	0x0800d29f

0800b57c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b08a      	sub	sp, #40	@ 0x28
 800b580:	af00      	add	r7, sp, #0
 800b582:	60f8      	str	r0, [r7, #12]
 800b584:	60b9      	str	r1, [r7, #8]
 800b586:	4613      	mov	r3, r2
 800b588:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b590:	2b20      	cmp	r3, #32
 800b592:	d137      	bne.n	800b604 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800b594:	68bb      	ldr	r3, [r7, #8]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d002      	beq.n	800b5a0 <HAL_UART_Receive_IT+0x24>
 800b59a:	88fb      	ldrh	r3, [r7, #6]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d101      	bne.n	800b5a4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800b5a0:	2301      	movs	r3, #1
 800b5a2:	e030      	b.n	800b606 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	4a18      	ldr	r2, [pc, #96]	@ (800b610 <HAL_UART_Receive_IT+0x94>)
 800b5b0:	4293      	cmp	r3, r2
 800b5b2:	d01f      	beq.n	800b5f4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	685b      	ldr	r3, [r3, #4]
 800b5ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d018      	beq.n	800b5f4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5c8:	697b      	ldr	r3, [r7, #20]
 800b5ca:	e853 3f00 	ldrex	r3, [r3]
 800b5ce:	613b      	str	r3, [r7, #16]
   return(result);
 800b5d0:	693b      	ldr	r3, [r7, #16]
 800b5d2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b5d6:	627b      	str	r3, [r7, #36]	@ 0x24
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	461a      	mov	r2, r3
 800b5de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5e0:	623b      	str	r3, [r7, #32]
 800b5e2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5e4:	69f9      	ldr	r1, [r7, #28]
 800b5e6:	6a3a      	ldr	r2, [r7, #32]
 800b5e8:	e841 2300 	strex	r3, r2, [r1]
 800b5ec:	61bb      	str	r3, [r7, #24]
   return(result);
 800b5ee:	69bb      	ldr	r3, [r7, #24]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d1e6      	bne.n	800b5c2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b5f4:	88fb      	ldrh	r3, [r7, #6]
 800b5f6:	461a      	mov	r2, r3
 800b5f8:	68b9      	ldr	r1, [r7, #8]
 800b5fa:	68f8      	ldr	r0, [r7, #12]
 800b5fc:	f001 fc8c 	bl	800cf18 <UART_Start_Receive_IT>
 800b600:	4603      	mov	r3, r0
 800b602:	e000      	b.n	800b606 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b604:	2302      	movs	r3, #2
  }
}
 800b606:	4618      	mov	r0, r3
 800b608:	3728      	adds	r7, #40	@ 0x28
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bd80      	pop	{r7, pc}
 800b60e:	bf00      	nop
 800b610:	58000c00 	.word	0x58000c00

0800b614 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b09a      	sub	sp, #104	@ 0x68
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b622:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b624:	e853 3f00 	ldrex	r3, [r3]
 800b628:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b62a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b62c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b630:	667b      	str	r3, [r7, #100]	@ 0x64
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	461a      	mov	r2, r3
 800b638:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b63a:	657b      	str	r3, [r7, #84]	@ 0x54
 800b63c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b63e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b640:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b642:	e841 2300 	strex	r3, r2, [r1]
 800b646:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b648:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d1e6      	bne.n	800b61c <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	3308      	adds	r3, #8
 800b654:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b656:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b658:	e853 3f00 	ldrex	r3, [r3]
 800b65c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b65e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b660:	4b51      	ldr	r3, [pc, #324]	@ (800b7a8 <HAL_UART_AbortReceive_IT+0x194>)
 800b662:	4013      	ands	r3, r2
 800b664:	663b      	str	r3, [r7, #96]	@ 0x60
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	3308      	adds	r3, #8
 800b66c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b66e:	643a      	str	r2, [r7, #64]	@ 0x40
 800b670:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b672:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b674:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b676:	e841 2300 	strex	r3, r2, [r1]
 800b67a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b67c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d1e5      	bne.n	800b64e <HAL_UART_AbortReceive_IT+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b686:	2b01      	cmp	r3, #1
 800b688:	d118      	bne.n	800b6bc <HAL_UART_AbortReceive_IT+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b690:	6a3b      	ldr	r3, [r7, #32]
 800b692:	e853 3f00 	ldrex	r3, [r3]
 800b696:	61fb      	str	r3, [r7, #28]
   return(result);
 800b698:	69fb      	ldr	r3, [r7, #28]
 800b69a:	f023 0310 	bic.w	r3, r3, #16
 800b69e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	461a      	mov	r2, r3
 800b6a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b6a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b6aa:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b6ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b6b0:	e841 2300 	strex	r3, r2, [r1]
 800b6b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b6b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d1e6      	bne.n	800b68a <HAL_UART_AbortReceive_IT+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	689b      	ldr	r3, [r3, #8]
 800b6c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b6c6:	2b40      	cmp	r3, #64	@ 0x40
 800b6c8:	d154      	bne.n	800b774 <HAL_UART_AbortReceive_IT+0x160>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	3308      	adds	r3, #8
 800b6d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	e853 3f00 	ldrex	r3, [r3]
 800b6d8:	60bb      	str	r3, [r7, #8]
   return(result);
 800b6da:	68bb      	ldr	r3, [r7, #8]
 800b6dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b6e0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	3308      	adds	r3, #8
 800b6e8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b6ea:	61ba      	str	r2, [r7, #24]
 800b6ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6ee:	6979      	ldr	r1, [r7, #20]
 800b6f0:	69ba      	ldr	r2, [r7, #24]
 800b6f2:	e841 2300 	strex	r3, r2, [r1]
 800b6f6:	613b      	str	r3, [r7, #16]
   return(result);
 800b6f8:	693b      	ldr	r3, [r7, #16]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d1e5      	bne.n	800b6ca <HAL_UART_AbortReceive_IT+0xb6>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b704:	2b00      	cmp	r3, #0
 800b706:	d017      	beq.n	800b738 <HAL_UART_AbortReceive_IT+0x124>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b70e:	4a27      	ldr	r2, [pc, #156]	@ (800b7ac <HAL_UART_AbortReceive_IT+0x198>)
 800b710:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b718:	4618      	mov	r0, r3
 800b71a:	f7f8 fff9 	bl	8004710 <HAL_DMA_Abort_IT>
 800b71e:	4603      	mov	r3, r0
 800b720:	2b00      	cmp	r3, #0
 800b722:	d03c      	beq.n	800b79e <HAL_UART_AbortReceive_IT+0x18a>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b72a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b72c:	687a      	ldr	r2, [r7, #4]
 800b72e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800b732:	4610      	mov	r0, r2
 800b734:	4798      	blx	r3
 800b736:	e032      	b.n	800b79e <HAL_UART_AbortReceive_IT+0x18a>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2200      	movs	r2, #0
 800b73c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2200      	movs	r2, #0
 800b744:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	220f      	movs	r2, #15
 800b74c:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	699a      	ldr	r2, [r3, #24]
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	f042 0208 	orr.w	r2, r2, #8
 800b75c:	619a      	str	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	2220      	movs	r2, #32
 800b762:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	2200      	movs	r2, #0
 800b76a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 800b76c:	6878      	ldr	r0, [r7, #4]
 800b76e:	f000 fbe3 	bl	800bf38 <HAL_UART_AbortReceiveCpltCallback>
 800b772:	e014      	b.n	800b79e <HAL_UART_AbortReceive_IT+0x18a>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	2200      	movs	r2, #0
 800b778:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2200      	movs	r2, #0
 800b780:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	220f      	movs	r2, #15
 800b788:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	2220      	movs	r2, #32
 800b78e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	2200      	movs	r2, #0
 800b796:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	f000 fbcd 	bl	800bf38 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800b79e:	2300      	movs	r3, #0
}
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	3768      	adds	r7, #104	@ 0x68
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bd80      	pop	{r7, pc}
 800b7a8:	effffffe 	.word	0xeffffffe
 800b7ac:	0800d255 	.word	0x0800d255

0800b7b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b0ba      	sub	sp, #232	@ 0xe8
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	69db      	ldr	r3, [r3, #28]
 800b7be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	689b      	ldr	r3, [r3, #8]
 800b7d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b7d6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800b7da:	f640 030f 	movw	r3, #2063	@ 0x80f
 800b7de:	4013      	ands	r3, r2
 800b7e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800b7e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d11b      	bne.n	800b824 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b7ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b7f0:	f003 0320 	and.w	r3, r3, #32
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d015      	beq.n	800b824 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b7f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b7fc:	f003 0320 	and.w	r3, r3, #32
 800b800:	2b00      	cmp	r3, #0
 800b802:	d105      	bne.n	800b810 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b804:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b808:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d009      	beq.n	800b824 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b814:	2b00      	cmp	r3, #0
 800b816:	f000 8377 	beq.w	800bf08 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b81e:	6878      	ldr	r0, [r7, #4]
 800b820:	4798      	blx	r3
      }
      return;
 800b822:	e371      	b.n	800bf08 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b824:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b828:	2b00      	cmp	r3, #0
 800b82a:	f000 8123 	beq.w	800ba74 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b82e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b832:	4b8d      	ldr	r3, [pc, #564]	@ (800ba68 <HAL_UART_IRQHandler+0x2b8>)
 800b834:	4013      	ands	r3, r2
 800b836:	2b00      	cmp	r3, #0
 800b838:	d106      	bne.n	800b848 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b83a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800b83e:	4b8b      	ldr	r3, [pc, #556]	@ (800ba6c <HAL_UART_IRQHandler+0x2bc>)
 800b840:	4013      	ands	r3, r2
 800b842:	2b00      	cmp	r3, #0
 800b844:	f000 8116 	beq.w	800ba74 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b848:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b84c:	f003 0301 	and.w	r3, r3, #1
 800b850:	2b00      	cmp	r3, #0
 800b852:	d011      	beq.n	800b878 <HAL_UART_IRQHandler+0xc8>
 800b854:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b858:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d00b      	beq.n	800b878 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	2201      	movs	r2, #1
 800b866:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b86e:	f043 0201 	orr.w	r2, r3, #1
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b878:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b87c:	f003 0302 	and.w	r3, r3, #2
 800b880:	2b00      	cmp	r3, #0
 800b882:	d011      	beq.n	800b8a8 <HAL_UART_IRQHandler+0xf8>
 800b884:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b888:	f003 0301 	and.w	r3, r3, #1
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d00b      	beq.n	800b8a8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	2202      	movs	r2, #2
 800b896:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b89e:	f043 0204 	orr.w	r2, r3, #4
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b8a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b8ac:	f003 0304 	and.w	r3, r3, #4
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d011      	beq.n	800b8d8 <HAL_UART_IRQHandler+0x128>
 800b8b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b8b8:	f003 0301 	and.w	r3, r3, #1
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d00b      	beq.n	800b8d8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	2204      	movs	r2, #4
 800b8c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b8ce:	f043 0202 	orr.w	r2, r3, #2
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b8d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b8dc:	f003 0308 	and.w	r3, r3, #8
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d017      	beq.n	800b914 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b8e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b8e8:	f003 0320 	and.w	r3, r3, #32
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d105      	bne.n	800b8fc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b8f0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b8f4:	4b5c      	ldr	r3, [pc, #368]	@ (800ba68 <HAL_UART_IRQHandler+0x2b8>)
 800b8f6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d00b      	beq.n	800b914 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	2208      	movs	r2, #8
 800b902:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b90a:	f043 0208 	orr.w	r2, r3, #8
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b914:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b918:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d012      	beq.n	800b946 <HAL_UART_IRQHandler+0x196>
 800b920:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b924:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d00c      	beq.n	800b946 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b934:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b93c:	f043 0220 	orr.w	r2, r3, #32
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	f000 82dd 	beq.w	800bf0c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b956:	f003 0320 	and.w	r3, r3, #32
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d013      	beq.n	800b986 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b95e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b962:	f003 0320 	and.w	r3, r3, #32
 800b966:	2b00      	cmp	r3, #0
 800b968:	d105      	bne.n	800b976 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b96a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b96e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b972:	2b00      	cmp	r3, #0
 800b974:	d007      	beq.n	800b986 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d003      	beq.n	800b986 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b98c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	689b      	ldr	r3, [r3, #8]
 800b996:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b99a:	2b40      	cmp	r3, #64	@ 0x40
 800b99c:	d005      	beq.n	800b9aa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b99e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b9a2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d054      	beq.n	800ba54 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b9aa:	6878      	ldr	r0, [r7, #4]
 800b9ac:	f001 fbd6 	bl	800d15c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	689b      	ldr	r3, [r3, #8]
 800b9b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b9ba:	2b40      	cmp	r3, #64	@ 0x40
 800b9bc:	d146      	bne.n	800ba4c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	3308      	adds	r3, #8
 800b9c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b9cc:	e853 3f00 	ldrex	r3, [r3]
 800b9d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b9d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b9d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b9dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	3308      	adds	r3, #8
 800b9e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b9ea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b9ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b9f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b9fa:	e841 2300 	strex	r3, r2, [r1]
 800b9fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800ba02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d1d9      	bne.n	800b9be <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d017      	beq.n	800ba44 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ba1a:	4a15      	ldr	r2, [pc, #84]	@ (800ba70 <HAL_UART_IRQHandler+0x2c0>)
 800ba1c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ba24:	4618      	mov	r0, r3
 800ba26:	f7f8 fe73 	bl	8004710 <HAL_DMA_Abort_IT>
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d019      	beq.n	800ba64 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ba36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba38:	687a      	ldr	r2, [r7, #4]
 800ba3a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800ba3e:	4610      	mov	r0, r2
 800ba40:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba42:	e00f      	b.n	800ba64 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ba44:	6878      	ldr	r0, [r7, #4]
 800ba46:	f000 fa6d 	bl	800bf24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba4a:	e00b      	b.n	800ba64 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ba4c:	6878      	ldr	r0, [r7, #4]
 800ba4e:	f000 fa69 	bl	800bf24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba52:	e007      	b.n	800ba64 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ba54:	6878      	ldr	r0, [r7, #4]
 800ba56:	f000 fa65 	bl	800bf24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800ba62:	e253      	b.n	800bf0c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba64:	bf00      	nop
    return;
 800ba66:	e251      	b.n	800bf0c <HAL_UART_IRQHandler+0x75c>
 800ba68:	10000001 	.word	0x10000001
 800ba6c:	04000120 	.word	0x04000120
 800ba70:	0800d229 	.word	0x0800d229

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ba78:	2b01      	cmp	r3, #1
 800ba7a:	f040 81e7 	bne.w	800be4c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ba7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ba82:	f003 0310 	and.w	r3, r3, #16
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	f000 81e0 	beq.w	800be4c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ba8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ba90:	f003 0310 	and.w	r3, r3, #16
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	f000 81d9 	beq.w	800be4c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	2210      	movs	r2, #16
 800baa0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	689b      	ldr	r3, [r3, #8]
 800baa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800baac:	2b40      	cmp	r3, #64	@ 0x40
 800baae:	f040 8151 	bne.w	800bd54 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	4a96      	ldr	r2, [pc, #600]	@ (800bd14 <HAL_UART_IRQHandler+0x564>)
 800babc:	4293      	cmp	r3, r2
 800babe:	d068      	beq.n	800bb92 <HAL_UART_IRQHandler+0x3e2>
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	4a93      	ldr	r2, [pc, #588]	@ (800bd18 <HAL_UART_IRQHandler+0x568>)
 800baca:	4293      	cmp	r3, r2
 800bacc:	d061      	beq.n	800bb92 <HAL_UART_IRQHandler+0x3e2>
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	4a91      	ldr	r2, [pc, #580]	@ (800bd1c <HAL_UART_IRQHandler+0x56c>)
 800bad8:	4293      	cmp	r3, r2
 800bada:	d05a      	beq.n	800bb92 <HAL_UART_IRQHandler+0x3e2>
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	4a8e      	ldr	r2, [pc, #568]	@ (800bd20 <HAL_UART_IRQHandler+0x570>)
 800bae6:	4293      	cmp	r3, r2
 800bae8:	d053      	beq.n	800bb92 <HAL_UART_IRQHandler+0x3e2>
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	4a8c      	ldr	r2, [pc, #560]	@ (800bd24 <HAL_UART_IRQHandler+0x574>)
 800baf4:	4293      	cmp	r3, r2
 800baf6:	d04c      	beq.n	800bb92 <HAL_UART_IRQHandler+0x3e2>
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	4a89      	ldr	r2, [pc, #548]	@ (800bd28 <HAL_UART_IRQHandler+0x578>)
 800bb02:	4293      	cmp	r3, r2
 800bb04:	d045      	beq.n	800bb92 <HAL_UART_IRQHandler+0x3e2>
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	4a87      	ldr	r2, [pc, #540]	@ (800bd2c <HAL_UART_IRQHandler+0x57c>)
 800bb10:	4293      	cmp	r3, r2
 800bb12:	d03e      	beq.n	800bb92 <HAL_UART_IRQHandler+0x3e2>
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	4a84      	ldr	r2, [pc, #528]	@ (800bd30 <HAL_UART_IRQHandler+0x580>)
 800bb1e:	4293      	cmp	r3, r2
 800bb20:	d037      	beq.n	800bb92 <HAL_UART_IRQHandler+0x3e2>
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	4a82      	ldr	r2, [pc, #520]	@ (800bd34 <HAL_UART_IRQHandler+0x584>)
 800bb2c:	4293      	cmp	r3, r2
 800bb2e:	d030      	beq.n	800bb92 <HAL_UART_IRQHandler+0x3e2>
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	4a7f      	ldr	r2, [pc, #508]	@ (800bd38 <HAL_UART_IRQHandler+0x588>)
 800bb3a:	4293      	cmp	r3, r2
 800bb3c:	d029      	beq.n	800bb92 <HAL_UART_IRQHandler+0x3e2>
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	4a7d      	ldr	r2, [pc, #500]	@ (800bd3c <HAL_UART_IRQHandler+0x58c>)
 800bb48:	4293      	cmp	r3, r2
 800bb4a:	d022      	beq.n	800bb92 <HAL_UART_IRQHandler+0x3e2>
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	4a7a      	ldr	r2, [pc, #488]	@ (800bd40 <HAL_UART_IRQHandler+0x590>)
 800bb56:	4293      	cmp	r3, r2
 800bb58:	d01b      	beq.n	800bb92 <HAL_UART_IRQHandler+0x3e2>
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	4a78      	ldr	r2, [pc, #480]	@ (800bd44 <HAL_UART_IRQHandler+0x594>)
 800bb64:	4293      	cmp	r3, r2
 800bb66:	d014      	beq.n	800bb92 <HAL_UART_IRQHandler+0x3e2>
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	4a75      	ldr	r2, [pc, #468]	@ (800bd48 <HAL_UART_IRQHandler+0x598>)
 800bb72:	4293      	cmp	r3, r2
 800bb74:	d00d      	beq.n	800bb92 <HAL_UART_IRQHandler+0x3e2>
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	4a73      	ldr	r2, [pc, #460]	@ (800bd4c <HAL_UART_IRQHandler+0x59c>)
 800bb80:	4293      	cmp	r3, r2
 800bb82:	d006      	beq.n	800bb92 <HAL_UART_IRQHandler+0x3e2>
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	4a70      	ldr	r2, [pc, #448]	@ (800bd50 <HAL_UART_IRQHandler+0x5a0>)
 800bb8e:	4293      	cmp	r3, r2
 800bb90:	d106      	bne.n	800bba0 <HAL_UART_IRQHandler+0x3f0>
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	685b      	ldr	r3, [r3, #4]
 800bb9c:	b29b      	uxth	r3, r3
 800bb9e:	e005      	b.n	800bbac <HAL_UART_IRQHandler+0x3fc>
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	685b      	ldr	r3, [r3, #4]
 800bbaa:	b29b      	uxth	r3, r3
 800bbac:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bbb0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	f000 81ab 	beq.w	800bf10 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800bbc0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bbc4:	429a      	cmp	r2, r3
 800bbc6:	f080 81a3 	bcs.w	800bf10 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bbd0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bbda:	69db      	ldr	r3, [r3, #28]
 800bbdc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bbe0:	f000 8087 	beq.w	800bcf2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800bbf0:	e853 3f00 	ldrex	r3, [r3]
 800bbf4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800bbf8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800bbfc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bc00:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	461a      	mov	r2, r3
 800bc0a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bc0e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800bc12:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc16:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800bc1a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800bc1e:	e841 2300 	strex	r3, r2, [r1]
 800bc22:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800bc26:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d1da      	bne.n	800bbe4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	3308      	adds	r3, #8
 800bc34:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc36:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bc38:	e853 3f00 	ldrex	r3, [r3]
 800bc3c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800bc3e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bc40:	f023 0301 	bic.w	r3, r3, #1
 800bc44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	3308      	adds	r3, #8
 800bc4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800bc52:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800bc56:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc58:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800bc5a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800bc5e:	e841 2300 	strex	r3, r2, [r1]
 800bc62:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800bc64:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d1e1      	bne.n	800bc2e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	3308      	adds	r3, #8
 800bc70:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc72:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bc74:	e853 3f00 	ldrex	r3, [r3]
 800bc78:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800bc7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bc7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bc80:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	3308      	adds	r3, #8
 800bc8a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800bc8e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800bc90:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc92:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800bc94:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800bc96:	e841 2300 	strex	r3, r2, [r1]
 800bc9a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800bc9c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d1e3      	bne.n	800bc6a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	2220      	movs	r2, #32
 800bca6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	2200      	movs	r2, #0
 800bcae:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bcb8:	e853 3f00 	ldrex	r3, [r3]
 800bcbc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800bcbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bcc0:	f023 0310 	bic.w	r3, r3, #16
 800bcc4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	461a      	mov	r2, r3
 800bcce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bcd2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bcd4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcd6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bcd8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bcda:	e841 2300 	strex	r3, r2, [r1]
 800bcde:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800bce0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d1e4      	bne.n	800bcb0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bcec:	4618      	mov	r0, r3
 800bcee:	f7f8 f9f1 	bl	80040d4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	2202      	movs	r2, #2
 800bcf6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bd04:	b29b      	uxth	r3, r3
 800bd06:	1ad3      	subs	r3, r2, r3
 800bd08:	b29b      	uxth	r3, r3
 800bd0a:	4619      	mov	r1, r3
 800bd0c:	6878      	ldr	r0, [r7, #4]
 800bd0e:	f000 f91d 	bl	800bf4c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bd12:	e0fd      	b.n	800bf10 <HAL_UART_IRQHandler+0x760>
 800bd14:	40020010 	.word	0x40020010
 800bd18:	40020028 	.word	0x40020028
 800bd1c:	40020040 	.word	0x40020040
 800bd20:	40020058 	.word	0x40020058
 800bd24:	40020070 	.word	0x40020070
 800bd28:	40020088 	.word	0x40020088
 800bd2c:	400200a0 	.word	0x400200a0
 800bd30:	400200b8 	.word	0x400200b8
 800bd34:	40020410 	.word	0x40020410
 800bd38:	40020428 	.word	0x40020428
 800bd3c:	40020440 	.word	0x40020440
 800bd40:	40020458 	.word	0x40020458
 800bd44:	40020470 	.word	0x40020470
 800bd48:	40020488 	.word	0x40020488
 800bd4c:	400204a0 	.word	0x400204a0
 800bd50:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bd60:	b29b      	uxth	r3, r3
 800bd62:	1ad3      	subs	r3, r2, r3
 800bd64:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bd6e:	b29b      	uxth	r3, r3
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	f000 80cf 	beq.w	800bf14 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800bd76:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	f000 80ca 	beq.w	800bf14 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd88:	e853 3f00 	ldrex	r3, [r3]
 800bd8c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bd8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bd94:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	461a      	mov	r2, r3
 800bd9e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800bda2:	647b      	str	r3, [r7, #68]	@ 0x44
 800bda4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bda6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bda8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bdaa:	e841 2300 	strex	r3, r2, [r1]
 800bdae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bdb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d1e4      	bne.n	800bd80 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	3308      	adds	r3, #8
 800bdbc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdc0:	e853 3f00 	ldrex	r3, [r3]
 800bdc4:	623b      	str	r3, [r7, #32]
   return(result);
 800bdc6:	6a3a      	ldr	r2, [r7, #32]
 800bdc8:	4b55      	ldr	r3, [pc, #340]	@ (800bf20 <HAL_UART_IRQHandler+0x770>)
 800bdca:	4013      	ands	r3, r2
 800bdcc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	3308      	adds	r3, #8
 800bdd6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800bdda:	633a      	str	r2, [r7, #48]	@ 0x30
 800bddc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdde:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bde0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bde2:	e841 2300 	strex	r3, r2, [r1]
 800bde6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bde8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d1e3      	bne.n	800bdb6 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	2220      	movs	r2, #32
 800bdf2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	2200      	movs	r2, #0
 800be00:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be08:	693b      	ldr	r3, [r7, #16]
 800be0a:	e853 3f00 	ldrex	r3, [r3]
 800be0e:	60fb      	str	r3, [r7, #12]
   return(result);
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	f023 0310 	bic.w	r3, r3, #16
 800be16:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	461a      	mov	r2, r3
 800be20:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800be24:	61fb      	str	r3, [r7, #28]
 800be26:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be28:	69b9      	ldr	r1, [r7, #24]
 800be2a:	69fa      	ldr	r2, [r7, #28]
 800be2c:	e841 2300 	strex	r3, r2, [r1]
 800be30:	617b      	str	r3, [r7, #20]
   return(result);
 800be32:	697b      	ldr	r3, [r7, #20]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d1e4      	bne.n	800be02 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	2202      	movs	r2, #2
 800be3c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800be3e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800be42:	4619      	mov	r1, r3
 800be44:	6878      	ldr	r0, [r7, #4]
 800be46:	f000 f881 	bl	800bf4c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800be4a:	e063      	b.n	800bf14 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800be4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800be50:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800be54:	2b00      	cmp	r3, #0
 800be56:	d00e      	beq.n	800be76 <HAL_UART_IRQHandler+0x6c6>
 800be58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800be5c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800be60:	2b00      	cmp	r3, #0
 800be62:	d008      	beq.n	800be76 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800be6c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800be6e:	6878      	ldr	r0, [r7, #4]
 800be70:	f002 f8fe 	bl	800e070 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800be74:	e051      	b.n	800bf1a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800be76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800be7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d014      	beq.n	800beac <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800be82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800be86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d105      	bne.n	800be9a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800be8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800be92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800be96:	2b00      	cmp	r3, #0
 800be98:	d008      	beq.n	800beac <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d03a      	beq.n	800bf18 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bea6:	6878      	ldr	r0, [r7, #4]
 800bea8:	4798      	blx	r3
    }
    return;
 800beaa:	e035      	b.n	800bf18 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800beac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800beb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d009      	beq.n	800becc <HAL_UART_IRQHandler+0x71c>
 800beb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bebc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d003      	beq.n	800becc <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800bec4:	6878      	ldr	r0, [r7, #4]
 800bec6:	f001 fb8c 	bl	800d5e2 <UART_EndTransmit_IT>
    return;
 800beca:	e026      	b.n	800bf1a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800becc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bed0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d009      	beq.n	800beec <HAL_UART_IRQHandler+0x73c>
 800bed8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bedc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d003      	beq.n	800beec <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800bee4:	6878      	ldr	r0, [r7, #4]
 800bee6:	f002 f8d7 	bl	800e098 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800beea:	e016      	b.n	800bf1a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800beec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bef0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d010      	beq.n	800bf1a <HAL_UART_IRQHandler+0x76a>
 800bef8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800befc:	2b00      	cmp	r3, #0
 800befe:	da0c      	bge.n	800bf1a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800bf00:	6878      	ldr	r0, [r7, #4]
 800bf02:	f002 f8bf 	bl	800e084 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bf06:	e008      	b.n	800bf1a <HAL_UART_IRQHandler+0x76a>
      return;
 800bf08:	bf00      	nop
 800bf0a:	e006      	b.n	800bf1a <HAL_UART_IRQHandler+0x76a>
    return;
 800bf0c:	bf00      	nop
 800bf0e:	e004      	b.n	800bf1a <HAL_UART_IRQHandler+0x76a>
      return;
 800bf10:	bf00      	nop
 800bf12:	e002      	b.n	800bf1a <HAL_UART_IRQHandler+0x76a>
      return;
 800bf14:	bf00      	nop
 800bf16:	e000      	b.n	800bf1a <HAL_UART_IRQHandler+0x76a>
    return;
 800bf18:	bf00      	nop
  }
}
 800bf1a:	37e8      	adds	r7, #232	@ 0xe8
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	bd80      	pop	{r7, pc}
 800bf20:	effffffe 	.word	0xeffffffe

0800bf24 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bf24:	b480      	push	{r7}
 800bf26:	b083      	sub	sp, #12
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bf2c:	bf00      	nop
 800bf2e:	370c      	adds	r7, #12
 800bf30:	46bd      	mov	sp, r7
 800bf32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf36:	4770      	bx	lr

0800bf38 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800bf38:	b480      	push	{r7}
 800bf3a:	b083      	sub	sp, #12
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800bf40:	bf00      	nop
 800bf42:	370c      	adds	r7, #12
 800bf44:	46bd      	mov	sp, r7
 800bf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4a:	4770      	bx	lr

0800bf4c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bf4c:	b480      	push	{r7}
 800bf4e:	b083      	sub	sp, #12
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
 800bf54:	460b      	mov	r3, r1
 800bf56:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bf58:	bf00      	nop
 800bf5a:	370c      	adds	r7, #12
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf62:	4770      	bx	lr

0800bf64 <HAL_HalfDuplex_EnableTransmitter>:
  * @brief  Enable the UART transmitter and disable the UART receiver.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 800bf64:	b480      	push	{r7}
 800bf66:	b08f      	sub	sp, #60	@ 0x3c
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bf72:	2b01      	cmp	r3, #1
 800bf74:	d101      	bne.n	800bf7a <HAL_HalfDuplex_EnableTransmitter+0x16>
 800bf76:	2302      	movs	r3, #2
 800bf78:	e042      	b.n	800c000 <HAL_HalfDuplex_EnableTransmitter+0x9c>
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	2201      	movs	r2, #1
 800bf7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	2224      	movs	r2, #36	@ 0x24
 800bf86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf90:	6a3b      	ldr	r3, [r7, #32]
 800bf92:	e853 3f00 	ldrex	r3, [r3]
 800bf96:	61fb      	str	r3, [r7, #28]
   return(result);
 800bf98:	69fb      	ldr	r3, [r7, #28]
 800bf9a:	f023 030c 	bic.w	r3, r3, #12
 800bf9e:	637b      	str	r3, [r7, #52]	@ 0x34
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	461a      	mov	r2, r3
 800bfa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bfa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bfaa:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bfae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bfb0:	e841 2300 	strex	r3, r2, [r1]
 800bfb4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bfb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d1e6      	bne.n	800bf8a <HAL_HalfDuplex_EnableTransmitter+0x26>

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	e853 3f00 	ldrex	r3, [r3]
 800bfc8:	60bb      	str	r3, [r7, #8]
   return(result);
 800bfca:	68bb      	ldr	r3, [r7, #8]
 800bfcc:	f043 0308 	orr.w	r3, r3, #8
 800bfd0:	633b      	str	r3, [r7, #48]	@ 0x30
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	461a      	mov	r2, r3
 800bfd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfda:	61bb      	str	r3, [r7, #24]
 800bfdc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfde:	6979      	ldr	r1, [r7, #20]
 800bfe0:	69ba      	ldr	r2, [r7, #24]
 800bfe2:	e841 2300 	strex	r3, r2, [r1]
 800bfe6:	613b      	str	r3, [r7, #16]
   return(result);
 800bfe8:	693b      	ldr	r3, [r7, #16]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d1e6      	bne.n	800bfbc <HAL_HalfDuplex_EnableTransmitter+0x58>

  huart->gState = HAL_UART_STATE_READY;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	2220      	movs	r2, #32
 800bff2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UNLOCK(huart);
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	2200      	movs	r2, #0
 800bffa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bffe:	2300      	movs	r3, #0
}
 800c000:	4618      	mov	r0, r3
 800c002:	373c      	adds	r7, #60	@ 0x3c
 800c004:	46bd      	mov	sp, r7
 800c006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00a:	4770      	bx	lr

0800c00c <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 800c00c:	b480      	push	{r7}
 800c00e:	b08f      	sub	sp, #60	@ 0x3c
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c01a:	2b01      	cmp	r3, #1
 800c01c:	d101      	bne.n	800c022 <HAL_HalfDuplex_EnableReceiver+0x16>
 800c01e:	2302      	movs	r3, #2
 800c020:	e042      	b.n	800c0a8 <HAL_HalfDuplex_EnableReceiver+0x9c>
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	2201      	movs	r2, #1
 800c026:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	2224      	movs	r2, #36	@ 0x24
 800c02e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c038:	6a3b      	ldr	r3, [r7, #32]
 800c03a:	e853 3f00 	ldrex	r3, [r3]
 800c03e:	61fb      	str	r3, [r7, #28]
   return(result);
 800c040:	69fb      	ldr	r3, [r7, #28]
 800c042:	f023 030c 	bic.w	r3, r3, #12
 800c046:	637b      	str	r3, [r7, #52]	@ 0x34
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	461a      	mov	r2, r3
 800c04e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c050:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c052:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c054:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c056:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c058:	e841 2300 	strex	r3, r2, [r1]
 800c05c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c05e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c060:	2b00      	cmp	r3, #0
 800c062:	d1e6      	bne.n	800c032 <HAL_HalfDuplex_EnableReceiver+0x26>

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	e853 3f00 	ldrex	r3, [r3]
 800c070:	60bb      	str	r3, [r7, #8]
   return(result);
 800c072:	68bb      	ldr	r3, [r7, #8]
 800c074:	f043 0304 	orr.w	r3, r3, #4
 800c078:	633b      	str	r3, [r7, #48]	@ 0x30
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	461a      	mov	r2, r3
 800c080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c082:	61bb      	str	r3, [r7, #24]
 800c084:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c086:	6979      	ldr	r1, [r7, #20]
 800c088:	69ba      	ldr	r2, [r7, #24]
 800c08a:	e841 2300 	strex	r3, r2, [r1]
 800c08e:	613b      	str	r3, [r7, #16]
   return(result);
 800c090:	693b      	ldr	r3, [r7, #16]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d1e6      	bne.n	800c064 <HAL_HalfDuplex_EnableReceiver+0x58>

  huart->gState = HAL_UART_STATE_READY;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	2220      	movs	r2, #32
 800c09a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UNLOCK(huart);
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	2200      	movs	r2, #0
 800c0a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c0a6:	2300      	movs	r3, #0
}
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	373c      	adds	r7, #60	@ 0x3c
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b2:	4770      	bx	lr

0800c0b4 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 800c0b4:	b480      	push	{r7}
 800c0b6:	b085      	sub	sp, #20
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c0c2:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c0ca:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800c0cc:	68fa      	ldr	r2, [r7, #12]
 800c0ce:	68bb      	ldr	r3, [r7, #8]
 800c0d0:	4313      	orrs	r3, r2
}
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	3714      	adds	r7, #20
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0dc:	4770      	bx	lr
	...

0800c0e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c0e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c0e4:	b092      	sub	sp, #72	@ 0x48
 800c0e6:	af00      	add	r7, sp, #0
 800c0e8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c0f0:	697b      	ldr	r3, [r7, #20]
 800c0f2:	689a      	ldr	r2, [r3, #8]
 800c0f4:	697b      	ldr	r3, [r7, #20]
 800c0f6:	691b      	ldr	r3, [r3, #16]
 800c0f8:	431a      	orrs	r2, r3
 800c0fa:	697b      	ldr	r3, [r7, #20]
 800c0fc:	695b      	ldr	r3, [r3, #20]
 800c0fe:	431a      	orrs	r2, r3
 800c100:	697b      	ldr	r3, [r7, #20]
 800c102:	69db      	ldr	r3, [r3, #28]
 800c104:	4313      	orrs	r3, r2
 800c106:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c108:	697b      	ldr	r3, [r7, #20]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	681a      	ldr	r2, [r3, #0]
 800c10e:	4bbe      	ldr	r3, [pc, #760]	@ (800c408 <UART_SetConfig+0x328>)
 800c110:	4013      	ands	r3, r2
 800c112:	697a      	ldr	r2, [r7, #20]
 800c114:	6812      	ldr	r2, [r2, #0]
 800c116:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c118:	430b      	orrs	r3, r1
 800c11a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c11c:	697b      	ldr	r3, [r7, #20]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	685b      	ldr	r3, [r3, #4]
 800c122:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c126:	697b      	ldr	r3, [r7, #20]
 800c128:	68da      	ldr	r2, [r3, #12]
 800c12a:	697b      	ldr	r3, [r7, #20]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	430a      	orrs	r2, r1
 800c130:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c132:	697b      	ldr	r3, [r7, #20]
 800c134:	699b      	ldr	r3, [r3, #24]
 800c136:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c138:	697b      	ldr	r3, [r7, #20]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	4ab3      	ldr	r2, [pc, #716]	@ (800c40c <UART_SetConfig+0x32c>)
 800c13e:	4293      	cmp	r3, r2
 800c140:	d004      	beq.n	800c14c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c142:	697b      	ldr	r3, [r7, #20]
 800c144:	6a1b      	ldr	r3, [r3, #32]
 800c146:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c148:	4313      	orrs	r3, r2
 800c14a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c14c:	697b      	ldr	r3, [r7, #20]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	689a      	ldr	r2, [r3, #8]
 800c152:	4baf      	ldr	r3, [pc, #700]	@ (800c410 <UART_SetConfig+0x330>)
 800c154:	4013      	ands	r3, r2
 800c156:	697a      	ldr	r2, [r7, #20]
 800c158:	6812      	ldr	r2, [r2, #0]
 800c15a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c15c:	430b      	orrs	r3, r1
 800c15e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c160:	697b      	ldr	r3, [r7, #20]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c166:	f023 010f 	bic.w	r1, r3, #15
 800c16a:	697b      	ldr	r3, [r7, #20]
 800c16c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c16e:	697b      	ldr	r3, [r7, #20]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	430a      	orrs	r2, r1
 800c174:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c176:	697b      	ldr	r3, [r7, #20]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	4aa6      	ldr	r2, [pc, #664]	@ (800c414 <UART_SetConfig+0x334>)
 800c17c:	4293      	cmp	r3, r2
 800c17e:	d177      	bne.n	800c270 <UART_SetConfig+0x190>
 800c180:	4ba5      	ldr	r3, [pc, #660]	@ (800c418 <UART_SetConfig+0x338>)
 800c182:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c184:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c188:	2b28      	cmp	r3, #40	@ 0x28
 800c18a:	d86d      	bhi.n	800c268 <UART_SetConfig+0x188>
 800c18c:	a201      	add	r2, pc, #4	@ (adr r2, 800c194 <UART_SetConfig+0xb4>)
 800c18e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c192:	bf00      	nop
 800c194:	0800c239 	.word	0x0800c239
 800c198:	0800c269 	.word	0x0800c269
 800c19c:	0800c269 	.word	0x0800c269
 800c1a0:	0800c269 	.word	0x0800c269
 800c1a4:	0800c269 	.word	0x0800c269
 800c1a8:	0800c269 	.word	0x0800c269
 800c1ac:	0800c269 	.word	0x0800c269
 800c1b0:	0800c269 	.word	0x0800c269
 800c1b4:	0800c241 	.word	0x0800c241
 800c1b8:	0800c269 	.word	0x0800c269
 800c1bc:	0800c269 	.word	0x0800c269
 800c1c0:	0800c269 	.word	0x0800c269
 800c1c4:	0800c269 	.word	0x0800c269
 800c1c8:	0800c269 	.word	0x0800c269
 800c1cc:	0800c269 	.word	0x0800c269
 800c1d0:	0800c269 	.word	0x0800c269
 800c1d4:	0800c249 	.word	0x0800c249
 800c1d8:	0800c269 	.word	0x0800c269
 800c1dc:	0800c269 	.word	0x0800c269
 800c1e0:	0800c269 	.word	0x0800c269
 800c1e4:	0800c269 	.word	0x0800c269
 800c1e8:	0800c269 	.word	0x0800c269
 800c1ec:	0800c269 	.word	0x0800c269
 800c1f0:	0800c269 	.word	0x0800c269
 800c1f4:	0800c251 	.word	0x0800c251
 800c1f8:	0800c269 	.word	0x0800c269
 800c1fc:	0800c269 	.word	0x0800c269
 800c200:	0800c269 	.word	0x0800c269
 800c204:	0800c269 	.word	0x0800c269
 800c208:	0800c269 	.word	0x0800c269
 800c20c:	0800c269 	.word	0x0800c269
 800c210:	0800c269 	.word	0x0800c269
 800c214:	0800c259 	.word	0x0800c259
 800c218:	0800c269 	.word	0x0800c269
 800c21c:	0800c269 	.word	0x0800c269
 800c220:	0800c269 	.word	0x0800c269
 800c224:	0800c269 	.word	0x0800c269
 800c228:	0800c269 	.word	0x0800c269
 800c22c:	0800c269 	.word	0x0800c269
 800c230:	0800c269 	.word	0x0800c269
 800c234:	0800c261 	.word	0x0800c261
 800c238:	2301      	movs	r3, #1
 800c23a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c23e:	e222      	b.n	800c686 <UART_SetConfig+0x5a6>
 800c240:	2304      	movs	r3, #4
 800c242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c246:	e21e      	b.n	800c686 <UART_SetConfig+0x5a6>
 800c248:	2308      	movs	r3, #8
 800c24a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c24e:	e21a      	b.n	800c686 <UART_SetConfig+0x5a6>
 800c250:	2310      	movs	r3, #16
 800c252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c256:	e216      	b.n	800c686 <UART_SetConfig+0x5a6>
 800c258:	2320      	movs	r3, #32
 800c25a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c25e:	e212      	b.n	800c686 <UART_SetConfig+0x5a6>
 800c260:	2340      	movs	r3, #64	@ 0x40
 800c262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c266:	e20e      	b.n	800c686 <UART_SetConfig+0x5a6>
 800c268:	2380      	movs	r3, #128	@ 0x80
 800c26a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c26e:	e20a      	b.n	800c686 <UART_SetConfig+0x5a6>
 800c270:	697b      	ldr	r3, [r7, #20]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	4a69      	ldr	r2, [pc, #420]	@ (800c41c <UART_SetConfig+0x33c>)
 800c276:	4293      	cmp	r3, r2
 800c278:	d130      	bne.n	800c2dc <UART_SetConfig+0x1fc>
 800c27a:	4b67      	ldr	r3, [pc, #412]	@ (800c418 <UART_SetConfig+0x338>)
 800c27c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c27e:	f003 0307 	and.w	r3, r3, #7
 800c282:	2b05      	cmp	r3, #5
 800c284:	d826      	bhi.n	800c2d4 <UART_SetConfig+0x1f4>
 800c286:	a201      	add	r2, pc, #4	@ (adr r2, 800c28c <UART_SetConfig+0x1ac>)
 800c288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c28c:	0800c2a5 	.word	0x0800c2a5
 800c290:	0800c2ad 	.word	0x0800c2ad
 800c294:	0800c2b5 	.word	0x0800c2b5
 800c298:	0800c2bd 	.word	0x0800c2bd
 800c29c:	0800c2c5 	.word	0x0800c2c5
 800c2a0:	0800c2cd 	.word	0x0800c2cd
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2aa:	e1ec      	b.n	800c686 <UART_SetConfig+0x5a6>
 800c2ac:	2304      	movs	r3, #4
 800c2ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2b2:	e1e8      	b.n	800c686 <UART_SetConfig+0x5a6>
 800c2b4:	2308      	movs	r3, #8
 800c2b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2ba:	e1e4      	b.n	800c686 <UART_SetConfig+0x5a6>
 800c2bc:	2310      	movs	r3, #16
 800c2be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2c2:	e1e0      	b.n	800c686 <UART_SetConfig+0x5a6>
 800c2c4:	2320      	movs	r3, #32
 800c2c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2ca:	e1dc      	b.n	800c686 <UART_SetConfig+0x5a6>
 800c2cc:	2340      	movs	r3, #64	@ 0x40
 800c2ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2d2:	e1d8      	b.n	800c686 <UART_SetConfig+0x5a6>
 800c2d4:	2380      	movs	r3, #128	@ 0x80
 800c2d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2da:	e1d4      	b.n	800c686 <UART_SetConfig+0x5a6>
 800c2dc:	697b      	ldr	r3, [r7, #20]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	4a4f      	ldr	r2, [pc, #316]	@ (800c420 <UART_SetConfig+0x340>)
 800c2e2:	4293      	cmp	r3, r2
 800c2e4:	d130      	bne.n	800c348 <UART_SetConfig+0x268>
 800c2e6:	4b4c      	ldr	r3, [pc, #304]	@ (800c418 <UART_SetConfig+0x338>)
 800c2e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c2ea:	f003 0307 	and.w	r3, r3, #7
 800c2ee:	2b05      	cmp	r3, #5
 800c2f0:	d826      	bhi.n	800c340 <UART_SetConfig+0x260>
 800c2f2:	a201      	add	r2, pc, #4	@ (adr r2, 800c2f8 <UART_SetConfig+0x218>)
 800c2f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2f8:	0800c311 	.word	0x0800c311
 800c2fc:	0800c319 	.word	0x0800c319
 800c300:	0800c321 	.word	0x0800c321
 800c304:	0800c329 	.word	0x0800c329
 800c308:	0800c331 	.word	0x0800c331
 800c30c:	0800c339 	.word	0x0800c339
 800c310:	2300      	movs	r3, #0
 800c312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c316:	e1b6      	b.n	800c686 <UART_SetConfig+0x5a6>
 800c318:	2304      	movs	r3, #4
 800c31a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c31e:	e1b2      	b.n	800c686 <UART_SetConfig+0x5a6>
 800c320:	2308      	movs	r3, #8
 800c322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c326:	e1ae      	b.n	800c686 <UART_SetConfig+0x5a6>
 800c328:	2310      	movs	r3, #16
 800c32a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c32e:	e1aa      	b.n	800c686 <UART_SetConfig+0x5a6>
 800c330:	2320      	movs	r3, #32
 800c332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c336:	e1a6      	b.n	800c686 <UART_SetConfig+0x5a6>
 800c338:	2340      	movs	r3, #64	@ 0x40
 800c33a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c33e:	e1a2      	b.n	800c686 <UART_SetConfig+0x5a6>
 800c340:	2380      	movs	r3, #128	@ 0x80
 800c342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c346:	e19e      	b.n	800c686 <UART_SetConfig+0x5a6>
 800c348:	697b      	ldr	r3, [r7, #20]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	4a35      	ldr	r2, [pc, #212]	@ (800c424 <UART_SetConfig+0x344>)
 800c34e:	4293      	cmp	r3, r2
 800c350:	d130      	bne.n	800c3b4 <UART_SetConfig+0x2d4>
 800c352:	4b31      	ldr	r3, [pc, #196]	@ (800c418 <UART_SetConfig+0x338>)
 800c354:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c356:	f003 0307 	and.w	r3, r3, #7
 800c35a:	2b05      	cmp	r3, #5
 800c35c:	d826      	bhi.n	800c3ac <UART_SetConfig+0x2cc>
 800c35e:	a201      	add	r2, pc, #4	@ (adr r2, 800c364 <UART_SetConfig+0x284>)
 800c360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c364:	0800c37d 	.word	0x0800c37d
 800c368:	0800c385 	.word	0x0800c385
 800c36c:	0800c38d 	.word	0x0800c38d
 800c370:	0800c395 	.word	0x0800c395
 800c374:	0800c39d 	.word	0x0800c39d
 800c378:	0800c3a5 	.word	0x0800c3a5
 800c37c:	2300      	movs	r3, #0
 800c37e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c382:	e180      	b.n	800c686 <UART_SetConfig+0x5a6>
 800c384:	2304      	movs	r3, #4
 800c386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c38a:	e17c      	b.n	800c686 <UART_SetConfig+0x5a6>
 800c38c:	2308      	movs	r3, #8
 800c38e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c392:	e178      	b.n	800c686 <UART_SetConfig+0x5a6>
 800c394:	2310      	movs	r3, #16
 800c396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c39a:	e174      	b.n	800c686 <UART_SetConfig+0x5a6>
 800c39c:	2320      	movs	r3, #32
 800c39e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3a2:	e170      	b.n	800c686 <UART_SetConfig+0x5a6>
 800c3a4:	2340      	movs	r3, #64	@ 0x40
 800c3a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3aa:	e16c      	b.n	800c686 <UART_SetConfig+0x5a6>
 800c3ac:	2380      	movs	r3, #128	@ 0x80
 800c3ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3b2:	e168      	b.n	800c686 <UART_SetConfig+0x5a6>
 800c3b4:	697b      	ldr	r3, [r7, #20]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	4a1b      	ldr	r2, [pc, #108]	@ (800c428 <UART_SetConfig+0x348>)
 800c3ba:	4293      	cmp	r3, r2
 800c3bc:	d142      	bne.n	800c444 <UART_SetConfig+0x364>
 800c3be:	4b16      	ldr	r3, [pc, #88]	@ (800c418 <UART_SetConfig+0x338>)
 800c3c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c3c2:	f003 0307 	and.w	r3, r3, #7
 800c3c6:	2b05      	cmp	r3, #5
 800c3c8:	d838      	bhi.n	800c43c <UART_SetConfig+0x35c>
 800c3ca:	a201      	add	r2, pc, #4	@ (adr r2, 800c3d0 <UART_SetConfig+0x2f0>)
 800c3cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3d0:	0800c3e9 	.word	0x0800c3e9
 800c3d4:	0800c3f1 	.word	0x0800c3f1
 800c3d8:	0800c3f9 	.word	0x0800c3f9
 800c3dc:	0800c401 	.word	0x0800c401
 800c3e0:	0800c42d 	.word	0x0800c42d
 800c3e4:	0800c435 	.word	0x0800c435
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3ee:	e14a      	b.n	800c686 <UART_SetConfig+0x5a6>
 800c3f0:	2304      	movs	r3, #4
 800c3f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3f6:	e146      	b.n	800c686 <UART_SetConfig+0x5a6>
 800c3f8:	2308      	movs	r3, #8
 800c3fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3fe:	e142      	b.n	800c686 <UART_SetConfig+0x5a6>
 800c400:	2310      	movs	r3, #16
 800c402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c406:	e13e      	b.n	800c686 <UART_SetConfig+0x5a6>
 800c408:	cfff69f3 	.word	0xcfff69f3
 800c40c:	58000c00 	.word	0x58000c00
 800c410:	11fff4ff 	.word	0x11fff4ff
 800c414:	40011000 	.word	0x40011000
 800c418:	58024400 	.word	0x58024400
 800c41c:	40004400 	.word	0x40004400
 800c420:	40004800 	.word	0x40004800
 800c424:	40004c00 	.word	0x40004c00
 800c428:	40005000 	.word	0x40005000
 800c42c:	2320      	movs	r3, #32
 800c42e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c432:	e128      	b.n	800c686 <UART_SetConfig+0x5a6>
 800c434:	2340      	movs	r3, #64	@ 0x40
 800c436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c43a:	e124      	b.n	800c686 <UART_SetConfig+0x5a6>
 800c43c:	2380      	movs	r3, #128	@ 0x80
 800c43e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c442:	e120      	b.n	800c686 <UART_SetConfig+0x5a6>
 800c444:	697b      	ldr	r3, [r7, #20]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	4acb      	ldr	r2, [pc, #812]	@ (800c778 <UART_SetConfig+0x698>)
 800c44a:	4293      	cmp	r3, r2
 800c44c:	d176      	bne.n	800c53c <UART_SetConfig+0x45c>
 800c44e:	4bcb      	ldr	r3, [pc, #812]	@ (800c77c <UART_SetConfig+0x69c>)
 800c450:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c452:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c456:	2b28      	cmp	r3, #40	@ 0x28
 800c458:	d86c      	bhi.n	800c534 <UART_SetConfig+0x454>
 800c45a:	a201      	add	r2, pc, #4	@ (adr r2, 800c460 <UART_SetConfig+0x380>)
 800c45c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c460:	0800c505 	.word	0x0800c505
 800c464:	0800c535 	.word	0x0800c535
 800c468:	0800c535 	.word	0x0800c535
 800c46c:	0800c535 	.word	0x0800c535
 800c470:	0800c535 	.word	0x0800c535
 800c474:	0800c535 	.word	0x0800c535
 800c478:	0800c535 	.word	0x0800c535
 800c47c:	0800c535 	.word	0x0800c535
 800c480:	0800c50d 	.word	0x0800c50d
 800c484:	0800c535 	.word	0x0800c535
 800c488:	0800c535 	.word	0x0800c535
 800c48c:	0800c535 	.word	0x0800c535
 800c490:	0800c535 	.word	0x0800c535
 800c494:	0800c535 	.word	0x0800c535
 800c498:	0800c535 	.word	0x0800c535
 800c49c:	0800c535 	.word	0x0800c535
 800c4a0:	0800c515 	.word	0x0800c515
 800c4a4:	0800c535 	.word	0x0800c535
 800c4a8:	0800c535 	.word	0x0800c535
 800c4ac:	0800c535 	.word	0x0800c535
 800c4b0:	0800c535 	.word	0x0800c535
 800c4b4:	0800c535 	.word	0x0800c535
 800c4b8:	0800c535 	.word	0x0800c535
 800c4bc:	0800c535 	.word	0x0800c535
 800c4c0:	0800c51d 	.word	0x0800c51d
 800c4c4:	0800c535 	.word	0x0800c535
 800c4c8:	0800c535 	.word	0x0800c535
 800c4cc:	0800c535 	.word	0x0800c535
 800c4d0:	0800c535 	.word	0x0800c535
 800c4d4:	0800c535 	.word	0x0800c535
 800c4d8:	0800c535 	.word	0x0800c535
 800c4dc:	0800c535 	.word	0x0800c535
 800c4e0:	0800c525 	.word	0x0800c525
 800c4e4:	0800c535 	.word	0x0800c535
 800c4e8:	0800c535 	.word	0x0800c535
 800c4ec:	0800c535 	.word	0x0800c535
 800c4f0:	0800c535 	.word	0x0800c535
 800c4f4:	0800c535 	.word	0x0800c535
 800c4f8:	0800c535 	.word	0x0800c535
 800c4fc:	0800c535 	.word	0x0800c535
 800c500:	0800c52d 	.word	0x0800c52d
 800c504:	2301      	movs	r3, #1
 800c506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c50a:	e0bc      	b.n	800c686 <UART_SetConfig+0x5a6>
 800c50c:	2304      	movs	r3, #4
 800c50e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c512:	e0b8      	b.n	800c686 <UART_SetConfig+0x5a6>
 800c514:	2308      	movs	r3, #8
 800c516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c51a:	e0b4      	b.n	800c686 <UART_SetConfig+0x5a6>
 800c51c:	2310      	movs	r3, #16
 800c51e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c522:	e0b0      	b.n	800c686 <UART_SetConfig+0x5a6>
 800c524:	2320      	movs	r3, #32
 800c526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c52a:	e0ac      	b.n	800c686 <UART_SetConfig+0x5a6>
 800c52c:	2340      	movs	r3, #64	@ 0x40
 800c52e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c532:	e0a8      	b.n	800c686 <UART_SetConfig+0x5a6>
 800c534:	2380      	movs	r3, #128	@ 0x80
 800c536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c53a:	e0a4      	b.n	800c686 <UART_SetConfig+0x5a6>
 800c53c:	697b      	ldr	r3, [r7, #20]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	4a8f      	ldr	r2, [pc, #572]	@ (800c780 <UART_SetConfig+0x6a0>)
 800c542:	4293      	cmp	r3, r2
 800c544:	d130      	bne.n	800c5a8 <UART_SetConfig+0x4c8>
 800c546:	4b8d      	ldr	r3, [pc, #564]	@ (800c77c <UART_SetConfig+0x69c>)
 800c548:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c54a:	f003 0307 	and.w	r3, r3, #7
 800c54e:	2b05      	cmp	r3, #5
 800c550:	d826      	bhi.n	800c5a0 <UART_SetConfig+0x4c0>
 800c552:	a201      	add	r2, pc, #4	@ (adr r2, 800c558 <UART_SetConfig+0x478>)
 800c554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c558:	0800c571 	.word	0x0800c571
 800c55c:	0800c579 	.word	0x0800c579
 800c560:	0800c581 	.word	0x0800c581
 800c564:	0800c589 	.word	0x0800c589
 800c568:	0800c591 	.word	0x0800c591
 800c56c:	0800c599 	.word	0x0800c599
 800c570:	2300      	movs	r3, #0
 800c572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c576:	e086      	b.n	800c686 <UART_SetConfig+0x5a6>
 800c578:	2304      	movs	r3, #4
 800c57a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c57e:	e082      	b.n	800c686 <UART_SetConfig+0x5a6>
 800c580:	2308      	movs	r3, #8
 800c582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c586:	e07e      	b.n	800c686 <UART_SetConfig+0x5a6>
 800c588:	2310      	movs	r3, #16
 800c58a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c58e:	e07a      	b.n	800c686 <UART_SetConfig+0x5a6>
 800c590:	2320      	movs	r3, #32
 800c592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c596:	e076      	b.n	800c686 <UART_SetConfig+0x5a6>
 800c598:	2340      	movs	r3, #64	@ 0x40
 800c59a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c59e:	e072      	b.n	800c686 <UART_SetConfig+0x5a6>
 800c5a0:	2380      	movs	r3, #128	@ 0x80
 800c5a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5a6:	e06e      	b.n	800c686 <UART_SetConfig+0x5a6>
 800c5a8:	697b      	ldr	r3, [r7, #20]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	4a75      	ldr	r2, [pc, #468]	@ (800c784 <UART_SetConfig+0x6a4>)
 800c5ae:	4293      	cmp	r3, r2
 800c5b0:	d130      	bne.n	800c614 <UART_SetConfig+0x534>
 800c5b2:	4b72      	ldr	r3, [pc, #456]	@ (800c77c <UART_SetConfig+0x69c>)
 800c5b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c5b6:	f003 0307 	and.w	r3, r3, #7
 800c5ba:	2b05      	cmp	r3, #5
 800c5bc:	d826      	bhi.n	800c60c <UART_SetConfig+0x52c>
 800c5be:	a201      	add	r2, pc, #4	@ (adr r2, 800c5c4 <UART_SetConfig+0x4e4>)
 800c5c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5c4:	0800c5dd 	.word	0x0800c5dd
 800c5c8:	0800c5e5 	.word	0x0800c5e5
 800c5cc:	0800c5ed 	.word	0x0800c5ed
 800c5d0:	0800c5f5 	.word	0x0800c5f5
 800c5d4:	0800c5fd 	.word	0x0800c5fd
 800c5d8:	0800c605 	.word	0x0800c605
 800c5dc:	2300      	movs	r3, #0
 800c5de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5e2:	e050      	b.n	800c686 <UART_SetConfig+0x5a6>
 800c5e4:	2304      	movs	r3, #4
 800c5e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5ea:	e04c      	b.n	800c686 <UART_SetConfig+0x5a6>
 800c5ec:	2308      	movs	r3, #8
 800c5ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5f2:	e048      	b.n	800c686 <UART_SetConfig+0x5a6>
 800c5f4:	2310      	movs	r3, #16
 800c5f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5fa:	e044      	b.n	800c686 <UART_SetConfig+0x5a6>
 800c5fc:	2320      	movs	r3, #32
 800c5fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c602:	e040      	b.n	800c686 <UART_SetConfig+0x5a6>
 800c604:	2340      	movs	r3, #64	@ 0x40
 800c606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c60a:	e03c      	b.n	800c686 <UART_SetConfig+0x5a6>
 800c60c:	2380      	movs	r3, #128	@ 0x80
 800c60e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c612:	e038      	b.n	800c686 <UART_SetConfig+0x5a6>
 800c614:	697b      	ldr	r3, [r7, #20]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	4a5b      	ldr	r2, [pc, #364]	@ (800c788 <UART_SetConfig+0x6a8>)
 800c61a:	4293      	cmp	r3, r2
 800c61c:	d130      	bne.n	800c680 <UART_SetConfig+0x5a0>
 800c61e:	4b57      	ldr	r3, [pc, #348]	@ (800c77c <UART_SetConfig+0x69c>)
 800c620:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c622:	f003 0307 	and.w	r3, r3, #7
 800c626:	2b05      	cmp	r3, #5
 800c628:	d826      	bhi.n	800c678 <UART_SetConfig+0x598>
 800c62a:	a201      	add	r2, pc, #4	@ (adr r2, 800c630 <UART_SetConfig+0x550>)
 800c62c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c630:	0800c649 	.word	0x0800c649
 800c634:	0800c651 	.word	0x0800c651
 800c638:	0800c659 	.word	0x0800c659
 800c63c:	0800c661 	.word	0x0800c661
 800c640:	0800c669 	.word	0x0800c669
 800c644:	0800c671 	.word	0x0800c671
 800c648:	2302      	movs	r3, #2
 800c64a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c64e:	e01a      	b.n	800c686 <UART_SetConfig+0x5a6>
 800c650:	2304      	movs	r3, #4
 800c652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c656:	e016      	b.n	800c686 <UART_SetConfig+0x5a6>
 800c658:	2308      	movs	r3, #8
 800c65a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c65e:	e012      	b.n	800c686 <UART_SetConfig+0x5a6>
 800c660:	2310      	movs	r3, #16
 800c662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c666:	e00e      	b.n	800c686 <UART_SetConfig+0x5a6>
 800c668:	2320      	movs	r3, #32
 800c66a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c66e:	e00a      	b.n	800c686 <UART_SetConfig+0x5a6>
 800c670:	2340      	movs	r3, #64	@ 0x40
 800c672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c676:	e006      	b.n	800c686 <UART_SetConfig+0x5a6>
 800c678:	2380      	movs	r3, #128	@ 0x80
 800c67a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c67e:	e002      	b.n	800c686 <UART_SetConfig+0x5a6>
 800c680:	2380      	movs	r3, #128	@ 0x80
 800c682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c686:	697b      	ldr	r3, [r7, #20]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	4a3f      	ldr	r2, [pc, #252]	@ (800c788 <UART_SetConfig+0x6a8>)
 800c68c:	4293      	cmp	r3, r2
 800c68e:	f040 80f8 	bne.w	800c882 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c692:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c696:	2b20      	cmp	r3, #32
 800c698:	dc46      	bgt.n	800c728 <UART_SetConfig+0x648>
 800c69a:	2b02      	cmp	r3, #2
 800c69c:	f2c0 8082 	blt.w	800c7a4 <UART_SetConfig+0x6c4>
 800c6a0:	3b02      	subs	r3, #2
 800c6a2:	2b1e      	cmp	r3, #30
 800c6a4:	d87e      	bhi.n	800c7a4 <UART_SetConfig+0x6c4>
 800c6a6:	a201      	add	r2, pc, #4	@ (adr r2, 800c6ac <UART_SetConfig+0x5cc>)
 800c6a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6ac:	0800c72f 	.word	0x0800c72f
 800c6b0:	0800c7a5 	.word	0x0800c7a5
 800c6b4:	0800c737 	.word	0x0800c737
 800c6b8:	0800c7a5 	.word	0x0800c7a5
 800c6bc:	0800c7a5 	.word	0x0800c7a5
 800c6c0:	0800c7a5 	.word	0x0800c7a5
 800c6c4:	0800c747 	.word	0x0800c747
 800c6c8:	0800c7a5 	.word	0x0800c7a5
 800c6cc:	0800c7a5 	.word	0x0800c7a5
 800c6d0:	0800c7a5 	.word	0x0800c7a5
 800c6d4:	0800c7a5 	.word	0x0800c7a5
 800c6d8:	0800c7a5 	.word	0x0800c7a5
 800c6dc:	0800c7a5 	.word	0x0800c7a5
 800c6e0:	0800c7a5 	.word	0x0800c7a5
 800c6e4:	0800c757 	.word	0x0800c757
 800c6e8:	0800c7a5 	.word	0x0800c7a5
 800c6ec:	0800c7a5 	.word	0x0800c7a5
 800c6f0:	0800c7a5 	.word	0x0800c7a5
 800c6f4:	0800c7a5 	.word	0x0800c7a5
 800c6f8:	0800c7a5 	.word	0x0800c7a5
 800c6fc:	0800c7a5 	.word	0x0800c7a5
 800c700:	0800c7a5 	.word	0x0800c7a5
 800c704:	0800c7a5 	.word	0x0800c7a5
 800c708:	0800c7a5 	.word	0x0800c7a5
 800c70c:	0800c7a5 	.word	0x0800c7a5
 800c710:	0800c7a5 	.word	0x0800c7a5
 800c714:	0800c7a5 	.word	0x0800c7a5
 800c718:	0800c7a5 	.word	0x0800c7a5
 800c71c:	0800c7a5 	.word	0x0800c7a5
 800c720:	0800c7a5 	.word	0x0800c7a5
 800c724:	0800c797 	.word	0x0800c797
 800c728:	2b40      	cmp	r3, #64	@ 0x40
 800c72a:	d037      	beq.n	800c79c <UART_SetConfig+0x6bc>
 800c72c:	e03a      	b.n	800c7a4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c72e:	f7fb fc05 	bl	8007f3c <HAL_RCCEx_GetD3PCLK1Freq>
 800c732:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c734:	e03c      	b.n	800c7b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c736:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c73a:	4618      	mov	r0, r3
 800c73c:	f7fb fc14 	bl	8007f68 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c742:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c744:	e034      	b.n	800c7b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c746:	f107 0318 	add.w	r3, r7, #24
 800c74a:	4618      	mov	r0, r3
 800c74c:	f7fb fd60 	bl	8008210 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c750:	69fb      	ldr	r3, [r7, #28]
 800c752:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c754:	e02c      	b.n	800c7b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c756:	4b09      	ldr	r3, [pc, #36]	@ (800c77c <UART_SetConfig+0x69c>)
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	f003 0320 	and.w	r3, r3, #32
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d016      	beq.n	800c790 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c762:	4b06      	ldr	r3, [pc, #24]	@ (800c77c <UART_SetConfig+0x69c>)
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	08db      	lsrs	r3, r3, #3
 800c768:	f003 0303 	and.w	r3, r3, #3
 800c76c:	4a07      	ldr	r2, [pc, #28]	@ (800c78c <UART_SetConfig+0x6ac>)
 800c76e:	fa22 f303 	lsr.w	r3, r2, r3
 800c772:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c774:	e01c      	b.n	800c7b0 <UART_SetConfig+0x6d0>
 800c776:	bf00      	nop
 800c778:	40011400 	.word	0x40011400
 800c77c:	58024400 	.word	0x58024400
 800c780:	40007800 	.word	0x40007800
 800c784:	40007c00 	.word	0x40007c00
 800c788:	58000c00 	.word	0x58000c00
 800c78c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800c790:	4b9d      	ldr	r3, [pc, #628]	@ (800ca08 <UART_SetConfig+0x928>)
 800c792:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c794:	e00c      	b.n	800c7b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c796:	4b9d      	ldr	r3, [pc, #628]	@ (800ca0c <UART_SetConfig+0x92c>)
 800c798:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c79a:	e009      	b.n	800c7b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c79c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c7a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c7a2:	e005      	b.n	800c7b0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c7a8:	2301      	movs	r3, #1
 800c7aa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c7ae:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c7b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	f000 81de 	beq.w	800cb74 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c7b8:	697b      	ldr	r3, [r7, #20]
 800c7ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7bc:	4a94      	ldr	r2, [pc, #592]	@ (800ca10 <UART_SetConfig+0x930>)
 800c7be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c7c2:	461a      	mov	r2, r3
 800c7c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c7c6:	fbb3 f3f2 	udiv	r3, r3, r2
 800c7ca:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c7cc:	697b      	ldr	r3, [r7, #20]
 800c7ce:	685a      	ldr	r2, [r3, #4]
 800c7d0:	4613      	mov	r3, r2
 800c7d2:	005b      	lsls	r3, r3, #1
 800c7d4:	4413      	add	r3, r2
 800c7d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c7d8:	429a      	cmp	r2, r3
 800c7da:	d305      	bcc.n	800c7e8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c7dc:	697b      	ldr	r3, [r7, #20]
 800c7de:	685b      	ldr	r3, [r3, #4]
 800c7e0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c7e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c7e4:	429a      	cmp	r2, r3
 800c7e6:	d903      	bls.n	800c7f0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800c7e8:	2301      	movs	r3, #1
 800c7ea:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c7ee:	e1c1      	b.n	800cb74 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c7f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c7f2:	2200      	movs	r2, #0
 800c7f4:	60bb      	str	r3, [r7, #8]
 800c7f6:	60fa      	str	r2, [r7, #12]
 800c7f8:	697b      	ldr	r3, [r7, #20]
 800c7fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7fc:	4a84      	ldr	r2, [pc, #528]	@ (800ca10 <UART_SetConfig+0x930>)
 800c7fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c802:	b29b      	uxth	r3, r3
 800c804:	2200      	movs	r2, #0
 800c806:	603b      	str	r3, [r7, #0]
 800c808:	607a      	str	r2, [r7, #4]
 800c80a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c80e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c812:	f7f3 fdbd 	bl	8000390 <__aeabi_uldivmod>
 800c816:	4602      	mov	r2, r0
 800c818:	460b      	mov	r3, r1
 800c81a:	4610      	mov	r0, r2
 800c81c:	4619      	mov	r1, r3
 800c81e:	f04f 0200 	mov.w	r2, #0
 800c822:	f04f 0300 	mov.w	r3, #0
 800c826:	020b      	lsls	r3, r1, #8
 800c828:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c82c:	0202      	lsls	r2, r0, #8
 800c82e:	6979      	ldr	r1, [r7, #20]
 800c830:	6849      	ldr	r1, [r1, #4]
 800c832:	0849      	lsrs	r1, r1, #1
 800c834:	2000      	movs	r0, #0
 800c836:	460c      	mov	r4, r1
 800c838:	4605      	mov	r5, r0
 800c83a:	eb12 0804 	adds.w	r8, r2, r4
 800c83e:	eb43 0905 	adc.w	r9, r3, r5
 800c842:	697b      	ldr	r3, [r7, #20]
 800c844:	685b      	ldr	r3, [r3, #4]
 800c846:	2200      	movs	r2, #0
 800c848:	469a      	mov	sl, r3
 800c84a:	4693      	mov	fp, r2
 800c84c:	4652      	mov	r2, sl
 800c84e:	465b      	mov	r3, fp
 800c850:	4640      	mov	r0, r8
 800c852:	4649      	mov	r1, r9
 800c854:	f7f3 fd9c 	bl	8000390 <__aeabi_uldivmod>
 800c858:	4602      	mov	r2, r0
 800c85a:	460b      	mov	r3, r1
 800c85c:	4613      	mov	r3, r2
 800c85e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c862:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c866:	d308      	bcc.n	800c87a <UART_SetConfig+0x79a>
 800c868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c86a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c86e:	d204      	bcs.n	800c87a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800c870:	697b      	ldr	r3, [r7, #20]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c876:	60da      	str	r2, [r3, #12]
 800c878:	e17c      	b.n	800cb74 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800c87a:	2301      	movs	r3, #1
 800c87c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c880:	e178      	b.n	800cb74 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c882:	697b      	ldr	r3, [r7, #20]
 800c884:	69db      	ldr	r3, [r3, #28]
 800c886:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c88a:	f040 80c5 	bne.w	800ca18 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800c88e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c892:	2b20      	cmp	r3, #32
 800c894:	dc48      	bgt.n	800c928 <UART_SetConfig+0x848>
 800c896:	2b00      	cmp	r3, #0
 800c898:	db7b      	blt.n	800c992 <UART_SetConfig+0x8b2>
 800c89a:	2b20      	cmp	r3, #32
 800c89c:	d879      	bhi.n	800c992 <UART_SetConfig+0x8b2>
 800c89e:	a201      	add	r2, pc, #4	@ (adr r2, 800c8a4 <UART_SetConfig+0x7c4>)
 800c8a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8a4:	0800c92f 	.word	0x0800c92f
 800c8a8:	0800c937 	.word	0x0800c937
 800c8ac:	0800c993 	.word	0x0800c993
 800c8b0:	0800c993 	.word	0x0800c993
 800c8b4:	0800c93f 	.word	0x0800c93f
 800c8b8:	0800c993 	.word	0x0800c993
 800c8bc:	0800c993 	.word	0x0800c993
 800c8c0:	0800c993 	.word	0x0800c993
 800c8c4:	0800c94f 	.word	0x0800c94f
 800c8c8:	0800c993 	.word	0x0800c993
 800c8cc:	0800c993 	.word	0x0800c993
 800c8d0:	0800c993 	.word	0x0800c993
 800c8d4:	0800c993 	.word	0x0800c993
 800c8d8:	0800c993 	.word	0x0800c993
 800c8dc:	0800c993 	.word	0x0800c993
 800c8e0:	0800c993 	.word	0x0800c993
 800c8e4:	0800c95f 	.word	0x0800c95f
 800c8e8:	0800c993 	.word	0x0800c993
 800c8ec:	0800c993 	.word	0x0800c993
 800c8f0:	0800c993 	.word	0x0800c993
 800c8f4:	0800c993 	.word	0x0800c993
 800c8f8:	0800c993 	.word	0x0800c993
 800c8fc:	0800c993 	.word	0x0800c993
 800c900:	0800c993 	.word	0x0800c993
 800c904:	0800c993 	.word	0x0800c993
 800c908:	0800c993 	.word	0x0800c993
 800c90c:	0800c993 	.word	0x0800c993
 800c910:	0800c993 	.word	0x0800c993
 800c914:	0800c993 	.word	0x0800c993
 800c918:	0800c993 	.word	0x0800c993
 800c91c:	0800c993 	.word	0x0800c993
 800c920:	0800c993 	.word	0x0800c993
 800c924:	0800c985 	.word	0x0800c985
 800c928:	2b40      	cmp	r3, #64	@ 0x40
 800c92a:	d02e      	beq.n	800c98a <UART_SetConfig+0x8aa>
 800c92c:	e031      	b.n	800c992 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c92e:	f7f9 fb0d 	bl	8005f4c <HAL_RCC_GetPCLK1Freq>
 800c932:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c934:	e033      	b.n	800c99e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c936:	f7f9 fb1f 	bl	8005f78 <HAL_RCC_GetPCLK2Freq>
 800c93a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c93c:	e02f      	b.n	800c99e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c93e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c942:	4618      	mov	r0, r3
 800c944:	f7fb fb10 	bl	8007f68 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c94a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c94c:	e027      	b.n	800c99e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c94e:	f107 0318 	add.w	r3, r7, #24
 800c952:	4618      	mov	r0, r3
 800c954:	f7fb fc5c 	bl	8008210 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c958:	69fb      	ldr	r3, [r7, #28]
 800c95a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c95c:	e01f      	b.n	800c99e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c95e:	4b2d      	ldr	r3, [pc, #180]	@ (800ca14 <UART_SetConfig+0x934>)
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	f003 0320 	and.w	r3, r3, #32
 800c966:	2b00      	cmp	r3, #0
 800c968:	d009      	beq.n	800c97e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c96a:	4b2a      	ldr	r3, [pc, #168]	@ (800ca14 <UART_SetConfig+0x934>)
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	08db      	lsrs	r3, r3, #3
 800c970:	f003 0303 	and.w	r3, r3, #3
 800c974:	4a24      	ldr	r2, [pc, #144]	@ (800ca08 <UART_SetConfig+0x928>)
 800c976:	fa22 f303 	lsr.w	r3, r2, r3
 800c97a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c97c:	e00f      	b.n	800c99e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c97e:	4b22      	ldr	r3, [pc, #136]	@ (800ca08 <UART_SetConfig+0x928>)
 800c980:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c982:	e00c      	b.n	800c99e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c984:	4b21      	ldr	r3, [pc, #132]	@ (800ca0c <UART_SetConfig+0x92c>)
 800c986:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c988:	e009      	b.n	800c99e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c98a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c98e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c990:	e005      	b.n	800c99e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c992:	2300      	movs	r3, #0
 800c994:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c996:	2301      	movs	r3, #1
 800c998:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c99c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c99e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	f000 80e7 	beq.w	800cb74 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c9a6:	697b      	ldr	r3, [r7, #20]
 800c9a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9aa:	4a19      	ldr	r2, [pc, #100]	@ (800ca10 <UART_SetConfig+0x930>)
 800c9ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c9b0:	461a      	mov	r2, r3
 800c9b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9b4:	fbb3 f3f2 	udiv	r3, r3, r2
 800c9b8:	005a      	lsls	r2, r3, #1
 800c9ba:	697b      	ldr	r3, [r7, #20]
 800c9bc:	685b      	ldr	r3, [r3, #4]
 800c9be:	085b      	lsrs	r3, r3, #1
 800c9c0:	441a      	add	r2, r3
 800c9c2:	697b      	ldr	r3, [r7, #20]
 800c9c4:	685b      	ldr	r3, [r3, #4]
 800c9c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9ca:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c9cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9ce:	2b0f      	cmp	r3, #15
 800c9d0:	d916      	bls.n	800ca00 <UART_SetConfig+0x920>
 800c9d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c9d8:	d212      	bcs.n	800ca00 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c9da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9dc:	b29b      	uxth	r3, r3
 800c9de:	f023 030f 	bic.w	r3, r3, #15
 800c9e2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c9e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9e6:	085b      	lsrs	r3, r3, #1
 800c9e8:	b29b      	uxth	r3, r3
 800c9ea:	f003 0307 	and.w	r3, r3, #7
 800c9ee:	b29a      	uxth	r2, r3
 800c9f0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c9f2:	4313      	orrs	r3, r2
 800c9f4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800c9f6:	697b      	ldr	r3, [r7, #20]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800c9fc:	60da      	str	r2, [r3, #12]
 800c9fe:	e0b9      	b.n	800cb74 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ca00:	2301      	movs	r3, #1
 800ca02:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ca06:	e0b5      	b.n	800cb74 <UART_SetConfig+0xa94>
 800ca08:	03d09000 	.word	0x03d09000
 800ca0c:	003d0900 	.word	0x003d0900
 800ca10:	08017748 	.word	0x08017748
 800ca14:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800ca18:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ca1c:	2b20      	cmp	r3, #32
 800ca1e:	dc49      	bgt.n	800cab4 <UART_SetConfig+0x9d4>
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	db7c      	blt.n	800cb1e <UART_SetConfig+0xa3e>
 800ca24:	2b20      	cmp	r3, #32
 800ca26:	d87a      	bhi.n	800cb1e <UART_SetConfig+0xa3e>
 800ca28:	a201      	add	r2, pc, #4	@ (adr r2, 800ca30 <UART_SetConfig+0x950>)
 800ca2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca2e:	bf00      	nop
 800ca30:	0800cabb 	.word	0x0800cabb
 800ca34:	0800cac3 	.word	0x0800cac3
 800ca38:	0800cb1f 	.word	0x0800cb1f
 800ca3c:	0800cb1f 	.word	0x0800cb1f
 800ca40:	0800cacb 	.word	0x0800cacb
 800ca44:	0800cb1f 	.word	0x0800cb1f
 800ca48:	0800cb1f 	.word	0x0800cb1f
 800ca4c:	0800cb1f 	.word	0x0800cb1f
 800ca50:	0800cadb 	.word	0x0800cadb
 800ca54:	0800cb1f 	.word	0x0800cb1f
 800ca58:	0800cb1f 	.word	0x0800cb1f
 800ca5c:	0800cb1f 	.word	0x0800cb1f
 800ca60:	0800cb1f 	.word	0x0800cb1f
 800ca64:	0800cb1f 	.word	0x0800cb1f
 800ca68:	0800cb1f 	.word	0x0800cb1f
 800ca6c:	0800cb1f 	.word	0x0800cb1f
 800ca70:	0800caeb 	.word	0x0800caeb
 800ca74:	0800cb1f 	.word	0x0800cb1f
 800ca78:	0800cb1f 	.word	0x0800cb1f
 800ca7c:	0800cb1f 	.word	0x0800cb1f
 800ca80:	0800cb1f 	.word	0x0800cb1f
 800ca84:	0800cb1f 	.word	0x0800cb1f
 800ca88:	0800cb1f 	.word	0x0800cb1f
 800ca8c:	0800cb1f 	.word	0x0800cb1f
 800ca90:	0800cb1f 	.word	0x0800cb1f
 800ca94:	0800cb1f 	.word	0x0800cb1f
 800ca98:	0800cb1f 	.word	0x0800cb1f
 800ca9c:	0800cb1f 	.word	0x0800cb1f
 800caa0:	0800cb1f 	.word	0x0800cb1f
 800caa4:	0800cb1f 	.word	0x0800cb1f
 800caa8:	0800cb1f 	.word	0x0800cb1f
 800caac:	0800cb1f 	.word	0x0800cb1f
 800cab0:	0800cb11 	.word	0x0800cb11
 800cab4:	2b40      	cmp	r3, #64	@ 0x40
 800cab6:	d02e      	beq.n	800cb16 <UART_SetConfig+0xa36>
 800cab8:	e031      	b.n	800cb1e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800caba:	f7f9 fa47 	bl	8005f4c <HAL_RCC_GetPCLK1Freq>
 800cabe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800cac0:	e033      	b.n	800cb2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cac2:	f7f9 fa59 	bl	8005f78 <HAL_RCC_GetPCLK2Freq>
 800cac6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800cac8:	e02f      	b.n	800cb2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800caca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cace:	4618      	mov	r0, r3
 800cad0:	f7fb fa4a 	bl	8007f68 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cad8:	e027      	b.n	800cb2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cada:	f107 0318 	add.w	r3, r7, #24
 800cade:	4618      	mov	r0, r3
 800cae0:	f7fb fb96 	bl	8008210 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cae4:	69fb      	ldr	r3, [r7, #28]
 800cae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cae8:	e01f      	b.n	800cb2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800caea:	4b2d      	ldr	r3, [pc, #180]	@ (800cba0 <UART_SetConfig+0xac0>)
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	f003 0320 	and.w	r3, r3, #32
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d009      	beq.n	800cb0a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800caf6:	4b2a      	ldr	r3, [pc, #168]	@ (800cba0 <UART_SetConfig+0xac0>)
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	08db      	lsrs	r3, r3, #3
 800cafc:	f003 0303 	and.w	r3, r3, #3
 800cb00:	4a28      	ldr	r2, [pc, #160]	@ (800cba4 <UART_SetConfig+0xac4>)
 800cb02:	fa22 f303 	lsr.w	r3, r2, r3
 800cb06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cb08:	e00f      	b.n	800cb2a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800cb0a:	4b26      	ldr	r3, [pc, #152]	@ (800cba4 <UART_SetConfig+0xac4>)
 800cb0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cb0e:	e00c      	b.n	800cb2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cb10:	4b25      	ldr	r3, [pc, #148]	@ (800cba8 <UART_SetConfig+0xac8>)
 800cb12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cb14:	e009      	b.n	800cb2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cb16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cb1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cb1c:	e005      	b.n	800cb2a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800cb1e:	2300      	movs	r3, #0
 800cb20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800cb22:	2301      	movs	r3, #1
 800cb24:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800cb28:	bf00      	nop
    }

    if (pclk != 0U)
 800cb2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d021      	beq.n	800cb74 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cb30:	697b      	ldr	r3, [r7, #20]
 800cb32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb34:	4a1d      	ldr	r2, [pc, #116]	@ (800cbac <UART_SetConfig+0xacc>)
 800cb36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cb3a:	461a      	mov	r2, r3
 800cb3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb3e:	fbb3 f2f2 	udiv	r2, r3, r2
 800cb42:	697b      	ldr	r3, [r7, #20]
 800cb44:	685b      	ldr	r3, [r3, #4]
 800cb46:	085b      	lsrs	r3, r3, #1
 800cb48:	441a      	add	r2, r3
 800cb4a:	697b      	ldr	r3, [r7, #20]
 800cb4c:	685b      	ldr	r3, [r3, #4]
 800cb4e:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb52:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cb54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb56:	2b0f      	cmp	r3, #15
 800cb58:	d909      	bls.n	800cb6e <UART_SetConfig+0xa8e>
 800cb5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cb60:	d205      	bcs.n	800cb6e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cb62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb64:	b29a      	uxth	r2, r3
 800cb66:	697b      	ldr	r3, [r7, #20]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	60da      	str	r2, [r3, #12]
 800cb6c:	e002      	b.n	800cb74 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800cb6e:	2301      	movs	r3, #1
 800cb70:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cb74:	697b      	ldr	r3, [r7, #20]
 800cb76:	2201      	movs	r2, #1
 800cb78:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800cb7c:	697b      	ldr	r3, [r7, #20]
 800cb7e:	2201      	movs	r2, #1
 800cb80:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cb84:	697b      	ldr	r3, [r7, #20]
 800cb86:	2200      	movs	r2, #0
 800cb88:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800cb8a:	697b      	ldr	r3, [r7, #20]
 800cb8c:	2200      	movs	r2, #0
 800cb8e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800cb90:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800cb94:	4618      	mov	r0, r3
 800cb96:	3748      	adds	r7, #72	@ 0x48
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cb9e:	bf00      	nop
 800cba0:	58024400 	.word	0x58024400
 800cba4:	03d09000 	.word	0x03d09000
 800cba8:	003d0900 	.word	0x003d0900
 800cbac:	08017748 	.word	0x08017748

0800cbb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cbb0:	b480      	push	{r7}
 800cbb2:	b083      	sub	sp, #12
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbbc:	f003 0301 	and.w	r3, r3, #1
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d00a      	beq.n	800cbda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	685b      	ldr	r3, [r3, #4]
 800cbca:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	430a      	orrs	r2, r1
 800cbd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbde:	f003 0302 	and.w	r3, r3, #2
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d00a      	beq.n	800cbfc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	685b      	ldr	r3, [r3, #4]
 800cbec:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	430a      	orrs	r2, r1
 800cbfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc00:	f003 0304 	and.w	r3, r3, #4
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d00a      	beq.n	800cc1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	685b      	ldr	r3, [r3, #4]
 800cc0e:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	430a      	orrs	r2, r1
 800cc1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc22:	f003 0308 	and.w	r3, r3, #8
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d00a      	beq.n	800cc40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	685b      	ldr	r3, [r3, #4]
 800cc30:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	430a      	orrs	r2, r1
 800cc3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc44:	f003 0310 	and.w	r3, r3, #16
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d00a      	beq.n	800cc62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	689b      	ldr	r3, [r3, #8]
 800cc52:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	430a      	orrs	r2, r1
 800cc60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc66:	f003 0320 	and.w	r3, r3, #32
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d00a      	beq.n	800cc84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	689b      	ldr	r3, [r3, #8]
 800cc74:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	430a      	orrs	r2, r1
 800cc82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d01a      	beq.n	800ccc6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	685b      	ldr	r3, [r3, #4]
 800cc96:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	430a      	orrs	r2, r1
 800cca4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ccaa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ccae:	d10a      	bne.n	800ccc6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	685b      	ldr	r3, [r3, #4]
 800ccb6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	430a      	orrs	r2, r1
 800ccc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ccca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d00a      	beq.n	800cce8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	685b      	ldr	r3, [r3, #4]
 800ccd8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	430a      	orrs	r2, r1
 800cce6:	605a      	str	r2, [r3, #4]
  }
}
 800cce8:	bf00      	nop
 800ccea:	370c      	adds	r7, #12
 800ccec:	46bd      	mov	sp, r7
 800ccee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf2:	4770      	bx	lr

0800ccf4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	b098      	sub	sp, #96	@ 0x60
 800ccf8:	af02      	add	r7, sp, #8
 800ccfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	2200      	movs	r2, #0
 800cd00:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cd04:	f7f7 f84e 	bl	8003da4 <HAL_GetTick>
 800cd08:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	f003 0308 	and.w	r3, r3, #8
 800cd14:	2b08      	cmp	r3, #8
 800cd16:	d12f      	bne.n	800cd78 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cd18:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cd1c:	9300      	str	r3, [sp, #0]
 800cd1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd20:	2200      	movs	r2, #0
 800cd22:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800cd26:	6878      	ldr	r0, [r7, #4]
 800cd28:	f000 f88e 	bl	800ce48 <UART_WaitOnFlagUntilTimeout>
 800cd2c:	4603      	mov	r3, r0
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d022      	beq.n	800cd78 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd3a:	e853 3f00 	ldrex	r3, [r3]
 800cd3e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cd40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cd46:	653b      	str	r3, [r7, #80]	@ 0x50
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	461a      	mov	r2, r3
 800cd4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd50:	647b      	str	r3, [r7, #68]	@ 0x44
 800cd52:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd54:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cd56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cd58:	e841 2300 	strex	r3, r2, [r1]
 800cd5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cd5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d1e6      	bne.n	800cd32 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	2220      	movs	r2, #32
 800cd68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	2200      	movs	r2, #0
 800cd70:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cd74:	2303      	movs	r3, #3
 800cd76:	e063      	b.n	800ce40 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	f003 0304 	and.w	r3, r3, #4
 800cd82:	2b04      	cmp	r3, #4
 800cd84:	d149      	bne.n	800ce1a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cd86:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cd8a:	9300      	str	r3, [sp, #0]
 800cd8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd8e:	2200      	movs	r2, #0
 800cd90:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800cd94:	6878      	ldr	r0, [r7, #4]
 800cd96:	f000 f857 	bl	800ce48 <UART_WaitOnFlagUntilTimeout>
 800cd9a:	4603      	mov	r3, r0
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d03c      	beq.n	800ce1a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cda6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cda8:	e853 3f00 	ldrex	r3, [r3]
 800cdac:	623b      	str	r3, [r7, #32]
   return(result);
 800cdae:	6a3b      	ldr	r3, [r7, #32]
 800cdb0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cdb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	461a      	mov	r2, r3
 800cdbc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cdbe:	633b      	str	r3, [r7, #48]	@ 0x30
 800cdc0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdc2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cdc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cdc6:	e841 2300 	strex	r3, r2, [r1]
 800cdca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cdcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d1e6      	bne.n	800cda0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	3308      	adds	r3, #8
 800cdd8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdda:	693b      	ldr	r3, [r7, #16]
 800cddc:	e853 3f00 	ldrex	r3, [r3]
 800cde0:	60fb      	str	r3, [r7, #12]
   return(result);
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	f023 0301 	bic.w	r3, r3, #1
 800cde8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	3308      	adds	r3, #8
 800cdf0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cdf2:	61fa      	str	r2, [r7, #28]
 800cdf4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdf6:	69b9      	ldr	r1, [r7, #24]
 800cdf8:	69fa      	ldr	r2, [r7, #28]
 800cdfa:	e841 2300 	strex	r3, r2, [r1]
 800cdfe:	617b      	str	r3, [r7, #20]
   return(result);
 800ce00:	697b      	ldr	r3, [r7, #20]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d1e5      	bne.n	800cdd2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	2220      	movs	r2, #32
 800ce0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	2200      	movs	r2, #0
 800ce12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ce16:	2303      	movs	r3, #3
 800ce18:	e012      	b.n	800ce40 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	2220      	movs	r2, #32
 800ce1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	2220      	movs	r2, #32
 800ce26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	2200      	movs	r2, #0
 800ce2e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	2200      	movs	r2, #0
 800ce34:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	2200      	movs	r2, #0
 800ce3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ce3e:	2300      	movs	r3, #0
}
 800ce40:	4618      	mov	r0, r3
 800ce42:	3758      	adds	r7, #88	@ 0x58
 800ce44:	46bd      	mov	sp, r7
 800ce46:	bd80      	pop	{r7, pc}

0800ce48 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b084      	sub	sp, #16
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	60f8      	str	r0, [r7, #12]
 800ce50:	60b9      	str	r1, [r7, #8]
 800ce52:	603b      	str	r3, [r7, #0]
 800ce54:	4613      	mov	r3, r2
 800ce56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ce58:	e049      	b.n	800ceee <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ce5a:	69bb      	ldr	r3, [r7, #24]
 800ce5c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ce60:	d045      	beq.n	800ceee <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ce62:	f7f6 ff9f 	bl	8003da4 <HAL_GetTick>
 800ce66:	4602      	mov	r2, r0
 800ce68:	683b      	ldr	r3, [r7, #0]
 800ce6a:	1ad3      	subs	r3, r2, r3
 800ce6c:	69ba      	ldr	r2, [r7, #24]
 800ce6e:	429a      	cmp	r2, r3
 800ce70:	d302      	bcc.n	800ce78 <UART_WaitOnFlagUntilTimeout+0x30>
 800ce72:	69bb      	ldr	r3, [r7, #24]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d101      	bne.n	800ce7c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ce78:	2303      	movs	r3, #3
 800ce7a:	e048      	b.n	800cf0e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	f003 0304 	and.w	r3, r3, #4
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d031      	beq.n	800ceee <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	69db      	ldr	r3, [r3, #28]
 800ce90:	f003 0308 	and.w	r3, r3, #8
 800ce94:	2b08      	cmp	r3, #8
 800ce96:	d110      	bne.n	800ceba <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	2208      	movs	r2, #8
 800ce9e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800cea0:	68f8      	ldr	r0, [r7, #12]
 800cea2:	f000 f95b 	bl	800d15c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	2208      	movs	r2, #8
 800ceaa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

           return HAL_ERROR;
 800ceb6:	2301      	movs	r3, #1
 800ceb8:	e029      	b.n	800cf0e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	69db      	ldr	r3, [r3, #28]
 800cec0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cec4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cec8:	d111      	bne.n	800ceee <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ced2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ced4:	68f8      	ldr	r0, [r7, #12]
 800ced6:	f000 f941 	bl	800d15c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	2220      	movs	r2, #32
 800cede:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	2200      	movs	r2, #0
 800cee6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800ceea:	2303      	movs	r3, #3
 800ceec:	e00f      	b.n	800cf0e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	69da      	ldr	r2, [r3, #28]
 800cef4:	68bb      	ldr	r3, [r7, #8]
 800cef6:	4013      	ands	r3, r2
 800cef8:	68ba      	ldr	r2, [r7, #8]
 800cefa:	429a      	cmp	r2, r3
 800cefc:	bf0c      	ite	eq
 800cefe:	2301      	moveq	r3, #1
 800cf00:	2300      	movne	r3, #0
 800cf02:	b2db      	uxtb	r3, r3
 800cf04:	461a      	mov	r2, r3
 800cf06:	79fb      	ldrb	r3, [r7, #7]
 800cf08:	429a      	cmp	r2, r3
 800cf0a:	d0a6      	beq.n	800ce5a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cf0c:	2300      	movs	r3, #0
}
 800cf0e:	4618      	mov	r0, r3
 800cf10:	3710      	adds	r7, #16
 800cf12:	46bd      	mov	sp, r7
 800cf14:	bd80      	pop	{r7, pc}
	...

0800cf18 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cf18:	b480      	push	{r7}
 800cf1a:	b0a3      	sub	sp, #140	@ 0x8c
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	60f8      	str	r0, [r7, #12]
 800cf20:	60b9      	str	r1, [r7, #8]
 800cf22:	4613      	mov	r3, r2
 800cf24:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	68ba      	ldr	r2, [r7, #8]
 800cf2a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	88fa      	ldrh	r2, [r7, #6]
 800cf30:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	88fa      	ldrh	r2, [r7, #6]
 800cf38:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	2200      	movs	r2, #0
 800cf40:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	689b      	ldr	r3, [r3, #8]
 800cf46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cf4a:	d10e      	bne.n	800cf6a <UART_Start_Receive_IT+0x52>
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	691b      	ldr	r3, [r3, #16]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d105      	bne.n	800cf60 <UART_Start_Receive_IT+0x48>
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800cf5a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cf5e:	e02d      	b.n	800cfbc <UART_Start_Receive_IT+0xa4>
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	22ff      	movs	r2, #255	@ 0xff
 800cf64:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cf68:	e028      	b.n	800cfbc <UART_Start_Receive_IT+0xa4>
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	689b      	ldr	r3, [r3, #8]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d10d      	bne.n	800cf8e <UART_Start_Receive_IT+0x76>
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	691b      	ldr	r3, [r3, #16]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d104      	bne.n	800cf84 <UART_Start_Receive_IT+0x6c>
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	22ff      	movs	r2, #255	@ 0xff
 800cf7e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cf82:	e01b      	b.n	800cfbc <UART_Start_Receive_IT+0xa4>
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	227f      	movs	r2, #127	@ 0x7f
 800cf88:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cf8c:	e016      	b.n	800cfbc <UART_Start_Receive_IT+0xa4>
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	689b      	ldr	r3, [r3, #8]
 800cf92:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cf96:	d10d      	bne.n	800cfb4 <UART_Start_Receive_IT+0x9c>
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	691b      	ldr	r3, [r3, #16]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d104      	bne.n	800cfaa <UART_Start_Receive_IT+0x92>
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	227f      	movs	r2, #127	@ 0x7f
 800cfa4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cfa8:	e008      	b.n	800cfbc <UART_Start_Receive_IT+0xa4>
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	223f      	movs	r2, #63	@ 0x3f
 800cfae:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cfb2:	e003      	b.n	800cfbc <UART_Start_Receive_IT+0xa4>
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	2200      	movs	r2, #0
 800cfb8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	2222      	movs	r2, #34	@ 0x22
 800cfc8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	3308      	adds	r3, #8
 800cfd2:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfd4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cfd6:	e853 3f00 	ldrex	r3, [r3]
 800cfda:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800cfdc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cfde:	f043 0301 	orr.w	r3, r3, #1
 800cfe2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	3308      	adds	r3, #8
 800cfec:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800cff0:	673a      	str	r2, [r7, #112]	@ 0x70
 800cff2:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cff4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800cff6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800cff8:	e841 2300 	strex	r3, r2, [r1]
 800cffc:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800cffe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d000:	2b00      	cmp	r3, #0
 800d002:	d1e3      	bne.n	800cfcc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d008:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d00c:	d14f      	bne.n	800d0ae <UART_Start_Receive_IT+0x196>
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d014:	88fa      	ldrh	r2, [r7, #6]
 800d016:	429a      	cmp	r2, r3
 800d018:	d349      	bcc.n	800d0ae <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	689b      	ldr	r3, [r3, #8]
 800d01e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d022:	d107      	bne.n	800d034 <UART_Start_Receive_IT+0x11c>
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	691b      	ldr	r3, [r3, #16]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d103      	bne.n	800d034 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	4a47      	ldr	r2, [pc, #284]	@ (800d14c <UART_Start_Receive_IT+0x234>)
 800d030:	675a      	str	r2, [r3, #116]	@ 0x74
 800d032:	e002      	b.n	800d03a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	4a46      	ldr	r2, [pc, #280]	@ (800d150 <UART_Start_Receive_IT+0x238>)
 800d038:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	691b      	ldr	r3, [r3, #16]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d01a      	beq.n	800d078 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d048:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d04a:	e853 3f00 	ldrex	r3, [r3]
 800d04e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800d050:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d052:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d056:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	461a      	mov	r2, r3
 800d060:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d064:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d066:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d068:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d06a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d06c:	e841 2300 	strex	r3, r2, [r1]
 800d070:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800d072:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d074:	2b00      	cmp	r3, #0
 800d076:	d1e4      	bne.n	800d042 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	3308      	adds	r3, #8
 800d07e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d080:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d082:	e853 3f00 	ldrex	r3, [r3]
 800d086:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d08a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d08e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	3308      	adds	r3, #8
 800d096:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800d098:	64ba      	str	r2, [r7, #72]	@ 0x48
 800d09a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d09c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d09e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d0a0:	e841 2300 	strex	r3, r2, [r1]
 800d0a4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800d0a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d1e5      	bne.n	800d078 <UART_Start_Receive_IT+0x160>
 800d0ac:	e046      	b.n	800d13c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	689b      	ldr	r3, [r3, #8]
 800d0b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d0b6:	d107      	bne.n	800d0c8 <UART_Start_Receive_IT+0x1b0>
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	691b      	ldr	r3, [r3, #16]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d103      	bne.n	800d0c8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	4a24      	ldr	r2, [pc, #144]	@ (800d154 <UART_Start_Receive_IT+0x23c>)
 800d0c4:	675a      	str	r2, [r3, #116]	@ 0x74
 800d0c6:	e002      	b.n	800d0ce <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	4a23      	ldr	r2, [pc, #140]	@ (800d158 <UART_Start_Receive_IT+0x240>)
 800d0cc:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	691b      	ldr	r3, [r3, #16]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d019      	beq.n	800d10a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0de:	e853 3f00 	ldrex	r3, [r3]
 800d0e2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d0e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0e6:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800d0ea:	677b      	str	r3, [r7, #116]	@ 0x74
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	461a      	mov	r2, r3
 800d0f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d0f4:	637b      	str	r3, [r7, #52]	@ 0x34
 800d0f6:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0f8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d0fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d0fc:	e841 2300 	strex	r3, r2, [r1]
 800d100:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800d102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d104:	2b00      	cmp	r3, #0
 800d106:	d1e6      	bne.n	800d0d6 <UART_Start_Receive_IT+0x1be>
 800d108:	e018      	b.n	800d13c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d110:	697b      	ldr	r3, [r7, #20]
 800d112:	e853 3f00 	ldrex	r3, [r3]
 800d116:	613b      	str	r3, [r7, #16]
   return(result);
 800d118:	693b      	ldr	r3, [r7, #16]
 800d11a:	f043 0320 	orr.w	r3, r3, #32
 800d11e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	461a      	mov	r2, r3
 800d126:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d128:	623b      	str	r3, [r7, #32]
 800d12a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d12c:	69f9      	ldr	r1, [r7, #28]
 800d12e:	6a3a      	ldr	r2, [r7, #32]
 800d130:	e841 2300 	strex	r3, r2, [r1]
 800d134:	61bb      	str	r3, [r7, #24]
   return(result);
 800d136:	69bb      	ldr	r3, [r7, #24]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d1e6      	bne.n	800d10a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800d13c:	2300      	movs	r3, #0
}
 800d13e:	4618      	mov	r0, r3
 800d140:	378c      	adds	r7, #140	@ 0x8c
 800d142:	46bd      	mov	sp, r7
 800d144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d148:	4770      	bx	lr
 800d14a:	bf00      	nop
 800d14c:	0800dd09 	.word	0x0800dd09
 800d150:	0800d9a9 	.word	0x0800d9a9
 800d154:	0800d7f1 	.word	0x0800d7f1
 800d158:	0800d639 	.word	0x0800d639

0800d15c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d15c:	b480      	push	{r7}
 800d15e:	b095      	sub	sp, #84	@ 0x54
 800d160:	af00      	add	r7, sp, #0
 800d162:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d16a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d16c:	e853 3f00 	ldrex	r3, [r3]
 800d170:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d174:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d178:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	461a      	mov	r2, r3
 800d180:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d182:	643b      	str	r3, [r7, #64]	@ 0x40
 800d184:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d186:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d188:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d18a:	e841 2300 	strex	r3, r2, [r1]
 800d18e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d192:	2b00      	cmp	r3, #0
 800d194:	d1e6      	bne.n	800d164 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	3308      	adds	r3, #8
 800d19c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d19e:	6a3b      	ldr	r3, [r7, #32]
 800d1a0:	e853 3f00 	ldrex	r3, [r3]
 800d1a4:	61fb      	str	r3, [r7, #28]
   return(result);
 800d1a6:	69fa      	ldr	r2, [r7, #28]
 800d1a8:	4b1e      	ldr	r3, [pc, #120]	@ (800d224 <UART_EndRxTransfer+0xc8>)
 800d1aa:	4013      	ands	r3, r2
 800d1ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	3308      	adds	r3, #8
 800d1b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d1b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d1b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d1bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d1be:	e841 2300 	strex	r3, r2, [r1]
 800d1c2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d1c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d1e5      	bne.n	800d196 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d1ce:	2b01      	cmp	r3, #1
 800d1d0:	d118      	bne.n	800d204 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	e853 3f00 	ldrex	r3, [r3]
 800d1de:	60bb      	str	r3, [r7, #8]
   return(result);
 800d1e0:	68bb      	ldr	r3, [r7, #8]
 800d1e2:	f023 0310 	bic.w	r3, r3, #16
 800d1e6:	647b      	str	r3, [r7, #68]	@ 0x44
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	461a      	mov	r2, r3
 800d1ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d1f0:	61bb      	str	r3, [r7, #24]
 800d1f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1f4:	6979      	ldr	r1, [r7, #20]
 800d1f6:	69ba      	ldr	r2, [r7, #24]
 800d1f8:	e841 2300 	strex	r3, r2, [r1]
 800d1fc:	613b      	str	r3, [r7, #16]
   return(result);
 800d1fe:	693b      	ldr	r3, [r7, #16]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d1e6      	bne.n	800d1d2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	2220      	movs	r2, #32
 800d208:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	2200      	movs	r2, #0
 800d210:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	2200      	movs	r2, #0
 800d216:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d218:	bf00      	nop
 800d21a:	3754      	adds	r7, #84	@ 0x54
 800d21c:	46bd      	mov	sp, r7
 800d21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d222:	4770      	bx	lr
 800d224:	effffffe 	.word	0xeffffffe

0800d228 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d228:	b580      	push	{r7, lr}
 800d22a:	b084      	sub	sp, #16
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d234:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	2200      	movs	r2, #0
 800d23a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	2200      	movs	r2, #0
 800d242:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d246:	68f8      	ldr	r0, [r7, #12]
 800d248:	f7fe fe6c 	bl	800bf24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d24c:	bf00      	nop
 800d24e:	3710      	adds	r7, #16
 800d250:	46bd      	mov	sp, r7
 800d252:	bd80      	pop	{r7, pc}

0800d254 <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800d254:	b580      	push	{r7, lr}
 800d256:	b084      	sub	sp, #16
 800d258:	af00      	add	r7, sp, #0
 800d25a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d260:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	2200      	movs	r2, #0
 800d266:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	220f      	movs	r2, #15
 800d270:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	699a      	ldr	r2, [r3, #24]
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	f042 0208 	orr.w	r2, r2, #8
 800d280:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	2220      	movs	r2, #32
 800d286:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	2200      	movs	r2, #0
 800d28e:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 800d290:	68f8      	ldr	r0, [r7, #12]
 800d292:	f7fe fe51 	bl	800bf38 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d296:	bf00      	nop
 800d298:	3710      	adds	r7, #16
 800d29a:	46bd      	mov	sp, r7
 800d29c:	bd80      	pop	{r7, pc}

0800d29e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d29e:	b480      	push	{r7}
 800d2a0:	b08f      	sub	sp, #60	@ 0x3c
 800d2a2:	af00      	add	r7, sp, #0
 800d2a4:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d2ac:	2b21      	cmp	r3, #33	@ 0x21
 800d2ae:	d14c      	bne.n	800d34a <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d2b6:	b29b      	uxth	r3, r3
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d132      	bne.n	800d322 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2c2:	6a3b      	ldr	r3, [r7, #32]
 800d2c4:	e853 3f00 	ldrex	r3, [r3]
 800d2c8:	61fb      	str	r3, [r7, #28]
   return(result);
 800d2ca:	69fb      	ldr	r3, [r7, #28]
 800d2cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d2d0:	637b      	str	r3, [r7, #52]	@ 0x34
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	461a      	mov	r2, r3
 800d2d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d2da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d2dc:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d2e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d2e2:	e841 2300 	strex	r3, r2, [r1]
 800d2e6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d2e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d1e6      	bne.n	800d2bc <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	e853 3f00 	ldrex	r3, [r3]
 800d2fa:	60bb      	str	r3, [r7, #8]
   return(result);
 800d2fc:	68bb      	ldr	r3, [r7, #8]
 800d2fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d302:	633b      	str	r3, [r7, #48]	@ 0x30
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	461a      	mov	r2, r3
 800d30a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d30c:	61bb      	str	r3, [r7, #24]
 800d30e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d310:	6979      	ldr	r1, [r7, #20]
 800d312:	69ba      	ldr	r2, [r7, #24]
 800d314:	e841 2300 	strex	r3, r2, [r1]
 800d318:	613b      	str	r3, [r7, #16]
   return(result);
 800d31a:	693b      	ldr	r3, [r7, #16]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d1e6      	bne.n	800d2ee <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800d320:	e013      	b.n	800d34a <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d326:	781a      	ldrb	r2, [r3, #0]
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d332:	1c5a      	adds	r2, r3, #1
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d33e:	b29b      	uxth	r3, r3
 800d340:	3b01      	subs	r3, #1
 800d342:	b29a      	uxth	r2, r3
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800d34a:	bf00      	nop
 800d34c:	373c      	adds	r7, #60	@ 0x3c
 800d34e:	46bd      	mov	sp, r7
 800d350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d354:	4770      	bx	lr

0800d356 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d356:	b480      	push	{r7}
 800d358:	b091      	sub	sp, #68	@ 0x44
 800d35a:	af00      	add	r7, sp, #0
 800d35c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d364:	2b21      	cmp	r3, #33	@ 0x21
 800d366:	d151      	bne.n	800d40c <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d36e:	b29b      	uxth	r3, r3
 800d370:	2b00      	cmp	r3, #0
 800d372:	d132      	bne.n	800d3da <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d37a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d37c:	e853 3f00 	ldrex	r3, [r3]
 800d380:	623b      	str	r3, [r7, #32]
   return(result);
 800d382:	6a3b      	ldr	r3, [r7, #32]
 800d384:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d388:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	461a      	mov	r2, r3
 800d390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d392:	633b      	str	r3, [r7, #48]	@ 0x30
 800d394:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d396:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d398:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d39a:	e841 2300 	strex	r3, r2, [r1]
 800d39e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d3a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d1e6      	bne.n	800d374 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3ac:	693b      	ldr	r3, [r7, #16]
 800d3ae:	e853 3f00 	ldrex	r3, [r3]
 800d3b2:	60fb      	str	r3, [r7, #12]
   return(result);
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d3ba:	637b      	str	r3, [r7, #52]	@ 0x34
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	461a      	mov	r2, r3
 800d3c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d3c4:	61fb      	str	r3, [r7, #28]
 800d3c6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3c8:	69b9      	ldr	r1, [r7, #24]
 800d3ca:	69fa      	ldr	r2, [r7, #28]
 800d3cc:	e841 2300 	strex	r3, r2, [r1]
 800d3d0:	617b      	str	r3, [r7, #20]
   return(result);
 800d3d2:	697b      	ldr	r3, [r7, #20]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d1e6      	bne.n	800d3a6 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800d3d8:	e018      	b.n	800d40c <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d3de:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800d3e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d3e2:	881b      	ldrh	r3, [r3, #0]
 800d3e4:	461a      	mov	r2, r3
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d3ee:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d3f4:	1c9a      	adds	r2, r3, #2
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d400:	b29b      	uxth	r3, r3
 800d402:	3b01      	subs	r3, #1
 800d404:	b29a      	uxth	r2, r3
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800d40c:	bf00      	nop
 800d40e:	3744      	adds	r7, #68	@ 0x44
 800d410:	46bd      	mov	sp, r7
 800d412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d416:	4770      	bx	lr

0800d418 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d418:	b480      	push	{r7}
 800d41a:	b091      	sub	sp, #68	@ 0x44
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d426:	2b21      	cmp	r3, #33	@ 0x21
 800d428:	d160      	bne.n	800d4ec <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d430:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800d432:	e057      	b.n	800d4e4 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d43a:	b29b      	uxth	r3, r3
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d133      	bne.n	800d4a8 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	3308      	adds	r3, #8
 800d446:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d44a:	e853 3f00 	ldrex	r3, [r3]
 800d44e:	623b      	str	r3, [r7, #32]
   return(result);
 800d450:	6a3b      	ldr	r3, [r7, #32]
 800d452:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800d456:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	3308      	adds	r3, #8
 800d45e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d460:	633a      	str	r2, [r7, #48]	@ 0x30
 800d462:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d464:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d466:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d468:	e841 2300 	strex	r3, r2, [r1]
 800d46c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d46e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d470:	2b00      	cmp	r3, #0
 800d472:	d1e5      	bne.n	800d440 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d47a:	693b      	ldr	r3, [r7, #16]
 800d47c:	e853 3f00 	ldrex	r3, [r3]
 800d480:	60fb      	str	r3, [r7, #12]
   return(result);
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d488:	637b      	str	r3, [r7, #52]	@ 0x34
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	461a      	mov	r2, r3
 800d490:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d492:	61fb      	str	r3, [r7, #28]
 800d494:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d496:	69b9      	ldr	r1, [r7, #24]
 800d498:	69fa      	ldr	r2, [r7, #28]
 800d49a:	e841 2300 	strex	r3, r2, [r1]
 800d49e:	617b      	str	r3, [r7, #20]
   return(result);
 800d4a0:	697b      	ldr	r3, [r7, #20]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d1e6      	bne.n	800d474 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800d4a6:	e021      	b.n	800d4ec <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	69db      	ldr	r3, [r3, #28]
 800d4ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d013      	beq.n	800d4de <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d4ba:	781a      	ldrb	r2, [r3, #0]
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d4c6:	1c5a      	adds	r2, r3, #1
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d4d2:	b29b      	uxth	r3, r3
 800d4d4:	3b01      	subs	r3, #1
 800d4d6:	b29a      	uxth	r2, r3
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800d4de:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d4e0:	3b01      	subs	r3, #1
 800d4e2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800d4e4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d1a4      	bne.n	800d434 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800d4ea:	e7ff      	b.n	800d4ec <UART_TxISR_8BIT_FIFOEN+0xd4>
 800d4ec:	bf00      	nop
 800d4ee:	3744      	adds	r7, #68	@ 0x44
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f6:	4770      	bx	lr

0800d4f8 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d4f8:	b480      	push	{r7}
 800d4fa:	b091      	sub	sp, #68	@ 0x44
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d506:	2b21      	cmp	r3, #33	@ 0x21
 800d508:	d165      	bne.n	800d5d6 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d510:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800d512:	e05c      	b.n	800d5ce <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d51a:	b29b      	uxth	r3, r3
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d133      	bne.n	800d588 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	3308      	adds	r3, #8
 800d526:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d528:	6a3b      	ldr	r3, [r7, #32]
 800d52a:	e853 3f00 	ldrex	r3, [r3]
 800d52e:	61fb      	str	r3, [r7, #28]
   return(result);
 800d530:	69fb      	ldr	r3, [r7, #28]
 800d532:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800d536:	637b      	str	r3, [r7, #52]	@ 0x34
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	3308      	adds	r3, #8
 800d53e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d540:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d542:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d544:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d546:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d548:	e841 2300 	strex	r3, r2, [r1]
 800d54c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d54e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d550:	2b00      	cmp	r3, #0
 800d552:	d1e5      	bne.n	800d520 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	e853 3f00 	ldrex	r3, [r3]
 800d560:	60bb      	str	r3, [r7, #8]
   return(result);
 800d562:	68bb      	ldr	r3, [r7, #8]
 800d564:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d568:	633b      	str	r3, [r7, #48]	@ 0x30
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	461a      	mov	r2, r3
 800d570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d572:	61bb      	str	r3, [r7, #24]
 800d574:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d576:	6979      	ldr	r1, [r7, #20]
 800d578:	69ba      	ldr	r2, [r7, #24]
 800d57a:	e841 2300 	strex	r3, r2, [r1]
 800d57e:	613b      	str	r3, [r7, #16]
   return(result);
 800d580:	693b      	ldr	r3, [r7, #16]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d1e6      	bne.n	800d554 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800d586:	e026      	b.n	800d5d6 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	69db      	ldr	r3, [r3, #28]
 800d58e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d592:	2b00      	cmp	r3, #0
 800d594:	d018      	beq.n	800d5c8 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d59a:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800d59c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d59e:	881b      	ldrh	r3, [r3, #0]
 800d5a0:	461a      	mov	r2, r3
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d5aa:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d5b0:	1c9a      	adds	r2, r3, #2
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d5bc:	b29b      	uxth	r3, r3
 800d5be:	3b01      	subs	r3, #1
 800d5c0:	b29a      	uxth	r2, r3
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800d5c8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d5ca:	3b01      	subs	r3, #1
 800d5cc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800d5ce:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d19f      	bne.n	800d514 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800d5d4:	e7ff      	b.n	800d5d6 <UART_TxISR_16BIT_FIFOEN+0xde>
 800d5d6:	bf00      	nop
 800d5d8:	3744      	adds	r7, #68	@ 0x44
 800d5da:	46bd      	mov	sp, r7
 800d5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e0:	4770      	bx	lr

0800d5e2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d5e2:	b580      	push	{r7, lr}
 800d5e4:	b088      	sub	sp, #32
 800d5e6:	af00      	add	r7, sp, #0
 800d5e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	e853 3f00 	ldrex	r3, [r3]
 800d5f6:	60bb      	str	r3, [r7, #8]
   return(result);
 800d5f8:	68bb      	ldr	r3, [r7, #8]
 800d5fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d5fe:	61fb      	str	r3, [r7, #28]
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	461a      	mov	r2, r3
 800d606:	69fb      	ldr	r3, [r7, #28]
 800d608:	61bb      	str	r3, [r7, #24]
 800d60a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d60c:	6979      	ldr	r1, [r7, #20]
 800d60e:	69ba      	ldr	r2, [r7, #24]
 800d610:	e841 2300 	strex	r3, r2, [r1]
 800d614:	613b      	str	r3, [r7, #16]
   return(result);
 800d616:	693b      	ldr	r3, [r7, #16]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d1e6      	bne.n	800d5ea <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	2220      	movs	r2, #32
 800d620:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	2200      	movs	r2, #0
 800d628:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d62a:	6878      	ldr	r0, [r7, #4]
 800d62c:	f7f6 f9fc 	bl	8003a28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d630:	bf00      	nop
 800d632:	3720      	adds	r7, #32
 800d634:	46bd      	mov	sp, r7
 800d636:	bd80      	pop	{r7, pc}

0800d638 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d638:	b580      	push	{r7, lr}
 800d63a:	b09c      	sub	sp, #112	@ 0x70
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d646:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d650:	2b22      	cmp	r3, #34	@ 0x22
 800d652:	f040 80be 	bne.w	800d7d2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d65c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d660:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800d664:	b2d9      	uxtb	r1, r3
 800d666:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800d66a:	b2da      	uxtb	r2, r3
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d670:	400a      	ands	r2, r1
 800d672:	b2d2      	uxtb	r2, r2
 800d674:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d67a:	1c5a      	adds	r2, r3, #1
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d686:	b29b      	uxth	r3, r3
 800d688:	3b01      	subs	r3, #1
 800d68a:	b29a      	uxth	r2, r3
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d698:	b29b      	uxth	r3, r3
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	f040 80a1 	bne.w	800d7e2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d6a8:	e853 3f00 	ldrex	r3, [r3]
 800d6ac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d6ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d6b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d6b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	461a      	mov	r2, r3
 800d6bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d6be:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d6c0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6c2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d6c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d6c6:	e841 2300 	strex	r3, r2, [r1]
 800d6ca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d6cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d1e6      	bne.n	800d6a0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	3308      	adds	r3, #8
 800d6d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6dc:	e853 3f00 	ldrex	r3, [r3]
 800d6e0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d6e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d6e4:	f023 0301 	bic.w	r3, r3, #1
 800d6e8:	667b      	str	r3, [r7, #100]	@ 0x64
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	3308      	adds	r3, #8
 800d6f0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d6f2:	647a      	str	r2, [r7, #68]	@ 0x44
 800d6f4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6f6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d6f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d6fa:	e841 2300 	strex	r3, r2, [r1]
 800d6fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d700:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d702:	2b00      	cmp	r3, #0
 800d704:	d1e5      	bne.n	800d6d2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	2220      	movs	r2, #32
 800d70a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	2200      	movs	r2, #0
 800d712:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	2200      	movs	r2, #0
 800d718:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	4a33      	ldr	r2, [pc, #204]	@ (800d7ec <UART_RxISR_8BIT+0x1b4>)
 800d720:	4293      	cmp	r3, r2
 800d722:	d01f      	beq.n	800d764 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	685b      	ldr	r3, [r3, #4]
 800d72a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d018      	beq.n	800d764 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d73a:	e853 3f00 	ldrex	r3, [r3]
 800d73e:	623b      	str	r3, [r7, #32]
   return(result);
 800d740:	6a3b      	ldr	r3, [r7, #32]
 800d742:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d746:	663b      	str	r3, [r7, #96]	@ 0x60
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	461a      	mov	r2, r3
 800d74e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d750:	633b      	str	r3, [r7, #48]	@ 0x30
 800d752:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d754:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d756:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d758:	e841 2300 	strex	r3, r2, [r1]
 800d75c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d75e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d760:	2b00      	cmp	r3, #0
 800d762:	d1e6      	bne.n	800d732 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d768:	2b01      	cmp	r3, #1
 800d76a:	d12e      	bne.n	800d7ca <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	2200      	movs	r2, #0
 800d770:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d778:	693b      	ldr	r3, [r7, #16]
 800d77a:	e853 3f00 	ldrex	r3, [r3]
 800d77e:	60fb      	str	r3, [r7, #12]
   return(result);
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	f023 0310 	bic.w	r3, r3, #16
 800d786:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	461a      	mov	r2, r3
 800d78e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d790:	61fb      	str	r3, [r7, #28]
 800d792:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d794:	69b9      	ldr	r1, [r7, #24]
 800d796:	69fa      	ldr	r2, [r7, #28]
 800d798:	e841 2300 	strex	r3, r2, [r1]
 800d79c:	617b      	str	r3, [r7, #20]
   return(result);
 800d79e:	697b      	ldr	r3, [r7, #20]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d1e6      	bne.n	800d772 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	69db      	ldr	r3, [r3, #28]
 800d7aa:	f003 0310 	and.w	r3, r3, #16
 800d7ae:	2b10      	cmp	r3, #16
 800d7b0:	d103      	bne.n	800d7ba <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	2210      	movs	r2, #16
 800d7b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d7c0:	4619      	mov	r1, r3
 800d7c2:	6878      	ldr	r0, [r7, #4]
 800d7c4:	f7fe fbc2 	bl	800bf4c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d7c8:	e00b      	b.n	800d7e2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800d7ca:	6878      	ldr	r0, [r7, #4]
 800d7cc:	f7f6 f96a 	bl	8003aa4 <HAL_UART_RxCpltCallback>
}
 800d7d0:	e007      	b.n	800d7e2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	699a      	ldr	r2, [r3, #24]
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	f042 0208 	orr.w	r2, r2, #8
 800d7e0:	619a      	str	r2, [r3, #24]
}
 800d7e2:	bf00      	nop
 800d7e4:	3770      	adds	r7, #112	@ 0x70
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	bd80      	pop	{r7, pc}
 800d7ea:	bf00      	nop
 800d7ec:	58000c00 	.word	0x58000c00

0800d7f0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b09c      	sub	sp, #112	@ 0x70
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d7fe:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d808:	2b22      	cmp	r3, #34	@ 0x22
 800d80a:	f040 80be 	bne.w	800d98a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d814:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d81c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800d81e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800d822:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800d826:	4013      	ands	r3, r2
 800d828:	b29a      	uxth	r2, r3
 800d82a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d82c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d832:	1c9a      	adds	r2, r3, #2
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d83e:	b29b      	uxth	r3, r3
 800d840:	3b01      	subs	r3, #1
 800d842:	b29a      	uxth	r2, r3
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d850:	b29b      	uxth	r3, r3
 800d852:	2b00      	cmp	r3, #0
 800d854:	f040 80a1 	bne.w	800d99a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d85e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d860:	e853 3f00 	ldrex	r3, [r3]
 800d864:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800d866:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d868:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d86c:	667b      	str	r3, [r7, #100]	@ 0x64
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	461a      	mov	r2, r3
 800d874:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d876:	657b      	str	r3, [r7, #84]	@ 0x54
 800d878:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d87a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d87c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d87e:	e841 2300 	strex	r3, r2, [r1]
 800d882:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800d884:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d886:	2b00      	cmp	r3, #0
 800d888:	d1e6      	bne.n	800d858 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	3308      	adds	r3, #8
 800d890:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d892:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d894:	e853 3f00 	ldrex	r3, [r3]
 800d898:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d89a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d89c:	f023 0301 	bic.w	r3, r3, #1
 800d8a0:	663b      	str	r3, [r7, #96]	@ 0x60
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	3308      	adds	r3, #8
 800d8a8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d8aa:	643a      	str	r2, [r7, #64]	@ 0x40
 800d8ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8ae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d8b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d8b2:	e841 2300 	strex	r3, r2, [r1]
 800d8b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d8b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d1e5      	bne.n	800d88a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	2220      	movs	r2, #32
 800d8c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	2200      	movs	r2, #0
 800d8ca:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	2200      	movs	r2, #0
 800d8d0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	4a33      	ldr	r2, [pc, #204]	@ (800d9a4 <UART_RxISR_16BIT+0x1b4>)
 800d8d8:	4293      	cmp	r3, r2
 800d8da:	d01f      	beq.n	800d91c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	685b      	ldr	r3, [r3, #4]
 800d8e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d018      	beq.n	800d91c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8f0:	6a3b      	ldr	r3, [r7, #32]
 800d8f2:	e853 3f00 	ldrex	r3, [r3]
 800d8f6:	61fb      	str	r3, [r7, #28]
   return(result);
 800d8f8:	69fb      	ldr	r3, [r7, #28]
 800d8fa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d8fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	461a      	mov	r2, r3
 800d906:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d908:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d90a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d90c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d90e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d910:	e841 2300 	strex	r3, r2, [r1]
 800d914:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d1e6      	bne.n	800d8ea <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d920:	2b01      	cmp	r3, #1
 800d922:	d12e      	bne.n	800d982 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	2200      	movs	r2, #0
 800d928:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	e853 3f00 	ldrex	r3, [r3]
 800d936:	60bb      	str	r3, [r7, #8]
   return(result);
 800d938:	68bb      	ldr	r3, [r7, #8]
 800d93a:	f023 0310 	bic.w	r3, r3, #16
 800d93e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	461a      	mov	r2, r3
 800d946:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d948:	61bb      	str	r3, [r7, #24]
 800d94a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d94c:	6979      	ldr	r1, [r7, #20]
 800d94e:	69ba      	ldr	r2, [r7, #24]
 800d950:	e841 2300 	strex	r3, r2, [r1]
 800d954:	613b      	str	r3, [r7, #16]
   return(result);
 800d956:	693b      	ldr	r3, [r7, #16]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d1e6      	bne.n	800d92a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	69db      	ldr	r3, [r3, #28]
 800d962:	f003 0310 	and.w	r3, r3, #16
 800d966:	2b10      	cmp	r3, #16
 800d968:	d103      	bne.n	800d972 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	2210      	movs	r2, #16
 800d970:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d978:	4619      	mov	r1, r3
 800d97a:	6878      	ldr	r0, [r7, #4]
 800d97c:	f7fe fae6 	bl	800bf4c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d980:	e00b      	b.n	800d99a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800d982:	6878      	ldr	r0, [r7, #4]
 800d984:	f7f6 f88e 	bl	8003aa4 <HAL_UART_RxCpltCallback>
}
 800d988:	e007      	b.n	800d99a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	699a      	ldr	r2, [r3, #24]
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	f042 0208 	orr.w	r2, r2, #8
 800d998:	619a      	str	r2, [r3, #24]
}
 800d99a:	bf00      	nop
 800d99c:	3770      	adds	r7, #112	@ 0x70
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	bd80      	pop	{r7, pc}
 800d9a2:	bf00      	nop
 800d9a4:	58000c00 	.word	0x58000c00

0800d9a8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b0ac      	sub	sp, #176	@ 0xb0
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d9b6:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	69db      	ldr	r3, [r3, #28]
 800d9c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	689b      	ldr	r3, [r3, #8]
 800d9d4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d9de:	2b22      	cmp	r3, #34	@ 0x22
 800d9e0:	f040 8180 	bne.w	800dce4 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d9ea:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d9ee:	e123      	b.n	800dc38 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d9f6:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d9fa:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800d9fe:	b2d9      	uxtb	r1, r3
 800da00:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800da04:	b2da      	uxtb	r2, r3
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800da0a:	400a      	ands	r2, r1
 800da0c:	b2d2      	uxtb	r2, r2
 800da0e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800da14:	1c5a      	adds	r2, r3, #1
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800da20:	b29b      	uxth	r3, r3
 800da22:	3b01      	subs	r3, #1
 800da24:	b29a      	uxth	r2, r3
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	69db      	ldr	r3, [r3, #28]
 800da32:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800da36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800da3a:	f003 0307 	and.w	r3, r3, #7
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d053      	beq.n	800daea <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800da42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800da46:	f003 0301 	and.w	r3, r3, #1
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d011      	beq.n	800da72 <UART_RxISR_8BIT_FIFOEN+0xca>
 800da4e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800da52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800da56:	2b00      	cmp	r3, #0
 800da58:	d00b      	beq.n	800da72 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	2201      	movs	r2, #1
 800da60:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800da68:	f043 0201 	orr.w	r2, r3, #1
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800da72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800da76:	f003 0302 	and.w	r3, r3, #2
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d011      	beq.n	800daa2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800da7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800da82:	f003 0301 	and.w	r3, r3, #1
 800da86:	2b00      	cmp	r3, #0
 800da88:	d00b      	beq.n	800daa2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	2202      	movs	r2, #2
 800da90:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800da98:	f043 0204 	orr.w	r2, r3, #4
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800daa2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800daa6:	f003 0304 	and.w	r3, r3, #4
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d011      	beq.n	800dad2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800daae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800dab2:	f003 0301 	and.w	r3, r3, #1
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d00b      	beq.n	800dad2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	2204      	movs	r2, #4
 800dac0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dac8:	f043 0202 	orr.w	r2, r3, #2
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d006      	beq.n	800daea <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800dadc:	6878      	ldr	r0, [r7, #4]
 800dade:	f7fe fa21 	bl	800bf24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	2200      	movs	r2, #0
 800dae6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800daf0:	b29b      	uxth	r3, r3
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	f040 80a0 	bne.w	800dc38 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dafe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800db00:	e853 3f00 	ldrex	r3, [r3]
 800db04:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800db06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800db08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800db0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	461a      	mov	r2, r3
 800db16:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800db1a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800db1c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db1e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800db20:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800db22:	e841 2300 	strex	r3, r2, [r1]
 800db26:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800db28:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d1e4      	bne.n	800daf8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	3308      	adds	r3, #8
 800db34:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800db38:	e853 3f00 	ldrex	r3, [r3]
 800db3c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800db3e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800db40:	4b6e      	ldr	r3, [pc, #440]	@ (800dcfc <UART_RxISR_8BIT_FIFOEN+0x354>)
 800db42:	4013      	ands	r3, r2
 800db44:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	3308      	adds	r3, #8
 800db4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800db52:	66ba      	str	r2, [r7, #104]	@ 0x68
 800db54:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db56:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800db58:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800db5a:	e841 2300 	strex	r3, r2, [r1]
 800db5e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800db60:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800db62:	2b00      	cmp	r3, #0
 800db64:	d1e3      	bne.n	800db2e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	2220      	movs	r2, #32
 800db6a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	2200      	movs	r2, #0
 800db72:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	2200      	movs	r2, #0
 800db78:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	4a60      	ldr	r2, [pc, #384]	@ (800dd00 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800db80:	4293      	cmp	r3, r2
 800db82:	d021      	beq.n	800dbc8 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	685b      	ldr	r3, [r3, #4]
 800db8a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d01a      	beq.n	800dbc8 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800db9a:	e853 3f00 	ldrex	r3, [r3]
 800db9e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800dba0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dba2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800dba6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	461a      	mov	r2, r3
 800dbb0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800dbb4:	657b      	str	r3, [r7, #84]	@ 0x54
 800dbb6:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbb8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800dbba:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800dbbc:	e841 2300 	strex	r3, r2, [r1]
 800dbc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800dbc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d1e4      	bne.n	800db92 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dbcc:	2b01      	cmp	r3, #1
 800dbce:	d130      	bne.n	800dc32 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	2200      	movs	r2, #0
 800dbd4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dbde:	e853 3f00 	ldrex	r3, [r3]
 800dbe2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800dbe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbe6:	f023 0310 	bic.w	r3, r3, #16
 800dbea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	461a      	mov	r2, r3
 800dbf4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800dbf8:	643b      	str	r3, [r7, #64]	@ 0x40
 800dbfa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbfc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800dbfe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dc00:	e841 2300 	strex	r3, r2, [r1]
 800dc04:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800dc06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d1e4      	bne.n	800dbd6 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	69db      	ldr	r3, [r3, #28]
 800dc12:	f003 0310 	and.w	r3, r3, #16
 800dc16:	2b10      	cmp	r3, #16
 800dc18:	d103      	bne.n	800dc22 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	2210      	movs	r2, #16
 800dc20:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800dc28:	4619      	mov	r1, r3
 800dc2a:	6878      	ldr	r0, [r7, #4]
 800dc2c:	f7fe f98e 	bl	800bf4c <HAL_UARTEx_RxEventCallback>
 800dc30:	e002      	b.n	800dc38 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800dc32:	6878      	ldr	r0, [r7, #4]
 800dc34:	f7f5 ff36 	bl	8003aa4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800dc38:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d006      	beq.n	800dc4e <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800dc40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dc44:	f003 0320 	and.w	r3, r3, #32
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	f47f aed1 	bne.w	800d9f0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800dc54:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800dc58:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d049      	beq.n	800dcf4 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800dc66:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800dc6a:	429a      	cmp	r2, r3
 800dc6c:	d242      	bcs.n	800dcf4 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	3308      	adds	r3, #8
 800dc74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc76:	6a3b      	ldr	r3, [r7, #32]
 800dc78:	e853 3f00 	ldrex	r3, [r3]
 800dc7c:	61fb      	str	r3, [r7, #28]
   return(result);
 800dc7e:	69fb      	ldr	r3, [r7, #28]
 800dc80:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800dc84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	3308      	adds	r3, #8
 800dc8e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800dc92:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800dc94:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc96:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dc98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dc9a:	e841 2300 	strex	r3, r2, [r1]
 800dc9e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800dca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d1e3      	bne.n	800dc6e <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	4a16      	ldr	r2, [pc, #88]	@ (800dd04 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800dcaa:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	e853 3f00 	ldrex	r3, [r3]
 800dcb8:	60bb      	str	r3, [r7, #8]
   return(result);
 800dcba:	68bb      	ldr	r3, [r7, #8]
 800dcbc:	f043 0320 	orr.w	r3, r3, #32
 800dcc0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	461a      	mov	r2, r3
 800dcca:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800dcce:	61bb      	str	r3, [r7, #24]
 800dcd0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcd2:	6979      	ldr	r1, [r7, #20]
 800dcd4:	69ba      	ldr	r2, [r7, #24]
 800dcd6:	e841 2300 	strex	r3, r2, [r1]
 800dcda:	613b      	str	r3, [r7, #16]
   return(result);
 800dcdc:	693b      	ldr	r3, [r7, #16]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d1e4      	bne.n	800dcac <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800dce2:	e007      	b.n	800dcf4 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	699a      	ldr	r2, [r3, #24]
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	f042 0208 	orr.w	r2, r2, #8
 800dcf2:	619a      	str	r2, [r3, #24]
}
 800dcf4:	bf00      	nop
 800dcf6:	37b0      	adds	r7, #176	@ 0xb0
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	bd80      	pop	{r7, pc}
 800dcfc:	effffffe 	.word	0xeffffffe
 800dd00:	58000c00 	.word	0x58000c00
 800dd04:	0800d639 	.word	0x0800d639

0800dd08 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800dd08:	b580      	push	{r7, lr}
 800dd0a:	b0ae      	sub	sp, #184	@ 0xb8
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800dd16:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	69db      	ldr	r3, [r3, #28]
 800dd20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	689b      	ldr	r3, [r3, #8]
 800dd34:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800dd3e:	2b22      	cmp	r3, #34	@ 0x22
 800dd40:	f040 8184 	bne.w	800e04c <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800dd4a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800dd4e:	e127      	b.n	800dfa0 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd56:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dd5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800dd62:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800dd66:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800dd6a:	4013      	ands	r3, r2
 800dd6c:	b29a      	uxth	r2, r3
 800dd6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800dd72:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dd78:	1c9a      	adds	r2, r3, #2
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800dd84:	b29b      	uxth	r3, r3
 800dd86:	3b01      	subs	r3, #1
 800dd88:	b29a      	uxth	r2, r3
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	69db      	ldr	r3, [r3, #28]
 800dd96:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800dd9a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800dd9e:	f003 0307 	and.w	r3, r3, #7
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d053      	beq.n	800de4e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800dda6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ddaa:	f003 0301 	and.w	r3, r3, #1
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d011      	beq.n	800ddd6 <UART_RxISR_16BIT_FIFOEN+0xce>
 800ddb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ddb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d00b      	beq.n	800ddd6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	2201      	movs	r2, #1
 800ddc4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ddcc:	f043 0201 	orr.w	r2, r3, #1
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ddd6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ddda:	f003 0302 	and.w	r3, r3, #2
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d011      	beq.n	800de06 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800dde2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800dde6:	f003 0301 	and.w	r3, r3, #1
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d00b      	beq.n	800de06 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	2202      	movs	r2, #2
 800ddf4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ddfc:	f043 0204 	orr.w	r2, r3, #4
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800de06:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800de0a:	f003 0304 	and.w	r3, r3, #4
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d011      	beq.n	800de36 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800de12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800de16:	f003 0301 	and.w	r3, r3, #1
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d00b      	beq.n	800de36 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	2204      	movs	r2, #4
 800de24:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800de2c:	f043 0202 	orr.w	r2, r3, #2
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d006      	beq.n	800de4e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800de40:	6878      	ldr	r0, [r7, #4]
 800de42:	f7fe f86f 	bl	800bf24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	2200      	movs	r2, #0
 800de4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800de54:	b29b      	uxth	r3, r3
 800de56:	2b00      	cmp	r3, #0
 800de58:	f040 80a2 	bne.w	800dfa0 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de62:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800de64:	e853 3f00 	ldrex	r3, [r3]
 800de68:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800de6a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800de6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800de70:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	461a      	mov	r2, r3
 800de7a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800de7e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800de82:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de84:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800de86:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800de8a:	e841 2300 	strex	r3, r2, [r1]
 800de8e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800de90:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800de92:	2b00      	cmp	r3, #0
 800de94:	d1e2      	bne.n	800de5c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	3308      	adds	r3, #8
 800de9c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de9e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800dea0:	e853 3f00 	ldrex	r3, [r3]
 800dea4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800dea6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800dea8:	4b6e      	ldr	r3, [pc, #440]	@ (800e064 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800deaa:	4013      	ands	r3, r2
 800deac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	3308      	adds	r3, #8
 800deb6:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800deba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800debc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800debe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800dec0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800dec2:	e841 2300 	strex	r3, r2, [r1]
 800dec6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800dec8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800deca:	2b00      	cmp	r3, #0
 800decc:	d1e3      	bne.n	800de96 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	2220      	movs	r2, #32
 800ded2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	2200      	movs	r2, #0
 800deda:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	2200      	movs	r2, #0
 800dee0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	4a60      	ldr	r2, [pc, #384]	@ (800e068 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800dee8:	4293      	cmp	r3, r2
 800deea:	d021      	beq.n	800df30 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	685b      	ldr	r3, [r3, #4]
 800def2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800def6:	2b00      	cmp	r3, #0
 800def8:	d01a      	beq.n	800df30 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800df02:	e853 3f00 	ldrex	r3, [r3]
 800df06:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800df08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800df0a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800df0e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	461a      	mov	r2, r3
 800df18:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800df1c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800df1e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df20:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800df22:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800df24:	e841 2300 	strex	r3, r2, [r1]
 800df28:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800df2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d1e4      	bne.n	800defa <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800df34:	2b01      	cmp	r3, #1
 800df36:	d130      	bne.n	800df9a <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	2200      	movs	r2, #0
 800df3c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df46:	e853 3f00 	ldrex	r3, [r3]
 800df4a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800df4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df4e:	f023 0310 	bic.w	r3, r3, #16
 800df52:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	461a      	mov	r2, r3
 800df5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800df60:	647b      	str	r3, [r7, #68]	@ 0x44
 800df62:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df64:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800df66:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800df68:	e841 2300 	strex	r3, r2, [r1]
 800df6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800df6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df70:	2b00      	cmp	r3, #0
 800df72:	d1e4      	bne.n	800df3e <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	69db      	ldr	r3, [r3, #28]
 800df7a:	f003 0310 	and.w	r3, r3, #16
 800df7e:	2b10      	cmp	r3, #16
 800df80:	d103      	bne.n	800df8a <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	2210      	movs	r2, #16
 800df88:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800df90:	4619      	mov	r1, r3
 800df92:	6878      	ldr	r0, [r7, #4]
 800df94:	f7fd ffda 	bl	800bf4c <HAL_UARTEx_RxEventCallback>
 800df98:	e002      	b.n	800dfa0 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800df9a:	6878      	ldr	r0, [r7, #4]
 800df9c:	f7f5 fd82 	bl	8003aa4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800dfa0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d006      	beq.n	800dfb6 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800dfa8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800dfac:	f003 0320 	and.w	r3, r3, #32
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	f47f aecd 	bne.w	800dd50 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800dfbc:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800dfc0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d049      	beq.n	800e05c <UART_RxISR_16BIT_FIFOEN+0x354>
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800dfce:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800dfd2:	429a      	cmp	r2, r3
 800dfd4:	d242      	bcs.n	800e05c <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	3308      	adds	r3, #8
 800dfdc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfe0:	e853 3f00 	ldrex	r3, [r3]
 800dfe4:	623b      	str	r3, [r7, #32]
   return(result);
 800dfe6:	6a3b      	ldr	r3, [r7, #32]
 800dfe8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800dfec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	3308      	adds	r3, #8
 800dff6:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800dffa:	633a      	str	r2, [r7, #48]	@ 0x30
 800dffc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dffe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e000:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e002:	e841 2300 	strex	r3, r2, [r1]
 800e006:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d1e3      	bne.n	800dfd6 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	4a16      	ldr	r2, [pc, #88]	@ (800e06c <UART_RxISR_16BIT_FIFOEN+0x364>)
 800e012:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e01a:	693b      	ldr	r3, [r7, #16]
 800e01c:	e853 3f00 	ldrex	r3, [r3]
 800e020:	60fb      	str	r3, [r7, #12]
   return(result);
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	f043 0320 	orr.w	r3, r3, #32
 800e028:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	461a      	mov	r2, r3
 800e032:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e036:	61fb      	str	r3, [r7, #28]
 800e038:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e03a:	69b9      	ldr	r1, [r7, #24]
 800e03c:	69fa      	ldr	r2, [r7, #28]
 800e03e:	e841 2300 	strex	r3, r2, [r1]
 800e042:	617b      	str	r3, [r7, #20]
   return(result);
 800e044:	697b      	ldr	r3, [r7, #20]
 800e046:	2b00      	cmp	r3, #0
 800e048:	d1e4      	bne.n	800e014 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e04a:	e007      	b.n	800e05c <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	699a      	ldr	r2, [r3, #24]
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	f042 0208 	orr.w	r2, r2, #8
 800e05a:	619a      	str	r2, [r3, #24]
}
 800e05c:	bf00      	nop
 800e05e:	37b8      	adds	r7, #184	@ 0xb8
 800e060:	46bd      	mov	sp, r7
 800e062:	bd80      	pop	{r7, pc}
 800e064:	effffffe 	.word	0xeffffffe
 800e068:	58000c00 	.word	0x58000c00
 800e06c:	0800d7f1 	.word	0x0800d7f1

0800e070 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e070:	b480      	push	{r7}
 800e072:	b083      	sub	sp, #12
 800e074:	af00      	add	r7, sp, #0
 800e076:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e078:	bf00      	nop
 800e07a:	370c      	adds	r7, #12
 800e07c:	46bd      	mov	sp, r7
 800e07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e082:	4770      	bx	lr

0800e084 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e084:	b480      	push	{r7}
 800e086:	b083      	sub	sp, #12
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e08c:	bf00      	nop
 800e08e:	370c      	adds	r7, #12
 800e090:	46bd      	mov	sp, r7
 800e092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e096:	4770      	bx	lr

0800e098 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e098:	b480      	push	{r7}
 800e09a:	b083      	sub	sp, #12
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e0a0:	bf00      	nop
 800e0a2:	370c      	adds	r7, #12
 800e0a4:	46bd      	mov	sp, r7
 800e0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0aa:	4770      	bx	lr

0800e0ac <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e0ac:	b480      	push	{r7}
 800e0ae:	b085      	sub	sp, #20
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e0ba:	2b01      	cmp	r3, #1
 800e0bc:	d101      	bne.n	800e0c2 <HAL_UARTEx_DisableFifoMode+0x16>
 800e0be:	2302      	movs	r3, #2
 800e0c0:	e027      	b.n	800e112 <HAL_UARTEx_DisableFifoMode+0x66>
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	2201      	movs	r2, #1
 800e0c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	2224      	movs	r2, #36	@ 0x24
 800e0ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	681a      	ldr	r2, [r3, #0]
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	f022 0201 	bic.w	r2, r2, #1
 800e0e8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800e0f0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	2200      	movs	r2, #0
 800e0f6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	68fa      	ldr	r2, [r7, #12]
 800e0fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	2220      	movs	r2, #32
 800e104:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	2200      	movs	r2, #0
 800e10c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e110:	2300      	movs	r3, #0
}
 800e112:	4618      	mov	r0, r3
 800e114:	3714      	adds	r7, #20
 800e116:	46bd      	mov	sp, r7
 800e118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e11c:	4770      	bx	lr

0800e11e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e11e:	b580      	push	{r7, lr}
 800e120:	b084      	sub	sp, #16
 800e122:	af00      	add	r7, sp, #0
 800e124:	6078      	str	r0, [r7, #4]
 800e126:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e12e:	2b01      	cmp	r3, #1
 800e130:	d101      	bne.n	800e136 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e132:	2302      	movs	r3, #2
 800e134:	e02d      	b.n	800e192 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	2201      	movs	r2, #1
 800e13a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	2224      	movs	r2, #36	@ 0x24
 800e142:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	681a      	ldr	r2, [r3, #0]
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	f022 0201 	bic.w	r2, r2, #1
 800e15c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	689b      	ldr	r3, [r3, #8]
 800e164:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	683a      	ldr	r2, [r7, #0]
 800e16e:	430a      	orrs	r2, r1
 800e170:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e172:	6878      	ldr	r0, [r7, #4]
 800e174:	f000 f850 	bl	800e218 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	68fa      	ldr	r2, [r7, #12]
 800e17e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	2220      	movs	r2, #32
 800e184:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	2200      	movs	r2, #0
 800e18c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e190:	2300      	movs	r3, #0
}
 800e192:	4618      	mov	r0, r3
 800e194:	3710      	adds	r7, #16
 800e196:	46bd      	mov	sp, r7
 800e198:	bd80      	pop	{r7, pc}

0800e19a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e19a:	b580      	push	{r7, lr}
 800e19c:	b084      	sub	sp, #16
 800e19e:	af00      	add	r7, sp, #0
 800e1a0:	6078      	str	r0, [r7, #4]
 800e1a2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e1aa:	2b01      	cmp	r3, #1
 800e1ac:	d101      	bne.n	800e1b2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e1ae:	2302      	movs	r3, #2
 800e1b0:	e02d      	b.n	800e20e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	2201      	movs	r2, #1
 800e1b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	2224      	movs	r2, #36	@ 0x24
 800e1be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	681a      	ldr	r2, [r3, #0]
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	f022 0201 	bic.w	r2, r2, #1
 800e1d8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	689b      	ldr	r3, [r3, #8]
 800e1e0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	683a      	ldr	r2, [r7, #0]
 800e1ea:	430a      	orrs	r2, r1
 800e1ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e1ee:	6878      	ldr	r0, [r7, #4]
 800e1f0:	f000 f812 	bl	800e218 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	68fa      	ldr	r2, [r7, #12]
 800e1fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	2220      	movs	r2, #32
 800e200:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	2200      	movs	r2, #0
 800e208:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e20c:	2300      	movs	r3, #0
}
 800e20e:	4618      	mov	r0, r3
 800e210:	3710      	adds	r7, #16
 800e212:	46bd      	mov	sp, r7
 800e214:	bd80      	pop	{r7, pc}
	...

0800e218 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e218:	b480      	push	{r7}
 800e21a:	b085      	sub	sp, #20
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e224:	2b00      	cmp	r3, #0
 800e226:	d108      	bne.n	800e23a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	2201      	movs	r2, #1
 800e22c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	2201      	movs	r2, #1
 800e234:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e238:	e031      	b.n	800e29e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e23a:	2310      	movs	r3, #16
 800e23c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e23e:	2310      	movs	r3, #16
 800e240:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	689b      	ldr	r3, [r3, #8]
 800e248:	0e5b      	lsrs	r3, r3, #25
 800e24a:	b2db      	uxtb	r3, r3
 800e24c:	f003 0307 	and.w	r3, r3, #7
 800e250:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	689b      	ldr	r3, [r3, #8]
 800e258:	0f5b      	lsrs	r3, r3, #29
 800e25a:	b2db      	uxtb	r3, r3
 800e25c:	f003 0307 	and.w	r3, r3, #7
 800e260:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e262:	7bbb      	ldrb	r3, [r7, #14]
 800e264:	7b3a      	ldrb	r2, [r7, #12]
 800e266:	4911      	ldr	r1, [pc, #68]	@ (800e2ac <UARTEx_SetNbDataToProcess+0x94>)
 800e268:	5c8a      	ldrb	r2, [r1, r2]
 800e26a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e26e:	7b3a      	ldrb	r2, [r7, #12]
 800e270:	490f      	ldr	r1, [pc, #60]	@ (800e2b0 <UARTEx_SetNbDataToProcess+0x98>)
 800e272:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e274:	fb93 f3f2 	sdiv	r3, r3, r2
 800e278:	b29a      	uxth	r2, r3
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e280:	7bfb      	ldrb	r3, [r7, #15]
 800e282:	7b7a      	ldrb	r2, [r7, #13]
 800e284:	4909      	ldr	r1, [pc, #36]	@ (800e2ac <UARTEx_SetNbDataToProcess+0x94>)
 800e286:	5c8a      	ldrb	r2, [r1, r2]
 800e288:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e28c:	7b7a      	ldrb	r2, [r7, #13]
 800e28e:	4908      	ldr	r1, [pc, #32]	@ (800e2b0 <UARTEx_SetNbDataToProcess+0x98>)
 800e290:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e292:	fb93 f3f2 	sdiv	r3, r3, r2
 800e296:	b29a      	uxth	r2, r3
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800e29e:	bf00      	nop
 800e2a0:	3714      	adds	r7, #20
 800e2a2:	46bd      	mov	sp, r7
 800e2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a8:	4770      	bx	lr
 800e2aa:	bf00      	nop
 800e2ac:	08017760 	.word	0x08017760
 800e2b0:	08017768 	.word	0x08017768

0800e2b4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800e2b4:	b084      	sub	sp, #16
 800e2b6:	b480      	push	{r7}
 800e2b8:	b085      	sub	sp, #20
 800e2ba:	af00      	add	r7, sp, #0
 800e2bc:	6078      	str	r0, [r7, #4]
 800e2be:	f107 001c 	add.w	r0, r7, #28
 800e2c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800e2ca:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800e2cc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800e2ce:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800e2d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800e2d2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800e2d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800e2d6:	431a      	orrs	r2, r3
             Init.ClockDiv
 800e2d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800e2da:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800e2dc:	68fa      	ldr	r2, [r7, #12]
 800e2de:	4313      	orrs	r3, r2
 800e2e0:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	685a      	ldr	r2, [r3, #4]
 800e2e6:	4b07      	ldr	r3, [pc, #28]	@ (800e304 <SDMMC_Init+0x50>)
 800e2e8:	4013      	ands	r3, r2
 800e2ea:	68fa      	ldr	r2, [r7, #12]
 800e2ec:	431a      	orrs	r2, r3
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800e2f2:	2300      	movs	r3, #0
}
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	3714      	adds	r7, #20
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2fe:	b004      	add	sp, #16
 800e300:	4770      	bx	lr
 800e302:	bf00      	nop
 800e304:	ffc02c00 	.word	0xffc02c00

0800e308 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800e308:	b480      	push	{r7}
 800e30a:	b083      	sub	sp, #12
 800e30c:	af00      	add	r7, sp, #0
 800e30e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800e316:	4618      	mov	r0, r3
 800e318:	370c      	adds	r7, #12
 800e31a:	46bd      	mov	sp, r7
 800e31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e320:	4770      	bx	lr

0800e322 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800e322:	b480      	push	{r7}
 800e324:	b083      	sub	sp, #12
 800e326:	af00      	add	r7, sp, #0
 800e328:	6078      	str	r0, [r7, #4]
 800e32a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800e32c:	683b      	ldr	r3, [r7, #0]
 800e32e:	681a      	ldr	r2, [r3, #0]
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800e336:	2300      	movs	r3, #0
}
 800e338:	4618      	mov	r0, r3
 800e33a:	370c      	adds	r7, #12
 800e33c:	46bd      	mov	sp, r7
 800e33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e342:	4770      	bx	lr

0800e344 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800e344:	b480      	push	{r7}
 800e346:	b083      	sub	sp, #12
 800e348:	af00      	add	r7, sp, #0
 800e34a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	f043 0203 	orr.w	r2, r3, #3
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800e358:	2300      	movs	r3, #0
}
 800e35a:	4618      	mov	r0, r3
 800e35c:	370c      	adds	r7, #12
 800e35e:	46bd      	mov	sp, r7
 800e360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e364:	4770      	bx	lr

0800e366 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800e366:	b480      	push	{r7}
 800e368:	b083      	sub	sp, #12
 800e36a:	af00      	add	r7, sp, #0
 800e36c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	f003 0303 	and.w	r3, r3, #3
}
 800e376:	4618      	mov	r0, r3
 800e378:	370c      	adds	r7, #12
 800e37a:	46bd      	mov	sp, r7
 800e37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e380:	4770      	bx	lr
	...

0800e384 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800e384:	b480      	push	{r7}
 800e386:	b085      	sub	sp, #20
 800e388:	af00      	add	r7, sp, #0
 800e38a:	6078      	str	r0, [r7, #4]
 800e38c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e38e:	2300      	movs	r3, #0
 800e390:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800e392:	683b      	ldr	r3, [r7, #0]
 800e394:	681a      	ldr	r2, [r3, #0]
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800e39a:	683b      	ldr	r3, [r7, #0]
 800e39c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800e39e:	683b      	ldr	r3, [r7, #0]
 800e3a0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800e3a2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800e3a4:	683b      	ldr	r3, [r7, #0]
 800e3a6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800e3a8:	431a      	orrs	r2, r3
                       Command->CPSM);
 800e3aa:	683b      	ldr	r3, [r7, #0]
 800e3ac:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800e3ae:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800e3b0:	68fa      	ldr	r2, [r7, #12]
 800e3b2:	4313      	orrs	r3, r2
 800e3b4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	68da      	ldr	r2, [r3, #12]
 800e3ba:	4b06      	ldr	r3, [pc, #24]	@ (800e3d4 <SDMMC_SendCommand+0x50>)
 800e3bc:	4013      	ands	r3, r2
 800e3be:	68fa      	ldr	r2, [r7, #12]
 800e3c0:	431a      	orrs	r2, r3
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800e3c6:	2300      	movs	r3, #0
}
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	3714      	adds	r7, #20
 800e3cc:	46bd      	mov	sp, r7
 800e3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d2:	4770      	bx	lr
 800e3d4:	fffee0c0 	.word	0xfffee0c0

0800e3d8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800e3d8:	b480      	push	{r7}
 800e3da:	b083      	sub	sp, #12
 800e3dc:	af00      	add	r7, sp, #0
 800e3de:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	691b      	ldr	r3, [r3, #16]
 800e3e4:	b2db      	uxtb	r3, r3
}
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	370c      	adds	r7, #12
 800e3ea:	46bd      	mov	sp, r7
 800e3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f0:	4770      	bx	lr

0800e3f2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800e3f2:	b480      	push	{r7}
 800e3f4:	b085      	sub	sp, #20
 800e3f6:	af00      	add	r7, sp, #0
 800e3f8:	6078      	str	r0, [r7, #4]
 800e3fa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	3314      	adds	r3, #20
 800e400:	461a      	mov	r2, r3
 800e402:	683b      	ldr	r3, [r7, #0]
 800e404:	4413      	add	r3, r2
 800e406:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	681b      	ldr	r3, [r3, #0]
}
 800e40c:	4618      	mov	r0, r3
 800e40e:	3714      	adds	r7, #20
 800e410:	46bd      	mov	sp, r7
 800e412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e416:	4770      	bx	lr

0800e418 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800e418:	b480      	push	{r7}
 800e41a:	b085      	sub	sp, #20
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	6078      	str	r0, [r7, #4]
 800e420:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e422:	2300      	movs	r3, #0
 800e424:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800e426:	683b      	ldr	r3, [r7, #0]
 800e428:	681a      	ldr	r2, [r3, #0]
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800e42e:	683b      	ldr	r3, [r7, #0]
 800e430:	685a      	ldr	r2, [r3, #4]
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800e436:	683b      	ldr	r3, [r7, #0]
 800e438:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800e43a:	683b      	ldr	r3, [r7, #0]
 800e43c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800e43e:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800e440:	683b      	ldr	r3, [r7, #0]
 800e442:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800e444:	431a      	orrs	r2, r3
                       Data->DPSM);
 800e446:	683b      	ldr	r3, [r7, #0]
 800e448:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800e44a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800e44c:	68fa      	ldr	r2, [r7, #12]
 800e44e:	4313      	orrs	r3, r2
 800e450:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e456:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	431a      	orrs	r2, r3
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800e462:	2300      	movs	r3, #0

}
 800e464:	4618      	mov	r0, r3
 800e466:	3714      	adds	r7, #20
 800e468:	46bd      	mov	sp, r7
 800e46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e46e:	4770      	bx	lr

0800e470 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800e470:	b580      	push	{r7, lr}
 800e472:	b088      	sub	sp, #32
 800e474:	af00      	add	r7, sp, #0
 800e476:	6078      	str	r0, [r7, #4]
 800e478:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800e47a:	683b      	ldr	r3, [r7, #0]
 800e47c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800e47e:	2310      	movs	r3, #16
 800e480:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e482:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e486:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e488:	2300      	movs	r3, #0
 800e48a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e48c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e490:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e492:	f107 0308 	add.w	r3, r7, #8
 800e496:	4619      	mov	r1, r3
 800e498:	6878      	ldr	r0, [r7, #4]
 800e49a:	f7ff ff73 	bl	800e384 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800e49e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e4a2:	2110      	movs	r1, #16
 800e4a4:	6878      	ldr	r0, [r7, #4]
 800e4a6:	f000 fa5f 	bl	800e968 <SDMMC_GetCmdResp1>
 800e4aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e4ac:	69fb      	ldr	r3, [r7, #28]
}
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	3720      	adds	r7, #32
 800e4b2:	46bd      	mov	sp, r7
 800e4b4:	bd80      	pop	{r7, pc}

0800e4b6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800e4b6:	b580      	push	{r7, lr}
 800e4b8:	b088      	sub	sp, #32
 800e4ba:	af00      	add	r7, sp, #0
 800e4bc:	6078      	str	r0, [r7, #4]
 800e4be:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e4c0:	683b      	ldr	r3, [r7, #0]
 800e4c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800e4c4:	2311      	movs	r3, #17
 800e4c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e4c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e4cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e4ce:	2300      	movs	r3, #0
 800e4d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e4d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e4d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e4d8:	f107 0308 	add.w	r3, r7, #8
 800e4dc:	4619      	mov	r1, r3
 800e4de:	6878      	ldr	r0, [r7, #4]
 800e4e0:	f7ff ff50 	bl	800e384 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800e4e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e4e8:	2111      	movs	r1, #17
 800e4ea:	6878      	ldr	r0, [r7, #4]
 800e4ec:	f000 fa3c 	bl	800e968 <SDMMC_GetCmdResp1>
 800e4f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e4f2:	69fb      	ldr	r3, [r7, #28]
}
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	3720      	adds	r7, #32
 800e4f8:	46bd      	mov	sp, r7
 800e4fa:	bd80      	pop	{r7, pc}

0800e4fc <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800e4fc:	b580      	push	{r7, lr}
 800e4fe:	b088      	sub	sp, #32
 800e500:	af00      	add	r7, sp, #0
 800e502:	6078      	str	r0, [r7, #4]
 800e504:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e506:	683b      	ldr	r3, [r7, #0]
 800e508:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800e50a:	2312      	movs	r3, #18
 800e50c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e50e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e512:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e514:	2300      	movs	r3, #0
 800e516:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e518:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e51c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e51e:	f107 0308 	add.w	r3, r7, #8
 800e522:	4619      	mov	r1, r3
 800e524:	6878      	ldr	r0, [r7, #4]
 800e526:	f7ff ff2d 	bl	800e384 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800e52a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e52e:	2112      	movs	r1, #18
 800e530:	6878      	ldr	r0, [r7, #4]
 800e532:	f000 fa19 	bl	800e968 <SDMMC_GetCmdResp1>
 800e536:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e538:	69fb      	ldr	r3, [r7, #28]
}
 800e53a:	4618      	mov	r0, r3
 800e53c:	3720      	adds	r7, #32
 800e53e:	46bd      	mov	sp, r7
 800e540:	bd80      	pop	{r7, pc}

0800e542 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800e542:	b580      	push	{r7, lr}
 800e544:	b088      	sub	sp, #32
 800e546:	af00      	add	r7, sp, #0
 800e548:	6078      	str	r0, [r7, #4]
 800e54a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e54c:	683b      	ldr	r3, [r7, #0]
 800e54e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800e550:	2318      	movs	r3, #24
 800e552:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e554:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e558:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e55a:	2300      	movs	r3, #0
 800e55c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e55e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e562:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e564:	f107 0308 	add.w	r3, r7, #8
 800e568:	4619      	mov	r1, r3
 800e56a:	6878      	ldr	r0, [r7, #4]
 800e56c:	f7ff ff0a 	bl	800e384 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800e570:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e574:	2118      	movs	r1, #24
 800e576:	6878      	ldr	r0, [r7, #4]
 800e578:	f000 f9f6 	bl	800e968 <SDMMC_GetCmdResp1>
 800e57c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e57e:	69fb      	ldr	r3, [r7, #28]
}
 800e580:	4618      	mov	r0, r3
 800e582:	3720      	adds	r7, #32
 800e584:	46bd      	mov	sp, r7
 800e586:	bd80      	pop	{r7, pc}

0800e588 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800e588:	b580      	push	{r7, lr}
 800e58a:	b088      	sub	sp, #32
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	6078      	str	r0, [r7, #4]
 800e590:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e592:	683b      	ldr	r3, [r7, #0]
 800e594:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800e596:	2319      	movs	r3, #25
 800e598:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e59a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e59e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e5a0:	2300      	movs	r3, #0
 800e5a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e5a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e5a8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e5aa:	f107 0308 	add.w	r3, r7, #8
 800e5ae:	4619      	mov	r1, r3
 800e5b0:	6878      	ldr	r0, [r7, #4]
 800e5b2:	f7ff fee7 	bl	800e384 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800e5b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e5ba:	2119      	movs	r1, #25
 800e5bc:	6878      	ldr	r0, [r7, #4]
 800e5be:	f000 f9d3 	bl	800e968 <SDMMC_GetCmdResp1>
 800e5c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e5c4:	69fb      	ldr	r3, [r7, #28]
}
 800e5c6:	4618      	mov	r0, r3
 800e5c8:	3720      	adds	r7, #32
 800e5ca:	46bd      	mov	sp, r7
 800e5cc:	bd80      	pop	{r7, pc}
	...

0800e5d0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800e5d0:	b580      	push	{r7, lr}
 800e5d2:	b088      	sub	sp, #32
 800e5d4:	af00      	add	r7, sp, #0
 800e5d6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800e5d8:	2300      	movs	r3, #0
 800e5da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800e5dc:	230c      	movs	r3, #12
 800e5de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e5e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e5e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e5e6:	2300      	movs	r3, #0
 800e5e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e5ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e5ee:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	68db      	ldr	r3, [r3, #12]
 800e5f4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	68db      	ldr	r3, [r3, #12]
 800e600:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e608:	f107 0308 	add.w	r3, r7, #8
 800e60c:	4619      	mov	r1, r3
 800e60e:	6878      	ldr	r0, [r7, #4]
 800e610:	f7ff feb8 	bl	800e384 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800e614:	4a0b      	ldr	r2, [pc, #44]	@ (800e644 <SDMMC_CmdStopTransfer+0x74>)
 800e616:	210c      	movs	r1, #12
 800e618:	6878      	ldr	r0, [r7, #4]
 800e61a:	f000 f9a5 	bl	800e968 <SDMMC_GetCmdResp1>
 800e61e:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	68db      	ldr	r3, [r3, #12]
 800e624:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800e62c:	69fb      	ldr	r3, [r7, #28]
 800e62e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e632:	d101      	bne.n	800e638 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800e634:	2300      	movs	r3, #0
 800e636:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800e638:	69fb      	ldr	r3, [r7, #28]
}
 800e63a:	4618      	mov	r0, r3
 800e63c:	3720      	adds	r7, #32
 800e63e:	46bd      	mov	sp, r7
 800e640:	bd80      	pop	{r7, pc}
 800e642:	bf00      	nop
 800e644:	05f5e100 	.word	0x05f5e100

0800e648 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800e648:	b580      	push	{r7, lr}
 800e64a:	b088      	sub	sp, #32
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	6078      	str	r0, [r7, #4]
 800e650:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800e652:	683b      	ldr	r3, [r7, #0]
 800e654:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800e656:	2307      	movs	r3, #7
 800e658:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e65a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e65e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e660:	2300      	movs	r3, #0
 800e662:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e664:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e668:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e66a:	f107 0308 	add.w	r3, r7, #8
 800e66e:	4619      	mov	r1, r3
 800e670:	6878      	ldr	r0, [r7, #4]
 800e672:	f7ff fe87 	bl	800e384 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800e676:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e67a:	2107      	movs	r1, #7
 800e67c:	6878      	ldr	r0, [r7, #4]
 800e67e:	f000 f973 	bl	800e968 <SDMMC_GetCmdResp1>
 800e682:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e684:	69fb      	ldr	r3, [r7, #28]
}
 800e686:	4618      	mov	r0, r3
 800e688:	3720      	adds	r7, #32
 800e68a:	46bd      	mov	sp, r7
 800e68c:	bd80      	pop	{r7, pc}

0800e68e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800e68e:	b580      	push	{r7, lr}
 800e690:	b088      	sub	sp, #32
 800e692:	af00      	add	r7, sp, #0
 800e694:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800e696:	2300      	movs	r3, #0
 800e698:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800e69a:	2300      	movs	r3, #0
 800e69c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800e69e:	2300      	movs	r3, #0
 800e6a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e6a2:	2300      	movs	r3, #0
 800e6a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e6a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e6aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e6ac:	f107 0308 	add.w	r3, r7, #8
 800e6b0:	4619      	mov	r1, r3
 800e6b2:	6878      	ldr	r0, [r7, #4]
 800e6b4:	f7ff fe66 	bl	800e384 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800e6b8:	6878      	ldr	r0, [r7, #4]
 800e6ba:	f000 fb97 	bl	800edec <SDMMC_GetCmdError>
 800e6be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e6c0:	69fb      	ldr	r3, [r7, #28]
}
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	3720      	adds	r7, #32
 800e6c6:	46bd      	mov	sp, r7
 800e6c8:	bd80      	pop	{r7, pc}

0800e6ca <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800e6ca:	b580      	push	{r7, lr}
 800e6cc:	b088      	sub	sp, #32
 800e6ce:	af00      	add	r7, sp, #0
 800e6d0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800e6d2:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800e6d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800e6d8:	2308      	movs	r3, #8
 800e6da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e6dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e6e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e6e2:	2300      	movs	r3, #0
 800e6e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e6e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e6ea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e6ec:	f107 0308 	add.w	r3, r7, #8
 800e6f0:	4619      	mov	r1, r3
 800e6f2:	6878      	ldr	r0, [r7, #4]
 800e6f4:	f7ff fe46 	bl	800e384 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800e6f8:	6878      	ldr	r0, [r7, #4]
 800e6fa:	f000 fb29 	bl	800ed50 <SDMMC_GetCmdResp7>
 800e6fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e700:	69fb      	ldr	r3, [r7, #28]
}
 800e702:	4618      	mov	r0, r3
 800e704:	3720      	adds	r7, #32
 800e706:	46bd      	mov	sp, r7
 800e708:	bd80      	pop	{r7, pc}

0800e70a <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e70a:	b580      	push	{r7, lr}
 800e70c:	b088      	sub	sp, #32
 800e70e:	af00      	add	r7, sp, #0
 800e710:	6078      	str	r0, [r7, #4]
 800e712:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800e714:	683b      	ldr	r3, [r7, #0]
 800e716:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800e718:	2337      	movs	r3, #55	@ 0x37
 800e71a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e71c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e720:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e722:	2300      	movs	r3, #0
 800e724:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e726:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e72a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e72c:	f107 0308 	add.w	r3, r7, #8
 800e730:	4619      	mov	r1, r3
 800e732:	6878      	ldr	r0, [r7, #4]
 800e734:	f7ff fe26 	bl	800e384 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800e738:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e73c:	2137      	movs	r1, #55	@ 0x37
 800e73e:	6878      	ldr	r0, [r7, #4]
 800e740:	f000 f912 	bl	800e968 <SDMMC_GetCmdResp1>
 800e744:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e746:	69fb      	ldr	r3, [r7, #28]
}
 800e748:	4618      	mov	r0, r3
 800e74a:	3720      	adds	r7, #32
 800e74c:	46bd      	mov	sp, r7
 800e74e:	bd80      	pop	{r7, pc}

0800e750 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e750:	b580      	push	{r7, lr}
 800e752:	b088      	sub	sp, #32
 800e754:	af00      	add	r7, sp, #0
 800e756:	6078      	str	r0, [r7, #4]
 800e758:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800e75a:	683b      	ldr	r3, [r7, #0]
 800e75c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800e75e:	2329      	movs	r3, #41	@ 0x29
 800e760:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e762:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e766:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e768:	2300      	movs	r3, #0
 800e76a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e76c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e770:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e772:	f107 0308 	add.w	r3, r7, #8
 800e776:	4619      	mov	r1, r3
 800e778:	6878      	ldr	r0, [r7, #4]
 800e77a:	f7ff fe03 	bl	800e384 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800e77e:	6878      	ldr	r0, [r7, #4]
 800e780:	f000 fa2e 	bl	800ebe0 <SDMMC_GetCmdResp3>
 800e784:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e786:	69fb      	ldr	r3, [r7, #28]
}
 800e788:	4618      	mov	r0, r3
 800e78a:	3720      	adds	r7, #32
 800e78c:	46bd      	mov	sp, r7
 800e78e:	bd80      	pop	{r7, pc}

0800e790 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800e790:	b580      	push	{r7, lr}
 800e792:	b088      	sub	sp, #32
 800e794:	af00      	add	r7, sp, #0
 800e796:	6078      	str	r0, [r7, #4]
 800e798:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800e79a:	683b      	ldr	r3, [r7, #0]
 800e79c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800e79e:	2306      	movs	r3, #6
 800e7a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e7a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e7a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e7ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e7b0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e7b2:	f107 0308 	add.w	r3, r7, #8
 800e7b6:	4619      	mov	r1, r3
 800e7b8:	6878      	ldr	r0, [r7, #4]
 800e7ba:	f7ff fde3 	bl	800e384 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800e7be:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e7c2:	2106      	movs	r1, #6
 800e7c4:	6878      	ldr	r0, [r7, #4]
 800e7c6:	f000 f8cf 	bl	800e968 <SDMMC_GetCmdResp1>
 800e7ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e7cc:	69fb      	ldr	r3, [r7, #28]
}
 800e7ce:	4618      	mov	r0, r3
 800e7d0:	3720      	adds	r7, #32
 800e7d2:	46bd      	mov	sp, r7
 800e7d4:	bd80      	pop	{r7, pc}

0800e7d6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800e7d6:	b580      	push	{r7, lr}
 800e7d8:	b088      	sub	sp, #32
 800e7da:	af00      	add	r7, sp, #0
 800e7dc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800e7de:	2300      	movs	r3, #0
 800e7e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800e7e2:	2333      	movs	r3, #51	@ 0x33
 800e7e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e7e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e7ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e7ec:	2300      	movs	r3, #0
 800e7ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e7f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e7f4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e7f6:	f107 0308 	add.w	r3, r7, #8
 800e7fa:	4619      	mov	r1, r3
 800e7fc:	6878      	ldr	r0, [r7, #4]
 800e7fe:	f7ff fdc1 	bl	800e384 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800e802:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e806:	2133      	movs	r1, #51	@ 0x33
 800e808:	6878      	ldr	r0, [r7, #4]
 800e80a:	f000 f8ad 	bl	800e968 <SDMMC_GetCmdResp1>
 800e80e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e810:	69fb      	ldr	r3, [r7, #28]
}
 800e812:	4618      	mov	r0, r3
 800e814:	3720      	adds	r7, #32
 800e816:	46bd      	mov	sp, r7
 800e818:	bd80      	pop	{r7, pc}

0800e81a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800e81a:	b580      	push	{r7, lr}
 800e81c:	b088      	sub	sp, #32
 800e81e:	af00      	add	r7, sp, #0
 800e820:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800e822:	2300      	movs	r3, #0
 800e824:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800e826:	2302      	movs	r3, #2
 800e828:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800e82a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800e82e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e830:	2300      	movs	r3, #0
 800e832:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e834:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e838:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e83a:	f107 0308 	add.w	r3, r7, #8
 800e83e:	4619      	mov	r1, r3
 800e840:	6878      	ldr	r0, [r7, #4]
 800e842:	f7ff fd9f 	bl	800e384 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800e846:	6878      	ldr	r0, [r7, #4]
 800e848:	f000 f980 	bl	800eb4c <SDMMC_GetCmdResp2>
 800e84c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e84e:	69fb      	ldr	r3, [r7, #28]
}
 800e850:	4618      	mov	r0, r3
 800e852:	3720      	adds	r7, #32
 800e854:	46bd      	mov	sp, r7
 800e856:	bd80      	pop	{r7, pc}

0800e858 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e858:	b580      	push	{r7, lr}
 800e85a:	b088      	sub	sp, #32
 800e85c:	af00      	add	r7, sp, #0
 800e85e:	6078      	str	r0, [r7, #4]
 800e860:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800e862:	683b      	ldr	r3, [r7, #0]
 800e864:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800e866:	2309      	movs	r3, #9
 800e868:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800e86a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800e86e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e870:	2300      	movs	r3, #0
 800e872:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e874:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e878:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e87a:	f107 0308 	add.w	r3, r7, #8
 800e87e:	4619      	mov	r1, r3
 800e880:	6878      	ldr	r0, [r7, #4]
 800e882:	f7ff fd7f 	bl	800e384 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800e886:	6878      	ldr	r0, [r7, #4]
 800e888:	f000 f960 	bl	800eb4c <SDMMC_GetCmdResp2>
 800e88c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e88e:	69fb      	ldr	r3, [r7, #28]
}
 800e890:	4618      	mov	r0, r3
 800e892:	3720      	adds	r7, #32
 800e894:	46bd      	mov	sp, r7
 800e896:	bd80      	pop	{r7, pc}

0800e898 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800e898:	b580      	push	{r7, lr}
 800e89a:	b088      	sub	sp, #32
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	6078      	str	r0, [r7, #4]
 800e8a0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800e8a2:	2300      	movs	r3, #0
 800e8a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800e8a6:	2303      	movs	r3, #3
 800e8a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e8aa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e8ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e8b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e8b8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e8ba:	f107 0308 	add.w	r3, r7, #8
 800e8be:	4619      	mov	r1, r3
 800e8c0:	6878      	ldr	r0, [r7, #4]
 800e8c2:	f7ff fd5f 	bl	800e384 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800e8c6:	683a      	ldr	r2, [r7, #0]
 800e8c8:	2103      	movs	r1, #3
 800e8ca:	6878      	ldr	r0, [r7, #4]
 800e8cc:	f000 f9c8 	bl	800ec60 <SDMMC_GetCmdResp6>
 800e8d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e8d2:	69fb      	ldr	r3, [r7, #28]
}
 800e8d4:	4618      	mov	r0, r3
 800e8d6:	3720      	adds	r7, #32
 800e8d8:	46bd      	mov	sp, r7
 800e8da:	bd80      	pop	{r7, pc}

0800e8dc <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e8dc:	b580      	push	{r7, lr}
 800e8de:	b088      	sub	sp, #32
 800e8e0:	af00      	add	r7, sp, #0
 800e8e2:	6078      	str	r0, [r7, #4]
 800e8e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800e8e6:	683b      	ldr	r3, [r7, #0]
 800e8e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800e8ea:	230d      	movs	r3, #13
 800e8ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e8ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e8f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e8f4:	2300      	movs	r3, #0
 800e8f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e8f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e8fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e8fe:	f107 0308 	add.w	r3, r7, #8
 800e902:	4619      	mov	r1, r3
 800e904:	6878      	ldr	r0, [r7, #4]
 800e906:	f7ff fd3d 	bl	800e384 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800e90a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e90e:	210d      	movs	r1, #13
 800e910:	6878      	ldr	r0, [r7, #4]
 800e912:	f000 f829 	bl	800e968 <SDMMC_GetCmdResp1>
 800e916:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e918:	69fb      	ldr	r3, [r7, #28]
}
 800e91a:	4618      	mov	r0, r3
 800e91c:	3720      	adds	r7, #32
 800e91e:	46bd      	mov	sp, r7
 800e920:	bd80      	pop	{r7, pc}

0800e922 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800e922:	b580      	push	{r7, lr}
 800e924:	b088      	sub	sp, #32
 800e926:	af00      	add	r7, sp, #0
 800e928:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800e92a:	2300      	movs	r3, #0
 800e92c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800e92e:	230d      	movs	r3, #13
 800e930:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e932:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e936:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e938:	2300      	movs	r3, #0
 800e93a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e93c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e940:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e942:	f107 0308 	add.w	r3, r7, #8
 800e946:	4619      	mov	r1, r3
 800e948:	6878      	ldr	r0, [r7, #4]
 800e94a:	f7ff fd1b 	bl	800e384 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800e94e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e952:	210d      	movs	r1, #13
 800e954:	6878      	ldr	r0, [r7, #4]
 800e956:	f000 f807 	bl	800e968 <SDMMC_GetCmdResp1>
 800e95a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e95c:	69fb      	ldr	r3, [r7, #28]
}
 800e95e:	4618      	mov	r0, r3
 800e960:	3720      	adds	r7, #32
 800e962:	46bd      	mov	sp, r7
 800e964:	bd80      	pop	{r7, pc}
	...

0800e968 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800e968:	b580      	push	{r7, lr}
 800e96a:	b088      	sub	sp, #32
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	60f8      	str	r0, [r7, #12]
 800e970:	460b      	mov	r3, r1
 800e972:	607a      	str	r2, [r7, #4]
 800e974:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e976:	4b70      	ldr	r3, [pc, #448]	@ (800eb38 <SDMMC_GetCmdResp1+0x1d0>)
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	4a70      	ldr	r2, [pc, #448]	@ (800eb3c <SDMMC_GetCmdResp1+0x1d4>)
 800e97c:	fba2 2303 	umull	r2, r3, r2, r3
 800e980:	0a5a      	lsrs	r2, r3, #9
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	fb02 f303 	mul.w	r3, r2, r3
 800e988:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800e98a:	69fb      	ldr	r3, [r7, #28]
 800e98c:	1e5a      	subs	r2, r3, #1
 800e98e:	61fa      	str	r2, [r7, #28]
 800e990:	2b00      	cmp	r3, #0
 800e992:	d102      	bne.n	800e99a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e994:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e998:	e0c9      	b.n	800eb2e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e99e:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800e9a0:	69ba      	ldr	r2, [r7, #24]
 800e9a2:	4b67      	ldr	r3, [pc, #412]	@ (800eb40 <SDMMC_GetCmdResp1+0x1d8>)
 800e9a4:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d0ef      	beq.n	800e98a <SDMMC_GetCmdResp1+0x22>
 800e9aa:	69bb      	ldr	r3, [r7, #24]
 800e9ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d1ea      	bne.n	800e98a <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e9b8:	f003 0304 	and.w	r3, r3, #4
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d004      	beq.n	800e9ca <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	2204      	movs	r2, #4
 800e9c4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e9c6:	2304      	movs	r3, #4
 800e9c8:	e0b1      	b.n	800eb2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e9ce:	f003 0301 	and.w	r3, r3, #1
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d004      	beq.n	800e9e0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	2201      	movs	r2, #1
 800e9da:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e9dc:	2301      	movs	r3, #1
 800e9de:	e0a6      	b.n	800eb2e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	4a58      	ldr	r2, [pc, #352]	@ (800eb44 <SDMMC_GetCmdResp1+0x1dc>)
 800e9e4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e9e6:	68f8      	ldr	r0, [r7, #12]
 800e9e8:	f7ff fcf6 	bl	800e3d8 <SDMMC_GetCommandResponse>
 800e9ec:	4603      	mov	r3, r0
 800e9ee:	461a      	mov	r2, r3
 800e9f0:	7afb      	ldrb	r3, [r7, #11]
 800e9f2:	4293      	cmp	r3, r2
 800e9f4:	d001      	beq.n	800e9fa <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e9f6:	2301      	movs	r3, #1
 800e9f8:	e099      	b.n	800eb2e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800e9fa:	2100      	movs	r1, #0
 800e9fc:	68f8      	ldr	r0, [r7, #12]
 800e9fe:	f7ff fcf8 	bl	800e3f2 <SDMMC_GetResponse>
 800ea02:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ea04:	697a      	ldr	r2, [r7, #20]
 800ea06:	4b50      	ldr	r3, [pc, #320]	@ (800eb48 <SDMMC_GetCmdResp1+0x1e0>)
 800ea08:	4013      	ands	r3, r2
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d101      	bne.n	800ea12 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800ea0e:	2300      	movs	r3, #0
 800ea10:	e08d      	b.n	800eb2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ea12:	697b      	ldr	r3, [r7, #20]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	da02      	bge.n	800ea1e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ea18:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ea1c:	e087      	b.n	800eb2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ea1e:	697b      	ldr	r3, [r7, #20]
 800ea20:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d001      	beq.n	800ea2c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ea28:	2340      	movs	r3, #64	@ 0x40
 800ea2a:	e080      	b.n	800eb2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ea2c:	697b      	ldr	r3, [r7, #20]
 800ea2e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d001      	beq.n	800ea3a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ea36:	2380      	movs	r3, #128	@ 0x80
 800ea38:	e079      	b.n	800eb2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ea3a:	697b      	ldr	r3, [r7, #20]
 800ea3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d002      	beq.n	800ea4a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ea44:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ea48:	e071      	b.n	800eb2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ea4a:	697b      	ldr	r3, [r7, #20]
 800ea4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d002      	beq.n	800ea5a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ea54:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ea58:	e069      	b.n	800eb2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ea5a:	697b      	ldr	r3, [r7, #20]
 800ea5c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d002      	beq.n	800ea6a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ea64:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ea68:	e061      	b.n	800eb2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ea6a:	697b      	ldr	r3, [r7, #20]
 800ea6c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d002      	beq.n	800ea7a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ea74:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ea78:	e059      	b.n	800eb2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ea7a:	697b      	ldr	r3, [r7, #20]
 800ea7c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d002      	beq.n	800ea8a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ea84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ea88:	e051      	b.n	800eb2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ea8a:	697b      	ldr	r3, [r7, #20]
 800ea8c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d002      	beq.n	800ea9a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ea94:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ea98:	e049      	b.n	800eb2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ea9a:	697b      	ldr	r3, [r7, #20]
 800ea9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d002      	beq.n	800eaaa <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800eaa4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800eaa8:	e041      	b.n	800eb2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800eaaa:	697b      	ldr	r3, [r7, #20]
 800eaac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d002      	beq.n	800eaba <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800eab4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800eab8:	e039      	b.n	800eb2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800eaba:	697b      	ldr	r3, [r7, #20]
 800eabc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d002      	beq.n	800eaca <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800eac4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800eac8:	e031      	b.n	800eb2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800eaca:	697b      	ldr	r3, [r7, #20]
 800eacc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d002      	beq.n	800eada <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ead4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800ead8:	e029      	b.n	800eb2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800eada:	697b      	ldr	r3, [r7, #20]
 800eadc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d002      	beq.n	800eaea <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800eae4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800eae8:	e021      	b.n	800eb2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800eaea:	697b      	ldr	r3, [r7, #20]
 800eaec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d002      	beq.n	800eafa <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800eaf4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800eaf8:	e019      	b.n	800eb2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800eafa:	697b      	ldr	r3, [r7, #20]
 800eafc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d002      	beq.n	800eb0a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800eb04:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800eb08:	e011      	b.n	800eb2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800eb0a:	697b      	ldr	r3, [r7, #20]
 800eb0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d002      	beq.n	800eb1a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800eb14:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800eb18:	e009      	b.n	800eb2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800eb1a:	697b      	ldr	r3, [r7, #20]
 800eb1c:	f003 0308 	and.w	r3, r3, #8
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d002      	beq.n	800eb2a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800eb24:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800eb28:	e001      	b.n	800eb2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800eb2a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800eb2e:	4618      	mov	r0, r3
 800eb30:	3720      	adds	r7, #32
 800eb32:	46bd      	mov	sp, r7
 800eb34:	bd80      	pop	{r7, pc}
 800eb36:	bf00      	nop
 800eb38:	24000000 	.word	0x24000000
 800eb3c:	10624dd3 	.word	0x10624dd3
 800eb40:	00200045 	.word	0x00200045
 800eb44:	002000c5 	.word	0x002000c5
 800eb48:	fdffe008 	.word	0xfdffe008

0800eb4c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800eb4c:	b480      	push	{r7}
 800eb4e:	b085      	sub	sp, #20
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800eb54:	4b1f      	ldr	r3, [pc, #124]	@ (800ebd4 <SDMMC_GetCmdResp2+0x88>)
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	4a1f      	ldr	r2, [pc, #124]	@ (800ebd8 <SDMMC_GetCmdResp2+0x8c>)
 800eb5a:	fba2 2303 	umull	r2, r3, r2, r3
 800eb5e:	0a5b      	lsrs	r3, r3, #9
 800eb60:	f241 3288 	movw	r2, #5000	@ 0x1388
 800eb64:	fb02 f303 	mul.w	r3, r2, r3
 800eb68:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	1e5a      	subs	r2, r3, #1
 800eb6e:	60fa      	str	r2, [r7, #12]
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d102      	bne.n	800eb7a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800eb74:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800eb78:	e026      	b.n	800ebc8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eb7e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800eb80:	68bb      	ldr	r3, [r7, #8]
 800eb82:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d0ef      	beq.n	800eb6a <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800eb8a:	68bb      	ldr	r3, [r7, #8]
 800eb8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d1ea      	bne.n	800eb6a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eb98:	f003 0304 	and.w	r3, r3, #4
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d004      	beq.n	800ebaa <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	2204      	movs	r2, #4
 800eba4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800eba6:	2304      	movs	r3, #4
 800eba8:	e00e      	b.n	800ebc8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ebae:	f003 0301 	and.w	r3, r3, #1
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d004      	beq.n	800ebc0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	2201      	movs	r2, #1
 800ebba:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ebbc:	2301      	movs	r3, #1
 800ebbe:	e003      	b.n	800ebc8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	4a06      	ldr	r2, [pc, #24]	@ (800ebdc <SDMMC_GetCmdResp2+0x90>)
 800ebc4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800ebc6:	2300      	movs	r3, #0
}
 800ebc8:	4618      	mov	r0, r3
 800ebca:	3714      	adds	r7, #20
 800ebcc:	46bd      	mov	sp, r7
 800ebce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd2:	4770      	bx	lr
 800ebd4:	24000000 	.word	0x24000000
 800ebd8:	10624dd3 	.word	0x10624dd3
 800ebdc:	002000c5 	.word	0x002000c5

0800ebe0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800ebe0:	b480      	push	{r7}
 800ebe2:	b085      	sub	sp, #20
 800ebe4:	af00      	add	r7, sp, #0
 800ebe6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ebe8:	4b1a      	ldr	r3, [pc, #104]	@ (800ec54 <SDMMC_GetCmdResp3+0x74>)
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	4a1a      	ldr	r2, [pc, #104]	@ (800ec58 <SDMMC_GetCmdResp3+0x78>)
 800ebee:	fba2 2303 	umull	r2, r3, r2, r3
 800ebf2:	0a5b      	lsrs	r3, r3, #9
 800ebf4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ebf8:	fb02 f303 	mul.w	r3, r2, r3
 800ebfc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	1e5a      	subs	r2, r3, #1
 800ec02:	60fa      	str	r2, [r7, #12]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d102      	bne.n	800ec0e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ec08:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ec0c:	e01b      	b.n	800ec46 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ec12:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ec14:	68bb      	ldr	r3, [r7, #8]
 800ec16:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d0ef      	beq.n	800ebfe <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ec1e:	68bb      	ldr	r3, [r7, #8]
 800ec20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d1ea      	bne.n	800ebfe <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ec2c:	f003 0304 	and.w	r3, r3, #4
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d004      	beq.n	800ec3e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	2204      	movs	r2, #4
 800ec38:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ec3a:	2304      	movs	r3, #4
 800ec3c:	e003      	b.n	800ec46 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	4a06      	ldr	r2, [pc, #24]	@ (800ec5c <SDMMC_GetCmdResp3+0x7c>)
 800ec42:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800ec44:	2300      	movs	r3, #0
}
 800ec46:	4618      	mov	r0, r3
 800ec48:	3714      	adds	r7, #20
 800ec4a:	46bd      	mov	sp, r7
 800ec4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec50:	4770      	bx	lr
 800ec52:	bf00      	nop
 800ec54:	24000000 	.word	0x24000000
 800ec58:	10624dd3 	.word	0x10624dd3
 800ec5c:	002000c5 	.word	0x002000c5

0800ec60 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800ec60:	b580      	push	{r7, lr}
 800ec62:	b088      	sub	sp, #32
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	60f8      	str	r0, [r7, #12]
 800ec68:	460b      	mov	r3, r1
 800ec6a:	607a      	str	r2, [r7, #4]
 800ec6c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ec6e:	4b35      	ldr	r3, [pc, #212]	@ (800ed44 <SDMMC_GetCmdResp6+0xe4>)
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	4a35      	ldr	r2, [pc, #212]	@ (800ed48 <SDMMC_GetCmdResp6+0xe8>)
 800ec74:	fba2 2303 	umull	r2, r3, r2, r3
 800ec78:	0a5b      	lsrs	r3, r3, #9
 800ec7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ec7e:	fb02 f303 	mul.w	r3, r2, r3
 800ec82:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800ec84:	69fb      	ldr	r3, [r7, #28]
 800ec86:	1e5a      	subs	r2, r3, #1
 800ec88:	61fa      	str	r2, [r7, #28]
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d102      	bne.n	800ec94 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ec8e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ec92:	e052      	b.n	800ed3a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ec98:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ec9a:	69bb      	ldr	r3, [r7, #24]
 800ec9c:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d0ef      	beq.n	800ec84 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800eca4:	69bb      	ldr	r3, [r7, #24]
 800eca6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d1ea      	bne.n	800ec84 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ecb2:	f003 0304 	and.w	r3, r3, #4
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d004      	beq.n	800ecc4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	2204      	movs	r2, #4
 800ecbe:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ecc0:	2304      	movs	r3, #4
 800ecc2:	e03a      	b.n	800ed3a <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ecc8:	f003 0301 	and.w	r3, r3, #1
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d004      	beq.n	800ecda <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	2201      	movs	r2, #1
 800ecd4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ecd6:	2301      	movs	r3, #1
 800ecd8:	e02f      	b.n	800ed3a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ecda:	68f8      	ldr	r0, [r7, #12]
 800ecdc:	f7ff fb7c 	bl	800e3d8 <SDMMC_GetCommandResponse>
 800ece0:	4603      	mov	r3, r0
 800ece2:	461a      	mov	r2, r3
 800ece4:	7afb      	ldrb	r3, [r7, #11]
 800ece6:	4293      	cmp	r3, r2
 800ece8:	d001      	beq.n	800ecee <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ecea:	2301      	movs	r3, #1
 800ecec:	e025      	b.n	800ed3a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	4a16      	ldr	r2, [pc, #88]	@ (800ed4c <SDMMC_GetCmdResp6+0xec>)
 800ecf2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ecf4:	2100      	movs	r1, #0
 800ecf6:	68f8      	ldr	r0, [r7, #12]
 800ecf8:	f7ff fb7b 	bl	800e3f2 <SDMMC_GetResponse>
 800ecfc:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800ecfe:	697b      	ldr	r3, [r7, #20]
 800ed00:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d106      	bne.n	800ed16 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800ed08:	697b      	ldr	r3, [r7, #20]
 800ed0a:	0c1b      	lsrs	r3, r3, #16
 800ed0c:	b29a      	uxth	r2, r3
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800ed12:	2300      	movs	r3, #0
 800ed14:	e011      	b.n	800ed3a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ed16:	697b      	ldr	r3, [r7, #20]
 800ed18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d002      	beq.n	800ed26 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ed20:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ed24:	e009      	b.n	800ed3a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800ed26:	697b      	ldr	r3, [r7, #20]
 800ed28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d002      	beq.n	800ed36 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ed30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ed34:	e001      	b.n	800ed3a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ed36:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800ed3a:	4618      	mov	r0, r3
 800ed3c:	3720      	adds	r7, #32
 800ed3e:	46bd      	mov	sp, r7
 800ed40:	bd80      	pop	{r7, pc}
 800ed42:	bf00      	nop
 800ed44:	24000000 	.word	0x24000000
 800ed48:	10624dd3 	.word	0x10624dd3
 800ed4c:	002000c5 	.word	0x002000c5

0800ed50 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800ed50:	b480      	push	{r7}
 800ed52:	b085      	sub	sp, #20
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ed58:	4b22      	ldr	r3, [pc, #136]	@ (800ede4 <SDMMC_GetCmdResp7+0x94>)
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	4a22      	ldr	r2, [pc, #136]	@ (800ede8 <SDMMC_GetCmdResp7+0x98>)
 800ed5e:	fba2 2303 	umull	r2, r3, r2, r3
 800ed62:	0a5b      	lsrs	r3, r3, #9
 800ed64:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ed68:	fb02 f303 	mul.w	r3, r2, r3
 800ed6c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	1e5a      	subs	r2, r3, #1
 800ed72:	60fa      	str	r2, [r7, #12]
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d102      	bne.n	800ed7e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ed78:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ed7c:	e02c      	b.n	800edd8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ed82:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ed84:	68bb      	ldr	r3, [r7, #8]
 800ed86:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d0ef      	beq.n	800ed6e <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ed8e:	68bb      	ldr	r3, [r7, #8]
 800ed90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d1ea      	bne.n	800ed6e <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ed9c:	f003 0304 	and.w	r3, r3, #4
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d004      	beq.n	800edae <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	2204      	movs	r2, #4
 800eda8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800edaa:	2304      	movs	r3, #4
 800edac:	e014      	b.n	800edd8 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800edb2:	f003 0301 	and.w	r3, r3, #1
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d004      	beq.n	800edc4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	2201      	movs	r2, #1
 800edbe:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800edc0:	2301      	movs	r3, #1
 800edc2:	e009      	b.n	800edd8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800edc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d002      	beq.n	800edd6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	2240      	movs	r2, #64	@ 0x40
 800edd4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800edd6:	2300      	movs	r3, #0

}
 800edd8:	4618      	mov	r0, r3
 800edda:	3714      	adds	r7, #20
 800eddc:	46bd      	mov	sp, r7
 800edde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede2:	4770      	bx	lr
 800ede4:	24000000 	.word	0x24000000
 800ede8:	10624dd3 	.word	0x10624dd3

0800edec <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800edec:	b480      	push	{r7}
 800edee:	b085      	sub	sp, #20
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800edf4:	4b11      	ldr	r3, [pc, #68]	@ (800ee3c <SDMMC_GetCmdError+0x50>)
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	4a11      	ldr	r2, [pc, #68]	@ (800ee40 <SDMMC_GetCmdError+0x54>)
 800edfa:	fba2 2303 	umull	r2, r3, r2, r3
 800edfe:	0a5b      	lsrs	r3, r3, #9
 800ee00:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ee04:	fb02 f303 	mul.w	r3, r2, r3
 800ee08:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	1e5a      	subs	r2, r3, #1
 800ee0e:	60fa      	str	r2, [r7, #12]
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d102      	bne.n	800ee1a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ee14:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ee18:	e009      	b.n	800ee2e <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ee1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d0f1      	beq.n	800ee0a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	4a06      	ldr	r2, [pc, #24]	@ (800ee44 <SDMMC_GetCmdError+0x58>)
 800ee2a:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800ee2c:	2300      	movs	r3, #0
}
 800ee2e:	4618      	mov	r0, r3
 800ee30:	3714      	adds	r7, #20
 800ee32:	46bd      	mov	sp, r7
 800ee34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee38:	4770      	bx	lr
 800ee3a:	bf00      	nop
 800ee3c:	24000000 	.word	0x24000000
 800ee40:	10624dd3 	.word	0x10624dd3
 800ee44:	002000c5 	.word	0x002000c5

0800ee48 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ee48:	b580      	push	{r7, lr}
 800ee4a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800ee4c:	4904      	ldr	r1, [pc, #16]	@ (800ee60 <MX_FATFS_Init+0x18>)
 800ee4e:	4805      	ldr	r0, [pc, #20]	@ (800ee64 <MX_FATFS_Init+0x1c>)
 800ee50:	f002 fd3e 	bl	80118d0 <FATFS_LinkDriver>
 800ee54:	4603      	mov	r3, r0
 800ee56:	461a      	mov	r2, r3
 800ee58:	4b03      	ldr	r3, [pc, #12]	@ (800ee68 <MX_FATFS_Init+0x20>)
 800ee5a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ee5c:	bf00      	nop
 800ee5e:	bd80      	pop	{r7, pc}
 800ee60:	2400093c 	.word	0x2400093c
 800ee64:	08017770 	.word	0x08017770
 800ee68:	24000938 	.word	0x24000938

0800ee6c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800ee6c:	b480      	push	{r7}
 800ee6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800ee70:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800ee72:	4618      	mov	r0, r3
 800ee74:	46bd      	mov	sp, r7
 800ee76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee7a:	4770      	bx	lr

0800ee7c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800ee7c:	b580      	push	{r7, lr}
 800ee7e:	b082      	sub	sp, #8
 800ee80:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800ee82:	2300      	movs	r3, #0
 800ee84:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800ee86:	f000 f885 	bl	800ef94 <BSP_SD_IsDetected>
 800ee8a:	4603      	mov	r3, r0
 800ee8c:	2b01      	cmp	r3, #1
 800ee8e:	d001      	beq.n	800ee94 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800ee90:	2302      	movs	r3, #2
 800ee92:	e012      	b.n	800eeba <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800ee94:	480b      	ldr	r0, [pc, #44]	@ (800eec4 <BSP_SD_Init+0x48>)
 800ee96:	f7f9 fdc5 	bl	8008a24 <HAL_SD_Init>
 800ee9a:	4603      	mov	r3, r0
 800ee9c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800ee9e:	79fb      	ldrb	r3, [r7, #7]
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d109      	bne.n	800eeb8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800eea4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800eea8:	4806      	ldr	r0, [pc, #24]	@ (800eec4 <BSP_SD_Init+0x48>)
 800eeaa:	f7fa fc7b 	bl	80097a4 <HAL_SD_ConfigWideBusOperation>
 800eeae:	4603      	mov	r3, r0
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d001      	beq.n	800eeb8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800eeb4:	2301      	movs	r3, #1
 800eeb6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800eeb8:	79fb      	ldrb	r3, [r7, #7]
}
 800eeba:	4618      	mov	r0, r3
 800eebc:	3708      	adds	r7, #8
 800eebe:	46bd      	mov	sp, r7
 800eec0:	bd80      	pop	{r7, pc}
 800eec2:	bf00      	nop
 800eec4:	2400008c 	.word	0x2400008c

0800eec8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800eec8:	b580      	push	{r7, lr}
 800eeca:	b086      	sub	sp, #24
 800eecc:	af00      	add	r7, sp, #0
 800eece:	60f8      	str	r0, [r7, #12]
 800eed0:	60b9      	str	r1, [r7, #8]
 800eed2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800eed4:	2300      	movs	r3, #0
 800eed6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	68ba      	ldr	r2, [r7, #8]
 800eedc:	68f9      	ldr	r1, [r7, #12]
 800eede:	4806      	ldr	r0, [pc, #24]	@ (800eef8 <BSP_SD_ReadBlocks_DMA+0x30>)
 800eee0:	f7f9 fec0 	bl	8008c64 <HAL_SD_ReadBlocks_DMA>
 800eee4:	4603      	mov	r3, r0
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d001      	beq.n	800eeee <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800eeea:	2301      	movs	r3, #1
 800eeec:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800eeee:	7dfb      	ldrb	r3, [r7, #23]
}
 800eef0:	4618      	mov	r0, r3
 800eef2:	3718      	adds	r7, #24
 800eef4:	46bd      	mov	sp, r7
 800eef6:	bd80      	pop	{r7, pc}
 800eef8:	2400008c 	.word	0x2400008c

0800eefc <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800eefc:	b580      	push	{r7, lr}
 800eefe:	b086      	sub	sp, #24
 800ef00:	af00      	add	r7, sp, #0
 800ef02:	60f8      	str	r0, [r7, #12]
 800ef04:	60b9      	str	r1, [r7, #8]
 800ef06:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ef08:	2300      	movs	r3, #0
 800ef0a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	68ba      	ldr	r2, [r7, #8]
 800ef10:	68f9      	ldr	r1, [r7, #12]
 800ef12:	4806      	ldr	r0, [pc, #24]	@ (800ef2c <BSP_SD_WriteBlocks_DMA+0x30>)
 800ef14:	f7f9 ff4e 	bl	8008db4 <HAL_SD_WriteBlocks_DMA>
 800ef18:	4603      	mov	r3, r0
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d001      	beq.n	800ef22 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ef1e:	2301      	movs	r3, #1
 800ef20:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ef22:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef24:	4618      	mov	r0, r3
 800ef26:	3718      	adds	r7, #24
 800ef28:	46bd      	mov	sp, r7
 800ef2a:	bd80      	pop	{r7, pc}
 800ef2c:	2400008c 	.word	0x2400008c

0800ef30 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800ef30:	b580      	push	{r7, lr}
 800ef32:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800ef34:	4805      	ldr	r0, [pc, #20]	@ (800ef4c <BSP_SD_GetCardState+0x1c>)
 800ef36:	f7fa fd47 	bl	80099c8 <HAL_SD_GetCardState>
 800ef3a:	4603      	mov	r3, r0
 800ef3c:	2b04      	cmp	r3, #4
 800ef3e:	bf14      	ite	ne
 800ef40:	2301      	movne	r3, #1
 800ef42:	2300      	moveq	r3, #0
 800ef44:	b2db      	uxtb	r3, r3
}
 800ef46:	4618      	mov	r0, r3
 800ef48:	bd80      	pop	{r7, pc}
 800ef4a:	bf00      	nop
 800ef4c:	2400008c 	.word	0x2400008c

0800ef50 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800ef50:	b580      	push	{r7, lr}
 800ef52:	b082      	sub	sp, #8
 800ef54:	af00      	add	r7, sp, #0
 800ef56:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800ef58:	6879      	ldr	r1, [r7, #4]
 800ef5a:	4803      	ldr	r0, [pc, #12]	@ (800ef68 <BSP_SD_GetCardInfo+0x18>)
 800ef5c:	f7fa fbf6 	bl	800974c <HAL_SD_GetCardInfo>
}
 800ef60:	bf00      	nop
 800ef62:	3708      	adds	r7, #8
 800ef64:	46bd      	mov	sp, r7
 800ef66:	bd80      	pop	{r7, pc}
 800ef68:	2400008c 	.word	0x2400008c

0800ef6c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ef6c:	b580      	push	{r7, lr}
 800ef6e:	b082      	sub	sp, #8
 800ef70:	af00      	add	r7, sp, #0
 800ef72:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800ef74:	f000 f990 	bl	800f298 <BSP_SD_WriteCpltCallback>
}
 800ef78:	bf00      	nop
 800ef7a:	3708      	adds	r7, #8
 800ef7c:	46bd      	mov	sp, r7
 800ef7e:	bd80      	pop	{r7, pc}

0800ef80 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ef80:	b580      	push	{r7, lr}
 800ef82:	b082      	sub	sp, #8
 800ef84:	af00      	add	r7, sp, #0
 800ef86:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800ef88:	f000 f998 	bl	800f2bc <BSP_SD_ReadCpltCallback>
}
 800ef8c:	bf00      	nop
 800ef8e:	3708      	adds	r7, #8
 800ef90:	46bd      	mov	sp, r7
 800ef92:	bd80      	pop	{r7, pc}

0800ef94 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800ef94:	b480      	push	{r7}
 800ef96:	b083      	sub	sp, #12
 800ef98:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800ef9a:	2301      	movs	r3, #1
 800ef9c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 800ef9e:	79fb      	ldrb	r3, [r7, #7]
 800efa0:	b2db      	uxtb	r3, r3
}
 800efa2:	4618      	mov	r0, r3
 800efa4:	370c      	adds	r7, #12
 800efa6:	46bd      	mov	sp, r7
 800efa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efac:	4770      	bx	lr

0800efae <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800efae:	b580      	push	{r7, lr}
 800efb0:	b084      	sub	sp, #16
 800efb2:	af00      	add	r7, sp, #0
 800efb4:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 800efb6:	f002 fd91 	bl	8011adc <osKernelGetTickCount>
 800efba:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 800efbc:	e006      	b.n	800efcc <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800efbe:	f7ff ffb7 	bl	800ef30 <BSP_SD_GetCardState>
 800efc2:	4603      	mov	r3, r0
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d101      	bne.n	800efcc <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800efc8:	2300      	movs	r3, #0
 800efca:	e009      	b.n	800efe0 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 800efcc:	f002 fd86 	bl	8011adc <osKernelGetTickCount>
 800efd0:	4602      	mov	r2, r0
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	1ad3      	subs	r3, r2, r3
 800efd6:	687a      	ldr	r2, [r7, #4]
 800efd8:	429a      	cmp	r2, r3
 800efda:	d8f0      	bhi.n	800efbe <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800efdc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800efe0:	4618      	mov	r0, r3
 800efe2:	3710      	adds	r7, #16
 800efe4:	46bd      	mov	sp, r7
 800efe6:	bd80      	pop	{r7, pc}

0800efe8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800efe8:	b580      	push	{r7, lr}
 800efea:	b082      	sub	sp, #8
 800efec:	af00      	add	r7, sp, #0
 800efee:	4603      	mov	r3, r0
 800eff0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800eff2:	4b0b      	ldr	r3, [pc, #44]	@ (800f020 <SD_CheckStatus+0x38>)
 800eff4:	2201      	movs	r2, #1
 800eff6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800eff8:	f7ff ff9a 	bl	800ef30 <BSP_SD_GetCardState>
 800effc:	4603      	mov	r3, r0
 800effe:	2b00      	cmp	r3, #0
 800f000:	d107      	bne.n	800f012 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800f002:	4b07      	ldr	r3, [pc, #28]	@ (800f020 <SD_CheckStatus+0x38>)
 800f004:	781b      	ldrb	r3, [r3, #0]
 800f006:	b2db      	uxtb	r3, r3
 800f008:	f023 0301 	bic.w	r3, r3, #1
 800f00c:	b2da      	uxtb	r2, r3
 800f00e:	4b04      	ldr	r3, [pc, #16]	@ (800f020 <SD_CheckStatus+0x38>)
 800f010:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800f012:	4b03      	ldr	r3, [pc, #12]	@ (800f020 <SD_CheckStatus+0x38>)
 800f014:	781b      	ldrb	r3, [r3, #0]
 800f016:	b2db      	uxtb	r3, r3
}
 800f018:	4618      	mov	r0, r3
 800f01a:	3708      	adds	r7, #8
 800f01c:	46bd      	mov	sp, r7
 800f01e:	bd80      	pop	{r7, pc}
 800f020:	2400000d 	.word	0x2400000d

0800f024 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800f024:	b580      	push	{r7, lr}
 800f026:	b082      	sub	sp, #8
 800f028:	af00      	add	r7, sp, #0
 800f02a:	4603      	mov	r3, r0
 800f02c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800f02e:	4b1c      	ldr	r3, [pc, #112]	@ (800f0a0 <SD_initialize+0x7c>)
 800f030:	2201      	movs	r2, #1
 800f032:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800f034:	f002 fd0a 	bl	8011a4c <osKernelGetState>
 800f038:	4603      	mov	r3, r0
 800f03a:	2b02      	cmp	r3, #2
 800f03c:	d129      	bne.n	800f092 <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800f03e:	f7ff ff1d 	bl	800ee7c <BSP_SD_Init>
 800f042:	4603      	mov	r3, r0
 800f044:	2b00      	cmp	r3, #0
 800f046:	d107      	bne.n	800f058 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800f048:	79fb      	ldrb	r3, [r7, #7]
 800f04a:	4618      	mov	r0, r3
 800f04c:	f7ff ffcc 	bl	800efe8 <SD_CheckStatus>
 800f050:	4603      	mov	r3, r0
 800f052:	461a      	mov	r2, r3
 800f054:	4b12      	ldr	r3, [pc, #72]	@ (800f0a0 <SD_initialize+0x7c>)
 800f056:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800f058:	4b11      	ldr	r3, [pc, #68]	@ (800f0a0 <SD_initialize+0x7c>)
 800f05a:	781b      	ldrb	r3, [r3, #0]
 800f05c:	b2db      	uxtb	r3, r3
 800f05e:	2b01      	cmp	r3, #1
 800f060:	d017      	beq.n	800f092 <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800f062:	4b10      	ldr	r3, [pc, #64]	@ (800f0a4 <SD_initialize+0x80>)
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	2b00      	cmp	r3, #0
 800f068:	d107      	bne.n	800f07a <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800f06a:	2200      	movs	r2, #0
 800f06c:	2102      	movs	r1, #2
 800f06e:	200a      	movs	r0, #10
 800f070:	f002 ff44 	bl	8011efc <osMessageQueueNew>
 800f074:	4603      	mov	r3, r0
 800f076:	4a0b      	ldr	r2, [pc, #44]	@ (800f0a4 <SD_initialize+0x80>)
 800f078:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 800f07a:	4b0a      	ldr	r3, [pc, #40]	@ (800f0a4 <SD_initialize+0x80>)
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d107      	bne.n	800f092 <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 800f082:	4b07      	ldr	r3, [pc, #28]	@ (800f0a0 <SD_initialize+0x7c>)
 800f084:	781b      	ldrb	r3, [r3, #0]
 800f086:	b2db      	uxtb	r3, r3
 800f088:	f043 0301 	orr.w	r3, r3, #1
 800f08c:	b2da      	uxtb	r2, r3
 800f08e:	4b04      	ldr	r3, [pc, #16]	@ (800f0a0 <SD_initialize+0x7c>)
 800f090:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800f092:	4b03      	ldr	r3, [pc, #12]	@ (800f0a0 <SD_initialize+0x7c>)
 800f094:	781b      	ldrb	r3, [r3, #0]
 800f096:	b2db      	uxtb	r3, r3
}
 800f098:	4618      	mov	r0, r3
 800f09a:	3708      	adds	r7, #8
 800f09c:	46bd      	mov	sp, r7
 800f09e:	bd80      	pop	{r7, pc}
 800f0a0:	2400000d 	.word	0x2400000d
 800f0a4:	24000940 	.word	0x24000940

0800f0a8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800f0a8:	b580      	push	{r7, lr}
 800f0aa:	b082      	sub	sp, #8
 800f0ac:	af00      	add	r7, sp, #0
 800f0ae:	4603      	mov	r3, r0
 800f0b0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800f0b2:	79fb      	ldrb	r3, [r7, #7]
 800f0b4:	4618      	mov	r0, r3
 800f0b6:	f7ff ff97 	bl	800efe8 <SD_CheckStatus>
 800f0ba:	4603      	mov	r3, r0
}
 800f0bc:	4618      	mov	r0, r3
 800f0be:	3708      	adds	r7, #8
 800f0c0:	46bd      	mov	sp, r7
 800f0c2:	bd80      	pop	{r7, pc}

0800f0c4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800f0c4:	b580      	push	{r7, lr}
 800f0c6:	b088      	sub	sp, #32
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	60b9      	str	r1, [r7, #8]
 800f0cc:	607a      	str	r2, [r7, #4]
 800f0ce:	603b      	str	r3, [r7, #0]
 800f0d0:	4603      	mov	r3, r0
 800f0d2:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800f0d4:	2301      	movs	r3, #1
 800f0d6:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800f0d8:	f247 5030 	movw	r0, #30000	@ 0x7530
 800f0dc:	f7ff ff67 	bl	800efae <SD_CheckStatusWithTimeout>
 800f0e0:	4603      	mov	r3, r0
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	da01      	bge.n	800f0ea <SD_read+0x26>
  {
    return res;
 800f0e6:	7ffb      	ldrb	r3, [r7, #31]
 800f0e8:	e02f      	b.n	800f14a <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800f0ea:	683a      	ldr	r2, [r7, #0]
 800f0ec:	6879      	ldr	r1, [r7, #4]
 800f0ee:	68b8      	ldr	r0, [r7, #8]
 800f0f0:	f7ff feea 	bl	800eec8 <BSP_SD_ReadBlocks_DMA>
 800f0f4:	4603      	mov	r3, r0
 800f0f6:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 800f0f8:	7fbb      	ldrb	r3, [r7, #30]
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d124      	bne.n	800f148 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800f0fe:	4b15      	ldr	r3, [pc, #84]	@ (800f154 <SD_read+0x90>)
 800f100:	6818      	ldr	r0, [r3, #0]
 800f102:	f107 0112 	add.w	r1, r7, #18
 800f106:	f247 5330 	movw	r3, #30000	@ 0x7530
 800f10a:	2200      	movs	r2, #0
 800f10c:	f002 ffca 	bl	80120a4 <osMessageQueueGet>
 800f110:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800f112:	69bb      	ldr	r3, [r7, #24]
 800f114:	2b00      	cmp	r3, #0
 800f116:	d117      	bne.n	800f148 <SD_read+0x84>
 800f118:	8a7b      	ldrh	r3, [r7, #18]
 800f11a:	2b01      	cmp	r3, #1
 800f11c:	d114      	bne.n	800f148 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800f11e:	f002 fcdd 	bl	8011adc <osKernelGetTickCount>
 800f122:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800f124:	e007      	b.n	800f136 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f126:	f7ff ff03 	bl	800ef30 <BSP_SD_GetCardState>
 800f12a:	4603      	mov	r3, r0
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d102      	bne.n	800f136 <SD_read+0x72>
              {
                res = RES_OK;
 800f130:	2300      	movs	r3, #0
 800f132:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800f134:	e008      	b.n	800f148 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800f136:	f002 fcd1 	bl	8011adc <osKernelGetTickCount>
 800f13a:	4602      	mov	r2, r0
 800f13c:	697b      	ldr	r3, [r7, #20]
 800f13e:	1ad3      	subs	r3, r2, r3
 800f140:	f247 522f 	movw	r2, #29999	@ 0x752f
 800f144:	4293      	cmp	r3, r2
 800f146:	d9ee      	bls.n	800f126 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800f148:	7ffb      	ldrb	r3, [r7, #31]
}
 800f14a:	4618      	mov	r0, r3
 800f14c:	3720      	adds	r7, #32
 800f14e:	46bd      	mov	sp, r7
 800f150:	bd80      	pop	{r7, pc}
 800f152:	bf00      	nop
 800f154:	24000940 	.word	0x24000940

0800f158 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800f158:	b580      	push	{r7, lr}
 800f15a:	b088      	sub	sp, #32
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	60b9      	str	r1, [r7, #8]
 800f160:	607a      	str	r2, [r7, #4]
 800f162:	603b      	str	r3, [r7, #0]
 800f164:	4603      	mov	r3, r0
 800f166:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f168:	2301      	movs	r3, #1
 800f16a:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800f16c:	f247 5030 	movw	r0, #30000	@ 0x7530
 800f170:	f7ff ff1d 	bl	800efae <SD_CheckStatusWithTimeout>
 800f174:	4603      	mov	r3, r0
 800f176:	2b00      	cmp	r3, #0
 800f178:	da01      	bge.n	800f17e <SD_write+0x26>
  {
    return res;
 800f17a:	7ffb      	ldrb	r3, [r7, #31]
 800f17c:	e02d      	b.n	800f1da <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800f17e:	683a      	ldr	r2, [r7, #0]
 800f180:	6879      	ldr	r1, [r7, #4]
 800f182:	68b8      	ldr	r0, [r7, #8]
 800f184:	f7ff feba 	bl	800eefc <BSP_SD_WriteBlocks_DMA>
 800f188:	4603      	mov	r3, r0
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d124      	bne.n	800f1d8 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800f18e:	4b15      	ldr	r3, [pc, #84]	@ (800f1e4 <SD_write+0x8c>)
 800f190:	6818      	ldr	r0, [r3, #0]
 800f192:	f107 0112 	add.w	r1, r7, #18
 800f196:	f247 5330 	movw	r3, #30000	@ 0x7530
 800f19a:	2200      	movs	r2, #0
 800f19c:	f002 ff82 	bl	80120a4 <osMessageQueueGet>
 800f1a0:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800f1a2:	69bb      	ldr	r3, [r7, #24]
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d117      	bne.n	800f1d8 <SD_write+0x80>
 800f1a8:	8a7b      	ldrh	r3, [r7, #18]
 800f1aa:	2b02      	cmp	r3, #2
 800f1ac:	d114      	bne.n	800f1d8 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 800f1ae:	f002 fc95 	bl	8011adc <osKernelGetTickCount>
 800f1b2:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800f1b4:	e007      	b.n	800f1c6 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f1b6:	f7ff febb 	bl	800ef30 <BSP_SD_GetCardState>
 800f1ba:	4603      	mov	r3, r0
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d102      	bne.n	800f1c6 <SD_write+0x6e>
          {
            res = RES_OK;
 800f1c0:	2300      	movs	r3, #0
 800f1c2:	77fb      	strb	r3, [r7, #31]
            break;
 800f1c4:	e008      	b.n	800f1d8 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800f1c6:	f002 fc89 	bl	8011adc <osKernelGetTickCount>
 800f1ca:	4602      	mov	r2, r0
 800f1cc:	697b      	ldr	r3, [r7, #20]
 800f1ce:	1ad3      	subs	r3, r2, r3
 800f1d0:	f247 522f 	movw	r2, #29999	@ 0x752f
 800f1d4:	4293      	cmp	r3, r2
 800f1d6:	d9ee      	bls.n	800f1b6 <SD_write+0x5e>
    }

  }
#endif

  return res;
 800f1d8:	7ffb      	ldrb	r3, [r7, #31]
}
 800f1da:	4618      	mov	r0, r3
 800f1dc:	3720      	adds	r7, #32
 800f1de:	46bd      	mov	sp, r7
 800f1e0:	bd80      	pop	{r7, pc}
 800f1e2:	bf00      	nop
 800f1e4:	24000940 	.word	0x24000940

0800f1e8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800f1e8:	b580      	push	{r7, lr}
 800f1ea:	b08c      	sub	sp, #48	@ 0x30
 800f1ec:	af00      	add	r7, sp, #0
 800f1ee:	4603      	mov	r3, r0
 800f1f0:	603a      	str	r2, [r7, #0]
 800f1f2:	71fb      	strb	r3, [r7, #7]
 800f1f4:	460b      	mov	r3, r1
 800f1f6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800f1f8:	2301      	movs	r3, #1
 800f1fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800f1fe:	4b25      	ldr	r3, [pc, #148]	@ (800f294 <SD_ioctl+0xac>)
 800f200:	781b      	ldrb	r3, [r3, #0]
 800f202:	b2db      	uxtb	r3, r3
 800f204:	f003 0301 	and.w	r3, r3, #1
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d001      	beq.n	800f210 <SD_ioctl+0x28>
 800f20c:	2303      	movs	r3, #3
 800f20e:	e03c      	b.n	800f28a <SD_ioctl+0xa2>

  switch (cmd)
 800f210:	79bb      	ldrb	r3, [r7, #6]
 800f212:	2b03      	cmp	r3, #3
 800f214:	d834      	bhi.n	800f280 <SD_ioctl+0x98>
 800f216:	a201      	add	r2, pc, #4	@ (adr r2, 800f21c <SD_ioctl+0x34>)
 800f218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f21c:	0800f22d 	.word	0x0800f22d
 800f220:	0800f235 	.word	0x0800f235
 800f224:	0800f24d 	.word	0x0800f24d
 800f228:	0800f267 	.word	0x0800f267
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800f22c:	2300      	movs	r3, #0
 800f22e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f232:	e028      	b.n	800f286 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800f234:	f107 0308 	add.w	r3, r7, #8
 800f238:	4618      	mov	r0, r3
 800f23a:	f7ff fe89 	bl	800ef50 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800f23e:	6a3a      	ldr	r2, [r7, #32]
 800f240:	683b      	ldr	r3, [r7, #0]
 800f242:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f244:	2300      	movs	r3, #0
 800f246:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f24a:	e01c      	b.n	800f286 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f24c:	f107 0308 	add.w	r3, r7, #8
 800f250:	4618      	mov	r0, r3
 800f252:	f7ff fe7d 	bl	800ef50 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800f256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f258:	b29a      	uxth	r2, r3
 800f25a:	683b      	ldr	r3, [r7, #0]
 800f25c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800f25e:	2300      	movs	r3, #0
 800f260:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f264:	e00f      	b.n	800f286 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f266:	f107 0308 	add.w	r3, r7, #8
 800f26a:	4618      	mov	r0, r3
 800f26c:	f7ff fe70 	bl	800ef50 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800f270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f272:	0a5a      	lsrs	r2, r3, #9
 800f274:	683b      	ldr	r3, [r7, #0]
 800f276:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f278:	2300      	movs	r3, #0
 800f27a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f27e:	e002      	b.n	800f286 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800f280:	2304      	movs	r3, #4
 800f282:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800f286:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800f28a:	4618      	mov	r0, r3
 800f28c:	3730      	adds	r7, #48	@ 0x30
 800f28e:	46bd      	mov	sp, r7
 800f290:	bd80      	pop	{r7, pc}
 800f292:	bf00      	nop
 800f294:	2400000d 	.word	0x2400000d

0800f298 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800f298:	b580      	push	{r7, lr}
 800f29a:	b082      	sub	sp, #8
 800f29c:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 800f29e:	2302      	movs	r3, #2
 800f2a0:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800f2a2:	4b05      	ldr	r3, [pc, #20]	@ (800f2b8 <BSP_SD_WriteCpltCallback+0x20>)
 800f2a4:	6818      	ldr	r0, [r3, #0]
 800f2a6:	1db9      	adds	r1, r7, #6
 800f2a8:	2300      	movs	r3, #0
 800f2aa:	2200      	movs	r2, #0
 800f2ac:	f002 fe9a 	bl	8011fe4 <osMessageQueuePut>
#endif
}
 800f2b0:	bf00      	nop
 800f2b2:	3708      	adds	r7, #8
 800f2b4:	46bd      	mov	sp, r7
 800f2b6:	bd80      	pop	{r7, pc}
 800f2b8:	24000940 	.word	0x24000940

0800f2bc <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800f2bc:	b580      	push	{r7, lr}
 800f2be:	b082      	sub	sp, #8
 800f2c0:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 800f2c2:	2301      	movs	r3, #1
 800f2c4:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800f2c6:	4b05      	ldr	r3, [pc, #20]	@ (800f2dc <BSP_SD_ReadCpltCallback+0x20>)
 800f2c8:	6818      	ldr	r0, [r3, #0]
 800f2ca:	1db9      	adds	r1, r7, #6
 800f2cc:	2300      	movs	r3, #0
 800f2ce:	2200      	movs	r2, #0
 800f2d0:	f002 fe88 	bl	8011fe4 <osMessageQueuePut>
#endif
}
 800f2d4:	bf00      	nop
 800f2d6:	3708      	adds	r7, #8
 800f2d8:	46bd      	mov	sp, r7
 800f2da:	bd80      	pop	{r7, pc}
 800f2dc:	24000940 	.word	0x24000940

0800f2e0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800f2e0:	b580      	push	{r7, lr}
 800f2e2:	b084      	sub	sp, #16
 800f2e4:	af00      	add	r7, sp, #0
 800f2e6:	4603      	mov	r3, r0
 800f2e8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800f2ea:	79fb      	ldrb	r3, [r7, #7]
 800f2ec:	4a08      	ldr	r2, [pc, #32]	@ (800f310 <disk_status+0x30>)
 800f2ee:	009b      	lsls	r3, r3, #2
 800f2f0:	4413      	add	r3, r2
 800f2f2:	685b      	ldr	r3, [r3, #4]
 800f2f4:	685b      	ldr	r3, [r3, #4]
 800f2f6:	79fa      	ldrb	r2, [r7, #7]
 800f2f8:	4905      	ldr	r1, [pc, #20]	@ (800f310 <disk_status+0x30>)
 800f2fa:	440a      	add	r2, r1
 800f2fc:	7a12      	ldrb	r2, [r2, #8]
 800f2fe:	4610      	mov	r0, r2
 800f300:	4798      	blx	r3
 800f302:	4603      	mov	r3, r0
 800f304:	73fb      	strb	r3, [r7, #15]
  return stat;
 800f306:	7bfb      	ldrb	r3, [r7, #15]
}
 800f308:	4618      	mov	r0, r3
 800f30a:	3710      	adds	r7, #16
 800f30c:	46bd      	mov	sp, r7
 800f30e:	bd80      	pop	{r7, pc}
 800f310:	2400096c 	.word	0x2400096c

0800f314 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800f314:	b580      	push	{r7, lr}
 800f316:	b084      	sub	sp, #16
 800f318:	af00      	add	r7, sp, #0
 800f31a:	4603      	mov	r3, r0
 800f31c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800f31e:	2300      	movs	r3, #0
 800f320:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800f322:	79fb      	ldrb	r3, [r7, #7]
 800f324:	4a0d      	ldr	r2, [pc, #52]	@ (800f35c <disk_initialize+0x48>)
 800f326:	5cd3      	ldrb	r3, [r2, r3]
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d111      	bne.n	800f350 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800f32c:	79fb      	ldrb	r3, [r7, #7]
 800f32e:	4a0b      	ldr	r2, [pc, #44]	@ (800f35c <disk_initialize+0x48>)
 800f330:	2101      	movs	r1, #1
 800f332:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800f334:	79fb      	ldrb	r3, [r7, #7]
 800f336:	4a09      	ldr	r2, [pc, #36]	@ (800f35c <disk_initialize+0x48>)
 800f338:	009b      	lsls	r3, r3, #2
 800f33a:	4413      	add	r3, r2
 800f33c:	685b      	ldr	r3, [r3, #4]
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	79fa      	ldrb	r2, [r7, #7]
 800f342:	4906      	ldr	r1, [pc, #24]	@ (800f35c <disk_initialize+0x48>)
 800f344:	440a      	add	r2, r1
 800f346:	7a12      	ldrb	r2, [r2, #8]
 800f348:	4610      	mov	r0, r2
 800f34a:	4798      	blx	r3
 800f34c:	4603      	mov	r3, r0
 800f34e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800f350:	7bfb      	ldrb	r3, [r7, #15]
}
 800f352:	4618      	mov	r0, r3
 800f354:	3710      	adds	r7, #16
 800f356:	46bd      	mov	sp, r7
 800f358:	bd80      	pop	{r7, pc}
 800f35a:	bf00      	nop
 800f35c:	2400096c 	.word	0x2400096c

0800f360 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800f360:	b590      	push	{r4, r7, lr}
 800f362:	b087      	sub	sp, #28
 800f364:	af00      	add	r7, sp, #0
 800f366:	60b9      	str	r1, [r7, #8]
 800f368:	607a      	str	r2, [r7, #4]
 800f36a:	603b      	str	r3, [r7, #0]
 800f36c:	4603      	mov	r3, r0
 800f36e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800f370:	7bfb      	ldrb	r3, [r7, #15]
 800f372:	4a0a      	ldr	r2, [pc, #40]	@ (800f39c <disk_read+0x3c>)
 800f374:	009b      	lsls	r3, r3, #2
 800f376:	4413      	add	r3, r2
 800f378:	685b      	ldr	r3, [r3, #4]
 800f37a:	689c      	ldr	r4, [r3, #8]
 800f37c:	7bfb      	ldrb	r3, [r7, #15]
 800f37e:	4a07      	ldr	r2, [pc, #28]	@ (800f39c <disk_read+0x3c>)
 800f380:	4413      	add	r3, r2
 800f382:	7a18      	ldrb	r0, [r3, #8]
 800f384:	683b      	ldr	r3, [r7, #0]
 800f386:	687a      	ldr	r2, [r7, #4]
 800f388:	68b9      	ldr	r1, [r7, #8]
 800f38a:	47a0      	blx	r4
 800f38c:	4603      	mov	r3, r0
 800f38e:	75fb      	strb	r3, [r7, #23]
  return res;
 800f390:	7dfb      	ldrb	r3, [r7, #23]
}
 800f392:	4618      	mov	r0, r3
 800f394:	371c      	adds	r7, #28
 800f396:	46bd      	mov	sp, r7
 800f398:	bd90      	pop	{r4, r7, pc}
 800f39a:	bf00      	nop
 800f39c:	2400096c 	.word	0x2400096c

0800f3a0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800f3a0:	b590      	push	{r4, r7, lr}
 800f3a2:	b087      	sub	sp, #28
 800f3a4:	af00      	add	r7, sp, #0
 800f3a6:	60b9      	str	r1, [r7, #8]
 800f3a8:	607a      	str	r2, [r7, #4]
 800f3aa:	603b      	str	r3, [r7, #0]
 800f3ac:	4603      	mov	r3, r0
 800f3ae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800f3b0:	7bfb      	ldrb	r3, [r7, #15]
 800f3b2:	4a0a      	ldr	r2, [pc, #40]	@ (800f3dc <disk_write+0x3c>)
 800f3b4:	009b      	lsls	r3, r3, #2
 800f3b6:	4413      	add	r3, r2
 800f3b8:	685b      	ldr	r3, [r3, #4]
 800f3ba:	68dc      	ldr	r4, [r3, #12]
 800f3bc:	7bfb      	ldrb	r3, [r7, #15]
 800f3be:	4a07      	ldr	r2, [pc, #28]	@ (800f3dc <disk_write+0x3c>)
 800f3c0:	4413      	add	r3, r2
 800f3c2:	7a18      	ldrb	r0, [r3, #8]
 800f3c4:	683b      	ldr	r3, [r7, #0]
 800f3c6:	687a      	ldr	r2, [r7, #4]
 800f3c8:	68b9      	ldr	r1, [r7, #8]
 800f3ca:	47a0      	blx	r4
 800f3cc:	4603      	mov	r3, r0
 800f3ce:	75fb      	strb	r3, [r7, #23]
  return res;
 800f3d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800f3d2:	4618      	mov	r0, r3
 800f3d4:	371c      	adds	r7, #28
 800f3d6:	46bd      	mov	sp, r7
 800f3d8:	bd90      	pop	{r4, r7, pc}
 800f3da:	bf00      	nop
 800f3dc:	2400096c 	.word	0x2400096c

0800f3e0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800f3e0:	b580      	push	{r7, lr}
 800f3e2:	b084      	sub	sp, #16
 800f3e4:	af00      	add	r7, sp, #0
 800f3e6:	4603      	mov	r3, r0
 800f3e8:	603a      	str	r2, [r7, #0]
 800f3ea:	71fb      	strb	r3, [r7, #7]
 800f3ec:	460b      	mov	r3, r1
 800f3ee:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800f3f0:	79fb      	ldrb	r3, [r7, #7]
 800f3f2:	4a09      	ldr	r2, [pc, #36]	@ (800f418 <disk_ioctl+0x38>)
 800f3f4:	009b      	lsls	r3, r3, #2
 800f3f6:	4413      	add	r3, r2
 800f3f8:	685b      	ldr	r3, [r3, #4]
 800f3fa:	691b      	ldr	r3, [r3, #16]
 800f3fc:	79fa      	ldrb	r2, [r7, #7]
 800f3fe:	4906      	ldr	r1, [pc, #24]	@ (800f418 <disk_ioctl+0x38>)
 800f400:	440a      	add	r2, r1
 800f402:	7a10      	ldrb	r0, [r2, #8]
 800f404:	79b9      	ldrb	r1, [r7, #6]
 800f406:	683a      	ldr	r2, [r7, #0]
 800f408:	4798      	blx	r3
 800f40a:	4603      	mov	r3, r0
 800f40c:	73fb      	strb	r3, [r7, #15]
  return res;
 800f40e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f410:	4618      	mov	r0, r3
 800f412:	3710      	adds	r7, #16
 800f414:	46bd      	mov	sp, r7
 800f416:	bd80      	pop	{r7, pc}
 800f418:	2400096c 	.word	0x2400096c

0800f41c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800f41c:	b480      	push	{r7}
 800f41e:	b085      	sub	sp, #20
 800f420:	af00      	add	r7, sp, #0
 800f422:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	3301      	adds	r3, #1
 800f428:	781b      	ldrb	r3, [r3, #0]
 800f42a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800f42c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f430:	021b      	lsls	r3, r3, #8
 800f432:	b21a      	sxth	r2, r3
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	781b      	ldrb	r3, [r3, #0]
 800f438:	b21b      	sxth	r3, r3
 800f43a:	4313      	orrs	r3, r2
 800f43c:	b21b      	sxth	r3, r3
 800f43e:	81fb      	strh	r3, [r7, #14]
	return rv;
 800f440:	89fb      	ldrh	r3, [r7, #14]
}
 800f442:	4618      	mov	r0, r3
 800f444:	3714      	adds	r7, #20
 800f446:	46bd      	mov	sp, r7
 800f448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f44c:	4770      	bx	lr

0800f44e <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800f44e:	b480      	push	{r7}
 800f450:	b085      	sub	sp, #20
 800f452:	af00      	add	r7, sp, #0
 800f454:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	3303      	adds	r3, #3
 800f45a:	781b      	ldrb	r3, [r3, #0]
 800f45c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	021b      	lsls	r3, r3, #8
 800f462:	687a      	ldr	r2, [r7, #4]
 800f464:	3202      	adds	r2, #2
 800f466:	7812      	ldrb	r2, [r2, #0]
 800f468:	4313      	orrs	r3, r2
 800f46a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	021b      	lsls	r3, r3, #8
 800f470:	687a      	ldr	r2, [r7, #4]
 800f472:	3201      	adds	r2, #1
 800f474:	7812      	ldrb	r2, [r2, #0]
 800f476:	4313      	orrs	r3, r2
 800f478:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	021b      	lsls	r3, r3, #8
 800f47e:	687a      	ldr	r2, [r7, #4]
 800f480:	7812      	ldrb	r2, [r2, #0]
 800f482:	4313      	orrs	r3, r2
 800f484:	60fb      	str	r3, [r7, #12]
	return rv;
 800f486:	68fb      	ldr	r3, [r7, #12]
}
 800f488:	4618      	mov	r0, r3
 800f48a:	3714      	adds	r7, #20
 800f48c:	46bd      	mov	sp, r7
 800f48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f492:	4770      	bx	lr

0800f494 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800f494:	b480      	push	{r7}
 800f496:	b083      	sub	sp, #12
 800f498:	af00      	add	r7, sp, #0
 800f49a:	6078      	str	r0, [r7, #4]
 800f49c:	460b      	mov	r3, r1
 800f49e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	1c5a      	adds	r2, r3, #1
 800f4a4:	607a      	str	r2, [r7, #4]
 800f4a6:	887a      	ldrh	r2, [r7, #2]
 800f4a8:	b2d2      	uxtb	r2, r2
 800f4aa:	701a      	strb	r2, [r3, #0]
 800f4ac:	887b      	ldrh	r3, [r7, #2]
 800f4ae:	0a1b      	lsrs	r3, r3, #8
 800f4b0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	1c5a      	adds	r2, r3, #1
 800f4b6:	607a      	str	r2, [r7, #4]
 800f4b8:	887a      	ldrh	r2, [r7, #2]
 800f4ba:	b2d2      	uxtb	r2, r2
 800f4bc:	701a      	strb	r2, [r3, #0]
}
 800f4be:	bf00      	nop
 800f4c0:	370c      	adds	r7, #12
 800f4c2:	46bd      	mov	sp, r7
 800f4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c8:	4770      	bx	lr

0800f4ca <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800f4ca:	b480      	push	{r7}
 800f4cc:	b083      	sub	sp, #12
 800f4ce:	af00      	add	r7, sp, #0
 800f4d0:	6078      	str	r0, [r7, #4]
 800f4d2:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	1c5a      	adds	r2, r3, #1
 800f4d8:	607a      	str	r2, [r7, #4]
 800f4da:	683a      	ldr	r2, [r7, #0]
 800f4dc:	b2d2      	uxtb	r2, r2
 800f4de:	701a      	strb	r2, [r3, #0]
 800f4e0:	683b      	ldr	r3, [r7, #0]
 800f4e2:	0a1b      	lsrs	r3, r3, #8
 800f4e4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	1c5a      	adds	r2, r3, #1
 800f4ea:	607a      	str	r2, [r7, #4]
 800f4ec:	683a      	ldr	r2, [r7, #0]
 800f4ee:	b2d2      	uxtb	r2, r2
 800f4f0:	701a      	strb	r2, [r3, #0]
 800f4f2:	683b      	ldr	r3, [r7, #0]
 800f4f4:	0a1b      	lsrs	r3, r3, #8
 800f4f6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	1c5a      	adds	r2, r3, #1
 800f4fc:	607a      	str	r2, [r7, #4]
 800f4fe:	683a      	ldr	r2, [r7, #0]
 800f500:	b2d2      	uxtb	r2, r2
 800f502:	701a      	strb	r2, [r3, #0]
 800f504:	683b      	ldr	r3, [r7, #0]
 800f506:	0a1b      	lsrs	r3, r3, #8
 800f508:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	1c5a      	adds	r2, r3, #1
 800f50e:	607a      	str	r2, [r7, #4]
 800f510:	683a      	ldr	r2, [r7, #0]
 800f512:	b2d2      	uxtb	r2, r2
 800f514:	701a      	strb	r2, [r3, #0]
}
 800f516:	bf00      	nop
 800f518:	370c      	adds	r7, #12
 800f51a:	46bd      	mov	sp, r7
 800f51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f520:	4770      	bx	lr

0800f522 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800f522:	b480      	push	{r7}
 800f524:	b087      	sub	sp, #28
 800f526:	af00      	add	r7, sp, #0
 800f528:	60f8      	str	r0, [r7, #12]
 800f52a:	60b9      	str	r1, [r7, #8]
 800f52c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800f532:	68bb      	ldr	r3, [r7, #8]
 800f534:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d00d      	beq.n	800f558 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800f53c:	693a      	ldr	r2, [r7, #16]
 800f53e:	1c53      	adds	r3, r2, #1
 800f540:	613b      	str	r3, [r7, #16]
 800f542:	697b      	ldr	r3, [r7, #20]
 800f544:	1c59      	adds	r1, r3, #1
 800f546:	6179      	str	r1, [r7, #20]
 800f548:	7812      	ldrb	r2, [r2, #0]
 800f54a:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	3b01      	subs	r3, #1
 800f550:	607b      	str	r3, [r7, #4]
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	2b00      	cmp	r3, #0
 800f556:	d1f1      	bne.n	800f53c <mem_cpy+0x1a>
	}
}
 800f558:	bf00      	nop
 800f55a:	371c      	adds	r7, #28
 800f55c:	46bd      	mov	sp, r7
 800f55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f562:	4770      	bx	lr

0800f564 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800f564:	b480      	push	{r7}
 800f566:	b087      	sub	sp, #28
 800f568:	af00      	add	r7, sp, #0
 800f56a:	60f8      	str	r0, [r7, #12]
 800f56c:	60b9      	str	r1, [r7, #8]
 800f56e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800f574:	697b      	ldr	r3, [r7, #20]
 800f576:	1c5a      	adds	r2, r3, #1
 800f578:	617a      	str	r2, [r7, #20]
 800f57a:	68ba      	ldr	r2, [r7, #8]
 800f57c:	b2d2      	uxtb	r2, r2
 800f57e:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	3b01      	subs	r3, #1
 800f584:	607b      	str	r3, [r7, #4]
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d1f3      	bne.n	800f574 <mem_set+0x10>
}
 800f58c:	bf00      	nop
 800f58e:	bf00      	nop
 800f590:	371c      	adds	r7, #28
 800f592:	46bd      	mov	sp, r7
 800f594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f598:	4770      	bx	lr

0800f59a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800f59a:	b480      	push	{r7}
 800f59c:	b089      	sub	sp, #36	@ 0x24
 800f59e:	af00      	add	r7, sp, #0
 800f5a0:	60f8      	str	r0, [r7, #12]
 800f5a2:	60b9      	str	r1, [r7, #8]
 800f5a4:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	61fb      	str	r3, [r7, #28]
 800f5aa:	68bb      	ldr	r3, [r7, #8]
 800f5ac:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800f5ae:	2300      	movs	r3, #0
 800f5b0:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800f5b2:	69fb      	ldr	r3, [r7, #28]
 800f5b4:	1c5a      	adds	r2, r3, #1
 800f5b6:	61fa      	str	r2, [r7, #28]
 800f5b8:	781b      	ldrb	r3, [r3, #0]
 800f5ba:	4619      	mov	r1, r3
 800f5bc:	69bb      	ldr	r3, [r7, #24]
 800f5be:	1c5a      	adds	r2, r3, #1
 800f5c0:	61ba      	str	r2, [r7, #24]
 800f5c2:	781b      	ldrb	r3, [r3, #0]
 800f5c4:	1acb      	subs	r3, r1, r3
 800f5c6:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	3b01      	subs	r3, #1
 800f5cc:	607b      	str	r3, [r7, #4]
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d002      	beq.n	800f5da <mem_cmp+0x40>
 800f5d4:	697b      	ldr	r3, [r7, #20]
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d0eb      	beq.n	800f5b2 <mem_cmp+0x18>

	return r;
 800f5da:	697b      	ldr	r3, [r7, #20]
}
 800f5dc:	4618      	mov	r0, r3
 800f5de:	3724      	adds	r7, #36	@ 0x24
 800f5e0:	46bd      	mov	sp, r7
 800f5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5e6:	4770      	bx	lr

0800f5e8 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800f5e8:	b480      	push	{r7}
 800f5ea:	b083      	sub	sp, #12
 800f5ec:	af00      	add	r7, sp, #0
 800f5ee:	6078      	str	r0, [r7, #4]
 800f5f0:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800f5f2:	e002      	b.n	800f5fa <chk_chr+0x12>
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	3301      	adds	r3, #1
 800f5f8:	607b      	str	r3, [r7, #4]
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	781b      	ldrb	r3, [r3, #0]
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d005      	beq.n	800f60e <chk_chr+0x26>
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	781b      	ldrb	r3, [r3, #0]
 800f606:	461a      	mov	r2, r3
 800f608:	683b      	ldr	r3, [r7, #0]
 800f60a:	4293      	cmp	r3, r2
 800f60c:	d1f2      	bne.n	800f5f4 <chk_chr+0xc>
	return *str;
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	781b      	ldrb	r3, [r3, #0]
}
 800f612:	4618      	mov	r0, r3
 800f614:	370c      	adds	r7, #12
 800f616:	46bd      	mov	sp, r7
 800f618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f61c:	4770      	bx	lr

0800f61e <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800f61e:	b580      	push	{r7, lr}
 800f620:	b082      	sub	sp, #8
 800f622:	af00      	add	r7, sp, #0
 800f624:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d009      	beq.n	800f640 <lock_fs+0x22>
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	68db      	ldr	r3, [r3, #12]
 800f630:	4618      	mov	r0, r3
 800f632:	f002 f983 	bl	801193c <ff_req_grant>
 800f636:	4603      	mov	r3, r0
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d001      	beq.n	800f640 <lock_fs+0x22>
 800f63c:	2301      	movs	r3, #1
 800f63e:	e000      	b.n	800f642 <lock_fs+0x24>
 800f640:	2300      	movs	r3, #0
}
 800f642:	4618      	mov	r0, r3
 800f644:	3708      	adds	r7, #8
 800f646:	46bd      	mov	sp, r7
 800f648:	bd80      	pop	{r7, pc}

0800f64a <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800f64a:	b580      	push	{r7, lr}
 800f64c:	b082      	sub	sp, #8
 800f64e:	af00      	add	r7, sp, #0
 800f650:	6078      	str	r0, [r7, #4]
 800f652:	460b      	mov	r3, r1
 800f654:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d00d      	beq.n	800f678 <unlock_fs+0x2e>
 800f65c:	78fb      	ldrb	r3, [r7, #3]
 800f65e:	2b0c      	cmp	r3, #12
 800f660:	d00a      	beq.n	800f678 <unlock_fs+0x2e>
 800f662:	78fb      	ldrb	r3, [r7, #3]
 800f664:	2b0b      	cmp	r3, #11
 800f666:	d007      	beq.n	800f678 <unlock_fs+0x2e>
 800f668:	78fb      	ldrb	r3, [r7, #3]
 800f66a:	2b0f      	cmp	r3, #15
 800f66c:	d004      	beq.n	800f678 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	68db      	ldr	r3, [r3, #12]
 800f672:	4618      	mov	r0, r3
 800f674:	f002 f977 	bl	8011966 <ff_rel_grant>
	}
}
 800f678:	bf00      	nop
 800f67a:	3708      	adds	r7, #8
 800f67c:	46bd      	mov	sp, r7
 800f67e:	bd80      	pop	{r7, pc}

0800f680 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f680:	b480      	push	{r7}
 800f682:	b085      	sub	sp, #20
 800f684:	af00      	add	r7, sp, #0
 800f686:	6078      	str	r0, [r7, #4]
 800f688:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f68a:	2300      	movs	r3, #0
 800f68c:	60bb      	str	r3, [r7, #8]
 800f68e:	68bb      	ldr	r3, [r7, #8]
 800f690:	60fb      	str	r3, [r7, #12]
 800f692:	e029      	b.n	800f6e8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800f694:	4a27      	ldr	r2, [pc, #156]	@ (800f734 <chk_lock+0xb4>)
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	011b      	lsls	r3, r3, #4
 800f69a:	4413      	add	r3, r2
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d01d      	beq.n	800f6de <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f6a2:	4a24      	ldr	r2, [pc, #144]	@ (800f734 <chk_lock+0xb4>)
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	011b      	lsls	r3, r3, #4
 800f6a8:	4413      	add	r3, r2
 800f6aa:	681a      	ldr	r2, [r3, #0]
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	429a      	cmp	r2, r3
 800f6b2:	d116      	bne.n	800f6e2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800f6b4:	4a1f      	ldr	r2, [pc, #124]	@ (800f734 <chk_lock+0xb4>)
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	011b      	lsls	r3, r3, #4
 800f6ba:	4413      	add	r3, r2
 800f6bc:	3304      	adds	r3, #4
 800f6be:	681a      	ldr	r2, [r3, #0]
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f6c4:	429a      	cmp	r2, r3
 800f6c6:	d10c      	bne.n	800f6e2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f6c8:	4a1a      	ldr	r2, [pc, #104]	@ (800f734 <chk_lock+0xb4>)
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	011b      	lsls	r3, r3, #4
 800f6ce:	4413      	add	r3, r2
 800f6d0:	3308      	adds	r3, #8
 800f6d2:	681a      	ldr	r2, [r3, #0]
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800f6d8:	429a      	cmp	r2, r3
 800f6da:	d102      	bne.n	800f6e2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f6dc:	e007      	b.n	800f6ee <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800f6de:	2301      	movs	r3, #1
 800f6e0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	3301      	adds	r3, #1
 800f6e6:	60fb      	str	r3, [r7, #12]
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	2b01      	cmp	r3, #1
 800f6ec:	d9d2      	bls.n	800f694 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	2b02      	cmp	r3, #2
 800f6f2:	d109      	bne.n	800f708 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800f6f4:	68bb      	ldr	r3, [r7, #8]
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d102      	bne.n	800f700 <chk_lock+0x80>
 800f6fa:	683b      	ldr	r3, [r7, #0]
 800f6fc:	2b02      	cmp	r3, #2
 800f6fe:	d101      	bne.n	800f704 <chk_lock+0x84>
 800f700:	2300      	movs	r3, #0
 800f702:	e010      	b.n	800f726 <chk_lock+0xa6>
 800f704:	2312      	movs	r3, #18
 800f706:	e00e      	b.n	800f726 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800f708:	683b      	ldr	r3, [r7, #0]
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d108      	bne.n	800f720 <chk_lock+0xa0>
 800f70e:	4a09      	ldr	r2, [pc, #36]	@ (800f734 <chk_lock+0xb4>)
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	011b      	lsls	r3, r3, #4
 800f714:	4413      	add	r3, r2
 800f716:	330c      	adds	r3, #12
 800f718:	881b      	ldrh	r3, [r3, #0]
 800f71a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f71e:	d101      	bne.n	800f724 <chk_lock+0xa4>
 800f720:	2310      	movs	r3, #16
 800f722:	e000      	b.n	800f726 <chk_lock+0xa6>
 800f724:	2300      	movs	r3, #0
}
 800f726:	4618      	mov	r0, r3
 800f728:	3714      	adds	r7, #20
 800f72a:	46bd      	mov	sp, r7
 800f72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f730:	4770      	bx	lr
 800f732:	bf00      	nop
 800f734:	2400094c 	.word	0x2400094c

0800f738 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800f738:	b480      	push	{r7}
 800f73a:	b083      	sub	sp, #12
 800f73c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f73e:	2300      	movs	r3, #0
 800f740:	607b      	str	r3, [r7, #4]
 800f742:	e002      	b.n	800f74a <enq_lock+0x12>
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	3301      	adds	r3, #1
 800f748:	607b      	str	r3, [r7, #4]
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	2b01      	cmp	r3, #1
 800f74e:	d806      	bhi.n	800f75e <enq_lock+0x26>
 800f750:	4a09      	ldr	r2, [pc, #36]	@ (800f778 <enq_lock+0x40>)
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	011b      	lsls	r3, r3, #4
 800f756:	4413      	add	r3, r2
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d1f2      	bne.n	800f744 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	2b02      	cmp	r3, #2
 800f762:	bf14      	ite	ne
 800f764:	2301      	movne	r3, #1
 800f766:	2300      	moveq	r3, #0
 800f768:	b2db      	uxtb	r3, r3
}
 800f76a:	4618      	mov	r0, r3
 800f76c:	370c      	adds	r7, #12
 800f76e:	46bd      	mov	sp, r7
 800f770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f774:	4770      	bx	lr
 800f776:	bf00      	nop
 800f778:	2400094c 	.word	0x2400094c

0800f77c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f77c:	b480      	push	{r7}
 800f77e:	b085      	sub	sp, #20
 800f780:	af00      	add	r7, sp, #0
 800f782:	6078      	str	r0, [r7, #4]
 800f784:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f786:	2300      	movs	r3, #0
 800f788:	60fb      	str	r3, [r7, #12]
 800f78a:	e01f      	b.n	800f7cc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800f78c:	4a41      	ldr	r2, [pc, #260]	@ (800f894 <inc_lock+0x118>)
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	011b      	lsls	r3, r3, #4
 800f792:	4413      	add	r3, r2
 800f794:	681a      	ldr	r2, [r3, #0]
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	429a      	cmp	r2, r3
 800f79c:	d113      	bne.n	800f7c6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800f79e:	4a3d      	ldr	r2, [pc, #244]	@ (800f894 <inc_lock+0x118>)
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	011b      	lsls	r3, r3, #4
 800f7a4:	4413      	add	r3, r2
 800f7a6:	3304      	adds	r3, #4
 800f7a8:	681a      	ldr	r2, [r3, #0]
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800f7ae:	429a      	cmp	r2, r3
 800f7b0:	d109      	bne.n	800f7c6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800f7b2:	4a38      	ldr	r2, [pc, #224]	@ (800f894 <inc_lock+0x118>)
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	011b      	lsls	r3, r3, #4
 800f7b8:	4413      	add	r3, r2
 800f7ba:	3308      	adds	r3, #8
 800f7bc:	681a      	ldr	r2, [r3, #0]
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800f7c2:	429a      	cmp	r2, r3
 800f7c4:	d006      	beq.n	800f7d4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	3301      	adds	r3, #1
 800f7ca:	60fb      	str	r3, [r7, #12]
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	2b01      	cmp	r3, #1
 800f7d0:	d9dc      	bls.n	800f78c <inc_lock+0x10>
 800f7d2:	e000      	b.n	800f7d6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800f7d4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	2b02      	cmp	r3, #2
 800f7da:	d132      	bne.n	800f842 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f7dc:	2300      	movs	r3, #0
 800f7de:	60fb      	str	r3, [r7, #12]
 800f7e0:	e002      	b.n	800f7e8 <inc_lock+0x6c>
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	3301      	adds	r3, #1
 800f7e6:	60fb      	str	r3, [r7, #12]
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	2b01      	cmp	r3, #1
 800f7ec:	d806      	bhi.n	800f7fc <inc_lock+0x80>
 800f7ee:	4a29      	ldr	r2, [pc, #164]	@ (800f894 <inc_lock+0x118>)
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	011b      	lsls	r3, r3, #4
 800f7f4:	4413      	add	r3, r2
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d1f2      	bne.n	800f7e2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	2b02      	cmp	r3, #2
 800f800:	d101      	bne.n	800f806 <inc_lock+0x8a>
 800f802:	2300      	movs	r3, #0
 800f804:	e040      	b.n	800f888 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	681a      	ldr	r2, [r3, #0]
 800f80a:	4922      	ldr	r1, [pc, #136]	@ (800f894 <inc_lock+0x118>)
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	011b      	lsls	r3, r3, #4
 800f810:	440b      	add	r3, r1
 800f812:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	689a      	ldr	r2, [r3, #8]
 800f818:	491e      	ldr	r1, [pc, #120]	@ (800f894 <inc_lock+0x118>)
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	011b      	lsls	r3, r3, #4
 800f81e:	440b      	add	r3, r1
 800f820:	3304      	adds	r3, #4
 800f822:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	695a      	ldr	r2, [r3, #20]
 800f828:	491a      	ldr	r1, [pc, #104]	@ (800f894 <inc_lock+0x118>)
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	011b      	lsls	r3, r3, #4
 800f82e:	440b      	add	r3, r1
 800f830:	3308      	adds	r3, #8
 800f832:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800f834:	4a17      	ldr	r2, [pc, #92]	@ (800f894 <inc_lock+0x118>)
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	011b      	lsls	r3, r3, #4
 800f83a:	4413      	add	r3, r2
 800f83c:	330c      	adds	r3, #12
 800f83e:	2200      	movs	r2, #0
 800f840:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800f842:	683b      	ldr	r3, [r7, #0]
 800f844:	2b00      	cmp	r3, #0
 800f846:	d009      	beq.n	800f85c <inc_lock+0xe0>
 800f848:	4a12      	ldr	r2, [pc, #72]	@ (800f894 <inc_lock+0x118>)
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	011b      	lsls	r3, r3, #4
 800f84e:	4413      	add	r3, r2
 800f850:	330c      	adds	r3, #12
 800f852:	881b      	ldrh	r3, [r3, #0]
 800f854:	2b00      	cmp	r3, #0
 800f856:	d001      	beq.n	800f85c <inc_lock+0xe0>
 800f858:	2300      	movs	r3, #0
 800f85a:	e015      	b.n	800f888 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800f85c:	683b      	ldr	r3, [r7, #0]
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d108      	bne.n	800f874 <inc_lock+0xf8>
 800f862:	4a0c      	ldr	r2, [pc, #48]	@ (800f894 <inc_lock+0x118>)
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	011b      	lsls	r3, r3, #4
 800f868:	4413      	add	r3, r2
 800f86a:	330c      	adds	r3, #12
 800f86c:	881b      	ldrh	r3, [r3, #0]
 800f86e:	3301      	adds	r3, #1
 800f870:	b29a      	uxth	r2, r3
 800f872:	e001      	b.n	800f878 <inc_lock+0xfc>
 800f874:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800f878:	4906      	ldr	r1, [pc, #24]	@ (800f894 <inc_lock+0x118>)
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	011b      	lsls	r3, r3, #4
 800f87e:	440b      	add	r3, r1
 800f880:	330c      	adds	r3, #12
 800f882:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	3301      	adds	r3, #1
}
 800f888:	4618      	mov	r0, r3
 800f88a:	3714      	adds	r7, #20
 800f88c:	46bd      	mov	sp, r7
 800f88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f892:	4770      	bx	lr
 800f894:	2400094c 	.word	0x2400094c

0800f898 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800f898:	b480      	push	{r7}
 800f89a:	b085      	sub	sp, #20
 800f89c:	af00      	add	r7, sp, #0
 800f89e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	3b01      	subs	r3, #1
 800f8a4:	607b      	str	r3, [r7, #4]
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	2b01      	cmp	r3, #1
 800f8aa:	d825      	bhi.n	800f8f8 <dec_lock+0x60>
		n = Files[i].ctr;
 800f8ac:	4a17      	ldr	r2, [pc, #92]	@ (800f90c <dec_lock+0x74>)
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	011b      	lsls	r3, r3, #4
 800f8b2:	4413      	add	r3, r2
 800f8b4:	330c      	adds	r3, #12
 800f8b6:	881b      	ldrh	r3, [r3, #0]
 800f8b8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800f8ba:	89fb      	ldrh	r3, [r7, #14]
 800f8bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f8c0:	d101      	bne.n	800f8c6 <dec_lock+0x2e>
 800f8c2:	2300      	movs	r3, #0
 800f8c4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800f8c6:	89fb      	ldrh	r3, [r7, #14]
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d002      	beq.n	800f8d2 <dec_lock+0x3a>
 800f8cc:	89fb      	ldrh	r3, [r7, #14]
 800f8ce:	3b01      	subs	r3, #1
 800f8d0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800f8d2:	4a0e      	ldr	r2, [pc, #56]	@ (800f90c <dec_lock+0x74>)
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	011b      	lsls	r3, r3, #4
 800f8d8:	4413      	add	r3, r2
 800f8da:	330c      	adds	r3, #12
 800f8dc:	89fa      	ldrh	r2, [r7, #14]
 800f8de:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800f8e0:	89fb      	ldrh	r3, [r7, #14]
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d105      	bne.n	800f8f2 <dec_lock+0x5a>
 800f8e6:	4a09      	ldr	r2, [pc, #36]	@ (800f90c <dec_lock+0x74>)
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	011b      	lsls	r3, r3, #4
 800f8ec:	4413      	add	r3, r2
 800f8ee:	2200      	movs	r2, #0
 800f8f0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800f8f2:	2300      	movs	r3, #0
 800f8f4:	737b      	strb	r3, [r7, #13]
 800f8f6:	e001      	b.n	800f8fc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800f8f8:	2302      	movs	r3, #2
 800f8fa:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800f8fc:	7b7b      	ldrb	r3, [r7, #13]
}
 800f8fe:	4618      	mov	r0, r3
 800f900:	3714      	adds	r7, #20
 800f902:	46bd      	mov	sp, r7
 800f904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f908:	4770      	bx	lr
 800f90a:	bf00      	nop
 800f90c:	2400094c 	.word	0x2400094c

0800f910 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800f910:	b480      	push	{r7}
 800f912:	b085      	sub	sp, #20
 800f914:	af00      	add	r7, sp, #0
 800f916:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800f918:	2300      	movs	r3, #0
 800f91a:	60fb      	str	r3, [r7, #12]
 800f91c:	e010      	b.n	800f940 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800f91e:	4a0d      	ldr	r2, [pc, #52]	@ (800f954 <clear_lock+0x44>)
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	011b      	lsls	r3, r3, #4
 800f924:	4413      	add	r3, r2
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	687a      	ldr	r2, [r7, #4]
 800f92a:	429a      	cmp	r2, r3
 800f92c:	d105      	bne.n	800f93a <clear_lock+0x2a>
 800f92e:	4a09      	ldr	r2, [pc, #36]	@ (800f954 <clear_lock+0x44>)
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	011b      	lsls	r3, r3, #4
 800f934:	4413      	add	r3, r2
 800f936:	2200      	movs	r2, #0
 800f938:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	3301      	adds	r3, #1
 800f93e:	60fb      	str	r3, [r7, #12]
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	2b01      	cmp	r3, #1
 800f944:	d9eb      	bls.n	800f91e <clear_lock+0xe>
	}
}
 800f946:	bf00      	nop
 800f948:	bf00      	nop
 800f94a:	3714      	adds	r7, #20
 800f94c:	46bd      	mov	sp, r7
 800f94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f952:	4770      	bx	lr
 800f954:	2400094c 	.word	0x2400094c

0800f958 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800f958:	b580      	push	{r7, lr}
 800f95a:	b086      	sub	sp, #24
 800f95c:	af00      	add	r7, sp, #0
 800f95e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800f960:	2300      	movs	r3, #0
 800f962:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	78db      	ldrb	r3, [r3, #3]
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d034      	beq.n	800f9d6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f970:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	7858      	ldrb	r0, [r3, #1]
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800f97c:	2301      	movs	r3, #1
 800f97e:	697a      	ldr	r2, [r7, #20]
 800f980:	f7ff fd0e 	bl	800f3a0 <disk_write>
 800f984:	4603      	mov	r3, r0
 800f986:	2b00      	cmp	r3, #0
 800f988:	d002      	beq.n	800f990 <sync_window+0x38>
			res = FR_DISK_ERR;
 800f98a:	2301      	movs	r3, #1
 800f98c:	73fb      	strb	r3, [r7, #15]
 800f98e:	e022      	b.n	800f9d6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	2200      	movs	r2, #0
 800f994:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f99a:	697a      	ldr	r2, [r7, #20]
 800f99c:	1ad2      	subs	r2, r2, r3
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	69db      	ldr	r3, [r3, #28]
 800f9a2:	429a      	cmp	r2, r3
 800f9a4:	d217      	bcs.n	800f9d6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	789b      	ldrb	r3, [r3, #2]
 800f9aa:	613b      	str	r3, [r7, #16]
 800f9ac:	e010      	b.n	800f9d0 <sync_window+0x78>
					wsect += fs->fsize;
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	69db      	ldr	r3, [r3, #28]
 800f9b2:	697a      	ldr	r2, [r7, #20]
 800f9b4:	4413      	add	r3, r2
 800f9b6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	7858      	ldrb	r0, [r3, #1]
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800f9c2:	2301      	movs	r3, #1
 800f9c4:	697a      	ldr	r2, [r7, #20]
 800f9c6:	f7ff fceb 	bl	800f3a0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f9ca:	693b      	ldr	r3, [r7, #16]
 800f9cc:	3b01      	subs	r3, #1
 800f9ce:	613b      	str	r3, [r7, #16]
 800f9d0:	693b      	ldr	r3, [r7, #16]
 800f9d2:	2b01      	cmp	r3, #1
 800f9d4:	d8eb      	bhi.n	800f9ae <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800f9d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9d8:	4618      	mov	r0, r3
 800f9da:	3718      	adds	r7, #24
 800f9dc:	46bd      	mov	sp, r7
 800f9de:	bd80      	pop	{r7, pc}

0800f9e0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800f9e0:	b580      	push	{r7, lr}
 800f9e2:	b084      	sub	sp, #16
 800f9e4:	af00      	add	r7, sp, #0
 800f9e6:	6078      	str	r0, [r7, #4]
 800f9e8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800f9ea:	2300      	movs	r3, #0
 800f9ec:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f9f2:	683a      	ldr	r2, [r7, #0]
 800f9f4:	429a      	cmp	r2, r3
 800f9f6:	d01b      	beq.n	800fa30 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800f9f8:	6878      	ldr	r0, [r7, #4]
 800f9fa:	f7ff ffad 	bl	800f958 <sync_window>
 800f9fe:	4603      	mov	r3, r0
 800fa00:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800fa02:	7bfb      	ldrb	r3, [r7, #15]
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d113      	bne.n	800fa30 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	7858      	ldrb	r0, [r3, #1]
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800fa12:	2301      	movs	r3, #1
 800fa14:	683a      	ldr	r2, [r7, #0]
 800fa16:	f7ff fca3 	bl	800f360 <disk_read>
 800fa1a:	4603      	mov	r3, r0
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d004      	beq.n	800fa2a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800fa20:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fa24:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800fa26:	2301      	movs	r3, #1
 800fa28:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	683a      	ldr	r2, [r7, #0]
 800fa2e:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 800fa30:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa32:	4618      	mov	r0, r3
 800fa34:	3710      	adds	r7, #16
 800fa36:	46bd      	mov	sp, r7
 800fa38:	bd80      	pop	{r7, pc}
	...

0800fa3c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800fa3c:	b580      	push	{r7, lr}
 800fa3e:	b084      	sub	sp, #16
 800fa40:	af00      	add	r7, sp, #0
 800fa42:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800fa44:	6878      	ldr	r0, [r7, #4]
 800fa46:	f7ff ff87 	bl	800f958 <sync_window>
 800fa4a:	4603      	mov	r3, r0
 800fa4c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800fa4e:	7bfb      	ldrb	r3, [r7, #15]
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d158      	bne.n	800fb06 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	781b      	ldrb	r3, [r3, #0]
 800fa58:	2b03      	cmp	r3, #3
 800fa5a:	d148      	bne.n	800faee <sync_fs+0xb2>
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	791b      	ldrb	r3, [r3, #4]
 800fa60:	2b01      	cmp	r3, #1
 800fa62:	d144      	bne.n	800faee <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	3334      	adds	r3, #52	@ 0x34
 800fa68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fa6c:	2100      	movs	r1, #0
 800fa6e:	4618      	mov	r0, r3
 800fa70:	f7ff fd78 	bl	800f564 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	3334      	adds	r3, #52	@ 0x34
 800fa78:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800fa7c:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800fa80:	4618      	mov	r0, r3
 800fa82:	f7ff fd07 	bl	800f494 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	3334      	adds	r3, #52	@ 0x34
 800fa8a:	4921      	ldr	r1, [pc, #132]	@ (800fb10 <sync_fs+0xd4>)
 800fa8c:	4618      	mov	r0, r3
 800fa8e:	f7ff fd1c 	bl	800f4ca <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	3334      	adds	r3, #52	@ 0x34
 800fa96:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800fa9a:	491e      	ldr	r1, [pc, #120]	@ (800fb14 <sync_fs+0xd8>)
 800fa9c:	4618      	mov	r0, r3
 800fa9e:	f7ff fd14 	bl	800f4ca <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	3334      	adds	r3, #52	@ 0x34
 800faa6:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	695b      	ldr	r3, [r3, #20]
 800faae:	4619      	mov	r1, r3
 800fab0:	4610      	mov	r0, r2
 800fab2:	f7ff fd0a 	bl	800f4ca <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	3334      	adds	r3, #52	@ 0x34
 800faba:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	691b      	ldr	r3, [r3, #16]
 800fac2:	4619      	mov	r1, r3
 800fac4:	4610      	mov	r0, r2
 800fac6:	f7ff fd00 	bl	800f4ca <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	6a1b      	ldr	r3, [r3, #32]
 800face:	1c5a      	adds	r2, r3, #1
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	7858      	ldrb	r0, [r3, #1]
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fae2:	2301      	movs	r3, #1
 800fae4:	f7ff fc5c 	bl	800f3a0 <disk_write>
			fs->fsi_flag = 0;
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	2200      	movs	r2, #0
 800faec:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	785b      	ldrb	r3, [r3, #1]
 800faf2:	2200      	movs	r2, #0
 800faf4:	2100      	movs	r1, #0
 800faf6:	4618      	mov	r0, r3
 800faf8:	f7ff fc72 	bl	800f3e0 <disk_ioctl>
 800fafc:	4603      	mov	r3, r0
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d001      	beq.n	800fb06 <sync_fs+0xca>
 800fb02:	2301      	movs	r3, #1
 800fb04:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800fb06:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb08:	4618      	mov	r0, r3
 800fb0a:	3710      	adds	r7, #16
 800fb0c:	46bd      	mov	sp, r7
 800fb0e:	bd80      	pop	{r7, pc}
 800fb10:	41615252 	.word	0x41615252
 800fb14:	61417272 	.word	0x61417272

0800fb18 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800fb18:	b480      	push	{r7}
 800fb1a:	b083      	sub	sp, #12
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	6078      	str	r0, [r7, #4]
 800fb20:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800fb22:	683b      	ldr	r3, [r7, #0]
 800fb24:	3b02      	subs	r3, #2
 800fb26:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	699b      	ldr	r3, [r3, #24]
 800fb2c:	3b02      	subs	r3, #2
 800fb2e:	683a      	ldr	r2, [r7, #0]
 800fb30:	429a      	cmp	r2, r3
 800fb32:	d301      	bcc.n	800fb38 <clust2sect+0x20>
 800fb34:	2300      	movs	r3, #0
 800fb36:	e008      	b.n	800fb4a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	895b      	ldrh	r3, [r3, #10]
 800fb3c:	461a      	mov	r2, r3
 800fb3e:	683b      	ldr	r3, [r7, #0]
 800fb40:	fb03 f202 	mul.w	r2, r3, r2
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb48:	4413      	add	r3, r2
}
 800fb4a:	4618      	mov	r0, r3
 800fb4c:	370c      	adds	r7, #12
 800fb4e:	46bd      	mov	sp, r7
 800fb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb54:	4770      	bx	lr

0800fb56 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800fb56:	b580      	push	{r7, lr}
 800fb58:	b086      	sub	sp, #24
 800fb5a:	af00      	add	r7, sp, #0
 800fb5c:	6078      	str	r0, [r7, #4]
 800fb5e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800fb66:	683b      	ldr	r3, [r7, #0]
 800fb68:	2b01      	cmp	r3, #1
 800fb6a:	d904      	bls.n	800fb76 <get_fat+0x20>
 800fb6c:	693b      	ldr	r3, [r7, #16]
 800fb6e:	699b      	ldr	r3, [r3, #24]
 800fb70:	683a      	ldr	r2, [r7, #0]
 800fb72:	429a      	cmp	r2, r3
 800fb74:	d302      	bcc.n	800fb7c <get_fat+0x26>
		val = 1;	/* Internal error */
 800fb76:	2301      	movs	r3, #1
 800fb78:	617b      	str	r3, [r7, #20]
 800fb7a:	e08e      	b.n	800fc9a <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800fb7c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fb80:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800fb82:	693b      	ldr	r3, [r7, #16]
 800fb84:	781b      	ldrb	r3, [r3, #0]
 800fb86:	2b03      	cmp	r3, #3
 800fb88:	d061      	beq.n	800fc4e <get_fat+0xf8>
 800fb8a:	2b03      	cmp	r3, #3
 800fb8c:	dc7b      	bgt.n	800fc86 <get_fat+0x130>
 800fb8e:	2b01      	cmp	r3, #1
 800fb90:	d002      	beq.n	800fb98 <get_fat+0x42>
 800fb92:	2b02      	cmp	r3, #2
 800fb94:	d041      	beq.n	800fc1a <get_fat+0xc4>
 800fb96:	e076      	b.n	800fc86 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800fb98:	683b      	ldr	r3, [r7, #0]
 800fb9a:	60fb      	str	r3, [r7, #12]
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	085b      	lsrs	r3, r3, #1
 800fba0:	68fa      	ldr	r2, [r7, #12]
 800fba2:	4413      	add	r3, r2
 800fba4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fba6:	693b      	ldr	r3, [r7, #16]
 800fba8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	0a5b      	lsrs	r3, r3, #9
 800fbae:	4413      	add	r3, r2
 800fbb0:	4619      	mov	r1, r3
 800fbb2:	6938      	ldr	r0, [r7, #16]
 800fbb4:	f7ff ff14 	bl	800f9e0 <move_window>
 800fbb8:	4603      	mov	r3, r0
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d166      	bne.n	800fc8c <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	1c5a      	adds	r2, r3, #1
 800fbc2:	60fa      	str	r2, [r7, #12]
 800fbc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fbc8:	693a      	ldr	r2, [r7, #16]
 800fbca:	4413      	add	r3, r2
 800fbcc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800fbd0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fbd2:	693b      	ldr	r3, [r7, #16]
 800fbd4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	0a5b      	lsrs	r3, r3, #9
 800fbda:	4413      	add	r3, r2
 800fbdc:	4619      	mov	r1, r3
 800fbde:	6938      	ldr	r0, [r7, #16]
 800fbe0:	f7ff fefe 	bl	800f9e0 <move_window>
 800fbe4:	4603      	mov	r3, r0
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d152      	bne.n	800fc90 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fbf0:	693a      	ldr	r2, [r7, #16]
 800fbf2:	4413      	add	r3, r2
 800fbf4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800fbf8:	021b      	lsls	r3, r3, #8
 800fbfa:	68ba      	ldr	r2, [r7, #8]
 800fbfc:	4313      	orrs	r3, r2
 800fbfe:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800fc00:	683b      	ldr	r3, [r7, #0]
 800fc02:	f003 0301 	and.w	r3, r3, #1
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d002      	beq.n	800fc10 <get_fat+0xba>
 800fc0a:	68bb      	ldr	r3, [r7, #8]
 800fc0c:	091b      	lsrs	r3, r3, #4
 800fc0e:	e002      	b.n	800fc16 <get_fat+0xc0>
 800fc10:	68bb      	ldr	r3, [r7, #8]
 800fc12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800fc16:	617b      	str	r3, [r7, #20]
			break;
 800fc18:	e03f      	b.n	800fc9a <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800fc1a:	693b      	ldr	r3, [r7, #16]
 800fc1c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fc1e:	683b      	ldr	r3, [r7, #0]
 800fc20:	0a1b      	lsrs	r3, r3, #8
 800fc22:	4413      	add	r3, r2
 800fc24:	4619      	mov	r1, r3
 800fc26:	6938      	ldr	r0, [r7, #16]
 800fc28:	f7ff feda 	bl	800f9e0 <move_window>
 800fc2c:	4603      	mov	r3, r0
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d130      	bne.n	800fc94 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800fc32:	693b      	ldr	r3, [r7, #16]
 800fc34:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800fc38:	683b      	ldr	r3, [r7, #0]
 800fc3a:	005b      	lsls	r3, r3, #1
 800fc3c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800fc40:	4413      	add	r3, r2
 800fc42:	4618      	mov	r0, r3
 800fc44:	f7ff fbea 	bl	800f41c <ld_word>
 800fc48:	4603      	mov	r3, r0
 800fc4a:	617b      	str	r3, [r7, #20]
			break;
 800fc4c:	e025      	b.n	800fc9a <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800fc4e:	693b      	ldr	r3, [r7, #16]
 800fc50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fc52:	683b      	ldr	r3, [r7, #0]
 800fc54:	09db      	lsrs	r3, r3, #7
 800fc56:	4413      	add	r3, r2
 800fc58:	4619      	mov	r1, r3
 800fc5a:	6938      	ldr	r0, [r7, #16]
 800fc5c:	f7ff fec0 	bl	800f9e0 <move_window>
 800fc60:	4603      	mov	r3, r0
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d118      	bne.n	800fc98 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800fc66:	693b      	ldr	r3, [r7, #16]
 800fc68:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800fc6c:	683b      	ldr	r3, [r7, #0]
 800fc6e:	009b      	lsls	r3, r3, #2
 800fc70:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800fc74:	4413      	add	r3, r2
 800fc76:	4618      	mov	r0, r3
 800fc78:	f7ff fbe9 	bl	800f44e <ld_dword>
 800fc7c:	4603      	mov	r3, r0
 800fc7e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800fc82:	617b      	str	r3, [r7, #20]
			break;
 800fc84:	e009      	b.n	800fc9a <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800fc86:	2301      	movs	r3, #1
 800fc88:	617b      	str	r3, [r7, #20]
 800fc8a:	e006      	b.n	800fc9a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fc8c:	bf00      	nop
 800fc8e:	e004      	b.n	800fc9a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fc90:	bf00      	nop
 800fc92:	e002      	b.n	800fc9a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800fc94:	bf00      	nop
 800fc96:	e000      	b.n	800fc9a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800fc98:	bf00      	nop
		}
	}

	return val;
 800fc9a:	697b      	ldr	r3, [r7, #20]
}
 800fc9c:	4618      	mov	r0, r3
 800fc9e:	3718      	adds	r7, #24
 800fca0:	46bd      	mov	sp, r7
 800fca2:	bd80      	pop	{r7, pc}

0800fca4 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800fca4:	b590      	push	{r4, r7, lr}
 800fca6:	b089      	sub	sp, #36	@ 0x24
 800fca8:	af00      	add	r7, sp, #0
 800fcaa:	60f8      	str	r0, [r7, #12]
 800fcac:	60b9      	str	r1, [r7, #8]
 800fcae:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800fcb0:	2302      	movs	r3, #2
 800fcb2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800fcb4:	68bb      	ldr	r3, [r7, #8]
 800fcb6:	2b01      	cmp	r3, #1
 800fcb8:	f240 80d9 	bls.w	800fe6e <put_fat+0x1ca>
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	699b      	ldr	r3, [r3, #24]
 800fcc0:	68ba      	ldr	r2, [r7, #8]
 800fcc2:	429a      	cmp	r2, r3
 800fcc4:	f080 80d3 	bcs.w	800fe6e <put_fat+0x1ca>
		switch (fs->fs_type) {
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	781b      	ldrb	r3, [r3, #0]
 800fccc:	2b03      	cmp	r3, #3
 800fcce:	f000 8096 	beq.w	800fdfe <put_fat+0x15a>
 800fcd2:	2b03      	cmp	r3, #3
 800fcd4:	f300 80cb 	bgt.w	800fe6e <put_fat+0x1ca>
 800fcd8:	2b01      	cmp	r3, #1
 800fcda:	d002      	beq.n	800fce2 <put_fat+0x3e>
 800fcdc:	2b02      	cmp	r3, #2
 800fcde:	d06e      	beq.n	800fdbe <put_fat+0x11a>
 800fce0:	e0c5      	b.n	800fe6e <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800fce2:	68bb      	ldr	r3, [r7, #8]
 800fce4:	61bb      	str	r3, [r7, #24]
 800fce6:	69bb      	ldr	r3, [r7, #24]
 800fce8:	085b      	lsrs	r3, r3, #1
 800fcea:	69ba      	ldr	r2, [r7, #24]
 800fcec:	4413      	add	r3, r2
 800fcee:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fcf4:	69bb      	ldr	r3, [r7, #24]
 800fcf6:	0a5b      	lsrs	r3, r3, #9
 800fcf8:	4413      	add	r3, r2
 800fcfa:	4619      	mov	r1, r3
 800fcfc:	68f8      	ldr	r0, [r7, #12]
 800fcfe:	f7ff fe6f 	bl	800f9e0 <move_window>
 800fd02:	4603      	mov	r3, r0
 800fd04:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fd06:	7ffb      	ldrb	r3, [r7, #31]
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	f040 80a9 	bne.w	800fe60 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800fd14:	69bb      	ldr	r3, [r7, #24]
 800fd16:	1c59      	adds	r1, r3, #1
 800fd18:	61b9      	str	r1, [r7, #24]
 800fd1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fd1e:	4413      	add	r3, r2
 800fd20:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800fd22:	68bb      	ldr	r3, [r7, #8]
 800fd24:	f003 0301 	and.w	r3, r3, #1
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d00d      	beq.n	800fd48 <put_fat+0xa4>
 800fd2c:	697b      	ldr	r3, [r7, #20]
 800fd2e:	781b      	ldrb	r3, [r3, #0]
 800fd30:	b25b      	sxtb	r3, r3
 800fd32:	f003 030f 	and.w	r3, r3, #15
 800fd36:	b25a      	sxtb	r2, r3
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	b25b      	sxtb	r3, r3
 800fd3c:	011b      	lsls	r3, r3, #4
 800fd3e:	b25b      	sxtb	r3, r3
 800fd40:	4313      	orrs	r3, r2
 800fd42:	b25b      	sxtb	r3, r3
 800fd44:	b2db      	uxtb	r3, r3
 800fd46:	e001      	b.n	800fd4c <put_fat+0xa8>
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	b2db      	uxtb	r3, r3
 800fd4c:	697a      	ldr	r2, [r7, #20]
 800fd4e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	2201      	movs	r2, #1
 800fd54:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fd5a:	69bb      	ldr	r3, [r7, #24]
 800fd5c:	0a5b      	lsrs	r3, r3, #9
 800fd5e:	4413      	add	r3, r2
 800fd60:	4619      	mov	r1, r3
 800fd62:	68f8      	ldr	r0, [r7, #12]
 800fd64:	f7ff fe3c 	bl	800f9e0 <move_window>
 800fd68:	4603      	mov	r3, r0
 800fd6a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fd6c:	7ffb      	ldrb	r3, [r7, #31]
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d178      	bne.n	800fe64 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800fd78:	69bb      	ldr	r3, [r7, #24]
 800fd7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fd7e:	4413      	add	r3, r2
 800fd80:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800fd82:	68bb      	ldr	r3, [r7, #8]
 800fd84:	f003 0301 	and.w	r3, r3, #1
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d003      	beq.n	800fd94 <put_fat+0xf0>
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	091b      	lsrs	r3, r3, #4
 800fd90:	b2db      	uxtb	r3, r3
 800fd92:	e00e      	b.n	800fdb2 <put_fat+0x10e>
 800fd94:	697b      	ldr	r3, [r7, #20]
 800fd96:	781b      	ldrb	r3, [r3, #0]
 800fd98:	b25b      	sxtb	r3, r3
 800fd9a:	f023 030f 	bic.w	r3, r3, #15
 800fd9e:	b25a      	sxtb	r2, r3
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	0a1b      	lsrs	r3, r3, #8
 800fda4:	b25b      	sxtb	r3, r3
 800fda6:	f003 030f 	and.w	r3, r3, #15
 800fdaa:	b25b      	sxtb	r3, r3
 800fdac:	4313      	orrs	r3, r2
 800fdae:	b25b      	sxtb	r3, r3
 800fdb0:	b2db      	uxtb	r3, r3
 800fdb2:	697a      	ldr	r2, [r7, #20]
 800fdb4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	2201      	movs	r2, #1
 800fdba:	70da      	strb	r2, [r3, #3]
			break;
 800fdbc:	e057      	b.n	800fe6e <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fdc2:	68bb      	ldr	r3, [r7, #8]
 800fdc4:	0a1b      	lsrs	r3, r3, #8
 800fdc6:	4413      	add	r3, r2
 800fdc8:	4619      	mov	r1, r3
 800fdca:	68f8      	ldr	r0, [r7, #12]
 800fdcc:	f7ff fe08 	bl	800f9e0 <move_window>
 800fdd0:	4603      	mov	r3, r0
 800fdd2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fdd4:	7ffb      	ldrb	r3, [r7, #31]
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d146      	bne.n	800fe68 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800fde0:	68bb      	ldr	r3, [r7, #8]
 800fde2:	005b      	lsls	r3, r3, #1
 800fde4:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800fde8:	4413      	add	r3, r2
 800fdea:	687a      	ldr	r2, [r7, #4]
 800fdec:	b292      	uxth	r2, r2
 800fdee:	4611      	mov	r1, r2
 800fdf0:	4618      	mov	r0, r3
 800fdf2:	f7ff fb4f 	bl	800f494 <st_word>
			fs->wflag = 1;
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	2201      	movs	r2, #1
 800fdfa:	70da      	strb	r2, [r3, #3]
			break;
 800fdfc:	e037      	b.n	800fe6e <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fe02:	68bb      	ldr	r3, [r7, #8]
 800fe04:	09db      	lsrs	r3, r3, #7
 800fe06:	4413      	add	r3, r2
 800fe08:	4619      	mov	r1, r3
 800fe0a:	68f8      	ldr	r0, [r7, #12]
 800fe0c:	f7ff fde8 	bl	800f9e0 <move_window>
 800fe10:	4603      	mov	r3, r0
 800fe12:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fe14:	7ffb      	ldrb	r3, [r7, #31]
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d128      	bne.n	800fe6c <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800fe26:	68bb      	ldr	r3, [r7, #8]
 800fe28:	009b      	lsls	r3, r3, #2
 800fe2a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800fe2e:	4413      	add	r3, r2
 800fe30:	4618      	mov	r0, r3
 800fe32:	f7ff fb0c 	bl	800f44e <ld_dword>
 800fe36:	4603      	mov	r3, r0
 800fe38:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800fe3c:	4323      	orrs	r3, r4
 800fe3e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800fe46:	68bb      	ldr	r3, [r7, #8]
 800fe48:	009b      	lsls	r3, r3, #2
 800fe4a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800fe4e:	4413      	add	r3, r2
 800fe50:	6879      	ldr	r1, [r7, #4]
 800fe52:	4618      	mov	r0, r3
 800fe54:	f7ff fb39 	bl	800f4ca <st_dword>
			fs->wflag = 1;
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	2201      	movs	r2, #1
 800fe5c:	70da      	strb	r2, [r3, #3]
			break;
 800fe5e:	e006      	b.n	800fe6e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800fe60:	bf00      	nop
 800fe62:	e004      	b.n	800fe6e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800fe64:	bf00      	nop
 800fe66:	e002      	b.n	800fe6e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800fe68:	bf00      	nop
 800fe6a:	e000      	b.n	800fe6e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800fe6c:	bf00      	nop
		}
	}
	return res;
 800fe6e:	7ffb      	ldrb	r3, [r7, #31]
}
 800fe70:	4618      	mov	r0, r3
 800fe72:	3724      	adds	r7, #36	@ 0x24
 800fe74:	46bd      	mov	sp, r7
 800fe76:	bd90      	pop	{r4, r7, pc}

0800fe78 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800fe78:	b580      	push	{r7, lr}
 800fe7a:	b088      	sub	sp, #32
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	60f8      	str	r0, [r7, #12]
 800fe80:	60b9      	str	r1, [r7, #8]
 800fe82:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800fe84:	2300      	movs	r3, #0
 800fe86:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800fe8e:	68bb      	ldr	r3, [r7, #8]
 800fe90:	2b01      	cmp	r3, #1
 800fe92:	d904      	bls.n	800fe9e <remove_chain+0x26>
 800fe94:	69bb      	ldr	r3, [r7, #24]
 800fe96:	699b      	ldr	r3, [r3, #24]
 800fe98:	68ba      	ldr	r2, [r7, #8]
 800fe9a:	429a      	cmp	r2, r3
 800fe9c:	d301      	bcc.n	800fea2 <remove_chain+0x2a>
 800fe9e:	2302      	movs	r3, #2
 800fea0:	e04b      	b.n	800ff3a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d00c      	beq.n	800fec2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800fea8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800feac:	6879      	ldr	r1, [r7, #4]
 800feae:	69b8      	ldr	r0, [r7, #24]
 800feb0:	f7ff fef8 	bl	800fca4 <put_fat>
 800feb4:	4603      	mov	r3, r0
 800feb6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800feb8:	7ffb      	ldrb	r3, [r7, #31]
 800feba:	2b00      	cmp	r3, #0
 800febc:	d001      	beq.n	800fec2 <remove_chain+0x4a>
 800febe:	7ffb      	ldrb	r3, [r7, #31]
 800fec0:	e03b      	b.n	800ff3a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800fec2:	68b9      	ldr	r1, [r7, #8]
 800fec4:	68f8      	ldr	r0, [r7, #12]
 800fec6:	f7ff fe46 	bl	800fb56 <get_fat>
 800feca:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800fecc:	697b      	ldr	r3, [r7, #20]
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d031      	beq.n	800ff36 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800fed2:	697b      	ldr	r3, [r7, #20]
 800fed4:	2b01      	cmp	r3, #1
 800fed6:	d101      	bne.n	800fedc <remove_chain+0x64>
 800fed8:	2302      	movs	r3, #2
 800feda:	e02e      	b.n	800ff3a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800fedc:	697b      	ldr	r3, [r7, #20]
 800fede:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fee2:	d101      	bne.n	800fee8 <remove_chain+0x70>
 800fee4:	2301      	movs	r3, #1
 800fee6:	e028      	b.n	800ff3a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800fee8:	2200      	movs	r2, #0
 800feea:	68b9      	ldr	r1, [r7, #8]
 800feec:	69b8      	ldr	r0, [r7, #24]
 800feee:	f7ff fed9 	bl	800fca4 <put_fat>
 800fef2:	4603      	mov	r3, r0
 800fef4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800fef6:	7ffb      	ldrb	r3, [r7, #31]
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d001      	beq.n	800ff00 <remove_chain+0x88>
 800fefc:	7ffb      	ldrb	r3, [r7, #31]
 800fefe:	e01c      	b.n	800ff3a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800ff00:	69bb      	ldr	r3, [r7, #24]
 800ff02:	695a      	ldr	r2, [r3, #20]
 800ff04:	69bb      	ldr	r3, [r7, #24]
 800ff06:	699b      	ldr	r3, [r3, #24]
 800ff08:	3b02      	subs	r3, #2
 800ff0a:	429a      	cmp	r2, r3
 800ff0c:	d20b      	bcs.n	800ff26 <remove_chain+0xae>
			fs->free_clst++;
 800ff0e:	69bb      	ldr	r3, [r7, #24]
 800ff10:	695b      	ldr	r3, [r3, #20]
 800ff12:	1c5a      	adds	r2, r3, #1
 800ff14:	69bb      	ldr	r3, [r7, #24]
 800ff16:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800ff18:	69bb      	ldr	r3, [r7, #24]
 800ff1a:	791b      	ldrb	r3, [r3, #4]
 800ff1c:	f043 0301 	orr.w	r3, r3, #1
 800ff20:	b2da      	uxtb	r2, r3
 800ff22:	69bb      	ldr	r3, [r7, #24]
 800ff24:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800ff26:	697b      	ldr	r3, [r7, #20]
 800ff28:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800ff2a:	69bb      	ldr	r3, [r7, #24]
 800ff2c:	699b      	ldr	r3, [r3, #24]
 800ff2e:	68ba      	ldr	r2, [r7, #8]
 800ff30:	429a      	cmp	r2, r3
 800ff32:	d3c6      	bcc.n	800fec2 <remove_chain+0x4a>
 800ff34:	e000      	b.n	800ff38 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800ff36:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800ff38:	2300      	movs	r3, #0
}
 800ff3a:	4618      	mov	r0, r3
 800ff3c:	3720      	adds	r7, #32
 800ff3e:	46bd      	mov	sp, r7
 800ff40:	bd80      	pop	{r7, pc}

0800ff42 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ff42:	b580      	push	{r7, lr}
 800ff44:	b088      	sub	sp, #32
 800ff46:	af00      	add	r7, sp, #0
 800ff48:	6078      	str	r0, [r7, #4]
 800ff4a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ff52:	683b      	ldr	r3, [r7, #0]
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d10d      	bne.n	800ff74 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ff58:	693b      	ldr	r3, [r7, #16]
 800ff5a:	691b      	ldr	r3, [r3, #16]
 800ff5c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ff5e:	69bb      	ldr	r3, [r7, #24]
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d004      	beq.n	800ff6e <create_chain+0x2c>
 800ff64:	693b      	ldr	r3, [r7, #16]
 800ff66:	699b      	ldr	r3, [r3, #24]
 800ff68:	69ba      	ldr	r2, [r7, #24]
 800ff6a:	429a      	cmp	r2, r3
 800ff6c:	d31b      	bcc.n	800ffa6 <create_chain+0x64>
 800ff6e:	2301      	movs	r3, #1
 800ff70:	61bb      	str	r3, [r7, #24]
 800ff72:	e018      	b.n	800ffa6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ff74:	6839      	ldr	r1, [r7, #0]
 800ff76:	6878      	ldr	r0, [r7, #4]
 800ff78:	f7ff fded 	bl	800fb56 <get_fat>
 800ff7c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	2b01      	cmp	r3, #1
 800ff82:	d801      	bhi.n	800ff88 <create_chain+0x46>
 800ff84:	2301      	movs	r3, #1
 800ff86:	e070      	b.n	801006a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ff8e:	d101      	bne.n	800ff94 <create_chain+0x52>
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	e06a      	b.n	801006a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ff94:	693b      	ldr	r3, [r7, #16]
 800ff96:	699b      	ldr	r3, [r3, #24]
 800ff98:	68fa      	ldr	r2, [r7, #12]
 800ff9a:	429a      	cmp	r2, r3
 800ff9c:	d201      	bcs.n	800ffa2 <create_chain+0x60>
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	e063      	b.n	801006a <create_chain+0x128>
		scl = clst;
 800ffa2:	683b      	ldr	r3, [r7, #0]
 800ffa4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800ffa6:	69bb      	ldr	r3, [r7, #24]
 800ffa8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800ffaa:	69fb      	ldr	r3, [r7, #28]
 800ffac:	3301      	adds	r3, #1
 800ffae:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800ffb0:	693b      	ldr	r3, [r7, #16]
 800ffb2:	699b      	ldr	r3, [r3, #24]
 800ffb4:	69fa      	ldr	r2, [r7, #28]
 800ffb6:	429a      	cmp	r2, r3
 800ffb8:	d307      	bcc.n	800ffca <create_chain+0x88>
				ncl = 2;
 800ffba:	2302      	movs	r3, #2
 800ffbc:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800ffbe:	69fa      	ldr	r2, [r7, #28]
 800ffc0:	69bb      	ldr	r3, [r7, #24]
 800ffc2:	429a      	cmp	r2, r3
 800ffc4:	d901      	bls.n	800ffca <create_chain+0x88>
 800ffc6:	2300      	movs	r3, #0
 800ffc8:	e04f      	b.n	801006a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800ffca:	69f9      	ldr	r1, [r7, #28]
 800ffcc:	6878      	ldr	r0, [r7, #4]
 800ffce:	f7ff fdc2 	bl	800fb56 <get_fat>
 800ffd2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d00e      	beq.n	800fff8 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	2b01      	cmp	r3, #1
 800ffde:	d003      	beq.n	800ffe8 <create_chain+0xa6>
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ffe6:	d101      	bne.n	800ffec <create_chain+0xaa>
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	e03e      	b.n	801006a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800ffec:	69fa      	ldr	r2, [r7, #28]
 800ffee:	69bb      	ldr	r3, [r7, #24]
 800fff0:	429a      	cmp	r2, r3
 800fff2:	d1da      	bne.n	800ffaa <create_chain+0x68>
 800fff4:	2300      	movs	r3, #0
 800fff6:	e038      	b.n	801006a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800fff8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800fffa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800fffe:	69f9      	ldr	r1, [r7, #28]
 8010000:	6938      	ldr	r0, [r7, #16]
 8010002:	f7ff fe4f 	bl	800fca4 <put_fat>
 8010006:	4603      	mov	r3, r0
 8010008:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801000a:	7dfb      	ldrb	r3, [r7, #23]
 801000c:	2b00      	cmp	r3, #0
 801000e:	d109      	bne.n	8010024 <create_chain+0xe2>
 8010010:	683b      	ldr	r3, [r7, #0]
 8010012:	2b00      	cmp	r3, #0
 8010014:	d006      	beq.n	8010024 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8010016:	69fa      	ldr	r2, [r7, #28]
 8010018:	6839      	ldr	r1, [r7, #0]
 801001a:	6938      	ldr	r0, [r7, #16]
 801001c:	f7ff fe42 	bl	800fca4 <put_fat>
 8010020:	4603      	mov	r3, r0
 8010022:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8010024:	7dfb      	ldrb	r3, [r7, #23]
 8010026:	2b00      	cmp	r3, #0
 8010028:	d116      	bne.n	8010058 <create_chain+0x116>
		fs->last_clst = ncl;
 801002a:	693b      	ldr	r3, [r7, #16]
 801002c:	69fa      	ldr	r2, [r7, #28]
 801002e:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8010030:	693b      	ldr	r3, [r7, #16]
 8010032:	695a      	ldr	r2, [r3, #20]
 8010034:	693b      	ldr	r3, [r7, #16]
 8010036:	699b      	ldr	r3, [r3, #24]
 8010038:	3b02      	subs	r3, #2
 801003a:	429a      	cmp	r2, r3
 801003c:	d804      	bhi.n	8010048 <create_chain+0x106>
 801003e:	693b      	ldr	r3, [r7, #16]
 8010040:	695b      	ldr	r3, [r3, #20]
 8010042:	1e5a      	subs	r2, r3, #1
 8010044:	693b      	ldr	r3, [r7, #16]
 8010046:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8010048:	693b      	ldr	r3, [r7, #16]
 801004a:	791b      	ldrb	r3, [r3, #4]
 801004c:	f043 0301 	orr.w	r3, r3, #1
 8010050:	b2da      	uxtb	r2, r3
 8010052:	693b      	ldr	r3, [r7, #16]
 8010054:	711a      	strb	r2, [r3, #4]
 8010056:	e007      	b.n	8010068 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8010058:	7dfb      	ldrb	r3, [r7, #23]
 801005a:	2b01      	cmp	r3, #1
 801005c:	d102      	bne.n	8010064 <create_chain+0x122>
 801005e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010062:	e000      	b.n	8010066 <create_chain+0x124>
 8010064:	2301      	movs	r3, #1
 8010066:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8010068:	69fb      	ldr	r3, [r7, #28]
}
 801006a:	4618      	mov	r0, r3
 801006c:	3720      	adds	r7, #32
 801006e:	46bd      	mov	sp, r7
 8010070:	bd80      	pop	{r7, pc}

08010072 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8010072:	b480      	push	{r7}
 8010074:	b087      	sub	sp, #28
 8010076:	af00      	add	r7, sp, #0
 8010078:	6078      	str	r0, [r7, #4]
 801007a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010086:	3304      	adds	r3, #4
 8010088:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801008a:	683b      	ldr	r3, [r7, #0]
 801008c:	0a5b      	lsrs	r3, r3, #9
 801008e:	68fa      	ldr	r2, [r7, #12]
 8010090:	8952      	ldrh	r2, [r2, #10]
 8010092:	fbb3 f3f2 	udiv	r3, r3, r2
 8010096:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8010098:	693b      	ldr	r3, [r7, #16]
 801009a:	1d1a      	adds	r2, r3, #4
 801009c:	613a      	str	r2, [r7, #16]
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80100a2:	68bb      	ldr	r3, [r7, #8]
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d101      	bne.n	80100ac <clmt_clust+0x3a>
 80100a8:	2300      	movs	r3, #0
 80100aa:	e010      	b.n	80100ce <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80100ac:	697a      	ldr	r2, [r7, #20]
 80100ae:	68bb      	ldr	r3, [r7, #8]
 80100b0:	429a      	cmp	r2, r3
 80100b2:	d307      	bcc.n	80100c4 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80100b4:	697a      	ldr	r2, [r7, #20]
 80100b6:	68bb      	ldr	r3, [r7, #8]
 80100b8:	1ad3      	subs	r3, r2, r3
 80100ba:	617b      	str	r3, [r7, #20]
 80100bc:	693b      	ldr	r3, [r7, #16]
 80100be:	3304      	adds	r3, #4
 80100c0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80100c2:	e7e9      	b.n	8010098 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80100c4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80100c6:	693b      	ldr	r3, [r7, #16]
 80100c8:	681a      	ldr	r2, [r3, #0]
 80100ca:	697b      	ldr	r3, [r7, #20]
 80100cc:	4413      	add	r3, r2
}
 80100ce:	4618      	mov	r0, r3
 80100d0:	371c      	adds	r7, #28
 80100d2:	46bd      	mov	sp, r7
 80100d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100d8:	4770      	bx	lr

080100da <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80100da:	b580      	push	{r7, lr}
 80100dc:	b086      	sub	sp, #24
 80100de:	af00      	add	r7, sp, #0
 80100e0:	6078      	str	r0, [r7, #4]
 80100e2:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80100ea:	683b      	ldr	r3, [r7, #0]
 80100ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80100f0:	d204      	bcs.n	80100fc <dir_sdi+0x22>
 80100f2:	683b      	ldr	r3, [r7, #0]
 80100f4:	f003 031f 	and.w	r3, r3, #31
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d001      	beq.n	8010100 <dir_sdi+0x26>
		return FR_INT_ERR;
 80100fc:	2302      	movs	r3, #2
 80100fe:	e063      	b.n	80101c8 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	683a      	ldr	r2, [r7, #0]
 8010104:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	689b      	ldr	r3, [r3, #8]
 801010a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801010c:	697b      	ldr	r3, [r7, #20]
 801010e:	2b00      	cmp	r3, #0
 8010110:	d106      	bne.n	8010120 <dir_sdi+0x46>
 8010112:	693b      	ldr	r3, [r7, #16]
 8010114:	781b      	ldrb	r3, [r3, #0]
 8010116:	2b02      	cmp	r3, #2
 8010118:	d902      	bls.n	8010120 <dir_sdi+0x46>
		clst = fs->dirbase;
 801011a:	693b      	ldr	r3, [r7, #16]
 801011c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801011e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8010120:	697b      	ldr	r3, [r7, #20]
 8010122:	2b00      	cmp	r3, #0
 8010124:	d10c      	bne.n	8010140 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8010126:	683b      	ldr	r3, [r7, #0]
 8010128:	095b      	lsrs	r3, r3, #5
 801012a:	693a      	ldr	r2, [r7, #16]
 801012c:	8912      	ldrh	r2, [r2, #8]
 801012e:	4293      	cmp	r3, r2
 8010130:	d301      	bcc.n	8010136 <dir_sdi+0x5c>
 8010132:	2302      	movs	r3, #2
 8010134:	e048      	b.n	80101c8 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8010136:	693b      	ldr	r3, [r7, #16]
 8010138:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	61da      	str	r2, [r3, #28]
 801013e:	e029      	b.n	8010194 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8010140:	693b      	ldr	r3, [r7, #16]
 8010142:	895b      	ldrh	r3, [r3, #10]
 8010144:	025b      	lsls	r3, r3, #9
 8010146:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8010148:	e019      	b.n	801017e <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	6979      	ldr	r1, [r7, #20]
 801014e:	4618      	mov	r0, r3
 8010150:	f7ff fd01 	bl	800fb56 <get_fat>
 8010154:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010156:	697b      	ldr	r3, [r7, #20]
 8010158:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801015c:	d101      	bne.n	8010162 <dir_sdi+0x88>
 801015e:	2301      	movs	r3, #1
 8010160:	e032      	b.n	80101c8 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8010162:	697b      	ldr	r3, [r7, #20]
 8010164:	2b01      	cmp	r3, #1
 8010166:	d904      	bls.n	8010172 <dir_sdi+0x98>
 8010168:	693b      	ldr	r3, [r7, #16]
 801016a:	699b      	ldr	r3, [r3, #24]
 801016c:	697a      	ldr	r2, [r7, #20]
 801016e:	429a      	cmp	r2, r3
 8010170:	d301      	bcc.n	8010176 <dir_sdi+0x9c>
 8010172:	2302      	movs	r3, #2
 8010174:	e028      	b.n	80101c8 <dir_sdi+0xee>
			ofs -= csz;
 8010176:	683a      	ldr	r2, [r7, #0]
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	1ad3      	subs	r3, r2, r3
 801017c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801017e:	683a      	ldr	r2, [r7, #0]
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	429a      	cmp	r2, r3
 8010184:	d2e1      	bcs.n	801014a <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8010186:	6979      	ldr	r1, [r7, #20]
 8010188:	6938      	ldr	r0, [r7, #16]
 801018a:	f7ff fcc5 	bl	800fb18 <clust2sect>
 801018e:	4602      	mov	r2, r0
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	697a      	ldr	r2, [r7, #20]
 8010198:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	69db      	ldr	r3, [r3, #28]
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d101      	bne.n	80101a6 <dir_sdi+0xcc>
 80101a2:	2302      	movs	r3, #2
 80101a4:	e010      	b.n	80101c8 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	69da      	ldr	r2, [r3, #28]
 80101aa:	683b      	ldr	r3, [r7, #0]
 80101ac:	0a5b      	lsrs	r3, r3, #9
 80101ae:	441a      	add	r2, r3
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80101b4:	693b      	ldr	r3, [r7, #16]
 80101b6:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80101ba:	683b      	ldr	r3, [r7, #0]
 80101bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80101c0:	441a      	add	r2, r3
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80101c6:	2300      	movs	r3, #0
}
 80101c8:	4618      	mov	r0, r3
 80101ca:	3718      	adds	r7, #24
 80101cc:	46bd      	mov	sp, r7
 80101ce:	bd80      	pop	{r7, pc}

080101d0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80101d0:	b580      	push	{r7, lr}
 80101d2:	b086      	sub	sp, #24
 80101d4:	af00      	add	r7, sp, #0
 80101d6:	6078      	str	r0, [r7, #4]
 80101d8:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	695b      	ldr	r3, [r3, #20]
 80101e4:	3320      	adds	r3, #32
 80101e6:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	69db      	ldr	r3, [r3, #28]
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d003      	beq.n	80101f8 <dir_next+0x28>
 80101f0:	68bb      	ldr	r3, [r7, #8]
 80101f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80101f6:	d301      	bcc.n	80101fc <dir_next+0x2c>
 80101f8:	2304      	movs	r3, #4
 80101fa:	e0aa      	b.n	8010352 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80101fc:	68bb      	ldr	r3, [r7, #8]
 80101fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010202:	2b00      	cmp	r3, #0
 8010204:	f040 8098 	bne.w	8010338 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	69db      	ldr	r3, [r3, #28]
 801020c:	1c5a      	adds	r2, r3, #1
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	699b      	ldr	r3, [r3, #24]
 8010216:	2b00      	cmp	r3, #0
 8010218:	d10b      	bne.n	8010232 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801021a:	68bb      	ldr	r3, [r7, #8]
 801021c:	095b      	lsrs	r3, r3, #5
 801021e:	68fa      	ldr	r2, [r7, #12]
 8010220:	8912      	ldrh	r2, [r2, #8]
 8010222:	4293      	cmp	r3, r2
 8010224:	f0c0 8088 	bcc.w	8010338 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	2200      	movs	r2, #0
 801022c:	61da      	str	r2, [r3, #28]
 801022e:	2304      	movs	r3, #4
 8010230:	e08f      	b.n	8010352 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8010232:	68bb      	ldr	r3, [r7, #8]
 8010234:	0a5b      	lsrs	r3, r3, #9
 8010236:	68fa      	ldr	r2, [r7, #12]
 8010238:	8952      	ldrh	r2, [r2, #10]
 801023a:	3a01      	subs	r2, #1
 801023c:	4013      	ands	r3, r2
 801023e:	2b00      	cmp	r3, #0
 8010240:	d17a      	bne.n	8010338 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8010242:	687a      	ldr	r2, [r7, #4]
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	699b      	ldr	r3, [r3, #24]
 8010248:	4619      	mov	r1, r3
 801024a:	4610      	mov	r0, r2
 801024c:	f7ff fc83 	bl	800fb56 <get_fat>
 8010250:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8010252:	697b      	ldr	r3, [r7, #20]
 8010254:	2b01      	cmp	r3, #1
 8010256:	d801      	bhi.n	801025c <dir_next+0x8c>
 8010258:	2302      	movs	r3, #2
 801025a:	e07a      	b.n	8010352 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801025c:	697b      	ldr	r3, [r7, #20]
 801025e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010262:	d101      	bne.n	8010268 <dir_next+0x98>
 8010264:	2301      	movs	r3, #1
 8010266:	e074      	b.n	8010352 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	699b      	ldr	r3, [r3, #24]
 801026c:	697a      	ldr	r2, [r7, #20]
 801026e:	429a      	cmp	r2, r3
 8010270:	d358      	bcc.n	8010324 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8010272:	683b      	ldr	r3, [r7, #0]
 8010274:	2b00      	cmp	r3, #0
 8010276:	d104      	bne.n	8010282 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	2200      	movs	r2, #0
 801027c:	61da      	str	r2, [r3, #28]
 801027e:	2304      	movs	r3, #4
 8010280:	e067      	b.n	8010352 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8010282:	687a      	ldr	r2, [r7, #4]
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	699b      	ldr	r3, [r3, #24]
 8010288:	4619      	mov	r1, r3
 801028a:	4610      	mov	r0, r2
 801028c:	f7ff fe59 	bl	800ff42 <create_chain>
 8010290:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8010292:	697b      	ldr	r3, [r7, #20]
 8010294:	2b00      	cmp	r3, #0
 8010296:	d101      	bne.n	801029c <dir_next+0xcc>
 8010298:	2307      	movs	r3, #7
 801029a:	e05a      	b.n	8010352 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801029c:	697b      	ldr	r3, [r7, #20]
 801029e:	2b01      	cmp	r3, #1
 80102a0:	d101      	bne.n	80102a6 <dir_next+0xd6>
 80102a2:	2302      	movs	r3, #2
 80102a4:	e055      	b.n	8010352 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80102a6:	697b      	ldr	r3, [r7, #20]
 80102a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80102ac:	d101      	bne.n	80102b2 <dir_next+0xe2>
 80102ae:	2301      	movs	r3, #1
 80102b0:	e04f      	b.n	8010352 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80102b2:	68f8      	ldr	r0, [r7, #12]
 80102b4:	f7ff fb50 	bl	800f958 <sync_window>
 80102b8:	4603      	mov	r3, r0
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d001      	beq.n	80102c2 <dir_next+0xf2>
 80102be:	2301      	movs	r3, #1
 80102c0:	e047      	b.n	8010352 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	3334      	adds	r3, #52	@ 0x34
 80102c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80102ca:	2100      	movs	r1, #0
 80102cc:	4618      	mov	r0, r3
 80102ce:	f7ff f949 	bl	800f564 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80102d2:	2300      	movs	r3, #0
 80102d4:	613b      	str	r3, [r7, #16]
 80102d6:	6979      	ldr	r1, [r7, #20]
 80102d8:	68f8      	ldr	r0, [r7, #12]
 80102da:	f7ff fc1d 	bl	800fb18 <clust2sect>
 80102de:	4602      	mov	r2, r0
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	631a      	str	r2, [r3, #48]	@ 0x30
 80102e4:	e012      	b.n	801030c <dir_next+0x13c>
						fs->wflag = 1;
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	2201      	movs	r2, #1
 80102ea:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80102ec:	68f8      	ldr	r0, [r7, #12]
 80102ee:	f7ff fb33 	bl	800f958 <sync_window>
 80102f2:	4603      	mov	r3, r0
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d001      	beq.n	80102fc <dir_next+0x12c>
 80102f8:	2301      	movs	r3, #1
 80102fa:	e02a      	b.n	8010352 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80102fc:	693b      	ldr	r3, [r7, #16]
 80102fe:	3301      	adds	r3, #1
 8010300:	613b      	str	r3, [r7, #16]
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010306:	1c5a      	adds	r2, r3, #1
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	631a      	str	r2, [r3, #48]	@ 0x30
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	895b      	ldrh	r3, [r3, #10]
 8010310:	461a      	mov	r2, r3
 8010312:	693b      	ldr	r3, [r7, #16]
 8010314:	4293      	cmp	r3, r2
 8010316:	d3e6      	bcc.n	80102e6 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801031c:	693b      	ldr	r3, [r7, #16]
 801031e:	1ad2      	subs	r2, r2, r3
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	697a      	ldr	r2, [r7, #20]
 8010328:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801032a:	6979      	ldr	r1, [r7, #20]
 801032c:	68f8      	ldr	r0, [r7, #12]
 801032e:	f7ff fbf3 	bl	800fb18 <clust2sect>
 8010332:	4602      	mov	r2, r0
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	68ba      	ldr	r2, [r7, #8]
 801033c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8010344:	68bb      	ldr	r3, [r7, #8]
 8010346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801034a:	441a      	add	r2, r3
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8010350:	2300      	movs	r3, #0
}
 8010352:	4618      	mov	r0, r3
 8010354:	3718      	adds	r7, #24
 8010356:	46bd      	mov	sp, r7
 8010358:	bd80      	pop	{r7, pc}

0801035a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801035a:	b580      	push	{r7, lr}
 801035c:	b086      	sub	sp, #24
 801035e:	af00      	add	r7, sp, #0
 8010360:	6078      	str	r0, [r7, #4]
 8010362:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801036a:	2100      	movs	r1, #0
 801036c:	6878      	ldr	r0, [r7, #4]
 801036e:	f7ff feb4 	bl	80100da <dir_sdi>
 8010372:	4603      	mov	r3, r0
 8010374:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010376:	7dfb      	ldrb	r3, [r7, #23]
 8010378:	2b00      	cmp	r3, #0
 801037a:	d12b      	bne.n	80103d4 <dir_alloc+0x7a>
		n = 0;
 801037c:	2300      	movs	r3, #0
 801037e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	69db      	ldr	r3, [r3, #28]
 8010384:	4619      	mov	r1, r3
 8010386:	68f8      	ldr	r0, [r7, #12]
 8010388:	f7ff fb2a 	bl	800f9e0 <move_window>
 801038c:	4603      	mov	r3, r0
 801038e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8010390:	7dfb      	ldrb	r3, [r7, #23]
 8010392:	2b00      	cmp	r3, #0
 8010394:	d11d      	bne.n	80103d2 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	6a1b      	ldr	r3, [r3, #32]
 801039a:	781b      	ldrb	r3, [r3, #0]
 801039c:	2be5      	cmp	r3, #229	@ 0xe5
 801039e:	d004      	beq.n	80103aa <dir_alloc+0x50>
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	6a1b      	ldr	r3, [r3, #32]
 80103a4:	781b      	ldrb	r3, [r3, #0]
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d107      	bne.n	80103ba <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80103aa:	693b      	ldr	r3, [r7, #16]
 80103ac:	3301      	adds	r3, #1
 80103ae:	613b      	str	r3, [r7, #16]
 80103b0:	693a      	ldr	r2, [r7, #16]
 80103b2:	683b      	ldr	r3, [r7, #0]
 80103b4:	429a      	cmp	r2, r3
 80103b6:	d102      	bne.n	80103be <dir_alloc+0x64>
 80103b8:	e00c      	b.n	80103d4 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80103ba:	2300      	movs	r3, #0
 80103bc:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80103be:	2101      	movs	r1, #1
 80103c0:	6878      	ldr	r0, [r7, #4]
 80103c2:	f7ff ff05 	bl	80101d0 <dir_next>
 80103c6:	4603      	mov	r3, r0
 80103c8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80103ca:	7dfb      	ldrb	r3, [r7, #23]
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d0d7      	beq.n	8010380 <dir_alloc+0x26>
 80103d0:	e000      	b.n	80103d4 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80103d2:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80103d4:	7dfb      	ldrb	r3, [r7, #23]
 80103d6:	2b04      	cmp	r3, #4
 80103d8:	d101      	bne.n	80103de <dir_alloc+0x84>
 80103da:	2307      	movs	r3, #7
 80103dc:	75fb      	strb	r3, [r7, #23]
	return res;
 80103de:	7dfb      	ldrb	r3, [r7, #23]
}
 80103e0:	4618      	mov	r0, r3
 80103e2:	3718      	adds	r7, #24
 80103e4:	46bd      	mov	sp, r7
 80103e6:	bd80      	pop	{r7, pc}

080103e8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80103e8:	b580      	push	{r7, lr}
 80103ea:	b084      	sub	sp, #16
 80103ec:	af00      	add	r7, sp, #0
 80103ee:	6078      	str	r0, [r7, #4]
 80103f0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80103f2:	683b      	ldr	r3, [r7, #0]
 80103f4:	331a      	adds	r3, #26
 80103f6:	4618      	mov	r0, r3
 80103f8:	f7ff f810 	bl	800f41c <ld_word>
 80103fc:	4603      	mov	r3, r0
 80103fe:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	781b      	ldrb	r3, [r3, #0]
 8010404:	2b03      	cmp	r3, #3
 8010406:	d109      	bne.n	801041c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8010408:	683b      	ldr	r3, [r7, #0]
 801040a:	3314      	adds	r3, #20
 801040c:	4618      	mov	r0, r3
 801040e:	f7ff f805 	bl	800f41c <ld_word>
 8010412:	4603      	mov	r3, r0
 8010414:	041b      	lsls	r3, r3, #16
 8010416:	68fa      	ldr	r2, [r7, #12]
 8010418:	4313      	orrs	r3, r2
 801041a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801041c:	68fb      	ldr	r3, [r7, #12]
}
 801041e:	4618      	mov	r0, r3
 8010420:	3710      	adds	r7, #16
 8010422:	46bd      	mov	sp, r7
 8010424:	bd80      	pop	{r7, pc}

08010426 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8010426:	b580      	push	{r7, lr}
 8010428:	b084      	sub	sp, #16
 801042a:	af00      	add	r7, sp, #0
 801042c:	60f8      	str	r0, [r7, #12]
 801042e:	60b9      	str	r1, [r7, #8]
 8010430:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8010432:	68bb      	ldr	r3, [r7, #8]
 8010434:	331a      	adds	r3, #26
 8010436:	687a      	ldr	r2, [r7, #4]
 8010438:	b292      	uxth	r2, r2
 801043a:	4611      	mov	r1, r2
 801043c:	4618      	mov	r0, r3
 801043e:	f7ff f829 	bl	800f494 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	781b      	ldrb	r3, [r3, #0]
 8010446:	2b03      	cmp	r3, #3
 8010448:	d109      	bne.n	801045e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801044a:	68bb      	ldr	r3, [r7, #8]
 801044c:	f103 0214 	add.w	r2, r3, #20
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	0c1b      	lsrs	r3, r3, #16
 8010454:	b29b      	uxth	r3, r3
 8010456:	4619      	mov	r1, r3
 8010458:	4610      	mov	r0, r2
 801045a:	f7ff f81b 	bl	800f494 <st_word>
	}
}
 801045e:	bf00      	nop
 8010460:	3710      	adds	r7, #16
 8010462:	46bd      	mov	sp, r7
 8010464:	bd80      	pop	{r7, pc}

08010466 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8010466:	b580      	push	{r7, lr}
 8010468:	b086      	sub	sp, #24
 801046a:	af00      	add	r7, sp, #0
 801046c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8010474:	2100      	movs	r1, #0
 8010476:	6878      	ldr	r0, [r7, #4]
 8010478:	f7ff fe2f 	bl	80100da <dir_sdi>
 801047c:	4603      	mov	r3, r0
 801047e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8010480:	7dfb      	ldrb	r3, [r7, #23]
 8010482:	2b00      	cmp	r3, #0
 8010484:	d001      	beq.n	801048a <dir_find+0x24>
 8010486:	7dfb      	ldrb	r3, [r7, #23]
 8010488:	e03e      	b.n	8010508 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	69db      	ldr	r3, [r3, #28]
 801048e:	4619      	mov	r1, r3
 8010490:	6938      	ldr	r0, [r7, #16]
 8010492:	f7ff faa5 	bl	800f9e0 <move_window>
 8010496:	4603      	mov	r3, r0
 8010498:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801049a:	7dfb      	ldrb	r3, [r7, #23]
 801049c:	2b00      	cmp	r3, #0
 801049e:	d12f      	bne.n	8010500 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	6a1b      	ldr	r3, [r3, #32]
 80104a4:	781b      	ldrb	r3, [r3, #0]
 80104a6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80104a8:	7bfb      	ldrb	r3, [r7, #15]
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d102      	bne.n	80104b4 <dir_find+0x4e>
 80104ae:	2304      	movs	r3, #4
 80104b0:	75fb      	strb	r3, [r7, #23]
 80104b2:	e028      	b.n	8010506 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	6a1b      	ldr	r3, [r3, #32]
 80104b8:	330b      	adds	r3, #11
 80104ba:	781b      	ldrb	r3, [r3, #0]
 80104bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80104c0:	b2da      	uxtb	r2, r3
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	6a1b      	ldr	r3, [r3, #32]
 80104ca:	330b      	adds	r3, #11
 80104cc:	781b      	ldrb	r3, [r3, #0]
 80104ce:	f003 0308 	and.w	r3, r3, #8
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d10a      	bne.n	80104ec <dir_find+0x86>
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	6a18      	ldr	r0, [r3, #32]
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	3324      	adds	r3, #36	@ 0x24
 80104de:	220b      	movs	r2, #11
 80104e0:	4619      	mov	r1, r3
 80104e2:	f7ff f85a 	bl	800f59a <mem_cmp>
 80104e6:	4603      	mov	r3, r0
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d00b      	beq.n	8010504 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80104ec:	2100      	movs	r1, #0
 80104ee:	6878      	ldr	r0, [r7, #4]
 80104f0:	f7ff fe6e 	bl	80101d0 <dir_next>
 80104f4:	4603      	mov	r3, r0
 80104f6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80104f8:	7dfb      	ldrb	r3, [r7, #23]
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d0c5      	beq.n	801048a <dir_find+0x24>
 80104fe:	e002      	b.n	8010506 <dir_find+0xa0>
		if (res != FR_OK) break;
 8010500:	bf00      	nop
 8010502:	e000      	b.n	8010506 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8010504:	bf00      	nop

	return res;
 8010506:	7dfb      	ldrb	r3, [r7, #23]
}
 8010508:	4618      	mov	r0, r3
 801050a:	3718      	adds	r7, #24
 801050c:	46bd      	mov	sp, r7
 801050e:	bd80      	pop	{r7, pc}

08010510 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8010510:	b580      	push	{r7, lr}
 8010512:	b084      	sub	sp, #16
 8010514:	af00      	add	r7, sp, #0
 8010516:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 801051e:	2101      	movs	r1, #1
 8010520:	6878      	ldr	r0, [r7, #4]
 8010522:	f7ff ff1a 	bl	801035a <dir_alloc>
 8010526:	4603      	mov	r3, r0
 8010528:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801052a:	7bfb      	ldrb	r3, [r7, #15]
 801052c:	2b00      	cmp	r3, #0
 801052e:	d11c      	bne.n	801056a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	69db      	ldr	r3, [r3, #28]
 8010534:	4619      	mov	r1, r3
 8010536:	68b8      	ldr	r0, [r7, #8]
 8010538:	f7ff fa52 	bl	800f9e0 <move_window>
 801053c:	4603      	mov	r3, r0
 801053e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010540:	7bfb      	ldrb	r3, [r7, #15]
 8010542:	2b00      	cmp	r3, #0
 8010544:	d111      	bne.n	801056a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	6a1b      	ldr	r3, [r3, #32]
 801054a:	2220      	movs	r2, #32
 801054c:	2100      	movs	r1, #0
 801054e:	4618      	mov	r0, r3
 8010550:	f7ff f808 	bl	800f564 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	6a18      	ldr	r0, [r3, #32]
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	3324      	adds	r3, #36	@ 0x24
 801055c:	220b      	movs	r2, #11
 801055e:	4619      	mov	r1, r3
 8010560:	f7fe ffdf 	bl	800f522 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8010564:	68bb      	ldr	r3, [r7, #8]
 8010566:	2201      	movs	r2, #1
 8010568:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801056a:	7bfb      	ldrb	r3, [r7, #15]
}
 801056c:	4618      	mov	r0, r3
 801056e:	3710      	adds	r7, #16
 8010570:	46bd      	mov	sp, r7
 8010572:	bd80      	pop	{r7, pc}

08010574 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8010574:	b580      	push	{r7, lr}
 8010576:	b088      	sub	sp, #32
 8010578:	af00      	add	r7, sp, #0
 801057a:	6078      	str	r0, [r7, #4]
 801057c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 801057e:	683b      	ldr	r3, [r7, #0]
 8010580:	681b      	ldr	r3, [r3, #0]
 8010582:	60fb      	str	r3, [r7, #12]
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	3324      	adds	r3, #36	@ 0x24
 8010588:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 801058a:	220b      	movs	r2, #11
 801058c:	2120      	movs	r1, #32
 801058e:	68b8      	ldr	r0, [r7, #8]
 8010590:	f7fe ffe8 	bl	800f564 <mem_set>
	si = i = 0; ni = 8;
 8010594:	2300      	movs	r3, #0
 8010596:	613b      	str	r3, [r7, #16]
 8010598:	693b      	ldr	r3, [r7, #16]
 801059a:	61fb      	str	r3, [r7, #28]
 801059c:	2308      	movs	r3, #8
 801059e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80105a0:	69fb      	ldr	r3, [r7, #28]
 80105a2:	1c5a      	adds	r2, r3, #1
 80105a4:	61fa      	str	r2, [r7, #28]
 80105a6:	68fa      	ldr	r2, [r7, #12]
 80105a8:	4413      	add	r3, r2
 80105aa:	781b      	ldrb	r3, [r3, #0]
 80105ac:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80105ae:	7efb      	ldrb	r3, [r7, #27]
 80105b0:	2b20      	cmp	r3, #32
 80105b2:	d94e      	bls.n	8010652 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80105b4:	7efb      	ldrb	r3, [r7, #27]
 80105b6:	2b2f      	cmp	r3, #47	@ 0x2f
 80105b8:	d006      	beq.n	80105c8 <create_name+0x54>
 80105ba:	7efb      	ldrb	r3, [r7, #27]
 80105bc:	2b5c      	cmp	r3, #92	@ 0x5c
 80105be:	d110      	bne.n	80105e2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80105c0:	e002      	b.n	80105c8 <create_name+0x54>
 80105c2:	69fb      	ldr	r3, [r7, #28]
 80105c4:	3301      	adds	r3, #1
 80105c6:	61fb      	str	r3, [r7, #28]
 80105c8:	68fa      	ldr	r2, [r7, #12]
 80105ca:	69fb      	ldr	r3, [r7, #28]
 80105cc:	4413      	add	r3, r2
 80105ce:	781b      	ldrb	r3, [r3, #0]
 80105d0:	2b2f      	cmp	r3, #47	@ 0x2f
 80105d2:	d0f6      	beq.n	80105c2 <create_name+0x4e>
 80105d4:	68fa      	ldr	r2, [r7, #12]
 80105d6:	69fb      	ldr	r3, [r7, #28]
 80105d8:	4413      	add	r3, r2
 80105da:	781b      	ldrb	r3, [r3, #0]
 80105dc:	2b5c      	cmp	r3, #92	@ 0x5c
 80105de:	d0f0      	beq.n	80105c2 <create_name+0x4e>
			break;
 80105e0:	e038      	b.n	8010654 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80105e2:	7efb      	ldrb	r3, [r7, #27]
 80105e4:	2b2e      	cmp	r3, #46	@ 0x2e
 80105e6:	d003      	beq.n	80105f0 <create_name+0x7c>
 80105e8:	693a      	ldr	r2, [r7, #16]
 80105ea:	697b      	ldr	r3, [r7, #20]
 80105ec:	429a      	cmp	r2, r3
 80105ee:	d30c      	bcc.n	801060a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80105f0:	697b      	ldr	r3, [r7, #20]
 80105f2:	2b0b      	cmp	r3, #11
 80105f4:	d002      	beq.n	80105fc <create_name+0x88>
 80105f6:	7efb      	ldrb	r3, [r7, #27]
 80105f8:	2b2e      	cmp	r3, #46	@ 0x2e
 80105fa:	d001      	beq.n	8010600 <create_name+0x8c>
 80105fc:	2306      	movs	r3, #6
 80105fe:	e044      	b.n	801068a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8010600:	2308      	movs	r3, #8
 8010602:	613b      	str	r3, [r7, #16]
 8010604:	230b      	movs	r3, #11
 8010606:	617b      	str	r3, [r7, #20]
			continue;
 8010608:	e022      	b.n	8010650 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 801060a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801060e:	2b00      	cmp	r3, #0
 8010610:	da04      	bge.n	801061c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8010612:	7efb      	ldrb	r3, [r7, #27]
 8010614:	3b80      	subs	r3, #128	@ 0x80
 8010616:	4a1f      	ldr	r2, [pc, #124]	@ (8010694 <create_name+0x120>)
 8010618:	5cd3      	ldrb	r3, [r2, r3]
 801061a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 801061c:	7efb      	ldrb	r3, [r7, #27]
 801061e:	4619      	mov	r1, r3
 8010620:	481d      	ldr	r0, [pc, #116]	@ (8010698 <create_name+0x124>)
 8010622:	f7fe ffe1 	bl	800f5e8 <chk_chr>
 8010626:	4603      	mov	r3, r0
 8010628:	2b00      	cmp	r3, #0
 801062a:	d001      	beq.n	8010630 <create_name+0xbc>
 801062c:	2306      	movs	r3, #6
 801062e:	e02c      	b.n	801068a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8010630:	7efb      	ldrb	r3, [r7, #27]
 8010632:	2b60      	cmp	r3, #96	@ 0x60
 8010634:	d905      	bls.n	8010642 <create_name+0xce>
 8010636:	7efb      	ldrb	r3, [r7, #27]
 8010638:	2b7a      	cmp	r3, #122	@ 0x7a
 801063a:	d802      	bhi.n	8010642 <create_name+0xce>
 801063c:	7efb      	ldrb	r3, [r7, #27]
 801063e:	3b20      	subs	r3, #32
 8010640:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8010642:	693b      	ldr	r3, [r7, #16]
 8010644:	1c5a      	adds	r2, r3, #1
 8010646:	613a      	str	r2, [r7, #16]
 8010648:	68ba      	ldr	r2, [r7, #8]
 801064a:	4413      	add	r3, r2
 801064c:	7efa      	ldrb	r2, [r7, #27]
 801064e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8010650:	e7a6      	b.n	80105a0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8010652:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8010654:	68fa      	ldr	r2, [r7, #12]
 8010656:	69fb      	ldr	r3, [r7, #28]
 8010658:	441a      	add	r2, r3
 801065a:	683b      	ldr	r3, [r7, #0]
 801065c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 801065e:	693b      	ldr	r3, [r7, #16]
 8010660:	2b00      	cmp	r3, #0
 8010662:	d101      	bne.n	8010668 <create_name+0xf4>
 8010664:	2306      	movs	r3, #6
 8010666:	e010      	b.n	801068a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8010668:	68bb      	ldr	r3, [r7, #8]
 801066a:	781b      	ldrb	r3, [r3, #0]
 801066c:	2be5      	cmp	r3, #229	@ 0xe5
 801066e:	d102      	bne.n	8010676 <create_name+0x102>
 8010670:	68bb      	ldr	r3, [r7, #8]
 8010672:	2205      	movs	r2, #5
 8010674:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8010676:	7efb      	ldrb	r3, [r7, #27]
 8010678:	2b20      	cmp	r3, #32
 801067a:	d801      	bhi.n	8010680 <create_name+0x10c>
 801067c:	2204      	movs	r2, #4
 801067e:	e000      	b.n	8010682 <create_name+0x10e>
 8010680:	2200      	movs	r2, #0
 8010682:	68bb      	ldr	r3, [r7, #8]
 8010684:	330b      	adds	r3, #11
 8010686:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8010688:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 801068a:	4618      	mov	r0, r3
 801068c:	3720      	adds	r7, #32
 801068e:	46bd      	mov	sp, r7
 8010690:	bd80      	pop	{r7, pc}
 8010692:	bf00      	nop
 8010694:	08017784 	.word	0x08017784
 8010698:	080175a4 	.word	0x080175a4

0801069c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801069c:	b580      	push	{r7, lr}
 801069e:	b086      	sub	sp, #24
 80106a0:	af00      	add	r7, sp, #0
 80106a2:	6078      	str	r0, [r7, #4]
 80106a4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80106aa:	693b      	ldr	r3, [r7, #16]
 80106ac:	681b      	ldr	r3, [r3, #0]
 80106ae:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80106b0:	e002      	b.n	80106b8 <follow_path+0x1c>
 80106b2:	683b      	ldr	r3, [r7, #0]
 80106b4:	3301      	adds	r3, #1
 80106b6:	603b      	str	r3, [r7, #0]
 80106b8:	683b      	ldr	r3, [r7, #0]
 80106ba:	781b      	ldrb	r3, [r3, #0]
 80106bc:	2b2f      	cmp	r3, #47	@ 0x2f
 80106be:	d0f8      	beq.n	80106b2 <follow_path+0x16>
 80106c0:	683b      	ldr	r3, [r7, #0]
 80106c2:	781b      	ldrb	r3, [r3, #0]
 80106c4:	2b5c      	cmp	r3, #92	@ 0x5c
 80106c6:	d0f4      	beq.n	80106b2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80106c8:	693b      	ldr	r3, [r7, #16]
 80106ca:	2200      	movs	r2, #0
 80106cc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80106ce:	683b      	ldr	r3, [r7, #0]
 80106d0:	781b      	ldrb	r3, [r3, #0]
 80106d2:	2b1f      	cmp	r3, #31
 80106d4:	d80a      	bhi.n	80106ec <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	2280      	movs	r2, #128	@ 0x80
 80106da:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80106de:	2100      	movs	r1, #0
 80106e0:	6878      	ldr	r0, [r7, #4]
 80106e2:	f7ff fcfa 	bl	80100da <dir_sdi>
 80106e6:	4603      	mov	r3, r0
 80106e8:	75fb      	strb	r3, [r7, #23]
 80106ea:	e043      	b.n	8010774 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80106ec:	463b      	mov	r3, r7
 80106ee:	4619      	mov	r1, r3
 80106f0:	6878      	ldr	r0, [r7, #4]
 80106f2:	f7ff ff3f 	bl	8010574 <create_name>
 80106f6:	4603      	mov	r3, r0
 80106f8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80106fa:	7dfb      	ldrb	r3, [r7, #23]
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d134      	bne.n	801076a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8010700:	6878      	ldr	r0, [r7, #4]
 8010702:	f7ff feb0 	bl	8010466 <dir_find>
 8010706:	4603      	mov	r3, r0
 8010708:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8010710:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8010712:	7dfb      	ldrb	r3, [r7, #23]
 8010714:	2b00      	cmp	r3, #0
 8010716:	d00a      	beq.n	801072e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8010718:	7dfb      	ldrb	r3, [r7, #23]
 801071a:	2b04      	cmp	r3, #4
 801071c:	d127      	bne.n	801076e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801071e:	7afb      	ldrb	r3, [r7, #11]
 8010720:	f003 0304 	and.w	r3, r3, #4
 8010724:	2b00      	cmp	r3, #0
 8010726:	d122      	bne.n	801076e <follow_path+0xd2>
 8010728:	2305      	movs	r3, #5
 801072a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801072c:	e01f      	b.n	801076e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801072e:	7afb      	ldrb	r3, [r7, #11]
 8010730:	f003 0304 	and.w	r3, r3, #4
 8010734:	2b00      	cmp	r3, #0
 8010736:	d11c      	bne.n	8010772 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8010738:	693b      	ldr	r3, [r7, #16]
 801073a:	799b      	ldrb	r3, [r3, #6]
 801073c:	f003 0310 	and.w	r3, r3, #16
 8010740:	2b00      	cmp	r3, #0
 8010742:	d102      	bne.n	801074a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8010744:	2305      	movs	r3, #5
 8010746:	75fb      	strb	r3, [r7, #23]
 8010748:	e014      	b.n	8010774 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	695b      	ldr	r3, [r3, #20]
 8010754:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010758:	4413      	add	r3, r2
 801075a:	4619      	mov	r1, r3
 801075c:	68f8      	ldr	r0, [r7, #12]
 801075e:	f7ff fe43 	bl	80103e8 <ld_clust>
 8010762:	4602      	mov	r2, r0
 8010764:	693b      	ldr	r3, [r7, #16]
 8010766:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010768:	e7c0      	b.n	80106ec <follow_path+0x50>
			if (res != FR_OK) break;
 801076a:	bf00      	nop
 801076c:	e002      	b.n	8010774 <follow_path+0xd8>
				break;
 801076e:	bf00      	nop
 8010770:	e000      	b.n	8010774 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010772:	bf00      	nop
			}
		}
	}

	return res;
 8010774:	7dfb      	ldrb	r3, [r7, #23]
}
 8010776:	4618      	mov	r0, r3
 8010778:	3718      	adds	r7, #24
 801077a:	46bd      	mov	sp, r7
 801077c:	bd80      	pop	{r7, pc}

0801077e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801077e:	b480      	push	{r7}
 8010780:	b087      	sub	sp, #28
 8010782:	af00      	add	r7, sp, #0
 8010784:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8010786:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801078a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	2b00      	cmp	r3, #0
 8010792:	d031      	beq.n	80107f8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	617b      	str	r3, [r7, #20]
 801079a:	e002      	b.n	80107a2 <get_ldnumber+0x24>
 801079c:	697b      	ldr	r3, [r7, #20]
 801079e:	3301      	adds	r3, #1
 80107a0:	617b      	str	r3, [r7, #20]
 80107a2:	697b      	ldr	r3, [r7, #20]
 80107a4:	781b      	ldrb	r3, [r3, #0]
 80107a6:	2b20      	cmp	r3, #32
 80107a8:	d903      	bls.n	80107b2 <get_ldnumber+0x34>
 80107aa:	697b      	ldr	r3, [r7, #20]
 80107ac:	781b      	ldrb	r3, [r3, #0]
 80107ae:	2b3a      	cmp	r3, #58	@ 0x3a
 80107b0:	d1f4      	bne.n	801079c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80107b2:	697b      	ldr	r3, [r7, #20]
 80107b4:	781b      	ldrb	r3, [r3, #0]
 80107b6:	2b3a      	cmp	r3, #58	@ 0x3a
 80107b8:	d11c      	bne.n	80107f4 <get_ldnumber+0x76>
			tp = *path;
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	1c5a      	adds	r2, r3, #1
 80107c4:	60fa      	str	r2, [r7, #12]
 80107c6:	781b      	ldrb	r3, [r3, #0]
 80107c8:	3b30      	subs	r3, #48	@ 0x30
 80107ca:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80107cc:	68bb      	ldr	r3, [r7, #8]
 80107ce:	2b09      	cmp	r3, #9
 80107d0:	d80e      	bhi.n	80107f0 <get_ldnumber+0x72>
 80107d2:	68fa      	ldr	r2, [r7, #12]
 80107d4:	697b      	ldr	r3, [r7, #20]
 80107d6:	429a      	cmp	r2, r3
 80107d8:	d10a      	bne.n	80107f0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80107da:	68bb      	ldr	r3, [r7, #8]
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d107      	bne.n	80107f0 <get_ldnumber+0x72>
					vol = (int)i;
 80107e0:	68bb      	ldr	r3, [r7, #8]
 80107e2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80107e4:	697b      	ldr	r3, [r7, #20]
 80107e6:	3301      	adds	r3, #1
 80107e8:	617b      	str	r3, [r7, #20]
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	697a      	ldr	r2, [r7, #20]
 80107ee:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80107f0:	693b      	ldr	r3, [r7, #16]
 80107f2:	e002      	b.n	80107fa <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80107f4:	2300      	movs	r3, #0
 80107f6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80107f8:	693b      	ldr	r3, [r7, #16]
}
 80107fa:	4618      	mov	r0, r3
 80107fc:	371c      	adds	r7, #28
 80107fe:	46bd      	mov	sp, r7
 8010800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010804:	4770      	bx	lr
	...

08010808 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8010808:	b580      	push	{r7, lr}
 801080a:	b082      	sub	sp, #8
 801080c:	af00      	add	r7, sp, #0
 801080e:	6078      	str	r0, [r7, #4]
 8010810:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	2200      	movs	r2, #0
 8010816:	70da      	strb	r2, [r3, #3]
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801081e:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8010820:	6839      	ldr	r1, [r7, #0]
 8010822:	6878      	ldr	r0, [r7, #4]
 8010824:	f7ff f8dc 	bl	800f9e0 <move_window>
 8010828:	4603      	mov	r3, r0
 801082a:	2b00      	cmp	r3, #0
 801082c:	d001      	beq.n	8010832 <check_fs+0x2a>
 801082e:	2304      	movs	r3, #4
 8010830:	e038      	b.n	80108a4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	3334      	adds	r3, #52	@ 0x34
 8010836:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801083a:	4618      	mov	r0, r3
 801083c:	f7fe fdee 	bl	800f41c <ld_word>
 8010840:	4603      	mov	r3, r0
 8010842:	461a      	mov	r2, r3
 8010844:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8010848:	429a      	cmp	r2, r3
 801084a:	d001      	beq.n	8010850 <check_fs+0x48>
 801084c:	2303      	movs	r3, #3
 801084e:	e029      	b.n	80108a4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8010856:	2be9      	cmp	r3, #233	@ 0xe9
 8010858:	d009      	beq.n	801086e <check_fs+0x66>
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8010860:	2beb      	cmp	r3, #235	@ 0xeb
 8010862:	d11e      	bne.n	80108a2 <check_fs+0x9a>
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 801086a:	2b90      	cmp	r3, #144	@ 0x90
 801086c:	d119      	bne.n	80108a2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	3334      	adds	r3, #52	@ 0x34
 8010872:	3336      	adds	r3, #54	@ 0x36
 8010874:	4618      	mov	r0, r3
 8010876:	f7fe fdea 	bl	800f44e <ld_dword>
 801087a:	4603      	mov	r3, r0
 801087c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8010880:	4a0a      	ldr	r2, [pc, #40]	@ (80108ac <check_fs+0xa4>)
 8010882:	4293      	cmp	r3, r2
 8010884:	d101      	bne.n	801088a <check_fs+0x82>
 8010886:	2300      	movs	r3, #0
 8010888:	e00c      	b.n	80108a4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	3334      	adds	r3, #52	@ 0x34
 801088e:	3352      	adds	r3, #82	@ 0x52
 8010890:	4618      	mov	r0, r3
 8010892:	f7fe fddc 	bl	800f44e <ld_dword>
 8010896:	4603      	mov	r3, r0
 8010898:	4a05      	ldr	r2, [pc, #20]	@ (80108b0 <check_fs+0xa8>)
 801089a:	4293      	cmp	r3, r2
 801089c:	d101      	bne.n	80108a2 <check_fs+0x9a>
 801089e:	2300      	movs	r3, #0
 80108a0:	e000      	b.n	80108a4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80108a2:	2302      	movs	r3, #2
}
 80108a4:	4618      	mov	r0, r3
 80108a6:	3708      	adds	r7, #8
 80108a8:	46bd      	mov	sp, r7
 80108aa:	bd80      	pop	{r7, pc}
 80108ac:	00544146 	.word	0x00544146
 80108b0:	33544146 	.word	0x33544146

080108b4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80108b4:	b580      	push	{r7, lr}
 80108b6:	b096      	sub	sp, #88	@ 0x58
 80108b8:	af00      	add	r7, sp, #0
 80108ba:	60f8      	str	r0, [r7, #12]
 80108bc:	60b9      	str	r1, [r7, #8]
 80108be:	4613      	mov	r3, r2
 80108c0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80108c2:	68bb      	ldr	r3, [r7, #8]
 80108c4:	2200      	movs	r2, #0
 80108c6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80108c8:	68f8      	ldr	r0, [r7, #12]
 80108ca:	f7ff ff58 	bl	801077e <get_ldnumber>
 80108ce:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80108d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	da01      	bge.n	80108da <find_volume+0x26>
 80108d6:	230b      	movs	r3, #11
 80108d8:	e235      	b.n	8010d46 <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80108da:	4aa5      	ldr	r2, [pc, #660]	@ (8010b70 <find_volume+0x2bc>)
 80108dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80108de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80108e2:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80108e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d101      	bne.n	80108ee <find_volume+0x3a>
 80108ea:	230c      	movs	r3, #12
 80108ec:	e22b      	b.n	8010d46 <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 80108ee:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80108f0:	f7fe fe95 	bl	800f61e <lock_fs>
 80108f4:	4603      	mov	r3, r0
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d101      	bne.n	80108fe <find_volume+0x4a>
 80108fa:	230f      	movs	r3, #15
 80108fc:	e223      	b.n	8010d46 <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 80108fe:	68bb      	ldr	r3, [r7, #8]
 8010900:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010902:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8010904:	79fb      	ldrb	r3, [r7, #7]
 8010906:	f023 0301 	bic.w	r3, r3, #1
 801090a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801090c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801090e:	781b      	ldrb	r3, [r3, #0]
 8010910:	2b00      	cmp	r3, #0
 8010912:	d01a      	beq.n	801094a <find_volume+0x96>
		stat = disk_status(fs->drv);
 8010914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010916:	785b      	ldrb	r3, [r3, #1]
 8010918:	4618      	mov	r0, r3
 801091a:	f7fe fce1 	bl	800f2e0 <disk_status>
 801091e:	4603      	mov	r3, r0
 8010920:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8010924:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010928:	f003 0301 	and.w	r3, r3, #1
 801092c:	2b00      	cmp	r3, #0
 801092e:	d10c      	bne.n	801094a <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8010930:	79fb      	ldrb	r3, [r7, #7]
 8010932:	2b00      	cmp	r3, #0
 8010934:	d007      	beq.n	8010946 <find_volume+0x92>
 8010936:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801093a:	f003 0304 	and.w	r3, r3, #4
 801093e:	2b00      	cmp	r3, #0
 8010940:	d001      	beq.n	8010946 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8010942:	230a      	movs	r3, #10
 8010944:	e1ff      	b.n	8010d46 <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 8010946:	2300      	movs	r3, #0
 8010948:	e1fd      	b.n	8010d46 <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801094a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801094c:	2200      	movs	r2, #0
 801094e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8010950:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010952:	b2da      	uxtb	r2, r3
 8010954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010956:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8010958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801095a:	785b      	ldrb	r3, [r3, #1]
 801095c:	4618      	mov	r0, r3
 801095e:	f7fe fcd9 	bl	800f314 <disk_initialize>
 8010962:	4603      	mov	r3, r0
 8010964:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8010968:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801096c:	f003 0301 	and.w	r3, r3, #1
 8010970:	2b00      	cmp	r3, #0
 8010972:	d001      	beq.n	8010978 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8010974:	2303      	movs	r3, #3
 8010976:	e1e6      	b.n	8010d46 <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8010978:	79fb      	ldrb	r3, [r7, #7]
 801097a:	2b00      	cmp	r3, #0
 801097c:	d007      	beq.n	801098e <find_volume+0xda>
 801097e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010982:	f003 0304 	and.w	r3, r3, #4
 8010986:	2b00      	cmp	r3, #0
 8010988:	d001      	beq.n	801098e <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 801098a:	230a      	movs	r3, #10
 801098c:	e1db      	b.n	8010d46 <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801098e:	2300      	movs	r3, #0
 8010990:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8010992:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010994:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010996:	f7ff ff37 	bl	8010808 <check_fs>
 801099a:	4603      	mov	r3, r0
 801099c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80109a0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80109a4:	2b02      	cmp	r3, #2
 80109a6:	d149      	bne.n	8010a3c <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80109a8:	2300      	movs	r3, #0
 80109aa:	643b      	str	r3, [r7, #64]	@ 0x40
 80109ac:	e01e      	b.n	80109ec <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80109ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109b0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80109b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80109b6:	011b      	lsls	r3, r3, #4
 80109b8:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80109bc:	4413      	add	r3, r2
 80109be:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80109c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109c2:	3304      	adds	r3, #4
 80109c4:	781b      	ldrb	r3, [r3, #0]
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d006      	beq.n	80109d8 <find_volume+0x124>
 80109ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109cc:	3308      	adds	r3, #8
 80109ce:	4618      	mov	r0, r3
 80109d0:	f7fe fd3d 	bl	800f44e <ld_dword>
 80109d4:	4602      	mov	r2, r0
 80109d6:	e000      	b.n	80109da <find_volume+0x126>
 80109d8:	2200      	movs	r2, #0
 80109da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80109dc:	009b      	lsls	r3, r3, #2
 80109de:	3358      	adds	r3, #88	@ 0x58
 80109e0:	443b      	add	r3, r7
 80109e2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80109e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80109e8:	3301      	adds	r3, #1
 80109ea:	643b      	str	r3, [r7, #64]	@ 0x40
 80109ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80109ee:	2b03      	cmp	r3, #3
 80109f0:	d9dd      	bls.n	80109ae <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80109f2:	2300      	movs	r3, #0
 80109f4:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80109f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d002      	beq.n	8010a02 <find_volume+0x14e>
 80109fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80109fe:	3b01      	subs	r3, #1
 8010a00:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8010a02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010a04:	009b      	lsls	r3, r3, #2
 8010a06:	3358      	adds	r3, #88	@ 0x58
 8010a08:	443b      	add	r3, r7
 8010a0a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8010a0e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8010a10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d005      	beq.n	8010a22 <find_volume+0x16e>
 8010a16:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010a18:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010a1a:	f7ff fef5 	bl	8010808 <check_fs>
 8010a1e:	4603      	mov	r3, r0
 8010a20:	e000      	b.n	8010a24 <find_volume+0x170>
 8010a22:	2303      	movs	r3, #3
 8010a24:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8010a28:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010a2c:	2b01      	cmp	r3, #1
 8010a2e:	d905      	bls.n	8010a3c <find_volume+0x188>
 8010a30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010a32:	3301      	adds	r3, #1
 8010a34:	643b      	str	r3, [r7, #64]	@ 0x40
 8010a36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010a38:	2b03      	cmp	r3, #3
 8010a3a:	d9e2      	bls.n	8010a02 <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8010a3c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010a40:	2b04      	cmp	r3, #4
 8010a42:	d101      	bne.n	8010a48 <find_volume+0x194>
 8010a44:	2301      	movs	r3, #1
 8010a46:	e17e      	b.n	8010d46 <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8010a48:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010a4c:	2b01      	cmp	r3, #1
 8010a4e:	d901      	bls.n	8010a54 <find_volume+0x1a0>
 8010a50:	230d      	movs	r3, #13
 8010a52:	e178      	b.n	8010d46 <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8010a54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a56:	3334      	adds	r3, #52	@ 0x34
 8010a58:	330b      	adds	r3, #11
 8010a5a:	4618      	mov	r0, r3
 8010a5c:	f7fe fcde 	bl	800f41c <ld_word>
 8010a60:	4603      	mov	r3, r0
 8010a62:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010a66:	d001      	beq.n	8010a6c <find_volume+0x1b8>
 8010a68:	230d      	movs	r3, #13
 8010a6a:	e16c      	b.n	8010d46 <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8010a6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a6e:	3334      	adds	r3, #52	@ 0x34
 8010a70:	3316      	adds	r3, #22
 8010a72:	4618      	mov	r0, r3
 8010a74:	f7fe fcd2 	bl	800f41c <ld_word>
 8010a78:	4603      	mov	r3, r0
 8010a7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8010a7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d106      	bne.n	8010a90 <find_volume+0x1dc>
 8010a82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a84:	3334      	adds	r3, #52	@ 0x34
 8010a86:	3324      	adds	r3, #36	@ 0x24
 8010a88:	4618      	mov	r0, r3
 8010a8a:	f7fe fce0 	bl	800f44e <ld_dword>
 8010a8e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8010a90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a92:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010a94:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8010a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a98:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8010a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a9e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8010aa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010aa2:	789b      	ldrb	r3, [r3, #2]
 8010aa4:	2b01      	cmp	r3, #1
 8010aa6:	d005      	beq.n	8010ab4 <find_volume+0x200>
 8010aa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010aaa:	789b      	ldrb	r3, [r3, #2]
 8010aac:	2b02      	cmp	r3, #2
 8010aae:	d001      	beq.n	8010ab4 <find_volume+0x200>
 8010ab0:	230d      	movs	r3, #13
 8010ab2:	e148      	b.n	8010d46 <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8010ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ab6:	789b      	ldrb	r3, [r3, #2]
 8010ab8:	461a      	mov	r2, r3
 8010aba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010abc:	fb02 f303 	mul.w	r3, r2, r3
 8010ac0:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8010ac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ac4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010ac8:	461a      	mov	r2, r3
 8010aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010acc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8010ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ad0:	895b      	ldrh	r3, [r3, #10]
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d008      	beq.n	8010ae8 <find_volume+0x234>
 8010ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ad8:	895b      	ldrh	r3, [r3, #10]
 8010ada:	461a      	mov	r2, r3
 8010adc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ade:	895b      	ldrh	r3, [r3, #10]
 8010ae0:	3b01      	subs	r3, #1
 8010ae2:	4013      	ands	r3, r2
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d001      	beq.n	8010aec <find_volume+0x238>
 8010ae8:	230d      	movs	r3, #13
 8010aea:	e12c      	b.n	8010d46 <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8010aec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010aee:	3334      	adds	r3, #52	@ 0x34
 8010af0:	3311      	adds	r3, #17
 8010af2:	4618      	mov	r0, r3
 8010af4:	f7fe fc92 	bl	800f41c <ld_word>
 8010af8:	4603      	mov	r3, r0
 8010afa:	461a      	mov	r2, r3
 8010afc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010afe:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8010b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b02:	891b      	ldrh	r3, [r3, #8]
 8010b04:	f003 030f 	and.w	r3, r3, #15
 8010b08:	b29b      	uxth	r3, r3
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d001      	beq.n	8010b12 <find_volume+0x25e>
 8010b0e:	230d      	movs	r3, #13
 8010b10:	e119      	b.n	8010d46 <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8010b12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b14:	3334      	adds	r3, #52	@ 0x34
 8010b16:	3313      	adds	r3, #19
 8010b18:	4618      	mov	r0, r3
 8010b1a:	f7fe fc7f 	bl	800f41c <ld_word>
 8010b1e:	4603      	mov	r3, r0
 8010b20:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8010b22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d106      	bne.n	8010b36 <find_volume+0x282>
 8010b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b2a:	3334      	adds	r3, #52	@ 0x34
 8010b2c:	3320      	adds	r3, #32
 8010b2e:	4618      	mov	r0, r3
 8010b30:	f7fe fc8d 	bl	800f44e <ld_dword>
 8010b34:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8010b36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b38:	3334      	adds	r3, #52	@ 0x34
 8010b3a:	330e      	adds	r3, #14
 8010b3c:	4618      	mov	r0, r3
 8010b3e:	f7fe fc6d 	bl	800f41c <ld_word>
 8010b42:	4603      	mov	r3, r0
 8010b44:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8010b46:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d101      	bne.n	8010b50 <find_volume+0x29c>
 8010b4c:	230d      	movs	r3, #13
 8010b4e:	e0fa      	b.n	8010d46 <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8010b50:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8010b52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010b54:	4413      	add	r3, r2
 8010b56:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010b58:	8912      	ldrh	r2, [r2, #8]
 8010b5a:	0912      	lsrs	r2, r2, #4
 8010b5c:	b292      	uxth	r2, r2
 8010b5e:	4413      	add	r3, r2
 8010b60:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8010b62:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b66:	429a      	cmp	r2, r3
 8010b68:	d204      	bcs.n	8010b74 <find_volume+0x2c0>
 8010b6a:	230d      	movs	r3, #13
 8010b6c:	e0eb      	b.n	8010d46 <find_volume+0x492>
 8010b6e:	bf00      	nop
 8010b70:	24000944 	.word	0x24000944
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8010b74:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b78:	1ad3      	subs	r3, r2, r3
 8010b7a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010b7c:	8952      	ldrh	r2, [r2, #10]
 8010b7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8010b82:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8010b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d101      	bne.n	8010b8e <find_volume+0x2da>
 8010b8a:	230d      	movs	r3, #13
 8010b8c:	e0db      	b.n	8010d46 <find_volume+0x492>
		fmt = FS_FAT32;
 8010b8e:	2303      	movs	r3, #3
 8010b90:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8010b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b96:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8010b9a:	4293      	cmp	r3, r2
 8010b9c:	d802      	bhi.n	8010ba4 <find_volume+0x2f0>
 8010b9e:	2302      	movs	r3, #2
 8010ba0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8010ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ba6:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8010baa:	4293      	cmp	r3, r2
 8010bac:	d802      	bhi.n	8010bb4 <find_volume+0x300>
 8010bae:	2301      	movs	r3, #1
 8010bb0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8010bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010bb6:	1c9a      	adds	r2, r3, #2
 8010bb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bba:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8010bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bbe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010bc0:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8010bc2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8010bc4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010bc6:	441a      	add	r2, r3
 8010bc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bca:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8010bcc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010bd0:	441a      	add	r2, r3
 8010bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bd4:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 8010bd6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010bda:	2b03      	cmp	r3, #3
 8010bdc:	d11e      	bne.n	8010c1c <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8010bde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010be0:	3334      	adds	r3, #52	@ 0x34
 8010be2:	332a      	adds	r3, #42	@ 0x2a
 8010be4:	4618      	mov	r0, r3
 8010be6:	f7fe fc19 	bl	800f41c <ld_word>
 8010bea:	4603      	mov	r3, r0
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d001      	beq.n	8010bf4 <find_volume+0x340>
 8010bf0:	230d      	movs	r3, #13
 8010bf2:	e0a8      	b.n	8010d46 <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8010bf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bf6:	891b      	ldrh	r3, [r3, #8]
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d001      	beq.n	8010c00 <find_volume+0x34c>
 8010bfc:	230d      	movs	r3, #13
 8010bfe:	e0a2      	b.n	8010d46 <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8010c00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c02:	3334      	adds	r3, #52	@ 0x34
 8010c04:	332c      	adds	r3, #44	@ 0x2c
 8010c06:	4618      	mov	r0, r3
 8010c08:	f7fe fc21 	bl	800f44e <ld_dword>
 8010c0c:	4602      	mov	r2, r0
 8010c0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c10:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8010c12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c14:	699b      	ldr	r3, [r3, #24]
 8010c16:	009b      	lsls	r3, r3, #2
 8010c18:	647b      	str	r3, [r7, #68]	@ 0x44
 8010c1a:	e01f      	b.n	8010c5c <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8010c1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c1e:	891b      	ldrh	r3, [r3, #8]
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d101      	bne.n	8010c28 <find_volume+0x374>
 8010c24:	230d      	movs	r3, #13
 8010c26:	e08e      	b.n	8010d46 <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8010c28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c2a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010c2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010c2e:	441a      	add	r2, r3
 8010c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c32:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8010c34:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010c38:	2b02      	cmp	r3, #2
 8010c3a:	d103      	bne.n	8010c44 <find_volume+0x390>
 8010c3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c3e:	699b      	ldr	r3, [r3, #24]
 8010c40:	005b      	lsls	r3, r3, #1
 8010c42:	e00a      	b.n	8010c5a <find_volume+0x3a6>
 8010c44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c46:	699a      	ldr	r2, [r3, #24]
 8010c48:	4613      	mov	r3, r2
 8010c4a:	005b      	lsls	r3, r3, #1
 8010c4c:	4413      	add	r3, r2
 8010c4e:	085a      	lsrs	r2, r3, #1
 8010c50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c52:	699b      	ldr	r3, [r3, #24]
 8010c54:	f003 0301 	and.w	r3, r3, #1
 8010c58:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8010c5a:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8010c5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c5e:	69da      	ldr	r2, [r3, #28]
 8010c60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010c62:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8010c66:	0a5b      	lsrs	r3, r3, #9
 8010c68:	429a      	cmp	r2, r3
 8010c6a:	d201      	bcs.n	8010c70 <find_volume+0x3bc>
 8010c6c:	230d      	movs	r3, #13
 8010c6e:	e06a      	b.n	8010d46 <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8010c70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c72:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010c76:	615a      	str	r2, [r3, #20]
 8010c78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c7a:	695a      	ldr	r2, [r3, #20]
 8010c7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c7e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8010c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c82:	2280      	movs	r2, #128	@ 0x80
 8010c84:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8010c86:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010c8a:	2b03      	cmp	r3, #3
 8010c8c:	d149      	bne.n	8010d22 <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8010c8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c90:	3334      	adds	r3, #52	@ 0x34
 8010c92:	3330      	adds	r3, #48	@ 0x30
 8010c94:	4618      	mov	r0, r3
 8010c96:	f7fe fbc1 	bl	800f41c <ld_word>
 8010c9a:	4603      	mov	r3, r0
 8010c9c:	2b01      	cmp	r3, #1
 8010c9e:	d140      	bne.n	8010d22 <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8010ca0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010ca2:	3301      	adds	r3, #1
 8010ca4:	4619      	mov	r1, r3
 8010ca6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010ca8:	f7fe fe9a 	bl	800f9e0 <move_window>
 8010cac:	4603      	mov	r3, r0
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d137      	bne.n	8010d22 <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 8010cb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cb4:	2200      	movs	r2, #0
 8010cb6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8010cb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cba:	3334      	adds	r3, #52	@ 0x34
 8010cbc:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8010cc0:	4618      	mov	r0, r3
 8010cc2:	f7fe fbab 	bl	800f41c <ld_word>
 8010cc6:	4603      	mov	r3, r0
 8010cc8:	461a      	mov	r2, r3
 8010cca:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8010cce:	429a      	cmp	r2, r3
 8010cd0:	d127      	bne.n	8010d22 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8010cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cd4:	3334      	adds	r3, #52	@ 0x34
 8010cd6:	4618      	mov	r0, r3
 8010cd8:	f7fe fbb9 	bl	800f44e <ld_dword>
 8010cdc:	4603      	mov	r3, r0
 8010cde:	4a1c      	ldr	r2, [pc, #112]	@ (8010d50 <find_volume+0x49c>)
 8010ce0:	4293      	cmp	r3, r2
 8010ce2:	d11e      	bne.n	8010d22 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8010ce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ce6:	3334      	adds	r3, #52	@ 0x34
 8010ce8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8010cec:	4618      	mov	r0, r3
 8010cee:	f7fe fbae 	bl	800f44e <ld_dword>
 8010cf2:	4603      	mov	r3, r0
 8010cf4:	4a17      	ldr	r2, [pc, #92]	@ (8010d54 <find_volume+0x4a0>)
 8010cf6:	4293      	cmp	r3, r2
 8010cf8:	d113      	bne.n	8010d22 <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8010cfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cfc:	3334      	adds	r3, #52	@ 0x34
 8010cfe:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8010d02:	4618      	mov	r0, r3
 8010d04:	f7fe fba3 	bl	800f44e <ld_dword>
 8010d08:	4602      	mov	r2, r0
 8010d0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d0c:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8010d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d10:	3334      	adds	r3, #52	@ 0x34
 8010d12:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8010d16:	4618      	mov	r0, r3
 8010d18:	f7fe fb99 	bl	800f44e <ld_dword>
 8010d1c:	4602      	mov	r2, r0
 8010d1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d20:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8010d22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d24:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8010d28:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8010d2a:	4b0b      	ldr	r3, [pc, #44]	@ (8010d58 <find_volume+0x4a4>)
 8010d2c:	881b      	ldrh	r3, [r3, #0]
 8010d2e:	3301      	adds	r3, #1
 8010d30:	b29a      	uxth	r2, r3
 8010d32:	4b09      	ldr	r3, [pc, #36]	@ (8010d58 <find_volume+0x4a4>)
 8010d34:	801a      	strh	r2, [r3, #0]
 8010d36:	4b08      	ldr	r3, [pc, #32]	@ (8010d58 <find_volume+0x4a4>)
 8010d38:	881a      	ldrh	r2, [r3, #0]
 8010d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d3c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8010d3e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010d40:	f7fe fde6 	bl	800f910 <clear_lock>
#endif
	return FR_OK;
 8010d44:	2300      	movs	r3, #0
}
 8010d46:	4618      	mov	r0, r3
 8010d48:	3758      	adds	r7, #88	@ 0x58
 8010d4a:	46bd      	mov	sp, r7
 8010d4c:	bd80      	pop	{r7, pc}
 8010d4e:	bf00      	nop
 8010d50:	41615252 	.word	0x41615252
 8010d54:	61417272 	.word	0x61417272
 8010d58:	24000948 	.word	0x24000948

08010d5c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8010d5c:	b580      	push	{r7, lr}
 8010d5e:	b084      	sub	sp, #16
 8010d60:	af00      	add	r7, sp, #0
 8010d62:	6078      	str	r0, [r7, #4]
 8010d64:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8010d66:	2309      	movs	r3, #9
 8010d68:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d02e      	beq.n	8010dce <validate+0x72>
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	681b      	ldr	r3, [r3, #0]
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d02a      	beq.n	8010dce <validate+0x72>
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	781b      	ldrb	r3, [r3, #0]
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d025      	beq.n	8010dce <validate+0x72>
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	889a      	ldrh	r2, [r3, #4]
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	88db      	ldrh	r3, [r3, #6]
 8010d8c:	429a      	cmp	r2, r3
 8010d8e:	d11e      	bne.n	8010dce <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	4618      	mov	r0, r3
 8010d96:	f7fe fc42 	bl	800f61e <lock_fs>
 8010d9a:	4603      	mov	r3, r0
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d014      	beq.n	8010dca <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	681b      	ldr	r3, [r3, #0]
 8010da4:	785b      	ldrb	r3, [r3, #1]
 8010da6:	4618      	mov	r0, r3
 8010da8:	f7fe fa9a 	bl	800f2e0 <disk_status>
 8010dac:	4603      	mov	r3, r0
 8010dae:	f003 0301 	and.w	r3, r3, #1
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d102      	bne.n	8010dbc <validate+0x60>
				res = FR_OK;
 8010db6:	2300      	movs	r3, #0
 8010db8:	73fb      	strb	r3, [r7, #15]
 8010dba:	e008      	b.n	8010dce <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	681b      	ldr	r3, [r3, #0]
 8010dc0:	2100      	movs	r1, #0
 8010dc2:	4618      	mov	r0, r3
 8010dc4:	f7fe fc41 	bl	800f64a <unlock_fs>
 8010dc8:	e001      	b.n	8010dce <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8010dca:	230f      	movs	r3, #15
 8010dcc:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8010dce:	7bfb      	ldrb	r3, [r7, #15]
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d102      	bne.n	8010dda <validate+0x7e>
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	e000      	b.n	8010ddc <validate+0x80>
 8010dda:	2300      	movs	r3, #0
 8010ddc:	683a      	ldr	r2, [r7, #0]
 8010dde:	6013      	str	r3, [r2, #0]
	return res;
 8010de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8010de2:	4618      	mov	r0, r3
 8010de4:	3710      	adds	r7, #16
 8010de6:	46bd      	mov	sp, r7
 8010de8:	bd80      	pop	{r7, pc}
	...

08010dec <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8010dec:	b580      	push	{r7, lr}
 8010dee:	b088      	sub	sp, #32
 8010df0:	af00      	add	r7, sp, #0
 8010df2:	60f8      	str	r0, [r7, #12]
 8010df4:	60b9      	str	r1, [r7, #8]
 8010df6:	4613      	mov	r3, r2
 8010df8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8010dfa:	68bb      	ldr	r3, [r7, #8]
 8010dfc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8010dfe:	f107 0310 	add.w	r3, r7, #16
 8010e02:	4618      	mov	r0, r3
 8010e04:	f7ff fcbb 	bl	801077e <get_ldnumber>
 8010e08:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8010e0a:	69fb      	ldr	r3, [r7, #28]
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	da01      	bge.n	8010e14 <f_mount+0x28>
 8010e10:	230b      	movs	r3, #11
 8010e12:	e048      	b.n	8010ea6 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8010e14:	4a26      	ldr	r2, [pc, #152]	@ (8010eb0 <f_mount+0xc4>)
 8010e16:	69fb      	ldr	r3, [r7, #28]
 8010e18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010e1c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8010e1e:	69bb      	ldr	r3, [r7, #24]
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d00f      	beq.n	8010e44 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8010e24:	69b8      	ldr	r0, [r7, #24]
 8010e26:	f7fe fd73 	bl	800f910 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8010e2a:	69bb      	ldr	r3, [r7, #24]
 8010e2c:	68db      	ldr	r3, [r3, #12]
 8010e2e:	4618      	mov	r0, r3
 8010e30:	f000 fd78 	bl	8011924 <ff_del_syncobj>
 8010e34:	4603      	mov	r3, r0
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d101      	bne.n	8010e3e <f_mount+0x52>
 8010e3a:	2302      	movs	r3, #2
 8010e3c:	e033      	b.n	8010ea6 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8010e3e:	69bb      	ldr	r3, [r7, #24]
 8010e40:	2200      	movs	r2, #0
 8010e42:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8010e44:	68fb      	ldr	r3, [r7, #12]
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d00f      	beq.n	8010e6a <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8010e4a:	68fb      	ldr	r3, [r7, #12]
 8010e4c:	2200      	movs	r2, #0
 8010e4e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8010e50:	69fb      	ldr	r3, [r7, #28]
 8010e52:	b2da      	uxtb	r2, r3
 8010e54:	68fb      	ldr	r3, [r7, #12]
 8010e56:	330c      	adds	r3, #12
 8010e58:	4619      	mov	r1, r3
 8010e5a:	4610      	mov	r0, r2
 8010e5c:	f000 fd47 	bl	80118ee <ff_cre_syncobj>
 8010e60:	4603      	mov	r3, r0
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d101      	bne.n	8010e6a <f_mount+0x7e>
 8010e66:	2302      	movs	r3, #2
 8010e68:	e01d      	b.n	8010ea6 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8010e6a:	68fa      	ldr	r2, [r7, #12]
 8010e6c:	4910      	ldr	r1, [pc, #64]	@ (8010eb0 <f_mount+0xc4>)
 8010e6e:	69fb      	ldr	r3, [r7, #28]
 8010e70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8010e74:	68fb      	ldr	r3, [r7, #12]
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d002      	beq.n	8010e80 <f_mount+0x94>
 8010e7a:	79fb      	ldrb	r3, [r7, #7]
 8010e7c:	2b01      	cmp	r3, #1
 8010e7e:	d001      	beq.n	8010e84 <f_mount+0x98>
 8010e80:	2300      	movs	r3, #0
 8010e82:	e010      	b.n	8010ea6 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8010e84:	f107 010c 	add.w	r1, r7, #12
 8010e88:	f107 0308 	add.w	r3, r7, #8
 8010e8c:	2200      	movs	r2, #0
 8010e8e:	4618      	mov	r0, r3
 8010e90:	f7ff fd10 	bl	80108b4 <find_volume>
 8010e94:	4603      	mov	r3, r0
 8010e96:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8010e98:	68fb      	ldr	r3, [r7, #12]
 8010e9a:	7dfa      	ldrb	r2, [r7, #23]
 8010e9c:	4611      	mov	r1, r2
 8010e9e:	4618      	mov	r0, r3
 8010ea0:	f7fe fbd3 	bl	800f64a <unlock_fs>
 8010ea4:	7dfb      	ldrb	r3, [r7, #23]
}
 8010ea6:	4618      	mov	r0, r3
 8010ea8:	3720      	adds	r7, #32
 8010eaa:	46bd      	mov	sp, r7
 8010eac:	bd80      	pop	{r7, pc}
 8010eae:	bf00      	nop
 8010eb0:	24000944 	.word	0x24000944

08010eb4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8010eb4:	b580      	push	{r7, lr}
 8010eb6:	b098      	sub	sp, #96	@ 0x60
 8010eb8:	af00      	add	r7, sp, #0
 8010eba:	60f8      	str	r0, [r7, #12]
 8010ebc:	60b9      	str	r1, [r7, #8]
 8010ebe:	4613      	mov	r3, r2
 8010ec0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8010ec2:	68fb      	ldr	r3, [r7, #12]
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d101      	bne.n	8010ecc <f_open+0x18>
 8010ec8:	2309      	movs	r3, #9
 8010eca:	e1b0      	b.n	801122e <f_open+0x37a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8010ecc:	79fb      	ldrb	r3, [r7, #7]
 8010ece:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010ed2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8010ed4:	79fa      	ldrb	r2, [r7, #7]
 8010ed6:	f107 0110 	add.w	r1, r7, #16
 8010eda:	f107 0308 	add.w	r3, r7, #8
 8010ede:	4618      	mov	r0, r3
 8010ee0:	f7ff fce8 	bl	80108b4 <find_volume>
 8010ee4:	4603      	mov	r3, r0
 8010ee6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8010eea:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	f040 818d 	bne.w	801120e <f_open+0x35a>
		dj.obj.fs = fs;
 8010ef4:	693b      	ldr	r3, [r7, #16]
 8010ef6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8010ef8:	68ba      	ldr	r2, [r7, #8]
 8010efa:	f107 0314 	add.w	r3, r7, #20
 8010efe:	4611      	mov	r1, r2
 8010f00:	4618      	mov	r0, r3
 8010f02:	f7ff fbcb 	bl	801069c <follow_path>
 8010f06:	4603      	mov	r3, r0
 8010f08:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8010f0c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d118      	bne.n	8010f46 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8010f14:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8010f18:	b25b      	sxtb	r3, r3
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	da03      	bge.n	8010f26 <f_open+0x72>
				res = FR_INVALID_NAME;
 8010f1e:	2306      	movs	r3, #6
 8010f20:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8010f24:	e00f      	b.n	8010f46 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010f26:	79fb      	ldrb	r3, [r7, #7]
 8010f28:	2b01      	cmp	r3, #1
 8010f2a:	bf8c      	ite	hi
 8010f2c:	2301      	movhi	r3, #1
 8010f2e:	2300      	movls	r3, #0
 8010f30:	b2db      	uxtb	r3, r3
 8010f32:	461a      	mov	r2, r3
 8010f34:	f107 0314 	add.w	r3, r7, #20
 8010f38:	4611      	mov	r1, r2
 8010f3a:	4618      	mov	r0, r3
 8010f3c:	f7fe fba0 	bl	800f680 <chk_lock>
 8010f40:	4603      	mov	r3, r0
 8010f42:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8010f46:	79fb      	ldrb	r3, [r7, #7]
 8010f48:	f003 031c 	and.w	r3, r3, #28
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d07f      	beq.n	8011050 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8010f50:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d017      	beq.n	8010f88 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8010f58:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010f5c:	2b04      	cmp	r3, #4
 8010f5e:	d10e      	bne.n	8010f7e <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8010f60:	f7fe fbea 	bl	800f738 <enq_lock>
 8010f64:	4603      	mov	r3, r0
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d006      	beq.n	8010f78 <f_open+0xc4>
 8010f6a:	f107 0314 	add.w	r3, r7, #20
 8010f6e:	4618      	mov	r0, r3
 8010f70:	f7ff face 	bl	8010510 <dir_register>
 8010f74:	4603      	mov	r3, r0
 8010f76:	e000      	b.n	8010f7a <f_open+0xc6>
 8010f78:	2312      	movs	r3, #18
 8010f7a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8010f7e:	79fb      	ldrb	r3, [r7, #7]
 8010f80:	f043 0308 	orr.w	r3, r3, #8
 8010f84:	71fb      	strb	r3, [r7, #7]
 8010f86:	e010      	b.n	8010faa <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8010f88:	7ebb      	ldrb	r3, [r7, #26]
 8010f8a:	f003 0311 	and.w	r3, r3, #17
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d003      	beq.n	8010f9a <f_open+0xe6>
					res = FR_DENIED;
 8010f92:	2307      	movs	r3, #7
 8010f94:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8010f98:	e007      	b.n	8010faa <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8010f9a:	79fb      	ldrb	r3, [r7, #7]
 8010f9c:	f003 0304 	and.w	r3, r3, #4
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d002      	beq.n	8010faa <f_open+0xf6>
 8010fa4:	2308      	movs	r3, #8
 8010fa6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8010faa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d168      	bne.n	8011084 <f_open+0x1d0>
 8010fb2:	79fb      	ldrb	r3, [r7, #7]
 8010fb4:	f003 0308 	and.w	r3, r3, #8
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d063      	beq.n	8011084 <f_open+0x1d0>
				dw = GET_FATTIME();
 8010fbc:	f7fd ff56 	bl	800ee6c <get_fattime>
 8010fc0:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8010fc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010fc4:	330e      	adds	r3, #14
 8010fc6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010fc8:	4618      	mov	r0, r3
 8010fca:	f7fe fa7e 	bl	800f4ca <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8010fce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010fd0:	3316      	adds	r3, #22
 8010fd2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010fd4:	4618      	mov	r0, r3
 8010fd6:	f7fe fa78 	bl	800f4ca <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8010fda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010fdc:	330b      	adds	r3, #11
 8010fde:	2220      	movs	r2, #32
 8010fe0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8010fe2:	693b      	ldr	r3, [r7, #16]
 8010fe4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010fe6:	4611      	mov	r1, r2
 8010fe8:	4618      	mov	r0, r3
 8010fea:	f7ff f9fd 	bl	80103e8 <ld_clust>
 8010fee:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8010ff0:	693b      	ldr	r3, [r7, #16]
 8010ff2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8010ff4:	2200      	movs	r2, #0
 8010ff6:	4618      	mov	r0, r3
 8010ff8:	f7ff fa15 	bl	8010426 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8010ffc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010ffe:	331c      	adds	r3, #28
 8011000:	2100      	movs	r1, #0
 8011002:	4618      	mov	r0, r3
 8011004:	f7fe fa61 	bl	800f4ca <st_dword>
					fs->wflag = 1;
 8011008:	693b      	ldr	r3, [r7, #16]
 801100a:	2201      	movs	r2, #1
 801100c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801100e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011010:	2b00      	cmp	r3, #0
 8011012:	d037      	beq.n	8011084 <f_open+0x1d0>
						dw = fs->winsect;
 8011014:	693b      	ldr	r3, [r7, #16]
 8011016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011018:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 801101a:	f107 0314 	add.w	r3, r7, #20
 801101e:	2200      	movs	r2, #0
 8011020:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8011022:	4618      	mov	r0, r3
 8011024:	f7fe ff28 	bl	800fe78 <remove_chain>
 8011028:	4603      	mov	r3, r0
 801102a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 801102e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8011032:	2b00      	cmp	r3, #0
 8011034:	d126      	bne.n	8011084 <f_open+0x1d0>
							res = move_window(fs, dw);
 8011036:	693b      	ldr	r3, [r7, #16]
 8011038:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801103a:	4618      	mov	r0, r3
 801103c:	f7fe fcd0 	bl	800f9e0 <move_window>
 8011040:	4603      	mov	r3, r0
 8011042:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8011046:	693b      	ldr	r3, [r7, #16]
 8011048:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801104a:	3a01      	subs	r2, #1
 801104c:	611a      	str	r2, [r3, #16]
 801104e:	e019      	b.n	8011084 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8011050:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8011054:	2b00      	cmp	r3, #0
 8011056:	d115      	bne.n	8011084 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8011058:	7ebb      	ldrb	r3, [r7, #26]
 801105a:	f003 0310 	and.w	r3, r3, #16
 801105e:	2b00      	cmp	r3, #0
 8011060:	d003      	beq.n	801106a <f_open+0x1b6>
					res = FR_NO_FILE;
 8011062:	2304      	movs	r3, #4
 8011064:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8011068:	e00c      	b.n	8011084 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801106a:	79fb      	ldrb	r3, [r7, #7]
 801106c:	f003 0302 	and.w	r3, r3, #2
 8011070:	2b00      	cmp	r3, #0
 8011072:	d007      	beq.n	8011084 <f_open+0x1d0>
 8011074:	7ebb      	ldrb	r3, [r7, #26]
 8011076:	f003 0301 	and.w	r3, r3, #1
 801107a:	2b00      	cmp	r3, #0
 801107c:	d002      	beq.n	8011084 <f_open+0x1d0>
						res = FR_DENIED;
 801107e:	2307      	movs	r3, #7
 8011080:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8011084:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8011088:	2b00      	cmp	r3, #0
 801108a:	d126      	bne.n	80110da <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801108c:	79fb      	ldrb	r3, [r7, #7]
 801108e:	f003 0308 	and.w	r3, r3, #8
 8011092:	2b00      	cmp	r3, #0
 8011094:	d003      	beq.n	801109e <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8011096:	79fb      	ldrb	r3, [r7, #7]
 8011098:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801109c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801109e:	693b      	ldr	r3, [r7, #16]
 80110a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 80110a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80110ac:	79fb      	ldrb	r3, [r7, #7]
 80110ae:	2b01      	cmp	r3, #1
 80110b0:	bf8c      	ite	hi
 80110b2:	2301      	movhi	r3, #1
 80110b4:	2300      	movls	r3, #0
 80110b6:	b2db      	uxtb	r3, r3
 80110b8:	461a      	mov	r2, r3
 80110ba:	f107 0314 	add.w	r3, r7, #20
 80110be:	4611      	mov	r1, r2
 80110c0:	4618      	mov	r0, r3
 80110c2:	f7fe fb5b 	bl	800f77c <inc_lock>
 80110c6:	4602      	mov	r2, r0
 80110c8:	68fb      	ldr	r3, [r7, #12]
 80110ca:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	691b      	ldr	r3, [r3, #16]
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d102      	bne.n	80110da <f_open+0x226>
 80110d4:	2302      	movs	r3, #2
 80110d6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80110da:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80110de:	2b00      	cmp	r3, #0
 80110e0:	f040 8095 	bne.w	801120e <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80110e4:	693b      	ldr	r3, [r7, #16]
 80110e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80110e8:	4611      	mov	r1, r2
 80110ea:	4618      	mov	r0, r3
 80110ec:	f7ff f97c 	bl	80103e8 <ld_clust>
 80110f0:	4602      	mov	r2, r0
 80110f2:	68fb      	ldr	r3, [r7, #12]
 80110f4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80110f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80110f8:	331c      	adds	r3, #28
 80110fa:	4618      	mov	r0, r3
 80110fc:	f7fe f9a7 	bl	800f44e <ld_dword>
 8011100:	4602      	mov	r2, r0
 8011102:	68fb      	ldr	r3, [r7, #12]
 8011104:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	2200      	movs	r2, #0
 801110a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801110c:	693a      	ldr	r2, [r7, #16]
 801110e:	68fb      	ldr	r3, [r7, #12]
 8011110:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8011112:	693b      	ldr	r3, [r7, #16]
 8011114:	88da      	ldrh	r2, [r3, #6]
 8011116:	68fb      	ldr	r3, [r7, #12]
 8011118:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801111a:	68fb      	ldr	r3, [r7, #12]
 801111c:	79fa      	ldrb	r2, [r7, #7]
 801111e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8011120:	68fb      	ldr	r3, [r7, #12]
 8011122:	2200      	movs	r2, #0
 8011124:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8011126:	68fb      	ldr	r3, [r7, #12]
 8011128:	2200      	movs	r2, #0
 801112a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	2200      	movs	r2, #0
 8011130:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8011132:	68fb      	ldr	r3, [r7, #12]
 8011134:	3330      	adds	r3, #48	@ 0x30
 8011136:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801113a:	2100      	movs	r1, #0
 801113c:	4618      	mov	r0, r3
 801113e:	f7fe fa11 	bl	800f564 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8011142:	79fb      	ldrb	r3, [r7, #7]
 8011144:	f003 0320 	and.w	r3, r3, #32
 8011148:	2b00      	cmp	r3, #0
 801114a:	d060      	beq.n	801120e <f_open+0x35a>
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	68db      	ldr	r3, [r3, #12]
 8011150:	2b00      	cmp	r3, #0
 8011152:	d05c      	beq.n	801120e <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8011154:	68fb      	ldr	r3, [r7, #12]
 8011156:	68da      	ldr	r2, [r3, #12]
 8011158:	68fb      	ldr	r3, [r7, #12]
 801115a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801115c:	693b      	ldr	r3, [r7, #16]
 801115e:	895b      	ldrh	r3, [r3, #10]
 8011160:	025b      	lsls	r3, r3, #9
 8011162:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8011164:	68fb      	ldr	r3, [r7, #12]
 8011166:	689b      	ldr	r3, [r3, #8]
 8011168:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801116a:	68fb      	ldr	r3, [r7, #12]
 801116c:	68db      	ldr	r3, [r3, #12]
 801116e:	657b      	str	r3, [r7, #84]	@ 0x54
 8011170:	e016      	b.n	80111a0 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8011172:	68fb      	ldr	r3, [r7, #12]
 8011174:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8011176:	4618      	mov	r0, r3
 8011178:	f7fe fced 	bl	800fb56 <get_fat>
 801117c:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 801117e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011180:	2b01      	cmp	r3, #1
 8011182:	d802      	bhi.n	801118a <f_open+0x2d6>
 8011184:	2302      	movs	r3, #2
 8011186:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801118a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801118c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011190:	d102      	bne.n	8011198 <f_open+0x2e4>
 8011192:	2301      	movs	r3, #1
 8011194:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011198:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801119a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801119c:	1ad3      	subs	r3, r2, r3
 801119e:	657b      	str	r3, [r7, #84]	@ 0x54
 80111a0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d103      	bne.n	80111b0 <f_open+0x2fc>
 80111a8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80111aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80111ac:	429a      	cmp	r2, r3
 80111ae:	d8e0      	bhi.n	8011172 <f_open+0x2be>
				}
				fp->clust = clst;
 80111b0:	68fb      	ldr	r3, [r7, #12]
 80111b2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80111b4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80111b6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d127      	bne.n	801120e <f_open+0x35a>
 80111be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80111c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d022      	beq.n	801120e <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80111c8:	693b      	ldr	r3, [r7, #16]
 80111ca:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80111cc:	4618      	mov	r0, r3
 80111ce:	f7fe fca3 	bl	800fb18 <clust2sect>
 80111d2:	6478      	str	r0, [r7, #68]	@ 0x44
 80111d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d103      	bne.n	80111e2 <f_open+0x32e>
						res = FR_INT_ERR;
 80111da:	2302      	movs	r3, #2
 80111dc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80111e0:	e015      	b.n	801120e <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80111e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80111e4:	0a5a      	lsrs	r2, r3, #9
 80111e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80111e8:	441a      	add	r2, r3
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80111ee:	693b      	ldr	r3, [r7, #16]
 80111f0:	7858      	ldrb	r0, [r3, #1]
 80111f2:	68fb      	ldr	r3, [r7, #12]
 80111f4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	6a1a      	ldr	r2, [r3, #32]
 80111fc:	2301      	movs	r3, #1
 80111fe:	f7fe f8af 	bl	800f360 <disk_read>
 8011202:	4603      	mov	r3, r0
 8011204:	2b00      	cmp	r3, #0
 8011206:	d002      	beq.n	801120e <f_open+0x35a>
 8011208:	2301      	movs	r3, #1
 801120a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801120e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8011212:	2b00      	cmp	r3, #0
 8011214:	d002      	beq.n	801121c <f_open+0x368>
 8011216:	68fb      	ldr	r3, [r7, #12]
 8011218:	2200      	movs	r2, #0
 801121a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801121c:	693b      	ldr	r3, [r7, #16]
 801121e:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 8011222:	4611      	mov	r1, r2
 8011224:	4618      	mov	r0, r3
 8011226:	f7fe fa10 	bl	800f64a <unlock_fs>
 801122a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 801122e:	4618      	mov	r0, r3
 8011230:	3760      	adds	r7, #96	@ 0x60
 8011232:	46bd      	mov	sp, r7
 8011234:	bd80      	pop	{r7, pc}

08011236 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8011236:	b580      	push	{r7, lr}
 8011238:	b08c      	sub	sp, #48	@ 0x30
 801123a:	af00      	add	r7, sp, #0
 801123c:	60f8      	str	r0, [r7, #12]
 801123e:	60b9      	str	r1, [r7, #8]
 8011240:	607a      	str	r2, [r7, #4]
 8011242:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8011244:	68bb      	ldr	r3, [r7, #8]
 8011246:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8011248:	683b      	ldr	r3, [r7, #0]
 801124a:	2200      	movs	r2, #0
 801124c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801124e:	68fb      	ldr	r3, [r7, #12]
 8011250:	f107 0210 	add.w	r2, r7, #16
 8011254:	4611      	mov	r1, r2
 8011256:	4618      	mov	r0, r3
 8011258:	f7ff fd80 	bl	8010d5c <validate>
 801125c:	4603      	mov	r3, r0
 801125e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8011262:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011266:	2b00      	cmp	r3, #0
 8011268:	d107      	bne.n	801127a <f_write+0x44>
 801126a:	68fb      	ldr	r3, [r7, #12]
 801126c:	7d5b      	ldrb	r3, [r3, #21]
 801126e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8011272:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011276:	2b00      	cmp	r3, #0
 8011278:	d009      	beq.n	801128e <f_write+0x58>
 801127a:	693b      	ldr	r3, [r7, #16]
 801127c:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8011280:	4611      	mov	r1, r2
 8011282:	4618      	mov	r0, r3
 8011284:	f7fe f9e1 	bl	800f64a <unlock_fs>
 8011288:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801128c:	e173      	b.n	8011576 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801128e:	68fb      	ldr	r3, [r7, #12]
 8011290:	7d1b      	ldrb	r3, [r3, #20]
 8011292:	f003 0302 	and.w	r3, r3, #2
 8011296:	2b00      	cmp	r3, #0
 8011298:	d106      	bne.n	80112a8 <f_write+0x72>
 801129a:	693b      	ldr	r3, [r7, #16]
 801129c:	2107      	movs	r1, #7
 801129e:	4618      	mov	r0, r3
 80112a0:	f7fe f9d3 	bl	800f64a <unlock_fs>
 80112a4:	2307      	movs	r3, #7
 80112a6:	e166      	b.n	8011576 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80112a8:	68fb      	ldr	r3, [r7, #12]
 80112aa:	699a      	ldr	r2, [r3, #24]
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	441a      	add	r2, r3
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	699b      	ldr	r3, [r3, #24]
 80112b4:	429a      	cmp	r2, r3
 80112b6:	f080 814b 	bcs.w	8011550 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80112ba:	68fb      	ldr	r3, [r7, #12]
 80112bc:	699b      	ldr	r3, [r3, #24]
 80112be:	43db      	mvns	r3, r3
 80112c0:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80112c2:	e145      	b.n	8011550 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	699b      	ldr	r3, [r3, #24]
 80112c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	f040 8101 	bne.w	80114d4 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80112d2:	68fb      	ldr	r3, [r7, #12]
 80112d4:	699b      	ldr	r3, [r3, #24]
 80112d6:	0a5b      	lsrs	r3, r3, #9
 80112d8:	693a      	ldr	r2, [r7, #16]
 80112da:	8952      	ldrh	r2, [r2, #10]
 80112dc:	3a01      	subs	r2, #1
 80112de:	4013      	ands	r3, r2
 80112e0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80112e2:	69bb      	ldr	r3, [r7, #24]
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d14d      	bne.n	8011384 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	699b      	ldr	r3, [r3, #24]
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d10c      	bne.n	801130a <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80112f0:	68fb      	ldr	r3, [r7, #12]
 80112f2:	689b      	ldr	r3, [r3, #8]
 80112f4:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80112f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d11a      	bne.n	8011332 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80112fc:	68fb      	ldr	r3, [r7, #12]
 80112fe:	2100      	movs	r1, #0
 8011300:	4618      	mov	r0, r3
 8011302:	f7fe fe1e 	bl	800ff42 <create_chain>
 8011306:	62b8      	str	r0, [r7, #40]	@ 0x28
 8011308:	e013      	b.n	8011332 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801130a:	68fb      	ldr	r3, [r7, #12]
 801130c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801130e:	2b00      	cmp	r3, #0
 8011310:	d007      	beq.n	8011322 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8011312:	68fb      	ldr	r3, [r7, #12]
 8011314:	699b      	ldr	r3, [r3, #24]
 8011316:	4619      	mov	r1, r3
 8011318:	68f8      	ldr	r0, [r7, #12]
 801131a:	f7fe feaa 	bl	8010072 <clmt_clust>
 801131e:	62b8      	str	r0, [r7, #40]	@ 0x28
 8011320:	e007      	b.n	8011332 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8011322:	68fa      	ldr	r2, [r7, #12]
 8011324:	68fb      	ldr	r3, [r7, #12]
 8011326:	69db      	ldr	r3, [r3, #28]
 8011328:	4619      	mov	r1, r3
 801132a:	4610      	mov	r0, r2
 801132c:	f7fe fe09 	bl	800ff42 <create_chain>
 8011330:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011334:	2b00      	cmp	r3, #0
 8011336:	f000 8110 	beq.w	801155a <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801133a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801133c:	2b01      	cmp	r3, #1
 801133e:	d109      	bne.n	8011354 <f_write+0x11e>
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	2202      	movs	r2, #2
 8011344:	755a      	strb	r2, [r3, #21]
 8011346:	693b      	ldr	r3, [r7, #16]
 8011348:	2102      	movs	r1, #2
 801134a:	4618      	mov	r0, r3
 801134c:	f7fe f97d 	bl	800f64a <unlock_fs>
 8011350:	2302      	movs	r3, #2
 8011352:	e110      	b.n	8011576 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011356:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801135a:	d109      	bne.n	8011370 <f_write+0x13a>
 801135c:	68fb      	ldr	r3, [r7, #12]
 801135e:	2201      	movs	r2, #1
 8011360:	755a      	strb	r2, [r3, #21]
 8011362:	693b      	ldr	r3, [r7, #16]
 8011364:	2101      	movs	r1, #1
 8011366:	4618      	mov	r0, r3
 8011368:	f7fe f96f 	bl	800f64a <unlock_fs>
 801136c:	2301      	movs	r3, #1
 801136e:	e102      	b.n	8011576 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8011370:	68fb      	ldr	r3, [r7, #12]
 8011372:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011374:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8011376:	68fb      	ldr	r3, [r7, #12]
 8011378:	689b      	ldr	r3, [r3, #8]
 801137a:	2b00      	cmp	r3, #0
 801137c:	d102      	bne.n	8011384 <f_write+0x14e>
 801137e:	68fb      	ldr	r3, [r7, #12]
 8011380:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011382:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	7d1b      	ldrb	r3, [r3, #20]
 8011388:	b25b      	sxtb	r3, r3
 801138a:	2b00      	cmp	r3, #0
 801138c:	da1d      	bge.n	80113ca <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801138e:	693b      	ldr	r3, [r7, #16]
 8011390:	7858      	ldrb	r0, [r3, #1]
 8011392:	68fb      	ldr	r3, [r7, #12]
 8011394:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011398:	68fb      	ldr	r3, [r7, #12]
 801139a:	6a1a      	ldr	r2, [r3, #32]
 801139c:	2301      	movs	r3, #1
 801139e:	f7fd ffff 	bl	800f3a0 <disk_write>
 80113a2:	4603      	mov	r3, r0
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d009      	beq.n	80113bc <f_write+0x186>
 80113a8:	68fb      	ldr	r3, [r7, #12]
 80113aa:	2201      	movs	r2, #1
 80113ac:	755a      	strb	r2, [r3, #21]
 80113ae:	693b      	ldr	r3, [r7, #16]
 80113b0:	2101      	movs	r1, #1
 80113b2:	4618      	mov	r0, r3
 80113b4:	f7fe f949 	bl	800f64a <unlock_fs>
 80113b8:	2301      	movs	r3, #1
 80113ba:	e0dc      	b.n	8011576 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	7d1b      	ldrb	r3, [r3, #20]
 80113c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80113c4:	b2da      	uxtb	r2, r3
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80113ca:	693a      	ldr	r2, [r7, #16]
 80113cc:	68fb      	ldr	r3, [r7, #12]
 80113ce:	69db      	ldr	r3, [r3, #28]
 80113d0:	4619      	mov	r1, r3
 80113d2:	4610      	mov	r0, r2
 80113d4:	f7fe fba0 	bl	800fb18 <clust2sect>
 80113d8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80113da:	697b      	ldr	r3, [r7, #20]
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d109      	bne.n	80113f4 <f_write+0x1be>
 80113e0:	68fb      	ldr	r3, [r7, #12]
 80113e2:	2202      	movs	r2, #2
 80113e4:	755a      	strb	r2, [r3, #21]
 80113e6:	693b      	ldr	r3, [r7, #16]
 80113e8:	2102      	movs	r1, #2
 80113ea:	4618      	mov	r0, r3
 80113ec:	f7fe f92d 	bl	800f64a <unlock_fs>
 80113f0:	2302      	movs	r3, #2
 80113f2:	e0c0      	b.n	8011576 <f_write+0x340>
			sect += csect;
 80113f4:	697a      	ldr	r2, [r7, #20]
 80113f6:	69bb      	ldr	r3, [r7, #24]
 80113f8:	4413      	add	r3, r2
 80113fa:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	0a5b      	lsrs	r3, r3, #9
 8011400:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8011402:	6a3b      	ldr	r3, [r7, #32]
 8011404:	2b00      	cmp	r3, #0
 8011406:	d041      	beq.n	801148c <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8011408:	69ba      	ldr	r2, [r7, #24]
 801140a:	6a3b      	ldr	r3, [r7, #32]
 801140c:	4413      	add	r3, r2
 801140e:	693a      	ldr	r2, [r7, #16]
 8011410:	8952      	ldrh	r2, [r2, #10]
 8011412:	4293      	cmp	r3, r2
 8011414:	d905      	bls.n	8011422 <f_write+0x1ec>
					cc = fs->csize - csect;
 8011416:	693b      	ldr	r3, [r7, #16]
 8011418:	895b      	ldrh	r3, [r3, #10]
 801141a:	461a      	mov	r2, r3
 801141c:	69bb      	ldr	r3, [r7, #24]
 801141e:	1ad3      	subs	r3, r2, r3
 8011420:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011422:	693b      	ldr	r3, [r7, #16]
 8011424:	7858      	ldrb	r0, [r3, #1]
 8011426:	6a3b      	ldr	r3, [r7, #32]
 8011428:	697a      	ldr	r2, [r7, #20]
 801142a:	69f9      	ldr	r1, [r7, #28]
 801142c:	f7fd ffb8 	bl	800f3a0 <disk_write>
 8011430:	4603      	mov	r3, r0
 8011432:	2b00      	cmp	r3, #0
 8011434:	d009      	beq.n	801144a <f_write+0x214>
 8011436:	68fb      	ldr	r3, [r7, #12]
 8011438:	2201      	movs	r2, #1
 801143a:	755a      	strb	r2, [r3, #21]
 801143c:	693b      	ldr	r3, [r7, #16]
 801143e:	2101      	movs	r1, #1
 8011440:	4618      	mov	r0, r3
 8011442:	f7fe f902 	bl	800f64a <unlock_fs>
 8011446:	2301      	movs	r3, #1
 8011448:	e095      	b.n	8011576 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	6a1a      	ldr	r2, [r3, #32]
 801144e:	697b      	ldr	r3, [r7, #20]
 8011450:	1ad3      	subs	r3, r2, r3
 8011452:	6a3a      	ldr	r2, [r7, #32]
 8011454:	429a      	cmp	r2, r3
 8011456:	d915      	bls.n	8011484 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8011458:	68fb      	ldr	r3, [r7, #12]
 801145a:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	6a1a      	ldr	r2, [r3, #32]
 8011462:	697b      	ldr	r3, [r7, #20]
 8011464:	1ad3      	subs	r3, r2, r3
 8011466:	025b      	lsls	r3, r3, #9
 8011468:	69fa      	ldr	r2, [r7, #28]
 801146a:	4413      	add	r3, r2
 801146c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011470:	4619      	mov	r1, r3
 8011472:	f7fe f856 	bl	800f522 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8011476:	68fb      	ldr	r3, [r7, #12]
 8011478:	7d1b      	ldrb	r3, [r3, #20]
 801147a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801147e:	b2da      	uxtb	r2, r3
 8011480:	68fb      	ldr	r3, [r7, #12]
 8011482:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8011484:	6a3b      	ldr	r3, [r7, #32]
 8011486:	025b      	lsls	r3, r3, #9
 8011488:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 801148a:	e044      	b.n	8011516 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801148c:	68fb      	ldr	r3, [r7, #12]
 801148e:	6a1b      	ldr	r3, [r3, #32]
 8011490:	697a      	ldr	r2, [r7, #20]
 8011492:	429a      	cmp	r2, r3
 8011494:	d01b      	beq.n	80114ce <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	699a      	ldr	r2, [r3, #24]
 801149a:	68fb      	ldr	r3, [r7, #12]
 801149c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801149e:	429a      	cmp	r2, r3
 80114a0:	d215      	bcs.n	80114ce <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80114a2:	693b      	ldr	r3, [r7, #16]
 80114a4:	7858      	ldrb	r0, [r3, #1]
 80114a6:	68fb      	ldr	r3, [r7, #12]
 80114a8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80114ac:	2301      	movs	r3, #1
 80114ae:	697a      	ldr	r2, [r7, #20]
 80114b0:	f7fd ff56 	bl	800f360 <disk_read>
 80114b4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	d009      	beq.n	80114ce <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 80114ba:	68fb      	ldr	r3, [r7, #12]
 80114bc:	2201      	movs	r2, #1
 80114be:	755a      	strb	r2, [r3, #21]
 80114c0:	693b      	ldr	r3, [r7, #16]
 80114c2:	2101      	movs	r1, #1
 80114c4:	4618      	mov	r0, r3
 80114c6:	f7fe f8c0 	bl	800f64a <unlock_fs>
 80114ca:	2301      	movs	r3, #1
 80114cc:	e053      	b.n	8011576 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 80114ce:	68fb      	ldr	r3, [r7, #12]
 80114d0:	697a      	ldr	r2, [r7, #20]
 80114d2:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80114d4:	68fb      	ldr	r3, [r7, #12]
 80114d6:	699b      	ldr	r3, [r3, #24]
 80114d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80114dc:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80114e0:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80114e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	429a      	cmp	r2, r3
 80114e8:	d901      	bls.n	80114ee <f_write+0x2b8>
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80114ee:	68fb      	ldr	r3, [r7, #12]
 80114f0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	699b      	ldr	r3, [r3, #24]
 80114f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80114fc:	4413      	add	r3, r2
 80114fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011500:	69f9      	ldr	r1, [r7, #28]
 8011502:	4618      	mov	r0, r3
 8011504:	f7fe f80d 	bl	800f522 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	7d1b      	ldrb	r3, [r3, #20]
 801150c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8011510:	b2da      	uxtb	r2, r3
 8011512:	68fb      	ldr	r3, [r7, #12]
 8011514:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8011516:	69fa      	ldr	r2, [r7, #28]
 8011518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801151a:	4413      	add	r3, r2
 801151c:	61fb      	str	r3, [r7, #28]
 801151e:	68fb      	ldr	r3, [r7, #12]
 8011520:	699a      	ldr	r2, [r3, #24]
 8011522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011524:	441a      	add	r2, r3
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	619a      	str	r2, [r3, #24]
 801152a:	68fb      	ldr	r3, [r7, #12]
 801152c:	68da      	ldr	r2, [r3, #12]
 801152e:	68fb      	ldr	r3, [r7, #12]
 8011530:	699b      	ldr	r3, [r3, #24]
 8011532:	429a      	cmp	r2, r3
 8011534:	bf38      	it	cc
 8011536:	461a      	movcc	r2, r3
 8011538:	68fb      	ldr	r3, [r7, #12]
 801153a:	60da      	str	r2, [r3, #12]
 801153c:	683b      	ldr	r3, [r7, #0]
 801153e:	681a      	ldr	r2, [r3, #0]
 8011540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011542:	441a      	add	r2, r3
 8011544:	683b      	ldr	r3, [r7, #0]
 8011546:	601a      	str	r2, [r3, #0]
 8011548:	687a      	ldr	r2, [r7, #4]
 801154a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801154c:	1ad3      	subs	r3, r2, r3
 801154e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	2b00      	cmp	r3, #0
 8011554:	f47f aeb6 	bne.w	80112c4 <f_write+0x8e>
 8011558:	e000      	b.n	801155c <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801155a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	7d1b      	ldrb	r3, [r3, #20]
 8011560:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011564:	b2da      	uxtb	r2, r3
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801156a:	693b      	ldr	r3, [r7, #16]
 801156c:	2100      	movs	r1, #0
 801156e:	4618      	mov	r0, r3
 8011570:	f7fe f86b 	bl	800f64a <unlock_fs>
 8011574:	2300      	movs	r3, #0
}
 8011576:	4618      	mov	r0, r3
 8011578:	3730      	adds	r7, #48	@ 0x30
 801157a:	46bd      	mov	sp, r7
 801157c:	bd80      	pop	{r7, pc}

0801157e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801157e:	b580      	push	{r7, lr}
 8011580:	b086      	sub	sp, #24
 8011582:	af00      	add	r7, sp, #0
 8011584:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	f107 0208 	add.w	r2, r7, #8
 801158c:	4611      	mov	r1, r2
 801158e:	4618      	mov	r0, r3
 8011590:	f7ff fbe4 	bl	8010d5c <validate>
 8011594:	4603      	mov	r3, r0
 8011596:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011598:	7dfb      	ldrb	r3, [r7, #23]
 801159a:	2b00      	cmp	r3, #0
 801159c:	d16d      	bne.n	801167a <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	7d1b      	ldrb	r3, [r3, #20]
 80115a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d067      	beq.n	801167a <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	7d1b      	ldrb	r3, [r3, #20]
 80115ae:	b25b      	sxtb	r3, r3
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	da1a      	bge.n	80115ea <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80115b4:	68bb      	ldr	r3, [r7, #8]
 80115b6:	7858      	ldrb	r0, [r3, #1]
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	6a1a      	ldr	r2, [r3, #32]
 80115c2:	2301      	movs	r3, #1
 80115c4:	f7fd feec 	bl	800f3a0 <disk_write>
 80115c8:	4603      	mov	r3, r0
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d006      	beq.n	80115dc <f_sync+0x5e>
 80115ce:	68bb      	ldr	r3, [r7, #8]
 80115d0:	2101      	movs	r1, #1
 80115d2:	4618      	mov	r0, r3
 80115d4:	f7fe f839 	bl	800f64a <unlock_fs>
 80115d8:	2301      	movs	r3, #1
 80115da:	e055      	b.n	8011688 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	7d1b      	ldrb	r3, [r3, #20]
 80115e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80115e4:	b2da      	uxtb	r2, r3
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80115ea:	f7fd fc3f 	bl	800ee6c <get_fattime>
 80115ee:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80115f0:	68ba      	ldr	r2, [r7, #8]
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80115f6:	4619      	mov	r1, r3
 80115f8:	4610      	mov	r0, r2
 80115fa:	f7fe f9f1 	bl	800f9e0 <move_window>
 80115fe:	4603      	mov	r3, r0
 8011600:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8011602:	7dfb      	ldrb	r3, [r7, #23]
 8011604:	2b00      	cmp	r3, #0
 8011606:	d138      	bne.n	801167a <f_sync+0xfc>
					dir = fp->dir_ptr;
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801160c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801160e:	68fb      	ldr	r3, [r7, #12]
 8011610:	330b      	adds	r3, #11
 8011612:	781a      	ldrb	r2, [r3, #0]
 8011614:	68fb      	ldr	r3, [r7, #12]
 8011616:	330b      	adds	r3, #11
 8011618:	f042 0220 	orr.w	r2, r2, #32
 801161c:	b2d2      	uxtb	r2, r2
 801161e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	6818      	ldr	r0, [r3, #0]
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	689b      	ldr	r3, [r3, #8]
 8011628:	461a      	mov	r2, r3
 801162a:	68f9      	ldr	r1, [r7, #12]
 801162c:	f7fe fefb 	bl	8010426 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	f103 021c 	add.w	r2, r3, #28
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	68db      	ldr	r3, [r3, #12]
 801163a:	4619      	mov	r1, r3
 801163c:	4610      	mov	r0, r2
 801163e:	f7fd ff44 	bl	800f4ca <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8011642:	68fb      	ldr	r3, [r7, #12]
 8011644:	3316      	adds	r3, #22
 8011646:	6939      	ldr	r1, [r7, #16]
 8011648:	4618      	mov	r0, r3
 801164a:	f7fd ff3e 	bl	800f4ca <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801164e:	68fb      	ldr	r3, [r7, #12]
 8011650:	3312      	adds	r3, #18
 8011652:	2100      	movs	r1, #0
 8011654:	4618      	mov	r0, r3
 8011656:	f7fd ff1d 	bl	800f494 <st_word>
					fs->wflag = 1;
 801165a:	68bb      	ldr	r3, [r7, #8]
 801165c:	2201      	movs	r2, #1
 801165e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8011660:	68bb      	ldr	r3, [r7, #8]
 8011662:	4618      	mov	r0, r3
 8011664:	f7fe f9ea 	bl	800fa3c <sync_fs>
 8011668:	4603      	mov	r3, r0
 801166a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	7d1b      	ldrb	r3, [r3, #20]
 8011670:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011674:	b2da      	uxtb	r2, r3
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801167a:	68bb      	ldr	r3, [r7, #8]
 801167c:	7dfa      	ldrb	r2, [r7, #23]
 801167e:	4611      	mov	r1, r2
 8011680:	4618      	mov	r0, r3
 8011682:	f7fd ffe2 	bl	800f64a <unlock_fs>
 8011686:	7dfb      	ldrb	r3, [r7, #23]
}
 8011688:	4618      	mov	r0, r3
 801168a:	3718      	adds	r7, #24
 801168c:	46bd      	mov	sp, r7
 801168e:	bd80      	pop	{r7, pc}

08011690 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8011690:	b580      	push	{r7, lr}
 8011692:	b084      	sub	sp, #16
 8011694:	af00      	add	r7, sp, #0
 8011696:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8011698:	6878      	ldr	r0, [r7, #4]
 801169a:	f7ff ff70 	bl	801157e <f_sync>
 801169e:	4603      	mov	r3, r0
 80116a0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80116a2:	7bfb      	ldrb	r3, [r7, #15]
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d11d      	bne.n	80116e4 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	f107 0208 	add.w	r2, r7, #8
 80116ae:	4611      	mov	r1, r2
 80116b0:	4618      	mov	r0, r3
 80116b2:	f7ff fb53 	bl	8010d5c <validate>
 80116b6:	4603      	mov	r3, r0
 80116b8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80116ba:	7bfb      	ldrb	r3, [r7, #15]
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d111      	bne.n	80116e4 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	691b      	ldr	r3, [r3, #16]
 80116c4:	4618      	mov	r0, r3
 80116c6:	f7fe f8e7 	bl	800f898 <dec_lock>
 80116ca:	4603      	mov	r3, r0
 80116cc:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80116ce:	7bfb      	ldrb	r3, [r7, #15]
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d102      	bne.n	80116da <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	2200      	movs	r2, #0
 80116d8:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 80116da:	68bb      	ldr	r3, [r7, #8]
 80116dc:	2100      	movs	r1, #0
 80116de:	4618      	mov	r0, r3
 80116e0:	f7fd ffb3 	bl	800f64a <unlock_fs>
#endif
		}
	}
	return res;
 80116e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80116e6:	4618      	mov	r0, r3
 80116e8:	3710      	adds	r7, #16
 80116ea:	46bd      	mov	sp, r7
 80116ec:	bd80      	pop	{r7, pc}

080116ee <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80116ee:	b580      	push	{r7, lr}
 80116f0:	b086      	sub	sp, #24
 80116f2:	af00      	add	r7, sp, #0
 80116f4:	6078      	str	r0, [r7, #4]
 80116f6:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d101      	bne.n	8011702 <f_opendir+0x14>
 80116fe:	2309      	movs	r3, #9
 8011700:	e06a      	b.n	80117d8 <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8011706:	f107 010c 	add.w	r1, r7, #12
 801170a:	463b      	mov	r3, r7
 801170c:	2200      	movs	r2, #0
 801170e:	4618      	mov	r0, r3
 8011710:	f7ff f8d0 	bl	80108b4 <find_volume>
 8011714:	4603      	mov	r3, r0
 8011716:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011718:	7dfb      	ldrb	r3, [r7, #23]
 801171a:	2b00      	cmp	r3, #0
 801171c:	d14f      	bne.n	80117be <f_opendir+0xd0>
		obj->fs = fs;
 801171e:	68fa      	ldr	r2, [r7, #12]
 8011720:	693b      	ldr	r3, [r7, #16]
 8011722:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8011724:	683b      	ldr	r3, [r7, #0]
 8011726:	4619      	mov	r1, r3
 8011728:	6878      	ldr	r0, [r7, #4]
 801172a:	f7fe ffb7 	bl	801069c <follow_path>
 801172e:	4603      	mov	r3, r0
 8011730:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8011732:	7dfb      	ldrb	r3, [r7, #23]
 8011734:	2b00      	cmp	r3, #0
 8011736:	d13d      	bne.n	80117b4 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801173e:	b25b      	sxtb	r3, r3
 8011740:	2b00      	cmp	r3, #0
 8011742:	db12      	blt.n	801176a <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8011744:	693b      	ldr	r3, [r7, #16]
 8011746:	799b      	ldrb	r3, [r3, #6]
 8011748:	f003 0310 	and.w	r3, r3, #16
 801174c:	2b00      	cmp	r3, #0
 801174e:	d00a      	beq.n	8011766 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8011750:	68fa      	ldr	r2, [r7, #12]
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	6a1b      	ldr	r3, [r3, #32]
 8011756:	4619      	mov	r1, r3
 8011758:	4610      	mov	r0, r2
 801175a:	f7fe fe45 	bl	80103e8 <ld_clust>
 801175e:	4602      	mov	r2, r0
 8011760:	693b      	ldr	r3, [r7, #16]
 8011762:	609a      	str	r2, [r3, #8]
 8011764:	e001      	b.n	801176a <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8011766:	2305      	movs	r3, #5
 8011768:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 801176a:	7dfb      	ldrb	r3, [r7, #23]
 801176c:	2b00      	cmp	r3, #0
 801176e:	d121      	bne.n	80117b4 <f_opendir+0xc6>
				obj->id = fs->id;
 8011770:	68fb      	ldr	r3, [r7, #12]
 8011772:	88da      	ldrh	r2, [r3, #6]
 8011774:	693b      	ldr	r3, [r7, #16]
 8011776:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8011778:	2100      	movs	r1, #0
 801177a:	6878      	ldr	r0, [r7, #4]
 801177c:	f7fe fcad 	bl	80100da <dir_sdi>
 8011780:	4603      	mov	r3, r0
 8011782:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8011784:	7dfb      	ldrb	r3, [r7, #23]
 8011786:	2b00      	cmp	r3, #0
 8011788:	d114      	bne.n	80117b4 <f_opendir+0xc6>
					if (obj->sclust) {
 801178a:	693b      	ldr	r3, [r7, #16]
 801178c:	689b      	ldr	r3, [r3, #8]
 801178e:	2b00      	cmp	r3, #0
 8011790:	d00d      	beq.n	80117ae <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8011792:	2100      	movs	r1, #0
 8011794:	6878      	ldr	r0, [r7, #4]
 8011796:	f7fd fff1 	bl	800f77c <inc_lock>
 801179a:	4602      	mov	r2, r0
 801179c:	693b      	ldr	r3, [r7, #16]
 801179e:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 80117a0:	693b      	ldr	r3, [r7, #16]
 80117a2:	691b      	ldr	r3, [r3, #16]
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d105      	bne.n	80117b4 <f_opendir+0xc6>
 80117a8:	2312      	movs	r3, #18
 80117aa:	75fb      	strb	r3, [r7, #23]
 80117ac:	e002      	b.n	80117b4 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 80117ae:	693b      	ldr	r3, [r7, #16]
 80117b0:	2200      	movs	r2, #0
 80117b2:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80117b4:	7dfb      	ldrb	r3, [r7, #23]
 80117b6:	2b04      	cmp	r3, #4
 80117b8:	d101      	bne.n	80117be <f_opendir+0xd0>
 80117ba:	2305      	movs	r3, #5
 80117bc:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 80117be:	7dfb      	ldrb	r3, [r7, #23]
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d002      	beq.n	80117ca <f_opendir+0xdc>
 80117c4:	693b      	ldr	r3, [r7, #16]
 80117c6:	2200      	movs	r2, #0
 80117c8:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80117ca:	68fb      	ldr	r3, [r7, #12]
 80117cc:	7dfa      	ldrb	r2, [r7, #23]
 80117ce:	4611      	mov	r1, r2
 80117d0:	4618      	mov	r0, r3
 80117d2:	f7fd ff3a 	bl	800f64a <unlock_fs>
 80117d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80117d8:	4618      	mov	r0, r3
 80117da:	3718      	adds	r7, #24
 80117dc:	46bd      	mov	sp, r7
 80117de:	bd80      	pop	{r7, pc}

080117e0 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 80117e0:	b580      	push	{r7, lr}
 80117e2:	b084      	sub	sp, #16
 80117e4:	af00      	add	r7, sp, #0
 80117e6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	f107 0208 	add.w	r2, r7, #8
 80117ee:	4611      	mov	r1, r2
 80117f0:	4618      	mov	r0, r3
 80117f2:	f7ff fab3 	bl	8010d5c <validate>
 80117f6:	4603      	mov	r3, r0
 80117f8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80117fa:	7bfb      	ldrb	r3, [r7, #15]
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d115      	bne.n	801182c <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	691b      	ldr	r3, [r3, #16]
 8011804:	2b00      	cmp	r3, #0
 8011806:	d006      	beq.n	8011816 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	691b      	ldr	r3, [r3, #16]
 801180c:	4618      	mov	r0, r3
 801180e:	f7fe f843 	bl	800f898 <dec_lock>
 8011812:	4603      	mov	r3, r0
 8011814:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8011816:	7bfb      	ldrb	r3, [r7, #15]
 8011818:	2b00      	cmp	r3, #0
 801181a:	d102      	bne.n	8011822 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	2200      	movs	r2, #0
 8011820:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 8011822:	68bb      	ldr	r3, [r7, #8]
 8011824:	2100      	movs	r1, #0
 8011826:	4618      	mov	r0, r3
 8011828:	f7fd ff0f 	bl	800f64a <unlock_fs>
#endif
	}
	return res;
 801182c:	7bfb      	ldrb	r3, [r7, #15]
}
 801182e:	4618      	mov	r0, r3
 8011830:	3710      	adds	r7, #16
 8011832:	46bd      	mov	sp, r7
 8011834:	bd80      	pop	{r7, pc}
	...

08011838 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011838:	b480      	push	{r7}
 801183a:	b087      	sub	sp, #28
 801183c:	af00      	add	r7, sp, #0
 801183e:	60f8      	str	r0, [r7, #12]
 8011840:	60b9      	str	r1, [r7, #8]
 8011842:	4613      	mov	r3, r2
 8011844:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011846:	2301      	movs	r3, #1
 8011848:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801184a:	2300      	movs	r3, #0
 801184c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801184e:	4b1f      	ldr	r3, [pc, #124]	@ (80118cc <FATFS_LinkDriverEx+0x94>)
 8011850:	7a5b      	ldrb	r3, [r3, #9]
 8011852:	b2db      	uxtb	r3, r3
 8011854:	2b00      	cmp	r3, #0
 8011856:	d131      	bne.n	80118bc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011858:	4b1c      	ldr	r3, [pc, #112]	@ (80118cc <FATFS_LinkDriverEx+0x94>)
 801185a:	7a5b      	ldrb	r3, [r3, #9]
 801185c:	b2db      	uxtb	r3, r3
 801185e:	461a      	mov	r2, r3
 8011860:	4b1a      	ldr	r3, [pc, #104]	@ (80118cc <FATFS_LinkDriverEx+0x94>)
 8011862:	2100      	movs	r1, #0
 8011864:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011866:	4b19      	ldr	r3, [pc, #100]	@ (80118cc <FATFS_LinkDriverEx+0x94>)
 8011868:	7a5b      	ldrb	r3, [r3, #9]
 801186a:	b2db      	uxtb	r3, r3
 801186c:	4a17      	ldr	r2, [pc, #92]	@ (80118cc <FATFS_LinkDriverEx+0x94>)
 801186e:	009b      	lsls	r3, r3, #2
 8011870:	4413      	add	r3, r2
 8011872:	68fa      	ldr	r2, [r7, #12]
 8011874:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8011876:	4b15      	ldr	r3, [pc, #84]	@ (80118cc <FATFS_LinkDriverEx+0x94>)
 8011878:	7a5b      	ldrb	r3, [r3, #9]
 801187a:	b2db      	uxtb	r3, r3
 801187c:	461a      	mov	r2, r3
 801187e:	4b13      	ldr	r3, [pc, #76]	@ (80118cc <FATFS_LinkDriverEx+0x94>)
 8011880:	4413      	add	r3, r2
 8011882:	79fa      	ldrb	r2, [r7, #7]
 8011884:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8011886:	4b11      	ldr	r3, [pc, #68]	@ (80118cc <FATFS_LinkDriverEx+0x94>)
 8011888:	7a5b      	ldrb	r3, [r3, #9]
 801188a:	b2db      	uxtb	r3, r3
 801188c:	1c5a      	adds	r2, r3, #1
 801188e:	b2d1      	uxtb	r1, r2
 8011890:	4a0e      	ldr	r2, [pc, #56]	@ (80118cc <FATFS_LinkDriverEx+0x94>)
 8011892:	7251      	strb	r1, [r2, #9]
 8011894:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8011896:	7dbb      	ldrb	r3, [r7, #22]
 8011898:	3330      	adds	r3, #48	@ 0x30
 801189a:	b2da      	uxtb	r2, r3
 801189c:	68bb      	ldr	r3, [r7, #8]
 801189e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80118a0:	68bb      	ldr	r3, [r7, #8]
 80118a2:	3301      	adds	r3, #1
 80118a4:	223a      	movs	r2, #58	@ 0x3a
 80118a6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80118a8:	68bb      	ldr	r3, [r7, #8]
 80118aa:	3302      	adds	r3, #2
 80118ac:	222f      	movs	r2, #47	@ 0x2f
 80118ae:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80118b0:	68bb      	ldr	r3, [r7, #8]
 80118b2:	3303      	adds	r3, #3
 80118b4:	2200      	movs	r2, #0
 80118b6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80118b8:	2300      	movs	r3, #0
 80118ba:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80118bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80118be:	4618      	mov	r0, r3
 80118c0:	371c      	adds	r7, #28
 80118c2:	46bd      	mov	sp, r7
 80118c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118c8:	4770      	bx	lr
 80118ca:	bf00      	nop
 80118cc:	2400096c 	.word	0x2400096c

080118d0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80118d0:	b580      	push	{r7, lr}
 80118d2:	b082      	sub	sp, #8
 80118d4:	af00      	add	r7, sp, #0
 80118d6:	6078      	str	r0, [r7, #4]
 80118d8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80118da:	2200      	movs	r2, #0
 80118dc:	6839      	ldr	r1, [r7, #0]
 80118de:	6878      	ldr	r0, [r7, #4]
 80118e0:	f7ff ffaa 	bl	8011838 <FATFS_LinkDriverEx>
 80118e4:	4603      	mov	r3, r0
}
 80118e6:	4618      	mov	r0, r3
 80118e8:	3708      	adds	r7, #8
 80118ea:	46bd      	mov	sp, r7
 80118ec:	bd80      	pop	{r7, pc}

080118ee <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 80118ee:	b580      	push	{r7, lr}
 80118f0:	b084      	sub	sp, #16
 80118f2:	af00      	add	r7, sp, #0
 80118f4:	4603      	mov	r3, r0
 80118f6:	6039      	str	r1, [r7, #0]
 80118f8:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 80118fa:	2200      	movs	r2, #0
 80118fc:	2101      	movs	r1, #1
 80118fe:	2001      	movs	r0, #1
 8011900:	f000 f9b9 	bl	8011c76 <osSemaphoreNew>
 8011904:	4602      	mov	r2, r0
 8011906:	683b      	ldr	r3, [r7, #0]
 8011908:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 801190a:	683b      	ldr	r3, [r7, #0]
 801190c:	681b      	ldr	r3, [r3, #0]
 801190e:	2b00      	cmp	r3, #0
 8011910:	bf14      	ite	ne
 8011912:	2301      	movne	r3, #1
 8011914:	2300      	moveq	r3, #0
 8011916:	b2db      	uxtb	r3, r3
 8011918:	60fb      	str	r3, [r7, #12]

    return ret;
 801191a:	68fb      	ldr	r3, [r7, #12]
}
 801191c:	4618      	mov	r0, r3
 801191e:	3710      	adds	r7, #16
 8011920:	46bd      	mov	sp, r7
 8011922:	bd80      	pop	{r7, pc}

08011924 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8011924:	b580      	push	{r7, lr}
 8011926:	b082      	sub	sp, #8
 8011928:	af00      	add	r7, sp, #0
 801192a:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 801192c:	6878      	ldr	r0, [r7, #4]
 801192e:	f000 fac1 	bl	8011eb4 <osSemaphoreDelete>
#endif
    return 1;
 8011932:	2301      	movs	r3, #1
}
 8011934:	4618      	mov	r0, r3
 8011936:	3708      	adds	r7, #8
 8011938:	46bd      	mov	sp, r7
 801193a:	bd80      	pop	{r7, pc}

0801193c <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 801193c:	b580      	push	{r7, lr}
 801193e:	b084      	sub	sp, #16
 8011940:	af00      	add	r7, sp, #0
 8011942:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8011944:	2300      	movs	r3, #0
 8011946:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 8011948:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801194c:	6878      	ldr	r0, [r7, #4]
 801194e:	f000 fa1b 	bl	8011d88 <osSemaphoreAcquire>
 8011952:	4603      	mov	r3, r0
 8011954:	2b00      	cmp	r3, #0
 8011956:	d101      	bne.n	801195c <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 8011958:	2301      	movs	r3, #1
 801195a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801195c:	68fb      	ldr	r3, [r7, #12]
}
 801195e:	4618      	mov	r0, r3
 8011960:	3710      	adds	r7, #16
 8011962:	46bd      	mov	sp, r7
 8011964:	bd80      	pop	{r7, pc}

08011966 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8011966:	b580      	push	{r7, lr}
 8011968:	b082      	sub	sp, #8
 801196a:	af00      	add	r7, sp, #0
 801196c:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 801196e:	6878      	ldr	r0, [r7, #4]
 8011970:	f000 fa5c 	bl	8011e2c <osSemaphoreRelease>
#endif
}
 8011974:	bf00      	nop
 8011976:	3708      	adds	r7, #8
 8011978:	46bd      	mov	sp, r7
 801197a:	bd80      	pop	{r7, pc}

0801197c <__NVIC_SetPriority>:
{
 801197c:	b480      	push	{r7}
 801197e:	b083      	sub	sp, #12
 8011980:	af00      	add	r7, sp, #0
 8011982:	4603      	mov	r3, r0
 8011984:	6039      	str	r1, [r7, #0]
 8011986:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8011988:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801198c:	2b00      	cmp	r3, #0
 801198e:	db0a      	blt.n	80119a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011990:	683b      	ldr	r3, [r7, #0]
 8011992:	b2da      	uxtb	r2, r3
 8011994:	490c      	ldr	r1, [pc, #48]	@ (80119c8 <__NVIC_SetPriority+0x4c>)
 8011996:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801199a:	0112      	lsls	r2, r2, #4
 801199c:	b2d2      	uxtb	r2, r2
 801199e:	440b      	add	r3, r1
 80119a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80119a4:	e00a      	b.n	80119bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80119a6:	683b      	ldr	r3, [r7, #0]
 80119a8:	b2da      	uxtb	r2, r3
 80119aa:	4908      	ldr	r1, [pc, #32]	@ (80119cc <__NVIC_SetPriority+0x50>)
 80119ac:	88fb      	ldrh	r3, [r7, #6]
 80119ae:	f003 030f 	and.w	r3, r3, #15
 80119b2:	3b04      	subs	r3, #4
 80119b4:	0112      	lsls	r2, r2, #4
 80119b6:	b2d2      	uxtb	r2, r2
 80119b8:	440b      	add	r3, r1
 80119ba:	761a      	strb	r2, [r3, #24]
}
 80119bc:	bf00      	nop
 80119be:	370c      	adds	r7, #12
 80119c0:	46bd      	mov	sp, r7
 80119c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119c6:	4770      	bx	lr
 80119c8:	e000e100 	.word	0xe000e100
 80119cc:	e000ed00 	.word	0xe000ed00

080119d0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80119d0:	b580      	push	{r7, lr}
 80119d2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80119d4:	4b05      	ldr	r3, [pc, #20]	@ (80119ec <SysTick_Handler+0x1c>)
 80119d6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80119d8:	f002 fdae 	bl	8014538 <xTaskGetSchedulerState>
 80119dc:	4603      	mov	r3, r0
 80119de:	2b01      	cmp	r3, #1
 80119e0:	d001      	beq.n	80119e6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80119e2:	f003 ff31 	bl	8015848 <xPortSysTickHandler>
  }
}
 80119e6:	bf00      	nop
 80119e8:	bd80      	pop	{r7, pc}
 80119ea:	bf00      	nop
 80119ec:	e000e010 	.word	0xe000e010

080119f0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80119f0:	b580      	push	{r7, lr}
 80119f2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80119f4:	2100      	movs	r1, #0
 80119f6:	f06f 0004 	mvn.w	r0, #4
 80119fa:	f7ff ffbf 	bl	801197c <__NVIC_SetPriority>
#endif
}
 80119fe:	bf00      	nop
 8011a00:	bd80      	pop	{r7, pc}
	...

08011a04 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8011a04:	b480      	push	{r7}
 8011a06:	b083      	sub	sp, #12
 8011a08:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011a0a:	f3ef 8305 	mrs	r3, IPSR
 8011a0e:	603b      	str	r3, [r7, #0]
  return(result);
 8011a10:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d003      	beq.n	8011a1e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8011a16:	f06f 0305 	mvn.w	r3, #5
 8011a1a:	607b      	str	r3, [r7, #4]
 8011a1c:	e00c      	b.n	8011a38 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8011a1e:	4b0a      	ldr	r3, [pc, #40]	@ (8011a48 <osKernelInitialize+0x44>)
 8011a20:	681b      	ldr	r3, [r3, #0]
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d105      	bne.n	8011a32 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8011a26:	4b08      	ldr	r3, [pc, #32]	@ (8011a48 <osKernelInitialize+0x44>)
 8011a28:	2201      	movs	r2, #1
 8011a2a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8011a2c:	2300      	movs	r3, #0
 8011a2e:	607b      	str	r3, [r7, #4]
 8011a30:	e002      	b.n	8011a38 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8011a32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011a36:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8011a38:	687b      	ldr	r3, [r7, #4]
}
 8011a3a:	4618      	mov	r0, r3
 8011a3c:	370c      	adds	r7, #12
 8011a3e:	46bd      	mov	sp, r7
 8011a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a44:	4770      	bx	lr
 8011a46:	bf00      	nop
 8011a48:	24000978 	.word	0x24000978

08011a4c <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 8011a4c:	b580      	push	{r7, lr}
 8011a4e:	b082      	sub	sp, #8
 8011a50:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 8011a52:	f002 fd71 	bl	8014538 <xTaskGetSchedulerState>
 8011a56:	4603      	mov	r3, r0
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d004      	beq.n	8011a66 <osKernelGetState+0x1a>
 8011a5c:	2b02      	cmp	r3, #2
 8011a5e:	d105      	bne.n	8011a6c <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 8011a60:	2302      	movs	r3, #2
 8011a62:	607b      	str	r3, [r7, #4]
      break;
 8011a64:	e00c      	b.n	8011a80 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 8011a66:	2303      	movs	r3, #3
 8011a68:	607b      	str	r3, [r7, #4]
      break;
 8011a6a:	e009      	b.n	8011a80 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 8011a6c:	4b07      	ldr	r3, [pc, #28]	@ (8011a8c <osKernelGetState+0x40>)
 8011a6e:	681b      	ldr	r3, [r3, #0]
 8011a70:	2b01      	cmp	r3, #1
 8011a72:	d102      	bne.n	8011a7a <osKernelGetState+0x2e>
        state = osKernelReady;
 8011a74:	2301      	movs	r3, #1
 8011a76:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 8011a78:	e001      	b.n	8011a7e <osKernelGetState+0x32>
        state = osKernelInactive;
 8011a7a:	2300      	movs	r3, #0
 8011a7c:	607b      	str	r3, [r7, #4]
      break;
 8011a7e:	bf00      	nop
  }

  return (state);
 8011a80:	687b      	ldr	r3, [r7, #4]
}
 8011a82:	4618      	mov	r0, r3
 8011a84:	3708      	adds	r7, #8
 8011a86:	46bd      	mov	sp, r7
 8011a88:	bd80      	pop	{r7, pc}
 8011a8a:	bf00      	nop
 8011a8c:	24000978 	.word	0x24000978

08011a90 <osKernelStart>:

osStatus_t osKernelStart (void) {
 8011a90:	b580      	push	{r7, lr}
 8011a92:	b082      	sub	sp, #8
 8011a94:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011a96:	f3ef 8305 	mrs	r3, IPSR
 8011a9a:	603b      	str	r3, [r7, #0]
  return(result);
 8011a9c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d003      	beq.n	8011aaa <osKernelStart+0x1a>
    stat = osErrorISR;
 8011aa2:	f06f 0305 	mvn.w	r3, #5
 8011aa6:	607b      	str	r3, [r7, #4]
 8011aa8:	e010      	b.n	8011acc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8011aaa:	4b0b      	ldr	r3, [pc, #44]	@ (8011ad8 <osKernelStart+0x48>)
 8011aac:	681b      	ldr	r3, [r3, #0]
 8011aae:	2b01      	cmp	r3, #1
 8011ab0:	d109      	bne.n	8011ac6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8011ab2:	f7ff ff9d 	bl	80119f0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8011ab6:	4b08      	ldr	r3, [pc, #32]	@ (8011ad8 <osKernelStart+0x48>)
 8011ab8:	2202      	movs	r2, #2
 8011aba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8011abc:	f002 f814 	bl	8013ae8 <vTaskStartScheduler>
      stat = osOK;
 8011ac0:	2300      	movs	r3, #0
 8011ac2:	607b      	str	r3, [r7, #4]
 8011ac4:	e002      	b.n	8011acc <osKernelStart+0x3c>
    } else {
      stat = osError;
 8011ac6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011aca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8011acc:	687b      	ldr	r3, [r7, #4]
}
 8011ace:	4618      	mov	r0, r3
 8011ad0:	3708      	adds	r7, #8
 8011ad2:	46bd      	mov	sp, r7
 8011ad4:	bd80      	pop	{r7, pc}
 8011ad6:	bf00      	nop
 8011ad8:	24000978 	.word	0x24000978

08011adc <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8011adc:	b580      	push	{r7, lr}
 8011ade:	b082      	sub	sp, #8
 8011ae0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011ae2:	f3ef 8305 	mrs	r3, IPSR
 8011ae6:	603b      	str	r3, [r7, #0]
  return(result);
 8011ae8:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d003      	beq.n	8011af6 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8011aee:	f002 f927 	bl	8013d40 <xTaskGetTickCountFromISR>
 8011af2:	6078      	str	r0, [r7, #4]
 8011af4:	e002      	b.n	8011afc <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8011af6:	f002 f913 	bl	8013d20 <xTaskGetTickCount>
 8011afa:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8011afc:	687b      	ldr	r3, [r7, #4]
}
 8011afe:	4618      	mov	r0, r3
 8011b00:	3708      	adds	r7, #8
 8011b02:	46bd      	mov	sp, r7
 8011b04:	bd80      	pop	{r7, pc}

08011b06 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8011b06:	b580      	push	{r7, lr}
 8011b08:	b08e      	sub	sp, #56	@ 0x38
 8011b0a:	af04      	add	r7, sp, #16
 8011b0c:	60f8      	str	r0, [r7, #12]
 8011b0e:	60b9      	str	r1, [r7, #8]
 8011b10:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8011b12:	2300      	movs	r3, #0
 8011b14:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011b16:	f3ef 8305 	mrs	r3, IPSR
 8011b1a:	617b      	str	r3, [r7, #20]
  return(result);
 8011b1c:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d17e      	bne.n	8011c20 <osThreadNew+0x11a>
 8011b22:	68fb      	ldr	r3, [r7, #12]
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d07b      	beq.n	8011c20 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8011b28:	2380      	movs	r3, #128	@ 0x80
 8011b2a:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8011b2c:	2318      	movs	r3, #24
 8011b2e:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8011b30:	2300      	movs	r3, #0
 8011b32:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8011b34:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011b38:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d045      	beq.n	8011bcc <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d002      	beq.n	8011b4e <osThreadNew+0x48>
        name = attr->name;
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	699b      	ldr	r3, [r3, #24]
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	d002      	beq.n	8011b5c <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	699b      	ldr	r3, [r3, #24]
 8011b5a:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8011b5c:	69fb      	ldr	r3, [r7, #28]
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d008      	beq.n	8011b74 <osThreadNew+0x6e>
 8011b62:	69fb      	ldr	r3, [r7, #28]
 8011b64:	2b38      	cmp	r3, #56	@ 0x38
 8011b66:	d805      	bhi.n	8011b74 <osThreadNew+0x6e>
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	685b      	ldr	r3, [r3, #4]
 8011b6c:	f003 0301 	and.w	r3, r3, #1
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d001      	beq.n	8011b78 <osThreadNew+0x72>
        return (NULL);
 8011b74:	2300      	movs	r3, #0
 8011b76:	e054      	b.n	8011c22 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	695b      	ldr	r3, [r3, #20]
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d003      	beq.n	8011b88 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	695b      	ldr	r3, [r3, #20]
 8011b84:	089b      	lsrs	r3, r3, #2
 8011b86:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	689b      	ldr	r3, [r3, #8]
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d00e      	beq.n	8011bae <osThreadNew+0xa8>
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	68db      	ldr	r3, [r3, #12]
 8011b94:	2ba7      	cmp	r3, #167	@ 0xa7
 8011b96:	d90a      	bls.n	8011bae <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d006      	beq.n	8011bae <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	695b      	ldr	r3, [r3, #20]
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d002      	beq.n	8011bae <osThreadNew+0xa8>
        mem = 1;
 8011ba8:	2301      	movs	r3, #1
 8011baa:	61bb      	str	r3, [r7, #24]
 8011bac:	e010      	b.n	8011bd0 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	689b      	ldr	r3, [r3, #8]
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d10c      	bne.n	8011bd0 <osThreadNew+0xca>
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	68db      	ldr	r3, [r3, #12]
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d108      	bne.n	8011bd0 <osThreadNew+0xca>
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	691b      	ldr	r3, [r3, #16]
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d104      	bne.n	8011bd0 <osThreadNew+0xca>
          mem = 0;
 8011bc6:	2300      	movs	r3, #0
 8011bc8:	61bb      	str	r3, [r7, #24]
 8011bca:	e001      	b.n	8011bd0 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8011bcc:	2300      	movs	r3, #0
 8011bce:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8011bd0:	69bb      	ldr	r3, [r7, #24]
 8011bd2:	2b01      	cmp	r3, #1
 8011bd4:	d110      	bne.n	8011bf8 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8011bda:	687a      	ldr	r2, [r7, #4]
 8011bdc:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8011bde:	9202      	str	r2, [sp, #8]
 8011be0:	9301      	str	r3, [sp, #4]
 8011be2:	69fb      	ldr	r3, [r7, #28]
 8011be4:	9300      	str	r3, [sp, #0]
 8011be6:	68bb      	ldr	r3, [r7, #8]
 8011be8:	6a3a      	ldr	r2, [r7, #32]
 8011bea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011bec:	68f8      	ldr	r0, [r7, #12]
 8011bee:	f001 fd87 	bl	8013700 <xTaskCreateStatic>
 8011bf2:	4603      	mov	r3, r0
 8011bf4:	613b      	str	r3, [r7, #16]
 8011bf6:	e013      	b.n	8011c20 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8011bf8:	69bb      	ldr	r3, [r7, #24]
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	d110      	bne.n	8011c20 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8011bfe:	6a3b      	ldr	r3, [r7, #32]
 8011c00:	b29a      	uxth	r2, r3
 8011c02:	f107 0310 	add.w	r3, r7, #16
 8011c06:	9301      	str	r3, [sp, #4]
 8011c08:	69fb      	ldr	r3, [r7, #28]
 8011c0a:	9300      	str	r3, [sp, #0]
 8011c0c:	68bb      	ldr	r3, [r7, #8]
 8011c0e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011c10:	68f8      	ldr	r0, [r7, #12]
 8011c12:	f001 fdd5 	bl	80137c0 <xTaskCreate>
 8011c16:	4603      	mov	r3, r0
 8011c18:	2b01      	cmp	r3, #1
 8011c1a:	d001      	beq.n	8011c20 <osThreadNew+0x11a>
            hTask = NULL;
 8011c1c:	2300      	movs	r3, #0
 8011c1e:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8011c20:	693b      	ldr	r3, [r7, #16]
}
 8011c22:	4618      	mov	r0, r3
 8011c24:	3728      	adds	r7, #40	@ 0x28
 8011c26:	46bd      	mov	sp, r7
 8011c28:	bd80      	pop	{r7, pc}

08011c2a <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 8011c2a:	b580      	push	{r7, lr}
 8011c2c:	b082      	sub	sp, #8
 8011c2e:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 8011c30:	f002 fc72 	bl	8014518 <xTaskGetCurrentTaskHandle>
 8011c34:	6078      	str	r0, [r7, #4]

  return (id);
 8011c36:	687b      	ldr	r3, [r7, #4]
}
 8011c38:	4618      	mov	r0, r3
 8011c3a:	3708      	adds	r7, #8
 8011c3c:	46bd      	mov	sp, r7
 8011c3e:	bd80      	pop	{r7, pc}

08011c40 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8011c40:	b580      	push	{r7, lr}
 8011c42:	b084      	sub	sp, #16
 8011c44:	af00      	add	r7, sp, #0
 8011c46:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011c48:	f3ef 8305 	mrs	r3, IPSR
 8011c4c:	60bb      	str	r3, [r7, #8]
  return(result);
 8011c4e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d003      	beq.n	8011c5c <osDelay+0x1c>
    stat = osErrorISR;
 8011c54:	f06f 0305 	mvn.w	r3, #5
 8011c58:	60fb      	str	r3, [r7, #12]
 8011c5a:	e007      	b.n	8011c6c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8011c5c:	2300      	movs	r3, #0
 8011c5e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d002      	beq.n	8011c6c <osDelay+0x2c>
      vTaskDelay(ticks);
 8011c66:	6878      	ldr	r0, [r7, #4]
 8011c68:	f001 ff08 	bl	8013a7c <vTaskDelay>
    }
  }

  return (stat);
 8011c6c:	68fb      	ldr	r3, [r7, #12]
}
 8011c6e:	4618      	mov	r0, r3
 8011c70:	3710      	adds	r7, #16
 8011c72:	46bd      	mov	sp, r7
 8011c74:	bd80      	pop	{r7, pc}

08011c76 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8011c76:	b580      	push	{r7, lr}
 8011c78:	b08a      	sub	sp, #40	@ 0x28
 8011c7a:	af02      	add	r7, sp, #8
 8011c7c:	60f8      	str	r0, [r7, #12]
 8011c7e:	60b9      	str	r1, [r7, #8]
 8011c80:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8011c82:	2300      	movs	r3, #0
 8011c84:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011c86:	f3ef 8305 	mrs	r3, IPSR
 8011c8a:	613b      	str	r3, [r7, #16]
  return(result);
 8011c8c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d175      	bne.n	8011d7e <osSemaphoreNew+0x108>
 8011c92:	68fb      	ldr	r3, [r7, #12]
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d072      	beq.n	8011d7e <osSemaphoreNew+0x108>
 8011c98:	68ba      	ldr	r2, [r7, #8]
 8011c9a:	68fb      	ldr	r3, [r7, #12]
 8011c9c:	429a      	cmp	r2, r3
 8011c9e:	d86e      	bhi.n	8011d7e <osSemaphoreNew+0x108>
    mem = -1;
 8011ca0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011ca4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d015      	beq.n	8011cd8 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	689b      	ldr	r3, [r3, #8]
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	d006      	beq.n	8011cc2 <osSemaphoreNew+0x4c>
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	68db      	ldr	r3, [r3, #12]
 8011cb8:	2b4f      	cmp	r3, #79	@ 0x4f
 8011cba:	d902      	bls.n	8011cc2 <osSemaphoreNew+0x4c>
        mem = 1;
 8011cbc:	2301      	movs	r3, #1
 8011cbe:	61bb      	str	r3, [r7, #24]
 8011cc0:	e00c      	b.n	8011cdc <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	689b      	ldr	r3, [r3, #8]
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	d108      	bne.n	8011cdc <osSemaphoreNew+0x66>
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	68db      	ldr	r3, [r3, #12]
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d104      	bne.n	8011cdc <osSemaphoreNew+0x66>
          mem = 0;
 8011cd2:	2300      	movs	r3, #0
 8011cd4:	61bb      	str	r3, [r7, #24]
 8011cd6:	e001      	b.n	8011cdc <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8011cd8:	2300      	movs	r3, #0
 8011cda:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8011cdc:	69bb      	ldr	r3, [r7, #24]
 8011cde:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011ce2:	d04c      	beq.n	8011d7e <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8011ce4:	68fb      	ldr	r3, [r7, #12]
 8011ce6:	2b01      	cmp	r3, #1
 8011ce8:	d128      	bne.n	8011d3c <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8011cea:	69bb      	ldr	r3, [r7, #24]
 8011cec:	2b01      	cmp	r3, #1
 8011cee:	d10a      	bne.n	8011d06 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	689b      	ldr	r3, [r3, #8]
 8011cf4:	2203      	movs	r2, #3
 8011cf6:	9200      	str	r2, [sp, #0]
 8011cf8:	2200      	movs	r2, #0
 8011cfa:	2100      	movs	r1, #0
 8011cfc:	2001      	movs	r0, #1
 8011cfe:	f000 fd3d 	bl	801277c <xQueueGenericCreateStatic>
 8011d02:	61f8      	str	r0, [r7, #28]
 8011d04:	e005      	b.n	8011d12 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8011d06:	2203      	movs	r2, #3
 8011d08:	2100      	movs	r1, #0
 8011d0a:	2001      	movs	r0, #1
 8011d0c:	f000 fdb3 	bl	8012876 <xQueueGenericCreate>
 8011d10:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8011d12:	69fb      	ldr	r3, [r7, #28]
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d022      	beq.n	8011d5e <osSemaphoreNew+0xe8>
 8011d18:	68bb      	ldr	r3, [r7, #8]
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	d01f      	beq.n	8011d5e <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8011d1e:	2300      	movs	r3, #0
 8011d20:	2200      	movs	r2, #0
 8011d22:	2100      	movs	r1, #0
 8011d24:	69f8      	ldr	r0, [r7, #28]
 8011d26:	f000 fe73 	bl	8012a10 <xQueueGenericSend>
 8011d2a:	4603      	mov	r3, r0
 8011d2c:	2b01      	cmp	r3, #1
 8011d2e:	d016      	beq.n	8011d5e <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8011d30:	69f8      	ldr	r0, [r7, #28]
 8011d32:	f001 fb11 	bl	8013358 <vQueueDelete>
            hSemaphore = NULL;
 8011d36:	2300      	movs	r3, #0
 8011d38:	61fb      	str	r3, [r7, #28]
 8011d3a:	e010      	b.n	8011d5e <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8011d3c:	69bb      	ldr	r3, [r7, #24]
 8011d3e:	2b01      	cmp	r3, #1
 8011d40:	d108      	bne.n	8011d54 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	689b      	ldr	r3, [r3, #8]
 8011d46:	461a      	mov	r2, r3
 8011d48:	68b9      	ldr	r1, [r7, #8]
 8011d4a:	68f8      	ldr	r0, [r7, #12]
 8011d4c:	f000 fdf1 	bl	8012932 <xQueueCreateCountingSemaphoreStatic>
 8011d50:	61f8      	str	r0, [r7, #28]
 8011d52:	e004      	b.n	8011d5e <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8011d54:	68b9      	ldr	r1, [r7, #8]
 8011d56:	68f8      	ldr	r0, [r7, #12]
 8011d58:	f000 fe24 	bl	80129a4 <xQueueCreateCountingSemaphore>
 8011d5c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8011d5e:	69fb      	ldr	r3, [r7, #28]
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d00c      	beq.n	8011d7e <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d003      	beq.n	8011d72 <osSemaphoreNew+0xfc>
          name = attr->name;
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	617b      	str	r3, [r7, #20]
 8011d70:	e001      	b.n	8011d76 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8011d72:	2300      	movs	r3, #0
 8011d74:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8011d76:	6979      	ldr	r1, [r7, #20]
 8011d78:	69f8      	ldr	r0, [r7, #28]
 8011d7a:	f001 fc39 	bl	80135f0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8011d7e:	69fb      	ldr	r3, [r7, #28]
}
 8011d80:	4618      	mov	r0, r3
 8011d82:	3720      	adds	r7, #32
 8011d84:	46bd      	mov	sp, r7
 8011d86:	bd80      	pop	{r7, pc}

08011d88 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8011d88:	b580      	push	{r7, lr}
 8011d8a:	b086      	sub	sp, #24
 8011d8c:	af00      	add	r7, sp, #0
 8011d8e:	6078      	str	r0, [r7, #4]
 8011d90:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8011d96:	2300      	movs	r3, #0
 8011d98:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8011d9a:	693b      	ldr	r3, [r7, #16]
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d103      	bne.n	8011da8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8011da0:	f06f 0303 	mvn.w	r3, #3
 8011da4:	617b      	str	r3, [r7, #20]
 8011da6:	e039      	b.n	8011e1c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011da8:	f3ef 8305 	mrs	r3, IPSR
 8011dac:	60fb      	str	r3, [r7, #12]
  return(result);
 8011dae:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d022      	beq.n	8011dfa <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8011db4:	683b      	ldr	r3, [r7, #0]
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d003      	beq.n	8011dc2 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8011dba:	f06f 0303 	mvn.w	r3, #3
 8011dbe:	617b      	str	r3, [r7, #20]
 8011dc0:	e02c      	b.n	8011e1c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8011dc2:	2300      	movs	r3, #0
 8011dc4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8011dc6:	f107 0308 	add.w	r3, r7, #8
 8011dca:	461a      	mov	r2, r3
 8011dcc:	2100      	movs	r1, #0
 8011dce:	6938      	ldr	r0, [r7, #16]
 8011dd0:	f001 fa40 	bl	8013254 <xQueueReceiveFromISR>
 8011dd4:	4603      	mov	r3, r0
 8011dd6:	2b01      	cmp	r3, #1
 8011dd8:	d003      	beq.n	8011de2 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8011dda:	f06f 0302 	mvn.w	r3, #2
 8011dde:	617b      	str	r3, [r7, #20]
 8011de0:	e01c      	b.n	8011e1c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8011de2:	68bb      	ldr	r3, [r7, #8]
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	d019      	beq.n	8011e1c <osSemaphoreAcquire+0x94>
 8011de8:	4b0f      	ldr	r3, [pc, #60]	@ (8011e28 <osSemaphoreAcquire+0xa0>)
 8011dea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011dee:	601a      	str	r2, [r3, #0]
 8011df0:	f3bf 8f4f 	dsb	sy
 8011df4:	f3bf 8f6f 	isb	sy
 8011df8:	e010      	b.n	8011e1c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8011dfa:	6839      	ldr	r1, [r7, #0]
 8011dfc:	6938      	ldr	r0, [r7, #16]
 8011dfe:	f001 f919 	bl	8013034 <xQueueSemaphoreTake>
 8011e02:	4603      	mov	r3, r0
 8011e04:	2b01      	cmp	r3, #1
 8011e06:	d009      	beq.n	8011e1c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8011e08:	683b      	ldr	r3, [r7, #0]
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d003      	beq.n	8011e16 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8011e0e:	f06f 0301 	mvn.w	r3, #1
 8011e12:	617b      	str	r3, [r7, #20]
 8011e14:	e002      	b.n	8011e1c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8011e16:	f06f 0302 	mvn.w	r3, #2
 8011e1a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8011e1c:	697b      	ldr	r3, [r7, #20]
}
 8011e1e:	4618      	mov	r0, r3
 8011e20:	3718      	adds	r7, #24
 8011e22:	46bd      	mov	sp, r7
 8011e24:	bd80      	pop	{r7, pc}
 8011e26:	bf00      	nop
 8011e28:	e000ed04 	.word	0xe000ed04

08011e2c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8011e2c:	b580      	push	{r7, lr}
 8011e2e:	b086      	sub	sp, #24
 8011e30:	af00      	add	r7, sp, #0
 8011e32:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8011e38:	2300      	movs	r3, #0
 8011e3a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8011e3c:	693b      	ldr	r3, [r7, #16]
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	d103      	bne.n	8011e4a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8011e42:	f06f 0303 	mvn.w	r3, #3
 8011e46:	617b      	str	r3, [r7, #20]
 8011e48:	e02c      	b.n	8011ea4 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011e4a:	f3ef 8305 	mrs	r3, IPSR
 8011e4e:	60fb      	str	r3, [r7, #12]
  return(result);
 8011e50:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d01a      	beq.n	8011e8c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8011e56:	2300      	movs	r3, #0
 8011e58:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8011e5a:	f107 0308 	add.w	r3, r7, #8
 8011e5e:	4619      	mov	r1, r3
 8011e60:	6938      	ldr	r0, [r7, #16]
 8011e62:	f000 ff75 	bl	8012d50 <xQueueGiveFromISR>
 8011e66:	4603      	mov	r3, r0
 8011e68:	2b01      	cmp	r3, #1
 8011e6a:	d003      	beq.n	8011e74 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8011e6c:	f06f 0302 	mvn.w	r3, #2
 8011e70:	617b      	str	r3, [r7, #20]
 8011e72:	e017      	b.n	8011ea4 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8011e74:	68bb      	ldr	r3, [r7, #8]
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d014      	beq.n	8011ea4 <osSemaphoreRelease+0x78>
 8011e7a:	4b0d      	ldr	r3, [pc, #52]	@ (8011eb0 <osSemaphoreRelease+0x84>)
 8011e7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011e80:	601a      	str	r2, [r3, #0]
 8011e82:	f3bf 8f4f 	dsb	sy
 8011e86:	f3bf 8f6f 	isb	sy
 8011e8a:	e00b      	b.n	8011ea4 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8011e8c:	2300      	movs	r3, #0
 8011e8e:	2200      	movs	r2, #0
 8011e90:	2100      	movs	r1, #0
 8011e92:	6938      	ldr	r0, [r7, #16]
 8011e94:	f000 fdbc 	bl	8012a10 <xQueueGenericSend>
 8011e98:	4603      	mov	r3, r0
 8011e9a:	2b01      	cmp	r3, #1
 8011e9c:	d002      	beq.n	8011ea4 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8011e9e:	f06f 0302 	mvn.w	r3, #2
 8011ea2:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8011ea4:	697b      	ldr	r3, [r7, #20]
}
 8011ea6:	4618      	mov	r0, r3
 8011ea8:	3718      	adds	r7, #24
 8011eaa:	46bd      	mov	sp, r7
 8011eac:	bd80      	pop	{r7, pc}
 8011eae:	bf00      	nop
 8011eb0:	e000ed04 	.word	0xe000ed04

08011eb4 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8011eb4:	b580      	push	{r7, lr}
 8011eb6:	b086      	sub	sp, #24
 8011eb8:	af00      	add	r7, sp, #0
 8011eba:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011ec0:	f3ef 8305 	mrs	r3, IPSR
 8011ec4:	60fb      	str	r3, [r7, #12]
  return(result);
 8011ec6:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d003      	beq.n	8011ed4 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8011ecc:	f06f 0305 	mvn.w	r3, #5
 8011ed0:	617b      	str	r3, [r7, #20]
 8011ed2:	e00e      	b.n	8011ef2 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8011ed4:	693b      	ldr	r3, [r7, #16]
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d103      	bne.n	8011ee2 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 8011eda:	f06f 0303 	mvn.w	r3, #3
 8011ede:	617b      	str	r3, [r7, #20]
 8011ee0:	e007      	b.n	8011ef2 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8011ee2:	6938      	ldr	r0, [r7, #16]
 8011ee4:	f001 fbae 	bl	8013644 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8011ee8:	2300      	movs	r3, #0
 8011eea:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8011eec:	6938      	ldr	r0, [r7, #16]
 8011eee:	f001 fa33 	bl	8013358 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8011ef2:	697b      	ldr	r3, [r7, #20]
}
 8011ef4:	4618      	mov	r0, r3
 8011ef6:	3718      	adds	r7, #24
 8011ef8:	46bd      	mov	sp, r7
 8011efa:	bd80      	pop	{r7, pc}

08011efc <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8011efc:	b580      	push	{r7, lr}
 8011efe:	b08a      	sub	sp, #40	@ 0x28
 8011f00:	af02      	add	r7, sp, #8
 8011f02:	60f8      	str	r0, [r7, #12]
 8011f04:	60b9      	str	r1, [r7, #8]
 8011f06:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8011f08:	2300      	movs	r3, #0
 8011f0a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011f0c:	f3ef 8305 	mrs	r3, IPSR
 8011f10:	613b      	str	r3, [r7, #16]
  return(result);
 8011f12:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	d15f      	bne.n	8011fd8 <osMessageQueueNew+0xdc>
 8011f18:	68fb      	ldr	r3, [r7, #12]
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d05c      	beq.n	8011fd8 <osMessageQueueNew+0xdc>
 8011f1e:	68bb      	ldr	r3, [r7, #8]
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d059      	beq.n	8011fd8 <osMessageQueueNew+0xdc>
    mem = -1;
 8011f24:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011f28:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d029      	beq.n	8011f84 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	689b      	ldr	r3, [r3, #8]
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d012      	beq.n	8011f5e <osMessageQueueNew+0x62>
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	68db      	ldr	r3, [r3, #12]
 8011f3c:	2b4f      	cmp	r3, #79	@ 0x4f
 8011f3e:	d90e      	bls.n	8011f5e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	d00a      	beq.n	8011f5e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	695a      	ldr	r2, [r3, #20]
 8011f4c:	68fb      	ldr	r3, [r7, #12]
 8011f4e:	68b9      	ldr	r1, [r7, #8]
 8011f50:	fb01 f303 	mul.w	r3, r1, r3
 8011f54:	429a      	cmp	r2, r3
 8011f56:	d302      	bcc.n	8011f5e <osMessageQueueNew+0x62>
        mem = 1;
 8011f58:	2301      	movs	r3, #1
 8011f5a:	61bb      	str	r3, [r7, #24]
 8011f5c:	e014      	b.n	8011f88 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	689b      	ldr	r3, [r3, #8]
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	d110      	bne.n	8011f88 <osMessageQueueNew+0x8c>
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	68db      	ldr	r3, [r3, #12]
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d10c      	bne.n	8011f88 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d108      	bne.n	8011f88 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	695b      	ldr	r3, [r3, #20]
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	d104      	bne.n	8011f88 <osMessageQueueNew+0x8c>
          mem = 0;
 8011f7e:	2300      	movs	r3, #0
 8011f80:	61bb      	str	r3, [r7, #24]
 8011f82:	e001      	b.n	8011f88 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8011f84:	2300      	movs	r3, #0
 8011f86:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8011f88:	69bb      	ldr	r3, [r7, #24]
 8011f8a:	2b01      	cmp	r3, #1
 8011f8c:	d10b      	bne.n	8011fa6 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	691a      	ldr	r2, [r3, #16]
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	689b      	ldr	r3, [r3, #8]
 8011f96:	2100      	movs	r1, #0
 8011f98:	9100      	str	r1, [sp, #0]
 8011f9a:	68b9      	ldr	r1, [r7, #8]
 8011f9c:	68f8      	ldr	r0, [r7, #12]
 8011f9e:	f000 fbed 	bl	801277c <xQueueGenericCreateStatic>
 8011fa2:	61f8      	str	r0, [r7, #28]
 8011fa4:	e008      	b.n	8011fb8 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8011fa6:	69bb      	ldr	r3, [r7, #24]
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d105      	bne.n	8011fb8 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8011fac:	2200      	movs	r2, #0
 8011fae:	68b9      	ldr	r1, [r7, #8]
 8011fb0:	68f8      	ldr	r0, [r7, #12]
 8011fb2:	f000 fc60 	bl	8012876 <xQueueGenericCreate>
 8011fb6:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8011fb8:	69fb      	ldr	r3, [r7, #28]
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d00c      	beq.n	8011fd8 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d003      	beq.n	8011fcc <osMessageQueueNew+0xd0>
        name = attr->name;
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	681b      	ldr	r3, [r3, #0]
 8011fc8:	617b      	str	r3, [r7, #20]
 8011fca:	e001      	b.n	8011fd0 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8011fcc:	2300      	movs	r3, #0
 8011fce:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8011fd0:	6979      	ldr	r1, [r7, #20]
 8011fd2:	69f8      	ldr	r0, [r7, #28]
 8011fd4:	f001 fb0c 	bl	80135f0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8011fd8:	69fb      	ldr	r3, [r7, #28]
}
 8011fda:	4618      	mov	r0, r3
 8011fdc:	3720      	adds	r7, #32
 8011fde:	46bd      	mov	sp, r7
 8011fe0:	bd80      	pop	{r7, pc}
	...

08011fe4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8011fe4:	b580      	push	{r7, lr}
 8011fe6:	b088      	sub	sp, #32
 8011fe8:	af00      	add	r7, sp, #0
 8011fea:	60f8      	str	r0, [r7, #12]
 8011fec:	60b9      	str	r1, [r7, #8]
 8011fee:	603b      	str	r3, [r7, #0]
 8011ff0:	4613      	mov	r3, r2
 8011ff2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8011ff4:	68fb      	ldr	r3, [r7, #12]
 8011ff6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8011ff8:	2300      	movs	r3, #0
 8011ffa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011ffc:	f3ef 8305 	mrs	r3, IPSR
 8012000:	617b      	str	r3, [r7, #20]
  return(result);
 8012002:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8012004:	2b00      	cmp	r3, #0
 8012006:	d028      	beq.n	801205a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012008:	69bb      	ldr	r3, [r7, #24]
 801200a:	2b00      	cmp	r3, #0
 801200c:	d005      	beq.n	801201a <osMessageQueuePut+0x36>
 801200e:	68bb      	ldr	r3, [r7, #8]
 8012010:	2b00      	cmp	r3, #0
 8012012:	d002      	beq.n	801201a <osMessageQueuePut+0x36>
 8012014:	683b      	ldr	r3, [r7, #0]
 8012016:	2b00      	cmp	r3, #0
 8012018:	d003      	beq.n	8012022 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 801201a:	f06f 0303 	mvn.w	r3, #3
 801201e:	61fb      	str	r3, [r7, #28]
 8012020:	e038      	b.n	8012094 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8012022:	2300      	movs	r3, #0
 8012024:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8012026:	f107 0210 	add.w	r2, r7, #16
 801202a:	2300      	movs	r3, #0
 801202c:	68b9      	ldr	r1, [r7, #8]
 801202e:	69b8      	ldr	r0, [r7, #24]
 8012030:	f000 fdf0 	bl	8012c14 <xQueueGenericSendFromISR>
 8012034:	4603      	mov	r3, r0
 8012036:	2b01      	cmp	r3, #1
 8012038:	d003      	beq.n	8012042 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 801203a:	f06f 0302 	mvn.w	r3, #2
 801203e:	61fb      	str	r3, [r7, #28]
 8012040:	e028      	b.n	8012094 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8012042:	693b      	ldr	r3, [r7, #16]
 8012044:	2b00      	cmp	r3, #0
 8012046:	d025      	beq.n	8012094 <osMessageQueuePut+0xb0>
 8012048:	4b15      	ldr	r3, [pc, #84]	@ (80120a0 <osMessageQueuePut+0xbc>)
 801204a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801204e:	601a      	str	r2, [r3, #0]
 8012050:	f3bf 8f4f 	dsb	sy
 8012054:	f3bf 8f6f 	isb	sy
 8012058:	e01c      	b.n	8012094 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801205a:	69bb      	ldr	r3, [r7, #24]
 801205c:	2b00      	cmp	r3, #0
 801205e:	d002      	beq.n	8012066 <osMessageQueuePut+0x82>
 8012060:	68bb      	ldr	r3, [r7, #8]
 8012062:	2b00      	cmp	r3, #0
 8012064:	d103      	bne.n	801206e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8012066:	f06f 0303 	mvn.w	r3, #3
 801206a:	61fb      	str	r3, [r7, #28]
 801206c:	e012      	b.n	8012094 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801206e:	2300      	movs	r3, #0
 8012070:	683a      	ldr	r2, [r7, #0]
 8012072:	68b9      	ldr	r1, [r7, #8]
 8012074:	69b8      	ldr	r0, [r7, #24]
 8012076:	f000 fccb 	bl	8012a10 <xQueueGenericSend>
 801207a:	4603      	mov	r3, r0
 801207c:	2b01      	cmp	r3, #1
 801207e:	d009      	beq.n	8012094 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8012080:	683b      	ldr	r3, [r7, #0]
 8012082:	2b00      	cmp	r3, #0
 8012084:	d003      	beq.n	801208e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8012086:	f06f 0301 	mvn.w	r3, #1
 801208a:	61fb      	str	r3, [r7, #28]
 801208c:	e002      	b.n	8012094 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 801208e:	f06f 0302 	mvn.w	r3, #2
 8012092:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8012094:	69fb      	ldr	r3, [r7, #28]
}
 8012096:	4618      	mov	r0, r3
 8012098:	3720      	adds	r7, #32
 801209a:	46bd      	mov	sp, r7
 801209c:	bd80      	pop	{r7, pc}
 801209e:	bf00      	nop
 80120a0:	e000ed04 	.word	0xe000ed04

080120a4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80120a4:	b580      	push	{r7, lr}
 80120a6:	b088      	sub	sp, #32
 80120a8:	af00      	add	r7, sp, #0
 80120aa:	60f8      	str	r0, [r7, #12]
 80120ac:	60b9      	str	r1, [r7, #8]
 80120ae:	607a      	str	r2, [r7, #4]
 80120b0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80120b2:	68fb      	ldr	r3, [r7, #12]
 80120b4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80120b6:	2300      	movs	r3, #0
 80120b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80120ba:	f3ef 8305 	mrs	r3, IPSR
 80120be:	617b      	str	r3, [r7, #20]
  return(result);
 80120c0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	d028      	beq.n	8012118 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80120c6:	69bb      	ldr	r3, [r7, #24]
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d005      	beq.n	80120d8 <osMessageQueueGet+0x34>
 80120cc:	68bb      	ldr	r3, [r7, #8]
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d002      	beq.n	80120d8 <osMessageQueueGet+0x34>
 80120d2:	683b      	ldr	r3, [r7, #0]
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	d003      	beq.n	80120e0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80120d8:	f06f 0303 	mvn.w	r3, #3
 80120dc:	61fb      	str	r3, [r7, #28]
 80120de:	e037      	b.n	8012150 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80120e0:	2300      	movs	r3, #0
 80120e2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80120e4:	f107 0310 	add.w	r3, r7, #16
 80120e8:	461a      	mov	r2, r3
 80120ea:	68b9      	ldr	r1, [r7, #8]
 80120ec:	69b8      	ldr	r0, [r7, #24]
 80120ee:	f001 f8b1 	bl	8013254 <xQueueReceiveFromISR>
 80120f2:	4603      	mov	r3, r0
 80120f4:	2b01      	cmp	r3, #1
 80120f6:	d003      	beq.n	8012100 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80120f8:	f06f 0302 	mvn.w	r3, #2
 80120fc:	61fb      	str	r3, [r7, #28]
 80120fe:	e027      	b.n	8012150 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8012100:	693b      	ldr	r3, [r7, #16]
 8012102:	2b00      	cmp	r3, #0
 8012104:	d024      	beq.n	8012150 <osMessageQueueGet+0xac>
 8012106:	4b15      	ldr	r3, [pc, #84]	@ (801215c <osMessageQueueGet+0xb8>)
 8012108:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801210c:	601a      	str	r2, [r3, #0]
 801210e:	f3bf 8f4f 	dsb	sy
 8012112:	f3bf 8f6f 	isb	sy
 8012116:	e01b      	b.n	8012150 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8012118:	69bb      	ldr	r3, [r7, #24]
 801211a:	2b00      	cmp	r3, #0
 801211c:	d002      	beq.n	8012124 <osMessageQueueGet+0x80>
 801211e:	68bb      	ldr	r3, [r7, #8]
 8012120:	2b00      	cmp	r3, #0
 8012122:	d103      	bne.n	801212c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8012124:	f06f 0303 	mvn.w	r3, #3
 8012128:	61fb      	str	r3, [r7, #28]
 801212a:	e011      	b.n	8012150 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801212c:	683a      	ldr	r2, [r7, #0]
 801212e:	68b9      	ldr	r1, [r7, #8]
 8012130:	69b8      	ldr	r0, [r7, #24]
 8012132:	f000 fe9d 	bl	8012e70 <xQueueReceive>
 8012136:	4603      	mov	r3, r0
 8012138:	2b01      	cmp	r3, #1
 801213a:	d009      	beq.n	8012150 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 801213c:	683b      	ldr	r3, [r7, #0]
 801213e:	2b00      	cmp	r3, #0
 8012140:	d003      	beq.n	801214a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8012142:	f06f 0301 	mvn.w	r3, #1
 8012146:	61fb      	str	r3, [r7, #28]
 8012148:	e002      	b.n	8012150 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 801214a:	f06f 0302 	mvn.w	r3, #2
 801214e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8012150:	69fb      	ldr	r3, [r7, #28]
}
 8012152:	4618      	mov	r0, r3
 8012154:	3720      	adds	r7, #32
 8012156:	46bd      	mov	sp, r7
 8012158:	bd80      	pop	{r7, pc}
 801215a:	bf00      	nop
 801215c:	e000ed04 	.word	0xe000ed04

08012160 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8012160:	b480      	push	{r7}
 8012162:	b085      	sub	sp, #20
 8012164:	af00      	add	r7, sp, #0
 8012166:	60f8      	str	r0, [r7, #12]
 8012168:	60b9      	str	r1, [r7, #8]
 801216a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 801216c:	68fb      	ldr	r3, [r7, #12]
 801216e:	4a07      	ldr	r2, [pc, #28]	@ (801218c <vApplicationGetIdleTaskMemory+0x2c>)
 8012170:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8012172:	68bb      	ldr	r3, [r7, #8]
 8012174:	4a06      	ldr	r2, [pc, #24]	@ (8012190 <vApplicationGetIdleTaskMemory+0x30>)
 8012176:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	2280      	movs	r2, #128	@ 0x80
 801217c:	601a      	str	r2, [r3, #0]
}
 801217e:	bf00      	nop
 8012180:	3714      	adds	r7, #20
 8012182:	46bd      	mov	sp, r7
 8012184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012188:	4770      	bx	lr
 801218a:	bf00      	nop
 801218c:	2400097c 	.word	0x2400097c
 8012190:	24000a24 	.word	0x24000a24

08012194 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8012194:	b480      	push	{r7}
 8012196:	b085      	sub	sp, #20
 8012198:	af00      	add	r7, sp, #0
 801219a:	60f8      	str	r0, [r7, #12]
 801219c:	60b9      	str	r1, [r7, #8]
 801219e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80121a0:	68fb      	ldr	r3, [r7, #12]
 80121a2:	4a07      	ldr	r2, [pc, #28]	@ (80121c0 <vApplicationGetTimerTaskMemory+0x2c>)
 80121a4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80121a6:	68bb      	ldr	r3, [r7, #8]
 80121a8:	4a06      	ldr	r2, [pc, #24]	@ (80121c4 <vApplicationGetTimerTaskMemory+0x30>)
 80121aa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80121b2:	601a      	str	r2, [r3, #0]
}
 80121b4:	bf00      	nop
 80121b6:	3714      	adds	r7, #20
 80121b8:	46bd      	mov	sp, r7
 80121ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121be:	4770      	bx	lr
 80121c0:	24000c24 	.word	0x24000c24
 80121c4:	24000ccc 	.word	0x24000ccc

080121c8 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80121c8:	b580      	push	{r7, lr}
 80121ca:	b082      	sub	sp, #8
 80121cc:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80121ce:	2020      	movs	r0, #32
 80121d0:	f003 fbcc 	bl	801596c <pvPortMalloc>
 80121d4:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	2b00      	cmp	r3, #0
 80121da:	d00a      	beq.n	80121f2 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	2200      	movs	r2, #0
 80121e0:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	3304      	adds	r3, #4
 80121e6:	4618      	mov	r0, r3
 80121e8:	f000 f9aa 	bl	8012540 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	2200      	movs	r2, #0
 80121f0:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80121f2:	687b      	ldr	r3, [r7, #4]
	}
 80121f4:	4618      	mov	r0, r3
 80121f6:	3708      	adds	r7, #8
 80121f8:	46bd      	mov	sp, r7
 80121fa:	bd80      	pop	{r7, pc}

080121fc <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80121fc:	b580      	push	{r7, lr}
 80121fe:	b090      	sub	sp, #64	@ 0x40
 8012200:	af00      	add	r7, sp, #0
 8012202:	60f8      	str	r0, [r7, #12]
 8012204:	60b9      	str	r1, [r7, #8]
 8012206:	607a      	str	r2, [r7, #4]
 8012208:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 801220a:	68fb      	ldr	r3, [r7, #12]
 801220c:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 801220e:	2300      	movs	r3, #0
 8012210:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8012212:	2300      	movs	r3, #0
 8012214:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8012216:	68fb      	ldr	r3, [r7, #12]
 8012218:	2b00      	cmp	r3, #0
 801221a:	d10b      	bne.n	8012234 <xEventGroupWaitBits+0x38>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801221c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012220:	f383 8811 	msr	BASEPRI, r3
 8012224:	f3bf 8f6f 	isb	sy
 8012228:	f3bf 8f4f 	dsb	sy
 801222c:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801222e:	bf00      	nop
 8012230:	bf00      	nop
 8012232:	e7fd      	b.n	8012230 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8012234:	68bb      	ldr	r3, [r7, #8]
 8012236:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801223a:	d30b      	bcc.n	8012254 <xEventGroupWaitBits+0x58>
	__asm volatile
 801223c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012240:	f383 8811 	msr	BASEPRI, r3
 8012244:	f3bf 8f6f 	isb	sy
 8012248:	f3bf 8f4f 	dsb	sy
 801224c:	61fb      	str	r3, [r7, #28]
}
 801224e:	bf00      	nop
 8012250:	bf00      	nop
 8012252:	e7fd      	b.n	8012250 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8012254:	68bb      	ldr	r3, [r7, #8]
 8012256:	2b00      	cmp	r3, #0
 8012258:	d10b      	bne.n	8012272 <xEventGroupWaitBits+0x76>
	__asm volatile
 801225a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801225e:	f383 8811 	msr	BASEPRI, r3
 8012262:	f3bf 8f6f 	isb	sy
 8012266:	f3bf 8f4f 	dsb	sy
 801226a:	61bb      	str	r3, [r7, #24]
}
 801226c:	bf00      	nop
 801226e:	bf00      	nop
 8012270:	e7fd      	b.n	801226e <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012272:	f002 f961 	bl	8014538 <xTaskGetSchedulerState>
 8012276:	4603      	mov	r3, r0
 8012278:	2b00      	cmp	r3, #0
 801227a:	d102      	bne.n	8012282 <xEventGroupWaitBits+0x86>
 801227c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801227e:	2b00      	cmp	r3, #0
 8012280:	d101      	bne.n	8012286 <xEventGroupWaitBits+0x8a>
 8012282:	2301      	movs	r3, #1
 8012284:	e000      	b.n	8012288 <xEventGroupWaitBits+0x8c>
 8012286:	2300      	movs	r3, #0
 8012288:	2b00      	cmp	r3, #0
 801228a:	d10b      	bne.n	80122a4 <xEventGroupWaitBits+0xa8>
	__asm volatile
 801228c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012290:	f383 8811 	msr	BASEPRI, r3
 8012294:	f3bf 8f6f 	isb	sy
 8012298:	f3bf 8f4f 	dsb	sy
 801229c:	617b      	str	r3, [r7, #20]
}
 801229e:	bf00      	nop
 80122a0:	bf00      	nop
 80122a2:	e7fd      	b.n	80122a0 <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 80122a4:	f001 fc90 	bl	8013bc8 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80122a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80122aa:	681b      	ldr	r3, [r3, #0]
 80122ac:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80122ae:	683a      	ldr	r2, [r7, #0]
 80122b0:	68b9      	ldr	r1, [r7, #8]
 80122b2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80122b4:	f000 f90d 	bl	80124d2 <prvTestWaitCondition>
 80122b8:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 80122ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d00e      	beq.n	80122de <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80122c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80122c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80122c4:	2300      	movs	r3, #0
 80122c6:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d028      	beq.n	8012320 <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80122ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80122d0:	681a      	ldr	r2, [r3, #0]
 80122d2:	68bb      	ldr	r3, [r7, #8]
 80122d4:	43db      	mvns	r3, r3
 80122d6:	401a      	ands	r2, r3
 80122d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80122da:	601a      	str	r2, [r3, #0]
 80122dc:	e020      	b.n	8012320 <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80122de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d104      	bne.n	80122ee <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80122e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80122e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 80122e8:	2301      	movs	r3, #1
 80122ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80122ec:	e018      	b.n	8012320 <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	d003      	beq.n	80122fc <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80122f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80122f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80122fa:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80122fc:	683b      	ldr	r3, [r7, #0]
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d003      	beq.n	801230a <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8012302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012304:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8012308:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 801230a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801230c:	1d18      	adds	r0, r3, #4
 801230e:	68ba      	ldr	r2, [r7, #8]
 8012310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012312:	4313      	orrs	r3, r2
 8012314:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8012316:	4619      	mov	r1, r3
 8012318:	f001 fe6a 	bl	8013ff0 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 801231c:	2300      	movs	r3, #0
 801231e:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8012320:	f001 fc60 	bl	8013be4 <xTaskResumeAll>
 8012324:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8012326:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012328:	2b00      	cmp	r3, #0
 801232a:	d031      	beq.n	8012390 <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 801232c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801232e:	2b00      	cmp	r3, #0
 8012330:	d107      	bne.n	8012342 <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 8012332:	4b1a      	ldr	r3, [pc, #104]	@ (801239c <xEventGroupWaitBits+0x1a0>)
 8012334:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012338:	601a      	str	r2, [r3, #0]
 801233a:	f3bf 8f4f 	dsb	sy
 801233e:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8012342:	f002 fa73 	bl	801482c <uxTaskResetEventItemValue>
 8012346:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8012348:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801234a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801234e:	2b00      	cmp	r3, #0
 8012350:	d11a      	bne.n	8012388 <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 8012352:	f003 f9e9 	bl	8015728 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8012356:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012358:	681b      	ldr	r3, [r3, #0]
 801235a:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 801235c:	683a      	ldr	r2, [r7, #0]
 801235e:	68b9      	ldr	r1, [r7, #8]
 8012360:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8012362:	f000 f8b6 	bl	80124d2 <prvTestWaitCondition>
 8012366:	4603      	mov	r3, r0
 8012368:	2b00      	cmp	r3, #0
 801236a:	d009      	beq.n	8012380 <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	2b00      	cmp	r3, #0
 8012370:	d006      	beq.n	8012380 <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8012372:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012374:	681a      	ldr	r2, [r3, #0]
 8012376:	68bb      	ldr	r3, [r7, #8]
 8012378:	43db      	mvns	r3, r3
 801237a:	401a      	ands	r2, r3
 801237c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801237e:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8012380:	2301      	movs	r3, #1
 8012382:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 8012384:	f003 fa02 	bl	801578c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8012388:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801238a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 801238e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8012390:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8012392:	4618      	mov	r0, r3
 8012394:	3740      	adds	r7, #64	@ 0x40
 8012396:	46bd      	mov	sp, r7
 8012398:	bd80      	pop	{r7, pc}
 801239a:	bf00      	nop
 801239c:	e000ed04 	.word	0xe000ed04

080123a0 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80123a0:	b580      	push	{r7, lr}
 80123a2:	b08e      	sub	sp, #56	@ 0x38
 80123a4:	af00      	add	r7, sp, #0
 80123a6:	6078      	str	r0, [r7, #4]
 80123a8:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80123aa:	2300      	movs	r3, #0
 80123ac:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 80123b2:	2300      	movs	r3, #0
 80123b4:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	d10b      	bne.n	80123d4 <xEventGroupSetBits+0x34>
	__asm volatile
 80123bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80123c0:	f383 8811 	msr	BASEPRI, r3
 80123c4:	f3bf 8f6f 	isb	sy
 80123c8:	f3bf 8f4f 	dsb	sy
 80123cc:	613b      	str	r3, [r7, #16]
}
 80123ce:	bf00      	nop
 80123d0:	bf00      	nop
 80123d2:	e7fd      	b.n	80123d0 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80123d4:	683b      	ldr	r3, [r7, #0]
 80123d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80123da:	d30b      	bcc.n	80123f4 <xEventGroupSetBits+0x54>
	__asm volatile
 80123dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80123e0:	f383 8811 	msr	BASEPRI, r3
 80123e4:	f3bf 8f6f 	isb	sy
 80123e8:	f3bf 8f4f 	dsb	sy
 80123ec:	60fb      	str	r3, [r7, #12]
}
 80123ee:	bf00      	nop
 80123f0:	bf00      	nop
 80123f2:	e7fd      	b.n	80123f0 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80123f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80123f6:	3304      	adds	r3, #4
 80123f8:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80123fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123fc:	3308      	adds	r3, #8
 80123fe:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8012400:	f001 fbe2 	bl	8013bc8 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8012404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012406:	68db      	ldr	r3, [r3, #12]
 8012408:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 801240a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801240c:	681a      	ldr	r2, [r3, #0]
 801240e:	683b      	ldr	r3, [r7, #0]
 8012410:	431a      	orrs	r2, r3
 8012412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012414:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8012416:	e03c      	b.n	8012492 <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 8012418:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801241a:	685b      	ldr	r3, [r3, #4]
 801241c:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 801241e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012420:	681b      	ldr	r3, [r3, #0]
 8012422:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8012424:	2300      	movs	r3, #0
 8012426:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8012428:	69bb      	ldr	r3, [r7, #24]
 801242a:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 801242e:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8012430:	69bb      	ldr	r3, [r7, #24]
 8012432:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8012436:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8012438:	697b      	ldr	r3, [r7, #20]
 801243a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 801243e:	2b00      	cmp	r3, #0
 8012440:	d108      	bne.n	8012454 <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8012442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012444:	681a      	ldr	r2, [r3, #0]
 8012446:	69bb      	ldr	r3, [r7, #24]
 8012448:	4013      	ands	r3, r2
 801244a:	2b00      	cmp	r3, #0
 801244c:	d00b      	beq.n	8012466 <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 801244e:	2301      	movs	r3, #1
 8012450:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012452:	e008      	b.n	8012466 <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8012454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012456:	681a      	ldr	r2, [r3, #0]
 8012458:	69bb      	ldr	r3, [r7, #24]
 801245a:	4013      	ands	r3, r2
 801245c:	69ba      	ldr	r2, [r7, #24]
 801245e:	429a      	cmp	r2, r3
 8012460:	d101      	bne.n	8012466 <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8012462:	2301      	movs	r3, #1
 8012464:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8012466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012468:	2b00      	cmp	r3, #0
 801246a:	d010      	beq.n	801248e <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 801246c:	697b      	ldr	r3, [r7, #20]
 801246e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8012472:	2b00      	cmp	r3, #0
 8012474:	d003      	beq.n	801247e <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8012476:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012478:	69bb      	ldr	r3, [r7, #24]
 801247a:	4313      	orrs	r3, r2
 801247c:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 801247e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012480:	681b      	ldr	r3, [r3, #0]
 8012482:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8012486:	4619      	mov	r1, r3
 8012488:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801248a:	f001 fe7f 	bl	801418c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 801248e:	69fb      	ldr	r3, [r7, #28]
 8012490:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 8012492:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012494:	6a3b      	ldr	r3, [r7, #32]
 8012496:	429a      	cmp	r2, r3
 8012498:	d1be      	bne.n	8012418 <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 801249a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801249c:	681a      	ldr	r2, [r3, #0]
 801249e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80124a0:	43db      	mvns	r3, r3
 80124a2:	401a      	ands	r2, r3
 80124a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80124a6:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80124a8:	f001 fb9c 	bl	8013be4 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80124ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80124ae:	681b      	ldr	r3, [r3, #0]
}
 80124b0:	4618      	mov	r0, r3
 80124b2:	3738      	adds	r7, #56	@ 0x38
 80124b4:	46bd      	mov	sp, r7
 80124b6:	bd80      	pop	{r7, pc}

080124b8 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80124b8:	b580      	push	{r7, lr}
 80124ba:	b082      	sub	sp, #8
 80124bc:	af00      	add	r7, sp, #0
 80124be:	6078      	str	r0, [r7, #4]
 80124c0:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80124c2:	6839      	ldr	r1, [r7, #0]
 80124c4:	6878      	ldr	r0, [r7, #4]
 80124c6:	f7ff ff6b 	bl	80123a0 <xEventGroupSetBits>
}
 80124ca:	bf00      	nop
 80124cc:	3708      	adds	r7, #8
 80124ce:	46bd      	mov	sp, r7
 80124d0:	bd80      	pop	{r7, pc}

080124d2 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80124d2:	b480      	push	{r7}
 80124d4:	b087      	sub	sp, #28
 80124d6:	af00      	add	r7, sp, #0
 80124d8:	60f8      	str	r0, [r7, #12]
 80124da:	60b9      	str	r1, [r7, #8]
 80124dc:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80124de:	2300      	movs	r3, #0
 80124e0:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	d107      	bne.n	80124f8 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80124e8:	68fa      	ldr	r2, [r7, #12]
 80124ea:	68bb      	ldr	r3, [r7, #8]
 80124ec:	4013      	ands	r3, r2
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d00a      	beq.n	8012508 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80124f2:	2301      	movs	r3, #1
 80124f4:	617b      	str	r3, [r7, #20]
 80124f6:	e007      	b.n	8012508 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80124f8:	68fa      	ldr	r2, [r7, #12]
 80124fa:	68bb      	ldr	r3, [r7, #8]
 80124fc:	4013      	ands	r3, r2
 80124fe:	68ba      	ldr	r2, [r7, #8]
 8012500:	429a      	cmp	r2, r3
 8012502:	d101      	bne.n	8012508 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8012504:	2301      	movs	r3, #1
 8012506:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8012508:	697b      	ldr	r3, [r7, #20]
}
 801250a:	4618      	mov	r0, r3
 801250c:	371c      	adds	r7, #28
 801250e:	46bd      	mov	sp, r7
 8012510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012514:	4770      	bx	lr
	...

08012518 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8012518:	b580      	push	{r7, lr}
 801251a:	b086      	sub	sp, #24
 801251c:	af00      	add	r7, sp, #0
 801251e:	60f8      	str	r0, [r7, #12]
 8012520:	60b9      	str	r1, [r7, #8]
 8012522:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	68ba      	ldr	r2, [r7, #8]
 8012528:	68f9      	ldr	r1, [r7, #12]
 801252a:	4804      	ldr	r0, [pc, #16]	@ (801253c <xEventGroupSetBitsFromISR+0x24>)
 801252c:	f002 ffaa 	bl	8015484 <xTimerPendFunctionCallFromISR>
 8012530:	6178      	str	r0, [r7, #20]

		return xReturn;
 8012532:	697b      	ldr	r3, [r7, #20]
	}
 8012534:	4618      	mov	r0, r3
 8012536:	3718      	adds	r7, #24
 8012538:	46bd      	mov	sp, r7
 801253a:	bd80      	pop	{r7, pc}
 801253c:	080124b9 	.word	0x080124b9

08012540 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012540:	b480      	push	{r7}
 8012542:	b083      	sub	sp, #12
 8012544:	af00      	add	r7, sp, #0
 8012546:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	f103 0208 	add.w	r2, r3, #8
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012558:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	f103 0208 	add.w	r2, r3, #8
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	f103 0208 	add.w	r2, r3, #8
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	2200      	movs	r2, #0
 8012572:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012574:	bf00      	nop
 8012576:	370c      	adds	r7, #12
 8012578:	46bd      	mov	sp, r7
 801257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801257e:	4770      	bx	lr

08012580 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012580:	b480      	push	{r7}
 8012582:	b083      	sub	sp, #12
 8012584:	af00      	add	r7, sp, #0
 8012586:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	2200      	movs	r2, #0
 801258c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801258e:	bf00      	nop
 8012590:	370c      	adds	r7, #12
 8012592:	46bd      	mov	sp, r7
 8012594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012598:	4770      	bx	lr

0801259a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801259a:	b480      	push	{r7}
 801259c:	b085      	sub	sp, #20
 801259e:	af00      	add	r7, sp, #0
 80125a0:	6078      	str	r0, [r7, #4]
 80125a2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	685b      	ldr	r3, [r3, #4]
 80125a8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80125aa:	683b      	ldr	r3, [r7, #0]
 80125ac:	68fa      	ldr	r2, [r7, #12]
 80125ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80125b0:	68fb      	ldr	r3, [r7, #12]
 80125b2:	689a      	ldr	r2, [r3, #8]
 80125b4:	683b      	ldr	r3, [r7, #0]
 80125b6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80125b8:	68fb      	ldr	r3, [r7, #12]
 80125ba:	689b      	ldr	r3, [r3, #8]
 80125bc:	683a      	ldr	r2, [r7, #0]
 80125be:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80125c0:	68fb      	ldr	r3, [r7, #12]
 80125c2:	683a      	ldr	r2, [r7, #0]
 80125c4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80125c6:	683b      	ldr	r3, [r7, #0]
 80125c8:	687a      	ldr	r2, [r7, #4]
 80125ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	681b      	ldr	r3, [r3, #0]
 80125d0:	1c5a      	adds	r2, r3, #1
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	601a      	str	r2, [r3, #0]
}
 80125d6:	bf00      	nop
 80125d8:	3714      	adds	r7, #20
 80125da:	46bd      	mov	sp, r7
 80125dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125e0:	4770      	bx	lr

080125e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80125e2:	b480      	push	{r7}
 80125e4:	b085      	sub	sp, #20
 80125e6:	af00      	add	r7, sp, #0
 80125e8:	6078      	str	r0, [r7, #4]
 80125ea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80125ec:	683b      	ldr	r3, [r7, #0]
 80125ee:	681b      	ldr	r3, [r3, #0]
 80125f0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80125f2:	68bb      	ldr	r3, [r7, #8]
 80125f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80125f8:	d103      	bne.n	8012602 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	691b      	ldr	r3, [r3, #16]
 80125fe:	60fb      	str	r3, [r7, #12]
 8012600:	e00c      	b.n	801261c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	3308      	adds	r3, #8
 8012606:	60fb      	str	r3, [r7, #12]
 8012608:	e002      	b.n	8012610 <vListInsert+0x2e>
 801260a:	68fb      	ldr	r3, [r7, #12]
 801260c:	685b      	ldr	r3, [r3, #4]
 801260e:	60fb      	str	r3, [r7, #12]
 8012610:	68fb      	ldr	r3, [r7, #12]
 8012612:	685b      	ldr	r3, [r3, #4]
 8012614:	681b      	ldr	r3, [r3, #0]
 8012616:	68ba      	ldr	r2, [r7, #8]
 8012618:	429a      	cmp	r2, r3
 801261a:	d2f6      	bcs.n	801260a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801261c:	68fb      	ldr	r3, [r7, #12]
 801261e:	685a      	ldr	r2, [r3, #4]
 8012620:	683b      	ldr	r3, [r7, #0]
 8012622:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012624:	683b      	ldr	r3, [r7, #0]
 8012626:	685b      	ldr	r3, [r3, #4]
 8012628:	683a      	ldr	r2, [r7, #0]
 801262a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801262c:	683b      	ldr	r3, [r7, #0]
 801262e:	68fa      	ldr	r2, [r7, #12]
 8012630:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8012632:	68fb      	ldr	r3, [r7, #12]
 8012634:	683a      	ldr	r2, [r7, #0]
 8012636:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8012638:	683b      	ldr	r3, [r7, #0]
 801263a:	687a      	ldr	r2, [r7, #4]
 801263c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	681b      	ldr	r3, [r3, #0]
 8012642:	1c5a      	adds	r2, r3, #1
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	601a      	str	r2, [r3, #0]
}
 8012648:	bf00      	nop
 801264a:	3714      	adds	r7, #20
 801264c:	46bd      	mov	sp, r7
 801264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012652:	4770      	bx	lr

08012654 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012654:	b480      	push	{r7}
 8012656:	b085      	sub	sp, #20
 8012658:	af00      	add	r7, sp, #0
 801265a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	691b      	ldr	r3, [r3, #16]
 8012660:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	685b      	ldr	r3, [r3, #4]
 8012666:	687a      	ldr	r2, [r7, #4]
 8012668:	6892      	ldr	r2, [r2, #8]
 801266a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	689b      	ldr	r3, [r3, #8]
 8012670:	687a      	ldr	r2, [r7, #4]
 8012672:	6852      	ldr	r2, [r2, #4]
 8012674:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012676:	68fb      	ldr	r3, [r7, #12]
 8012678:	685b      	ldr	r3, [r3, #4]
 801267a:	687a      	ldr	r2, [r7, #4]
 801267c:	429a      	cmp	r2, r3
 801267e:	d103      	bne.n	8012688 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	689a      	ldr	r2, [r3, #8]
 8012684:	68fb      	ldr	r3, [r7, #12]
 8012686:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	2200      	movs	r2, #0
 801268c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801268e:	68fb      	ldr	r3, [r7, #12]
 8012690:	681b      	ldr	r3, [r3, #0]
 8012692:	1e5a      	subs	r2, r3, #1
 8012694:	68fb      	ldr	r3, [r7, #12]
 8012696:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8012698:	68fb      	ldr	r3, [r7, #12]
 801269a:	681b      	ldr	r3, [r3, #0]
}
 801269c:	4618      	mov	r0, r3
 801269e:	3714      	adds	r7, #20
 80126a0:	46bd      	mov	sp, r7
 80126a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126a6:	4770      	bx	lr

080126a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80126a8:	b580      	push	{r7, lr}
 80126aa:	b084      	sub	sp, #16
 80126ac:	af00      	add	r7, sp, #0
 80126ae:	6078      	str	r0, [r7, #4]
 80126b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80126b6:	68fb      	ldr	r3, [r7, #12]
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d10b      	bne.n	80126d4 <xQueueGenericReset+0x2c>
	__asm volatile
 80126bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80126c0:	f383 8811 	msr	BASEPRI, r3
 80126c4:	f3bf 8f6f 	isb	sy
 80126c8:	f3bf 8f4f 	dsb	sy
 80126cc:	60bb      	str	r3, [r7, #8]
}
 80126ce:	bf00      	nop
 80126d0:	bf00      	nop
 80126d2:	e7fd      	b.n	80126d0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80126d4:	f003 f828 	bl	8015728 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80126d8:	68fb      	ldr	r3, [r7, #12]
 80126da:	681a      	ldr	r2, [r3, #0]
 80126dc:	68fb      	ldr	r3, [r7, #12]
 80126de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80126e0:	68f9      	ldr	r1, [r7, #12]
 80126e2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80126e4:	fb01 f303 	mul.w	r3, r1, r3
 80126e8:	441a      	add	r2, r3
 80126ea:	68fb      	ldr	r3, [r7, #12]
 80126ec:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80126ee:	68fb      	ldr	r3, [r7, #12]
 80126f0:	2200      	movs	r2, #0
 80126f2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80126f4:	68fb      	ldr	r3, [r7, #12]
 80126f6:	681a      	ldr	r2, [r3, #0]
 80126f8:	68fb      	ldr	r3, [r7, #12]
 80126fa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80126fc:	68fb      	ldr	r3, [r7, #12]
 80126fe:	681a      	ldr	r2, [r3, #0]
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012704:	3b01      	subs	r3, #1
 8012706:	68f9      	ldr	r1, [r7, #12]
 8012708:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 801270a:	fb01 f303 	mul.w	r3, r1, r3
 801270e:	441a      	add	r2, r3
 8012710:	68fb      	ldr	r3, [r7, #12]
 8012712:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8012714:	68fb      	ldr	r3, [r7, #12]
 8012716:	22ff      	movs	r2, #255	@ 0xff
 8012718:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801271c:	68fb      	ldr	r3, [r7, #12]
 801271e:	22ff      	movs	r2, #255	@ 0xff
 8012720:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8012724:	683b      	ldr	r3, [r7, #0]
 8012726:	2b00      	cmp	r3, #0
 8012728:	d114      	bne.n	8012754 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801272a:	68fb      	ldr	r3, [r7, #12]
 801272c:	691b      	ldr	r3, [r3, #16]
 801272e:	2b00      	cmp	r3, #0
 8012730:	d01a      	beq.n	8012768 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012732:	68fb      	ldr	r3, [r7, #12]
 8012734:	3310      	adds	r3, #16
 8012736:	4618      	mov	r0, r3
 8012738:	f001 fcc4 	bl	80140c4 <xTaskRemoveFromEventList>
 801273c:	4603      	mov	r3, r0
 801273e:	2b00      	cmp	r3, #0
 8012740:	d012      	beq.n	8012768 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8012742:	4b0d      	ldr	r3, [pc, #52]	@ (8012778 <xQueueGenericReset+0xd0>)
 8012744:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012748:	601a      	str	r2, [r3, #0]
 801274a:	f3bf 8f4f 	dsb	sy
 801274e:	f3bf 8f6f 	isb	sy
 8012752:	e009      	b.n	8012768 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8012754:	68fb      	ldr	r3, [r7, #12]
 8012756:	3310      	adds	r3, #16
 8012758:	4618      	mov	r0, r3
 801275a:	f7ff fef1 	bl	8012540 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801275e:	68fb      	ldr	r3, [r7, #12]
 8012760:	3324      	adds	r3, #36	@ 0x24
 8012762:	4618      	mov	r0, r3
 8012764:	f7ff feec 	bl	8012540 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8012768:	f003 f810 	bl	801578c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801276c:	2301      	movs	r3, #1
}
 801276e:	4618      	mov	r0, r3
 8012770:	3710      	adds	r7, #16
 8012772:	46bd      	mov	sp, r7
 8012774:	bd80      	pop	{r7, pc}
 8012776:	bf00      	nop
 8012778:	e000ed04 	.word	0xe000ed04

0801277c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801277c:	b580      	push	{r7, lr}
 801277e:	b08e      	sub	sp, #56	@ 0x38
 8012780:	af02      	add	r7, sp, #8
 8012782:	60f8      	str	r0, [r7, #12]
 8012784:	60b9      	str	r1, [r7, #8]
 8012786:	607a      	str	r2, [r7, #4]
 8012788:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801278a:	68fb      	ldr	r3, [r7, #12]
 801278c:	2b00      	cmp	r3, #0
 801278e:	d10b      	bne.n	80127a8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8012790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012794:	f383 8811 	msr	BASEPRI, r3
 8012798:	f3bf 8f6f 	isb	sy
 801279c:	f3bf 8f4f 	dsb	sy
 80127a0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80127a2:	bf00      	nop
 80127a4:	bf00      	nop
 80127a6:	e7fd      	b.n	80127a4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80127a8:	683b      	ldr	r3, [r7, #0]
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	d10b      	bne.n	80127c6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80127ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80127b2:	f383 8811 	msr	BASEPRI, r3
 80127b6:	f3bf 8f6f 	isb	sy
 80127ba:	f3bf 8f4f 	dsb	sy
 80127be:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80127c0:	bf00      	nop
 80127c2:	bf00      	nop
 80127c4:	e7fd      	b.n	80127c2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d002      	beq.n	80127d2 <xQueueGenericCreateStatic+0x56>
 80127cc:	68bb      	ldr	r3, [r7, #8]
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d001      	beq.n	80127d6 <xQueueGenericCreateStatic+0x5a>
 80127d2:	2301      	movs	r3, #1
 80127d4:	e000      	b.n	80127d8 <xQueueGenericCreateStatic+0x5c>
 80127d6:	2300      	movs	r3, #0
 80127d8:	2b00      	cmp	r3, #0
 80127da:	d10b      	bne.n	80127f4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80127dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80127e0:	f383 8811 	msr	BASEPRI, r3
 80127e4:	f3bf 8f6f 	isb	sy
 80127e8:	f3bf 8f4f 	dsb	sy
 80127ec:	623b      	str	r3, [r7, #32]
}
 80127ee:	bf00      	nop
 80127f0:	bf00      	nop
 80127f2:	e7fd      	b.n	80127f0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d102      	bne.n	8012800 <xQueueGenericCreateStatic+0x84>
 80127fa:	68bb      	ldr	r3, [r7, #8]
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d101      	bne.n	8012804 <xQueueGenericCreateStatic+0x88>
 8012800:	2301      	movs	r3, #1
 8012802:	e000      	b.n	8012806 <xQueueGenericCreateStatic+0x8a>
 8012804:	2300      	movs	r3, #0
 8012806:	2b00      	cmp	r3, #0
 8012808:	d10b      	bne.n	8012822 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 801280a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801280e:	f383 8811 	msr	BASEPRI, r3
 8012812:	f3bf 8f6f 	isb	sy
 8012816:	f3bf 8f4f 	dsb	sy
 801281a:	61fb      	str	r3, [r7, #28]
}
 801281c:	bf00      	nop
 801281e:	bf00      	nop
 8012820:	e7fd      	b.n	801281e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8012822:	2350      	movs	r3, #80	@ 0x50
 8012824:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8012826:	697b      	ldr	r3, [r7, #20]
 8012828:	2b50      	cmp	r3, #80	@ 0x50
 801282a:	d00b      	beq.n	8012844 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 801282c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012830:	f383 8811 	msr	BASEPRI, r3
 8012834:	f3bf 8f6f 	isb	sy
 8012838:	f3bf 8f4f 	dsb	sy
 801283c:	61bb      	str	r3, [r7, #24]
}
 801283e:	bf00      	nop
 8012840:	bf00      	nop
 8012842:	e7fd      	b.n	8012840 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8012844:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012846:	683b      	ldr	r3, [r7, #0]
 8012848:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 801284a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801284c:	2b00      	cmp	r3, #0
 801284e:	d00d      	beq.n	801286c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8012850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012852:	2201      	movs	r2, #1
 8012854:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012858:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 801285c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801285e:	9300      	str	r3, [sp, #0]
 8012860:	4613      	mov	r3, r2
 8012862:	687a      	ldr	r2, [r7, #4]
 8012864:	68b9      	ldr	r1, [r7, #8]
 8012866:	68f8      	ldr	r0, [r7, #12]
 8012868:	f000 f840 	bl	80128ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801286c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 801286e:	4618      	mov	r0, r3
 8012870:	3730      	adds	r7, #48	@ 0x30
 8012872:	46bd      	mov	sp, r7
 8012874:	bd80      	pop	{r7, pc}

08012876 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8012876:	b580      	push	{r7, lr}
 8012878:	b08a      	sub	sp, #40	@ 0x28
 801287a:	af02      	add	r7, sp, #8
 801287c:	60f8      	str	r0, [r7, #12]
 801287e:	60b9      	str	r1, [r7, #8]
 8012880:	4613      	mov	r3, r2
 8012882:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012884:	68fb      	ldr	r3, [r7, #12]
 8012886:	2b00      	cmp	r3, #0
 8012888:	d10b      	bne.n	80128a2 <xQueueGenericCreate+0x2c>
	__asm volatile
 801288a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801288e:	f383 8811 	msr	BASEPRI, r3
 8012892:	f3bf 8f6f 	isb	sy
 8012896:	f3bf 8f4f 	dsb	sy
 801289a:	613b      	str	r3, [r7, #16]
}
 801289c:	bf00      	nop
 801289e:	bf00      	nop
 80128a0:	e7fd      	b.n	801289e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80128a2:	68fb      	ldr	r3, [r7, #12]
 80128a4:	68ba      	ldr	r2, [r7, #8]
 80128a6:	fb02 f303 	mul.w	r3, r2, r3
 80128aa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80128ac:	69fb      	ldr	r3, [r7, #28]
 80128ae:	3350      	adds	r3, #80	@ 0x50
 80128b0:	4618      	mov	r0, r3
 80128b2:	f003 f85b 	bl	801596c <pvPortMalloc>
 80128b6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80128b8:	69bb      	ldr	r3, [r7, #24]
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d011      	beq.n	80128e2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80128be:	69bb      	ldr	r3, [r7, #24]
 80128c0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80128c2:	697b      	ldr	r3, [r7, #20]
 80128c4:	3350      	adds	r3, #80	@ 0x50
 80128c6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80128c8:	69bb      	ldr	r3, [r7, #24]
 80128ca:	2200      	movs	r2, #0
 80128cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80128d0:	79fa      	ldrb	r2, [r7, #7]
 80128d2:	69bb      	ldr	r3, [r7, #24]
 80128d4:	9300      	str	r3, [sp, #0]
 80128d6:	4613      	mov	r3, r2
 80128d8:	697a      	ldr	r2, [r7, #20]
 80128da:	68b9      	ldr	r1, [r7, #8]
 80128dc:	68f8      	ldr	r0, [r7, #12]
 80128de:	f000 f805 	bl	80128ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80128e2:	69bb      	ldr	r3, [r7, #24]
	}
 80128e4:	4618      	mov	r0, r3
 80128e6:	3720      	adds	r7, #32
 80128e8:	46bd      	mov	sp, r7
 80128ea:	bd80      	pop	{r7, pc}

080128ec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80128ec:	b580      	push	{r7, lr}
 80128ee:	b084      	sub	sp, #16
 80128f0:	af00      	add	r7, sp, #0
 80128f2:	60f8      	str	r0, [r7, #12]
 80128f4:	60b9      	str	r1, [r7, #8]
 80128f6:	607a      	str	r2, [r7, #4]
 80128f8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80128fa:	68bb      	ldr	r3, [r7, #8]
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	d103      	bne.n	8012908 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8012900:	69bb      	ldr	r3, [r7, #24]
 8012902:	69ba      	ldr	r2, [r7, #24]
 8012904:	601a      	str	r2, [r3, #0]
 8012906:	e002      	b.n	801290e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8012908:	69bb      	ldr	r3, [r7, #24]
 801290a:	687a      	ldr	r2, [r7, #4]
 801290c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801290e:	69bb      	ldr	r3, [r7, #24]
 8012910:	68fa      	ldr	r2, [r7, #12]
 8012912:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8012914:	69bb      	ldr	r3, [r7, #24]
 8012916:	68ba      	ldr	r2, [r7, #8]
 8012918:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801291a:	2101      	movs	r1, #1
 801291c:	69b8      	ldr	r0, [r7, #24]
 801291e:	f7ff fec3 	bl	80126a8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8012922:	69bb      	ldr	r3, [r7, #24]
 8012924:	78fa      	ldrb	r2, [r7, #3]
 8012926:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801292a:	bf00      	nop
 801292c:	3710      	adds	r7, #16
 801292e:	46bd      	mov	sp, r7
 8012930:	bd80      	pop	{r7, pc}

08012932 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8012932:	b580      	push	{r7, lr}
 8012934:	b08a      	sub	sp, #40	@ 0x28
 8012936:	af02      	add	r7, sp, #8
 8012938:	60f8      	str	r0, [r7, #12]
 801293a:	60b9      	str	r1, [r7, #8]
 801293c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801293e:	68fb      	ldr	r3, [r7, #12]
 8012940:	2b00      	cmp	r3, #0
 8012942:	d10b      	bne.n	801295c <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8012944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012948:	f383 8811 	msr	BASEPRI, r3
 801294c:	f3bf 8f6f 	isb	sy
 8012950:	f3bf 8f4f 	dsb	sy
 8012954:	61bb      	str	r3, [r7, #24]
}
 8012956:	bf00      	nop
 8012958:	bf00      	nop
 801295a:	e7fd      	b.n	8012958 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 801295c:	68ba      	ldr	r2, [r7, #8]
 801295e:	68fb      	ldr	r3, [r7, #12]
 8012960:	429a      	cmp	r2, r3
 8012962:	d90b      	bls.n	801297c <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8012964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012968:	f383 8811 	msr	BASEPRI, r3
 801296c:	f3bf 8f6f 	isb	sy
 8012970:	f3bf 8f4f 	dsb	sy
 8012974:	617b      	str	r3, [r7, #20]
}
 8012976:	bf00      	nop
 8012978:	bf00      	nop
 801297a:	e7fd      	b.n	8012978 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801297c:	2302      	movs	r3, #2
 801297e:	9300      	str	r3, [sp, #0]
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	2200      	movs	r2, #0
 8012984:	2100      	movs	r1, #0
 8012986:	68f8      	ldr	r0, [r7, #12]
 8012988:	f7ff fef8 	bl	801277c <xQueueGenericCreateStatic>
 801298c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 801298e:	69fb      	ldr	r3, [r7, #28]
 8012990:	2b00      	cmp	r3, #0
 8012992:	d002      	beq.n	801299a <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8012994:	69fb      	ldr	r3, [r7, #28]
 8012996:	68ba      	ldr	r2, [r7, #8]
 8012998:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 801299a:	69fb      	ldr	r3, [r7, #28]
	}
 801299c:	4618      	mov	r0, r3
 801299e:	3720      	adds	r7, #32
 80129a0:	46bd      	mov	sp, r7
 80129a2:	bd80      	pop	{r7, pc}

080129a4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80129a4:	b580      	push	{r7, lr}
 80129a6:	b086      	sub	sp, #24
 80129a8:	af00      	add	r7, sp, #0
 80129aa:	6078      	str	r0, [r7, #4]
 80129ac:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d10b      	bne.n	80129cc <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 80129b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80129b8:	f383 8811 	msr	BASEPRI, r3
 80129bc:	f3bf 8f6f 	isb	sy
 80129c0:	f3bf 8f4f 	dsb	sy
 80129c4:	613b      	str	r3, [r7, #16]
}
 80129c6:	bf00      	nop
 80129c8:	bf00      	nop
 80129ca:	e7fd      	b.n	80129c8 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80129cc:	683a      	ldr	r2, [r7, #0]
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	429a      	cmp	r2, r3
 80129d2:	d90b      	bls.n	80129ec <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 80129d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80129d8:	f383 8811 	msr	BASEPRI, r3
 80129dc:	f3bf 8f6f 	isb	sy
 80129e0:	f3bf 8f4f 	dsb	sy
 80129e4:	60fb      	str	r3, [r7, #12]
}
 80129e6:	bf00      	nop
 80129e8:	bf00      	nop
 80129ea:	e7fd      	b.n	80129e8 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80129ec:	2202      	movs	r2, #2
 80129ee:	2100      	movs	r1, #0
 80129f0:	6878      	ldr	r0, [r7, #4]
 80129f2:	f7ff ff40 	bl	8012876 <xQueueGenericCreate>
 80129f6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80129f8:	697b      	ldr	r3, [r7, #20]
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	d002      	beq.n	8012a04 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80129fe:	697b      	ldr	r3, [r7, #20]
 8012a00:	683a      	ldr	r2, [r7, #0]
 8012a02:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8012a04:	697b      	ldr	r3, [r7, #20]
	}
 8012a06:	4618      	mov	r0, r3
 8012a08:	3718      	adds	r7, #24
 8012a0a:	46bd      	mov	sp, r7
 8012a0c:	bd80      	pop	{r7, pc}
	...

08012a10 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8012a10:	b580      	push	{r7, lr}
 8012a12:	b08e      	sub	sp, #56	@ 0x38
 8012a14:	af00      	add	r7, sp, #0
 8012a16:	60f8      	str	r0, [r7, #12]
 8012a18:	60b9      	str	r1, [r7, #8]
 8012a1a:	607a      	str	r2, [r7, #4]
 8012a1c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8012a1e:	2300      	movs	r3, #0
 8012a20:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012a22:	68fb      	ldr	r3, [r7, #12]
 8012a24:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8012a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d10b      	bne.n	8012a44 <xQueueGenericSend+0x34>
	__asm volatile
 8012a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a30:	f383 8811 	msr	BASEPRI, r3
 8012a34:	f3bf 8f6f 	isb	sy
 8012a38:	f3bf 8f4f 	dsb	sy
 8012a3c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8012a3e:	bf00      	nop
 8012a40:	bf00      	nop
 8012a42:	e7fd      	b.n	8012a40 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012a44:	68bb      	ldr	r3, [r7, #8]
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d103      	bne.n	8012a52 <xQueueGenericSend+0x42>
 8012a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d101      	bne.n	8012a56 <xQueueGenericSend+0x46>
 8012a52:	2301      	movs	r3, #1
 8012a54:	e000      	b.n	8012a58 <xQueueGenericSend+0x48>
 8012a56:	2300      	movs	r3, #0
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d10b      	bne.n	8012a74 <xQueueGenericSend+0x64>
	__asm volatile
 8012a5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a60:	f383 8811 	msr	BASEPRI, r3
 8012a64:	f3bf 8f6f 	isb	sy
 8012a68:	f3bf 8f4f 	dsb	sy
 8012a6c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8012a6e:	bf00      	nop
 8012a70:	bf00      	nop
 8012a72:	e7fd      	b.n	8012a70 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012a74:	683b      	ldr	r3, [r7, #0]
 8012a76:	2b02      	cmp	r3, #2
 8012a78:	d103      	bne.n	8012a82 <xQueueGenericSend+0x72>
 8012a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012a7e:	2b01      	cmp	r3, #1
 8012a80:	d101      	bne.n	8012a86 <xQueueGenericSend+0x76>
 8012a82:	2301      	movs	r3, #1
 8012a84:	e000      	b.n	8012a88 <xQueueGenericSend+0x78>
 8012a86:	2300      	movs	r3, #0
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d10b      	bne.n	8012aa4 <xQueueGenericSend+0x94>
	__asm volatile
 8012a8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a90:	f383 8811 	msr	BASEPRI, r3
 8012a94:	f3bf 8f6f 	isb	sy
 8012a98:	f3bf 8f4f 	dsb	sy
 8012a9c:	623b      	str	r3, [r7, #32]
}
 8012a9e:	bf00      	nop
 8012aa0:	bf00      	nop
 8012aa2:	e7fd      	b.n	8012aa0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012aa4:	f001 fd48 	bl	8014538 <xTaskGetSchedulerState>
 8012aa8:	4603      	mov	r3, r0
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	d102      	bne.n	8012ab4 <xQueueGenericSend+0xa4>
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d101      	bne.n	8012ab8 <xQueueGenericSend+0xa8>
 8012ab4:	2301      	movs	r3, #1
 8012ab6:	e000      	b.n	8012aba <xQueueGenericSend+0xaa>
 8012ab8:	2300      	movs	r3, #0
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d10b      	bne.n	8012ad6 <xQueueGenericSend+0xc6>
	__asm volatile
 8012abe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012ac2:	f383 8811 	msr	BASEPRI, r3
 8012ac6:	f3bf 8f6f 	isb	sy
 8012aca:	f3bf 8f4f 	dsb	sy
 8012ace:	61fb      	str	r3, [r7, #28]
}
 8012ad0:	bf00      	nop
 8012ad2:	bf00      	nop
 8012ad4:	e7fd      	b.n	8012ad2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012ad6:	f002 fe27 	bl	8015728 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012adc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ae0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012ae2:	429a      	cmp	r2, r3
 8012ae4:	d302      	bcc.n	8012aec <xQueueGenericSend+0xdc>
 8012ae6:	683b      	ldr	r3, [r7, #0]
 8012ae8:	2b02      	cmp	r3, #2
 8012aea:	d129      	bne.n	8012b40 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012aec:	683a      	ldr	r2, [r7, #0]
 8012aee:	68b9      	ldr	r1, [r7, #8]
 8012af0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012af2:	f000 fc6d 	bl	80133d0 <prvCopyDataToQueue>
 8012af6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	d010      	beq.n	8012b22 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b02:	3324      	adds	r3, #36	@ 0x24
 8012b04:	4618      	mov	r0, r3
 8012b06:	f001 fadd 	bl	80140c4 <xTaskRemoveFromEventList>
 8012b0a:	4603      	mov	r3, r0
 8012b0c:	2b00      	cmp	r3, #0
 8012b0e:	d013      	beq.n	8012b38 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8012b10:	4b3f      	ldr	r3, [pc, #252]	@ (8012c10 <xQueueGenericSend+0x200>)
 8012b12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012b16:	601a      	str	r2, [r3, #0]
 8012b18:	f3bf 8f4f 	dsb	sy
 8012b1c:	f3bf 8f6f 	isb	sy
 8012b20:	e00a      	b.n	8012b38 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8012b22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	d007      	beq.n	8012b38 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8012b28:	4b39      	ldr	r3, [pc, #228]	@ (8012c10 <xQueueGenericSend+0x200>)
 8012b2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012b2e:	601a      	str	r2, [r3, #0]
 8012b30:	f3bf 8f4f 	dsb	sy
 8012b34:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8012b38:	f002 fe28 	bl	801578c <vPortExitCritical>
				return pdPASS;
 8012b3c:	2301      	movs	r3, #1
 8012b3e:	e063      	b.n	8012c08 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	d103      	bne.n	8012b4e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012b46:	f002 fe21 	bl	801578c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8012b4a:	2300      	movs	r3, #0
 8012b4c:	e05c      	b.n	8012c08 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012b4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012b50:	2b00      	cmp	r3, #0
 8012b52:	d106      	bne.n	8012b62 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012b54:	f107 0314 	add.w	r3, r7, #20
 8012b58:	4618      	mov	r0, r3
 8012b5a:	f001 fb7b 	bl	8014254 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012b5e:	2301      	movs	r3, #1
 8012b60:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012b62:	f002 fe13 	bl	801578c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012b66:	f001 f82f 	bl	8013bc8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012b6a:	f002 fddd 	bl	8015728 <vPortEnterCritical>
 8012b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b70:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8012b74:	b25b      	sxtb	r3, r3
 8012b76:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012b7a:	d103      	bne.n	8012b84 <xQueueGenericSend+0x174>
 8012b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b7e:	2200      	movs	r2, #0
 8012b80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b86:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012b8a:	b25b      	sxtb	r3, r3
 8012b8c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012b90:	d103      	bne.n	8012b9a <xQueueGenericSend+0x18a>
 8012b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b94:	2200      	movs	r2, #0
 8012b96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012b9a:	f002 fdf7 	bl	801578c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012b9e:	1d3a      	adds	r2, r7, #4
 8012ba0:	f107 0314 	add.w	r3, r7, #20
 8012ba4:	4611      	mov	r1, r2
 8012ba6:	4618      	mov	r0, r3
 8012ba8:	f001 fb6a 	bl	8014280 <xTaskCheckForTimeOut>
 8012bac:	4603      	mov	r3, r0
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	d124      	bne.n	8012bfc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8012bb2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012bb4:	f000 fd04 	bl	80135c0 <prvIsQueueFull>
 8012bb8:	4603      	mov	r3, r0
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d018      	beq.n	8012bf0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8012bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012bc0:	3310      	adds	r3, #16
 8012bc2:	687a      	ldr	r2, [r7, #4]
 8012bc4:	4611      	mov	r1, r2
 8012bc6:	4618      	mov	r0, r3
 8012bc8:	f001 f9ec 	bl	8013fa4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8012bcc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012bce:	f000 fc8f 	bl	80134f0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8012bd2:	f001 f807 	bl	8013be4 <xTaskResumeAll>
 8012bd6:	4603      	mov	r3, r0
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	f47f af7c 	bne.w	8012ad6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8012bde:	4b0c      	ldr	r3, [pc, #48]	@ (8012c10 <xQueueGenericSend+0x200>)
 8012be0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012be4:	601a      	str	r2, [r3, #0]
 8012be6:	f3bf 8f4f 	dsb	sy
 8012bea:	f3bf 8f6f 	isb	sy
 8012bee:	e772      	b.n	8012ad6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8012bf0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012bf2:	f000 fc7d 	bl	80134f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012bf6:	f000 fff5 	bl	8013be4 <xTaskResumeAll>
 8012bfa:	e76c      	b.n	8012ad6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8012bfc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012bfe:	f000 fc77 	bl	80134f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012c02:	f000 ffef 	bl	8013be4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8012c06:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8012c08:	4618      	mov	r0, r3
 8012c0a:	3738      	adds	r7, #56	@ 0x38
 8012c0c:	46bd      	mov	sp, r7
 8012c0e:	bd80      	pop	{r7, pc}
 8012c10:	e000ed04 	.word	0xe000ed04

08012c14 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8012c14:	b580      	push	{r7, lr}
 8012c16:	b090      	sub	sp, #64	@ 0x40
 8012c18:	af00      	add	r7, sp, #0
 8012c1a:	60f8      	str	r0, [r7, #12]
 8012c1c:	60b9      	str	r1, [r7, #8]
 8012c1e:	607a      	str	r2, [r7, #4]
 8012c20:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012c22:	68fb      	ldr	r3, [r7, #12]
 8012c24:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8012c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d10b      	bne.n	8012c44 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8012c2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012c30:	f383 8811 	msr	BASEPRI, r3
 8012c34:	f3bf 8f6f 	isb	sy
 8012c38:	f3bf 8f4f 	dsb	sy
 8012c3c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8012c3e:	bf00      	nop
 8012c40:	bf00      	nop
 8012c42:	e7fd      	b.n	8012c40 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012c44:	68bb      	ldr	r3, [r7, #8]
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	d103      	bne.n	8012c52 <xQueueGenericSendFromISR+0x3e>
 8012c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	d101      	bne.n	8012c56 <xQueueGenericSendFromISR+0x42>
 8012c52:	2301      	movs	r3, #1
 8012c54:	e000      	b.n	8012c58 <xQueueGenericSendFromISR+0x44>
 8012c56:	2300      	movs	r3, #0
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	d10b      	bne.n	8012c74 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8012c5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012c60:	f383 8811 	msr	BASEPRI, r3
 8012c64:	f3bf 8f6f 	isb	sy
 8012c68:	f3bf 8f4f 	dsb	sy
 8012c6c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8012c6e:	bf00      	nop
 8012c70:	bf00      	nop
 8012c72:	e7fd      	b.n	8012c70 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012c74:	683b      	ldr	r3, [r7, #0]
 8012c76:	2b02      	cmp	r3, #2
 8012c78:	d103      	bne.n	8012c82 <xQueueGenericSendFromISR+0x6e>
 8012c7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012c7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012c7e:	2b01      	cmp	r3, #1
 8012c80:	d101      	bne.n	8012c86 <xQueueGenericSendFromISR+0x72>
 8012c82:	2301      	movs	r3, #1
 8012c84:	e000      	b.n	8012c88 <xQueueGenericSendFromISR+0x74>
 8012c86:	2300      	movs	r3, #0
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d10b      	bne.n	8012ca4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8012c8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012c90:	f383 8811 	msr	BASEPRI, r3
 8012c94:	f3bf 8f6f 	isb	sy
 8012c98:	f3bf 8f4f 	dsb	sy
 8012c9c:	623b      	str	r3, [r7, #32]
}
 8012c9e:	bf00      	nop
 8012ca0:	bf00      	nop
 8012ca2:	e7fd      	b.n	8012ca0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012ca4:	f002 fe20 	bl	80158e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8012ca8:	f3ef 8211 	mrs	r2, BASEPRI
 8012cac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012cb0:	f383 8811 	msr	BASEPRI, r3
 8012cb4:	f3bf 8f6f 	isb	sy
 8012cb8:	f3bf 8f4f 	dsb	sy
 8012cbc:	61fa      	str	r2, [r7, #28]
 8012cbe:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8012cc0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012cc2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012cc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012cc6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012cc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012cca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012ccc:	429a      	cmp	r2, r3
 8012cce:	d302      	bcc.n	8012cd6 <xQueueGenericSendFromISR+0xc2>
 8012cd0:	683b      	ldr	r3, [r7, #0]
 8012cd2:	2b02      	cmp	r3, #2
 8012cd4:	d12f      	bne.n	8012d36 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012cd8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012cdc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012ce2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012ce4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012ce6:	683a      	ldr	r2, [r7, #0]
 8012ce8:	68b9      	ldr	r1, [r7, #8]
 8012cea:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8012cec:	f000 fb70 	bl	80133d0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012cf0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8012cf4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012cf8:	d112      	bne.n	8012d20 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012cfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d016      	beq.n	8012d30 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012d02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012d04:	3324      	adds	r3, #36	@ 0x24
 8012d06:	4618      	mov	r0, r3
 8012d08:	f001 f9dc 	bl	80140c4 <xTaskRemoveFromEventList>
 8012d0c:	4603      	mov	r3, r0
 8012d0e:	2b00      	cmp	r3, #0
 8012d10:	d00e      	beq.n	8012d30 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	d00b      	beq.n	8012d30 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	2201      	movs	r2, #1
 8012d1c:	601a      	str	r2, [r3, #0]
 8012d1e:	e007      	b.n	8012d30 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012d20:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8012d24:	3301      	adds	r3, #1
 8012d26:	b2db      	uxtb	r3, r3
 8012d28:	b25a      	sxtb	r2, r3
 8012d2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012d2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8012d30:	2301      	movs	r3, #1
 8012d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8012d34:	e001      	b.n	8012d3a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012d36:	2300      	movs	r3, #0
 8012d38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012d3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012d3c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8012d3e:	697b      	ldr	r3, [r7, #20]
 8012d40:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8012d44:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012d46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8012d48:	4618      	mov	r0, r3
 8012d4a:	3740      	adds	r7, #64	@ 0x40
 8012d4c:	46bd      	mov	sp, r7
 8012d4e:	bd80      	pop	{r7, pc}

08012d50 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012d50:	b580      	push	{r7, lr}
 8012d52:	b08e      	sub	sp, #56	@ 0x38
 8012d54:	af00      	add	r7, sp, #0
 8012d56:	6078      	str	r0, [r7, #4]
 8012d58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8012d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	d10b      	bne.n	8012d7c <xQueueGiveFromISR+0x2c>
	__asm volatile
 8012d64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012d68:	f383 8811 	msr	BASEPRI, r3
 8012d6c:	f3bf 8f6f 	isb	sy
 8012d70:	f3bf 8f4f 	dsb	sy
 8012d74:	623b      	str	r3, [r7, #32]
}
 8012d76:	bf00      	nop
 8012d78:	bf00      	nop
 8012d7a:	e7fd      	b.n	8012d78 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	d00b      	beq.n	8012d9c <xQueueGiveFromISR+0x4c>
	__asm volatile
 8012d84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012d88:	f383 8811 	msr	BASEPRI, r3
 8012d8c:	f3bf 8f6f 	isb	sy
 8012d90:	f3bf 8f4f 	dsb	sy
 8012d94:	61fb      	str	r3, [r7, #28]
}
 8012d96:	bf00      	nop
 8012d98:	bf00      	nop
 8012d9a:	e7fd      	b.n	8012d98 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8012d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d9e:	681b      	ldr	r3, [r3, #0]
 8012da0:	2b00      	cmp	r3, #0
 8012da2:	d103      	bne.n	8012dac <xQueueGiveFromISR+0x5c>
 8012da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012da6:	689b      	ldr	r3, [r3, #8]
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	d101      	bne.n	8012db0 <xQueueGiveFromISR+0x60>
 8012dac:	2301      	movs	r3, #1
 8012dae:	e000      	b.n	8012db2 <xQueueGiveFromISR+0x62>
 8012db0:	2300      	movs	r3, #0
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	d10b      	bne.n	8012dce <xQueueGiveFromISR+0x7e>
	__asm volatile
 8012db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012dba:	f383 8811 	msr	BASEPRI, r3
 8012dbe:	f3bf 8f6f 	isb	sy
 8012dc2:	f3bf 8f4f 	dsb	sy
 8012dc6:	61bb      	str	r3, [r7, #24]
}
 8012dc8:	bf00      	nop
 8012dca:	bf00      	nop
 8012dcc:	e7fd      	b.n	8012dca <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012dce:	f002 fd8b 	bl	80158e8 <vPortValidateInterruptPriority>
	__asm volatile
 8012dd2:	f3ef 8211 	mrs	r2, BASEPRI
 8012dd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012dda:	f383 8811 	msr	BASEPRI, r3
 8012dde:	f3bf 8f6f 	isb	sy
 8012de2:	f3bf 8f4f 	dsb	sy
 8012de6:	617a      	str	r2, [r7, #20]
 8012de8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8012dea:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012df0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012df2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8012df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012df6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012df8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012dfa:	429a      	cmp	r2, r3
 8012dfc:	d22b      	bcs.n	8012e56 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e00:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012e04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012e0a:	1c5a      	adds	r2, r3, #1
 8012e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e0e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012e10:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8012e14:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012e18:	d112      	bne.n	8012e40 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012e1e:	2b00      	cmp	r3, #0
 8012e20:	d016      	beq.n	8012e50 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e24:	3324      	adds	r3, #36	@ 0x24
 8012e26:	4618      	mov	r0, r3
 8012e28:	f001 f94c 	bl	80140c4 <xTaskRemoveFromEventList>
 8012e2c:	4603      	mov	r3, r0
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d00e      	beq.n	8012e50 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012e32:	683b      	ldr	r3, [r7, #0]
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	d00b      	beq.n	8012e50 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012e38:	683b      	ldr	r3, [r7, #0]
 8012e3a:	2201      	movs	r2, #1
 8012e3c:	601a      	str	r2, [r3, #0]
 8012e3e:	e007      	b.n	8012e50 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012e40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012e44:	3301      	adds	r3, #1
 8012e46:	b2db      	uxtb	r3, r3
 8012e48:	b25a      	sxtb	r2, r3
 8012e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8012e50:	2301      	movs	r3, #1
 8012e52:	637b      	str	r3, [r7, #52]	@ 0x34
 8012e54:	e001      	b.n	8012e5a <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012e56:	2300      	movs	r3, #0
 8012e58:	637b      	str	r3, [r7, #52]	@ 0x34
 8012e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e5c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8012e5e:	68fb      	ldr	r3, [r7, #12]
 8012e60:	f383 8811 	msr	BASEPRI, r3
}
 8012e64:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012e66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8012e68:	4618      	mov	r0, r3
 8012e6a:	3738      	adds	r7, #56	@ 0x38
 8012e6c:	46bd      	mov	sp, r7
 8012e6e:	bd80      	pop	{r7, pc}

08012e70 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8012e70:	b580      	push	{r7, lr}
 8012e72:	b08c      	sub	sp, #48	@ 0x30
 8012e74:	af00      	add	r7, sp, #0
 8012e76:	60f8      	str	r0, [r7, #12]
 8012e78:	60b9      	str	r1, [r7, #8]
 8012e7a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8012e7c:	2300      	movs	r3, #0
 8012e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012e80:	68fb      	ldr	r3, [r7, #12]
 8012e82:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012e84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	d10b      	bne.n	8012ea2 <xQueueReceive+0x32>
	__asm volatile
 8012e8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012e8e:	f383 8811 	msr	BASEPRI, r3
 8012e92:	f3bf 8f6f 	isb	sy
 8012e96:	f3bf 8f4f 	dsb	sy
 8012e9a:	623b      	str	r3, [r7, #32]
}
 8012e9c:	bf00      	nop
 8012e9e:	bf00      	nop
 8012ea0:	e7fd      	b.n	8012e9e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012ea2:	68bb      	ldr	r3, [r7, #8]
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d103      	bne.n	8012eb0 <xQueueReceive+0x40>
 8012ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d101      	bne.n	8012eb4 <xQueueReceive+0x44>
 8012eb0:	2301      	movs	r3, #1
 8012eb2:	e000      	b.n	8012eb6 <xQueueReceive+0x46>
 8012eb4:	2300      	movs	r3, #0
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d10b      	bne.n	8012ed2 <xQueueReceive+0x62>
	__asm volatile
 8012eba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012ebe:	f383 8811 	msr	BASEPRI, r3
 8012ec2:	f3bf 8f6f 	isb	sy
 8012ec6:	f3bf 8f4f 	dsb	sy
 8012eca:	61fb      	str	r3, [r7, #28]
}
 8012ecc:	bf00      	nop
 8012ece:	bf00      	nop
 8012ed0:	e7fd      	b.n	8012ece <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012ed2:	f001 fb31 	bl	8014538 <xTaskGetSchedulerState>
 8012ed6:	4603      	mov	r3, r0
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d102      	bne.n	8012ee2 <xQueueReceive+0x72>
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	d101      	bne.n	8012ee6 <xQueueReceive+0x76>
 8012ee2:	2301      	movs	r3, #1
 8012ee4:	e000      	b.n	8012ee8 <xQueueReceive+0x78>
 8012ee6:	2300      	movs	r3, #0
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	d10b      	bne.n	8012f04 <xQueueReceive+0x94>
	__asm volatile
 8012eec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012ef0:	f383 8811 	msr	BASEPRI, r3
 8012ef4:	f3bf 8f6f 	isb	sy
 8012ef8:	f3bf 8f4f 	dsb	sy
 8012efc:	61bb      	str	r3, [r7, #24]
}
 8012efe:	bf00      	nop
 8012f00:	bf00      	nop
 8012f02:	e7fd      	b.n	8012f00 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012f04:	f002 fc10 	bl	8015728 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012f0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012f0c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	d01f      	beq.n	8012f54 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012f14:	68b9      	ldr	r1, [r7, #8]
 8012f16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012f18:	f000 fac4 	bl	80134a4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f1e:	1e5a      	subs	r2, r3, #1
 8012f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012f22:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012f26:	691b      	ldr	r3, [r3, #16]
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	d00f      	beq.n	8012f4c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012f2e:	3310      	adds	r3, #16
 8012f30:	4618      	mov	r0, r3
 8012f32:	f001 f8c7 	bl	80140c4 <xTaskRemoveFromEventList>
 8012f36:	4603      	mov	r3, r0
 8012f38:	2b00      	cmp	r3, #0
 8012f3a:	d007      	beq.n	8012f4c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012f3c:	4b3c      	ldr	r3, [pc, #240]	@ (8013030 <xQueueReceive+0x1c0>)
 8012f3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012f42:	601a      	str	r2, [r3, #0]
 8012f44:	f3bf 8f4f 	dsb	sy
 8012f48:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012f4c:	f002 fc1e 	bl	801578c <vPortExitCritical>
				return pdPASS;
 8012f50:	2301      	movs	r3, #1
 8012f52:	e069      	b.n	8013028 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	2b00      	cmp	r3, #0
 8012f58:	d103      	bne.n	8012f62 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012f5a:	f002 fc17 	bl	801578c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012f5e:	2300      	movs	r3, #0
 8012f60:	e062      	b.n	8013028 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012f62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	d106      	bne.n	8012f76 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012f68:	f107 0310 	add.w	r3, r7, #16
 8012f6c:	4618      	mov	r0, r3
 8012f6e:	f001 f971 	bl	8014254 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012f72:	2301      	movs	r3, #1
 8012f74:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012f76:	f002 fc09 	bl	801578c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012f7a:	f000 fe25 	bl	8013bc8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012f7e:	f002 fbd3 	bl	8015728 <vPortEnterCritical>
 8012f82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012f84:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8012f88:	b25b      	sxtb	r3, r3
 8012f8a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012f8e:	d103      	bne.n	8012f98 <xQueueReceive+0x128>
 8012f90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012f92:	2200      	movs	r2, #0
 8012f94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012f98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012f9a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012f9e:	b25b      	sxtb	r3, r3
 8012fa0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012fa4:	d103      	bne.n	8012fae <xQueueReceive+0x13e>
 8012fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012fa8:	2200      	movs	r2, #0
 8012faa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012fae:	f002 fbed 	bl	801578c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012fb2:	1d3a      	adds	r2, r7, #4
 8012fb4:	f107 0310 	add.w	r3, r7, #16
 8012fb8:	4611      	mov	r1, r2
 8012fba:	4618      	mov	r0, r3
 8012fbc:	f001 f960 	bl	8014280 <xTaskCheckForTimeOut>
 8012fc0:	4603      	mov	r3, r0
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d123      	bne.n	801300e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012fc6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012fc8:	f000 fae4 	bl	8013594 <prvIsQueueEmpty>
 8012fcc:	4603      	mov	r3, r0
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	d017      	beq.n	8013002 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012fd4:	3324      	adds	r3, #36	@ 0x24
 8012fd6:	687a      	ldr	r2, [r7, #4]
 8012fd8:	4611      	mov	r1, r2
 8012fda:	4618      	mov	r0, r3
 8012fdc:	f000 ffe2 	bl	8013fa4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012fe0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012fe2:	f000 fa85 	bl	80134f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012fe6:	f000 fdfd 	bl	8013be4 <xTaskResumeAll>
 8012fea:	4603      	mov	r3, r0
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d189      	bne.n	8012f04 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8012ff0:	4b0f      	ldr	r3, [pc, #60]	@ (8013030 <xQueueReceive+0x1c0>)
 8012ff2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012ff6:	601a      	str	r2, [r3, #0]
 8012ff8:	f3bf 8f4f 	dsb	sy
 8012ffc:	f3bf 8f6f 	isb	sy
 8013000:	e780      	b.n	8012f04 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8013002:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013004:	f000 fa74 	bl	80134f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013008:	f000 fdec 	bl	8013be4 <xTaskResumeAll>
 801300c:	e77a      	b.n	8012f04 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801300e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013010:	f000 fa6e 	bl	80134f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013014:	f000 fde6 	bl	8013be4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013018:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801301a:	f000 fabb 	bl	8013594 <prvIsQueueEmpty>
 801301e:	4603      	mov	r3, r0
 8013020:	2b00      	cmp	r3, #0
 8013022:	f43f af6f 	beq.w	8012f04 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013026:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013028:	4618      	mov	r0, r3
 801302a:	3730      	adds	r7, #48	@ 0x30
 801302c:	46bd      	mov	sp, r7
 801302e:	bd80      	pop	{r7, pc}
 8013030:	e000ed04 	.word	0xe000ed04

08013034 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8013034:	b580      	push	{r7, lr}
 8013036:	b08e      	sub	sp, #56	@ 0x38
 8013038:	af00      	add	r7, sp, #0
 801303a:	6078      	str	r0, [r7, #4]
 801303c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801303e:	2300      	movs	r3, #0
 8013040:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8013046:	2300      	movs	r3, #0
 8013048:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801304a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801304c:	2b00      	cmp	r3, #0
 801304e:	d10b      	bne.n	8013068 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8013050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013054:	f383 8811 	msr	BASEPRI, r3
 8013058:	f3bf 8f6f 	isb	sy
 801305c:	f3bf 8f4f 	dsb	sy
 8013060:	623b      	str	r3, [r7, #32]
}
 8013062:	bf00      	nop
 8013064:	bf00      	nop
 8013066:	e7fd      	b.n	8013064 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8013068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801306a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801306c:	2b00      	cmp	r3, #0
 801306e:	d00b      	beq.n	8013088 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8013070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013074:	f383 8811 	msr	BASEPRI, r3
 8013078:	f3bf 8f6f 	isb	sy
 801307c:	f3bf 8f4f 	dsb	sy
 8013080:	61fb      	str	r3, [r7, #28]
}
 8013082:	bf00      	nop
 8013084:	bf00      	nop
 8013086:	e7fd      	b.n	8013084 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013088:	f001 fa56 	bl	8014538 <xTaskGetSchedulerState>
 801308c:	4603      	mov	r3, r0
 801308e:	2b00      	cmp	r3, #0
 8013090:	d102      	bne.n	8013098 <xQueueSemaphoreTake+0x64>
 8013092:	683b      	ldr	r3, [r7, #0]
 8013094:	2b00      	cmp	r3, #0
 8013096:	d101      	bne.n	801309c <xQueueSemaphoreTake+0x68>
 8013098:	2301      	movs	r3, #1
 801309a:	e000      	b.n	801309e <xQueueSemaphoreTake+0x6a>
 801309c:	2300      	movs	r3, #0
 801309e:	2b00      	cmp	r3, #0
 80130a0:	d10b      	bne.n	80130ba <xQueueSemaphoreTake+0x86>
	__asm volatile
 80130a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80130a6:	f383 8811 	msr	BASEPRI, r3
 80130aa:	f3bf 8f6f 	isb	sy
 80130ae:	f3bf 8f4f 	dsb	sy
 80130b2:	61bb      	str	r3, [r7, #24]
}
 80130b4:	bf00      	nop
 80130b6:	bf00      	nop
 80130b8:	e7fd      	b.n	80130b6 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80130ba:	f002 fb35 	bl	8015728 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80130be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80130c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80130c2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80130c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d024      	beq.n	8013114 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80130ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80130cc:	1e5a      	subs	r2, r3, #1
 80130ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80130d0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80130d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80130d4:	681b      	ldr	r3, [r3, #0]
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	d104      	bne.n	80130e4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80130da:	f001 fbbf 	bl	801485c <pvTaskIncrementMutexHeldCount>
 80130de:	4602      	mov	r2, r0
 80130e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80130e2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80130e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80130e6:	691b      	ldr	r3, [r3, #16]
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	d00f      	beq.n	801310c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80130ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80130ee:	3310      	adds	r3, #16
 80130f0:	4618      	mov	r0, r3
 80130f2:	f000 ffe7 	bl	80140c4 <xTaskRemoveFromEventList>
 80130f6:	4603      	mov	r3, r0
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d007      	beq.n	801310c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80130fc:	4b54      	ldr	r3, [pc, #336]	@ (8013250 <xQueueSemaphoreTake+0x21c>)
 80130fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013102:	601a      	str	r2, [r3, #0]
 8013104:	f3bf 8f4f 	dsb	sy
 8013108:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801310c:	f002 fb3e 	bl	801578c <vPortExitCritical>
				return pdPASS;
 8013110:	2301      	movs	r3, #1
 8013112:	e098      	b.n	8013246 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013114:	683b      	ldr	r3, [r7, #0]
 8013116:	2b00      	cmp	r3, #0
 8013118:	d112      	bne.n	8013140 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801311a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801311c:	2b00      	cmp	r3, #0
 801311e:	d00b      	beq.n	8013138 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8013120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013124:	f383 8811 	msr	BASEPRI, r3
 8013128:	f3bf 8f6f 	isb	sy
 801312c:	f3bf 8f4f 	dsb	sy
 8013130:	617b      	str	r3, [r7, #20]
}
 8013132:	bf00      	nop
 8013134:	bf00      	nop
 8013136:	e7fd      	b.n	8013134 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8013138:	f002 fb28 	bl	801578c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801313c:	2300      	movs	r3, #0
 801313e:	e082      	b.n	8013246 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013140:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013142:	2b00      	cmp	r3, #0
 8013144:	d106      	bne.n	8013154 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013146:	f107 030c 	add.w	r3, r7, #12
 801314a:	4618      	mov	r0, r3
 801314c:	f001 f882 	bl	8014254 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013150:	2301      	movs	r3, #1
 8013152:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013154:	f002 fb1a 	bl	801578c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013158:	f000 fd36 	bl	8013bc8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801315c:	f002 fae4 	bl	8015728 <vPortEnterCritical>
 8013160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013162:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013166:	b25b      	sxtb	r3, r3
 8013168:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801316c:	d103      	bne.n	8013176 <xQueueSemaphoreTake+0x142>
 801316e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013170:	2200      	movs	r2, #0
 8013172:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013176:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013178:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801317c:	b25b      	sxtb	r3, r3
 801317e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8013182:	d103      	bne.n	801318c <xQueueSemaphoreTake+0x158>
 8013184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013186:	2200      	movs	r2, #0
 8013188:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801318c:	f002 fafe 	bl	801578c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013190:	463a      	mov	r2, r7
 8013192:	f107 030c 	add.w	r3, r7, #12
 8013196:	4611      	mov	r1, r2
 8013198:	4618      	mov	r0, r3
 801319a:	f001 f871 	bl	8014280 <xTaskCheckForTimeOut>
 801319e:	4603      	mov	r3, r0
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	d132      	bne.n	801320a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80131a4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80131a6:	f000 f9f5 	bl	8013594 <prvIsQueueEmpty>
 80131aa:	4603      	mov	r3, r0
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d026      	beq.n	80131fe <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80131b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131b2:	681b      	ldr	r3, [r3, #0]
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d109      	bne.n	80131cc <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80131b8:	f002 fab6 	bl	8015728 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80131bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131be:	689b      	ldr	r3, [r3, #8]
 80131c0:	4618      	mov	r0, r3
 80131c2:	f001 f9d7 	bl	8014574 <xTaskPriorityInherit>
 80131c6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80131c8:	f002 fae0 	bl	801578c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80131cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131ce:	3324      	adds	r3, #36	@ 0x24
 80131d0:	683a      	ldr	r2, [r7, #0]
 80131d2:	4611      	mov	r1, r2
 80131d4:	4618      	mov	r0, r3
 80131d6:	f000 fee5 	bl	8013fa4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80131da:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80131dc:	f000 f988 	bl	80134f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80131e0:	f000 fd00 	bl	8013be4 <xTaskResumeAll>
 80131e4:	4603      	mov	r3, r0
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	f47f af67 	bne.w	80130ba <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80131ec:	4b18      	ldr	r3, [pc, #96]	@ (8013250 <xQueueSemaphoreTake+0x21c>)
 80131ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80131f2:	601a      	str	r2, [r3, #0]
 80131f4:	f3bf 8f4f 	dsb	sy
 80131f8:	f3bf 8f6f 	isb	sy
 80131fc:	e75d      	b.n	80130ba <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80131fe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013200:	f000 f976 	bl	80134f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013204:	f000 fcee 	bl	8013be4 <xTaskResumeAll>
 8013208:	e757      	b.n	80130ba <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801320a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801320c:	f000 f970 	bl	80134f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013210:	f000 fce8 	bl	8013be4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013214:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013216:	f000 f9bd 	bl	8013594 <prvIsQueueEmpty>
 801321a:	4603      	mov	r3, r0
 801321c:	2b00      	cmp	r3, #0
 801321e:	f43f af4c 	beq.w	80130ba <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8013222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013224:	2b00      	cmp	r3, #0
 8013226:	d00d      	beq.n	8013244 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8013228:	f002 fa7e 	bl	8015728 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 801322c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801322e:	f000 f8b7 	bl	80133a0 <prvGetDisinheritPriorityAfterTimeout>
 8013232:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8013234:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013236:	689b      	ldr	r3, [r3, #8]
 8013238:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801323a:	4618      	mov	r0, r3
 801323c:	f001 fa72 	bl	8014724 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8013240:	f002 faa4 	bl	801578c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013244:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013246:	4618      	mov	r0, r3
 8013248:	3738      	adds	r7, #56	@ 0x38
 801324a:	46bd      	mov	sp, r7
 801324c:	bd80      	pop	{r7, pc}
 801324e:	bf00      	nop
 8013250:	e000ed04 	.word	0xe000ed04

08013254 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013254:	b580      	push	{r7, lr}
 8013256:	b08e      	sub	sp, #56	@ 0x38
 8013258:	af00      	add	r7, sp, #0
 801325a:	60f8      	str	r0, [r7, #12]
 801325c:	60b9      	str	r1, [r7, #8]
 801325e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013260:	68fb      	ldr	r3, [r7, #12]
 8013262:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8013264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013266:	2b00      	cmp	r3, #0
 8013268:	d10b      	bne.n	8013282 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 801326a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801326e:	f383 8811 	msr	BASEPRI, r3
 8013272:	f3bf 8f6f 	isb	sy
 8013276:	f3bf 8f4f 	dsb	sy
 801327a:	623b      	str	r3, [r7, #32]
}
 801327c:	bf00      	nop
 801327e:	bf00      	nop
 8013280:	e7fd      	b.n	801327e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013282:	68bb      	ldr	r3, [r7, #8]
 8013284:	2b00      	cmp	r3, #0
 8013286:	d103      	bne.n	8013290 <xQueueReceiveFromISR+0x3c>
 8013288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801328a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801328c:	2b00      	cmp	r3, #0
 801328e:	d101      	bne.n	8013294 <xQueueReceiveFromISR+0x40>
 8013290:	2301      	movs	r3, #1
 8013292:	e000      	b.n	8013296 <xQueueReceiveFromISR+0x42>
 8013294:	2300      	movs	r3, #0
 8013296:	2b00      	cmp	r3, #0
 8013298:	d10b      	bne.n	80132b2 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 801329a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801329e:	f383 8811 	msr	BASEPRI, r3
 80132a2:	f3bf 8f6f 	isb	sy
 80132a6:	f3bf 8f4f 	dsb	sy
 80132aa:	61fb      	str	r3, [r7, #28]
}
 80132ac:	bf00      	nop
 80132ae:	bf00      	nop
 80132b0:	e7fd      	b.n	80132ae <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80132b2:	f002 fb19 	bl	80158e8 <vPortValidateInterruptPriority>
	__asm volatile
 80132b6:	f3ef 8211 	mrs	r2, BASEPRI
 80132ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80132be:	f383 8811 	msr	BASEPRI, r3
 80132c2:	f3bf 8f6f 	isb	sy
 80132c6:	f3bf 8f4f 	dsb	sy
 80132ca:	61ba      	str	r2, [r7, #24]
 80132cc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80132ce:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80132d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80132d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80132d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80132d6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80132d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80132da:	2b00      	cmp	r3, #0
 80132dc:	d02f      	beq.n	801333e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80132de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80132e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80132e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80132e8:	68b9      	ldr	r1, [r7, #8]
 80132ea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80132ec:	f000 f8da 	bl	80134a4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80132f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80132f2:	1e5a      	subs	r2, r3, #1
 80132f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80132f6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80132f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80132fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8013300:	d112      	bne.n	8013328 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013304:	691b      	ldr	r3, [r3, #16]
 8013306:	2b00      	cmp	r3, #0
 8013308:	d016      	beq.n	8013338 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801330a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801330c:	3310      	adds	r3, #16
 801330e:	4618      	mov	r0, r3
 8013310:	f000 fed8 	bl	80140c4 <xTaskRemoveFromEventList>
 8013314:	4603      	mov	r3, r0
 8013316:	2b00      	cmp	r3, #0
 8013318:	d00e      	beq.n	8013338 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	2b00      	cmp	r3, #0
 801331e:	d00b      	beq.n	8013338 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	2201      	movs	r2, #1
 8013324:	601a      	str	r2, [r3, #0]
 8013326:	e007      	b.n	8013338 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8013328:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801332c:	3301      	adds	r3, #1
 801332e:	b2db      	uxtb	r3, r3
 8013330:	b25a      	sxtb	r2, r3
 8013332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013334:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8013338:	2301      	movs	r3, #1
 801333a:	637b      	str	r3, [r7, #52]	@ 0x34
 801333c:	e001      	b.n	8013342 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 801333e:	2300      	movs	r3, #0
 8013340:	637b      	str	r3, [r7, #52]	@ 0x34
 8013342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013344:	613b      	str	r3, [r7, #16]
	__asm volatile
 8013346:	693b      	ldr	r3, [r7, #16]
 8013348:	f383 8811 	msr	BASEPRI, r3
}
 801334c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801334e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8013350:	4618      	mov	r0, r3
 8013352:	3738      	adds	r7, #56	@ 0x38
 8013354:	46bd      	mov	sp, r7
 8013356:	bd80      	pop	{r7, pc}

08013358 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8013358:	b580      	push	{r7, lr}
 801335a:	b084      	sub	sp, #16
 801335c:	af00      	add	r7, sp, #0
 801335e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013364:	68fb      	ldr	r3, [r7, #12]
 8013366:	2b00      	cmp	r3, #0
 8013368:	d10b      	bne.n	8013382 <vQueueDelete+0x2a>
	__asm volatile
 801336a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801336e:	f383 8811 	msr	BASEPRI, r3
 8013372:	f3bf 8f6f 	isb	sy
 8013376:	f3bf 8f4f 	dsb	sy
 801337a:	60bb      	str	r3, [r7, #8]
}
 801337c:	bf00      	nop
 801337e:	bf00      	nop
 8013380:	e7fd      	b.n	801337e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8013382:	68f8      	ldr	r0, [r7, #12]
 8013384:	f000 f95e 	bl	8013644 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8013388:	68fb      	ldr	r3, [r7, #12]
 801338a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 801338e:	2b00      	cmp	r3, #0
 8013390:	d102      	bne.n	8013398 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8013392:	68f8      	ldr	r0, [r7, #12]
 8013394:	f002 fbb8 	bl	8015b08 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8013398:	bf00      	nop
 801339a:	3710      	adds	r7, #16
 801339c:	46bd      	mov	sp, r7
 801339e:	bd80      	pop	{r7, pc}

080133a0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80133a0:	b480      	push	{r7}
 80133a2:	b085      	sub	sp, #20
 80133a4:	af00      	add	r7, sp, #0
 80133a6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d006      	beq.n	80133be <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80133b4:	681b      	ldr	r3, [r3, #0]
 80133b6:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80133ba:	60fb      	str	r3, [r7, #12]
 80133bc:	e001      	b.n	80133c2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80133be:	2300      	movs	r3, #0
 80133c0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80133c2:	68fb      	ldr	r3, [r7, #12]
	}
 80133c4:	4618      	mov	r0, r3
 80133c6:	3714      	adds	r7, #20
 80133c8:	46bd      	mov	sp, r7
 80133ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133ce:	4770      	bx	lr

080133d0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80133d0:	b580      	push	{r7, lr}
 80133d2:	b086      	sub	sp, #24
 80133d4:	af00      	add	r7, sp, #0
 80133d6:	60f8      	str	r0, [r7, #12]
 80133d8:	60b9      	str	r1, [r7, #8]
 80133da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80133dc:	2300      	movs	r3, #0
 80133de:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80133e0:	68fb      	ldr	r3, [r7, #12]
 80133e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80133e4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80133e6:	68fb      	ldr	r3, [r7, #12]
 80133e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	d10d      	bne.n	801340a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80133ee:	68fb      	ldr	r3, [r7, #12]
 80133f0:	681b      	ldr	r3, [r3, #0]
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d14d      	bne.n	8013492 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80133f6:	68fb      	ldr	r3, [r7, #12]
 80133f8:	689b      	ldr	r3, [r3, #8]
 80133fa:	4618      	mov	r0, r3
 80133fc:	f001 f922 	bl	8014644 <xTaskPriorityDisinherit>
 8013400:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8013402:	68fb      	ldr	r3, [r7, #12]
 8013404:	2200      	movs	r2, #0
 8013406:	609a      	str	r2, [r3, #8]
 8013408:	e043      	b.n	8013492 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	2b00      	cmp	r3, #0
 801340e:	d119      	bne.n	8013444 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013410:	68fb      	ldr	r3, [r7, #12]
 8013412:	6858      	ldr	r0, [r3, #4]
 8013414:	68fb      	ldr	r3, [r7, #12]
 8013416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013418:	461a      	mov	r2, r3
 801341a:	68b9      	ldr	r1, [r7, #8]
 801341c:	f003 f91f 	bl	801665e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013420:	68fb      	ldr	r3, [r7, #12]
 8013422:	685a      	ldr	r2, [r3, #4]
 8013424:	68fb      	ldr	r3, [r7, #12]
 8013426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013428:	441a      	add	r2, r3
 801342a:	68fb      	ldr	r3, [r7, #12]
 801342c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801342e:	68fb      	ldr	r3, [r7, #12]
 8013430:	685a      	ldr	r2, [r3, #4]
 8013432:	68fb      	ldr	r3, [r7, #12]
 8013434:	689b      	ldr	r3, [r3, #8]
 8013436:	429a      	cmp	r2, r3
 8013438:	d32b      	bcc.n	8013492 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801343a:	68fb      	ldr	r3, [r7, #12]
 801343c:	681a      	ldr	r2, [r3, #0]
 801343e:	68fb      	ldr	r3, [r7, #12]
 8013440:	605a      	str	r2, [r3, #4]
 8013442:	e026      	b.n	8013492 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8013444:	68fb      	ldr	r3, [r7, #12]
 8013446:	68d8      	ldr	r0, [r3, #12]
 8013448:	68fb      	ldr	r3, [r7, #12]
 801344a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801344c:	461a      	mov	r2, r3
 801344e:	68b9      	ldr	r1, [r7, #8]
 8013450:	f003 f905 	bl	801665e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8013454:	68fb      	ldr	r3, [r7, #12]
 8013456:	68da      	ldr	r2, [r3, #12]
 8013458:	68fb      	ldr	r3, [r7, #12]
 801345a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801345c:	425b      	negs	r3, r3
 801345e:	441a      	add	r2, r3
 8013460:	68fb      	ldr	r3, [r7, #12]
 8013462:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013464:	68fb      	ldr	r3, [r7, #12]
 8013466:	68da      	ldr	r2, [r3, #12]
 8013468:	68fb      	ldr	r3, [r7, #12]
 801346a:	681b      	ldr	r3, [r3, #0]
 801346c:	429a      	cmp	r2, r3
 801346e:	d207      	bcs.n	8013480 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8013470:	68fb      	ldr	r3, [r7, #12]
 8013472:	689a      	ldr	r2, [r3, #8]
 8013474:	68fb      	ldr	r3, [r7, #12]
 8013476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013478:	425b      	negs	r3, r3
 801347a:	441a      	add	r2, r3
 801347c:	68fb      	ldr	r3, [r7, #12]
 801347e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	2b02      	cmp	r3, #2
 8013484:	d105      	bne.n	8013492 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013486:	693b      	ldr	r3, [r7, #16]
 8013488:	2b00      	cmp	r3, #0
 801348a:	d002      	beq.n	8013492 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801348c:	693b      	ldr	r3, [r7, #16]
 801348e:	3b01      	subs	r3, #1
 8013490:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013492:	693b      	ldr	r3, [r7, #16]
 8013494:	1c5a      	adds	r2, r3, #1
 8013496:	68fb      	ldr	r3, [r7, #12]
 8013498:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 801349a:	697b      	ldr	r3, [r7, #20]
}
 801349c:	4618      	mov	r0, r3
 801349e:	3718      	adds	r7, #24
 80134a0:	46bd      	mov	sp, r7
 80134a2:	bd80      	pop	{r7, pc}

080134a4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80134a4:	b580      	push	{r7, lr}
 80134a6:	b082      	sub	sp, #8
 80134a8:	af00      	add	r7, sp, #0
 80134aa:	6078      	str	r0, [r7, #4]
 80134ac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d018      	beq.n	80134e8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	68da      	ldr	r2, [r3, #12]
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80134be:	441a      	add	r2, r3
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	68da      	ldr	r2, [r3, #12]
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	689b      	ldr	r3, [r3, #8]
 80134cc:	429a      	cmp	r2, r3
 80134ce:	d303      	bcc.n	80134d8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	681a      	ldr	r2, [r3, #0]
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	68d9      	ldr	r1, [r3, #12]
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80134e0:	461a      	mov	r2, r3
 80134e2:	6838      	ldr	r0, [r7, #0]
 80134e4:	f003 f8bb 	bl	801665e <memcpy>
	}
}
 80134e8:	bf00      	nop
 80134ea:	3708      	adds	r7, #8
 80134ec:	46bd      	mov	sp, r7
 80134ee:	bd80      	pop	{r7, pc}

080134f0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80134f0:	b580      	push	{r7, lr}
 80134f2:	b084      	sub	sp, #16
 80134f4:	af00      	add	r7, sp, #0
 80134f6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80134f8:	f002 f916 	bl	8015728 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013502:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013504:	e011      	b.n	801352a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801350a:	2b00      	cmp	r3, #0
 801350c:	d012      	beq.n	8013534 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	3324      	adds	r3, #36	@ 0x24
 8013512:	4618      	mov	r0, r3
 8013514:	f000 fdd6 	bl	80140c4 <xTaskRemoveFromEventList>
 8013518:	4603      	mov	r3, r0
 801351a:	2b00      	cmp	r3, #0
 801351c:	d001      	beq.n	8013522 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801351e:	f000 ff13 	bl	8014348 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8013522:	7bfb      	ldrb	r3, [r7, #15]
 8013524:	3b01      	subs	r3, #1
 8013526:	b2db      	uxtb	r3, r3
 8013528:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801352a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801352e:	2b00      	cmp	r3, #0
 8013530:	dce9      	bgt.n	8013506 <prvUnlockQueue+0x16>
 8013532:	e000      	b.n	8013536 <prvUnlockQueue+0x46>
					break;
 8013534:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	22ff      	movs	r2, #255	@ 0xff
 801353a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 801353e:	f002 f925 	bl	801578c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8013542:	f002 f8f1 	bl	8015728 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801354c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801354e:	e011      	b.n	8013574 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	691b      	ldr	r3, [r3, #16]
 8013554:	2b00      	cmp	r3, #0
 8013556:	d012      	beq.n	801357e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	3310      	adds	r3, #16
 801355c:	4618      	mov	r0, r3
 801355e:	f000 fdb1 	bl	80140c4 <xTaskRemoveFromEventList>
 8013562:	4603      	mov	r3, r0
 8013564:	2b00      	cmp	r3, #0
 8013566:	d001      	beq.n	801356c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8013568:	f000 feee 	bl	8014348 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801356c:	7bbb      	ldrb	r3, [r7, #14]
 801356e:	3b01      	subs	r3, #1
 8013570:	b2db      	uxtb	r3, r3
 8013572:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013574:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013578:	2b00      	cmp	r3, #0
 801357a:	dce9      	bgt.n	8013550 <prvUnlockQueue+0x60>
 801357c:	e000      	b.n	8013580 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801357e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	22ff      	movs	r2, #255	@ 0xff
 8013584:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8013588:	f002 f900 	bl	801578c <vPortExitCritical>
}
 801358c:	bf00      	nop
 801358e:	3710      	adds	r7, #16
 8013590:	46bd      	mov	sp, r7
 8013592:	bd80      	pop	{r7, pc}

08013594 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8013594:	b580      	push	{r7, lr}
 8013596:	b084      	sub	sp, #16
 8013598:	af00      	add	r7, sp, #0
 801359a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801359c:	f002 f8c4 	bl	8015728 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	d102      	bne.n	80135ae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80135a8:	2301      	movs	r3, #1
 80135aa:	60fb      	str	r3, [r7, #12]
 80135ac:	e001      	b.n	80135b2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80135ae:	2300      	movs	r3, #0
 80135b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80135b2:	f002 f8eb 	bl	801578c <vPortExitCritical>

	return xReturn;
 80135b6:	68fb      	ldr	r3, [r7, #12]
}
 80135b8:	4618      	mov	r0, r3
 80135ba:	3710      	adds	r7, #16
 80135bc:	46bd      	mov	sp, r7
 80135be:	bd80      	pop	{r7, pc}

080135c0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80135c0:	b580      	push	{r7, lr}
 80135c2:	b084      	sub	sp, #16
 80135c4:	af00      	add	r7, sp, #0
 80135c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80135c8:	f002 f8ae 	bl	8015728 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80135d4:	429a      	cmp	r2, r3
 80135d6:	d102      	bne.n	80135de <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80135d8:	2301      	movs	r3, #1
 80135da:	60fb      	str	r3, [r7, #12]
 80135dc:	e001      	b.n	80135e2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80135de:	2300      	movs	r3, #0
 80135e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80135e2:	f002 f8d3 	bl	801578c <vPortExitCritical>

	return xReturn;
 80135e6:	68fb      	ldr	r3, [r7, #12]
}
 80135e8:	4618      	mov	r0, r3
 80135ea:	3710      	adds	r7, #16
 80135ec:	46bd      	mov	sp, r7
 80135ee:	bd80      	pop	{r7, pc}

080135f0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80135f0:	b480      	push	{r7}
 80135f2:	b085      	sub	sp, #20
 80135f4:	af00      	add	r7, sp, #0
 80135f6:	6078      	str	r0, [r7, #4]
 80135f8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80135fa:	2300      	movs	r3, #0
 80135fc:	60fb      	str	r3, [r7, #12]
 80135fe:	e014      	b.n	801362a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8013600:	4a0f      	ldr	r2, [pc, #60]	@ (8013640 <vQueueAddToRegistry+0x50>)
 8013602:	68fb      	ldr	r3, [r7, #12]
 8013604:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8013608:	2b00      	cmp	r3, #0
 801360a:	d10b      	bne.n	8013624 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801360c:	490c      	ldr	r1, [pc, #48]	@ (8013640 <vQueueAddToRegistry+0x50>)
 801360e:	68fb      	ldr	r3, [r7, #12]
 8013610:	683a      	ldr	r2, [r7, #0]
 8013612:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8013616:	4a0a      	ldr	r2, [pc, #40]	@ (8013640 <vQueueAddToRegistry+0x50>)
 8013618:	68fb      	ldr	r3, [r7, #12]
 801361a:	00db      	lsls	r3, r3, #3
 801361c:	4413      	add	r3, r2
 801361e:	687a      	ldr	r2, [r7, #4]
 8013620:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8013622:	e006      	b.n	8013632 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013624:	68fb      	ldr	r3, [r7, #12]
 8013626:	3301      	adds	r3, #1
 8013628:	60fb      	str	r3, [r7, #12]
 801362a:	68fb      	ldr	r3, [r7, #12]
 801362c:	2b07      	cmp	r3, #7
 801362e:	d9e7      	bls.n	8013600 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8013630:	bf00      	nop
 8013632:	bf00      	nop
 8013634:	3714      	adds	r7, #20
 8013636:	46bd      	mov	sp, r7
 8013638:	f85d 7b04 	ldr.w	r7, [sp], #4
 801363c:	4770      	bx	lr
 801363e:	bf00      	nop
 8013640:	240010cc 	.word	0x240010cc

08013644 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8013644:	b480      	push	{r7}
 8013646:	b085      	sub	sp, #20
 8013648:	af00      	add	r7, sp, #0
 801364a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801364c:	2300      	movs	r3, #0
 801364e:	60fb      	str	r3, [r7, #12]
 8013650:	e016      	b.n	8013680 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8013652:	4a10      	ldr	r2, [pc, #64]	@ (8013694 <vQueueUnregisterQueue+0x50>)
 8013654:	68fb      	ldr	r3, [r7, #12]
 8013656:	00db      	lsls	r3, r3, #3
 8013658:	4413      	add	r3, r2
 801365a:	685b      	ldr	r3, [r3, #4]
 801365c:	687a      	ldr	r2, [r7, #4]
 801365e:	429a      	cmp	r2, r3
 8013660:	d10b      	bne.n	801367a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8013662:	4a0c      	ldr	r2, [pc, #48]	@ (8013694 <vQueueUnregisterQueue+0x50>)
 8013664:	68fb      	ldr	r3, [r7, #12]
 8013666:	2100      	movs	r1, #0
 8013668:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 801366c:	4a09      	ldr	r2, [pc, #36]	@ (8013694 <vQueueUnregisterQueue+0x50>)
 801366e:	68fb      	ldr	r3, [r7, #12]
 8013670:	00db      	lsls	r3, r3, #3
 8013672:	4413      	add	r3, r2
 8013674:	2200      	movs	r2, #0
 8013676:	605a      	str	r2, [r3, #4]
				break;
 8013678:	e006      	b.n	8013688 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801367a:	68fb      	ldr	r3, [r7, #12]
 801367c:	3301      	adds	r3, #1
 801367e:	60fb      	str	r3, [r7, #12]
 8013680:	68fb      	ldr	r3, [r7, #12]
 8013682:	2b07      	cmp	r3, #7
 8013684:	d9e5      	bls.n	8013652 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8013686:	bf00      	nop
 8013688:	bf00      	nop
 801368a:	3714      	adds	r7, #20
 801368c:	46bd      	mov	sp, r7
 801368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013692:	4770      	bx	lr
 8013694:	240010cc 	.word	0x240010cc

08013698 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013698:	b580      	push	{r7, lr}
 801369a:	b086      	sub	sp, #24
 801369c:	af00      	add	r7, sp, #0
 801369e:	60f8      	str	r0, [r7, #12]
 80136a0:	60b9      	str	r1, [r7, #8]
 80136a2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80136a4:	68fb      	ldr	r3, [r7, #12]
 80136a6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80136a8:	f002 f83e 	bl	8015728 <vPortEnterCritical>
 80136ac:	697b      	ldr	r3, [r7, #20]
 80136ae:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80136b2:	b25b      	sxtb	r3, r3
 80136b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80136b8:	d103      	bne.n	80136c2 <vQueueWaitForMessageRestricted+0x2a>
 80136ba:	697b      	ldr	r3, [r7, #20]
 80136bc:	2200      	movs	r2, #0
 80136be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80136c2:	697b      	ldr	r3, [r7, #20]
 80136c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80136c8:	b25b      	sxtb	r3, r3
 80136ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80136ce:	d103      	bne.n	80136d8 <vQueueWaitForMessageRestricted+0x40>
 80136d0:	697b      	ldr	r3, [r7, #20]
 80136d2:	2200      	movs	r2, #0
 80136d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80136d8:	f002 f858 	bl	801578c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80136dc:	697b      	ldr	r3, [r7, #20]
 80136de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80136e0:	2b00      	cmp	r3, #0
 80136e2:	d106      	bne.n	80136f2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80136e4:	697b      	ldr	r3, [r7, #20]
 80136e6:	3324      	adds	r3, #36	@ 0x24
 80136e8:	687a      	ldr	r2, [r7, #4]
 80136ea:	68b9      	ldr	r1, [r7, #8]
 80136ec:	4618      	mov	r0, r3
 80136ee:	f000 fcbd 	bl	801406c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80136f2:	6978      	ldr	r0, [r7, #20]
 80136f4:	f7ff fefc 	bl	80134f0 <prvUnlockQueue>
	}
 80136f8:	bf00      	nop
 80136fa:	3718      	adds	r7, #24
 80136fc:	46bd      	mov	sp, r7
 80136fe:	bd80      	pop	{r7, pc}

08013700 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8013700:	b580      	push	{r7, lr}
 8013702:	b08e      	sub	sp, #56	@ 0x38
 8013704:	af04      	add	r7, sp, #16
 8013706:	60f8      	str	r0, [r7, #12]
 8013708:	60b9      	str	r1, [r7, #8]
 801370a:	607a      	str	r2, [r7, #4]
 801370c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801370e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013710:	2b00      	cmp	r3, #0
 8013712:	d10b      	bne.n	801372c <xTaskCreateStatic+0x2c>
	__asm volatile
 8013714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013718:	f383 8811 	msr	BASEPRI, r3
 801371c:	f3bf 8f6f 	isb	sy
 8013720:	f3bf 8f4f 	dsb	sy
 8013724:	623b      	str	r3, [r7, #32]
}
 8013726:	bf00      	nop
 8013728:	bf00      	nop
 801372a:	e7fd      	b.n	8013728 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801372c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801372e:	2b00      	cmp	r3, #0
 8013730:	d10b      	bne.n	801374a <xTaskCreateStatic+0x4a>
	__asm volatile
 8013732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013736:	f383 8811 	msr	BASEPRI, r3
 801373a:	f3bf 8f6f 	isb	sy
 801373e:	f3bf 8f4f 	dsb	sy
 8013742:	61fb      	str	r3, [r7, #28]
}
 8013744:	bf00      	nop
 8013746:	bf00      	nop
 8013748:	e7fd      	b.n	8013746 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801374a:	23a8      	movs	r3, #168	@ 0xa8
 801374c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801374e:	693b      	ldr	r3, [r7, #16]
 8013750:	2ba8      	cmp	r3, #168	@ 0xa8
 8013752:	d00b      	beq.n	801376c <xTaskCreateStatic+0x6c>
	__asm volatile
 8013754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013758:	f383 8811 	msr	BASEPRI, r3
 801375c:	f3bf 8f6f 	isb	sy
 8013760:	f3bf 8f4f 	dsb	sy
 8013764:	61bb      	str	r3, [r7, #24]
}
 8013766:	bf00      	nop
 8013768:	bf00      	nop
 801376a:	e7fd      	b.n	8013768 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801376c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801376e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013770:	2b00      	cmp	r3, #0
 8013772:	d01e      	beq.n	80137b2 <xTaskCreateStatic+0xb2>
 8013774:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013776:	2b00      	cmp	r3, #0
 8013778:	d01b      	beq.n	80137b2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801377a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801377c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801377e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013780:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013782:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8013784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013786:	2202      	movs	r2, #2
 8013788:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801378c:	2300      	movs	r3, #0
 801378e:	9303      	str	r3, [sp, #12]
 8013790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013792:	9302      	str	r3, [sp, #8]
 8013794:	f107 0314 	add.w	r3, r7, #20
 8013798:	9301      	str	r3, [sp, #4]
 801379a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801379c:	9300      	str	r3, [sp, #0]
 801379e:	683b      	ldr	r3, [r7, #0]
 80137a0:	687a      	ldr	r2, [r7, #4]
 80137a2:	68b9      	ldr	r1, [r7, #8]
 80137a4:	68f8      	ldr	r0, [r7, #12]
 80137a6:	f000 f851 	bl	801384c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80137aa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80137ac:	f000 f8f6 	bl	801399c <prvAddNewTaskToReadyList>
 80137b0:	e001      	b.n	80137b6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80137b2:	2300      	movs	r3, #0
 80137b4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80137b6:	697b      	ldr	r3, [r7, #20]
	}
 80137b8:	4618      	mov	r0, r3
 80137ba:	3728      	adds	r7, #40	@ 0x28
 80137bc:	46bd      	mov	sp, r7
 80137be:	bd80      	pop	{r7, pc}

080137c0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80137c0:	b580      	push	{r7, lr}
 80137c2:	b08c      	sub	sp, #48	@ 0x30
 80137c4:	af04      	add	r7, sp, #16
 80137c6:	60f8      	str	r0, [r7, #12]
 80137c8:	60b9      	str	r1, [r7, #8]
 80137ca:	603b      	str	r3, [r7, #0]
 80137cc:	4613      	mov	r3, r2
 80137ce:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80137d0:	88fb      	ldrh	r3, [r7, #6]
 80137d2:	009b      	lsls	r3, r3, #2
 80137d4:	4618      	mov	r0, r3
 80137d6:	f002 f8c9 	bl	801596c <pvPortMalloc>
 80137da:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80137dc:	697b      	ldr	r3, [r7, #20]
 80137de:	2b00      	cmp	r3, #0
 80137e0:	d00e      	beq.n	8013800 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80137e2:	20a8      	movs	r0, #168	@ 0xa8
 80137e4:	f002 f8c2 	bl	801596c <pvPortMalloc>
 80137e8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80137ea:	69fb      	ldr	r3, [r7, #28]
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	d003      	beq.n	80137f8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80137f0:	69fb      	ldr	r3, [r7, #28]
 80137f2:	697a      	ldr	r2, [r7, #20]
 80137f4:	631a      	str	r2, [r3, #48]	@ 0x30
 80137f6:	e005      	b.n	8013804 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80137f8:	6978      	ldr	r0, [r7, #20]
 80137fa:	f002 f985 	bl	8015b08 <vPortFree>
 80137fe:	e001      	b.n	8013804 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8013800:	2300      	movs	r3, #0
 8013802:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8013804:	69fb      	ldr	r3, [r7, #28]
 8013806:	2b00      	cmp	r3, #0
 8013808:	d017      	beq.n	801383a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801380a:	69fb      	ldr	r3, [r7, #28]
 801380c:	2200      	movs	r2, #0
 801380e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8013812:	88fa      	ldrh	r2, [r7, #6]
 8013814:	2300      	movs	r3, #0
 8013816:	9303      	str	r3, [sp, #12]
 8013818:	69fb      	ldr	r3, [r7, #28]
 801381a:	9302      	str	r3, [sp, #8]
 801381c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801381e:	9301      	str	r3, [sp, #4]
 8013820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013822:	9300      	str	r3, [sp, #0]
 8013824:	683b      	ldr	r3, [r7, #0]
 8013826:	68b9      	ldr	r1, [r7, #8]
 8013828:	68f8      	ldr	r0, [r7, #12]
 801382a:	f000 f80f 	bl	801384c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801382e:	69f8      	ldr	r0, [r7, #28]
 8013830:	f000 f8b4 	bl	801399c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8013834:	2301      	movs	r3, #1
 8013836:	61bb      	str	r3, [r7, #24]
 8013838:	e002      	b.n	8013840 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801383a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801383e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8013840:	69bb      	ldr	r3, [r7, #24]
	}
 8013842:	4618      	mov	r0, r3
 8013844:	3720      	adds	r7, #32
 8013846:	46bd      	mov	sp, r7
 8013848:	bd80      	pop	{r7, pc}
	...

0801384c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801384c:	b580      	push	{r7, lr}
 801384e:	b088      	sub	sp, #32
 8013850:	af00      	add	r7, sp, #0
 8013852:	60f8      	str	r0, [r7, #12]
 8013854:	60b9      	str	r1, [r7, #8]
 8013856:	607a      	str	r2, [r7, #4]
 8013858:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801385a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801385c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	009b      	lsls	r3, r3, #2
 8013862:	461a      	mov	r2, r3
 8013864:	21a5      	movs	r1, #165	@ 0xa5
 8013866:	f002 fe11 	bl	801648c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801386a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801386c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801386e:	6879      	ldr	r1, [r7, #4]
 8013870:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8013874:	440b      	add	r3, r1
 8013876:	009b      	lsls	r3, r3, #2
 8013878:	4413      	add	r3, r2
 801387a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801387c:	69bb      	ldr	r3, [r7, #24]
 801387e:	f023 0307 	bic.w	r3, r3, #7
 8013882:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8013884:	69bb      	ldr	r3, [r7, #24]
 8013886:	f003 0307 	and.w	r3, r3, #7
 801388a:	2b00      	cmp	r3, #0
 801388c:	d00b      	beq.n	80138a6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 801388e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013892:	f383 8811 	msr	BASEPRI, r3
 8013896:	f3bf 8f6f 	isb	sy
 801389a:	f3bf 8f4f 	dsb	sy
 801389e:	617b      	str	r3, [r7, #20]
}
 80138a0:	bf00      	nop
 80138a2:	bf00      	nop
 80138a4:	e7fd      	b.n	80138a2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80138a6:	68bb      	ldr	r3, [r7, #8]
 80138a8:	2b00      	cmp	r3, #0
 80138aa:	d01f      	beq.n	80138ec <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80138ac:	2300      	movs	r3, #0
 80138ae:	61fb      	str	r3, [r7, #28]
 80138b0:	e012      	b.n	80138d8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80138b2:	68ba      	ldr	r2, [r7, #8]
 80138b4:	69fb      	ldr	r3, [r7, #28]
 80138b6:	4413      	add	r3, r2
 80138b8:	7819      	ldrb	r1, [r3, #0]
 80138ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80138bc:	69fb      	ldr	r3, [r7, #28]
 80138be:	4413      	add	r3, r2
 80138c0:	3334      	adds	r3, #52	@ 0x34
 80138c2:	460a      	mov	r2, r1
 80138c4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80138c6:	68ba      	ldr	r2, [r7, #8]
 80138c8:	69fb      	ldr	r3, [r7, #28]
 80138ca:	4413      	add	r3, r2
 80138cc:	781b      	ldrb	r3, [r3, #0]
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d006      	beq.n	80138e0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80138d2:	69fb      	ldr	r3, [r7, #28]
 80138d4:	3301      	adds	r3, #1
 80138d6:	61fb      	str	r3, [r7, #28]
 80138d8:	69fb      	ldr	r3, [r7, #28]
 80138da:	2b0f      	cmp	r3, #15
 80138dc:	d9e9      	bls.n	80138b2 <prvInitialiseNewTask+0x66>
 80138de:	e000      	b.n	80138e2 <prvInitialiseNewTask+0x96>
			{
				break;
 80138e0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80138e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80138e4:	2200      	movs	r2, #0
 80138e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80138ea:	e003      	b.n	80138f4 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80138ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80138ee:	2200      	movs	r2, #0
 80138f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80138f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138f6:	2b37      	cmp	r3, #55	@ 0x37
 80138f8:	d901      	bls.n	80138fe <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80138fa:	2337      	movs	r3, #55	@ 0x37
 80138fc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80138fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013900:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013902:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8013904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013906:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013908:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801390a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801390c:	2200      	movs	r2, #0
 801390e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8013910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013912:	3304      	adds	r3, #4
 8013914:	4618      	mov	r0, r3
 8013916:	f7fe fe33 	bl	8012580 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801391a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801391c:	3318      	adds	r3, #24
 801391e:	4618      	mov	r0, r3
 8013920:	f7fe fe2e 	bl	8012580 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8013924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013926:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013928:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801392a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801392c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8013930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013932:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8013934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013936:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013938:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801393a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801393c:	2200      	movs	r2, #0
 801393e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013944:	2200      	movs	r2, #0
 8013946:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801394a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801394c:	3354      	adds	r3, #84	@ 0x54
 801394e:	224c      	movs	r2, #76	@ 0x4c
 8013950:	2100      	movs	r1, #0
 8013952:	4618      	mov	r0, r3
 8013954:	f002 fd9a 	bl	801648c <memset>
 8013958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801395a:	4a0d      	ldr	r2, [pc, #52]	@ (8013990 <prvInitialiseNewTask+0x144>)
 801395c:	659a      	str	r2, [r3, #88]	@ 0x58
 801395e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013960:	4a0c      	ldr	r2, [pc, #48]	@ (8013994 <prvInitialiseNewTask+0x148>)
 8013962:	65da      	str	r2, [r3, #92]	@ 0x5c
 8013964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013966:	4a0c      	ldr	r2, [pc, #48]	@ (8013998 <prvInitialiseNewTask+0x14c>)
 8013968:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801396a:	683a      	ldr	r2, [r7, #0]
 801396c:	68f9      	ldr	r1, [r7, #12]
 801396e:	69b8      	ldr	r0, [r7, #24]
 8013970:	f001 fda8 	bl	80154c4 <pxPortInitialiseStack>
 8013974:	4602      	mov	r2, r0
 8013976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013978:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801397a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801397c:	2b00      	cmp	r3, #0
 801397e:	d002      	beq.n	8013986 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8013980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013982:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013984:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013986:	bf00      	nop
 8013988:	3720      	adds	r7, #32
 801398a:	46bd      	mov	sp, r7
 801398c:	bd80      	pop	{r7, pc}
 801398e:	bf00      	nop
 8013990:	24005368 	.word	0x24005368
 8013994:	240053d0 	.word	0x240053d0
 8013998:	24005438 	.word	0x24005438

0801399c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801399c:	b580      	push	{r7, lr}
 801399e:	b082      	sub	sp, #8
 80139a0:	af00      	add	r7, sp, #0
 80139a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80139a4:	f001 fec0 	bl	8015728 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80139a8:	4b2d      	ldr	r3, [pc, #180]	@ (8013a60 <prvAddNewTaskToReadyList+0xc4>)
 80139aa:	681b      	ldr	r3, [r3, #0]
 80139ac:	3301      	adds	r3, #1
 80139ae:	4a2c      	ldr	r2, [pc, #176]	@ (8013a60 <prvAddNewTaskToReadyList+0xc4>)
 80139b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80139b2:	4b2c      	ldr	r3, [pc, #176]	@ (8013a64 <prvAddNewTaskToReadyList+0xc8>)
 80139b4:	681b      	ldr	r3, [r3, #0]
 80139b6:	2b00      	cmp	r3, #0
 80139b8:	d109      	bne.n	80139ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80139ba:	4a2a      	ldr	r2, [pc, #168]	@ (8013a64 <prvAddNewTaskToReadyList+0xc8>)
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80139c0:	4b27      	ldr	r3, [pc, #156]	@ (8013a60 <prvAddNewTaskToReadyList+0xc4>)
 80139c2:	681b      	ldr	r3, [r3, #0]
 80139c4:	2b01      	cmp	r3, #1
 80139c6:	d110      	bne.n	80139ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80139c8:	f000 fce2 	bl	8014390 <prvInitialiseTaskLists>
 80139cc:	e00d      	b.n	80139ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80139ce:	4b26      	ldr	r3, [pc, #152]	@ (8013a68 <prvAddNewTaskToReadyList+0xcc>)
 80139d0:	681b      	ldr	r3, [r3, #0]
 80139d2:	2b00      	cmp	r3, #0
 80139d4:	d109      	bne.n	80139ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80139d6:	4b23      	ldr	r3, [pc, #140]	@ (8013a64 <prvAddNewTaskToReadyList+0xc8>)
 80139d8:	681b      	ldr	r3, [r3, #0]
 80139da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80139e0:	429a      	cmp	r2, r3
 80139e2:	d802      	bhi.n	80139ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80139e4:	4a1f      	ldr	r2, [pc, #124]	@ (8013a64 <prvAddNewTaskToReadyList+0xc8>)
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80139ea:	4b20      	ldr	r3, [pc, #128]	@ (8013a6c <prvAddNewTaskToReadyList+0xd0>)
 80139ec:	681b      	ldr	r3, [r3, #0]
 80139ee:	3301      	adds	r3, #1
 80139f0:	4a1e      	ldr	r2, [pc, #120]	@ (8013a6c <prvAddNewTaskToReadyList+0xd0>)
 80139f2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80139f4:	4b1d      	ldr	r3, [pc, #116]	@ (8013a6c <prvAddNewTaskToReadyList+0xd0>)
 80139f6:	681a      	ldr	r2, [r3, #0]
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013a00:	4b1b      	ldr	r3, [pc, #108]	@ (8013a70 <prvAddNewTaskToReadyList+0xd4>)
 8013a02:	681b      	ldr	r3, [r3, #0]
 8013a04:	429a      	cmp	r2, r3
 8013a06:	d903      	bls.n	8013a10 <prvAddNewTaskToReadyList+0x74>
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013a0c:	4a18      	ldr	r2, [pc, #96]	@ (8013a70 <prvAddNewTaskToReadyList+0xd4>)
 8013a0e:	6013      	str	r3, [r2, #0]
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013a14:	4613      	mov	r3, r2
 8013a16:	009b      	lsls	r3, r3, #2
 8013a18:	4413      	add	r3, r2
 8013a1a:	009b      	lsls	r3, r3, #2
 8013a1c:	4a15      	ldr	r2, [pc, #84]	@ (8013a74 <prvAddNewTaskToReadyList+0xd8>)
 8013a1e:	441a      	add	r2, r3
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	3304      	adds	r3, #4
 8013a24:	4619      	mov	r1, r3
 8013a26:	4610      	mov	r0, r2
 8013a28:	f7fe fdb7 	bl	801259a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8013a2c:	f001 feae 	bl	801578c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8013a30:	4b0d      	ldr	r3, [pc, #52]	@ (8013a68 <prvAddNewTaskToReadyList+0xcc>)
 8013a32:	681b      	ldr	r3, [r3, #0]
 8013a34:	2b00      	cmp	r3, #0
 8013a36:	d00e      	beq.n	8013a56 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013a38:	4b0a      	ldr	r3, [pc, #40]	@ (8013a64 <prvAddNewTaskToReadyList+0xc8>)
 8013a3a:	681b      	ldr	r3, [r3, #0]
 8013a3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013a42:	429a      	cmp	r2, r3
 8013a44:	d207      	bcs.n	8013a56 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8013a46:	4b0c      	ldr	r3, [pc, #48]	@ (8013a78 <prvAddNewTaskToReadyList+0xdc>)
 8013a48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013a4c:	601a      	str	r2, [r3, #0]
 8013a4e:	f3bf 8f4f 	dsb	sy
 8013a52:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013a56:	bf00      	nop
 8013a58:	3708      	adds	r7, #8
 8013a5a:	46bd      	mov	sp, r7
 8013a5c:	bd80      	pop	{r7, pc}
 8013a5e:	bf00      	nop
 8013a60:	240015e0 	.word	0x240015e0
 8013a64:	2400110c 	.word	0x2400110c
 8013a68:	240015ec 	.word	0x240015ec
 8013a6c:	240015fc 	.word	0x240015fc
 8013a70:	240015e8 	.word	0x240015e8
 8013a74:	24001110 	.word	0x24001110
 8013a78:	e000ed04 	.word	0xe000ed04

08013a7c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8013a7c:	b580      	push	{r7, lr}
 8013a7e:	b084      	sub	sp, #16
 8013a80:	af00      	add	r7, sp, #0
 8013a82:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8013a84:	2300      	movs	r3, #0
 8013a86:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	d018      	beq.n	8013ac0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8013a8e:	4b14      	ldr	r3, [pc, #80]	@ (8013ae0 <vTaskDelay+0x64>)
 8013a90:	681b      	ldr	r3, [r3, #0]
 8013a92:	2b00      	cmp	r3, #0
 8013a94:	d00b      	beq.n	8013aae <vTaskDelay+0x32>
	__asm volatile
 8013a96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013a9a:	f383 8811 	msr	BASEPRI, r3
 8013a9e:	f3bf 8f6f 	isb	sy
 8013aa2:	f3bf 8f4f 	dsb	sy
 8013aa6:	60bb      	str	r3, [r7, #8]
}
 8013aa8:	bf00      	nop
 8013aaa:	bf00      	nop
 8013aac:	e7fd      	b.n	8013aaa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8013aae:	f000 f88b 	bl	8013bc8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8013ab2:	2100      	movs	r1, #0
 8013ab4:	6878      	ldr	r0, [r7, #4]
 8013ab6:	f001 f8d9 	bl	8014c6c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8013aba:	f000 f893 	bl	8013be4 <xTaskResumeAll>
 8013abe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8013ac0:	68fb      	ldr	r3, [r7, #12]
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	d107      	bne.n	8013ad6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8013ac6:	4b07      	ldr	r3, [pc, #28]	@ (8013ae4 <vTaskDelay+0x68>)
 8013ac8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013acc:	601a      	str	r2, [r3, #0]
 8013ace:	f3bf 8f4f 	dsb	sy
 8013ad2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013ad6:	bf00      	nop
 8013ad8:	3710      	adds	r7, #16
 8013ada:	46bd      	mov	sp, r7
 8013adc:	bd80      	pop	{r7, pc}
 8013ade:	bf00      	nop
 8013ae0:	24001608 	.word	0x24001608
 8013ae4:	e000ed04 	.word	0xe000ed04

08013ae8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8013ae8:	b580      	push	{r7, lr}
 8013aea:	b08a      	sub	sp, #40	@ 0x28
 8013aec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8013aee:	2300      	movs	r3, #0
 8013af0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8013af2:	2300      	movs	r3, #0
 8013af4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8013af6:	463a      	mov	r2, r7
 8013af8:	1d39      	adds	r1, r7, #4
 8013afa:	f107 0308 	add.w	r3, r7, #8
 8013afe:	4618      	mov	r0, r3
 8013b00:	f7fe fb2e 	bl	8012160 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8013b04:	6839      	ldr	r1, [r7, #0]
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	68ba      	ldr	r2, [r7, #8]
 8013b0a:	9202      	str	r2, [sp, #8]
 8013b0c:	9301      	str	r3, [sp, #4]
 8013b0e:	2300      	movs	r3, #0
 8013b10:	9300      	str	r3, [sp, #0]
 8013b12:	2300      	movs	r3, #0
 8013b14:	460a      	mov	r2, r1
 8013b16:	4924      	ldr	r1, [pc, #144]	@ (8013ba8 <vTaskStartScheduler+0xc0>)
 8013b18:	4824      	ldr	r0, [pc, #144]	@ (8013bac <vTaskStartScheduler+0xc4>)
 8013b1a:	f7ff fdf1 	bl	8013700 <xTaskCreateStatic>
 8013b1e:	4603      	mov	r3, r0
 8013b20:	4a23      	ldr	r2, [pc, #140]	@ (8013bb0 <vTaskStartScheduler+0xc8>)
 8013b22:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8013b24:	4b22      	ldr	r3, [pc, #136]	@ (8013bb0 <vTaskStartScheduler+0xc8>)
 8013b26:	681b      	ldr	r3, [r3, #0]
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	d002      	beq.n	8013b32 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8013b2c:	2301      	movs	r3, #1
 8013b2e:	617b      	str	r3, [r7, #20]
 8013b30:	e001      	b.n	8013b36 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8013b32:	2300      	movs	r3, #0
 8013b34:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8013b36:	697b      	ldr	r3, [r7, #20]
 8013b38:	2b01      	cmp	r3, #1
 8013b3a:	d102      	bne.n	8013b42 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8013b3c:	f001 f8ea 	bl	8014d14 <xTimerCreateTimerTask>
 8013b40:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8013b42:	697b      	ldr	r3, [r7, #20]
 8013b44:	2b01      	cmp	r3, #1
 8013b46:	d11b      	bne.n	8013b80 <vTaskStartScheduler+0x98>
	__asm volatile
 8013b48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013b4c:	f383 8811 	msr	BASEPRI, r3
 8013b50:	f3bf 8f6f 	isb	sy
 8013b54:	f3bf 8f4f 	dsb	sy
 8013b58:	613b      	str	r3, [r7, #16]
}
 8013b5a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8013b5c:	4b15      	ldr	r3, [pc, #84]	@ (8013bb4 <vTaskStartScheduler+0xcc>)
 8013b5e:	681b      	ldr	r3, [r3, #0]
 8013b60:	3354      	adds	r3, #84	@ 0x54
 8013b62:	4a15      	ldr	r2, [pc, #84]	@ (8013bb8 <vTaskStartScheduler+0xd0>)
 8013b64:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8013b66:	4b15      	ldr	r3, [pc, #84]	@ (8013bbc <vTaskStartScheduler+0xd4>)
 8013b68:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8013b6c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8013b6e:	4b14      	ldr	r3, [pc, #80]	@ (8013bc0 <vTaskStartScheduler+0xd8>)
 8013b70:	2201      	movs	r2, #1
 8013b72:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8013b74:	4b13      	ldr	r3, [pc, #76]	@ (8013bc4 <vTaskStartScheduler+0xdc>)
 8013b76:	2200      	movs	r2, #0
 8013b78:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8013b7a:	f001 fd31 	bl	80155e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8013b7e:	e00f      	b.n	8013ba0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013b80:	697b      	ldr	r3, [r7, #20]
 8013b82:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8013b86:	d10b      	bne.n	8013ba0 <vTaskStartScheduler+0xb8>
	__asm volatile
 8013b88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013b8c:	f383 8811 	msr	BASEPRI, r3
 8013b90:	f3bf 8f6f 	isb	sy
 8013b94:	f3bf 8f4f 	dsb	sy
 8013b98:	60fb      	str	r3, [r7, #12]
}
 8013b9a:	bf00      	nop
 8013b9c:	bf00      	nop
 8013b9e:	e7fd      	b.n	8013b9c <vTaskStartScheduler+0xb4>
}
 8013ba0:	bf00      	nop
 8013ba2:	3718      	adds	r7, #24
 8013ba4:	46bd      	mov	sp, r7
 8013ba6:	bd80      	pop	{r7, pc}
 8013ba8:	080175e8 	.word	0x080175e8
 8013bac:	08014361 	.word	0x08014361
 8013bb0:	24001604 	.word	0x24001604
 8013bb4:	2400110c 	.word	0x2400110c
 8013bb8:	24000020 	.word	0x24000020
 8013bbc:	24001600 	.word	0x24001600
 8013bc0:	240015ec 	.word	0x240015ec
 8013bc4:	240015e4 	.word	0x240015e4

08013bc8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8013bc8:	b480      	push	{r7}
 8013bca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8013bcc:	4b04      	ldr	r3, [pc, #16]	@ (8013be0 <vTaskSuspendAll+0x18>)
 8013bce:	681b      	ldr	r3, [r3, #0]
 8013bd0:	3301      	adds	r3, #1
 8013bd2:	4a03      	ldr	r2, [pc, #12]	@ (8013be0 <vTaskSuspendAll+0x18>)
 8013bd4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8013bd6:	bf00      	nop
 8013bd8:	46bd      	mov	sp, r7
 8013bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bde:	4770      	bx	lr
 8013be0:	24001608 	.word	0x24001608

08013be4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013be4:	b580      	push	{r7, lr}
 8013be6:	b084      	sub	sp, #16
 8013be8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8013bea:	2300      	movs	r3, #0
 8013bec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8013bee:	2300      	movs	r3, #0
 8013bf0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8013bf2:	4b42      	ldr	r3, [pc, #264]	@ (8013cfc <xTaskResumeAll+0x118>)
 8013bf4:	681b      	ldr	r3, [r3, #0]
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	d10b      	bne.n	8013c12 <xTaskResumeAll+0x2e>
	__asm volatile
 8013bfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013bfe:	f383 8811 	msr	BASEPRI, r3
 8013c02:	f3bf 8f6f 	isb	sy
 8013c06:	f3bf 8f4f 	dsb	sy
 8013c0a:	603b      	str	r3, [r7, #0]
}
 8013c0c:	bf00      	nop
 8013c0e:	bf00      	nop
 8013c10:	e7fd      	b.n	8013c0e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013c12:	f001 fd89 	bl	8015728 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8013c16:	4b39      	ldr	r3, [pc, #228]	@ (8013cfc <xTaskResumeAll+0x118>)
 8013c18:	681b      	ldr	r3, [r3, #0]
 8013c1a:	3b01      	subs	r3, #1
 8013c1c:	4a37      	ldr	r2, [pc, #220]	@ (8013cfc <xTaskResumeAll+0x118>)
 8013c1e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013c20:	4b36      	ldr	r3, [pc, #216]	@ (8013cfc <xTaskResumeAll+0x118>)
 8013c22:	681b      	ldr	r3, [r3, #0]
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	d162      	bne.n	8013cee <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013c28:	4b35      	ldr	r3, [pc, #212]	@ (8013d00 <xTaskResumeAll+0x11c>)
 8013c2a:	681b      	ldr	r3, [r3, #0]
 8013c2c:	2b00      	cmp	r3, #0
 8013c2e:	d05e      	beq.n	8013cee <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013c30:	e02f      	b.n	8013c92 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013c32:	4b34      	ldr	r3, [pc, #208]	@ (8013d04 <xTaskResumeAll+0x120>)
 8013c34:	68db      	ldr	r3, [r3, #12]
 8013c36:	68db      	ldr	r3, [r3, #12]
 8013c38:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013c3a:	68fb      	ldr	r3, [r7, #12]
 8013c3c:	3318      	adds	r3, #24
 8013c3e:	4618      	mov	r0, r3
 8013c40:	f7fe fd08 	bl	8012654 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013c44:	68fb      	ldr	r3, [r7, #12]
 8013c46:	3304      	adds	r3, #4
 8013c48:	4618      	mov	r0, r3
 8013c4a:	f7fe fd03 	bl	8012654 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013c4e:	68fb      	ldr	r3, [r7, #12]
 8013c50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013c52:	4b2d      	ldr	r3, [pc, #180]	@ (8013d08 <xTaskResumeAll+0x124>)
 8013c54:	681b      	ldr	r3, [r3, #0]
 8013c56:	429a      	cmp	r2, r3
 8013c58:	d903      	bls.n	8013c62 <xTaskResumeAll+0x7e>
 8013c5a:	68fb      	ldr	r3, [r7, #12]
 8013c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013c5e:	4a2a      	ldr	r2, [pc, #168]	@ (8013d08 <xTaskResumeAll+0x124>)
 8013c60:	6013      	str	r3, [r2, #0]
 8013c62:	68fb      	ldr	r3, [r7, #12]
 8013c64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013c66:	4613      	mov	r3, r2
 8013c68:	009b      	lsls	r3, r3, #2
 8013c6a:	4413      	add	r3, r2
 8013c6c:	009b      	lsls	r3, r3, #2
 8013c6e:	4a27      	ldr	r2, [pc, #156]	@ (8013d0c <xTaskResumeAll+0x128>)
 8013c70:	441a      	add	r2, r3
 8013c72:	68fb      	ldr	r3, [r7, #12]
 8013c74:	3304      	adds	r3, #4
 8013c76:	4619      	mov	r1, r3
 8013c78:	4610      	mov	r0, r2
 8013c7a:	f7fe fc8e 	bl	801259a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013c7e:	68fb      	ldr	r3, [r7, #12]
 8013c80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013c82:	4b23      	ldr	r3, [pc, #140]	@ (8013d10 <xTaskResumeAll+0x12c>)
 8013c84:	681b      	ldr	r3, [r3, #0]
 8013c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013c88:	429a      	cmp	r2, r3
 8013c8a:	d302      	bcc.n	8013c92 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8013c8c:	4b21      	ldr	r3, [pc, #132]	@ (8013d14 <xTaskResumeAll+0x130>)
 8013c8e:	2201      	movs	r2, #1
 8013c90:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013c92:	4b1c      	ldr	r3, [pc, #112]	@ (8013d04 <xTaskResumeAll+0x120>)
 8013c94:	681b      	ldr	r3, [r3, #0]
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	d1cb      	bne.n	8013c32 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8013c9a:	68fb      	ldr	r3, [r7, #12]
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	d001      	beq.n	8013ca4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8013ca0:	f000 fc1a 	bl	80144d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8013ca4:	4b1c      	ldr	r3, [pc, #112]	@ (8013d18 <xTaskResumeAll+0x134>)
 8013ca6:	681b      	ldr	r3, [r3, #0]
 8013ca8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	d010      	beq.n	8013cd2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8013cb0:	f000 f858 	bl	8013d64 <xTaskIncrementTick>
 8013cb4:	4603      	mov	r3, r0
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	d002      	beq.n	8013cc0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8013cba:	4b16      	ldr	r3, [pc, #88]	@ (8013d14 <xTaskResumeAll+0x130>)
 8013cbc:	2201      	movs	r2, #1
 8013cbe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	3b01      	subs	r3, #1
 8013cc4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8013cc6:	687b      	ldr	r3, [r7, #4]
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	d1f1      	bne.n	8013cb0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8013ccc:	4b12      	ldr	r3, [pc, #72]	@ (8013d18 <xTaskResumeAll+0x134>)
 8013cce:	2200      	movs	r2, #0
 8013cd0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8013cd2:	4b10      	ldr	r3, [pc, #64]	@ (8013d14 <xTaskResumeAll+0x130>)
 8013cd4:	681b      	ldr	r3, [r3, #0]
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	d009      	beq.n	8013cee <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8013cda:	2301      	movs	r3, #1
 8013cdc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013cde:	4b0f      	ldr	r3, [pc, #60]	@ (8013d1c <xTaskResumeAll+0x138>)
 8013ce0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013ce4:	601a      	str	r2, [r3, #0]
 8013ce6:	f3bf 8f4f 	dsb	sy
 8013cea:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013cee:	f001 fd4d 	bl	801578c <vPortExitCritical>

	return xAlreadyYielded;
 8013cf2:	68bb      	ldr	r3, [r7, #8]
}
 8013cf4:	4618      	mov	r0, r3
 8013cf6:	3710      	adds	r7, #16
 8013cf8:	46bd      	mov	sp, r7
 8013cfa:	bd80      	pop	{r7, pc}
 8013cfc:	24001608 	.word	0x24001608
 8013d00:	240015e0 	.word	0x240015e0
 8013d04:	240015a0 	.word	0x240015a0
 8013d08:	240015e8 	.word	0x240015e8
 8013d0c:	24001110 	.word	0x24001110
 8013d10:	2400110c 	.word	0x2400110c
 8013d14:	240015f4 	.word	0x240015f4
 8013d18:	240015f0 	.word	0x240015f0
 8013d1c:	e000ed04 	.word	0xe000ed04

08013d20 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8013d20:	b480      	push	{r7}
 8013d22:	b083      	sub	sp, #12
 8013d24:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8013d26:	4b05      	ldr	r3, [pc, #20]	@ (8013d3c <xTaskGetTickCount+0x1c>)
 8013d28:	681b      	ldr	r3, [r3, #0]
 8013d2a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8013d2c:	687b      	ldr	r3, [r7, #4]
}
 8013d2e:	4618      	mov	r0, r3
 8013d30:	370c      	adds	r7, #12
 8013d32:	46bd      	mov	sp, r7
 8013d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d38:	4770      	bx	lr
 8013d3a:	bf00      	nop
 8013d3c:	240015e4 	.word	0x240015e4

08013d40 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8013d40:	b580      	push	{r7, lr}
 8013d42:	b082      	sub	sp, #8
 8013d44:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013d46:	f001 fdcf 	bl	80158e8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8013d4a:	2300      	movs	r3, #0
 8013d4c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8013d4e:	4b04      	ldr	r3, [pc, #16]	@ (8013d60 <xTaskGetTickCountFromISR+0x20>)
 8013d50:	681b      	ldr	r3, [r3, #0]
 8013d52:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013d54:	683b      	ldr	r3, [r7, #0]
}
 8013d56:	4618      	mov	r0, r3
 8013d58:	3708      	adds	r7, #8
 8013d5a:	46bd      	mov	sp, r7
 8013d5c:	bd80      	pop	{r7, pc}
 8013d5e:	bf00      	nop
 8013d60:	240015e4 	.word	0x240015e4

08013d64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013d64:	b580      	push	{r7, lr}
 8013d66:	b086      	sub	sp, #24
 8013d68:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8013d6a:	2300      	movs	r3, #0
 8013d6c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013d6e:	4b4f      	ldr	r3, [pc, #316]	@ (8013eac <xTaskIncrementTick+0x148>)
 8013d70:	681b      	ldr	r3, [r3, #0]
 8013d72:	2b00      	cmp	r3, #0
 8013d74:	f040 8090 	bne.w	8013e98 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013d78:	4b4d      	ldr	r3, [pc, #308]	@ (8013eb0 <xTaskIncrementTick+0x14c>)
 8013d7a:	681b      	ldr	r3, [r3, #0]
 8013d7c:	3301      	adds	r3, #1
 8013d7e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8013d80:	4a4b      	ldr	r2, [pc, #300]	@ (8013eb0 <xTaskIncrementTick+0x14c>)
 8013d82:	693b      	ldr	r3, [r7, #16]
 8013d84:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8013d86:	693b      	ldr	r3, [r7, #16]
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	d121      	bne.n	8013dd0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8013d8c:	4b49      	ldr	r3, [pc, #292]	@ (8013eb4 <xTaskIncrementTick+0x150>)
 8013d8e:	681b      	ldr	r3, [r3, #0]
 8013d90:	681b      	ldr	r3, [r3, #0]
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	d00b      	beq.n	8013dae <xTaskIncrementTick+0x4a>
	__asm volatile
 8013d96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013d9a:	f383 8811 	msr	BASEPRI, r3
 8013d9e:	f3bf 8f6f 	isb	sy
 8013da2:	f3bf 8f4f 	dsb	sy
 8013da6:	603b      	str	r3, [r7, #0]
}
 8013da8:	bf00      	nop
 8013daa:	bf00      	nop
 8013dac:	e7fd      	b.n	8013daa <xTaskIncrementTick+0x46>
 8013dae:	4b41      	ldr	r3, [pc, #260]	@ (8013eb4 <xTaskIncrementTick+0x150>)
 8013db0:	681b      	ldr	r3, [r3, #0]
 8013db2:	60fb      	str	r3, [r7, #12]
 8013db4:	4b40      	ldr	r3, [pc, #256]	@ (8013eb8 <xTaskIncrementTick+0x154>)
 8013db6:	681b      	ldr	r3, [r3, #0]
 8013db8:	4a3e      	ldr	r2, [pc, #248]	@ (8013eb4 <xTaskIncrementTick+0x150>)
 8013dba:	6013      	str	r3, [r2, #0]
 8013dbc:	4a3e      	ldr	r2, [pc, #248]	@ (8013eb8 <xTaskIncrementTick+0x154>)
 8013dbe:	68fb      	ldr	r3, [r7, #12]
 8013dc0:	6013      	str	r3, [r2, #0]
 8013dc2:	4b3e      	ldr	r3, [pc, #248]	@ (8013ebc <xTaskIncrementTick+0x158>)
 8013dc4:	681b      	ldr	r3, [r3, #0]
 8013dc6:	3301      	adds	r3, #1
 8013dc8:	4a3c      	ldr	r2, [pc, #240]	@ (8013ebc <xTaskIncrementTick+0x158>)
 8013dca:	6013      	str	r3, [r2, #0]
 8013dcc:	f000 fb84 	bl	80144d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8013dd0:	4b3b      	ldr	r3, [pc, #236]	@ (8013ec0 <xTaskIncrementTick+0x15c>)
 8013dd2:	681b      	ldr	r3, [r3, #0]
 8013dd4:	693a      	ldr	r2, [r7, #16]
 8013dd6:	429a      	cmp	r2, r3
 8013dd8:	d349      	bcc.n	8013e6e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013dda:	4b36      	ldr	r3, [pc, #216]	@ (8013eb4 <xTaskIncrementTick+0x150>)
 8013ddc:	681b      	ldr	r3, [r3, #0]
 8013dde:	681b      	ldr	r3, [r3, #0]
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	d104      	bne.n	8013dee <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013de4:	4b36      	ldr	r3, [pc, #216]	@ (8013ec0 <xTaskIncrementTick+0x15c>)
 8013de6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8013dea:	601a      	str	r2, [r3, #0]
					break;
 8013dec:	e03f      	b.n	8013e6e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013dee:	4b31      	ldr	r3, [pc, #196]	@ (8013eb4 <xTaskIncrementTick+0x150>)
 8013df0:	681b      	ldr	r3, [r3, #0]
 8013df2:	68db      	ldr	r3, [r3, #12]
 8013df4:	68db      	ldr	r3, [r3, #12]
 8013df6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8013df8:	68bb      	ldr	r3, [r7, #8]
 8013dfa:	685b      	ldr	r3, [r3, #4]
 8013dfc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8013dfe:	693a      	ldr	r2, [r7, #16]
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	429a      	cmp	r2, r3
 8013e04:	d203      	bcs.n	8013e0e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8013e06:	4a2e      	ldr	r2, [pc, #184]	@ (8013ec0 <xTaskIncrementTick+0x15c>)
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8013e0c:	e02f      	b.n	8013e6e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013e0e:	68bb      	ldr	r3, [r7, #8]
 8013e10:	3304      	adds	r3, #4
 8013e12:	4618      	mov	r0, r3
 8013e14:	f7fe fc1e 	bl	8012654 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013e18:	68bb      	ldr	r3, [r7, #8]
 8013e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	d004      	beq.n	8013e2a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013e20:	68bb      	ldr	r3, [r7, #8]
 8013e22:	3318      	adds	r3, #24
 8013e24:	4618      	mov	r0, r3
 8013e26:	f7fe fc15 	bl	8012654 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8013e2a:	68bb      	ldr	r3, [r7, #8]
 8013e2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013e2e:	4b25      	ldr	r3, [pc, #148]	@ (8013ec4 <xTaskIncrementTick+0x160>)
 8013e30:	681b      	ldr	r3, [r3, #0]
 8013e32:	429a      	cmp	r2, r3
 8013e34:	d903      	bls.n	8013e3e <xTaskIncrementTick+0xda>
 8013e36:	68bb      	ldr	r3, [r7, #8]
 8013e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013e3a:	4a22      	ldr	r2, [pc, #136]	@ (8013ec4 <xTaskIncrementTick+0x160>)
 8013e3c:	6013      	str	r3, [r2, #0]
 8013e3e:	68bb      	ldr	r3, [r7, #8]
 8013e40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013e42:	4613      	mov	r3, r2
 8013e44:	009b      	lsls	r3, r3, #2
 8013e46:	4413      	add	r3, r2
 8013e48:	009b      	lsls	r3, r3, #2
 8013e4a:	4a1f      	ldr	r2, [pc, #124]	@ (8013ec8 <xTaskIncrementTick+0x164>)
 8013e4c:	441a      	add	r2, r3
 8013e4e:	68bb      	ldr	r3, [r7, #8]
 8013e50:	3304      	adds	r3, #4
 8013e52:	4619      	mov	r1, r3
 8013e54:	4610      	mov	r0, r2
 8013e56:	f7fe fba0 	bl	801259a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013e5a:	68bb      	ldr	r3, [r7, #8]
 8013e5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013e5e:	4b1b      	ldr	r3, [pc, #108]	@ (8013ecc <xTaskIncrementTick+0x168>)
 8013e60:	681b      	ldr	r3, [r3, #0]
 8013e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013e64:	429a      	cmp	r2, r3
 8013e66:	d3b8      	bcc.n	8013dda <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8013e68:	2301      	movs	r3, #1
 8013e6a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013e6c:	e7b5      	b.n	8013dda <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8013e6e:	4b17      	ldr	r3, [pc, #92]	@ (8013ecc <xTaskIncrementTick+0x168>)
 8013e70:	681b      	ldr	r3, [r3, #0]
 8013e72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013e74:	4914      	ldr	r1, [pc, #80]	@ (8013ec8 <xTaskIncrementTick+0x164>)
 8013e76:	4613      	mov	r3, r2
 8013e78:	009b      	lsls	r3, r3, #2
 8013e7a:	4413      	add	r3, r2
 8013e7c:	009b      	lsls	r3, r3, #2
 8013e7e:	440b      	add	r3, r1
 8013e80:	681b      	ldr	r3, [r3, #0]
 8013e82:	2b01      	cmp	r3, #1
 8013e84:	d901      	bls.n	8013e8a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8013e86:	2301      	movs	r3, #1
 8013e88:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8013e8a:	4b11      	ldr	r3, [pc, #68]	@ (8013ed0 <xTaskIncrementTick+0x16c>)
 8013e8c:	681b      	ldr	r3, [r3, #0]
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	d007      	beq.n	8013ea2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8013e92:	2301      	movs	r3, #1
 8013e94:	617b      	str	r3, [r7, #20]
 8013e96:	e004      	b.n	8013ea2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8013e98:	4b0e      	ldr	r3, [pc, #56]	@ (8013ed4 <xTaskIncrementTick+0x170>)
 8013e9a:	681b      	ldr	r3, [r3, #0]
 8013e9c:	3301      	adds	r3, #1
 8013e9e:	4a0d      	ldr	r2, [pc, #52]	@ (8013ed4 <xTaskIncrementTick+0x170>)
 8013ea0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8013ea2:	697b      	ldr	r3, [r7, #20]
}
 8013ea4:	4618      	mov	r0, r3
 8013ea6:	3718      	adds	r7, #24
 8013ea8:	46bd      	mov	sp, r7
 8013eaa:	bd80      	pop	{r7, pc}
 8013eac:	24001608 	.word	0x24001608
 8013eb0:	240015e4 	.word	0x240015e4
 8013eb4:	24001598 	.word	0x24001598
 8013eb8:	2400159c 	.word	0x2400159c
 8013ebc:	240015f8 	.word	0x240015f8
 8013ec0:	24001600 	.word	0x24001600
 8013ec4:	240015e8 	.word	0x240015e8
 8013ec8:	24001110 	.word	0x24001110
 8013ecc:	2400110c 	.word	0x2400110c
 8013ed0:	240015f4 	.word	0x240015f4
 8013ed4:	240015f0 	.word	0x240015f0

08013ed8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8013ed8:	b480      	push	{r7}
 8013eda:	b085      	sub	sp, #20
 8013edc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8013ede:	4b2b      	ldr	r3, [pc, #172]	@ (8013f8c <vTaskSwitchContext+0xb4>)
 8013ee0:	681b      	ldr	r3, [r3, #0]
 8013ee2:	2b00      	cmp	r3, #0
 8013ee4:	d003      	beq.n	8013eee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8013ee6:	4b2a      	ldr	r3, [pc, #168]	@ (8013f90 <vTaskSwitchContext+0xb8>)
 8013ee8:	2201      	movs	r2, #1
 8013eea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8013eec:	e047      	b.n	8013f7e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8013eee:	4b28      	ldr	r3, [pc, #160]	@ (8013f90 <vTaskSwitchContext+0xb8>)
 8013ef0:	2200      	movs	r2, #0
 8013ef2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013ef4:	4b27      	ldr	r3, [pc, #156]	@ (8013f94 <vTaskSwitchContext+0xbc>)
 8013ef6:	681b      	ldr	r3, [r3, #0]
 8013ef8:	60fb      	str	r3, [r7, #12]
 8013efa:	e011      	b.n	8013f20 <vTaskSwitchContext+0x48>
 8013efc:	68fb      	ldr	r3, [r7, #12]
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	d10b      	bne.n	8013f1a <vTaskSwitchContext+0x42>
	__asm volatile
 8013f02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013f06:	f383 8811 	msr	BASEPRI, r3
 8013f0a:	f3bf 8f6f 	isb	sy
 8013f0e:	f3bf 8f4f 	dsb	sy
 8013f12:	607b      	str	r3, [r7, #4]
}
 8013f14:	bf00      	nop
 8013f16:	bf00      	nop
 8013f18:	e7fd      	b.n	8013f16 <vTaskSwitchContext+0x3e>
 8013f1a:	68fb      	ldr	r3, [r7, #12]
 8013f1c:	3b01      	subs	r3, #1
 8013f1e:	60fb      	str	r3, [r7, #12]
 8013f20:	491d      	ldr	r1, [pc, #116]	@ (8013f98 <vTaskSwitchContext+0xc0>)
 8013f22:	68fa      	ldr	r2, [r7, #12]
 8013f24:	4613      	mov	r3, r2
 8013f26:	009b      	lsls	r3, r3, #2
 8013f28:	4413      	add	r3, r2
 8013f2a:	009b      	lsls	r3, r3, #2
 8013f2c:	440b      	add	r3, r1
 8013f2e:	681b      	ldr	r3, [r3, #0]
 8013f30:	2b00      	cmp	r3, #0
 8013f32:	d0e3      	beq.n	8013efc <vTaskSwitchContext+0x24>
 8013f34:	68fa      	ldr	r2, [r7, #12]
 8013f36:	4613      	mov	r3, r2
 8013f38:	009b      	lsls	r3, r3, #2
 8013f3a:	4413      	add	r3, r2
 8013f3c:	009b      	lsls	r3, r3, #2
 8013f3e:	4a16      	ldr	r2, [pc, #88]	@ (8013f98 <vTaskSwitchContext+0xc0>)
 8013f40:	4413      	add	r3, r2
 8013f42:	60bb      	str	r3, [r7, #8]
 8013f44:	68bb      	ldr	r3, [r7, #8]
 8013f46:	685b      	ldr	r3, [r3, #4]
 8013f48:	685a      	ldr	r2, [r3, #4]
 8013f4a:	68bb      	ldr	r3, [r7, #8]
 8013f4c:	605a      	str	r2, [r3, #4]
 8013f4e:	68bb      	ldr	r3, [r7, #8]
 8013f50:	685a      	ldr	r2, [r3, #4]
 8013f52:	68bb      	ldr	r3, [r7, #8]
 8013f54:	3308      	adds	r3, #8
 8013f56:	429a      	cmp	r2, r3
 8013f58:	d104      	bne.n	8013f64 <vTaskSwitchContext+0x8c>
 8013f5a:	68bb      	ldr	r3, [r7, #8]
 8013f5c:	685b      	ldr	r3, [r3, #4]
 8013f5e:	685a      	ldr	r2, [r3, #4]
 8013f60:	68bb      	ldr	r3, [r7, #8]
 8013f62:	605a      	str	r2, [r3, #4]
 8013f64:	68bb      	ldr	r3, [r7, #8]
 8013f66:	685b      	ldr	r3, [r3, #4]
 8013f68:	68db      	ldr	r3, [r3, #12]
 8013f6a:	4a0c      	ldr	r2, [pc, #48]	@ (8013f9c <vTaskSwitchContext+0xc4>)
 8013f6c:	6013      	str	r3, [r2, #0]
 8013f6e:	4a09      	ldr	r2, [pc, #36]	@ (8013f94 <vTaskSwitchContext+0xbc>)
 8013f70:	68fb      	ldr	r3, [r7, #12]
 8013f72:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8013f74:	4b09      	ldr	r3, [pc, #36]	@ (8013f9c <vTaskSwitchContext+0xc4>)
 8013f76:	681b      	ldr	r3, [r3, #0]
 8013f78:	3354      	adds	r3, #84	@ 0x54
 8013f7a:	4a09      	ldr	r2, [pc, #36]	@ (8013fa0 <vTaskSwitchContext+0xc8>)
 8013f7c:	6013      	str	r3, [r2, #0]
}
 8013f7e:	bf00      	nop
 8013f80:	3714      	adds	r7, #20
 8013f82:	46bd      	mov	sp, r7
 8013f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f88:	4770      	bx	lr
 8013f8a:	bf00      	nop
 8013f8c:	24001608 	.word	0x24001608
 8013f90:	240015f4 	.word	0x240015f4
 8013f94:	240015e8 	.word	0x240015e8
 8013f98:	24001110 	.word	0x24001110
 8013f9c:	2400110c 	.word	0x2400110c
 8013fa0:	24000020 	.word	0x24000020

08013fa4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8013fa4:	b580      	push	{r7, lr}
 8013fa6:	b084      	sub	sp, #16
 8013fa8:	af00      	add	r7, sp, #0
 8013faa:	6078      	str	r0, [r7, #4]
 8013fac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	d10b      	bne.n	8013fcc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8013fb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013fb8:	f383 8811 	msr	BASEPRI, r3
 8013fbc:	f3bf 8f6f 	isb	sy
 8013fc0:	f3bf 8f4f 	dsb	sy
 8013fc4:	60fb      	str	r3, [r7, #12]
}
 8013fc6:	bf00      	nop
 8013fc8:	bf00      	nop
 8013fca:	e7fd      	b.n	8013fc8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013fcc:	4b07      	ldr	r3, [pc, #28]	@ (8013fec <vTaskPlaceOnEventList+0x48>)
 8013fce:	681b      	ldr	r3, [r3, #0]
 8013fd0:	3318      	adds	r3, #24
 8013fd2:	4619      	mov	r1, r3
 8013fd4:	6878      	ldr	r0, [r7, #4]
 8013fd6:	f7fe fb04 	bl	80125e2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013fda:	2101      	movs	r1, #1
 8013fdc:	6838      	ldr	r0, [r7, #0]
 8013fde:	f000 fe45 	bl	8014c6c <prvAddCurrentTaskToDelayedList>
}
 8013fe2:	bf00      	nop
 8013fe4:	3710      	adds	r7, #16
 8013fe6:	46bd      	mov	sp, r7
 8013fe8:	bd80      	pop	{r7, pc}
 8013fea:	bf00      	nop
 8013fec:	2400110c 	.word	0x2400110c

08013ff0 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8013ff0:	b580      	push	{r7, lr}
 8013ff2:	b086      	sub	sp, #24
 8013ff4:	af00      	add	r7, sp, #0
 8013ff6:	60f8      	str	r0, [r7, #12]
 8013ff8:	60b9      	str	r1, [r7, #8]
 8013ffa:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8013ffc:	68fb      	ldr	r3, [r7, #12]
 8013ffe:	2b00      	cmp	r3, #0
 8014000:	d10b      	bne.n	801401a <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 8014002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014006:	f383 8811 	msr	BASEPRI, r3
 801400a:	f3bf 8f6f 	isb	sy
 801400e:	f3bf 8f4f 	dsb	sy
 8014012:	617b      	str	r3, [r7, #20]
}
 8014014:	bf00      	nop
 8014016:	bf00      	nop
 8014018:	e7fd      	b.n	8014016 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 801401a:	4b12      	ldr	r3, [pc, #72]	@ (8014064 <vTaskPlaceOnUnorderedEventList+0x74>)
 801401c:	681b      	ldr	r3, [r3, #0]
 801401e:	2b00      	cmp	r3, #0
 8014020:	d10b      	bne.n	801403a <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 8014022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014026:	f383 8811 	msr	BASEPRI, r3
 801402a:	f3bf 8f6f 	isb	sy
 801402e:	f3bf 8f4f 	dsb	sy
 8014032:	613b      	str	r3, [r7, #16]
}
 8014034:	bf00      	nop
 8014036:	bf00      	nop
 8014038:	e7fd      	b.n	8014036 <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 801403a:	4b0b      	ldr	r3, [pc, #44]	@ (8014068 <vTaskPlaceOnUnorderedEventList+0x78>)
 801403c:	681b      	ldr	r3, [r3, #0]
 801403e:	68ba      	ldr	r2, [r7, #8]
 8014040:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8014044:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014046:	4b08      	ldr	r3, [pc, #32]	@ (8014068 <vTaskPlaceOnUnorderedEventList+0x78>)
 8014048:	681b      	ldr	r3, [r3, #0]
 801404a:	3318      	adds	r3, #24
 801404c:	4619      	mov	r1, r3
 801404e:	68f8      	ldr	r0, [r7, #12]
 8014050:	f7fe faa3 	bl	801259a <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014054:	2101      	movs	r1, #1
 8014056:	6878      	ldr	r0, [r7, #4]
 8014058:	f000 fe08 	bl	8014c6c <prvAddCurrentTaskToDelayedList>
}
 801405c:	bf00      	nop
 801405e:	3718      	adds	r7, #24
 8014060:	46bd      	mov	sp, r7
 8014062:	bd80      	pop	{r7, pc}
 8014064:	24001608 	.word	0x24001608
 8014068:	2400110c 	.word	0x2400110c

0801406c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801406c:	b580      	push	{r7, lr}
 801406e:	b086      	sub	sp, #24
 8014070:	af00      	add	r7, sp, #0
 8014072:	60f8      	str	r0, [r7, #12]
 8014074:	60b9      	str	r1, [r7, #8]
 8014076:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8014078:	68fb      	ldr	r3, [r7, #12]
 801407a:	2b00      	cmp	r3, #0
 801407c:	d10b      	bne.n	8014096 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 801407e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014082:	f383 8811 	msr	BASEPRI, r3
 8014086:	f3bf 8f6f 	isb	sy
 801408a:	f3bf 8f4f 	dsb	sy
 801408e:	617b      	str	r3, [r7, #20]
}
 8014090:	bf00      	nop
 8014092:	bf00      	nop
 8014094:	e7fd      	b.n	8014092 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014096:	4b0a      	ldr	r3, [pc, #40]	@ (80140c0 <vTaskPlaceOnEventListRestricted+0x54>)
 8014098:	681b      	ldr	r3, [r3, #0]
 801409a:	3318      	adds	r3, #24
 801409c:	4619      	mov	r1, r3
 801409e:	68f8      	ldr	r0, [r7, #12]
 80140a0:	f7fe fa7b 	bl	801259a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	d002      	beq.n	80140b0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80140aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80140ae:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80140b0:	6879      	ldr	r1, [r7, #4]
 80140b2:	68b8      	ldr	r0, [r7, #8]
 80140b4:	f000 fdda 	bl	8014c6c <prvAddCurrentTaskToDelayedList>
	}
 80140b8:	bf00      	nop
 80140ba:	3718      	adds	r7, #24
 80140bc:	46bd      	mov	sp, r7
 80140be:	bd80      	pop	{r7, pc}
 80140c0:	2400110c 	.word	0x2400110c

080140c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80140c4:	b580      	push	{r7, lr}
 80140c6:	b086      	sub	sp, #24
 80140c8:	af00      	add	r7, sp, #0
 80140ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	68db      	ldr	r3, [r3, #12]
 80140d0:	68db      	ldr	r3, [r3, #12]
 80140d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80140d4:	693b      	ldr	r3, [r7, #16]
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	d10b      	bne.n	80140f2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80140da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80140de:	f383 8811 	msr	BASEPRI, r3
 80140e2:	f3bf 8f6f 	isb	sy
 80140e6:	f3bf 8f4f 	dsb	sy
 80140ea:	60fb      	str	r3, [r7, #12]
}
 80140ec:	bf00      	nop
 80140ee:	bf00      	nop
 80140f0:	e7fd      	b.n	80140ee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80140f2:	693b      	ldr	r3, [r7, #16]
 80140f4:	3318      	adds	r3, #24
 80140f6:	4618      	mov	r0, r3
 80140f8:	f7fe faac 	bl	8012654 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80140fc:	4b1d      	ldr	r3, [pc, #116]	@ (8014174 <xTaskRemoveFromEventList+0xb0>)
 80140fe:	681b      	ldr	r3, [r3, #0]
 8014100:	2b00      	cmp	r3, #0
 8014102:	d11d      	bne.n	8014140 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014104:	693b      	ldr	r3, [r7, #16]
 8014106:	3304      	adds	r3, #4
 8014108:	4618      	mov	r0, r3
 801410a:	f7fe faa3 	bl	8012654 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801410e:	693b      	ldr	r3, [r7, #16]
 8014110:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014112:	4b19      	ldr	r3, [pc, #100]	@ (8014178 <xTaskRemoveFromEventList+0xb4>)
 8014114:	681b      	ldr	r3, [r3, #0]
 8014116:	429a      	cmp	r2, r3
 8014118:	d903      	bls.n	8014122 <xTaskRemoveFromEventList+0x5e>
 801411a:	693b      	ldr	r3, [r7, #16]
 801411c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801411e:	4a16      	ldr	r2, [pc, #88]	@ (8014178 <xTaskRemoveFromEventList+0xb4>)
 8014120:	6013      	str	r3, [r2, #0]
 8014122:	693b      	ldr	r3, [r7, #16]
 8014124:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014126:	4613      	mov	r3, r2
 8014128:	009b      	lsls	r3, r3, #2
 801412a:	4413      	add	r3, r2
 801412c:	009b      	lsls	r3, r3, #2
 801412e:	4a13      	ldr	r2, [pc, #76]	@ (801417c <xTaskRemoveFromEventList+0xb8>)
 8014130:	441a      	add	r2, r3
 8014132:	693b      	ldr	r3, [r7, #16]
 8014134:	3304      	adds	r3, #4
 8014136:	4619      	mov	r1, r3
 8014138:	4610      	mov	r0, r2
 801413a:	f7fe fa2e 	bl	801259a <vListInsertEnd>
 801413e:	e005      	b.n	801414c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8014140:	693b      	ldr	r3, [r7, #16]
 8014142:	3318      	adds	r3, #24
 8014144:	4619      	mov	r1, r3
 8014146:	480e      	ldr	r0, [pc, #56]	@ (8014180 <xTaskRemoveFromEventList+0xbc>)
 8014148:	f7fe fa27 	bl	801259a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801414c:	693b      	ldr	r3, [r7, #16]
 801414e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014150:	4b0c      	ldr	r3, [pc, #48]	@ (8014184 <xTaskRemoveFromEventList+0xc0>)
 8014152:	681b      	ldr	r3, [r3, #0]
 8014154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014156:	429a      	cmp	r2, r3
 8014158:	d905      	bls.n	8014166 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801415a:	2301      	movs	r3, #1
 801415c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801415e:	4b0a      	ldr	r3, [pc, #40]	@ (8014188 <xTaskRemoveFromEventList+0xc4>)
 8014160:	2201      	movs	r2, #1
 8014162:	601a      	str	r2, [r3, #0]
 8014164:	e001      	b.n	801416a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8014166:	2300      	movs	r3, #0
 8014168:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801416a:	697b      	ldr	r3, [r7, #20]
}
 801416c:	4618      	mov	r0, r3
 801416e:	3718      	adds	r7, #24
 8014170:	46bd      	mov	sp, r7
 8014172:	bd80      	pop	{r7, pc}
 8014174:	24001608 	.word	0x24001608
 8014178:	240015e8 	.word	0x240015e8
 801417c:	24001110 	.word	0x24001110
 8014180:	240015a0 	.word	0x240015a0
 8014184:	2400110c 	.word	0x2400110c
 8014188:	240015f4 	.word	0x240015f4

0801418c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 801418c:	b580      	push	{r7, lr}
 801418e:	b086      	sub	sp, #24
 8014190:	af00      	add	r7, sp, #0
 8014192:	6078      	str	r0, [r7, #4]
 8014194:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8014196:	4b2a      	ldr	r3, [pc, #168]	@ (8014240 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8014198:	681b      	ldr	r3, [r3, #0]
 801419a:	2b00      	cmp	r3, #0
 801419c:	d10b      	bne.n	80141b6 <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 801419e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80141a2:	f383 8811 	msr	BASEPRI, r3
 80141a6:	f3bf 8f6f 	isb	sy
 80141aa:	f3bf 8f4f 	dsb	sy
 80141ae:	613b      	str	r3, [r7, #16]
}
 80141b0:	bf00      	nop
 80141b2:	bf00      	nop
 80141b4:	e7fd      	b.n	80141b2 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80141b6:	683b      	ldr	r3, [r7, #0]
 80141b8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	68db      	ldr	r3, [r3, #12]
 80141c4:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 80141c6:	697b      	ldr	r3, [r7, #20]
 80141c8:	2b00      	cmp	r3, #0
 80141ca:	d10b      	bne.n	80141e4 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 80141cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80141d0:	f383 8811 	msr	BASEPRI, r3
 80141d4:	f3bf 8f6f 	isb	sy
 80141d8:	f3bf 8f4f 	dsb	sy
 80141dc:	60fb      	str	r3, [r7, #12]
}
 80141de:	bf00      	nop
 80141e0:	bf00      	nop
 80141e2:	e7fd      	b.n	80141e0 <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 80141e4:	6878      	ldr	r0, [r7, #4]
 80141e6:	f7fe fa35 	bl	8012654 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80141ea:	697b      	ldr	r3, [r7, #20]
 80141ec:	3304      	adds	r3, #4
 80141ee:	4618      	mov	r0, r3
 80141f0:	f7fe fa30 	bl	8012654 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80141f4:	697b      	ldr	r3, [r7, #20]
 80141f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80141f8:	4b12      	ldr	r3, [pc, #72]	@ (8014244 <vTaskRemoveFromUnorderedEventList+0xb8>)
 80141fa:	681b      	ldr	r3, [r3, #0]
 80141fc:	429a      	cmp	r2, r3
 80141fe:	d903      	bls.n	8014208 <vTaskRemoveFromUnorderedEventList+0x7c>
 8014200:	697b      	ldr	r3, [r7, #20]
 8014202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014204:	4a0f      	ldr	r2, [pc, #60]	@ (8014244 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8014206:	6013      	str	r3, [r2, #0]
 8014208:	697b      	ldr	r3, [r7, #20]
 801420a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801420c:	4613      	mov	r3, r2
 801420e:	009b      	lsls	r3, r3, #2
 8014210:	4413      	add	r3, r2
 8014212:	009b      	lsls	r3, r3, #2
 8014214:	4a0c      	ldr	r2, [pc, #48]	@ (8014248 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8014216:	441a      	add	r2, r3
 8014218:	697b      	ldr	r3, [r7, #20]
 801421a:	3304      	adds	r3, #4
 801421c:	4619      	mov	r1, r3
 801421e:	4610      	mov	r0, r2
 8014220:	f7fe f9bb 	bl	801259a <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014224:	697b      	ldr	r3, [r7, #20]
 8014226:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014228:	4b08      	ldr	r3, [pc, #32]	@ (801424c <vTaskRemoveFromUnorderedEventList+0xc0>)
 801422a:	681b      	ldr	r3, [r3, #0]
 801422c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801422e:	429a      	cmp	r2, r3
 8014230:	d902      	bls.n	8014238 <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8014232:	4b07      	ldr	r3, [pc, #28]	@ (8014250 <vTaskRemoveFromUnorderedEventList+0xc4>)
 8014234:	2201      	movs	r2, #1
 8014236:	601a      	str	r2, [r3, #0]
	}
}
 8014238:	bf00      	nop
 801423a:	3718      	adds	r7, #24
 801423c:	46bd      	mov	sp, r7
 801423e:	bd80      	pop	{r7, pc}
 8014240:	24001608 	.word	0x24001608
 8014244:	240015e8 	.word	0x240015e8
 8014248:	24001110 	.word	0x24001110
 801424c:	2400110c 	.word	0x2400110c
 8014250:	240015f4 	.word	0x240015f4

08014254 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8014254:	b480      	push	{r7}
 8014256:	b083      	sub	sp, #12
 8014258:	af00      	add	r7, sp, #0
 801425a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801425c:	4b06      	ldr	r3, [pc, #24]	@ (8014278 <vTaskInternalSetTimeOutState+0x24>)
 801425e:	681a      	ldr	r2, [r3, #0]
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8014264:	4b05      	ldr	r3, [pc, #20]	@ (801427c <vTaskInternalSetTimeOutState+0x28>)
 8014266:	681a      	ldr	r2, [r3, #0]
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	605a      	str	r2, [r3, #4]
}
 801426c:	bf00      	nop
 801426e:	370c      	adds	r7, #12
 8014270:	46bd      	mov	sp, r7
 8014272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014276:	4770      	bx	lr
 8014278:	240015f8 	.word	0x240015f8
 801427c:	240015e4 	.word	0x240015e4

08014280 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8014280:	b580      	push	{r7, lr}
 8014282:	b088      	sub	sp, #32
 8014284:	af00      	add	r7, sp, #0
 8014286:	6078      	str	r0, [r7, #4]
 8014288:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	2b00      	cmp	r3, #0
 801428e:	d10b      	bne.n	80142a8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8014290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014294:	f383 8811 	msr	BASEPRI, r3
 8014298:	f3bf 8f6f 	isb	sy
 801429c:	f3bf 8f4f 	dsb	sy
 80142a0:	613b      	str	r3, [r7, #16]
}
 80142a2:	bf00      	nop
 80142a4:	bf00      	nop
 80142a6:	e7fd      	b.n	80142a4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80142a8:	683b      	ldr	r3, [r7, #0]
 80142aa:	2b00      	cmp	r3, #0
 80142ac:	d10b      	bne.n	80142c6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80142ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80142b2:	f383 8811 	msr	BASEPRI, r3
 80142b6:	f3bf 8f6f 	isb	sy
 80142ba:	f3bf 8f4f 	dsb	sy
 80142be:	60fb      	str	r3, [r7, #12]
}
 80142c0:	bf00      	nop
 80142c2:	bf00      	nop
 80142c4:	e7fd      	b.n	80142c2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80142c6:	f001 fa2f 	bl	8015728 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80142ca:	4b1d      	ldr	r3, [pc, #116]	@ (8014340 <xTaskCheckForTimeOut+0xc0>)
 80142cc:	681b      	ldr	r3, [r3, #0]
 80142ce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	685b      	ldr	r3, [r3, #4]
 80142d4:	69ba      	ldr	r2, [r7, #24]
 80142d6:	1ad3      	subs	r3, r2, r3
 80142d8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80142da:	683b      	ldr	r3, [r7, #0]
 80142dc:	681b      	ldr	r3, [r3, #0]
 80142de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80142e2:	d102      	bne.n	80142ea <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80142e4:	2300      	movs	r3, #0
 80142e6:	61fb      	str	r3, [r7, #28]
 80142e8:	e023      	b.n	8014332 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	681a      	ldr	r2, [r3, #0]
 80142ee:	4b15      	ldr	r3, [pc, #84]	@ (8014344 <xTaskCheckForTimeOut+0xc4>)
 80142f0:	681b      	ldr	r3, [r3, #0]
 80142f2:	429a      	cmp	r2, r3
 80142f4:	d007      	beq.n	8014306 <xTaskCheckForTimeOut+0x86>
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	685b      	ldr	r3, [r3, #4]
 80142fa:	69ba      	ldr	r2, [r7, #24]
 80142fc:	429a      	cmp	r2, r3
 80142fe:	d302      	bcc.n	8014306 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8014300:	2301      	movs	r3, #1
 8014302:	61fb      	str	r3, [r7, #28]
 8014304:	e015      	b.n	8014332 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8014306:	683b      	ldr	r3, [r7, #0]
 8014308:	681b      	ldr	r3, [r3, #0]
 801430a:	697a      	ldr	r2, [r7, #20]
 801430c:	429a      	cmp	r2, r3
 801430e:	d20b      	bcs.n	8014328 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8014310:	683b      	ldr	r3, [r7, #0]
 8014312:	681a      	ldr	r2, [r3, #0]
 8014314:	697b      	ldr	r3, [r7, #20]
 8014316:	1ad2      	subs	r2, r2, r3
 8014318:	683b      	ldr	r3, [r7, #0]
 801431a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801431c:	6878      	ldr	r0, [r7, #4]
 801431e:	f7ff ff99 	bl	8014254 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8014322:	2300      	movs	r3, #0
 8014324:	61fb      	str	r3, [r7, #28]
 8014326:	e004      	b.n	8014332 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8014328:	683b      	ldr	r3, [r7, #0]
 801432a:	2200      	movs	r2, #0
 801432c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801432e:	2301      	movs	r3, #1
 8014330:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8014332:	f001 fa2b 	bl	801578c <vPortExitCritical>

	return xReturn;
 8014336:	69fb      	ldr	r3, [r7, #28]
}
 8014338:	4618      	mov	r0, r3
 801433a:	3720      	adds	r7, #32
 801433c:	46bd      	mov	sp, r7
 801433e:	bd80      	pop	{r7, pc}
 8014340:	240015e4 	.word	0x240015e4
 8014344:	240015f8 	.word	0x240015f8

08014348 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014348:	b480      	push	{r7}
 801434a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801434c:	4b03      	ldr	r3, [pc, #12]	@ (801435c <vTaskMissedYield+0x14>)
 801434e:	2201      	movs	r2, #1
 8014350:	601a      	str	r2, [r3, #0]
}
 8014352:	bf00      	nop
 8014354:	46bd      	mov	sp, r7
 8014356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801435a:	4770      	bx	lr
 801435c:	240015f4 	.word	0x240015f4

08014360 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8014360:	b580      	push	{r7, lr}
 8014362:	b082      	sub	sp, #8
 8014364:	af00      	add	r7, sp, #0
 8014366:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8014368:	f000 f852 	bl	8014410 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801436c:	4b06      	ldr	r3, [pc, #24]	@ (8014388 <prvIdleTask+0x28>)
 801436e:	681b      	ldr	r3, [r3, #0]
 8014370:	2b01      	cmp	r3, #1
 8014372:	d9f9      	bls.n	8014368 <prvIdleTask+0x8>
			{
				taskYIELD();
 8014374:	4b05      	ldr	r3, [pc, #20]	@ (801438c <prvIdleTask+0x2c>)
 8014376:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801437a:	601a      	str	r2, [r3, #0]
 801437c:	f3bf 8f4f 	dsb	sy
 8014380:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8014384:	e7f0      	b.n	8014368 <prvIdleTask+0x8>
 8014386:	bf00      	nop
 8014388:	24001110 	.word	0x24001110
 801438c:	e000ed04 	.word	0xe000ed04

08014390 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014390:	b580      	push	{r7, lr}
 8014392:	b082      	sub	sp, #8
 8014394:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014396:	2300      	movs	r3, #0
 8014398:	607b      	str	r3, [r7, #4]
 801439a:	e00c      	b.n	80143b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801439c:	687a      	ldr	r2, [r7, #4]
 801439e:	4613      	mov	r3, r2
 80143a0:	009b      	lsls	r3, r3, #2
 80143a2:	4413      	add	r3, r2
 80143a4:	009b      	lsls	r3, r3, #2
 80143a6:	4a12      	ldr	r2, [pc, #72]	@ (80143f0 <prvInitialiseTaskLists+0x60>)
 80143a8:	4413      	add	r3, r2
 80143aa:	4618      	mov	r0, r3
 80143ac:	f7fe f8c8 	bl	8012540 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	3301      	adds	r3, #1
 80143b4:	607b      	str	r3, [r7, #4]
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	2b37      	cmp	r3, #55	@ 0x37
 80143ba:	d9ef      	bls.n	801439c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80143bc:	480d      	ldr	r0, [pc, #52]	@ (80143f4 <prvInitialiseTaskLists+0x64>)
 80143be:	f7fe f8bf 	bl	8012540 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80143c2:	480d      	ldr	r0, [pc, #52]	@ (80143f8 <prvInitialiseTaskLists+0x68>)
 80143c4:	f7fe f8bc 	bl	8012540 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80143c8:	480c      	ldr	r0, [pc, #48]	@ (80143fc <prvInitialiseTaskLists+0x6c>)
 80143ca:	f7fe f8b9 	bl	8012540 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80143ce:	480c      	ldr	r0, [pc, #48]	@ (8014400 <prvInitialiseTaskLists+0x70>)
 80143d0:	f7fe f8b6 	bl	8012540 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80143d4:	480b      	ldr	r0, [pc, #44]	@ (8014404 <prvInitialiseTaskLists+0x74>)
 80143d6:	f7fe f8b3 	bl	8012540 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80143da:	4b0b      	ldr	r3, [pc, #44]	@ (8014408 <prvInitialiseTaskLists+0x78>)
 80143dc:	4a05      	ldr	r2, [pc, #20]	@ (80143f4 <prvInitialiseTaskLists+0x64>)
 80143de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80143e0:	4b0a      	ldr	r3, [pc, #40]	@ (801440c <prvInitialiseTaskLists+0x7c>)
 80143e2:	4a05      	ldr	r2, [pc, #20]	@ (80143f8 <prvInitialiseTaskLists+0x68>)
 80143e4:	601a      	str	r2, [r3, #0]
}
 80143e6:	bf00      	nop
 80143e8:	3708      	adds	r7, #8
 80143ea:	46bd      	mov	sp, r7
 80143ec:	bd80      	pop	{r7, pc}
 80143ee:	bf00      	nop
 80143f0:	24001110 	.word	0x24001110
 80143f4:	24001570 	.word	0x24001570
 80143f8:	24001584 	.word	0x24001584
 80143fc:	240015a0 	.word	0x240015a0
 8014400:	240015b4 	.word	0x240015b4
 8014404:	240015cc 	.word	0x240015cc
 8014408:	24001598 	.word	0x24001598
 801440c:	2400159c 	.word	0x2400159c

08014410 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014410:	b580      	push	{r7, lr}
 8014412:	b082      	sub	sp, #8
 8014414:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014416:	e019      	b.n	801444c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014418:	f001 f986 	bl	8015728 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801441c:	4b10      	ldr	r3, [pc, #64]	@ (8014460 <prvCheckTasksWaitingTermination+0x50>)
 801441e:	68db      	ldr	r3, [r3, #12]
 8014420:	68db      	ldr	r3, [r3, #12]
 8014422:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014424:	687b      	ldr	r3, [r7, #4]
 8014426:	3304      	adds	r3, #4
 8014428:	4618      	mov	r0, r3
 801442a:	f7fe f913 	bl	8012654 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801442e:	4b0d      	ldr	r3, [pc, #52]	@ (8014464 <prvCheckTasksWaitingTermination+0x54>)
 8014430:	681b      	ldr	r3, [r3, #0]
 8014432:	3b01      	subs	r3, #1
 8014434:	4a0b      	ldr	r2, [pc, #44]	@ (8014464 <prvCheckTasksWaitingTermination+0x54>)
 8014436:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014438:	4b0b      	ldr	r3, [pc, #44]	@ (8014468 <prvCheckTasksWaitingTermination+0x58>)
 801443a:	681b      	ldr	r3, [r3, #0]
 801443c:	3b01      	subs	r3, #1
 801443e:	4a0a      	ldr	r2, [pc, #40]	@ (8014468 <prvCheckTasksWaitingTermination+0x58>)
 8014440:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8014442:	f001 f9a3 	bl	801578c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8014446:	6878      	ldr	r0, [r7, #4]
 8014448:	f000 f810 	bl	801446c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801444c:	4b06      	ldr	r3, [pc, #24]	@ (8014468 <prvCheckTasksWaitingTermination+0x58>)
 801444e:	681b      	ldr	r3, [r3, #0]
 8014450:	2b00      	cmp	r3, #0
 8014452:	d1e1      	bne.n	8014418 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014454:	bf00      	nop
 8014456:	bf00      	nop
 8014458:	3708      	adds	r7, #8
 801445a:	46bd      	mov	sp, r7
 801445c:	bd80      	pop	{r7, pc}
 801445e:	bf00      	nop
 8014460:	240015b4 	.word	0x240015b4
 8014464:	240015e0 	.word	0x240015e0
 8014468:	240015c8 	.word	0x240015c8

0801446c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801446c:	b580      	push	{r7, lr}
 801446e:	b084      	sub	sp, #16
 8014470:	af00      	add	r7, sp, #0
 8014472:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	3354      	adds	r3, #84	@ 0x54
 8014478:	4618      	mov	r0, r3
 801447a:	f002 f81f 	bl	80164bc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8014484:	2b00      	cmp	r3, #0
 8014486:	d108      	bne.n	801449a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801448c:	4618      	mov	r0, r3
 801448e:	f001 fb3b 	bl	8015b08 <vPortFree>
				vPortFree( pxTCB );
 8014492:	6878      	ldr	r0, [r7, #4]
 8014494:	f001 fb38 	bl	8015b08 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8014498:	e019      	b.n	80144ce <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80144a0:	2b01      	cmp	r3, #1
 80144a2:	d103      	bne.n	80144ac <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80144a4:	6878      	ldr	r0, [r7, #4]
 80144a6:	f001 fb2f 	bl	8015b08 <vPortFree>
	}
 80144aa:	e010      	b.n	80144ce <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80144b2:	2b02      	cmp	r3, #2
 80144b4:	d00b      	beq.n	80144ce <prvDeleteTCB+0x62>
	__asm volatile
 80144b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80144ba:	f383 8811 	msr	BASEPRI, r3
 80144be:	f3bf 8f6f 	isb	sy
 80144c2:	f3bf 8f4f 	dsb	sy
 80144c6:	60fb      	str	r3, [r7, #12]
}
 80144c8:	bf00      	nop
 80144ca:	bf00      	nop
 80144cc:	e7fd      	b.n	80144ca <prvDeleteTCB+0x5e>
	}
 80144ce:	bf00      	nop
 80144d0:	3710      	adds	r7, #16
 80144d2:	46bd      	mov	sp, r7
 80144d4:	bd80      	pop	{r7, pc}
	...

080144d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80144d8:	b480      	push	{r7}
 80144da:	b083      	sub	sp, #12
 80144dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80144de:	4b0c      	ldr	r3, [pc, #48]	@ (8014510 <prvResetNextTaskUnblockTime+0x38>)
 80144e0:	681b      	ldr	r3, [r3, #0]
 80144e2:	681b      	ldr	r3, [r3, #0]
 80144e4:	2b00      	cmp	r3, #0
 80144e6:	d104      	bne.n	80144f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80144e8:	4b0a      	ldr	r3, [pc, #40]	@ (8014514 <prvResetNextTaskUnblockTime+0x3c>)
 80144ea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80144ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80144f0:	e008      	b.n	8014504 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80144f2:	4b07      	ldr	r3, [pc, #28]	@ (8014510 <prvResetNextTaskUnblockTime+0x38>)
 80144f4:	681b      	ldr	r3, [r3, #0]
 80144f6:	68db      	ldr	r3, [r3, #12]
 80144f8:	68db      	ldr	r3, [r3, #12]
 80144fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	685b      	ldr	r3, [r3, #4]
 8014500:	4a04      	ldr	r2, [pc, #16]	@ (8014514 <prvResetNextTaskUnblockTime+0x3c>)
 8014502:	6013      	str	r3, [r2, #0]
}
 8014504:	bf00      	nop
 8014506:	370c      	adds	r7, #12
 8014508:	46bd      	mov	sp, r7
 801450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801450e:	4770      	bx	lr
 8014510:	24001598 	.word	0x24001598
 8014514:	24001600 	.word	0x24001600

08014518 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8014518:	b480      	push	{r7}
 801451a:	b083      	sub	sp, #12
 801451c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 801451e:	4b05      	ldr	r3, [pc, #20]	@ (8014534 <xTaskGetCurrentTaskHandle+0x1c>)
 8014520:	681b      	ldr	r3, [r3, #0]
 8014522:	607b      	str	r3, [r7, #4]

		return xReturn;
 8014524:	687b      	ldr	r3, [r7, #4]
	}
 8014526:	4618      	mov	r0, r3
 8014528:	370c      	adds	r7, #12
 801452a:	46bd      	mov	sp, r7
 801452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014530:	4770      	bx	lr
 8014532:	bf00      	nop
 8014534:	2400110c 	.word	0x2400110c

08014538 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8014538:	b480      	push	{r7}
 801453a:	b083      	sub	sp, #12
 801453c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801453e:	4b0b      	ldr	r3, [pc, #44]	@ (801456c <xTaskGetSchedulerState+0x34>)
 8014540:	681b      	ldr	r3, [r3, #0]
 8014542:	2b00      	cmp	r3, #0
 8014544:	d102      	bne.n	801454c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8014546:	2301      	movs	r3, #1
 8014548:	607b      	str	r3, [r7, #4]
 801454a:	e008      	b.n	801455e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801454c:	4b08      	ldr	r3, [pc, #32]	@ (8014570 <xTaskGetSchedulerState+0x38>)
 801454e:	681b      	ldr	r3, [r3, #0]
 8014550:	2b00      	cmp	r3, #0
 8014552:	d102      	bne.n	801455a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8014554:	2302      	movs	r3, #2
 8014556:	607b      	str	r3, [r7, #4]
 8014558:	e001      	b.n	801455e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801455a:	2300      	movs	r3, #0
 801455c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801455e:	687b      	ldr	r3, [r7, #4]
	}
 8014560:	4618      	mov	r0, r3
 8014562:	370c      	adds	r7, #12
 8014564:	46bd      	mov	sp, r7
 8014566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801456a:	4770      	bx	lr
 801456c:	240015ec 	.word	0x240015ec
 8014570:	24001608 	.word	0x24001608

08014574 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8014574:	b580      	push	{r7, lr}
 8014576:	b084      	sub	sp, #16
 8014578:	af00      	add	r7, sp, #0
 801457a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8014580:	2300      	movs	r3, #0
 8014582:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	2b00      	cmp	r3, #0
 8014588:	d051      	beq.n	801462e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801458a:	68bb      	ldr	r3, [r7, #8]
 801458c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801458e:	4b2a      	ldr	r3, [pc, #168]	@ (8014638 <xTaskPriorityInherit+0xc4>)
 8014590:	681b      	ldr	r3, [r3, #0]
 8014592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014594:	429a      	cmp	r2, r3
 8014596:	d241      	bcs.n	801461c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014598:	68bb      	ldr	r3, [r7, #8]
 801459a:	699b      	ldr	r3, [r3, #24]
 801459c:	2b00      	cmp	r3, #0
 801459e:	db06      	blt.n	80145ae <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80145a0:	4b25      	ldr	r3, [pc, #148]	@ (8014638 <xTaskPriorityInherit+0xc4>)
 80145a2:	681b      	ldr	r3, [r3, #0]
 80145a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80145a6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80145aa:	68bb      	ldr	r3, [r7, #8]
 80145ac:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80145ae:	68bb      	ldr	r3, [r7, #8]
 80145b0:	6959      	ldr	r1, [r3, #20]
 80145b2:	68bb      	ldr	r3, [r7, #8]
 80145b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80145b6:	4613      	mov	r3, r2
 80145b8:	009b      	lsls	r3, r3, #2
 80145ba:	4413      	add	r3, r2
 80145bc:	009b      	lsls	r3, r3, #2
 80145be:	4a1f      	ldr	r2, [pc, #124]	@ (801463c <xTaskPriorityInherit+0xc8>)
 80145c0:	4413      	add	r3, r2
 80145c2:	4299      	cmp	r1, r3
 80145c4:	d122      	bne.n	801460c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80145c6:	68bb      	ldr	r3, [r7, #8]
 80145c8:	3304      	adds	r3, #4
 80145ca:	4618      	mov	r0, r3
 80145cc:	f7fe f842 	bl	8012654 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80145d0:	4b19      	ldr	r3, [pc, #100]	@ (8014638 <xTaskPriorityInherit+0xc4>)
 80145d2:	681b      	ldr	r3, [r3, #0]
 80145d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80145d6:	68bb      	ldr	r3, [r7, #8]
 80145d8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80145da:	68bb      	ldr	r3, [r7, #8]
 80145dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80145de:	4b18      	ldr	r3, [pc, #96]	@ (8014640 <xTaskPriorityInherit+0xcc>)
 80145e0:	681b      	ldr	r3, [r3, #0]
 80145e2:	429a      	cmp	r2, r3
 80145e4:	d903      	bls.n	80145ee <xTaskPriorityInherit+0x7a>
 80145e6:	68bb      	ldr	r3, [r7, #8]
 80145e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80145ea:	4a15      	ldr	r2, [pc, #84]	@ (8014640 <xTaskPriorityInherit+0xcc>)
 80145ec:	6013      	str	r3, [r2, #0]
 80145ee:	68bb      	ldr	r3, [r7, #8]
 80145f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80145f2:	4613      	mov	r3, r2
 80145f4:	009b      	lsls	r3, r3, #2
 80145f6:	4413      	add	r3, r2
 80145f8:	009b      	lsls	r3, r3, #2
 80145fa:	4a10      	ldr	r2, [pc, #64]	@ (801463c <xTaskPriorityInherit+0xc8>)
 80145fc:	441a      	add	r2, r3
 80145fe:	68bb      	ldr	r3, [r7, #8]
 8014600:	3304      	adds	r3, #4
 8014602:	4619      	mov	r1, r3
 8014604:	4610      	mov	r0, r2
 8014606:	f7fd ffc8 	bl	801259a <vListInsertEnd>
 801460a:	e004      	b.n	8014616 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801460c:	4b0a      	ldr	r3, [pc, #40]	@ (8014638 <xTaskPriorityInherit+0xc4>)
 801460e:	681b      	ldr	r3, [r3, #0]
 8014610:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014612:	68bb      	ldr	r3, [r7, #8]
 8014614:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8014616:	2301      	movs	r3, #1
 8014618:	60fb      	str	r3, [r7, #12]
 801461a:	e008      	b.n	801462e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801461c:	68bb      	ldr	r3, [r7, #8]
 801461e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8014620:	4b05      	ldr	r3, [pc, #20]	@ (8014638 <xTaskPriorityInherit+0xc4>)
 8014622:	681b      	ldr	r3, [r3, #0]
 8014624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014626:	429a      	cmp	r2, r3
 8014628:	d201      	bcs.n	801462e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801462a:	2301      	movs	r3, #1
 801462c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801462e:	68fb      	ldr	r3, [r7, #12]
	}
 8014630:	4618      	mov	r0, r3
 8014632:	3710      	adds	r7, #16
 8014634:	46bd      	mov	sp, r7
 8014636:	bd80      	pop	{r7, pc}
 8014638:	2400110c 	.word	0x2400110c
 801463c:	24001110 	.word	0x24001110
 8014640:	240015e8 	.word	0x240015e8

08014644 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8014644:	b580      	push	{r7, lr}
 8014646:	b086      	sub	sp, #24
 8014648:	af00      	add	r7, sp, #0
 801464a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8014650:	2300      	movs	r3, #0
 8014652:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	2b00      	cmp	r3, #0
 8014658:	d058      	beq.n	801470c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801465a:	4b2f      	ldr	r3, [pc, #188]	@ (8014718 <xTaskPriorityDisinherit+0xd4>)
 801465c:	681b      	ldr	r3, [r3, #0]
 801465e:	693a      	ldr	r2, [r7, #16]
 8014660:	429a      	cmp	r2, r3
 8014662:	d00b      	beq.n	801467c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8014664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014668:	f383 8811 	msr	BASEPRI, r3
 801466c:	f3bf 8f6f 	isb	sy
 8014670:	f3bf 8f4f 	dsb	sy
 8014674:	60fb      	str	r3, [r7, #12]
}
 8014676:	bf00      	nop
 8014678:	bf00      	nop
 801467a:	e7fd      	b.n	8014678 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801467c:	693b      	ldr	r3, [r7, #16]
 801467e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014680:	2b00      	cmp	r3, #0
 8014682:	d10b      	bne.n	801469c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8014684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014688:	f383 8811 	msr	BASEPRI, r3
 801468c:	f3bf 8f6f 	isb	sy
 8014690:	f3bf 8f4f 	dsb	sy
 8014694:	60bb      	str	r3, [r7, #8]
}
 8014696:	bf00      	nop
 8014698:	bf00      	nop
 801469a:	e7fd      	b.n	8014698 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 801469c:	693b      	ldr	r3, [r7, #16]
 801469e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80146a0:	1e5a      	subs	r2, r3, #1
 80146a2:	693b      	ldr	r3, [r7, #16]
 80146a4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80146a6:	693b      	ldr	r3, [r7, #16]
 80146a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80146aa:	693b      	ldr	r3, [r7, #16]
 80146ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80146ae:	429a      	cmp	r2, r3
 80146b0:	d02c      	beq.n	801470c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80146b2:	693b      	ldr	r3, [r7, #16]
 80146b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80146b6:	2b00      	cmp	r3, #0
 80146b8:	d128      	bne.n	801470c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80146ba:	693b      	ldr	r3, [r7, #16]
 80146bc:	3304      	adds	r3, #4
 80146be:	4618      	mov	r0, r3
 80146c0:	f7fd ffc8 	bl	8012654 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80146c4:	693b      	ldr	r3, [r7, #16]
 80146c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80146c8:	693b      	ldr	r3, [r7, #16]
 80146ca:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80146cc:	693b      	ldr	r3, [r7, #16]
 80146ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80146d0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80146d4:	693b      	ldr	r3, [r7, #16]
 80146d6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80146d8:	693b      	ldr	r3, [r7, #16]
 80146da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80146dc:	4b0f      	ldr	r3, [pc, #60]	@ (801471c <xTaskPriorityDisinherit+0xd8>)
 80146de:	681b      	ldr	r3, [r3, #0]
 80146e0:	429a      	cmp	r2, r3
 80146e2:	d903      	bls.n	80146ec <xTaskPriorityDisinherit+0xa8>
 80146e4:	693b      	ldr	r3, [r7, #16]
 80146e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80146e8:	4a0c      	ldr	r2, [pc, #48]	@ (801471c <xTaskPriorityDisinherit+0xd8>)
 80146ea:	6013      	str	r3, [r2, #0]
 80146ec:	693b      	ldr	r3, [r7, #16]
 80146ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80146f0:	4613      	mov	r3, r2
 80146f2:	009b      	lsls	r3, r3, #2
 80146f4:	4413      	add	r3, r2
 80146f6:	009b      	lsls	r3, r3, #2
 80146f8:	4a09      	ldr	r2, [pc, #36]	@ (8014720 <xTaskPriorityDisinherit+0xdc>)
 80146fa:	441a      	add	r2, r3
 80146fc:	693b      	ldr	r3, [r7, #16]
 80146fe:	3304      	adds	r3, #4
 8014700:	4619      	mov	r1, r3
 8014702:	4610      	mov	r0, r2
 8014704:	f7fd ff49 	bl	801259a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8014708:	2301      	movs	r3, #1
 801470a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801470c:	697b      	ldr	r3, [r7, #20]
	}
 801470e:	4618      	mov	r0, r3
 8014710:	3718      	adds	r7, #24
 8014712:	46bd      	mov	sp, r7
 8014714:	bd80      	pop	{r7, pc}
 8014716:	bf00      	nop
 8014718:	2400110c 	.word	0x2400110c
 801471c:	240015e8 	.word	0x240015e8
 8014720:	24001110 	.word	0x24001110

08014724 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8014724:	b580      	push	{r7, lr}
 8014726:	b088      	sub	sp, #32
 8014728:	af00      	add	r7, sp, #0
 801472a:	6078      	str	r0, [r7, #4]
 801472c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801472e:	687b      	ldr	r3, [r7, #4]
 8014730:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8014732:	2301      	movs	r3, #1
 8014734:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	2b00      	cmp	r3, #0
 801473a:	d06c      	beq.n	8014816 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801473c:	69bb      	ldr	r3, [r7, #24]
 801473e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014740:	2b00      	cmp	r3, #0
 8014742:	d10b      	bne.n	801475c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8014744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014748:	f383 8811 	msr	BASEPRI, r3
 801474c:	f3bf 8f6f 	isb	sy
 8014750:	f3bf 8f4f 	dsb	sy
 8014754:	60fb      	str	r3, [r7, #12]
}
 8014756:	bf00      	nop
 8014758:	bf00      	nop
 801475a:	e7fd      	b.n	8014758 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801475c:	69bb      	ldr	r3, [r7, #24]
 801475e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014760:	683a      	ldr	r2, [r7, #0]
 8014762:	429a      	cmp	r2, r3
 8014764:	d902      	bls.n	801476c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8014766:	683b      	ldr	r3, [r7, #0]
 8014768:	61fb      	str	r3, [r7, #28]
 801476a:	e002      	b.n	8014772 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801476c:	69bb      	ldr	r3, [r7, #24]
 801476e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014770:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8014772:	69bb      	ldr	r3, [r7, #24]
 8014774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014776:	69fa      	ldr	r2, [r7, #28]
 8014778:	429a      	cmp	r2, r3
 801477a:	d04c      	beq.n	8014816 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801477c:	69bb      	ldr	r3, [r7, #24]
 801477e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014780:	697a      	ldr	r2, [r7, #20]
 8014782:	429a      	cmp	r2, r3
 8014784:	d147      	bne.n	8014816 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8014786:	4b26      	ldr	r3, [pc, #152]	@ (8014820 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8014788:	681b      	ldr	r3, [r3, #0]
 801478a:	69ba      	ldr	r2, [r7, #24]
 801478c:	429a      	cmp	r2, r3
 801478e:	d10b      	bne.n	80147a8 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8014790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014794:	f383 8811 	msr	BASEPRI, r3
 8014798:	f3bf 8f6f 	isb	sy
 801479c:	f3bf 8f4f 	dsb	sy
 80147a0:	60bb      	str	r3, [r7, #8]
}
 80147a2:	bf00      	nop
 80147a4:	bf00      	nop
 80147a6:	e7fd      	b.n	80147a4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80147a8:	69bb      	ldr	r3, [r7, #24]
 80147aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80147ac:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80147ae:	69bb      	ldr	r3, [r7, #24]
 80147b0:	69fa      	ldr	r2, [r7, #28]
 80147b2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80147b4:	69bb      	ldr	r3, [r7, #24]
 80147b6:	699b      	ldr	r3, [r3, #24]
 80147b8:	2b00      	cmp	r3, #0
 80147ba:	db04      	blt.n	80147c6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80147bc:	69fb      	ldr	r3, [r7, #28]
 80147be:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80147c2:	69bb      	ldr	r3, [r7, #24]
 80147c4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80147c6:	69bb      	ldr	r3, [r7, #24]
 80147c8:	6959      	ldr	r1, [r3, #20]
 80147ca:	693a      	ldr	r2, [r7, #16]
 80147cc:	4613      	mov	r3, r2
 80147ce:	009b      	lsls	r3, r3, #2
 80147d0:	4413      	add	r3, r2
 80147d2:	009b      	lsls	r3, r3, #2
 80147d4:	4a13      	ldr	r2, [pc, #76]	@ (8014824 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80147d6:	4413      	add	r3, r2
 80147d8:	4299      	cmp	r1, r3
 80147da:	d11c      	bne.n	8014816 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80147dc:	69bb      	ldr	r3, [r7, #24]
 80147de:	3304      	adds	r3, #4
 80147e0:	4618      	mov	r0, r3
 80147e2:	f7fd ff37 	bl	8012654 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80147e6:	69bb      	ldr	r3, [r7, #24]
 80147e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80147ea:	4b0f      	ldr	r3, [pc, #60]	@ (8014828 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80147ec:	681b      	ldr	r3, [r3, #0]
 80147ee:	429a      	cmp	r2, r3
 80147f0:	d903      	bls.n	80147fa <vTaskPriorityDisinheritAfterTimeout+0xd6>
 80147f2:	69bb      	ldr	r3, [r7, #24]
 80147f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80147f6:	4a0c      	ldr	r2, [pc, #48]	@ (8014828 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80147f8:	6013      	str	r3, [r2, #0]
 80147fa:	69bb      	ldr	r3, [r7, #24]
 80147fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80147fe:	4613      	mov	r3, r2
 8014800:	009b      	lsls	r3, r3, #2
 8014802:	4413      	add	r3, r2
 8014804:	009b      	lsls	r3, r3, #2
 8014806:	4a07      	ldr	r2, [pc, #28]	@ (8014824 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8014808:	441a      	add	r2, r3
 801480a:	69bb      	ldr	r3, [r7, #24]
 801480c:	3304      	adds	r3, #4
 801480e:	4619      	mov	r1, r3
 8014810:	4610      	mov	r0, r2
 8014812:	f7fd fec2 	bl	801259a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014816:	bf00      	nop
 8014818:	3720      	adds	r7, #32
 801481a:	46bd      	mov	sp, r7
 801481c:	bd80      	pop	{r7, pc}
 801481e:	bf00      	nop
 8014820:	2400110c 	.word	0x2400110c
 8014824:	24001110 	.word	0x24001110
 8014828:	240015e8 	.word	0x240015e8

0801482c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 801482c:	b480      	push	{r7}
 801482e:	b083      	sub	sp, #12
 8014830:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8014832:	4b09      	ldr	r3, [pc, #36]	@ (8014858 <uxTaskResetEventItemValue+0x2c>)
 8014834:	681b      	ldr	r3, [r3, #0]
 8014836:	699b      	ldr	r3, [r3, #24]
 8014838:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801483a:	4b07      	ldr	r3, [pc, #28]	@ (8014858 <uxTaskResetEventItemValue+0x2c>)
 801483c:	681b      	ldr	r3, [r3, #0]
 801483e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014840:	4b05      	ldr	r3, [pc, #20]	@ (8014858 <uxTaskResetEventItemValue+0x2c>)
 8014842:	681b      	ldr	r3, [r3, #0]
 8014844:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 8014848:	619a      	str	r2, [r3, #24]

	return uxReturn;
 801484a:	687b      	ldr	r3, [r7, #4]
}
 801484c:	4618      	mov	r0, r3
 801484e:	370c      	adds	r7, #12
 8014850:	46bd      	mov	sp, r7
 8014852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014856:	4770      	bx	lr
 8014858:	2400110c 	.word	0x2400110c

0801485c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801485c:	b480      	push	{r7}
 801485e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8014860:	4b07      	ldr	r3, [pc, #28]	@ (8014880 <pvTaskIncrementMutexHeldCount+0x24>)
 8014862:	681b      	ldr	r3, [r3, #0]
 8014864:	2b00      	cmp	r3, #0
 8014866:	d004      	beq.n	8014872 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8014868:	4b05      	ldr	r3, [pc, #20]	@ (8014880 <pvTaskIncrementMutexHeldCount+0x24>)
 801486a:	681b      	ldr	r3, [r3, #0]
 801486c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801486e:	3201      	adds	r2, #1
 8014870:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8014872:	4b03      	ldr	r3, [pc, #12]	@ (8014880 <pvTaskIncrementMutexHeldCount+0x24>)
 8014874:	681b      	ldr	r3, [r3, #0]
	}
 8014876:	4618      	mov	r0, r3
 8014878:	46bd      	mov	sp, r7
 801487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801487e:	4770      	bx	lr
 8014880:	2400110c 	.word	0x2400110c

08014884 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8014884:	b580      	push	{r7, lr}
 8014886:	b084      	sub	sp, #16
 8014888:	af00      	add	r7, sp, #0
 801488a:	6078      	str	r0, [r7, #4]
 801488c:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 801488e:	f000 ff4b 	bl	8015728 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8014892:	4b20      	ldr	r3, [pc, #128]	@ (8014914 <ulTaskNotifyTake+0x90>)
 8014894:	681b      	ldr	r3, [r3, #0]
 8014896:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801489a:	2b00      	cmp	r3, #0
 801489c:	d113      	bne.n	80148c6 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 801489e:	4b1d      	ldr	r3, [pc, #116]	@ (8014914 <ulTaskNotifyTake+0x90>)
 80148a0:	681b      	ldr	r3, [r3, #0]
 80148a2:	2201      	movs	r2, #1
 80148a4:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 80148a8:	683b      	ldr	r3, [r7, #0]
 80148aa:	2b00      	cmp	r3, #0
 80148ac:	d00b      	beq.n	80148c6 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80148ae:	2101      	movs	r1, #1
 80148b0:	6838      	ldr	r0, [r7, #0]
 80148b2:	f000 f9db 	bl	8014c6c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80148b6:	4b18      	ldr	r3, [pc, #96]	@ (8014918 <ulTaskNotifyTake+0x94>)
 80148b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80148bc:	601a      	str	r2, [r3, #0]
 80148be:	f3bf 8f4f 	dsb	sy
 80148c2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80148c6:	f000 ff61 	bl	801578c <vPortExitCritical>

		taskENTER_CRITICAL();
 80148ca:	f000 ff2d 	bl	8015728 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 80148ce:	4b11      	ldr	r3, [pc, #68]	@ (8014914 <ulTaskNotifyTake+0x90>)
 80148d0:	681b      	ldr	r3, [r3, #0]
 80148d2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80148d6:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 80148d8:	68fb      	ldr	r3, [r7, #12]
 80148da:	2b00      	cmp	r3, #0
 80148dc:	d00e      	beq.n	80148fc <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	2b00      	cmp	r3, #0
 80148e2:	d005      	beq.n	80148f0 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 80148e4:	4b0b      	ldr	r3, [pc, #44]	@ (8014914 <ulTaskNotifyTake+0x90>)
 80148e6:	681b      	ldr	r3, [r3, #0]
 80148e8:	2200      	movs	r2, #0
 80148ea:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 80148ee:	e005      	b.n	80148fc <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 80148f0:	4b08      	ldr	r3, [pc, #32]	@ (8014914 <ulTaskNotifyTake+0x90>)
 80148f2:	681b      	ldr	r3, [r3, #0]
 80148f4:	68fa      	ldr	r2, [r7, #12]
 80148f6:	3a01      	subs	r2, #1
 80148f8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80148fc:	4b05      	ldr	r3, [pc, #20]	@ (8014914 <ulTaskNotifyTake+0x90>)
 80148fe:	681b      	ldr	r3, [r3, #0]
 8014900:	2200      	movs	r2, #0
 8014902:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 8014906:	f000 ff41 	bl	801578c <vPortExitCritical>

		return ulReturn;
 801490a:	68fb      	ldr	r3, [r7, #12]
	}
 801490c:	4618      	mov	r0, r3
 801490e:	3710      	adds	r7, #16
 8014910:	46bd      	mov	sp, r7
 8014912:	bd80      	pop	{r7, pc}
 8014914:	2400110c 	.word	0x2400110c
 8014918:	e000ed04 	.word	0xe000ed04

0801491c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 801491c:	b580      	push	{r7, lr}
 801491e:	b08a      	sub	sp, #40	@ 0x28
 8014920:	af00      	add	r7, sp, #0
 8014922:	60f8      	str	r0, [r7, #12]
 8014924:	60b9      	str	r1, [r7, #8]
 8014926:	603b      	str	r3, [r7, #0]
 8014928:	4613      	mov	r3, r2
 801492a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 801492c:	2301      	movs	r3, #1
 801492e:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8014930:	68fb      	ldr	r3, [r7, #12]
 8014932:	2b00      	cmp	r3, #0
 8014934:	d10b      	bne.n	801494e <xTaskGenericNotify+0x32>
	__asm volatile
 8014936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801493a:	f383 8811 	msr	BASEPRI, r3
 801493e:	f3bf 8f6f 	isb	sy
 8014942:	f3bf 8f4f 	dsb	sy
 8014946:	61bb      	str	r3, [r7, #24]
}
 8014948:	bf00      	nop
 801494a:	bf00      	nop
 801494c:	e7fd      	b.n	801494a <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 801494e:	68fb      	ldr	r3, [r7, #12]
 8014950:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8014952:	f000 fee9 	bl	8015728 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8014956:	683b      	ldr	r3, [r7, #0]
 8014958:	2b00      	cmp	r3, #0
 801495a:	d004      	beq.n	8014966 <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 801495c:	6a3b      	ldr	r3, [r7, #32]
 801495e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8014962:	683b      	ldr	r3, [r7, #0]
 8014964:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8014966:	6a3b      	ldr	r3, [r7, #32]
 8014968:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 801496c:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801496e:	6a3b      	ldr	r3, [r7, #32]
 8014970:	2202      	movs	r2, #2
 8014972:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 8014976:	79fb      	ldrb	r3, [r7, #7]
 8014978:	2b04      	cmp	r3, #4
 801497a:	d82e      	bhi.n	80149da <xTaskGenericNotify+0xbe>
 801497c:	a201      	add	r2, pc, #4	@ (adr r2, 8014984 <xTaskGenericNotify+0x68>)
 801497e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014982:	bf00      	nop
 8014984:	080149ff 	.word	0x080149ff
 8014988:	08014999 	.word	0x08014999
 801498c:	080149ab 	.word	0x080149ab
 8014990:	080149bb 	.word	0x080149bb
 8014994:	080149c5 	.word	0x080149c5
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8014998:	6a3b      	ldr	r3, [r7, #32]
 801499a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 801499e:	68bb      	ldr	r3, [r7, #8]
 80149a0:	431a      	orrs	r2, r3
 80149a2:	6a3b      	ldr	r3, [r7, #32]
 80149a4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80149a8:	e02c      	b.n	8014a04 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80149aa:	6a3b      	ldr	r3, [r7, #32]
 80149ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80149b0:	1c5a      	adds	r2, r3, #1
 80149b2:	6a3b      	ldr	r3, [r7, #32]
 80149b4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80149b8:	e024      	b.n	8014a04 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80149ba:	6a3b      	ldr	r3, [r7, #32]
 80149bc:	68ba      	ldr	r2, [r7, #8]
 80149be:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80149c2:	e01f      	b.n	8014a04 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80149c4:	7ffb      	ldrb	r3, [r7, #31]
 80149c6:	2b02      	cmp	r3, #2
 80149c8:	d004      	beq.n	80149d4 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80149ca:	6a3b      	ldr	r3, [r7, #32]
 80149cc:	68ba      	ldr	r2, [r7, #8]
 80149ce:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80149d2:	e017      	b.n	8014a04 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 80149d4:	2300      	movs	r3, #0
 80149d6:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 80149d8:	e014      	b.n	8014a04 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80149da:	6a3b      	ldr	r3, [r7, #32]
 80149dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80149e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80149e4:	d00d      	beq.n	8014a02 <xTaskGenericNotify+0xe6>
	__asm volatile
 80149e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80149ea:	f383 8811 	msr	BASEPRI, r3
 80149ee:	f3bf 8f6f 	isb	sy
 80149f2:	f3bf 8f4f 	dsb	sy
 80149f6:	617b      	str	r3, [r7, #20]
}
 80149f8:	bf00      	nop
 80149fa:	bf00      	nop
 80149fc:	e7fd      	b.n	80149fa <xTaskGenericNotify+0xde>
					break;
 80149fe:	bf00      	nop
 8014a00:	e000      	b.n	8014a04 <xTaskGenericNotify+0xe8>

					break;
 8014a02:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8014a04:	7ffb      	ldrb	r3, [r7, #31]
 8014a06:	2b01      	cmp	r3, #1
 8014a08:	d13b      	bne.n	8014a82 <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014a0a:	6a3b      	ldr	r3, [r7, #32]
 8014a0c:	3304      	adds	r3, #4
 8014a0e:	4618      	mov	r0, r3
 8014a10:	f7fd fe20 	bl	8012654 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8014a14:	6a3b      	ldr	r3, [r7, #32]
 8014a16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014a18:	4b1d      	ldr	r3, [pc, #116]	@ (8014a90 <xTaskGenericNotify+0x174>)
 8014a1a:	681b      	ldr	r3, [r3, #0]
 8014a1c:	429a      	cmp	r2, r3
 8014a1e:	d903      	bls.n	8014a28 <xTaskGenericNotify+0x10c>
 8014a20:	6a3b      	ldr	r3, [r7, #32]
 8014a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014a24:	4a1a      	ldr	r2, [pc, #104]	@ (8014a90 <xTaskGenericNotify+0x174>)
 8014a26:	6013      	str	r3, [r2, #0]
 8014a28:	6a3b      	ldr	r3, [r7, #32]
 8014a2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014a2c:	4613      	mov	r3, r2
 8014a2e:	009b      	lsls	r3, r3, #2
 8014a30:	4413      	add	r3, r2
 8014a32:	009b      	lsls	r3, r3, #2
 8014a34:	4a17      	ldr	r2, [pc, #92]	@ (8014a94 <xTaskGenericNotify+0x178>)
 8014a36:	441a      	add	r2, r3
 8014a38:	6a3b      	ldr	r3, [r7, #32]
 8014a3a:	3304      	adds	r3, #4
 8014a3c:	4619      	mov	r1, r3
 8014a3e:	4610      	mov	r0, r2
 8014a40:	f7fd fdab 	bl	801259a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8014a44:	6a3b      	ldr	r3, [r7, #32]
 8014a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014a48:	2b00      	cmp	r3, #0
 8014a4a:	d00b      	beq.n	8014a64 <xTaskGenericNotify+0x148>
	__asm volatile
 8014a4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014a50:	f383 8811 	msr	BASEPRI, r3
 8014a54:	f3bf 8f6f 	isb	sy
 8014a58:	f3bf 8f4f 	dsb	sy
 8014a5c:	613b      	str	r3, [r7, #16]
}
 8014a5e:	bf00      	nop
 8014a60:	bf00      	nop
 8014a62:	e7fd      	b.n	8014a60 <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014a64:	6a3b      	ldr	r3, [r7, #32]
 8014a66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014a68:	4b0b      	ldr	r3, [pc, #44]	@ (8014a98 <xTaskGenericNotify+0x17c>)
 8014a6a:	681b      	ldr	r3, [r3, #0]
 8014a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014a6e:	429a      	cmp	r2, r3
 8014a70:	d907      	bls.n	8014a82 <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8014a72:	4b0a      	ldr	r3, [pc, #40]	@ (8014a9c <xTaskGenericNotify+0x180>)
 8014a74:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014a78:	601a      	str	r2, [r3, #0]
 8014a7a:	f3bf 8f4f 	dsb	sy
 8014a7e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8014a82:	f000 fe83 	bl	801578c <vPortExitCritical>

		return xReturn;
 8014a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8014a88:	4618      	mov	r0, r3
 8014a8a:	3728      	adds	r7, #40	@ 0x28
 8014a8c:	46bd      	mov	sp, r7
 8014a8e:	bd80      	pop	{r7, pc}
 8014a90:	240015e8 	.word	0x240015e8
 8014a94:	24001110 	.word	0x24001110
 8014a98:	2400110c 	.word	0x2400110c
 8014a9c:	e000ed04 	.word	0xe000ed04

08014aa0 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8014aa0:	b580      	push	{r7, lr}
 8014aa2:	b08e      	sub	sp, #56	@ 0x38
 8014aa4:	af00      	add	r7, sp, #0
 8014aa6:	60f8      	str	r0, [r7, #12]
 8014aa8:	60b9      	str	r1, [r7, #8]
 8014aaa:	603b      	str	r3, [r7, #0]
 8014aac:	4613      	mov	r3, r2
 8014aae:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8014ab0:	2301      	movs	r3, #1
 8014ab2:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8014ab4:	68fb      	ldr	r3, [r7, #12]
 8014ab6:	2b00      	cmp	r3, #0
 8014ab8:	d10b      	bne.n	8014ad2 <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 8014aba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014abe:	f383 8811 	msr	BASEPRI, r3
 8014ac2:	f3bf 8f6f 	isb	sy
 8014ac6:	f3bf 8f4f 	dsb	sy
 8014aca:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8014acc:	bf00      	nop
 8014ace:	bf00      	nop
 8014ad0:	e7fd      	b.n	8014ace <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014ad2:	f000 ff09 	bl	80158e8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8014ad6:	68fb      	ldr	r3, [r7, #12]
 8014ad8:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 8014ada:	f3ef 8211 	mrs	r2, BASEPRI
 8014ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014ae2:	f383 8811 	msr	BASEPRI, r3
 8014ae6:	f3bf 8f6f 	isb	sy
 8014aea:	f3bf 8f4f 	dsb	sy
 8014aee:	623a      	str	r2, [r7, #32]
 8014af0:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8014af2:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014af4:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8014af6:	683b      	ldr	r3, [r7, #0]
 8014af8:	2b00      	cmp	r3, #0
 8014afa:	d004      	beq.n	8014b06 <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8014afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014afe:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8014b02:	683b      	ldr	r3, [r7, #0]
 8014b04:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8014b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b08:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8014b0c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8014b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b12:	2202      	movs	r2, #2
 8014b14:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 8014b18:	79fb      	ldrb	r3, [r7, #7]
 8014b1a:	2b04      	cmp	r3, #4
 8014b1c:	d82e      	bhi.n	8014b7c <xTaskGenericNotifyFromISR+0xdc>
 8014b1e:	a201      	add	r2, pc, #4	@ (adr r2, 8014b24 <xTaskGenericNotifyFromISR+0x84>)
 8014b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014b24:	08014ba1 	.word	0x08014ba1
 8014b28:	08014b39 	.word	0x08014b39
 8014b2c:	08014b4b 	.word	0x08014b4b
 8014b30:	08014b5b 	.word	0x08014b5b
 8014b34:	08014b65 	.word	0x08014b65
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8014b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b3a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8014b3e:	68bb      	ldr	r3, [r7, #8]
 8014b40:	431a      	orrs	r2, r3
 8014b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b44:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8014b48:	e02d      	b.n	8014ba6 <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8014b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b4c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8014b50:	1c5a      	adds	r2, r3, #1
 8014b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b54:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8014b58:	e025      	b.n	8014ba6 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8014b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b5c:	68ba      	ldr	r2, [r7, #8]
 8014b5e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8014b62:	e020      	b.n	8014ba6 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8014b64:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8014b68:	2b02      	cmp	r3, #2
 8014b6a:	d004      	beq.n	8014b76 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8014b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b6e:	68ba      	ldr	r2, [r7, #8]
 8014b70:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8014b74:	e017      	b.n	8014ba6 <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 8014b76:	2300      	movs	r3, #0
 8014b78:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 8014b7a:	e014      	b.n	8014ba6 <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8014b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b7e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8014b82:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8014b86:	d00d      	beq.n	8014ba4 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 8014b88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014b8c:	f383 8811 	msr	BASEPRI, r3
 8014b90:	f3bf 8f6f 	isb	sy
 8014b94:	f3bf 8f4f 	dsb	sy
 8014b98:	61bb      	str	r3, [r7, #24]
}
 8014b9a:	bf00      	nop
 8014b9c:	bf00      	nop
 8014b9e:	e7fd      	b.n	8014b9c <xTaskGenericNotifyFromISR+0xfc>
					break;
 8014ba0:	bf00      	nop
 8014ba2:	e000      	b.n	8014ba6 <xTaskGenericNotifyFromISR+0x106>
					break;
 8014ba4:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8014ba6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8014baa:	2b01      	cmp	r3, #1
 8014bac:	d147      	bne.n	8014c3e <xTaskGenericNotifyFromISR+0x19e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8014bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014bb2:	2b00      	cmp	r3, #0
 8014bb4:	d00b      	beq.n	8014bce <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 8014bb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014bba:	f383 8811 	msr	BASEPRI, r3
 8014bbe:	f3bf 8f6f 	isb	sy
 8014bc2:	f3bf 8f4f 	dsb	sy
 8014bc6:	617b      	str	r3, [r7, #20]
}
 8014bc8:	bf00      	nop
 8014bca:	bf00      	nop
 8014bcc:	e7fd      	b.n	8014bca <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014bce:	4b21      	ldr	r3, [pc, #132]	@ (8014c54 <xTaskGenericNotifyFromISR+0x1b4>)
 8014bd0:	681b      	ldr	r3, [r3, #0]
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	d11d      	bne.n	8014c12 <xTaskGenericNotifyFromISR+0x172>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014bd8:	3304      	adds	r3, #4
 8014bda:	4618      	mov	r0, r3
 8014bdc:	f7fd fd3a 	bl	8012654 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014be2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014be4:	4b1c      	ldr	r3, [pc, #112]	@ (8014c58 <xTaskGenericNotifyFromISR+0x1b8>)
 8014be6:	681b      	ldr	r3, [r3, #0]
 8014be8:	429a      	cmp	r2, r3
 8014bea:	d903      	bls.n	8014bf4 <xTaskGenericNotifyFromISR+0x154>
 8014bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014bf0:	4a19      	ldr	r2, [pc, #100]	@ (8014c58 <xTaskGenericNotifyFromISR+0x1b8>)
 8014bf2:	6013      	str	r3, [r2, #0]
 8014bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014bf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014bf8:	4613      	mov	r3, r2
 8014bfa:	009b      	lsls	r3, r3, #2
 8014bfc:	4413      	add	r3, r2
 8014bfe:	009b      	lsls	r3, r3, #2
 8014c00:	4a16      	ldr	r2, [pc, #88]	@ (8014c5c <xTaskGenericNotifyFromISR+0x1bc>)
 8014c02:	441a      	add	r2, r3
 8014c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c06:	3304      	adds	r3, #4
 8014c08:	4619      	mov	r1, r3
 8014c0a:	4610      	mov	r0, r2
 8014c0c:	f7fd fcc5 	bl	801259a <vListInsertEnd>
 8014c10:	e005      	b.n	8014c1e <xTaskGenericNotifyFromISR+0x17e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8014c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c14:	3318      	adds	r3, #24
 8014c16:	4619      	mov	r1, r3
 8014c18:	4811      	ldr	r0, [pc, #68]	@ (8014c60 <xTaskGenericNotifyFromISR+0x1c0>)
 8014c1a:	f7fd fcbe 	bl	801259a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014c22:	4b10      	ldr	r3, [pc, #64]	@ (8014c64 <xTaskGenericNotifyFromISR+0x1c4>)
 8014c24:	681b      	ldr	r3, [r3, #0]
 8014c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014c28:	429a      	cmp	r2, r3
 8014c2a:	d908      	bls.n	8014c3e <xTaskGenericNotifyFromISR+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8014c2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014c2e:	2b00      	cmp	r3, #0
 8014c30:	d002      	beq.n	8014c38 <xTaskGenericNotifyFromISR+0x198>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8014c32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014c34:	2201      	movs	r2, #1
 8014c36:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8014c38:	4b0b      	ldr	r3, [pc, #44]	@ (8014c68 <xTaskGenericNotifyFromISR+0x1c8>)
 8014c3a:	2201      	movs	r2, #1
 8014c3c:	601a      	str	r2, [r3, #0]
 8014c3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c40:	613b      	str	r3, [r7, #16]
	__asm volatile
 8014c42:	693b      	ldr	r3, [r7, #16]
 8014c44:	f383 8811 	msr	BASEPRI, r3
}
 8014c48:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8014c4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8014c4c:	4618      	mov	r0, r3
 8014c4e:	3738      	adds	r7, #56	@ 0x38
 8014c50:	46bd      	mov	sp, r7
 8014c52:	bd80      	pop	{r7, pc}
 8014c54:	24001608 	.word	0x24001608
 8014c58:	240015e8 	.word	0x240015e8
 8014c5c:	24001110 	.word	0x24001110
 8014c60:	240015a0 	.word	0x240015a0
 8014c64:	2400110c 	.word	0x2400110c
 8014c68:	240015f4 	.word	0x240015f4

08014c6c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8014c6c:	b580      	push	{r7, lr}
 8014c6e:	b084      	sub	sp, #16
 8014c70:	af00      	add	r7, sp, #0
 8014c72:	6078      	str	r0, [r7, #4]
 8014c74:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8014c76:	4b21      	ldr	r3, [pc, #132]	@ (8014cfc <prvAddCurrentTaskToDelayedList+0x90>)
 8014c78:	681b      	ldr	r3, [r3, #0]
 8014c7a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014c7c:	4b20      	ldr	r3, [pc, #128]	@ (8014d00 <prvAddCurrentTaskToDelayedList+0x94>)
 8014c7e:	681b      	ldr	r3, [r3, #0]
 8014c80:	3304      	adds	r3, #4
 8014c82:	4618      	mov	r0, r3
 8014c84:	f7fd fce6 	bl	8012654 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8014c8e:	d10a      	bne.n	8014ca6 <prvAddCurrentTaskToDelayedList+0x3a>
 8014c90:	683b      	ldr	r3, [r7, #0]
 8014c92:	2b00      	cmp	r3, #0
 8014c94:	d007      	beq.n	8014ca6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014c96:	4b1a      	ldr	r3, [pc, #104]	@ (8014d00 <prvAddCurrentTaskToDelayedList+0x94>)
 8014c98:	681b      	ldr	r3, [r3, #0]
 8014c9a:	3304      	adds	r3, #4
 8014c9c:	4619      	mov	r1, r3
 8014c9e:	4819      	ldr	r0, [pc, #100]	@ (8014d04 <prvAddCurrentTaskToDelayedList+0x98>)
 8014ca0:	f7fd fc7b 	bl	801259a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8014ca4:	e026      	b.n	8014cf4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8014ca6:	68fa      	ldr	r2, [r7, #12]
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	4413      	add	r3, r2
 8014cac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014cae:	4b14      	ldr	r3, [pc, #80]	@ (8014d00 <prvAddCurrentTaskToDelayedList+0x94>)
 8014cb0:	681b      	ldr	r3, [r3, #0]
 8014cb2:	68ba      	ldr	r2, [r7, #8]
 8014cb4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8014cb6:	68ba      	ldr	r2, [r7, #8]
 8014cb8:	68fb      	ldr	r3, [r7, #12]
 8014cba:	429a      	cmp	r2, r3
 8014cbc:	d209      	bcs.n	8014cd2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014cbe:	4b12      	ldr	r3, [pc, #72]	@ (8014d08 <prvAddCurrentTaskToDelayedList+0x9c>)
 8014cc0:	681a      	ldr	r2, [r3, #0]
 8014cc2:	4b0f      	ldr	r3, [pc, #60]	@ (8014d00 <prvAddCurrentTaskToDelayedList+0x94>)
 8014cc4:	681b      	ldr	r3, [r3, #0]
 8014cc6:	3304      	adds	r3, #4
 8014cc8:	4619      	mov	r1, r3
 8014cca:	4610      	mov	r0, r2
 8014ccc:	f7fd fc89 	bl	80125e2 <vListInsert>
}
 8014cd0:	e010      	b.n	8014cf4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014cd2:	4b0e      	ldr	r3, [pc, #56]	@ (8014d0c <prvAddCurrentTaskToDelayedList+0xa0>)
 8014cd4:	681a      	ldr	r2, [r3, #0]
 8014cd6:	4b0a      	ldr	r3, [pc, #40]	@ (8014d00 <prvAddCurrentTaskToDelayedList+0x94>)
 8014cd8:	681b      	ldr	r3, [r3, #0]
 8014cda:	3304      	adds	r3, #4
 8014cdc:	4619      	mov	r1, r3
 8014cde:	4610      	mov	r0, r2
 8014ce0:	f7fd fc7f 	bl	80125e2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8014ce4:	4b0a      	ldr	r3, [pc, #40]	@ (8014d10 <prvAddCurrentTaskToDelayedList+0xa4>)
 8014ce6:	681b      	ldr	r3, [r3, #0]
 8014ce8:	68ba      	ldr	r2, [r7, #8]
 8014cea:	429a      	cmp	r2, r3
 8014cec:	d202      	bcs.n	8014cf4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8014cee:	4a08      	ldr	r2, [pc, #32]	@ (8014d10 <prvAddCurrentTaskToDelayedList+0xa4>)
 8014cf0:	68bb      	ldr	r3, [r7, #8]
 8014cf2:	6013      	str	r3, [r2, #0]
}
 8014cf4:	bf00      	nop
 8014cf6:	3710      	adds	r7, #16
 8014cf8:	46bd      	mov	sp, r7
 8014cfa:	bd80      	pop	{r7, pc}
 8014cfc:	240015e4 	.word	0x240015e4
 8014d00:	2400110c 	.word	0x2400110c
 8014d04:	240015cc 	.word	0x240015cc
 8014d08:	2400159c 	.word	0x2400159c
 8014d0c:	24001598 	.word	0x24001598
 8014d10:	24001600 	.word	0x24001600

08014d14 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8014d14:	b580      	push	{r7, lr}
 8014d16:	b08a      	sub	sp, #40	@ 0x28
 8014d18:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8014d1a:	2300      	movs	r3, #0
 8014d1c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8014d1e:	f000 fb71 	bl	8015404 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8014d22:	4b1d      	ldr	r3, [pc, #116]	@ (8014d98 <xTimerCreateTimerTask+0x84>)
 8014d24:	681b      	ldr	r3, [r3, #0]
 8014d26:	2b00      	cmp	r3, #0
 8014d28:	d021      	beq.n	8014d6e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8014d2a:	2300      	movs	r3, #0
 8014d2c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8014d2e:	2300      	movs	r3, #0
 8014d30:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8014d32:	1d3a      	adds	r2, r7, #4
 8014d34:	f107 0108 	add.w	r1, r7, #8
 8014d38:	f107 030c 	add.w	r3, r7, #12
 8014d3c:	4618      	mov	r0, r3
 8014d3e:	f7fd fa29 	bl	8012194 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8014d42:	6879      	ldr	r1, [r7, #4]
 8014d44:	68bb      	ldr	r3, [r7, #8]
 8014d46:	68fa      	ldr	r2, [r7, #12]
 8014d48:	9202      	str	r2, [sp, #8]
 8014d4a:	9301      	str	r3, [sp, #4]
 8014d4c:	2302      	movs	r3, #2
 8014d4e:	9300      	str	r3, [sp, #0]
 8014d50:	2300      	movs	r3, #0
 8014d52:	460a      	mov	r2, r1
 8014d54:	4911      	ldr	r1, [pc, #68]	@ (8014d9c <xTimerCreateTimerTask+0x88>)
 8014d56:	4812      	ldr	r0, [pc, #72]	@ (8014da0 <xTimerCreateTimerTask+0x8c>)
 8014d58:	f7fe fcd2 	bl	8013700 <xTaskCreateStatic>
 8014d5c:	4603      	mov	r3, r0
 8014d5e:	4a11      	ldr	r2, [pc, #68]	@ (8014da4 <xTimerCreateTimerTask+0x90>)
 8014d60:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8014d62:	4b10      	ldr	r3, [pc, #64]	@ (8014da4 <xTimerCreateTimerTask+0x90>)
 8014d64:	681b      	ldr	r3, [r3, #0]
 8014d66:	2b00      	cmp	r3, #0
 8014d68:	d001      	beq.n	8014d6e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8014d6a:	2301      	movs	r3, #1
 8014d6c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8014d6e:	697b      	ldr	r3, [r7, #20]
 8014d70:	2b00      	cmp	r3, #0
 8014d72:	d10b      	bne.n	8014d8c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8014d74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014d78:	f383 8811 	msr	BASEPRI, r3
 8014d7c:	f3bf 8f6f 	isb	sy
 8014d80:	f3bf 8f4f 	dsb	sy
 8014d84:	613b      	str	r3, [r7, #16]
}
 8014d86:	bf00      	nop
 8014d88:	bf00      	nop
 8014d8a:	e7fd      	b.n	8014d88 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8014d8c:	697b      	ldr	r3, [r7, #20]
}
 8014d8e:	4618      	mov	r0, r3
 8014d90:	3718      	adds	r7, #24
 8014d92:	46bd      	mov	sp, r7
 8014d94:	bd80      	pop	{r7, pc}
 8014d96:	bf00      	nop
 8014d98:	2400163c 	.word	0x2400163c
 8014d9c:	080175f0 	.word	0x080175f0
 8014da0:	08014f9d 	.word	0x08014f9d
 8014da4:	24001640 	.word	0x24001640

08014da8 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8014da8:	b580      	push	{r7, lr}
 8014daa:	b088      	sub	sp, #32
 8014dac:	af02      	add	r7, sp, #8
 8014dae:	60f8      	str	r0, [r7, #12]
 8014db0:	60b9      	str	r1, [r7, #8]
 8014db2:	607a      	str	r2, [r7, #4]
 8014db4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8014db6:	202c      	movs	r0, #44	@ 0x2c
 8014db8:	f000 fdd8 	bl	801596c <pvPortMalloc>
 8014dbc:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8014dbe:	697b      	ldr	r3, [r7, #20]
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	d00d      	beq.n	8014de0 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8014dc4:	697b      	ldr	r3, [r7, #20]
 8014dc6:	2200      	movs	r2, #0
 8014dc8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8014dcc:	697b      	ldr	r3, [r7, #20]
 8014dce:	9301      	str	r3, [sp, #4]
 8014dd0:	6a3b      	ldr	r3, [r7, #32]
 8014dd2:	9300      	str	r3, [sp, #0]
 8014dd4:	683b      	ldr	r3, [r7, #0]
 8014dd6:	687a      	ldr	r2, [r7, #4]
 8014dd8:	68b9      	ldr	r1, [r7, #8]
 8014dda:	68f8      	ldr	r0, [r7, #12]
 8014ddc:	f000 f805 	bl	8014dea <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8014de0:	697b      	ldr	r3, [r7, #20]
	}
 8014de2:	4618      	mov	r0, r3
 8014de4:	3718      	adds	r7, #24
 8014de6:	46bd      	mov	sp, r7
 8014de8:	bd80      	pop	{r7, pc}

08014dea <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8014dea:	b580      	push	{r7, lr}
 8014dec:	b086      	sub	sp, #24
 8014dee:	af00      	add	r7, sp, #0
 8014df0:	60f8      	str	r0, [r7, #12]
 8014df2:	60b9      	str	r1, [r7, #8]
 8014df4:	607a      	str	r2, [r7, #4]
 8014df6:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8014df8:	68bb      	ldr	r3, [r7, #8]
 8014dfa:	2b00      	cmp	r3, #0
 8014dfc:	d10b      	bne.n	8014e16 <prvInitialiseNewTimer+0x2c>
	__asm volatile
 8014dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014e02:	f383 8811 	msr	BASEPRI, r3
 8014e06:	f3bf 8f6f 	isb	sy
 8014e0a:	f3bf 8f4f 	dsb	sy
 8014e0e:	617b      	str	r3, [r7, #20]
}
 8014e10:	bf00      	nop
 8014e12:	bf00      	nop
 8014e14:	e7fd      	b.n	8014e12 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8014e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e18:	2b00      	cmp	r3, #0
 8014e1a:	d01e      	beq.n	8014e5a <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8014e1c:	f000 faf2 	bl	8015404 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8014e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e22:	68fa      	ldr	r2, [r7, #12]
 8014e24:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8014e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e28:	68ba      	ldr	r2, [r7, #8]
 8014e2a:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8014e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e2e:	683a      	ldr	r2, [r7, #0]
 8014e30:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8014e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e34:	6a3a      	ldr	r2, [r7, #32]
 8014e36:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8014e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e3a:	3304      	adds	r3, #4
 8014e3c:	4618      	mov	r0, r3
 8014e3e:	f7fd fb9f 	bl	8012580 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8014e42:	687b      	ldr	r3, [r7, #4]
 8014e44:	2b00      	cmp	r3, #0
 8014e46:	d008      	beq.n	8014e5a <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8014e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e4a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014e4e:	f043 0304 	orr.w	r3, r3, #4
 8014e52:	b2da      	uxtb	r2, r3
 8014e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e56:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8014e5a:	bf00      	nop
 8014e5c:	3718      	adds	r7, #24
 8014e5e:	46bd      	mov	sp, r7
 8014e60:	bd80      	pop	{r7, pc}
	...

08014e64 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8014e64:	b580      	push	{r7, lr}
 8014e66:	b08a      	sub	sp, #40	@ 0x28
 8014e68:	af00      	add	r7, sp, #0
 8014e6a:	60f8      	str	r0, [r7, #12]
 8014e6c:	60b9      	str	r1, [r7, #8]
 8014e6e:	607a      	str	r2, [r7, #4]
 8014e70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8014e72:	2300      	movs	r3, #0
 8014e74:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8014e76:	68fb      	ldr	r3, [r7, #12]
 8014e78:	2b00      	cmp	r3, #0
 8014e7a:	d10b      	bne.n	8014e94 <xTimerGenericCommand+0x30>
	__asm volatile
 8014e7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014e80:	f383 8811 	msr	BASEPRI, r3
 8014e84:	f3bf 8f6f 	isb	sy
 8014e88:	f3bf 8f4f 	dsb	sy
 8014e8c:	623b      	str	r3, [r7, #32]
}
 8014e8e:	bf00      	nop
 8014e90:	bf00      	nop
 8014e92:	e7fd      	b.n	8014e90 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8014e94:	4b19      	ldr	r3, [pc, #100]	@ (8014efc <xTimerGenericCommand+0x98>)
 8014e96:	681b      	ldr	r3, [r3, #0]
 8014e98:	2b00      	cmp	r3, #0
 8014e9a:	d02a      	beq.n	8014ef2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8014e9c:	68bb      	ldr	r3, [r7, #8]
 8014e9e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8014ea4:	68fb      	ldr	r3, [r7, #12]
 8014ea6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8014ea8:	68bb      	ldr	r3, [r7, #8]
 8014eaa:	2b05      	cmp	r3, #5
 8014eac:	dc18      	bgt.n	8014ee0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8014eae:	f7ff fb43 	bl	8014538 <xTaskGetSchedulerState>
 8014eb2:	4603      	mov	r3, r0
 8014eb4:	2b02      	cmp	r3, #2
 8014eb6:	d109      	bne.n	8014ecc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8014eb8:	4b10      	ldr	r3, [pc, #64]	@ (8014efc <xTimerGenericCommand+0x98>)
 8014eba:	6818      	ldr	r0, [r3, #0]
 8014ebc:	f107 0110 	add.w	r1, r7, #16
 8014ec0:	2300      	movs	r3, #0
 8014ec2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014ec4:	f7fd fda4 	bl	8012a10 <xQueueGenericSend>
 8014ec8:	6278      	str	r0, [r7, #36]	@ 0x24
 8014eca:	e012      	b.n	8014ef2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8014ecc:	4b0b      	ldr	r3, [pc, #44]	@ (8014efc <xTimerGenericCommand+0x98>)
 8014ece:	6818      	ldr	r0, [r3, #0]
 8014ed0:	f107 0110 	add.w	r1, r7, #16
 8014ed4:	2300      	movs	r3, #0
 8014ed6:	2200      	movs	r2, #0
 8014ed8:	f7fd fd9a 	bl	8012a10 <xQueueGenericSend>
 8014edc:	6278      	str	r0, [r7, #36]	@ 0x24
 8014ede:	e008      	b.n	8014ef2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8014ee0:	4b06      	ldr	r3, [pc, #24]	@ (8014efc <xTimerGenericCommand+0x98>)
 8014ee2:	6818      	ldr	r0, [r3, #0]
 8014ee4:	f107 0110 	add.w	r1, r7, #16
 8014ee8:	2300      	movs	r3, #0
 8014eea:	683a      	ldr	r2, [r7, #0]
 8014eec:	f7fd fe92 	bl	8012c14 <xQueueGenericSendFromISR>
 8014ef0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8014ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8014ef4:	4618      	mov	r0, r3
 8014ef6:	3728      	adds	r7, #40	@ 0x28
 8014ef8:	46bd      	mov	sp, r7
 8014efa:	bd80      	pop	{r7, pc}
 8014efc:	2400163c 	.word	0x2400163c

08014f00 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8014f00:	b580      	push	{r7, lr}
 8014f02:	b088      	sub	sp, #32
 8014f04:	af02      	add	r7, sp, #8
 8014f06:	6078      	str	r0, [r7, #4]
 8014f08:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014f0a:	4b23      	ldr	r3, [pc, #140]	@ (8014f98 <prvProcessExpiredTimer+0x98>)
 8014f0c:	681b      	ldr	r3, [r3, #0]
 8014f0e:	68db      	ldr	r3, [r3, #12]
 8014f10:	68db      	ldr	r3, [r3, #12]
 8014f12:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014f14:	697b      	ldr	r3, [r7, #20]
 8014f16:	3304      	adds	r3, #4
 8014f18:	4618      	mov	r0, r3
 8014f1a:	f7fd fb9b 	bl	8012654 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014f1e:	697b      	ldr	r3, [r7, #20]
 8014f20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014f24:	f003 0304 	and.w	r3, r3, #4
 8014f28:	2b00      	cmp	r3, #0
 8014f2a:	d023      	beq.n	8014f74 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8014f2c:	697b      	ldr	r3, [r7, #20]
 8014f2e:	699a      	ldr	r2, [r3, #24]
 8014f30:	687b      	ldr	r3, [r7, #4]
 8014f32:	18d1      	adds	r1, r2, r3
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	683a      	ldr	r2, [r7, #0]
 8014f38:	6978      	ldr	r0, [r7, #20]
 8014f3a:	f000 f8d5 	bl	80150e8 <prvInsertTimerInActiveList>
 8014f3e:	4603      	mov	r3, r0
 8014f40:	2b00      	cmp	r3, #0
 8014f42:	d020      	beq.n	8014f86 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014f44:	2300      	movs	r3, #0
 8014f46:	9300      	str	r3, [sp, #0]
 8014f48:	2300      	movs	r3, #0
 8014f4a:	687a      	ldr	r2, [r7, #4]
 8014f4c:	2100      	movs	r1, #0
 8014f4e:	6978      	ldr	r0, [r7, #20]
 8014f50:	f7ff ff88 	bl	8014e64 <xTimerGenericCommand>
 8014f54:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8014f56:	693b      	ldr	r3, [r7, #16]
 8014f58:	2b00      	cmp	r3, #0
 8014f5a:	d114      	bne.n	8014f86 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8014f5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f60:	f383 8811 	msr	BASEPRI, r3
 8014f64:	f3bf 8f6f 	isb	sy
 8014f68:	f3bf 8f4f 	dsb	sy
 8014f6c:	60fb      	str	r3, [r7, #12]
}
 8014f6e:	bf00      	nop
 8014f70:	bf00      	nop
 8014f72:	e7fd      	b.n	8014f70 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014f74:	697b      	ldr	r3, [r7, #20]
 8014f76:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014f7a:	f023 0301 	bic.w	r3, r3, #1
 8014f7e:	b2da      	uxtb	r2, r3
 8014f80:	697b      	ldr	r3, [r7, #20]
 8014f82:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014f86:	697b      	ldr	r3, [r7, #20]
 8014f88:	6a1b      	ldr	r3, [r3, #32]
 8014f8a:	6978      	ldr	r0, [r7, #20]
 8014f8c:	4798      	blx	r3
}
 8014f8e:	bf00      	nop
 8014f90:	3718      	adds	r7, #24
 8014f92:	46bd      	mov	sp, r7
 8014f94:	bd80      	pop	{r7, pc}
 8014f96:	bf00      	nop
 8014f98:	24001634 	.word	0x24001634

08014f9c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8014f9c:	b580      	push	{r7, lr}
 8014f9e:	b084      	sub	sp, #16
 8014fa0:	af00      	add	r7, sp, #0
 8014fa2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8014fa4:	f107 0308 	add.w	r3, r7, #8
 8014fa8:	4618      	mov	r0, r3
 8014faa:	f000 f859 	bl	8015060 <prvGetNextExpireTime>
 8014fae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8014fb0:	68bb      	ldr	r3, [r7, #8]
 8014fb2:	4619      	mov	r1, r3
 8014fb4:	68f8      	ldr	r0, [r7, #12]
 8014fb6:	f000 f805 	bl	8014fc4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8014fba:	f000 f8d7 	bl	801516c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8014fbe:	bf00      	nop
 8014fc0:	e7f0      	b.n	8014fa4 <prvTimerTask+0x8>
	...

08014fc4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8014fc4:	b580      	push	{r7, lr}
 8014fc6:	b084      	sub	sp, #16
 8014fc8:	af00      	add	r7, sp, #0
 8014fca:	6078      	str	r0, [r7, #4]
 8014fcc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8014fce:	f7fe fdfb 	bl	8013bc8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8014fd2:	f107 0308 	add.w	r3, r7, #8
 8014fd6:	4618      	mov	r0, r3
 8014fd8:	f000 f866 	bl	80150a8 <prvSampleTimeNow>
 8014fdc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8014fde:	68bb      	ldr	r3, [r7, #8]
 8014fe0:	2b00      	cmp	r3, #0
 8014fe2:	d130      	bne.n	8015046 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8014fe4:	683b      	ldr	r3, [r7, #0]
 8014fe6:	2b00      	cmp	r3, #0
 8014fe8:	d10a      	bne.n	8015000 <prvProcessTimerOrBlockTask+0x3c>
 8014fea:	687a      	ldr	r2, [r7, #4]
 8014fec:	68fb      	ldr	r3, [r7, #12]
 8014fee:	429a      	cmp	r2, r3
 8014ff0:	d806      	bhi.n	8015000 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8014ff2:	f7fe fdf7 	bl	8013be4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8014ff6:	68f9      	ldr	r1, [r7, #12]
 8014ff8:	6878      	ldr	r0, [r7, #4]
 8014ffa:	f7ff ff81 	bl	8014f00 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8014ffe:	e024      	b.n	801504a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8015000:	683b      	ldr	r3, [r7, #0]
 8015002:	2b00      	cmp	r3, #0
 8015004:	d008      	beq.n	8015018 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8015006:	4b13      	ldr	r3, [pc, #76]	@ (8015054 <prvProcessTimerOrBlockTask+0x90>)
 8015008:	681b      	ldr	r3, [r3, #0]
 801500a:	681b      	ldr	r3, [r3, #0]
 801500c:	2b00      	cmp	r3, #0
 801500e:	d101      	bne.n	8015014 <prvProcessTimerOrBlockTask+0x50>
 8015010:	2301      	movs	r3, #1
 8015012:	e000      	b.n	8015016 <prvProcessTimerOrBlockTask+0x52>
 8015014:	2300      	movs	r3, #0
 8015016:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8015018:	4b0f      	ldr	r3, [pc, #60]	@ (8015058 <prvProcessTimerOrBlockTask+0x94>)
 801501a:	6818      	ldr	r0, [r3, #0]
 801501c:	687a      	ldr	r2, [r7, #4]
 801501e:	68fb      	ldr	r3, [r7, #12]
 8015020:	1ad3      	subs	r3, r2, r3
 8015022:	683a      	ldr	r2, [r7, #0]
 8015024:	4619      	mov	r1, r3
 8015026:	f7fe fb37 	bl	8013698 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801502a:	f7fe fddb 	bl	8013be4 <xTaskResumeAll>
 801502e:	4603      	mov	r3, r0
 8015030:	2b00      	cmp	r3, #0
 8015032:	d10a      	bne.n	801504a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8015034:	4b09      	ldr	r3, [pc, #36]	@ (801505c <prvProcessTimerOrBlockTask+0x98>)
 8015036:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801503a:	601a      	str	r2, [r3, #0]
 801503c:	f3bf 8f4f 	dsb	sy
 8015040:	f3bf 8f6f 	isb	sy
}
 8015044:	e001      	b.n	801504a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8015046:	f7fe fdcd 	bl	8013be4 <xTaskResumeAll>
}
 801504a:	bf00      	nop
 801504c:	3710      	adds	r7, #16
 801504e:	46bd      	mov	sp, r7
 8015050:	bd80      	pop	{r7, pc}
 8015052:	bf00      	nop
 8015054:	24001638 	.word	0x24001638
 8015058:	2400163c 	.word	0x2400163c
 801505c:	e000ed04 	.word	0xe000ed04

08015060 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8015060:	b480      	push	{r7}
 8015062:	b085      	sub	sp, #20
 8015064:	af00      	add	r7, sp, #0
 8015066:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8015068:	4b0e      	ldr	r3, [pc, #56]	@ (80150a4 <prvGetNextExpireTime+0x44>)
 801506a:	681b      	ldr	r3, [r3, #0]
 801506c:	681b      	ldr	r3, [r3, #0]
 801506e:	2b00      	cmp	r3, #0
 8015070:	d101      	bne.n	8015076 <prvGetNextExpireTime+0x16>
 8015072:	2201      	movs	r2, #1
 8015074:	e000      	b.n	8015078 <prvGetNextExpireTime+0x18>
 8015076:	2200      	movs	r2, #0
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	681b      	ldr	r3, [r3, #0]
 8015080:	2b00      	cmp	r3, #0
 8015082:	d105      	bne.n	8015090 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015084:	4b07      	ldr	r3, [pc, #28]	@ (80150a4 <prvGetNextExpireTime+0x44>)
 8015086:	681b      	ldr	r3, [r3, #0]
 8015088:	68db      	ldr	r3, [r3, #12]
 801508a:	681b      	ldr	r3, [r3, #0]
 801508c:	60fb      	str	r3, [r7, #12]
 801508e:	e001      	b.n	8015094 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8015090:	2300      	movs	r3, #0
 8015092:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8015094:	68fb      	ldr	r3, [r7, #12]
}
 8015096:	4618      	mov	r0, r3
 8015098:	3714      	adds	r7, #20
 801509a:	46bd      	mov	sp, r7
 801509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150a0:	4770      	bx	lr
 80150a2:	bf00      	nop
 80150a4:	24001634 	.word	0x24001634

080150a8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80150a8:	b580      	push	{r7, lr}
 80150aa:	b084      	sub	sp, #16
 80150ac:	af00      	add	r7, sp, #0
 80150ae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80150b0:	f7fe fe36 	bl	8013d20 <xTaskGetTickCount>
 80150b4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80150b6:	4b0b      	ldr	r3, [pc, #44]	@ (80150e4 <prvSampleTimeNow+0x3c>)
 80150b8:	681b      	ldr	r3, [r3, #0]
 80150ba:	68fa      	ldr	r2, [r7, #12]
 80150bc:	429a      	cmp	r2, r3
 80150be:	d205      	bcs.n	80150cc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80150c0:	f000 f93a 	bl	8015338 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	2201      	movs	r2, #1
 80150c8:	601a      	str	r2, [r3, #0]
 80150ca:	e002      	b.n	80150d2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	2200      	movs	r2, #0
 80150d0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80150d2:	4a04      	ldr	r2, [pc, #16]	@ (80150e4 <prvSampleTimeNow+0x3c>)
 80150d4:	68fb      	ldr	r3, [r7, #12]
 80150d6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80150d8:	68fb      	ldr	r3, [r7, #12]
}
 80150da:	4618      	mov	r0, r3
 80150dc:	3710      	adds	r7, #16
 80150de:	46bd      	mov	sp, r7
 80150e0:	bd80      	pop	{r7, pc}
 80150e2:	bf00      	nop
 80150e4:	24001644 	.word	0x24001644

080150e8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80150e8:	b580      	push	{r7, lr}
 80150ea:	b086      	sub	sp, #24
 80150ec:	af00      	add	r7, sp, #0
 80150ee:	60f8      	str	r0, [r7, #12]
 80150f0:	60b9      	str	r1, [r7, #8]
 80150f2:	607a      	str	r2, [r7, #4]
 80150f4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80150f6:	2300      	movs	r3, #0
 80150f8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80150fa:	68fb      	ldr	r3, [r7, #12]
 80150fc:	68ba      	ldr	r2, [r7, #8]
 80150fe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015100:	68fb      	ldr	r3, [r7, #12]
 8015102:	68fa      	ldr	r2, [r7, #12]
 8015104:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8015106:	68ba      	ldr	r2, [r7, #8]
 8015108:	687b      	ldr	r3, [r7, #4]
 801510a:	429a      	cmp	r2, r3
 801510c:	d812      	bhi.n	8015134 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801510e:	687a      	ldr	r2, [r7, #4]
 8015110:	683b      	ldr	r3, [r7, #0]
 8015112:	1ad2      	subs	r2, r2, r3
 8015114:	68fb      	ldr	r3, [r7, #12]
 8015116:	699b      	ldr	r3, [r3, #24]
 8015118:	429a      	cmp	r2, r3
 801511a:	d302      	bcc.n	8015122 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801511c:	2301      	movs	r3, #1
 801511e:	617b      	str	r3, [r7, #20]
 8015120:	e01b      	b.n	801515a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8015122:	4b10      	ldr	r3, [pc, #64]	@ (8015164 <prvInsertTimerInActiveList+0x7c>)
 8015124:	681a      	ldr	r2, [r3, #0]
 8015126:	68fb      	ldr	r3, [r7, #12]
 8015128:	3304      	adds	r3, #4
 801512a:	4619      	mov	r1, r3
 801512c:	4610      	mov	r0, r2
 801512e:	f7fd fa58 	bl	80125e2 <vListInsert>
 8015132:	e012      	b.n	801515a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8015134:	687a      	ldr	r2, [r7, #4]
 8015136:	683b      	ldr	r3, [r7, #0]
 8015138:	429a      	cmp	r2, r3
 801513a:	d206      	bcs.n	801514a <prvInsertTimerInActiveList+0x62>
 801513c:	68ba      	ldr	r2, [r7, #8]
 801513e:	683b      	ldr	r3, [r7, #0]
 8015140:	429a      	cmp	r2, r3
 8015142:	d302      	bcc.n	801514a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8015144:	2301      	movs	r3, #1
 8015146:	617b      	str	r3, [r7, #20]
 8015148:	e007      	b.n	801515a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801514a:	4b07      	ldr	r3, [pc, #28]	@ (8015168 <prvInsertTimerInActiveList+0x80>)
 801514c:	681a      	ldr	r2, [r3, #0]
 801514e:	68fb      	ldr	r3, [r7, #12]
 8015150:	3304      	adds	r3, #4
 8015152:	4619      	mov	r1, r3
 8015154:	4610      	mov	r0, r2
 8015156:	f7fd fa44 	bl	80125e2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801515a:	697b      	ldr	r3, [r7, #20]
}
 801515c:	4618      	mov	r0, r3
 801515e:	3718      	adds	r7, #24
 8015160:	46bd      	mov	sp, r7
 8015162:	bd80      	pop	{r7, pc}
 8015164:	24001638 	.word	0x24001638
 8015168:	24001634 	.word	0x24001634

0801516c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801516c:	b580      	push	{r7, lr}
 801516e:	b08e      	sub	sp, #56	@ 0x38
 8015170:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8015172:	e0ce      	b.n	8015312 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	2b00      	cmp	r3, #0
 8015178:	da19      	bge.n	80151ae <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801517a:	1d3b      	adds	r3, r7, #4
 801517c:	3304      	adds	r3, #4
 801517e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8015180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015182:	2b00      	cmp	r3, #0
 8015184:	d10b      	bne.n	801519e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8015186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801518a:	f383 8811 	msr	BASEPRI, r3
 801518e:	f3bf 8f6f 	isb	sy
 8015192:	f3bf 8f4f 	dsb	sy
 8015196:	61fb      	str	r3, [r7, #28]
}
 8015198:	bf00      	nop
 801519a:	bf00      	nop
 801519c:	e7fd      	b.n	801519a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801519e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151a0:	681b      	ldr	r3, [r3, #0]
 80151a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80151a4:	6850      	ldr	r0, [r2, #4]
 80151a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80151a8:	6892      	ldr	r2, [r2, #8]
 80151aa:	4611      	mov	r1, r2
 80151ac:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80151ae:	687b      	ldr	r3, [r7, #4]
 80151b0:	2b00      	cmp	r3, #0
 80151b2:	f2c0 80ae 	blt.w	8015312 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80151b6:	68fb      	ldr	r3, [r7, #12]
 80151b8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80151ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80151bc:	695b      	ldr	r3, [r3, #20]
 80151be:	2b00      	cmp	r3, #0
 80151c0:	d004      	beq.n	80151cc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80151c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80151c4:	3304      	adds	r3, #4
 80151c6:	4618      	mov	r0, r3
 80151c8:	f7fd fa44 	bl	8012654 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80151cc:	463b      	mov	r3, r7
 80151ce:	4618      	mov	r0, r3
 80151d0:	f7ff ff6a 	bl	80150a8 <prvSampleTimeNow>
 80151d4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80151d6:	687b      	ldr	r3, [r7, #4]
 80151d8:	2b09      	cmp	r3, #9
 80151da:	f200 8097 	bhi.w	801530c <prvProcessReceivedCommands+0x1a0>
 80151de:	a201      	add	r2, pc, #4	@ (adr r2, 80151e4 <prvProcessReceivedCommands+0x78>)
 80151e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80151e4:	0801520d 	.word	0x0801520d
 80151e8:	0801520d 	.word	0x0801520d
 80151ec:	0801520d 	.word	0x0801520d
 80151f0:	08015283 	.word	0x08015283
 80151f4:	08015297 	.word	0x08015297
 80151f8:	080152e3 	.word	0x080152e3
 80151fc:	0801520d 	.word	0x0801520d
 8015200:	0801520d 	.word	0x0801520d
 8015204:	08015283 	.word	0x08015283
 8015208:	08015297 	.word	0x08015297
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801520c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801520e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015212:	f043 0301 	orr.w	r3, r3, #1
 8015216:	b2da      	uxtb	r2, r3
 8015218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801521a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801521e:	68ba      	ldr	r2, [r7, #8]
 8015220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015222:	699b      	ldr	r3, [r3, #24]
 8015224:	18d1      	adds	r1, r2, r3
 8015226:	68bb      	ldr	r3, [r7, #8]
 8015228:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801522a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801522c:	f7ff ff5c 	bl	80150e8 <prvInsertTimerInActiveList>
 8015230:	4603      	mov	r3, r0
 8015232:	2b00      	cmp	r3, #0
 8015234:	d06c      	beq.n	8015310 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015238:	6a1b      	ldr	r3, [r3, #32]
 801523a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801523c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801523e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015240:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015244:	f003 0304 	and.w	r3, r3, #4
 8015248:	2b00      	cmp	r3, #0
 801524a:	d061      	beq.n	8015310 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801524c:	68ba      	ldr	r2, [r7, #8]
 801524e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015250:	699b      	ldr	r3, [r3, #24]
 8015252:	441a      	add	r2, r3
 8015254:	2300      	movs	r3, #0
 8015256:	9300      	str	r3, [sp, #0]
 8015258:	2300      	movs	r3, #0
 801525a:	2100      	movs	r1, #0
 801525c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801525e:	f7ff fe01 	bl	8014e64 <xTimerGenericCommand>
 8015262:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8015264:	6a3b      	ldr	r3, [r7, #32]
 8015266:	2b00      	cmp	r3, #0
 8015268:	d152      	bne.n	8015310 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 801526a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801526e:	f383 8811 	msr	BASEPRI, r3
 8015272:	f3bf 8f6f 	isb	sy
 8015276:	f3bf 8f4f 	dsb	sy
 801527a:	61bb      	str	r3, [r7, #24]
}
 801527c:	bf00      	nop
 801527e:	bf00      	nop
 8015280:	e7fd      	b.n	801527e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015284:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015288:	f023 0301 	bic.w	r3, r3, #1
 801528c:	b2da      	uxtb	r2, r3
 801528e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015290:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8015294:	e03d      	b.n	8015312 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015298:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801529c:	f043 0301 	orr.w	r3, r3, #1
 80152a0:	b2da      	uxtb	r2, r3
 80152a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80152a4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80152a8:	68ba      	ldr	r2, [r7, #8]
 80152aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80152ac:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80152ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80152b0:	699b      	ldr	r3, [r3, #24]
 80152b2:	2b00      	cmp	r3, #0
 80152b4:	d10b      	bne.n	80152ce <prvProcessReceivedCommands+0x162>
	__asm volatile
 80152b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80152ba:	f383 8811 	msr	BASEPRI, r3
 80152be:	f3bf 8f6f 	isb	sy
 80152c2:	f3bf 8f4f 	dsb	sy
 80152c6:	617b      	str	r3, [r7, #20]
}
 80152c8:	bf00      	nop
 80152ca:	bf00      	nop
 80152cc:	e7fd      	b.n	80152ca <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80152ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80152d0:	699a      	ldr	r2, [r3, #24]
 80152d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80152d4:	18d1      	adds	r1, r2, r3
 80152d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80152d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80152da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80152dc:	f7ff ff04 	bl	80150e8 <prvInsertTimerInActiveList>
					break;
 80152e0:	e017      	b.n	8015312 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80152e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80152e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80152e8:	f003 0302 	and.w	r3, r3, #2
 80152ec:	2b00      	cmp	r3, #0
 80152ee:	d103      	bne.n	80152f8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80152f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80152f2:	f000 fc09 	bl	8015b08 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80152f6:	e00c      	b.n	8015312 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80152f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80152fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80152fe:	f023 0301 	bic.w	r3, r3, #1
 8015302:	b2da      	uxtb	r2, r3
 8015304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015306:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 801530a:	e002      	b.n	8015312 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 801530c:	bf00      	nop
 801530e:	e000      	b.n	8015312 <prvProcessReceivedCommands+0x1a6>
					break;
 8015310:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8015312:	4b08      	ldr	r3, [pc, #32]	@ (8015334 <prvProcessReceivedCommands+0x1c8>)
 8015314:	681b      	ldr	r3, [r3, #0]
 8015316:	1d39      	adds	r1, r7, #4
 8015318:	2200      	movs	r2, #0
 801531a:	4618      	mov	r0, r3
 801531c:	f7fd fda8 	bl	8012e70 <xQueueReceive>
 8015320:	4603      	mov	r3, r0
 8015322:	2b00      	cmp	r3, #0
 8015324:	f47f af26 	bne.w	8015174 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8015328:	bf00      	nop
 801532a:	bf00      	nop
 801532c:	3730      	adds	r7, #48	@ 0x30
 801532e:	46bd      	mov	sp, r7
 8015330:	bd80      	pop	{r7, pc}
 8015332:	bf00      	nop
 8015334:	2400163c 	.word	0x2400163c

08015338 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8015338:	b580      	push	{r7, lr}
 801533a:	b088      	sub	sp, #32
 801533c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801533e:	e049      	b.n	80153d4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015340:	4b2e      	ldr	r3, [pc, #184]	@ (80153fc <prvSwitchTimerLists+0xc4>)
 8015342:	681b      	ldr	r3, [r3, #0]
 8015344:	68db      	ldr	r3, [r3, #12]
 8015346:	681b      	ldr	r3, [r3, #0]
 8015348:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801534a:	4b2c      	ldr	r3, [pc, #176]	@ (80153fc <prvSwitchTimerLists+0xc4>)
 801534c:	681b      	ldr	r3, [r3, #0]
 801534e:	68db      	ldr	r3, [r3, #12]
 8015350:	68db      	ldr	r3, [r3, #12]
 8015352:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015354:	68fb      	ldr	r3, [r7, #12]
 8015356:	3304      	adds	r3, #4
 8015358:	4618      	mov	r0, r3
 801535a:	f7fd f97b 	bl	8012654 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801535e:	68fb      	ldr	r3, [r7, #12]
 8015360:	6a1b      	ldr	r3, [r3, #32]
 8015362:	68f8      	ldr	r0, [r7, #12]
 8015364:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015366:	68fb      	ldr	r3, [r7, #12]
 8015368:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801536c:	f003 0304 	and.w	r3, r3, #4
 8015370:	2b00      	cmp	r3, #0
 8015372:	d02f      	beq.n	80153d4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8015374:	68fb      	ldr	r3, [r7, #12]
 8015376:	699b      	ldr	r3, [r3, #24]
 8015378:	693a      	ldr	r2, [r7, #16]
 801537a:	4413      	add	r3, r2
 801537c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801537e:	68ba      	ldr	r2, [r7, #8]
 8015380:	693b      	ldr	r3, [r7, #16]
 8015382:	429a      	cmp	r2, r3
 8015384:	d90e      	bls.n	80153a4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8015386:	68fb      	ldr	r3, [r7, #12]
 8015388:	68ba      	ldr	r2, [r7, #8]
 801538a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801538c:	68fb      	ldr	r3, [r7, #12]
 801538e:	68fa      	ldr	r2, [r7, #12]
 8015390:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8015392:	4b1a      	ldr	r3, [pc, #104]	@ (80153fc <prvSwitchTimerLists+0xc4>)
 8015394:	681a      	ldr	r2, [r3, #0]
 8015396:	68fb      	ldr	r3, [r7, #12]
 8015398:	3304      	adds	r3, #4
 801539a:	4619      	mov	r1, r3
 801539c:	4610      	mov	r0, r2
 801539e:	f7fd f920 	bl	80125e2 <vListInsert>
 80153a2:	e017      	b.n	80153d4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80153a4:	2300      	movs	r3, #0
 80153a6:	9300      	str	r3, [sp, #0]
 80153a8:	2300      	movs	r3, #0
 80153aa:	693a      	ldr	r2, [r7, #16]
 80153ac:	2100      	movs	r1, #0
 80153ae:	68f8      	ldr	r0, [r7, #12]
 80153b0:	f7ff fd58 	bl	8014e64 <xTimerGenericCommand>
 80153b4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80153b6:	687b      	ldr	r3, [r7, #4]
 80153b8:	2b00      	cmp	r3, #0
 80153ba:	d10b      	bne.n	80153d4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80153bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80153c0:	f383 8811 	msr	BASEPRI, r3
 80153c4:	f3bf 8f6f 	isb	sy
 80153c8:	f3bf 8f4f 	dsb	sy
 80153cc:	603b      	str	r3, [r7, #0]
}
 80153ce:	bf00      	nop
 80153d0:	bf00      	nop
 80153d2:	e7fd      	b.n	80153d0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80153d4:	4b09      	ldr	r3, [pc, #36]	@ (80153fc <prvSwitchTimerLists+0xc4>)
 80153d6:	681b      	ldr	r3, [r3, #0]
 80153d8:	681b      	ldr	r3, [r3, #0]
 80153da:	2b00      	cmp	r3, #0
 80153dc:	d1b0      	bne.n	8015340 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80153de:	4b07      	ldr	r3, [pc, #28]	@ (80153fc <prvSwitchTimerLists+0xc4>)
 80153e0:	681b      	ldr	r3, [r3, #0]
 80153e2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80153e4:	4b06      	ldr	r3, [pc, #24]	@ (8015400 <prvSwitchTimerLists+0xc8>)
 80153e6:	681b      	ldr	r3, [r3, #0]
 80153e8:	4a04      	ldr	r2, [pc, #16]	@ (80153fc <prvSwitchTimerLists+0xc4>)
 80153ea:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80153ec:	4a04      	ldr	r2, [pc, #16]	@ (8015400 <prvSwitchTimerLists+0xc8>)
 80153ee:	697b      	ldr	r3, [r7, #20]
 80153f0:	6013      	str	r3, [r2, #0]
}
 80153f2:	bf00      	nop
 80153f4:	3718      	adds	r7, #24
 80153f6:	46bd      	mov	sp, r7
 80153f8:	bd80      	pop	{r7, pc}
 80153fa:	bf00      	nop
 80153fc:	24001634 	.word	0x24001634
 8015400:	24001638 	.word	0x24001638

08015404 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8015404:	b580      	push	{r7, lr}
 8015406:	b082      	sub	sp, #8
 8015408:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801540a:	f000 f98d 	bl	8015728 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801540e:	4b15      	ldr	r3, [pc, #84]	@ (8015464 <prvCheckForValidListAndQueue+0x60>)
 8015410:	681b      	ldr	r3, [r3, #0]
 8015412:	2b00      	cmp	r3, #0
 8015414:	d120      	bne.n	8015458 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8015416:	4814      	ldr	r0, [pc, #80]	@ (8015468 <prvCheckForValidListAndQueue+0x64>)
 8015418:	f7fd f892 	bl	8012540 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801541c:	4813      	ldr	r0, [pc, #76]	@ (801546c <prvCheckForValidListAndQueue+0x68>)
 801541e:	f7fd f88f 	bl	8012540 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8015422:	4b13      	ldr	r3, [pc, #76]	@ (8015470 <prvCheckForValidListAndQueue+0x6c>)
 8015424:	4a10      	ldr	r2, [pc, #64]	@ (8015468 <prvCheckForValidListAndQueue+0x64>)
 8015426:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8015428:	4b12      	ldr	r3, [pc, #72]	@ (8015474 <prvCheckForValidListAndQueue+0x70>)
 801542a:	4a10      	ldr	r2, [pc, #64]	@ (801546c <prvCheckForValidListAndQueue+0x68>)
 801542c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801542e:	2300      	movs	r3, #0
 8015430:	9300      	str	r3, [sp, #0]
 8015432:	4b11      	ldr	r3, [pc, #68]	@ (8015478 <prvCheckForValidListAndQueue+0x74>)
 8015434:	4a11      	ldr	r2, [pc, #68]	@ (801547c <prvCheckForValidListAndQueue+0x78>)
 8015436:	2110      	movs	r1, #16
 8015438:	200a      	movs	r0, #10
 801543a:	f7fd f99f 	bl	801277c <xQueueGenericCreateStatic>
 801543e:	4603      	mov	r3, r0
 8015440:	4a08      	ldr	r2, [pc, #32]	@ (8015464 <prvCheckForValidListAndQueue+0x60>)
 8015442:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8015444:	4b07      	ldr	r3, [pc, #28]	@ (8015464 <prvCheckForValidListAndQueue+0x60>)
 8015446:	681b      	ldr	r3, [r3, #0]
 8015448:	2b00      	cmp	r3, #0
 801544a:	d005      	beq.n	8015458 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801544c:	4b05      	ldr	r3, [pc, #20]	@ (8015464 <prvCheckForValidListAndQueue+0x60>)
 801544e:	681b      	ldr	r3, [r3, #0]
 8015450:	490b      	ldr	r1, [pc, #44]	@ (8015480 <prvCheckForValidListAndQueue+0x7c>)
 8015452:	4618      	mov	r0, r3
 8015454:	f7fe f8cc 	bl	80135f0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015458:	f000 f998 	bl	801578c <vPortExitCritical>
}
 801545c:	bf00      	nop
 801545e:	46bd      	mov	sp, r7
 8015460:	bd80      	pop	{r7, pc}
 8015462:	bf00      	nop
 8015464:	2400163c 	.word	0x2400163c
 8015468:	2400160c 	.word	0x2400160c
 801546c:	24001620 	.word	0x24001620
 8015470:	24001634 	.word	0x24001634
 8015474:	24001638 	.word	0x24001638
 8015478:	240016e8 	.word	0x240016e8
 801547c:	24001648 	.word	0x24001648
 8015480:	080175f8 	.word	0x080175f8

08015484 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8015484:	b580      	push	{r7, lr}
 8015486:	b08a      	sub	sp, #40	@ 0x28
 8015488:	af00      	add	r7, sp, #0
 801548a:	60f8      	str	r0, [r7, #12]
 801548c:	60b9      	str	r1, [r7, #8]
 801548e:	607a      	str	r2, [r7, #4]
 8015490:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8015492:	f06f 0301 	mvn.w	r3, #1
 8015496:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8015498:	68fb      	ldr	r3, [r7, #12]
 801549a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 801549c:	68bb      	ldr	r3, [r7, #8]
 801549e:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80154a0:	687b      	ldr	r3, [r7, #4]
 80154a2:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80154a4:	4b06      	ldr	r3, [pc, #24]	@ (80154c0 <xTimerPendFunctionCallFromISR+0x3c>)
 80154a6:	6818      	ldr	r0, [r3, #0]
 80154a8:	f107 0114 	add.w	r1, r7, #20
 80154ac:	2300      	movs	r3, #0
 80154ae:	683a      	ldr	r2, [r7, #0]
 80154b0:	f7fd fbb0 	bl	8012c14 <xQueueGenericSendFromISR>
 80154b4:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 80154b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 80154b8:	4618      	mov	r0, r3
 80154ba:	3728      	adds	r7, #40	@ 0x28
 80154bc:	46bd      	mov	sp, r7
 80154be:	bd80      	pop	{r7, pc}
 80154c0:	2400163c 	.word	0x2400163c

080154c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80154c4:	b480      	push	{r7}
 80154c6:	b085      	sub	sp, #20
 80154c8:	af00      	add	r7, sp, #0
 80154ca:	60f8      	str	r0, [r7, #12]
 80154cc:	60b9      	str	r1, [r7, #8]
 80154ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80154d0:	68fb      	ldr	r3, [r7, #12]
 80154d2:	3b04      	subs	r3, #4
 80154d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80154d6:	68fb      	ldr	r3, [r7, #12]
 80154d8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80154dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80154de:	68fb      	ldr	r3, [r7, #12]
 80154e0:	3b04      	subs	r3, #4
 80154e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80154e4:	68bb      	ldr	r3, [r7, #8]
 80154e6:	f023 0201 	bic.w	r2, r3, #1
 80154ea:	68fb      	ldr	r3, [r7, #12]
 80154ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80154ee:	68fb      	ldr	r3, [r7, #12]
 80154f0:	3b04      	subs	r3, #4
 80154f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80154f4:	4a0c      	ldr	r2, [pc, #48]	@ (8015528 <pxPortInitialiseStack+0x64>)
 80154f6:	68fb      	ldr	r3, [r7, #12]
 80154f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80154fa:	68fb      	ldr	r3, [r7, #12]
 80154fc:	3b14      	subs	r3, #20
 80154fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8015500:	687a      	ldr	r2, [r7, #4]
 8015502:	68fb      	ldr	r3, [r7, #12]
 8015504:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8015506:	68fb      	ldr	r3, [r7, #12]
 8015508:	3b04      	subs	r3, #4
 801550a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801550c:	68fb      	ldr	r3, [r7, #12]
 801550e:	f06f 0202 	mvn.w	r2, #2
 8015512:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8015514:	68fb      	ldr	r3, [r7, #12]
 8015516:	3b20      	subs	r3, #32
 8015518:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801551a:	68fb      	ldr	r3, [r7, #12]
}
 801551c:	4618      	mov	r0, r3
 801551e:	3714      	adds	r7, #20
 8015520:	46bd      	mov	sp, r7
 8015522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015526:	4770      	bx	lr
 8015528:	0801552d 	.word	0x0801552d

0801552c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801552c:	b480      	push	{r7}
 801552e:	b085      	sub	sp, #20
 8015530:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8015532:	2300      	movs	r3, #0
 8015534:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8015536:	4b13      	ldr	r3, [pc, #76]	@ (8015584 <prvTaskExitError+0x58>)
 8015538:	681b      	ldr	r3, [r3, #0]
 801553a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801553e:	d00b      	beq.n	8015558 <prvTaskExitError+0x2c>
	__asm volatile
 8015540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015544:	f383 8811 	msr	BASEPRI, r3
 8015548:	f3bf 8f6f 	isb	sy
 801554c:	f3bf 8f4f 	dsb	sy
 8015550:	60fb      	str	r3, [r7, #12]
}
 8015552:	bf00      	nop
 8015554:	bf00      	nop
 8015556:	e7fd      	b.n	8015554 <prvTaskExitError+0x28>
	__asm volatile
 8015558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801555c:	f383 8811 	msr	BASEPRI, r3
 8015560:	f3bf 8f6f 	isb	sy
 8015564:	f3bf 8f4f 	dsb	sy
 8015568:	60bb      	str	r3, [r7, #8]
}
 801556a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801556c:	bf00      	nop
 801556e:	687b      	ldr	r3, [r7, #4]
 8015570:	2b00      	cmp	r3, #0
 8015572:	d0fc      	beq.n	801556e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8015574:	bf00      	nop
 8015576:	bf00      	nop
 8015578:	3714      	adds	r7, #20
 801557a:	46bd      	mov	sp, r7
 801557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015580:	4770      	bx	lr
 8015582:	bf00      	nop
 8015584:	24000010 	.word	0x24000010
	...

08015590 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8015590:	4b07      	ldr	r3, [pc, #28]	@ (80155b0 <pxCurrentTCBConst2>)
 8015592:	6819      	ldr	r1, [r3, #0]
 8015594:	6808      	ldr	r0, [r1, #0]
 8015596:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801559a:	f380 8809 	msr	PSP, r0
 801559e:	f3bf 8f6f 	isb	sy
 80155a2:	f04f 0000 	mov.w	r0, #0
 80155a6:	f380 8811 	msr	BASEPRI, r0
 80155aa:	4770      	bx	lr
 80155ac:	f3af 8000 	nop.w

080155b0 <pxCurrentTCBConst2>:
 80155b0:	2400110c 	.word	0x2400110c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80155b4:	bf00      	nop
 80155b6:	bf00      	nop

080155b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80155b8:	4808      	ldr	r0, [pc, #32]	@ (80155dc <prvPortStartFirstTask+0x24>)
 80155ba:	6800      	ldr	r0, [r0, #0]
 80155bc:	6800      	ldr	r0, [r0, #0]
 80155be:	f380 8808 	msr	MSP, r0
 80155c2:	f04f 0000 	mov.w	r0, #0
 80155c6:	f380 8814 	msr	CONTROL, r0
 80155ca:	b662      	cpsie	i
 80155cc:	b661      	cpsie	f
 80155ce:	f3bf 8f4f 	dsb	sy
 80155d2:	f3bf 8f6f 	isb	sy
 80155d6:	df00      	svc	0
 80155d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80155da:	bf00      	nop
 80155dc:	e000ed08 	.word	0xe000ed08

080155e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80155e0:	b580      	push	{r7, lr}
 80155e2:	b086      	sub	sp, #24
 80155e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80155e6:	4b47      	ldr	r3, [pc, #284]	@ (8015704 <xPortStartScheduler+0x124>)
 80155e8:	681b      	ldr	r3, [r3, #0]
 80155ea:	4a47      	ldr	r2, [pc, #284]	@ (8015708 <xPortStartScheduler+0x128>)
 80155ec:	4293      	cmp	r3, r2
 80155ee:	d10b      	bne.n	8015608 <xPortStartScheduler+0x28>
	__asm volatile
 80155f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80155f4:	f383 8811 	msr	BASEPRI, r3
 80155f8:	f3bf 8f6f 	isb	sy
 80155fc:	f3bf 8f4f 	dsb	sy
 8015600:	60fb      	str	r3, [r7, #12]
}
 8015602:	bf00      	nop
 8015604:	bf00      	nop
 8015606:	e7fd      	b.n	8015604 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8015608:	4b3e      	ldr	r3, [pc, #248]	@ (8015704 <xPortStartScheduler+0x124>)
 801560a:	681b      	ldr	r3, [r3, #0]
 801560c:	4a3f      	ldr	r2, [pc, #252]	@ (801570c <xPortStartScheduler+0x12c>)
 801560e:	4293      	cmp	r3, r2
 8015610:	d10b      	bne.n	801562a <xPortStartScheduler+0x4a>
	__asm volatile
 8015612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015616:	f383 8811 	msr	BASEPRI, r3
 801561a:	f3bf 8f6f 	isb	sy
 801561e:	f3bf 8f4f 	dsb	sy
 8015622:	613b      	str	r3, [r7, #16]
}
 8015624:	bf00      	nop
 8015626:	bf00      	nop
 8015628:	e7fd      	b.n	8015626 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801562a:	4b39      	ldr	r3, [pc, #228]	@ (8015710 <xPortStartScheduler+0x130>)
 801562c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801562e:	697b      	ldr	r3, [r7, #20]
 8015630:	781b      	ldrb	r3, [r3, #0]
 8015632:	b2db      	uxtb	r3, r3
 8015634:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8015636:	697b      	ldr	r3, [r7, #20]
 8015638:	22ff      	movs	r2, #255	@ 0xff
 801563a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801563c:	697b      	ldr	r3, [r7, #20]
 801563e:	781b      	ldrb	r3, [r3, #0]
 8015640:	b2db      	uxtb	r3, r3
 8015642:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8015644:	78fb      	ldrb	r3, [r7, #3]
 8015646:	b2db      	uxtb	r3, r3
 8015648:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801564c:	b2da      	uxtb	r2, r3
 801564e:	4b31      	ldr	r3, [pc, #196]	@ (8015714 <xPortStartScheduler+0x134>)
 8015650:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8015652:	4b31      	ldr	r3, [pc, #196]	@ (8015718 <xPortStartScheduler+0x138>)
 8015654:	2207      	movs	r2, #7
 8015656:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015658:	e009      	b.n	801566e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 801565a:	4b2f      	ldr	r3, [pc, #188]	@ (8015718 <xPortStartScheduler+0x138>)
 801565c:	681b      	ldr	r3, [r3, #0]
 801565e:	3b01      	subs	r3, #1
 8015660:	4a2d      	ldr	r2, [pc, #180]	@ (8015718 <xPortStartScheduler+0x138>)
 8015662:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8015664:	78fb      	ldrb	r3, [r7, #3]
 8015666:	b2db      	uxtb	r3, r3
 8015668:	005b      	lsls	r3, r3, #1
 801566a:	b2db      	uxtb	r3, r3
 801566c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801566e:	78fb      	ldrb	r3, [r7, #3]
 8015670:	b2db      	uxtb	r3, r3
 8015672:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8015676:	2b80      	cmp	r3, #128	@ 0x80
 8015678:	d0ef      	beq.n	801565a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801567a:	4b27      	ldr	r3, [pc, #156]	@ (8015718 <xPortStartScheduler+0x138>)
 801567c:	681b      	ldr	r3, [r3, #0]
 801567e:	f1c3 0307 	rsb	r3, r3, #7
 8015682:	2b04      	cmp	r3, #4
 8015684:	d00b      	beq.n	801569e <xPortStartScheduler+0xbe>
	__asm volatile
 8015686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801568a:	f383 8811 	msr	BASEPRI, r3
 801568e:	f3bf 8f6f 	isb	sy
 8015692:	f3bf 8f4f 	dsb	sy
 8015696:	60bb      	str	r3, [r7, #8]
}
 8015698:	bf00      	nop
 801569a:	bf00      	nop
 801569c:	e7fd      	b.n	801569a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801569e:	4b1e      	ldr	r3, [pc, #120]	@ (8015718 <xPortStartScheduler+0x138>)
 80156a0:	681b      	ldr	r3, [r3, #0]
 80156a2:	021b      	lsls	r3, r3, #8
 80156a4:	4a1c      	ldr	r2, [pc, #112]	@ (8015718 <xPortStartScheduler+0x138>)
 80156a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80156a8:	4b1b      	ldr	r3, [pc, #108]	@ (8015718 <xPortStartScheduler+0x138>)
 80156aa:	681b      	ldr	r3, [r3, #0]
 80156ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80156b0:	4a19      	ldr	r2, [pc, #100]	@ (8015718 <xPortStartScheduler+0x138>)
 80156b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80156b4:	687b      	ldr	r3, [r7, #4]
 80156b6:	b2da      	uxtb	r2, r3
 80156b8:	697b      	ldr	r3, [r7, #20]
 80156ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80156bc:	4b17      	ldr	r3, [pc, #92]	@ (801571c <xPortStartScheduler+0x13c>)
 80156be:	681b      	ldr	r3, [r3, #0]
 80156c0:	4a16      	ldr	r2, [pc, #88]	@ (801571c <xPortStartScheduler+0x13c>)
 80156c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80156c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80156c8:	4b14      	ldr	r3, [pc, #80]	@ (801571c <xPortStartScheduler+0x13c>)
 80156ca:	681b      	ldr	r3, [r3, #0]
 80156cc:	4a13      	ldr	r2, [pc, #76]	@ (801571c <xPortStartScheduler+0x13c>)
 80156ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80156d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80156d4:	f000 f8da 	bl	801588c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80156d8:	4b11      	ldr	r3, [pc, #68]	@ (8015720 <xPortStartScheduler+0x140>)
 80156da:	2200      	movs	r2, #0
 80156dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80156de:	f000 f8f9 	bl	80158d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80156e2:	4b10      	ldr	r3, [pc, #64]	@ (8015724 <xPortStartScheduler+0x144>)
 80156e4:	681b      	ldr	r3, [r3, #0]
 80156e6:	4a0f      	ldr	r2, [pc, #60]	@ (8015724 <xPortStartScheduler+0x144>)
 80156e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80156ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80156ee:	f7ff ff63 	bl	80155b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80156f2:	f7fe fbf1 	bl	8013ed8 <vTaskSwitchContext>
	prvTaskExitError();
 80156f6:	f7ff ff19 	bl	801552c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80156fa:	2300      	movs	r3, #0
}
 80156fc:	4618      	mov	r0, r3
 80156fe:	3718      	adds	r7, #24
 8015700:	46bd      	mov	sp, r7
 8015702:	bd80      	pop	{r7, pc}
 8015704:	e000ed00 	.word	0xe000ed00
 8015708:	410fc271 	.word	0x410fc271
 801570c:	410fc270 	.word	0x410fc270
 8015710:	e000e400 	.word	0xe000e400
 8015714:	24001738 	.word	0x24001738
 8015718:	2400173c 	.word	0x2400173c
 801571c:	e000ed20 	.word	0xe000ed20
 8015720:	24000010 	.word	0x24000010
 8015724:	e000ef34 	.word	0xe000ef34

08015728 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8015728:	b480      	push	{r7}
 801572a:	b083      	sub	sp, #12
 801572c:	af00      	add	r7, sp, #0
	__asm volatile
 801572e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015732:	f383 8811 	msr	BASEPRI, r3
 8015736:	f3bf 8f6f 	isb	sy
 801573a:	f3bf 8f4f 	dsb	sy
 801573e:	607b      	str	r3, [r7, #4]
}
 8015740:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8015742:	4b10      	ldr	r3, [pc, #64]	@ (8015784 <vPortEnterCritical+0x5c>)
 8015744:	681b      	ldr	r3, [r3, #0]
 8015746:	3301      	adds	r3, #1
 8015748:	4a0e      	ldr	r2, [pc, #56]	@ (8015784 <vPortEnterCritical+0x5c>)
 801574a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801574c:	4b0d      	ldr	r3, [pc, #52]	@ (8015784 <vPortEnterCritical+0x5c>)
 801574e:	681b      	ldr	r3, [r3, #0]
 8015750:	2b01      	cmp	r3, #1
 8015752:	d110      	bne.n	8015776 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8015754:	4b0c      	ldr	r3, [pc, #48]	@ (8015788 <vPortEnterCritical+0x60>)
 8015756:	681b      	ldr	r3, [r3, #0]
 8015758:	b2db      	uxtb	r3, r3
 801575a:	2b00      	cmp	r3, #0
 801575c:	d00b      	beq.n	8015776 <vPortEnterCritical+0x4e>
	__asm volatile
 801575e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015762:	f383 8811 	msr	BASEPRI, r3
 8015766:	f3bf 8f6f 	isb	sy
 801576a:	f3bf 8f4f 	dsb	sy
 801576e:	603b      	str	r3, [r7, #0]
}
 8015770:	bf00      	nop
 8015772:	bf00      	nop
 8015774:	e7fd      	b.n	8015772 <vPortEnterCritical+0x4a>
	}
}
 8015776:	bf00      	nop
 8015778:	370c      	adds	r7, #12
 801577a:	46bd      	mov	sp, r7
 801577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015780:	4770      	bx	lr
 8015782:	bf00      	nop
 8015784:	24000010 	.word	0x24000010
 8015788:	e000ed04 	.word	0xe000ed04

0801578c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801578c:	b480      	push	{r7}
 801578e:	b083      	sub	sp, #12
 8015790:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8015792:	4b12      	ldr	r3, [pc, #72]	@ (80157dc <vPortExitCritical+0x50>)
 8015794:	681b      	ldr	r3, [r3, #0]
 8015796:	2b00      	cmp	r3, #0
 8015798:	d10b      	bne.n	80157b2 <vPortExitCritical+0x26>
	__asm volatile
 801579a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801579e:	f383 8811 	msr	BASEPRI, r3
 80157a2:	f3bf 8f6f 	isb	sy
 80157a6:	f3bf 8f4f 	dsb	sy
 80157aa:	607b      	str	r3, [r7, #4]
}
 80157ac:	bf00      	nop
 80157ae:	bf00      	nop
 80157b0:	e7fd      	b.n	80157ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80157b2:	4b0a      	ldr	r3, [pc, #40]	@ (80157dc <vPortExitCritical+0x50>)
 80157b4:	681b      	ldr	r3, [r3, #0]
 80157b6:	3b01      	subs	r3, #1
 80157b8:	4a08      	ldr	r2, [pc, #32]	@ (80157dc <vPortExitCritical+0x50>)
 80157ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80157bc:	4b07      	ldr	r3, [pc, #28]	@ (80157dc <vPortExitCritical+0x50>)
 80157be:	681b      	ldr	r3, [r3, #0]
 80157c0:	2b00      	cmp	r3, #0
 80157c2:	d105      	bne.n	80157d0 <vPortExitCritical+0x44>
 80157c4:	2300      	movs	r3, #0
 80157c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80157c8:	683b      	ldr	r3, [r7, #0]
 80157ca:	f383 8811 	msr	BASEPRI, r3
}
 80157ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80157d0:	bf00      	nop
 80157d2:	370c      	adds	r7, #12
 80157d4:	46bd      	mov	sp, r7
 80157d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157da:	4770      	bx	lr
 80157dc:	24000010 	.word	0x24000010

080157e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80157e0:	f3ef 8009 	mrs	r0, PSP
 80157e4:	f3bf 8f6f 	isb	sy
 80157e8:	4b15      	ldr	r3, [pc, #84]	@ (8015840 <pxCurrentTCBConst>)
 80157ea:	681a      	ldr	r2, [r3, #0]
 80157ec:	f01e 0f10 	tst.w	lr, #16
 80157f0:	bf08      	it	eq
 80157f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80157f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157fa:	6010      	str	r0, [r2, #0]
 80157fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8015800:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8015804:	f380 8811 	msr	BASEPRI, r0
 8015808:	f3bf 8f4f 	dsb	sy
 801580c:	f3bf 8f6f 	isb	sy
 8015810:	f7fe fb62 	bl	8013ed8 <vTaskSwitchContext>
 8015814:	f04f 0000 	mov.w	r0, #0
 8015818:	f380 8811 	msr	BASEPRI, r0
 801581c:	bc09      	pop	{r0, r3}
 801581e:	6819      	ldr	r1, [r3, #0]
 8015820:	6808      	ldr	r0, [r1, #0]
 8015822:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015826:	f01e 0f10 	tst.w	lr, #16
 801582a:	bf08      	it	eq
 801582c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8015830:	f380 8809 	msr	PSP, r0
 8015834:	f3bf 8f6f 	isb	sy
 8015838:	4770      	bx	lr
 801583a:	bf00      	nop
 801583c:	f3af 8000 	nop.w

08015840 <pxCurrentTCBConst>:
 8015840:	2400110c 	.word	0x2400110c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8015844:	bf00      	nop
 8015846:	bf00      	nop

08015848 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8015848:	b580      	push	{r7, lr}
 801584a:	b082      	sub	sp, #8
 801584c:	af00      	add	r7, sp, #0
	__asm volatile
 801584e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015852:	f383 8811 	msr	BASEPRI, r3
 8015856:	f3bf 8f6f 	isb	sy
 801585a:	f3bf 8f4f 	dsb	sy
 801585e:	607b      	str	r3, [r7, #4]
}
 8015860:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8015862:	f7fe fa7f 	bl	8013d64 <xTaskIncrementTick>
 8015866:	4603      	mov	r3, r0
 8015868:	2b00      	cmp	r3, #0
 801586a:	d003      	beq.n	8015874 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801586c:	4b06      	ldr	r3, [pc, #24]	@ (8015888 <xPortSysTickHandler+0x40>)
 801586e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015872:	601a      	str	r2, [r3, #0]
 8015874:	2300      	movs	r3, #0
 8015876:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015878:	683b      	ldr	r3, [r7, #0]
 801587a:	f383 8811 	msr	BASEPRI, r3
}
 801587e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8015880:	bf00      	nop
 8015882:	3708      	adds	r7, #8
 8015884:	46bd      	mov	sp, r7
 8015886:	bd80      	pop	{r7, pc}
 8015888:	e000ed04 	.word	0xe000ed04

0801588c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801588c:	b480      	push	{r7}
 801588e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8015890:	4b0b      	ldr	r3, [pc, #44]	@ (80158c0 <vPortSetupTimerInterrupt+0x34>)
 8015892:	2200      	movs	r2, #0
 8015894:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8015896:	4b0b      	ldr	r3, [pc, #44]	@ (80158c4 <vPortSetupTimerInterrupt+0x38>)
 8015898:	2200      	movs	r2, #0
 801589a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801589c:	4b0a      	ldr	r3, [pc, #40]	@ (80158c8 <vPortSetupTimerInterrupt+0x3c>)
 801589e:	681b      	ldr	r3, [r3, #0]
 80158a0:	4a0a      	ldr	r2, [pc, #40]	@ (80158cc <vPortSetupTimerInterrupt+0x40>)
 80158a2:	fba2 2303 	umull	r2, r3, r2, r3
 80158a6:	099b      	lsrs	r3, r3, #6
 80158a8:	4a09      	ldr	r2, [pc, #36]	@ (80158d0 <vPortSetupTimerInterrupt+0x44>)
 80158aa:	3b01      	subs	r3, #1
 80158ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80158ae:	4b04      	ldr	r3, [pc, #16]	@ (80158c0 <vPortSetupTimerInterrupt+0x34>)
 80158b0:	2207      	movs	r2, #7
 80158b2:	601a      	str	r2, [r3, #0]
}
 80158b4:	bf00      	nop
 80158b6:	46bd      	mov	sp, r7
 80158b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158bc:	4770      	bx	lr
 80158be:	bf00      	nop
 80158c0:	e000e010 	.word	0xe000e010
 80158c4:	e000e018 	.word	0xe000e018
 80158c8:	24000000 	.word	0x24000000
 80158cc:	10624dd3 	.word	0x10624dd3
 80158d0:	e000e014 	.word	0xe000e014

080158d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80158d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80158e4 <vPortEnableVFP+0x10>
 80158d8:	6801      	ldr	r1, [r0, #0]
 80158da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80158de:	6001      	str	r1, [r0, #0]
 80158e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80158e2:	bf00      	nop
 80158e4:	e000ed88 	.word	0xe000ed88

080158e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80158e8:	b480      	push	{r7}
 80158ea:	b085      	sub	sp, #20
 80158ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80158ee:	f3ef 8305 	mrs	r3, IPSR
 80158f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80158f4:	68fb      	ldr	r3, [r7, #12]
 80158f6:	2b0f      	cmp	r3, #15
 80158f8:	d915      	bls.n	8015926 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80158fa:	4a18      	ldr	r2, [pc, #96]	@ (801595c <vPortValidateInterruptPriority+0x74>)
 80158fc:	68fb      	ldr	r3, [r7, #12]
 80158fe:	4413      	add	r3, r2
 8015900:	781b      	ldrb	r3, [r3, #0]
 8015902:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8015904:	4b16      	ldr	r3, [pc, #88]	@ (8015960 <vPortValidateInterruptPriority+0x78>)
 8015906:	781b      	ldrb	r3, [r3, #0]
 8015908:	7afa      	ldrb	r2, [r7, #11]
 801590a:	429a      	cmp	r2, r3
 801590c:	d20b      	bcs.n	8015926 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801590e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015912:	f383 8811 	msr	BASEPRI, r3
 8015916:	f3bf 8f6f 	isb	sy
 801591a:	f3bf 8f4f 	dsb	sy
 801591e:	607b      	str	r3, [r7, #4]
}
 8015920:	bf00      	nop
 8015922:	bf00      	nop
 8015924:	e7fd      	b.n	8015922 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8015926:	4b0f      	ldr	r3, [pc, #60]	@ (8015964 <vPortValidateInterruptPriority+0x7c>)
 8015928:	681b      	ldr	r3, [r3, #0]
 801592a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801592e:	4b0e      	ldr	r3, [pc, #56]	@ (8015968 <vPortValidateInterruptPriority+0x80>)
 8015930:	681b      	ldr	r3, [r3, #0]
 8015932:	429a      	cmp	r2, r3
 8015934:	d90b      	bls.n	801594e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8015936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801593a:	f383 8811 	msr	BASEPRI, r3
 801593e:	f3bf 8f6f 	isb	sy
 8015942:	f3bf 8f4f 	dsb	sy
 8015946:	603b      	str	r3, [r7, #0]
}
 8015948:	bf00      	nop
 801594a:	bf00      	nop
 801594c:	e7fd      	b.n	801594a <vPortValidateInterruptPriority+0x62>
	}
 801594e:	bf00      	nop
 8015950:	3714      	adds	r7, #20
 8015952:	46bd      	mov	sp, r7
 8015954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015958:	4770      	bx	lr
 801595a:	bf00      	nop
 801595c:	e000e3f0 	.word	0xe000e3f0
 8015960:	24001738 	.word	0x24001738
 8015964:	e000ed0c 	.word	0xe000ed0c
 8015968:	2400173c 	.word	0x2400173c

0801596c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801596c:	b580      	push	{r7, lr}
 801596e:	b08a      	sub	sp, #40	@ 0x28
 8015970:	af00      	add	r7, sp, #0
 8015972:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8015974:	2300      	movs	r3, #0
 8015976:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8015978:	f7fe f926 	bl	8013bc8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801597c:	4b5c      	ldr	r3, [pc, #368]	@ (8015af0 <pvPortMalloc+0x184>)
 801597e:	681b      	ldr	r3, [r3, #0]
 8015980:	2b00      	cmp	r3, #0
 8015982:	d101      	bne.n	8015988 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8015984:	f000 f924 	bl	8015bd0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8015988:	4b5a      	ldr	r3, [pc, #360]	@ (8015af4 <pvPortMalloc+0x188>)
 801598a:	681a      	ldr	r2, [r3, #0]
 801598c:	687b      	ldr	r3, [r7, #4]
 801598e:	4013      	ands	r3, r2
 8015990:	2b00      	cmp	r3, #0
 8015992:	f040 8095 	bne.w	8015ac0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8015996:	687b      	ldr	r3, [r7, #4]
 8015998:	2b00      	cmp	r3, #0
 801599a:	d01e      	beq.n	80159da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801599c:	2208      	movs	r2, #8
 801599e:	687b      	ldr	r3, [r7, #4]
 80159a0:	4413      	add	r3, r2
 80159a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80159a4:	687b      	ldr	r3, [r7, #4]
 80159a6:	f003 0307 	and.w	r3, r3, #7
 80159aa:	2b00      	cmp	r3, #0
 80159ac:	d015      	beq.n	80159da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80159ae:	687b      	ldr	r3, [r7, #4]
 80159b0:	f023 0307 	bic.w	r3, r3, #7
 80159b4:	3308      	adds	r3, #8
 80159b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80159b8:	687b      	ldr	r3, [r7, #4]
 80159ba:	f003 0307 	and.w	r3, r3, #7
 80159be:	2b00      	cmp	r3, #0
 80159c0:	d00b      	beq.n	80159da <pvPortMalloc+0x6e>
	__asm volatile
 80159c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80159c6:	f383 8811 	msr	BASEPRI, r3
 80159ca:	f3bf 8f6f 	isb	sy
 80159ce:	f3bf 8f4f 	dsb	sy
 80159d2:	617b      	str	r3, [r7, #20]
}
 80159d4:	bf00      	nop
 80159d6:	bf00      	nop
 80159d8:	e7fd      	b.n	80159d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80159da:	687b      	ldr	r3, [r7, #4]
 80159dc:	2b00      	cmp	r3, #0
 80159de:	d06f      	beq.n	8015ac0 <pvPortMalloc+0x154>
 80159e0:	4b45      	ldr	r3, [pc, #276]	@ (8015af8 <pvPortMalloc+0x18c>)
 80159e2:	681b      	ldr	r3, [r3, #0]
 80159e4:	687a      	ldr	r2, [r7, #4]
 80159e6:	429a      	cmp	r2, r3
 80159e8:	d86a      	bhi.n	8015ac0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80159ea:	4b44      	ldr	r3, [pc, #272]	@ (8015afc <pvPortMalloc+0x190>)
 80159ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80159ee:	4b43      	ldr	r3, [pc, #268]	@ (8015afc <pvPortMalloc+0x190>)
 80159f0:	681b      	ldr	r3, [r3, #0]
 80159f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80159f4:	e004      	b.n	8015a00 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80159f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80159fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159fc:	681b      	ldr	r3, [r3, #0]
 80159fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a02:	685b      	ldr	r3, [r3, #4]
 8015a04:	687a      	ldr	r2, [r7, #4]
 8015a06:	429a      	cmp	r2, r3
 8015a08:	d903      	bls.n	8015a12 <pvPortMalloc+0xa6>
 8015a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a0c:	681b      	ldr	r3, [r3, #0]
 8015a0e:	2b00      	cmp	r3, #0
 8015a10:	d1f1      	bne.n	80159f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8015a12:	4b37      	ldr	r3, [pc, #220]	@ (8015af0 <pvPortMalloc+0x184>)
 8015a14:	681b      	ldr	r3, [r3, #0]
 8015a16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015a18:	429a      	cmp	r2, r3
 8015a1a:	d051      	beq.n	8015ac0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8015a1c:	6a3b      	ldr	r3, [r7, #32]
 8015a1e:	681b      	ldr	r3, [r3, #0]
 8015a20:	2208      	movs	r2, #8
 8015a22:	4413      	add	r3, r2
 8015a24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a28:	681a      	ldr	r2, [r3, #0]
 8015a2a:	6a3b      	ldr	r3, [r7, #32]
 8015a2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8015a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a30:	685a      	ldr	r2, [r3, #4]
 8015a32:	687b      	ldr	r3, [r7, #4]
 8015a34:	1ad2      	subs	r2, r2, r3
 8015a36:	2308      	movs	r3, #8
 8015a38:	005b      	lsls	r3, r3, #1
 8015a3a:	429a      	cmp	r2, r3
 8015a3c:	d920      	bls.n	8015a80 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8015a3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	4413      	add	r3, r2
 8015a44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015a46:	69bb      	ldr	r3, [r7, #24]
 8015a48:	f003 0307 	and.w	r3, r3, #7
 8015a4c:	2b00      	cmp	r3, #0
 8015a4e:	d00b      	beq.n	8015a68 <pvPortMalloc+0xfc>
	__asm volatile
 8015a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015a54:	f383 8811 	msr	BASEPRI, r3
 8015a58:	f3bf 8f6f 	isb	sy
 8015a5c:	f3bf 8f4f 	dsb	sy
 8015a60:	613b      	str	r3, [r7, #16]
}
 8015a62:	bf00      	nop
 8015a64:	bf00      	nop
 8015a66:	e7fd      	b.n	8015a64 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8015a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a6a:	685a      	ldr	r2, [r3, #4]
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	1ad2      	subs	r2, r2, r3
 8015a70:	69bb      	ldr	r3, [r7, #24]
 8015a72:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8015a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a76:	687a      	ldr	r2, [r7, #4]
 8015a78:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8015a7a:	69b8      	ldr	r0, [r7, #24]
 8015a7c:	f000 f90a 	bl	8015c94 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8015a80:	4b1d      	ldr	r3, [pc, #116]	@ (8015af8 <pvPortMalloc+0x18c>)
 8015a82:	681a      	ldr	r2, [r3, #0]
 8015a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a86:	685b      	ldr	r3, [r3, #4]
 8015a88:	1ad3      	subs	r3, r2, r3
 8015a8a:	4a1b      	ldr	r2, [pc, #108]	@ (8015af8 <pvPortMalloc+0x18c>)
 8015a8c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8015a8e:	4b1a      	ldr	r3, [pc, #104]	@ (8015af8 <pvPortMalloc+0x18c>)
 8015a90:	681a      	ldr	r2, [r3, #0]
 8015a92:	4b1b      	ldr	r3, [pc, #108]	@ (8015b00 <pvPortMalloc+0x194>)
 8015a94:	681b      	ldr	r3, [r3, #0]
 8015a96:	429a      	cmp	r2, r3
 8015a98:	d203      	bcs.n	8015aa2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8015a9a:	4b17      	ldr	r3, [pc, #92]	@ (8015af8 <pvPortMalloc+0x18c>)
 8015a9c:	681b      	ldr	r3, [r3, #0]
 8015a9e:	4a18      	ldr	r2, [pc, #96]	@ (8015b00 <pvPortMalloc+0x194>)
 8015aa0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8015aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015aa4:	685a      	ldr	r2, [r3, #4]
 8015aa6:	4b13      	ldr	r3, [pc, #76]	@ (8015af4 <pvPortMalloc+0x188>)
 8015aa8:	681b      	ldr	r3, [r3, #0]
 8015aaa:	431a      	orrs	r2, r3
 8015aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015aae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8015ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ab2:	2200      	movs	r2, #0
 8015ab4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8015ab6:	4b13      	ldr	r3, [pc, #76]	@ (8015b04 <pvPortMalloc+0x198>)
 8015ab8:	681b      	ldr	r3, [r3, #0]
 8015aba:	3301      	adds	r3, #1
 8015abc:	4a11      	ldr	r2, [pc, #68]	@ (8015b04 <pvPortMalloc+0x198>)
 8015abe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8015ac0:	f7fe f890 	bl	8013be4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8015ac4:	69fb      	ldr	r3, [r7, #28]
 8015ac6:	f003 0307 	and.w	r3, r3, #7
 8015aca:	2b00      	cmp	r3, #0
 8015acc:	d00b      	beq.n	8015ae6 <pvPortMalloc+0x17a>
	__asm volatile
 8015ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015ad2:	f383 8811 	msr	BASEPRI, r3
 8015ad6:	f3bf 8f6f 	isb	sy
 8015ada:	f3bf 8f4f 	dsb	sy
 8015ade:	60fb      	str	r3, [r7, #12]
}
 8015ae0:	bf00      	nop
 8015ae2:	bf00      	nop
 8015ae4:	e7fd      	b.n	8015ae2 <pvPortMalloc+0x176>
	return pvReturn;
 8015ae6:	69fb      	ldr	r3, [r7, #28]
}
 8015ae8:	4618      	mov	r0, r3
 8015aea:	3728      	adds	r7, #40	@ 0x28
 8015aec:	46bd      	mov	sp, r7
 8015aee:	bd80      	pop	{r7, pc}
 8015af0:	24005348 	.word	0x24005348
 8015af4:	2400535c 	.word	0x2400535c
 8015af8:	2400534c 	.word	0x2400534c
 8015afc:	24005340 	.word	0x24005340
 8015b00:	24005350 	.word	0x24005350
 8015b04:	24005354 	.word	0x24005354

08015b08 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8015b08:	b580      	push	{r7, lr}
 8015b0a:	b086      	sub	sp, #24
 8015b0c:	af00      	add	r7, sp, #0
 8015b0e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8015b10:	687b      	ldr	r3, [r7, #4]
 8015b12:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8015b14:	687b      	ldr	r3, [r7, #4]
 8015b16:	2b00      	cmp	r3, #0
 8015b18:	d04f      	beq.n	8015bba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8015b1a:	2308      	movs	r3, #8
 8015b1c:	425b      	negs	r3, r3
 8015b1e:	697a      	ldr	r2, [r7, #20]
 8015b20:	4413      	add	r3, r2
 8015b22:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8015b24:	697b      	ldr	r3, [r7, #20]
 8015b26:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8015b28:	693b      	ldr	r3, [r7, #16]
 8015b2a:	685a      	ldr	r2, [r3, #4]
 8015b2c:	4b25      	ldr	r3, [pc, #148]	@ (8015bc4 <vPortFree+0xbc>)
 8015b2e:	681b      	ldr	r3, [r3, #0]
 8015b30:	4013      	ands	r3, r2
 8015b32:	2b00      	cmp	r3, #0
 8015b34:	d10b      	bne.n	8015b4e <vPortFree+0x46>
	__asm volatile
 8015b36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015b3a:	f383 8811 	msr	BASEPRI, r3
 8015b3e:	f3bf 8f6f 	isb	sy
 8015b42:	f3bf 8f4f 	dsb	sy
 8015b46:	60fb      	str	r3, [r7, #12]
}
 8015b48:	bf00      	nop
 8015b4a:	bf00      	nop
 8015b4c:	e7fd      	b.n	8015b4a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8015b4e:	693b      	ldr	r3, [r7, #16]
 8015b50:	681b      	ldr	r3, [r3, #0]
 8015b52:	2b00      	cmp	r3, #0
 8015b54:	d00b      	beq.n	8015b6e <vPortFree+0x66>
	__asm volatile
 8015b56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015b5a:	f383 8811 	msr	BASEPRI, r3
 8015b5e:	f3bf 8f6f 	isb	sy
 8015b62:	f3bf 8f4f 	dsb	sy
 8015b66:	60bb      	str	r3, [r7, #8]
}
 8015b68:	bf00      	nop
 8015b6a:	bf00      	nop
 8015b6c:	e7fd      	b.n	8015b6a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8015b6e:	693b      	ldr	r3, [r7, #16]
 8015b70:	685a      	ldr	r2, [r3, #4]
 8015b72:	4b14      	ldr	r3, [pc, #80]	@ (8015bc4 <vPortFree+0xbc>)
 8015b74:	681b      	ldr	r3, [r3, #0]
 8015b76:	4013      	ands	r3, r2
 8015b78:	2b00      	cmp	r3, #0
 8015b7a:	d01e      	beq.n	8015bba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8015b7c:	693b      	ldr	r3, [r7, #16]
 8015b7e:	681b      	ldr	r3, [r3, #0]
 8015b80:	2b00      	cmp	r3, #0
 8015b82:	d11a      	bne.n	8015bba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8015b84:	693b      	ldr	r3, [r7, #16]
 8015b86:	685a      	ldr	r2, [r3, #4]
 8015b88:	4b0e      	ldr	r3, [pc, #56]	@ (8015bc4 <vPortFree+0xbc>)
 8015b8a:	681b      	ldr	r3, [r3, #0]
 8015b8c:	43db      	mvns	r3, r3
 8015b8e:	401a      	ands	r2, r3
 8015b90:	693b      	ldr	r3, [r7, #16]
 8015b92:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8015b94:	f7fe f818 	bl	8013bc8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8015b98:	693b      	ldr	r3, [r7, #16]
 8015b9a:	685a      	ldr	r2, [r3, #4]
 8015b9c:	4b0a      	ldr	r3, [pc, #40]	@ (8015bc8 <vPortFree+0xc0>)
 8015b9e:	681b      	ldr	r3, [r3, #0]
 8015ba0:	4413      	add	r3, r2
 8015ba2:	4a09      	ldr	r2, [pc, #36]	@ (8015bc8 <vPortFree+0xc0>)
 8015ba4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8015ba6:	6938      	ldr	r0, [r7, #16]
 8015ba8:	f000 f874 	bl	8015c94 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8015bac:	4b07      	ldr	r3, [pc, #28]	@ (8015bcc <vPortFree+0xc4>)
 8015bae:	681b      	ldr	r3, [r3, #0]
 8015bb0:	3301      	adds	r3, #1
 8015bb2:	4a06      	ldr	r2, [pc, #24]	@ (8015bcc <vPortFree+0xc4>)
 8015bb4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8015bb6:	f7fe f815 	bl	8013be4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8015bba:	bf00      	nop
 8015bbc:	3718      	adds	r7, #24
 8015bbe:	46bd      	mov	sp, r7
 8015bc0:	bd80      	pop	{r7, pc}
 8015bc2:	bf00      	nop
 8015bc4:	2400535c 	.word	0x2400535c
 8015bc8:	2400534c 	.word	0x2400534c
 8015bcc:	24005358 	.word	0x24005358

08015bd0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8015bd0:	b480      	push	{r7}
 8015bd2:	b085      	sub	sp, #20
 8015bd4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8015bd6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8015bda:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8015bdc:	4b27      	ldr	r3, [pc, #156]	@ (8015c7c <prvHeapInit+0xac>)
 8015bde:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8015be0:	68fb      	ldr	r3, [r7, #12]
 8015be2:	f003 0307 	and.w	r3, r3, #7
 8015be6:	2b00      	cmp	r3, #0
 8015be8:	d00c      	beq.n	8015c04 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8015bea:	68fb      	ldr	r3, [r7, #12]
 8015bec:	3307      	adds	r3, #7
 8015bee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015bf0:	68fb      	ldr	r3, [r7, #12]
 8015bf2:	f023 0307 	bic.w	r3, r3, #7
 8015bf6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8015bf8:	68ba      	ldr	r2, [r7, #8]
 8015bfa:	68fb      	ldr	r3, [r7, #12]
 8015bfc:	1ad3      	subs	r3, r2, r3
 8015bfe:	4a1f      	ldr	r2, [pc, #124]	@ (8015c7c <prvHeapInit+0xac>)
 8015c00:	4413      	add	r3, r2
 8015c02:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8015c04:	68fb      	ldr	r3, [r7, #12]
 8015c06:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8015c08:	4a1d      	ldr	r2, [pc, #116]	@ (8015c80 <prvHeapInit+0xb0>)
 8015c0a:	687b      	ldr	r3, [r7, #4]
 8015c0c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8015c0e:	4b1c      	ldr	r3, [pc, #112]	@ (8015c80 <prvHeapInit+0xb0>)
 8015c10:	2200      	movs	r2, #0
 8015c12:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8015c14:	687b      	ldr	r3, [r7, #4]
 8015c16:	68ba      	ldr	r2, [r7, #8]
 8015c18:	4413      	add	r3, r2
 8015c1a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8015c1c:	2208      	movs	r2, #8
 8015c1e:	68fb      	ldr	r3, [r7, #12]
 8015c20:	1a9b      	subs	r3, r3, r2
 8015c22:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015c24:	68fb      	ldr	r3, [r7, #12]
 8015c26:	f023 0307 	bic.w	r3, r3, #7
 8015c2a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8015c2c:	68fb      	ldr	r3, [r7, #12]
 8015c2e:	4a15      	ldr	r2, [pc, #84]	@ (8015c84 <prvHeapInit+0xb4>)
 8015c30:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8015c32:	4b14      	ldr	r3, [pc, #80]	@ (8015c84 <prvHeapInit+0xb4>)
 8015c34:	681b      	ldr	r3, [r3, #0]
 8015c36:	2200      	movs	r2, #0
 8015c38:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8015c3a:	4b12      	ldr	r3, [pc, #72]	@ (8015c84 <prvHeapInit+0xb4>)
 8015c3c:	681b      	ldr	r3, [r3, #0]
 8015c3e:	2200      	movs	r2, #0
 8015c40:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8015c42:	687b      	ldr	r3, [r7, #4]
 8015c44:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8015c46:	683b      	ldr	r3, [r7, #0]
 8015c48:	68fa      	ldr	r2, [r7, #12]
 8015c4a:	1ad2      	subs	r2, r2, r3
 8015c4c:	683b      	ldr	r3, [r7, #0]
 8015c4e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8015c50:	4b0c      	ldr	r3, [pc, #48]	@ (8015c84 <prvHeapInit+0xb4>)
 8015c52:	681a      	ldr	r2, [r3, #0]
 8015c54:	683b      	ldr	r3, [r7, #0]
 8015c56:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015c58:	683b      	ldr	r3, [r7, #0]
 8015c5a:	685b      	ldr	r3, [r3, #4]
 8015c5c:	4a0a      	ldr	r2, [pc, #40]	@ (8015c88 <prvHeapInit+0xb8>)
 8015c5e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015c60:	683b      	ldr	r3, [r7, #0]
 8015c62:	685b      	ldr	r3, [r3, #4]
 8015c64:	4a09      	ldr	r2, [pc, #36]	@ (8015c8c <prvHeapInit+0xbc>)
 8015c66:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8015c68:	4b09      	ldr	r3, [pc, #36]	@ (8015c90 <prvHeapInit+0xc0>)
 8015c6a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8015c6e:	601a      	str	r2, [r3, #0]
}
 8015c70:	bf00      	nop
 8015c72:	3714      	adds	r7, #20
 8015c74:	46bd      	mov	sp, r7
 8015c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c7a:	4770      	bx	lr
 8015c7c:	24001740 	.word	0x24001740
 8015c80:	24005340 	.word	0x24005340
 8015c84:	24005348 	.word	0x24005348
 8015c88:	24005350 	.word	0x24005350
 8015c8c:	2400534c 	.word	0x2400534c
 8015c90:	2400535c 	.word	0x2400535c

08015c94 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8015c94:	b480      	push	{r7}
 8015c96:	b085      	sub	sp, #20
 8015c98:	af00      	add	r7, sp, #0
 8015c9a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8015c9c:	4b28      	ldr	r3, [pc, #160]	@ (8015d40 <prvInsertBlockIntoFreeList+0xac>)
 8015c9e:	60fb      	str	r3, [r7, #12]
 8015ca0:	e002      	b.n	8015ca8 <prvInsertBlockIntoFreeList+0x14>
 8015ca2:	68fb      	ldr	r3, [r7, #12]
 8015ca4:	681b      	ldr	r3, [r3, #0]
 8015ca6:	60fb      	str	r3, [r7, #12]
 8015ca8:	68fb      	ldr	r3, [r7, #12]
 8015caa:	681b      	ldr	r3, [r3, #0]
 8015cac:	687a      	ldr	r2, [r7, #4]
 8015cae:	429a      	cmp	r2, r3
 8015cb0:	d8f7      	bhi.n	8015ca2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8015cb2:	68fb      	ldr	r3, [r7, #12]
 8015cb4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8015cb6:	68fb      	ldr	r3, [r7, #12]
 8015cb8:	685b      	ldr	r3, [r3, #4]
 8015cba:	68ba      	ldr	r2, [r7, #8]
 8015cbc:	4413      	add	r3, r2
 8015cbe:	687a      	ldr	r2, [r7, #4]
 8015cc0:	429a      	cmp	r2, r3
 8015cc2:	d108      	bne.n	8015cd6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8015cc4:	68fb      	ldr	r3, [r7, #12]
 8015cc6:	685a      	ldr	r2, [r3, #4]
 8015cc8:	687b      	ldr	r3, [r7, #4]
 8015cca:	685b      	ldr	r3, [r3, #4]
 8015ccc:	441a      	add	r2, r3
 8015cce:	68fb      	ldr	r3, [r7, #12]
 8015cd0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8015cd2:	68fb      	ldr	r3, [r7, #12]
 8015cd4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8015cd6:	687b      	ldr	r3, [r7, #4]
 8015cd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8015cda:	687b      	ldr	r3, [r7, #4]
 8015cdc:	685b      	ldr	r3, [r3, #4]
 8015cde:	68ba      	ldr	r2, [r7, #8]
 8015ce0:	441a      	add	r2, r3
 8015ce2:	68fb      	ldr	r3, [r7, #12]
 8015ce4:	681b      	ldr	r3, [r3, #0]
 8015ce6:	429a      	cmp	r2, r3
 8015ce8:	d118      	bne.n	8015d1c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8015cea:	68fb      	ldr	r3, [r7, #12]
 8015cec:	681a      	ldr	r2, [r3, #0]
 8015cee:	4b15      	ldr	r3, [pc, #84]	@ (8015d44 <prvInsertBlockIntoFreeList+0xb0>)
 8015cf0:	681b      	ldr	r3, [r3, #0]
 8015cf2:	429a      	cmp	r2, r3
 8015cf4:	d00d      	beq.n	8015d12 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8015cf6:	687b      	ldr	r3, [r7, #4]
 8015cf8:	685a      	ldr	r2, [r3, #4]
 8015cfa:	68fb      	ldr	r3, [r7, #12]
 8015cfc:	681b      	ldr	r3, [r3, #0]
 8015cfe:	685b      	ldr	r3, [r3, #4]
 8015d00:	441a      	add	r2, r3
 8015d02:	687b      	ldr	r3, [r7, #4]
 8015d04:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8015d06:	68fb      	ldr	r3, [r7, #12]
 8015d08:	681b      	ldr	r3, [r3, #0]
 8015d0a:	681a      	ldr	r2, [r3, #0]
 8015d0c:	687b      	ldr	r3, [r7, #4]
 8015d0e:	601a      	str	r2, [r3, #0]
 8015d10:	e008      	b.n	8015d24 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8015d12:	4b0c      	ldr	r3, [pc, #48]	@ (8015d44 <prvInsertBlockIntoFreeList+0xb0>)
 8015d14:	681a      	ldr	r2, [r3, #0]
 8015d16:	687b      	ldr	r3, [r7, #4]
 8015d18:	601a      	str	r2, [r3, #0]
 8015d1a:	e003      	b.n	8015d24 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8015d1c:	68fb      	ldr	r3, [r7, #12]
 8015d1e:	681a      	ldr	r2, [r3, #0]
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8015d24:	68fa      	ldr	r2, [r7, #12]
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	429a      	cmp	r2, r3
 8015d2a:	d002      	beq.n	8015d32 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8015d2c:	68fb      	ldr	r3, [r7, #12]
 8015d2e:	687a      	ldr	r2, [r7, #4]
 8015d30:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015d32:	bf00      	nop
 8015d34:	3714      	adds	r7, #20
 8015d36:	46bd      	mov	sp, r7
 8015d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d3c:	4770      	bx	lr
 8015d3e:	bf00      	nop
 8015d40:	24005340 	.word	0x24005340
 8015d44:	24005348 	.word	0x24005348

08015d48 <_ZdlPvj>:
 8015d48:	f000 b800 	b.w	8015d4c <_ZdlPv>

08015d4c <_ZdlPv>:
 8015d4c:	f000 b808 	b.w	8015d60 <free>

08015d50 <malloc>:
 8015d50:	4b02      	ldr	r3, [pc, #8]	@ (8015d5c <malloc+0xc>)
 8015d52:	4601      	mov	r1, r0
 8015d54:	6818      	ldr	r0, [r3, #0]
 8015d56:	f000 b82d 	b.w	8015db4 <_malloc_r>
 8015d5a:	bf00      	nop
 8015d5c:	24000020 	.word	0x24000020

08015d60 <free>:
 8015d60:	4b02      	ldr	r3, [pc, #8]	@ (8015d6c <free+0xc>)
 8015d62:	4601      	mov	r1, r0
 8015d64:	6818      	ldr	r0, [r3, #0]
 8015d66:	f000 bc89 	b.w	801667c <_free_r>
 8015d6a:	bf00      	nop
 8015d6c:	24000020 	.word	0x24000020

08015d70 <sbrk_aligned>:
 8015d70:	b570      	push	{r4, r5, r6, lr}
 8015d72:	4e0f      	ldr	r6, [pc, #60]	@ (8015db0 <sbrk_aligned+0x40>)
 8015d74:	460c      	mov	r4, r1
 8015d76:	6831      	ldr	r1, [r6, #0]
 8015d78:	4605      	mov	r5, r0
 8015d7a:	b911      	cbnz	r1, 8015d82 <sbrk_aligned+0x12>
 8015d7c:	f000 fc20 	bl	80165c0 <_sbrk_r>
 8015d80:	6030      	str	r0, [r6, #0]
 8015d82:	4621      	mov	r1, r4
 8015d84:	4628      	mov	r0, r5
 8015d86:	f000 fc1b 	bl	80165c0 <_sbrk_r>
 8015d8a:	1c43      	adds	r3, r0, #1
 8015d8c:	d103      	bne.n	8015d96 <sbrk_aligned+0x26>
 8015d8e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8015d92:	4620      	mov	r0, r4
 8015d94:	bd70      	pop	{r4, r5, r6, pc}
 8015d96:	1cc4      	adds	r4, r0, #3
 8015d98:	f024 0403 	bic.w	r4, r4, #3
 8015d9c:	42a0      	cmp	r0, r4
 8015d9e:	d0f8      	beq.n	8015d92 <sbrk_aligned+0x22>
 8015da0:	1a21      	subs	r1, r4, r0
 8015da2:	4628      	mov	r0, r5
 8015da4:	f000 fc0c 	bl	80165c0 <_sbrk_r>
 8015da8:	3001      	adds	r0, #1
 8015daa:	d1f2      	bne.n	8015d92 <sbrk_aligned+0x22>
 8015dac:	e7ef      	b.n	8015d8e <sbrk_aligned+0x1e>
 8015dae:	bf00      	nop
 8015db0:	24005360 	.word	0x24005360

08015db4 <_malloc_r>:
 8015db4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015db8:	1ccd      	adds	r5, r1, #3
 8015dba:	f025 0503 	bic.w	r5, r5, #3
 8015dbe:	3508      	adds	r5, #8
 8015dc0:	2d0c      	cmp	r5, #12
 8015dc2:	bf38      	it	cc
 8015dc4:	250c      	movcc	r5, #12
 8015dc6:	2d00      	cmp	r5, #0
 8015dc8:	4606      	mov	r6, r0
 8015dca:	db01      	blt.n	8015dd0 <_malloc_r+0x1c>
 8015dcc:	42a9      	cmp	r1, r5
 8015dce:	d904      	bls.n	8015dda <_malloc_r+0x26>
 8015dd0:	230c      	movs	r3, #12
 8015dd2:	6033      	str	r3, [r6, #0]
 8015dd4:	2000      	movs	r0, #0
 8015dd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015dda:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8015eb0 <_malloc_r+0xfc>
 8015dde:	f000 f869 	bl	8015eb4 <__malloc_lock>
 8015de2:	f8d8 3000 	ldr.w	r3, [r8]
 8015de6:	461c      	mov	r4, r3
 8015de8:	bb44      	cbnz	r4, 8015e3c <_malloc_r+0x88>
 8015dea:	4629      	mov	r1, r5
 8015dec:	4630      	mov	r0, r6
 8015dee:	f7ff ffbf 	bl	8015d70 <sbrk_aligned>
 8015df2:	1c43      	adds	r3, r0, #1
 8015df4:	4604      	mov	r4, r0
 8015df6:	d158      	bne.n	8015eaa <_malloc_r+0xf6>
 8015df8:	f8d8 4000 	ldr.w	r4, [r8]
 8015dfc:	4627      	mov	r7, r4
 8015dfe:	2f00      	cmp	r7, #0
 8015e00:	d143      	bne.n	8015e8a <_malloc_r+0xd6>
 8015e02:	2c00      	cmp	r4, #0
 8015e04:	d04b      	beq.n	8015e9e <_malloc_r+0xea>
 8015e06:	6823      	ldr	r3, [r4, #0]
 8015e08:	4639      	mov	r1, r7
 8015e0a:	4630      	mov	r0, r6
 8015e0c:	eb04 0903 	add.w	r9, r4, r3
 8015e10:	f000 fbd6 	bl	80165c0 <_sbrk_r>
 8015e14:	4581      	cmp	r9, r0
 8015e16:	d142      	bne.n	8015e9e <_malloc_r+0xea>
 8015e18:	6821      	ldr	r1, [r4, #0]
 8015e1a:	1a6d      	subs	r5, r5, r1
 8015e1c:	4629      	mov	r1, r5
 8015e1e:	4630      	mov	r0, r6
 8015e20:	f7ff ffa6 	bl	8015d70 <sbrk_aligned>
 8015e24:	3001      	adds	r0, #1
 8015e26:	d03a      	beq.n	8015e9e <_malloc_r+0xea>
 8015e28:	6823      	ldr	r3, [r4, #0]
 8015e2a:	442b      	add	r3, r5
 8015e2c:	6023      	str	r3, [r4, #0]
 8015e2e:	f8d8 3000 	ldr.w	r3, [r8]
 8015e32:	685a      	ldr	r2, [r3, #4]
 8015e34:	bb62      	cbnz	r2, 8015e90 <_malloc_r+0xdc>
 8015e36:	f8c8 7000 	str.w	r7, [r8]
 8015e3a:	e00f      	b.n	8015e5c <_malloc_r+0xa8>
 8015e3c:	6822      	ldr	r2, [r4, #0]
 8015e3e:	1b52      	subs	r2, r2, r5
 8015e40:	d420      	bmi.n	8015e84 <_malloc_r+0xd0>
 8015e42:	2a0b      	cmp	r2, #11
 8015e44:	d917      	bls.n	8015e76 <_malloc_r+0xc2>
 8015e46:	1961      	adds	r1, r4, r5
 8015e48:	42a3      	cmp	r3, r4
 8015e4a:	6025      	str	r5, [r4, #0]
 8015e4c:	bf18      	it	ne
 8015e4e:	6059      	strne	r1, [r3, #4]
 8015e50:	6863      	ldr	r3, [r4, #4]
 8015e52:	bf08      	it	eq
 8015e54:	f8c8 1000 	streq.w	r1, [r8]
 8015e58:	5162      	str	r2, [r4, r5]
 8015e5a:	604b      	str	r3, [r1, #4]
 8015e5c:	4630      	mov	r0, r6
 8015e5e:	f000 f82f 	bl	8015ec0 <__malloc_unlock>
 8015e62:	f104 000b 	add.w	r0, r4, #11
 8015e66:	1d23      	adds	r3, r4, #4
 8015e68:	f020 0007 	bic.w	r0, r0, #7
 8015e6c:	1ac2      	subs	r2, r0, r3
 8015e6e:	bf1c      	itt	ne
 8015e70:	1a1b      	subne	r3, r3, r0
 8015e72:	50a3      	strne	r3, [r4, r2]
 8015e74:	e7af      	b.n	8015dd6 <_malloc_r+0x22>
 8015e76:	6862      	ldr	r2, [r4, #4]
 8015e78:	42a3      	cmp	r3, r4
 8015e7a:	bf0c      	ite	eq
 8015e7c:	f8c8 2000 	streq.w	r2, [r8]
 8015e80:	605a      	strne	r2, [r3, #4]
 8015e82:	e7eb      	b.n	8015e5c <_malloc_r+0xa8>
 8015e84:	4623      	mov	r3, r4
 8015e86:	6864      	ldr	r4, [r4, #4]
 8015e88:	e7ae      	b.n	8015de8 <_malloc_r+0x34>
 8015e8a:	463c      	mov	r4, r7
 8015e8c:	687f      	ldr	r7, [r7, #4]
 8015e8e:	e7b6      	b.n	8015dfe <_malloc_r+0x4a>
 8015e90:	461a      	mov	r2, r3
 8015e92:	685b      	ldr	r3, [r3, #4]
 8015e94:	42a3      	cmp	r3, r4
 8015e96:	d1fb      	bne.n	8015e90 <_malloc_r+0xdc>
 8015e98:	2300      	movs	r3, #0
 8015e9a:	6053      	str	r3, [r2, #4]
 8015e9c:	e7de      	b.n	8015e5c <_malloc_r+0xa8>
 8015e9e:	230c      	movs	r3, #12
 8015ea0:	6033      	str	r3, [r6, #0]
 8015ea2:	4630      	mov	r0, r6
 8015ea4:	f000 f80c 	bl	8015ec0 <__malloc_unlock>
 8015ea8:	e794      	b.n	8015dd4 <_malloc_r+0x20>
 8015eaa:	6005      	str	r5, [r0, #0]
 8015eac:	e7d6      	b.n	8015e5c <_malloc_r+0xa8>
 8015eae:	bf00      	nop
 8015eb0:	24005364 	.word	0x24005364

08015eb4 <__malloc_lock>:
 8015eb4:	4801      	ldr	r0, [pc, #4]	@ (8015ebc <__malloc_lock+0x8>)
 8015eb6:	f000 bbd0 	b.w	801665a <__retarget_lock_acquire_recursive>
 8015eba:	bf00      	nop
 8015ebc:	240054a8 	.word	0x240054a8

08015ec0 <__malloc_unlock>:
 8015ec0:	4801      	ldr	r0, [pc, #4]	@ (8015ec8 <__malloc_unlock+0x8>)
 8015ec2:	f000 bbcb 	b.w	801665c <__retarget_lock_release_recursive>
 8015ec6:	bf00      	nop
 8015ec8:	240054a8 	.word	0x240054a8

08015ecc <std>:
 8015ecc:	2300      	movs	r3, #0
 8015ece:	b510      	push	{r4, lr}
 8015ed0:	4604      	mov	r4, r0
 8015ed2:	e9c0 3300 	strd	r3, r3, [r0]
 8015ed6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015eda:	6083      	str	r3, [r0, #8]
 8015edc:	8181      	strh	r1, [r0, #12]
 8015ede:	6643      	str	r3, [r0, #100]	@ 0x64
 8015ee0:	81c2      	strh	r2, [r0, #14]
 8015ee2:	6183      	str	r3, [r0, #24]
 8015ee4:	4619      	mov	r1, r3
 8015ee6:	2208      	movs	r2, #8
 8015ee8:	305c      	adds	r0, #92	@ 0x5c
 8015eea:	f000 facf 	bl	801648c <memset>
 8015eee:	4b0d      	ldr	r3, [pc, #52]	@ (8015f24 <std+0x58>)
 8015ef0:	6263      	str	r3, [r4, #36]	@ 0x24
 8015ef2:	4b0d      	ldr	r3, [pc, #52]	@ (8015f28 <std+0x5c>)
 8015ef4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8015ef6:	4b0d      	ldr	r3, [pc, #52]	@ (8015f2c <std+0x60>)
 8015ef8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8015efa:	4b0d      	ldr	r3, [pc, #52]	@ (8015f30 <std+0x64>)
 8015efc:	6323      	str	r3, [r4, #48]	@ 0x30
 8015efe:	4b0d      	ldr	r3, [pc, #52]	@ (8015f34 <std+0x68>)
 8015f00:	6224      	str	r4, [r4, #32]
 8015f02:	429c      	cmp	r4, r3
 8015f04:	d006      	beq.n	8015f14 <std+0x48>
 8015f06:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8015f0a:	4294      	cmp	r4, r2
 8015f0c:	d002      	beq.n	8015f14 <std+0x48>
 8015f0e:	33d0      	adds	r3, #208	@ 0xd0
 8015f10:	429c      	cmp	r4, r3
 8015f12:	d105      	bne.n	8015f20 <std+0x54>
 8015f14:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8015f18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015f1c:	f000 bb9c 	b.w	8016658 <__retarget_lock_init_recursive>
 8015f20:	bd10      	pop	{r4, pc}
 8015f22:	bf00      	nop
 8015f24:	080162dd 	.word	0x080162dd
 8015f28:	080162ff 	.word	0x080162ff
 8015f2c:	08016337 	.word	0x08016337
 8015f30:	0801635b 	.word	0x0801635b
 8015f34:	24005368 	.word	0x24005368

08015f38 <stdio_exit_handler>:
 8015f38:	4a02      	ldr	r2, [pc, #8]	@ (8015f44 <stdio_exit_handler+0xc>)
 8015f3a:	4903      	ldr	r1, [pc, #12]	@ (8015f48 <stdio_exit_handler+0x10>)
 8015f3c:	4803      	ldr	r0, [pc, #12]	@ (8015f4c <stdio_exit_handler+0x14>)
 8015f3e:	f000 b869 	b.w	8016014 <_fwalk_sglue>
 8015f42:	bf00      	nop
 8015f44:	24000014 	.word	0x24000014
 8015f48:	08017065 	.word	0x08017065
 8015f4c:	24000024 	.word	0x24000024

08015f50 <cleanup_stdio>:
 8015f50:	6841      	ldr	r1, [r0, #4]
 8015f52:	4b0c      	ldr	r3, [pc, #48]	@ (8015f84 <cleanup_stdio+0x34>)
 8015f54:	4299      	cmp	r1, r3
 8015f56:	b510      	push	{r4, lr}
 8015f58:	4604      	mov	r4, r0
 8015f5a:	d001      	beq.n	8015f60 <cleanup_stdio+0x10>
 8015f5c:	f001 f882 	bl	8017064 <_fflush_r>
 8015f60:	68a1      	ldr	r1, [r4, #8]
 8015f62:	4b09      	ldr	r3, [pc, #36]	@ (8015f88 <cleanup_stdio+0x38>)
 8015f64:	4299      	cmp	r1, r3
 8015f66:	d002      	beq.n	8015f6e <cleanup_stdio+0x1e>
 8015f68:	4620      	mov	r0, r4
 8015f6a:	f001 f87b 	bl	8017064 <_fflush_r>
 8015f6e:	68e1      	ldr	r1, [r4, #12]
 8015f70:	4b06      	ldr	r3, [pc, #24]	@ (8015f8c <cleanup_stdio+0x3c>)
 8015f72:	4299      	cmp	r1, r3
 8015f74:	d004      	beq.n	8015f80 <cleanup_stdio+0x30>
 8015f76:	4620      	mov	r0, r4
 8015f78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015f7c:	f001 b872 	b.w	8017064 <_fflush_r>
 8015f80:	bd10      	pop	{r4, pc}
 8015f82:	bf00      	nop
 8015f84:	24005368 	.word	0x24005368
 8015f88:	240053d0 	.word	0x240053d0
 8015f8c:	24005438 	.word	0x24005438

08015f90 <global_stdio_init.part.0>:
 8015f90:	b510      	push	{r4, lr}
 8015f92:	4b0b      	ldr	r3, [pc, #44]	@ (8015fc0 <global_stdio_init.part.0+0x30>)
 8015f94:	4c0b      	ldr	r4, [pc, #44]	@ (8015fc4 <global_stdio_init.part.0+0x34>)
 8015f96:	4a0c      	ldr	r2, [pc, #48]	@ (8015fc8 <global_stdio_init.part.0+0x38>)
 8015f98:	601a      	str	r2, [r3, #0]
 8015f9a:	4620      	mov	r0, r4
 8015f9c:	2200      	movs	r2, #0
 8015f9e:	2104      	movs	r1, #4
 8015fa0:	f7ff ff94 	bl	8015ecc <std>
 8015fa4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8015fa8:	2201      	movs	r2, #1
 8015faa:	2109      	movs	r1, #9
 8015fac:	f7ff ff8e 	bl	8015ecc <std>
 8015fb0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8015fb4:	2202      	movs	r2, #2
 8015fb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015fba:	2112      	movs	r1, #18
 8015fbc:	f7ff bf86 	b.w	8015ecc <std>
 8015fc0:	240054a0 	.word	0x240054a0
 8015fc4:	24005368 	.word	0x24005368
 8015fc8:	08015f39 	.word	0x08015f39

08015fcc <__sfp_lock_acquire>:
 8015fcc:	4801      	ldr	r0, [pc, #4]	@ (8015fd4 <__sfp_lock_acquire+0x8>)
 8015fce:	f000 bb44 	b.w	801665a <__retarget_lock_acquire_recursive>
 8015fd2:	bf00      	nop
 8015fd4:	240054a9 	.word	0x240054a9

08015fd8 <__sfp_lock_release>:
 8015fd8:	4801      	ldr	r0, [pc, #4]	@ (8015fe0 <__sfp_lock_release+0x8>)
 8015fda:	f000 bb3f 	b.w	801665c <__retarget_lock_release_recursive>
 8015fde:	bf00      	nop
 8015fe0:	240054a9 	.word	0x240054a9

08015fe4 <__sinit>:
 8015fe4:	b510      	push	{r4, lr}
 8015fe6:	4604      	mov	r4, r0
 8015fe8:	f7ff fff0 	bl	8015fcc <__sfp_lock_acquire>
 8015fec:	6a23      	ldr	r3, [r4, #32]
 8015fee:	b11b      	cbz	r3, 8015ff8 <__sinit+0x14>
 8015ff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015ff4:	f7ff bff0 	b.w	8015fd8 <__sfp_lock_release>
 8015ff8:	4b04      	ldr	r3, [pc, #16]	@ (801600c <__sinit+0x28>)
 8015ffa:	6223      	str	r3, [r4, #32]
 8015ffc:	4b04      	ldr	r3, [pc, #16]	@ (8016010 <__sinit+0x2c>)
 8015ffe:	681b      	ldr	r3, [r3, #0]
 8016000:	2b00      	cmp	r3, #0
 8016002:	d1f5      	bne.n	8015ff0 <__sinit+0xc>
 8016004:	f7ff ffc4 	bl	8015f90 <global_stdio_init.part.0>
 8016008:	e7f2      	b.n	8015ff0 <__sinit+0xc>
 801600a:	bf00      	nop
 801600c:	08015f51 	.word	0x08015f51
 8016010:	240054a0 	.word	0x240054a0

08016014 <_fwalk_sglue>:
 8016014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016018:	4607      	mov	r7, r0
 801601a:	4688      	mov	r8, r1
 801601c:	4614      	mov	r4, r2
 801601e:	2600      	movs	r6, #0
 8016020:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016024:	f1b9 0901 	subs.w	r9, r9, #1
 8016028:	d505      	bpl.n	8016036 <_fwalk_sglue+0x22>
 801602a:	6824      	ldr	r4, [r4, #0]
 801602c:	2c00      	cmp	r4, #0
 801602e:	d1f7      	bne.n	8016020 <_fwalk_sglue+0xc>
 8016030:	4630      	mov	r0, r6
 8016032:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016036:	89ab      	ldrh	r3, [r5, #12]
 8016038:	2b01      	cmp	r3, #1
 801603a:	d907      	bls.n	801604c <_fwalk_sglue+0x38>
 801603c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016040:	3301      	adds	r3, #1
 8016042:	d003      	beq.n	801604c <_fwalk_sglue+0x38>
 8016044:	4629      	mov	r1, r5
 8016046:	4638      	mov	r0, r7
 8016048:	47c0      	blx	r8
 801604a:	4306      	orrs	r6, r0
 801604c:	3568      	adds	r5, #104	@ 0x68
 801604e:	e7e9      	b.n	8016024 <_fwalk_sglue+0x10>

08016050 <iprintf>:
 8016050:	b40f      	push	{r0, r1, r2, r3}
 8016052:	b507      	push	{r0, r1, r2, lr}
 8016054:	4906      	ldr	r1, [pc, #24]	@ (8016070 <iprintf+0x20>)
 8016056:	ab04      	add	r3, sp, #16
 8016058:	6808      	ldr	r0, [r1, #0]
 801605a:	f853 2b04 	ldr.w	r2, [r3], #4
 801605e:	6881      	ldr	r1, [r0, #8]
 8016060:	9301      	str	r3, [sp, #4]
 8016062:	f000 fcd7 	bl	8016a14 <_vfiprintf_r>
 8016066:	b003      	add	sp, #12
 8016068:	f85d eb04 	ldr.w	lr, [sp], #4
 801606c:	b004      	add	sp, #16
 801606e:	4770      	bx	lr
 8016070:	24000020 	.word	0x24000020

08016074 <_puts_r>:
 8016074:	6a03      	ldr	r3, [r0, #32]
 8016076:	b570      	push	{r4, r5, r6, lr}
 8016078:	6884      	ldr	r4, [r0, #8]
 801607a:	4605      	mov	r5, r0
 801607c:	460e      	mov	r6, r1
 801607e:	b90b      	cbnz	r3, 8016084 <_puts_r+0x10>
 8016080:	f7ff ffb0 	bl	8015fe4 <__sinit>
 8016084:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016086:	07db      	lsls	r3, r3, #31
 8016088:	d405      	bmi.n	8016096 <_puts_r+0x22>
 801608a:	89a3      	ldrh	r3, [r4, #12]
 801608c:	0598      	lsls	r0, r3, #22
 801608e:	d402      	bmi.n	8016096 <_puts_r+0x22>
 8016090:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016092:	f000 fae2 	bl	801665a <__retarget_lock_acquire_recursive>
 8016096:	89a3      	ldrh	r3, [r4, #12]
 8016098:	0719      	lsls	r1, r3, #28
 801609a:	d502      	bpl.n	80160a2 <_puts_r+0x2e>
 801609c:	6923      	ldr	r3, [r4, #16]
 801609e:	2b00      	cmp	r3, #0
 80160a0:	d135      	bne.n	801610e <_puts_r+0x9a>
 80160a2:	4621      	mov	r1, r4
 80160a4:	4628      	mov	r0, r5
 80160a6:	f000 f99b 	bl	80163e0 <__swsetup_r>
 80160aa:	b380      	cbz	r0, 801610e <_puts_r+0x9a>
 80160ac:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80160b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80160b2:	07da      	lsls	r2, r3, #31
 80160b4:	d405      	bmi.n	80160c2 <_puts_r+0x4e>
 80160b6:	89a3      	ldrh	r3, [r4, #12]
 80160b8:	059b      	lsls	r3, r3, #22
 80160ba:	d402      	bmi.n	80160c2 <_puts_r+0x4e>
 80160bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80160be:	f000 facd 	bl	801665c <__retarget_lock_release_recursive>
 80160c2:	4628      	mov	r0, r5
 80160c4:	bd70      	pop	{r4, r5, r6, pc}
 80160c6:	2b00      	cmp	r3, #0
 80160c8:	da04      	bge.n	80160d4 <_puts_r+0x60>
 80160ca:	69a2      	ldr	r2, [r4, #24]
 80160cc:	429a      	cmp	r2, r3
 80160ce:	dc17      	bgt.n	8016100 <_puts_r+0x8c>
 80160d0:	290a      	cmp	r1, #10
 80160d2:	d015      	beq.n	8016100 <_puts_r+0x8c>
 80160d4:	6823      	ldr	r3, [r4, #0]
 80160d6:	1c5a      	adds	r2, r3, #1
 80160d8:	6022      	str	r2, [r4, #0]
 80160da:	7019      	strb	r1, [r3, #0]
 80160dc:	68a3      	ldr	r3, [r4, #8]
 80160de:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80160e2:	3b01      	subs	r3, #1
 80160e4:	60a3      	str	r3, [r4, #8]
 80160e6:	2900      	cmp	r1, #0
 80160e8:	d1ed      	bne.n	80160c6 <_puts_r+0x52>
 80160ea:	2b00      	cmp	r3, #0
 80160ec:	da11      	bge.n	8016112 <_puts_r+0x9e>
 80160ee:	4622      	mov	r2, r4
 80160f0:	210a      	movs	r1, #10
 80160f2:	4628      	mov	r0, r5
 80160f4:	f000 f935 	bl	8016362 <__swbuf_r>
 80160f8:	3001      	adds	r0, #1
 80160fa:	d0d7      	beq.n	80160ac <_puts_r+0x38>
 80160fc:	250a      	movs	r5, #10
 80160fe:	e7d7      	b.n	80160b0 <_puts_r+0x3c>
 8016100:	4622      	mov	r2, r4
 8016102:	4628      	mov	r0, r5
 8016104:	f000 f92d 	bl	8016362 <__swbuf_r>
 8016108:	3001      	adds	r0, #1
 801610a:	d1e7      	bne.n	80160dc <_puts_r+0x68>
 801610c:	e7ce      	b.n	80160ac <_puts_r+0x38>
 801610e:	3e01      	subs	r6, #1
 8016110:	e7e4      	b.n	80160dc <_puts_r+0x68>
 8016112:	6823      	ldr	r3, [r4, #0]
 8016114:	1c5a      	adds	r2, r3, #1
 8016116:	6022      	str	r2, [r4, #0]
 8016118:	220a      	movs	r2, #10
 801611a:	701a      	strb	r2, [r3, #0]
 801611c:	e7ee      	b.n	80160fc <_puts_r+0x88>
	...

08016120 <puts>:
 8016120:	4b02      	ldr	r3, [pc, #8]	@ (801612c <puts+0xc>)
 8016122:	4601      	mov	r1, r0
 8016124:	6818      	ldr	r0, [r3, #0]
 8016126:	f7ff bfa5 	b.w	8016074 <_puts_r>
 801612a:	bf00      	nop
 801612c:	24000020 	.word	0x24000020

08016130 <setvbuf>:
 8016130:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016134:	461d      	mov	r5, r3
 8016136:	4b57      	ldr	r3, [pc, #348]	@ (8016294 <setvbuf+0x164>)
 8016138:	681f      	ldr	r7, [r3, #0]
 801613a:	4604      	mov	r4, r0
 801613c:	460e      	mov	r6, r1
 801613e:	4690      	mov	r8, r2
 8016140:	b127      	cbz	r7, 801614c <setvbuf+0x1c>
 8016142:	6a3b      	ldr	r3, [r7, #32]
 8016144:	b913      	cbnz	r3, 801614c <setvbuf+0x1c>
 8016146:	4638      	mov	r0, r7
 8016148:	f7ff ff4c 	bl	8015fe4 <__sinit>
 801614c:	f1b8 0f02 	cmp.w	r8, #2
 8016150:	d006      	beq.n	8016160 <setvbuf+0x30>
 8016152:	f1b8 0f01 	cmp.w	r8, #1
 8016156:	f200 809a 	bhi.w	801628e <setvbuf+0x15e>
 801615a:	2d00      	cmp	r5, #0
 801615c:	f2c0 8097 	blt.w	801628e <setvbuf+0x15e>
 8016160:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016162:	07d9      	lsls	r1, r3, #31
 8016164:	d405      	bmi.n	8016172 <setvbuf+0x42>
 8016166:	89a3      	ldrh	r3, [r4, #12]
 8016168:	059a      	lsls	r2, r3, #22
 801616a:	d402      	bmi.n	8016172 <setvbuf+0x42>
 801616c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801616e:	f000 fa74 	bl	801665a <__retarget_lock_acquire_recursive>
 8016172:	4621      	mov	r1, r4
 8016174:	4638      	mov	r0, r7
 8016176:	f000 ff75 	bl	8017064 <_fflush_r>
 801617a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801617c:	b141      	cbz	r1, 8016190 <setvbuf+0x60>
 801617e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016182:	4299      	cmp	r1, r3
 8016184:	d002      	beq.n	801618c <setvbuf+0x5c>
 8016186:	4638      	mov	r0, r7
 8016188:	f000 fa78 	bl	801667c <_free_r>
 801618c:	2300      	movs	r3, #0
 801618e:	6363      	str	r3, [r4, #52]	@ 0x34
 8016190:	2300      	movs	r3, #0
 8016192:	61a3      	str	r3, [r4, #24]
 8016194:	6063      	str	r3, [r4, #4]
 8016196:	89a3      	ldrh	r3, [r4, #12]
 8016198:	061b      	lsls	r3, r3, #24
 801619a:	d503      	bpl.n	80161a4 <setvbuf+0x74>
 801619c:	6921      	ldr	r1, [r4, #16]
 801619e:	4638      	mov	r0, r7
 80161a0:	f000 fa6c 	bl	801667c <_free_r>
 80161a4:	89a3      	ldrh	r3, [r4, #12]
 80161a6:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 80161aa:	f023 0303 	bic.w	r3, r3, #3
 80161ae:	f1b8 0f02 	cmp.w	r8, #2
 80161b2:	81a3      	strh	r3, [r4, #12]
 80161b4:	d061      	beq.n	801627a <setvbuf+0x14a>
 80161b6:	ab01      	add	r3, sp, #4
 80161b8:	466a      	mov	r2, sp
 80161ba:	4621      	mov	r1, r4
 80161bc:	4638      	mov	r0, r7
 80161be:	f000 ff79 	bl	80170b4 <__swhatbuf_r>
 80161c2:	89a3      	ldrh	r3, [r4, #12]
 80161c4:	4318      	orrs	r0, r3
 80161c6:	81a0      	strh	r0, [r4, #12]
 80161c8:	bb2d      	cbnz	r5, 8016216 <setvbuf+0xe6>
 80161ca:	9d00      	ldr	r5, [sp, #0]
 80161cc:	4628      	mov	r0, r5
 80161ce:	f7ff fdbf 	bl	8015d50 <malloc>
 80161d2:	4606      	mov	r6, r0
 80161d4:	2800      	cmp	r0, #0
 80161d6:	d152      	bne.n	801627e <setvbuf+0x14e>
 80161d8:	f8dd 9000 	ldr.w	r9, [sp]
 80161dc:	45a9      	cmp	r9, r5
 80161de:	d140      	bne.n	8016262 <setvbuf+0x132>
 80161e0:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80161e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80161e8:	f043 0202 	orr.w	r2, r3, #2
 80161ec:	81a2      	strh	r2, [r4, #12]
 80161ee:	2200      	movs	r2, #0
 80161f0:	60a2      	str	r2, [r4, #8]
 80161f2:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 80161f6:	6022      	str	r2, [r4, #0]
 80161f8:	6122      	str	r2, [r4, #16]
 80161fa:	2201      	movs	r2, #1
 80161fc:	6162      	str	r2, [r4, #20]
 80161fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8016200:	07d6      	lsls	r6, r2, #31
 8016202:	d404      	bmi.n	801620e <setvbuf+0xde>
 8016204:	0598      	lsls	r0, r3, #22
 8016206:	d402      	bmi.n	801620e <setvbuf+0xde>
 8016208:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801620a:	f000 fa27 	bl	801665c <__retarget_lock_release_recursive>
 801620e:	4628      	mov	r0, r5
 8016210:	b003      	add	sp, #12
 8016212:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016216:	2e00      	cmp	r6, #0
 8016218:	d0d8      	beq.n	80161cc <setvbuf+0x9c>
 801621a:	6a3b      	ldr	r3, [r7, #32]
 801621c:	b913      	cbnz	r3, 8016224 <setvbuf+0xf4>
 801621e:	4638      	mov	r0, r7
 8016220:	f7ff fee0 	bl	8015fe4 <__sinit>
 8016224:	f1b8 0f01 	cmp.w	r8, #1
 8016228:	bf08      	it	eq
 801622a:	89a3      	ldrheq	r3, [r4, #12]
 801622c:	6026      	str	r6, [r4, #0]
 801622e:	bf04      	itt	eq
 8016230:	f043 0301 	orreq.w	r3, r3, #1
 8016234:	81a3      	strheq	r3, [r4, #12]
 8016236:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801623a:	f013 0208 	ands.w	r2, r3, #8
 801623e:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8016242:	d01e      	beq.n	8016282 <setvbuf+0x152>
 8016244:	07d9      	lsls	r1, r3, #31
 8016246:	bf41      	itttt	mi
 8016248:	2200      	movmi	r2, #0
 801624a:	426d      	negmi	r5, r5
 801624c:	60a2      	strmi	r2, [r4, #8]
 801624e:	61a5      	strmi	r5, [r4, #24]
 8016250:	bf58      	it	pl
 8016252:	60a5      	strpl	r5, [r4, #8]
 8016254:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8016256:	07d2      	lsls	r2, r2, #31
 8016258:	d401      	bmi.n	801625e <setvbuf+0x12e>
 801625a:	059b      	lsls	r3, r3, #22
 801625c:	d513      	bpl.n	8016286 <setvbuf+0x156>
 801625e:	2500      	movs	r5, #0
 8016260:	e7d5      	b.n	801620e <setvbuf+0xde>
 8016262:	4648      	mov	r0, r9
 8016264:	f7ff fd74 	bl	8015d50 <malloc>
 8016268:	4606      	mov	r6, r0
 801626a:	2800      	cmp	r0, #0
 801626c:	d0b8      	beq.n	80161e0 <setvbuf+0xb0>
 801626e:	89a3      	ldrh	r3, [r4, #12]
 8016270:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016274:	81a3      	strh	r3, [r4, #12]
 8016276:	464d      	mov	r5, r9
 8016278:	e7cf      	b.n	801621a <setvbuf+0xea>
 801627a:	2500      	movs	r5, #0
 801627c:	e7b2      	b.n	80161e4 <setvbuf+0xb4>
 801627e:	46a9      	mov	r9, r5
 8016280:	e7f5      	b.n	801626e <setvbuf+0x13e>
 8016282:	60a2      	str	r2, [r4, #8]
 8016284:	e7e6      	b.n	8016254 <setvbuf+0x124>
 8016286:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016288:	f000 f9e8 	bl	801665c <__retarget_lock_release_recursive>
 801628c:	e7e7      	b.n	801625e <setvbuf+0x12e>
 801628e:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8016292:	e7bc      	b.n	801620e <setvbuf+0xde>
 8016294:	24000020 	.word	0x24000020

08016298 <siprintf>:
 8016298:	b40e      	push	{r1, r2, r3}
 801629a:	b510      	push	{r4, lr}
 801629c:	b09d      	sub	sp, #116	@ 0x74
 801629e:	ab1f      	add	r3, sp, #124	@ 0x7c
 80162a0:	9002      	str	r0, [sp, #8]
 80162a2:	9006      	str	r0, [sp, #24]
 80162a4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80162a8:	480a      	ldr	r0, [pc, #40]	@ (80162d4 <siprintf+0x3c>)
 80162aa:	9107      	str	r1, [sp, #28]
 80162ac:	9104      	str	r1, [sp, #16]
 80162ae:	490a      	ldr	r1, [pc, #40]	@ (80162d8 <siprintf+0x40>)
 80162b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80162b4:	9105      	str	r1, [sp, #20]
 80162b6:	2400      	movs	r4, #0
 80162b8:	a902      	add	r1, sp, #8
 80162ba:	6800      	ldr	r0, [r0, #0]
 80162bc:	9301      	str	r3, [sp, #4]
 80162be:	941b      	str	r4, [sp, #108]	@ 0x6c
 80162c0:	f000 fa82 	bl	80167c8 <_svfiprintf_r>
 80162c4:	9b02      	ldr	r3, [sp, #8]
 80162c6:	701c      	strb	r4, [r3, #0]
 80162c8:	b01d      	add	sp, #116	@ 0x74
 80162ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80162ce:	b003      	add	sp, #12
 80162d0:	4770      	bx	lr
 80162d2:	bf00      	nop
 80162d4:	24000020 	.word	0x24000020
 80162d8:	ffff0208 	.word	0xffff0208

080162dc <__sread>:
 80162dc:	b510      	push	{r4, lr}
 80162de:	460c      	mov	r4, r1
 80162e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80162e4:	f000 f95a 	bl	801659c <_read_r>
 80162e8:	2800      	cmp	r0, #0
 80162ea:	bfab      	itete	ge
 80162ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80162ee:	89a3      	ldrhlt	r3, [r4, #12]
 80162f0:	181b      	addge	r3, r3, r0
 80162f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80162f6:	bfac      	ite	ge
 80162f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80162fa:	81a3      	strhlt	r3, [r4, #12]
 80162fc:	bd10      	pop	{r4, pc}

080162fe <__swrite>:
 80162fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016302:	461f      	mov	r7, r3
 8016304:	898b      	ldrh	r3, [r1, #12]
 8016306:	05db      	lsls	r3, r3, #23
 8016308:	4605      	mov	r5, r0
 801630a:	460c      	mov	r4, r1
 801630c:	4616      	mov	r6, r2
 801630e:	d505      	bpl.n	801631c <__swrite+0x1e>
 8016310:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016314:	2302      	movs	r3, #2
 8016316:	2200      	movs	r2, #0
 8016318:	f000 f92e 	bl	8016578 <_lseek_r>
 801631c:	89a3      	ldrh	r3, [r4, #12]
 801631e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016322:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8016326:	81a3      	strh	r3, [r4, #12]
 8016328:	4632      	mov	r2, r6
 801632a:	463b      	mov	r3, r7
 801632c:	4628      	mov	r0, r5
 801632e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016332:	f000 b955 	b.w	80165e0 <_write_r>

08016336 <__sseek>:
 8016336:	b510      	push	{r4, lr}
 8016338:	460c      	mov	r4, r1
 801633a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801633e:	f000 f91b 	bl	8016578 <_lseek_r>
 8016342:	1c43      	adds	r3, r0, #1
 8016344:	89a3      	ldrh	r3, [r4, #12]
 8016346:	bf15      	itete	ne
 8016348:	6560      	strne	r0, [r4, #84]	@ 0x54
 801634a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801634e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8016352:	81a3      	strheq	r3, [r4, #12]
 8016354:	bf18      	it	ne
 8016356:	81a3      	strhne	r3, [r4, #12]
 8016358:	bd10      	pop	{r4, pc}

0801635a <__sclose>:
 801635a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801635e:	f000 b89d 	b.w	801649c <_close_r>

08016362 <__swbuf_r>:
 8016362:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016364:	460e      	mov	r6, r1
 8016366:	4614      	mov	r4, r2
 8016368:	4605      	mov	r5, r0
 801636a:	b118      	cbz	r0, 8016374 <__swbuf_r+0x12>
 801636c:	6a03      	ldr	r3, [r0, #32]
 801636e:	b90b      	cbnz	r3, 8016374 <__swbuf_r+0x12>
 8016370:	f7ff fe38 	bl	8015fe4 <__sinit>
 8016374:	69a3      	ldr	r3, [r4, #24]
 8016376:	60a3      	str	r3, [r4, #8]
 8016378:	89a3      	ldrh	r3, [r4, #12]
 801637a:	071a      	lsls	r2, r3, #28
 801637c:	d501      	bpl.n	8016382 <__swbuf_r+0x20>
 801637e:	6923      	ldr	r3, [r4, #16]
 8016380:	b943      	cbnz	r3, 8016394 <__swbuf_r+0x32>
 8016382:	4621      	mov	r1, r4
 8016384:	4628      	mov	r0, r5
 8016386:	f000 f82b 	bl	80163e0 <__swsetup_r>
 801638a:	b118      	cbz	r0, 8016394 <__swbuf_r+0x32>
 801638c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8016390:	4638      	mov	r0, r7
 8016392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016394:	6823      	ldr	r3, [r4, #0]
 8016396:	6922      	ldr	r2, [r4, #16]
 8016398:	1a98      	subs	r0, r3, r2
 801639a:	6963      	ldr	r3, [r4, #20]
 801639c:	b2f6      	uxtb	r6, r6
 801639e:	4283      	cmp	r3, r0
 80163a0:	4637      	mov	r7, r6
 80163a2:	dc05      	bgt.n	80163b0 <__swbuf_r+0x4e>
 80163a4:	4621      	mov	r1, r4
 80163a6:	4628      	mov	r0, r5
 80163a8:	f000 fe5c 	bl	8017064 <_fflush_r>
 80163ac:	2800      	cmp	r0, #0
 80163ae:	d1ed      	bne.n	801638c <__swbuf_r+0x2a>
 80163b0:	68a3      	ldr	r3, [r4, #8]
 80163b2:	3b01      	subs	r3, #1
 80163b4:	60a3      	str	r3, [r4, #8]
 80163b6:	6823      	ldr	r3, [r4, #0]
 80163b8:	1c5a      	adds	r2, r3, #1
 80163ba:	6022      	str	r2, [r4, #0]
 80163bc:	701e      	strb	r6, [r3, #0]
 80163be:	6962      	ldr	r2, [r4, #20]
 80163c0:	1c43      	adds	r3, r0, #1
 80163c2:	429a      	cmp	r2, r3
 80163c4:	d004      	beq.n	80163d0 <__swbuf_r+0x6e>
 80163c6:	89a3      	ldrh	r3, [r4, #12]
 80163c8:	07db      	lsls	r3, r3, #31
 80163ca:	d5e1      	bpl.n	8016390 <__swbuf_r+0x2e>
 80163cc:	2e0a      	cmp	r6, #10
 80163ce:	d1df      	bne.n	8016390 <__swbuf_r+0x2e>
 80163d0:	4621      	mov	r1, r4
 80163d2:	4628      	mov	r0, r5
 80163d4:	f000 fe46 	bl	8017064 <_fflush_r>
 80163d8:	2800      	cmp	r0, #0
 80163da:	d0d9      	beq.n	8016390 <__swbuf_r+0x2e>
 80163dc:	e7d6      	b.n	801638c <__swbuf_r+0x2a>
	...

080163e0 <__swsetup_r>:
 80163e0:	b538      	push	{r3, r4, r5, lr}
 80163e2:	4b29      	ldr	r3, [pc, #164]	@ (8016488 <__swsetup_r+0xa8>)
 80163e4:	4605      	mov	r5, r0
 80163e6:	6818      	ldr	r0, [r3, #0]
 80163e8:	460c      	mov	r4, r1
 80163ea:	b118      	cbz	r0, 80163f4 <__swsetup_r+0x14>
 80163ec:	6a03      	ldr	r3, [r0, #32]
 80163ee:	b90b      	cbnz	r3, 80163f4 <__swsetup_r+0x14>
 80163f0:	f7ff fdf8 	bl	8015fe4 <__sinit>
 80163f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80163f8:	0719      	lsls	r1, r3, #28
 80163fa:	d422      	bmi.n	8016442 <__swsetup_r+0x62>
 80163fc:	06da      	lsls	r2, r3, #27
 80163fe:	d407      	bmi.n	8016410 <__swsetup_r+0x30>
 8016400:	2209      	movs	r2, #9
 8016402:	602a      	str	r2, [r5, #0]
 8016404:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016408:	81a3      	strh	r3, [r4, #12]
 801640a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801640e:	e033      	b.n	8016478 <__swsetup_r+0x98>
 8016410:	0758      	lsls	r0, r3, #29
 8016412:	d512      	bpl.n	801643a <__swsetup_r+0x5a>
 8016414:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016416:	b141      	cbz	r1, 801642a <__swsetup_r+0x4a>
 8016418:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801641c:	4299      	cmp	r1, r3
 801641e:	d002      	beq.n	8016426 <__swsetup_r+0x46>
 8016420:	4628      	mov	r0, r5
 8016422:	f000 f92b 	bl	801667c <_free_r>
 8016426:	2300      	movs	r3, #0
 8016428:	6363      	str	r3, [r4, #52]	@ 0x34
 801642a:	89a3      	ldrh	r3, [r4, #12]
 801642c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8016430:	81a3      	strh	r3, [r4, #12]
 8016432:	2300      	movs	r3, #0
 8016434:	6063      	str	r3, [r4, #4]
 8016436:	6923      	ldr	r3, [r4, #16]
 8016438:	6023      	str	r3, [r4, #0]
 801643a:	89a3      	ldrh	r3, [r4, #12]
 801643c:	f043 0308 	orr.w	r3, r3, #8
 8016440:	81a3      	strh	r3, [r4, #12]
 8016442:	6923      	ldr	r3, [r4, #16]
 8016444:	b94b      	cbnz	r3, 801645a <__swsetup_r+0x7a>
 8016446:	89a3      	ldrh	r3, [r4, #12]
 8016448:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801644c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016450:	d003      	beq.n	801645a <__swsetup_r+0x7a>
 8016452:	4621      	mov	r1, r4
 8016454:	4628      	mov	r0, r5
 8016456:	f000 fe53 	bl	8017100 <__smakebuf_r>
 801645a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801645e:	f013 0201 	ands.w	r2, r3, #1
 8016462:	d00a      	beq.n	801647a <__swsetup_r+0x9a>
 8016464:	2200      	movs	r2, #0
 8016466:	60a2      	str	r2, [r4, #8]
 8016468:	6962      	ldr	r2, [r4, #20]
 801646a:	4252      	negs	r2, r2
 801646c:	61a2      	str	r2, [r4, #24]
 801646e:	6922      	ldr	r2, [r4, #16]
 8016470:	b942      	cbnz	r2, 8016484 <__swsetup_r+0xa4>
 8016472:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8016476:	d1c5      	bne.n	8016404 <__swsetup_r+0x24>
 8016478:	bd38      	pop	{r3, r4, r5, pc}
 801647a:	0799      	lsls	r1, r3, #30
 801647c:	bf58      	it	pl
 801647e:	6962      	ldrpl	r2, [r4, #20]
 8016480:	60a2      	str	r2, [r4, #8]
 8016482:	e7f4      	b.n	801646e <__swsetup_r+0x8e>
 8016484:	2000      	movs	r0, #0
 8016486:	e7f7      	b.n	8016478 <__swsetup_r+0x98>
 8016488:	24000020 	.word	0x24000020

0801648c <memset>:
 801648c:	4402      	add	r2, r0
 801648e:	4603      	mov	r3, r0
 8016490:	4293      	cmp	r3, r2
 8016492:	d100      	bne.n	8016496 <memset+0xa>
 8016494:	4770      	bx	lr
 8016496:	f803 1b01 	strb.w	r1, [r3], #1
 801649a:	e7f9      	b.n	8016490 <memset+0x4>

0801649c <_close_r>:
 801649c:	b538      	push	{r3, r4, r5, lr}
 801649e:	4d06      	ldr	r5, [pc, #24]	@ (80164b8 <_close_r+0x1c>)
 80164a0:	2300      	movs	r3, #0
 80164a2:	4604      	mov	r4, r0
 80164a4:	4608      	mov	r0, r1
 80164a6:	602b      	str	r3, [r5, #0]
 80164a8:	f7ed fbc0 	bl	8003c2c <_close>
 80164ac:	1c43      	adds	r3, r0, #1
 80164ae:	d102      	bne.n	80164b6 <_close_r+0x1a>
 80164b0:	682b      	ldr	r3, [r5, #0]
 80164b2:	b103      	cbz	r3, 80164b6 <_close_r+0x1a>
 80164b4:	6023      	str	r3, [r4, #0]
 80164b6:	bd38      	pop	{r3, r4, r5, pc}
 80164b8:	240054a4 	.word	0x240054a4

080164bc <_reclaim_reent>:
 80164bc:	4b2d      	ldr	r3, [pc, #180]	@ (8016574 <_reclaim_reent+0xb8>)
 80164be:	681b      	ldr	r3, [r3, #0]
 80164c0:	4283      	cmp	r3, r0
 80164c2:	b570      	push	{r4, r5, r6, lr}
 80164c4:	4604      	mov	r4, r0
 80164c6:	d053      	beq.n	8016570 <_reclaim_reent+0xb4>
 80164c8:	69c3      	ldr	r3, [r0, #28]
 80164ca:	b31b      	cbz	r3, 8016514 <_reclaim_reent+0x58>
 80164cc:	68db      	ldr	r3, [r3, #12]
 80164ce:	b163      	cbz	r3, 80164ea <_reclaim_reent+0x2e>
 80164d0:	2500      	movs	r5, #0
 80164d2:	69e3      	ldr	r3, [r4, #28]
 80164d4:	68db      	ldr	r3, [r3, #12]
 80164d6:	5959      	ldr	r1, [r3, r5]
 80164d8:	b9b1      	cbnz	r1, 8016508 <_reclaim_reent+0x4c>
 80164da:	3504      	adds	r5, #4
 80164dc:	2d80      	cmp	r5, #128	@ 0x80
 80164de:	d1f8      	bne.n	80164d2 <_reclaim_reent+0x16>
 80164e0:	69e3      	ldr	r3, [r4, #28]
 80164e2:	4620      	mov	r0, r4
 80164e4:	68d9      	ldr	r1, [r3, #12]
 80164e6:	f000 f8c9 	bl	801667c <_free_r>
 80164ea:	69e3      	ldr	r3, [r4, #28]
 80164ec:	6819      	ldr	r1, [r3, #0]
 80164ee:	b111      	cbz	r1, 80164f6 <_reclaim_reent+0x3a>
 80164f0:	4620      	mov	r0, r4
 80164f2:	f000 f8c3 	bl	801667c <_free_r>
 80164f6:	69e3      	ldr	r3, [r4, #28]
 80164f8:	689d      	ldr	r5, [r3, #8]
 80164fa:	b15d      	cbz	r5, 8016514 <_reclaim_reent+0x58>
 80164fc:	4629      	mov	r1, r5
 80164fe:	4620      	mov	r0, r4
 8016500:	682d      	ldr	r5, [r5, #0]
 8016502:	f000 f8bb 	bl	801667c <_free_r>
 8016506:	e7f8      	b.n	80164fa <_reclaim_reent+0x3e>
 8016508:	680e      	ldr	r6, [r1, #0]
 801650a:	4620      	mov	r0, r4
 801650c:	f000 f8b6 	bl	801667c <_free_r>
 8016510:	4631      	mov	r1, r6
 8016512:	e7e1      	b.n	80164d8 <_reclaim_reent+0x1c>
 8016514:	6961      	ldr	r1, [r4, #20]
 8016516:	b111      	cbz	r1, 801651e <_reclaim_reent+0x62>
 8016518:	4620      	mov	r0, r4
 801651a:	f000 f8af 	bl	801667c <_free_r>
 801651e:	69e1      	ldr	r1, [r4, #28]
 8016520:	b111      	cbz	r1, 8016528 <_reclaim_reent+0x6c>
 8016522:	4620      	mov	r0, r4
 8016524:	f000 f8aa 	bl	801667c <_free_r>
 8016528:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801652a:	b111      	cbz	r1, 8016532 <_reclaim_reent+0x76>
 801652c:	4620      	mov	r0, r4
 801652e:	f000 f8a5 	bl	801667c <_free_r>
 8016532:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016534:	b111      	cbz	r1, 801653c <_reclaim_reent+0x80>
 8016536:	4620      	mov	r0, r4
 8016538:	f000 f8a0 	bl	801667c <_free_r>
 801653c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801653e:	b111      	cbz	r1, 8016546 <_reclaim_reent+0x8a>
 8016540:	4620      	mov	r0, r4
 8016542:	f000 f89b 	bl	801667c <_free_r>
 8016546:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8016548:	b111      	cbz	r1, 8016550 <_reclaim_reent+0x94>
 801654a:	4620      	mov	r0, r4
 801654c:	f000 f896 	bl	801667c <_free_r>
 8016550:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8016552:	b111      	cbz	r1, 801655a <_reclaim_reent+0x9e>
 8016554:	4620      	mov	r0, r4
 8016556:	f000 f891 	bl	801667c <_free_r>
 801655a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801655c:	b111      	cbz	r1, 8016564 <_reclaim_reent+0xa8>
 801655e:	4620      	mov	r0, r4
 8016560:	f000 f88c 	bl	801667c <_free_r>
 8016564:	6a23      	ldr	r3, [r4, #32]
 8016566:	b11b      	cbz	r3, 8016570 <_reclaim_reent+0xb4>
 8016568:	4620      	mov	r0, r4
 801656a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801656e:	4718      	bx	r3
 8016570:	bd70      	pop	{r4, r5, r6, pc}
 8016572:	bf00      	nop
 8016574:	24000020 	.word	0x24000020

08016578 <_lseek_r>:
 8016578:	b538      	push	{r3, r4, r5, lr}
 801657a:	4d07      	ldr	r5, [pc, #28]	@ (8016598 <_lseek_r+0x20>)
 801657c:	4604      	mov	r4, r0
 801657e:	4608      	mov	r0, r1
 8016580:	4611      	mov	r1, r2
 8016582:	2200      	movs	r2, #0
 8016584:	602a      	str	r2, [r5, #0]
 8016586:	461a      	mov	r2, r3
 8016588:	f7ed fb67 	bl	8003c5a <_lseek>
 801658c:	1c43      	adds	r3, r0, #1
 801658e:	d102      	bne.n	8016596 <_lseek_r+0x1e>
 8016590:	682b      	ldr	r3, [r5, #0]
 8016592:	b103      	cbz	r3, 8016596 <_lseek_r+0x1e>
 8016594:	6023      	str	r3, [r4, #0]
 8016596:	bd38      	pop	{r3, r4, r5, pc}
 8016598:	240054a4 	.word	0x240054a4

0801659c <_read_r>:
 801659c:	b538      	push	{r3, r4, r5, lr}
 801659e:	4d07      	ldr	r5, [pc, #28]	@ (80165bc <_read_r+0x20>)
 80165a0:	4604      	mov	r4, r0
 80165a2:	4608      	mov	r0, r1
 80165a4:	4611      	mov	r1, r2
 80165a6:	2200      	movs	r2, #0
 80165a8:	602a      	str	r2, [r5, #0]
 80165aa:	461a      	mov	r2, r3
 80165ac:	f7ed fb66 	bl	8003c7c <_read>
 80165b0:	1c43      	adds	r3, r0, #1
 80165b2:	d102      	bne.n	80165ba <_read_r+0x1e>
 80165b4:	682b      	ldr	r3, [r5, #0]
 80165b6:	b103      	cbz	r3, 80165ba <_read_r+0x1e>
 80165b8:	6023      	str	r3, [r4, #0]
 80165ba:	bd38      	pop	{r3, r4, r5, pc}
 80165bc:	240054a4 	.word	0x240054a4

080165c0 <_sbrk_r>:
 80165c0:	b538      	push	{r3, r4, r5, lr}
 80165c2:	4d06      	ldr	r5, [pc, #24]	@ (80165dc <_sbrk_r+0x1c>)
 80165c4:	2300      	movs	r3, #0
 80165c6:	4604      	mov	r4, r0
 80165c8:	4608      	mov	r0, r1
 80165ca:	602b      	str	r3, [r5, #0]
 80165cc:	f7eb f892 	bl	80016f4 <_sbrk>
 80165d0:	1c43      	adds	r3, r0, #1
 80165d2:	d102      	bne.n	80165da <_sbrk_r+0x1a>
 80165d4:	682b      	ldr	r3, [r5, #0]
 80165d6:	b103      	cbz	r3, 80165da <_sbrk_r+0x1a>
 80165d8:	6023      	str	r3, [r4, #0]
 80165da:	bd38      	pop	{r3, r4, r5, pc}
 80165dc:	240054a4 	.word	0x240054a4

080165e0 <_write_r>:
 80165e0:	b538      	push	{r3, r4, r5, lr}
 80165e2:	4d07      	ldr	r5, [pc, #28]	@ (8016600 <_write_r+0x20>)
 80165e4:	4604      	mov	r4, r0
 80165e6:	4608      	mov	r0, r1
 80165e8:	4611      	mov	r1, r2
 80165ea:	2200      	movs	r2, #0
 80165ec:	602a      	str	r2, [r5, #0]
 80165ee:	461a      	mov	r2, r3
 80165f0:	f7ed faf0 	bl	8003bd4 <_write>
 80165f4:	1c43      	adds	r3, r0, #1
 80165f6:	d102      	bne.n	80165fe <_write_r+0x1e>
 80165f8:	682b      	ldr	r3, [r5, #0]
 80165fa:	b103      	cbz	r3, 80165fe <_write_r+0x1e>
 80165fc:	6023      	str	r3, [r4, #0]
 80165fe:	bd38      	pop	{r3, r4, r5, pc}
 8016600:	240054a4 	.word	0x240054a4

08016604 <__errno>:
 8016604:	4b01      	ldr	r3, [pc, #4]	@ (801660c <__errno+0x8>)
 8016606:	6818      	ldr	r0, [r3, #0]
 8016608:	4770      	bx	lr
 801660a:	bf00      	nop
 801660c:	24000020 	.word	0x24000020

08016610 <__libc_init_array>:
 8016610:	b570      	push	{r4, r5, r6, lr}
 8016612:	4d0d      	ldr	r5, [pc, #52]	@ (8016648 <__libc_init_array+0x38>)
 8016614:	4c0d      	ldr	r4, [pc, #52]	@ (801664c <__libc_init_array+0x3c>)
 8016616:	1b64      	subs	r4, r4, r5
 8016618:	10a4      	asrs	r4, r4, #2
 801661a:	2600      	movs	r6, #0
 801661c:	42a6      	cmp	r6, r4
 801661e:	d109      	bne.n	8016634 <__libc_init_array+0x24>
 8016620:	4d0b      	ldr	r5, [pc, #44]	@ (8016650 <__libc_init_array+0x40>)
 8016622:	4c0c      	ldr	r4, [pc, #48]	@ (8016654 <__libc_init_array+0x44>)
 8016624:	f000 fe1a 	bl	801725c <_init>
 8016628:	1b64      	subs	r4, r4, r5
 801662a:	10a4      	asrs	r4, r4, #2
 801662c:	2600      	movs	r6, #0
 801662e:	42a6      	cmp	r6, r4
 8016630:	d105      	bne.n	801663e <__libc_init_array+0x2e>
 8016632:	bd70      	pop	{r4, r5, r6, pc}
 8016634:	f855 3b04 	ldr.w	r3, [r5], #4
 8016638:	4798      	blx	r3
 801663a:	3601      	adds	r6, #1
 801663c:	e7ee      	b.n	801661c <__libc_init_array+0xc>
 801663e:	f855 3b04 	ldr.w	r3, [r5], #4
 8016642:	4798      	blx	r3
 8016644:	3601      	adds	r6, #1
 8016646:	e7f2      	b.n	801662e <__libc_init_array+0x1e>
 8016648:	08017840 	.word	0x08017840
 801664c:	08017840 	.word	0x08017840
 8016650:	08017840 	.word	0x08017840
 8016654:	08017848 	.word	0x08017848

08016658 <__retarget_lock_init_recursive>:
 8016658:	4770      	bx	lr

0801665a <__retarget_lock_acquire_recursive>:
 801665a:	4770      	bx	lr

0801665c <__retarget_lock_release_recursive>:
 801665c:	4770      	bx	lr

0801665e <memcpy>:
 801665e:	440a      	add	r2, r1
 8016660:	4291      	cmp	r1, r2
 8016662:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8016666:	d100      	bne.n	801666a <memcpy+0xc>
 8016668:	4770      	bx	lr
 801666a:	b510      	push	{r4, lr}
 801666c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016670:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016674:	4291      	cmp	r1, r2
 8016676:	d1f9      	bne.n	801666c <memcpy+0xe>
 8016678:	bd10      	pop	{r4, pc}
	...

0801667c <_free_r>:
 801667c:	b538      	push	{r3, r4, r5, lr}
 801667e:	4605      	mov	r5, r0
 8016680:	2900      	cmp	r1, #0
 8016682:	d041      	beq.n	8016708 <_free_r+0x8c>
 8016684:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016688:	1f0c      	subs	r4, r1, #4
 801668a:	2b00      	cmp	r3, #0
 801668c:	bfb8      	it	lt
 801668e:	18e4      	addlt	r4, r4, r3
 8016690:	f7ff fc10 	bl	8015eb4 <__malloc_lock>
 8016694:	4a1d      	ldr	r2, [pc, #116]	@ (801670c <_free_r+0x90>)
 8016696:	6813      	ldr	r3, [r2, #0]
 8016698:	b933      	cbnz	r3, 80166a8 <_free_r+0x2c>
 801669a:	6063      	str	r3, [r4, #4]
 801669c:	6014      	str	r4, [r2, #0]
 801669e:	4628      	mov	r0, r5
 80166a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80166a4:	f7ff bc0c 	b.w	8015ec0 <__malloc_unlock>
 80166a8:	42a3      	cmp	r3, r4
 80166aa:	d908      	bls.n	80166be <_free_r+0x42>
 80166ac:	6820      	ldr	r0, [r4, #0]
 80166ae:	1821      	adds	r1, r4, r0
 80166b0:	428b      	cmp	r3, r1
 80166b2:	bf01      	itttt	eq
 80166b4:	6819      	ldreq	r1, [r3, #0]
 80166b6:	685b      	ldreq	r3, [r3, #4]
 80166b8:	1809      	addeq	r1, r1, r0
 80166ba:	6021      	streq	r1, [r4, #0]
 80166bc:	e7ed      	b.n	801669a <_free_r+0x1e>
 80166be:	461a      	mov	r2, r3
 80166c0:	685b      	ldr	r3, [r3, #4]
 80166c2:	b10b      	cbz	r3, 80166c8 <_free_r+0x4c>
 80166c4:	42a3      	cmp	r3, r4
 80166c6:	d9fa      	bls.n	80166be <_free_r+0x42>
 80166c8:	6811      	ldr	r1, [r2, #0]
 80166ca:	1850      	adds	r0, r2, r1
 80166cc:	42a0      	cmp	r0, r4
 80166ce:	d10b      	bne.n	80166e8 <_free_r+0x6c>
 80166d0:	6820      	ldr	r0, [r4, #0]
 80166d2:	4401      	add	r1, r0
 80166d4:	1850      	adds	r0, r2, r1
 80166d6:	4283      	cmp	r3, r0
 80166d8:	6011      	str	r1, [r2, #0]
 80166da:	d1e0      	bne.n	801669e <_free_r+0x22>
 80166dc:	6818      	ldr	r0, [r3, #0]
 80166de:	685b      	ldr	r3, [r3, #4]
 80166e0:	6053      	str	r3, [r2, #4]
 80166e2:	4408      	add	r0, r1
 80166e4:	6010      	str	r0, [r2, #0]
 80166e6:	e7da      	b.n	801669e <_free_r+0x22>
 80166e8:	d902      	bls.n	80166f0 <_free_r+0x74>
 80166ea:	230c      	movs	r3, #12
 80166ec:	602b      	str	r3, [r5, #0]
 80166ee:	e7d6      	b.n	801669e <_free_r+0x22>
 80166f0:	6820      	ldr	r0, [r4, #0]
 80166f2:	1821      	adds	r1, r4, r0
 80166f4:	428b      	cmp	r3, r1
 80166f6:	bf04      	itt	eq
 80166f8:	6819      	ldreq	r1, [r3, #0]
 80166fa:	685b      	ldreq	r3, [r3, #4]
 80166fc:	6063      	str	r3, [r4, #4]
 80166fe:	bf04      	itt	eq
 8016700:	1809      	addeq	r1, r1, r0
 8016702:	6021      	streq	r1, [r4, #0]
 8016704:	6054      	str	r4, [r2, #4]
 8016706:	e7ca      	b.n	801669e <_free_r+0x22>
 8016708:	bd38      	pop	{r3, r4, r5, pc}
 801670a:	bf00      	nop
 801670c:	24005364 	.word	0x24005364

08016710 <__ssputs_r>:
 8016710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016714:	688e      	ldr	r6, [r1, #8]
 8016716:	461f      	mov	r7, r3
 8016718:	42be      	cmp	r6, r7
 801671a:	680b      	ldr	r3, [r1, #0]
 801671c:	4682      	mov	sl, r0
 801671e:	460c      	mov	r4, r1
 8016720:	4690      	mov	r8, r2
 8016722:	d82d      	bhi.n	8016780 <__ssputs_r+0x70>
 8016724:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016728:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801672c:	d026      	beq.n	801677c <__ssputs_r+0x6c>
 801672e:	6965      	ldr	r5, [r4, #20]
 8016730:	6909      	ldr	r1, [r1, #16]
 8016732:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016736:	eba3 0901 	sub.w	r9, r3, r1
 801673a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801673e:	1c7b      	adds	r3, r7, #1
 8016740:	444b      	add	r3, r9
 8016742:	106d      	asrs	r5, r5, #1
 8016744:	429d      	cmp	r5, r3
 8016746:	bf38      	it	cc
 8016748:	461d      	movcc	r5, r3
 801674a:	0553      	lsls	r3, r2, #21
 801674c:	d527      	bpl.n	801679e <__ssputs_r+0x8e>
 801674e:	4629      	mov	r1, r5
 8016750:	f7ff fb30 	bl	8015db4 <_malloc_r>
 8016754:	4606      	mov	r6, r0
 8016756:	b360      	cbz	r0, 80167b2 <__ssputs_r+0xa2>
 8016758:	6921      	ldr	r1, [r4, #16]
 801675a:	464a      	mov	r2, r9
 801675c:	f7ff ff7f 	bl	801665e <memcpy>
 8016760:	89a3      	ldrh	r3, [r4, #12]
 8016762:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8016766:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801676a:	81a3      	strh	r3, [r4, #12]
 801676c:	6126      	str	r6, [r4, #16]
 801676e:	6165      	str	r5, [r4, #20]
 8016770:	444e      	add	r6, r9
 8016772:	eba5 0509 	sub.w	r5, r5, r9
 8016776:	6026      	str	r6, [r4, #0]
 8016778:	60a5      	str	r5, [r4, #8]
 801677a:	463e      	mov	r6, r7
 801677c:	42be      	cmp	r6, r7
 801677e:	d900      	bls.n	8016782 <__ssputs_r+0x72>
 8016780:	463e      	mov	r6, r7
 8016782:	6820      	ldr	r0, [r4, #0]
 8016784:	4632      	mov	r2, r6
 8016786:	4641      	mov	r1, r8
 8016788:	f000 fcf6 	bl	8017178 <memmove>
 801678c:	68a3      	ldr	r3, [r4, #8]
 801678e:	1b9b      	subs	r3, r3, r6
 8016790:	60a3      	str	r3, [r4, #8]
 8016792:	6823      	ldr	r3, [r4, #0]
 8016794:	4433      	add	r3, r6
 8016796:	6023      	str	r3, [r4, #0]
 8016798:	2000      	movs	r0, #0
 801679a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801679e:	462a      	mov	r2, r5
 80167a0:	f000 fd26 	bl	80171f0 <_realloc_r>
 80167a4:	4606      	mov	r6, r0
 80167a6:	2800      	cmp	r0, #0
 80167a8:	d1e0      	bne.n	801676c <__ssputs_r+0x5c>
 80167aa:	6921      	ldr	r1, [r4, #16]
 80167ac:	4650      	mov	r0, sl
 80167ae:	f7ff ff65 	bl	801667c <_free_r>
 80167b2:	230c      	movs	r3, #12
 80167b4:	f8ca 3000 	str.w	r3, [sl]
 80167b8:	89a3      	ldrh	r3, [r4, #12]
 80167ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80167be:	81a3      	strh	r3, [r4, #12]
 80167c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80167c4:	e7e9      	b.n	801679a <__ssputs_r+0x8a>
	...

080167c8 <_svfiprintf_r>:
 80167c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167cc:	4698      	mov	r8, r3
 80167ce:	898b      	ldrh	r3, [r1, #12]
 80167d0:	061b      	lsls	r3, r3, #24
 80167d2:	b09d      	sub	sp, #116	@ 0x74
 80167d4:	4607      	mov	r7, r0
 80167d6:	460d      	mov	r5, r1
 80167d8:	4614      	mov	r4, r2
 80167da:	d510      	bpl.n	80167fe <_svfiprintf_r+0x36>
 80167dc:	690b      	ldr	r3, [r1, #16]
 80167de:	b973      	cbnz	r3, 80167fe <_svfiprintf_r+0x36>
 80167e0:	2140      	movs	r1, #64	@ 0x40
 80167e2:	f7ff fae7 	bl	8015db4 <_malloc_r>
 80167e6:	6028      	str	r0, [r5, #0]
 80167e8:	6128      	str	r0, [r5, #16]
 80167ea:	b930      	cbnz	r0, 80167fa <_svfiprintf_r+0x32>
 80167ec:	230c      	movs	r3, #12
 80167ee:	603b      	str	r3, [r7, #0]
 80167f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80167f4:	b01d      	add	sp, #116	@ 0x74
 80167f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167fa:	2340      	movs	r3, #64	@ 0x40
 80167fc:	616b      	str	r3, [r5, #20]
 80167fe:	2300      	movs	r3, #0
 8016800:	9309      	str	r3, [sp, #36]	@ 0x24
 8016802:	2320      	movs	r3, #32
 8016804:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016808:	f8cd 800c 	str.w	r8, [sp, #12]
 801680c:	2330      	movs	r3, #48	@ 0x30
 801680e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80169ac <_svfiprintf_r+0x1e4>
 8016812:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016816:	f04f 0901 	mov.w	r9, #1
 801681a:	4623      	mov	r3, r4
 801681c:	469a      	mov	sl, r3
 801681e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016822:	b10a      	cbz	r2, 8016828 <_svfiprintf_r+0x60>
 8016824:	2a25      	cmp	r2, #37	@ 0x25
 8016826:	d1f9      	bne.n	801681c <_svfiprintf_r+0x54>
 8016828:	ebba 0b04 	subs.w	fp, sl, r4
 801682c:	d00b      	beq.n	8016846 <_svfiprintf_r+0x7e>
 801682e:	465b      	mov	r3, fp
 8016830:	4622      	mov	r2, r4
 8016832:	4629      	mov	r1, r5
 8016834:	4638      	mov	r0, r7
 8016836:	f7ff ff6b 	bl	8016710 <__ssputs_r>
 801683a:	3001      	adds	r0, #1
 801683c:	f000 80a7 	beq.w	801698e <_svfiprintf_r+0x1c6>
 8016840:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016842:	445a      	add	r2, fp
 8016844:	9209      	str	r2, [sp, #36]	@ 0x24
 8016846:	f89a 3000 	ldrb.w	r3, [sl]
 801684a:	2b00      	cmp	r3, #0
 801684c:	f000 809f 	beq.w	801698e <_svfiprintf_r+0x1c6>
 8016850:	2300      	movs	r3, #0
 8016852:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8016856:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801685a:	f10a 0a01 	add.w	sl, sl, #1
 801685e:	9304      	str	r3, [sp, #16]
 8016860:	9307      	str	r3, [sp, #28]
 8016862:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016866:	931a      	str	r3, [sp, #104]	@ 0x68
 8016868:	4654      	mov	r4, sl
 801686a:	2205      	movs	r2, #5
 801686c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016870:	484e      	ldr	r0, [pc, #312]	@ (80169ac <_svfiprintf_r+0x1e4>)
 8016872:	f7e9 fd3d 	bl	80002f0 <memchr>
 8016876:	9a04      	ldr	r2, [sp, #16]
 8016878:	b9d8      	cbnz	r0, 80168b2 <_svfiprintf_r+0xea>
 801687a:	06d0      	lsls	r0, r2, #27
 801687c:	bf44      	itt	mi
 801687e:	2320      	movmi	r3, #32
 8016880:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016884:	0711      	lsls	r1, r2, #28
 8016886:	bf44      	itt	mi
 8016888:	232b      	movmi	r3, #43	@ 0x2b
 801688a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801688e:	f89a 3000 	ldrb.w	r3, [sl]
 8016892:	2b2a      	cmp	r3, #42	@ 0x2a
 8016894:	d015      	beq.n	80168c2 <_svfiprintf_r+0xfa>
 8016896:	9a07      	ldr	r2, [sp, #28]
 8016898:	4654      	mov	r4, sl
 801689a:	2000      	movs	r0, #0
 801689c:	f04f 0c0a 	mov.w	ip, #10
 80168a0:	4621      	mov	r1, r4
 80168a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80168a6:	3b30      	subs	r3, #48	@ 0x30
 80168a8:	2b09      	cmp	r3, #9
 80168aa:	d94b      	bls.n	8016944 <_svfiprintf_r+0x17c>
 80168ac:	b1b0      	cbz	r0, 80168dc <_svfiprintf_r+0x114>
 80168ae:	9207      	str	r2, [sp, #28]
 80168b0:	e014      	b.n	80168dc <_svfiprintf_r+0x114>
 80168b2:	eba0 0308 	sub.w	r3, r0, r8
 80168b6:	fa09 f303 	lsl.w	r3, r9, r3
 80168ba:	4313      	orrs	r3, r2
 80168bc:	9304      	str	r3, [sp, #16]
 80168be:	46a2      	mov	sl, r4
 80168c0:	e7d2      	b.n	8016868 <_svfiprintf_r+0xa0>
 80168c2:	9b03      	ldr	r3, [sp, #12]
 80168c4:	1d19      	adds	r1, r3, #4
 80168c6:	681b      	ldr	r3, [r3, #0]
 80168c8:	9103      	str	r1, [sp, #12]
 80168ca:	2b00      	cmp	r3, #0
 80168cc:	bfbb      	ittet	lt
 80168ce:	425b      	neglt	r3, r3
 80168d0:	f042 0202 	orrlt.w	r2, r2, #2
 80168d4:	9307      	strge	r3, [sp, #28]
 80168d6:	9307      	strlt	r3, [sp, #28]
 80168d8:	bfb8      	it	lt
 80168da:	9204      	strlt	r2, [sp, #16]
 80168dc:	7823      	ldrb	r3, [r4, #0]
 80168de:	2b2e      	cmp	r3, #46	@ 0x2e
 80168e0:	d10a      	bne.n	80168f8 <_svfiprintf_r+0x130>
 80168e2:	7863      	ldrb	r3, [r4, #1]
 80168e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80168e6:	d132      	bne.n	801694e <_svfiprintf_r+0x186>
 80168e8:	9b03      	ldr	r3, [sp, #12]
 80168ea:	1d1a      	adds	r2, r3, #4
 80168ec:	681b      	ldr	r3, [r3, #0]
 80168ee:	9203      	str	r2, [sp, #12]
 80168f0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80168f4:	3402      	adds	r4, #2
 80168f6:	9305      	str	r3, [sp, #20]
 80168f8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80169bc <_svfiprintf_r+0x1f4>
 80168fc:	7821      	ldrb	r1, [r4, #0]
 80168fe:	2203      	movs	r2, #3
 8016900:	4650      	mov	r0, sl
 8016902:	f7e9 fcf5 	bl	80002f0 <memchr>
 8016906:	b138      	cbz	r0, 8016918 <_svfiprintf_r+0x150>
 8016908:	9b04      	ldr	r3, [sp, #16]
 801690a:	eba0 000a 	sub.w	r0, r0, sl
 801690e:	2240      	movs	r2, #64	@ 0x40
 8016910:	4082      	lsls	r2, r0
 8016912:	4313      	orrs	r3, r2
 8016914:	3401      	adds	r4, #1
 8016916:	9304      	str	r3, [sp, #16]
 8016918:	f814 1b01 	ldrb.w	r1, [r4], #1
 801691c:	4824      	ldr	r0, [pc, #144]	@ (80169b0 <_svfiprintf_r+0x1e8>)
 801691e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016922:	2206      	movs	r2, #6
 8016924:	f7e9 fce4 	bl	80002f0 <memchr>
 8016928:	2800      	cmp	r0, #0
 801692a:	d036      	beq.n	801699a <_svfiprintf_r+0x1d2>
 801692c:	4b21      	ldr	r3, [pc, #132]	@ (80169b4 <_svfiprintf_r+0x1ec>)
 801692e:	bb1b      	cbnz	r3, 8016978 <_svfiprintf_r+0x1b0>
 8016930:	9b03      	ldr	r3, [sp, #12]
 8016932:	3307      	adds	r3, #7
 8016934:	f023 0307 	bic.w	r3, r3, #7
 8016938:	3308      	adds	r3, #8
 801693a:	9303      	str	r3, [sp, #12]
 801693c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801693e:	4433      	add	r3, r6
 8016940:	9309      	str	r3, [sp, #36]	@ 0x24
 8016942:	e76a      	b.n	801681a <_svfiprintf_r+0x52>
 8016944:	fb0c 3202 	mla	r2, ip, r2, r3
 8016948:	460c      	mov	r4, r1
 801694a:	2001      	movs	r0, #1
 801694c:	e7a8      	b.n	80168a0 <_svfiprintf_r+0xd8>
 801694e:	2300      	movs	r3, #0
 8016950:	3401      	adds	r4, #1
 8016952:	9305      	str	r3, [sp, #20]
 8016954:	4619      	mov	r1, r3
 8016956:	f04f 0c0a 	mov.w	ip, #10
 801695a:	4620      	mov	r0, r4
 801695c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016960:	3a30      	subs	r2, #48	@ 0x30
 8016962:	2a09      	cmp	r2, #9
 8016964:	d903      	bls.n	801696e <_svfiprintf_r+0x1a6>
 8016966:	2b00      	cmp	r3, #0
 8016968:	d0c6      	beq.n	80168f8 <_svfiprintf_r+0x130>
 801696a:	9105      	str	r1, [sp, #20]
 801696c:	e7c4      	b.n	80168f8 <_svfiprintf_r+0x130>
 801696e:	fb0c 2101 	mla	r1, ip, r1, r2
 8016972:	4604      	mov	r4, r0
 8016974:	2301      	movs	r3, #1
 8016976:	e7f0      	b.n	801695a <_svfiprintf_r+0x192>
 8016978:	ab03      	add	r3, sp, #12
 801697a:	9300      	str	r3, [sp, #0]
 801697c:	462a      	mov	r2, r5
 801697e:	4b0e      	ldr	r3, [pc, #56]	@ (80169b8 <_svfiprintf_r+0x1f0>)
 8016980:	a904      	add	r1, sp, #16
 8016982:	4638      	mov	r0, r7
 8016984:	f3af 8000 	nop.w
 8016988:	1c42      	adds	r2, r0, #1
 801698a:	4606      	mov	r6, r0
 801698c:	d1d6      	bne.n	801693c <_svfiprintf_r+0x174>
 801698e:	89ab      	ldrh	r3, [r5, #12]
 8016990:	065b      	lsls	r3, r3, #25
 8016992:	f53f af2d 	bmi.w	80167f0 <_svfiprintf_r+0x28>
 8016996:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016998:	e72c      	b.n	80167f4 <_svfiprintf_r+0x2c>
 801699a:	ab03      	add	r3, sp, #12
 801699c:	9300      	str	r3, [sp, #0]
 801699e:	462a      	mov	r2, r5
 80169a0:	4b05      	ldr	r3, [pc, #20]	@ (80169b8 <_svfiprintf_r+0x1f0>)
 80169a2:	a904      	add	r1, sp, #16
 80169a4:	4638      	mov	r0, r7
 80169a6:	f000 f9bb 	bl	8016d20 <_printf_i>
 80169aa:	e7ed      	b.n	8016988 <_svfiprintf_r+0x1c0>
 80169ac:	08017804 	.word	0x08017804
 80169b0:	0801780e 	.word	0x0801780e
 80169b4:	00000000 	.word	0x00000000
 80169b8:	08016711 	.word	0x08016711
 80169bc:	0801780a 	.word	0x0801780a

080169c0 <__sfputc_r>:
 80169c0:	6893      	ldr	r3, [r2, #8]
 80169c2:	3b01      	subs	r3, #1
 80169c4:	2b00      	cmp	r3, #0
 80169c6:	b410      	push	{r4}
 80169c8:	6093      	str	r3, [r2, #8]
 80169ca:	da08      	bge.n	80169de <__sfputc_r+0x1e>
 80169cc:	6994      	ldr	r4, [r2, #24]
 80169ce:	42a3      	cmp	r3, r4
 80169d0:	db01      	blt.n	80169d6 <__sfputc_r+0x16>
 80169d2:	290a      	cmp	r1, #10
 80169d4:	d103      	bne.n	80169de <__sfputc_r+0x1e>
 80169d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80169da:	f7ff bcc2 	b.w	8016362 <__swbuf_r>
 80169de:	6813      	ldr	r3, [r2, #0]
 80169e0:	1c58      	adds	r0, r3, #1
 80169e2:	6010      	str	r0, [r2, #0]
 80169e4:	7019      	strb	r1, [r3, #0]
 80169e6:	4608      	mov	r0, r1
 80169e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80169ec:	4770      	bx	lr

080169ee <__sfputs_r>:
 80169ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80169f0:	4606      	mov	r6, r0
 80169f2:	460f      	mov	r7, r1
 80169f4:	4614      	mov	r4, r2
 80169f6:	18d5      	adds	r5, r2, r3
 80169f8:	42ac      	cmp	r4, r5
 80169fa:	d101      	bne.n	8016a00 <__sfputs_r+0x12>
 80169fc:	2000      	movs	r0, #0
 80169fe:	e007      	b.n	8016a10 <__sfputs_r+0x22>
 8016a00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016a04:	463a      	mov	r2, r7
 8016a06:	4630      	mov	r0, r6
 8016a08:	f7ff ffda 	bl	80169c0 <__sfputc_r>
 8016a0c:	1c43      	adds	r3, r0, #1
 8016a0e:	d1f3      	bne.n	80169f8 <__sfputs_r+0xa>
 8016a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016a14 <_vfiprintf_r>:
 8016a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a18:	460d      	mov	r5, r1
 8016a1a:	b09d      	sub	sp, #116	@ 0x74
 8016a1c:	4614      	mov	r4, r2
 8016a1e:	4698      	mov	r8, r3
 8016a20:	4606      	mov	r6, r0
 8016a22:	b118      	cbz	r0, 8016a2c <_vfiprintf_r+0x18>
 8016a24:	6a03      	ldr	r3, [r0, #32]
 8016a26:	b90b      	cbnz	r3, 8016a2c <_vfiprintf_r+0x18>
 8016a28:	f7ff fadc 	bl	8015fe4 <__sinit>
 8016a2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016a2e:	07d9      	lsls	r1, r3, #31
 8016a30:	d405      	bmi.n	8016a3e <_vfiprintf_r+0x2a>
 8016a32:	89ab      	ldrh	r3, [r5, #12]
 8016a34:	059a      	lsls	r2, r3, #22
 8016a36:	d402      	bmi.n	8016a3e <_vfiprintf_r+0x2a>
 8016a38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016a3a:	f7ff fe0e 	bl	801665a <__retarget_lock_acquire_recursive>
 8016a3e:	89ab      	ldrh	r3, [r5, #12]
 8016a40:	071b      	lsls	r3, r3, #28
 8016a42:	d501      	bpl.n	8016a48 <_vfiprintf_r+0x34>
 8016a44:	692b      	ldr	r3, [r5, #16]
 8016a46:	b99b      	cbnz	r3, 8016a70 <_vfiprintf_r+0x5c>
 8016a48:	4629      	mov	r1, r5
 8016a4a:	4630      	mov	r0, r6
 8016a4c:	f7ff fcc8 	bl	80163e0 <__swsetup_r>
 8016a50:	b170      	cbz	r0, 8016a70 <_vfiprintf_r+0x5c>
 8016a52:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016a54:	07dc      	lsls	r4, r3, #31
 8016a56:	d504      	bpl.n	8016a62 <_vfiprintf_r+0x4e>
 8016a58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016a5c:	b01d      	add	sp, #116	@ 0x74
 8016a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a62:	89ab      	ldrh	r3, [r5, #12]
 8016a64:	0598      	lsls	r0, r3, #22
 8016a66:	d4f7      	bmi.n	8016a58 <_vfiprintf_r+0x44>
 8016a68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016a6a:	f7ff fdf7 	bl	801665c <__retarget_lock_release_recursive>
 8016a6e:	e7f3      	b.n	8016a58 <_vfiprintf_r+0x44>
 8016a70:	2300      	movs	r3, #0
 8016a72:	9309      	str	r3, [sp, #36]	@ 0x24
 8016a74:	2320      	movs	r3, #32
 8016a76:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016a7a:	f8cd 800c 	str.w	r8, [sp, #12]
 8016a7e:	2330      	movs	r3, #48	@ 0x30
 8016a80:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8016c30 <_vfiprintf_r+0x21c>
 8016a84:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016a88:	f04f 0901 	mov.w	r9, #1
 8016a8c:	4623      	mov	r3, r4
 8016a8e:	469a      	mov	sl, r3
 8016a90:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016a94:	b10a      	cbz	r2, 8016a9a <_vfiprintf_r+0x86>
 8016a96:	2a25      	cmp	r2, #37	@ 0x25
 8016a98:	d1f9      	bne.n	8016a8e <_vfiprintf_r+0x7a>
 8016a9a:	ebba 0b04 	subs.w	fp, sl, r4
 8016a9e:	d00b      	beq.n	8016ab8 <_vfiprintf_r+0xa4>
 8016aa0:	465b      	mov	r3, fp
 8016aa2:	4622      	mov	r2, r4
 8016aa4:	4629      	mov	r1, r5
 8016aa6:	4630      	mov	r0, r6
 8016aa8:	f7ff ffa1 	bl	80169ee <__sfputs_r>
 8016aac:	3001      	adds	r0, #1
 8016aae:	f000 80a7 	beq.w	8016c00 <_vfiprintf_r+0x1ec>
 8016ab2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016ab4:	445a      	add	r2, fp
 8016ab6:	9209      	str	r2, [sp, #36]	@ 0x24
 8016ab8:	f89a 3000 	ldrb.w	r3, [sl]
 8016abc:	2b00      	cmp	r3, #0
 8016abe:	f000 809f 	beq.w	8016c00 <_vfiprintf_r+0x1ec>
 8016ac2:	2300      	movs	r3, #0
 8016ac4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8016ac8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016acc:	f10a 0a01 	add.w	sl, sl, #1
 8016ad0:	9304      	str	r3, [sp, #16]
 8016ad2:	9307      	str	r3, [sp, #28]
 8016ad4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016ad8:	931a      	str	r3, [sp, #104]	@ 0x68
 8016ada:	4654      	mov	r4, sl
 8016adc:	2205      	movs	r2, #5
 8016ade:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016ae2:	4853      	ldr	r0, [pc, #332]	@ (8016c30 <_vfiprintf_r+0x21c>)
 8016ae4:	f7e9 fc04 	bl	80002f0 <memchr>
 8016ae8:	9a04      	ldr	r2, [sp, #16]
 8016aea:	b9d8      	cbnz	r0, 8016b24 <_vfiprintf_r+0x110>
 8016aec:	06d1      	lsls	r1, r2, #27
 8016aee:	bf44      	itt	mi
 8016af0:	2320      	movmi	r3, #32
 8016af2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016af6:	0713      	lsls	r3, r2, #28
 8016af8:	bf44      	itt	mi
 8016afa:	232b      	movmi	r3, #43	@ 0x2b
 8016afc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016b00:	f89a 3000 	ldrb.w	r3, [sl]
 8016b04:	2b2a      	cmp	r3, #42	@ 0x2a
 8016b06:	d015      	beq.n	8016b34 <_vfiprintf_r+0x120>
 8016b08:	9a07      	ldr	r2, [sp, #28]
 8016b0a:	4654      	mov	r4, sl
 8016b0c:	2000      	movs	r0, #0
 8016b0e:	f04f 0c0a 	mov.w	ip, #10
 8016b12:	4621      	mov	r1, r4
 8016b14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016b18:	3b30      	subs	r3, #48	@ 0x30
 8016b1a:	2b09      	cmp	r3, #9
 8016b1c:	d94b      	bls.n	8016bb6 <_vfiprintf_r+0x1a2>
 8016b1e:	b1b0      	cbz	r0, 8016b4e <_vfiprintf_r+0x13a>
 8016b20:	9207      	str	r2, [sp, #28]
 8016b22:	e014      	b.n	8016b4e <_vfiprintf_r+0x13a>
 8016b24:	eba0 0308 	sub.w	r3, r0, r8
 8016b28:	fa09 f303 	lsl.w	r3, r9, r3
 8016b2c:	4313      	orrs	r3, r2
 8016b2e:	9304      	str	r3, [sp, #16]
 8016b30:	46a2      	mov	sl, r4
 8016b32:	e7d2      	b.n	8016ada <_vfiprintf_r+0xc6>
 8016b34:	9b03      	ldr	r3, [sp, #12]
 8016b36:	1d19      	adds	r1, r3, #4
 8016b38:	681b      	ldr	r3, [r3, #0]
 8016b3a:	9103      	str	r1, [sp, #12]
 8016b3c:	2b00      	cmp	r3, #0
 8016b3e:	bfbb      	ittet	lt
 8016b40:	425b      	neglt	r3, r3
 8016b42:	f042 0202 	orrlt.w	r2, r2, #2
 8016b46:	9307      	strge	r3, [sp, #28]
 8016b48:	9307      	strlt	r3, [sp, #28]
 8016b4a:	bfb8      	it	lt
 8016b4c:	9204      	strlt	r2, [sp, #16]
 8016b4e:	7823      	ldrb	r3, [r4, #0]
 8016b50:	2b2e      	cmp	r3, #46	@ 0x2e
 8016b52:	d10a      	bne.n	8016b6a <_vfiprintf_r+0x156>
 8016b54:	7863      	ldrb	r3, [r4, #1]
 8016b56:	2b2a      	cmp	r3, #42	@ 0x2a
 8016b58:	d132      	bne.n	8016bc0 <_vfiprintf_r+0x1ac>
 8016b5a:	9b03      	ldr	r3, [sp, #12]
 8016b5c:	1d1a      	adds	r2, r3, #4
 8016b5e:	681b      	ldr	r3, [r3, #0]
 8016b60:	9203      	str	r2, [sp, #12]
 8016b62:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016b66:	3402      	adds	r4, #2
 8016b68:	9305      	str	r3, [sp, #20]
 8016b6a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8016c40 <_vfiprintf_r+0x22c>
 8016b6e:	7821      	ldrb	r1, [r4, #0]
 8016b70:	2203      	movs	r2, #3
 8016b72:	4650      	mov	r0, sl
 8016b74:	f7e9 fbbc 	bl	80002f0 <memchr>
 8016b78:	b138      	cbz	r0, 8016b8a <_vfiprintf_r+0x176>
 8016b7a:	9b04      	ldr	r3, [sp, #16]
 8016b7c:	eba0 000a 	sub.w	r0, r0, sl
 8016b80:	2240      	movs	r2, #64	@ 0x40
 8016b82:	4082      	lsls	r2, r0
 8016b84:	4313      	orrs	r3, r2
 8016b86:	3401      	adds	r4, #1
 8016b88:	9304      	str	r3, [sp, #16]
 8016b8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016b8e:	4829      	ldr	r0, [pc, #164]	@ (8016c34 <_vfiprintf_r+0x220>)
 8016b90:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016b94:	2206      	movs	r2, #6
 8016b96:	f7e9 fbab 	bl	80002f0 <memchr>
 8016b9a:	2800      	cmp	r0, #0
 8016b9c:	d03f      	beq.n	8016c1e <_vfiprintf_r+0x20a>
 8016b9e:	4b26      	ldr	r3, [pc, #152]	@ (8016c38 <_vfiprintf_r+0x224>)
 8016ba0:	bb1b      	cbnz	r3, 8016bea <_vfiprintf_r+0x1d6>
 8016ba2:	9b03      	ldr	r3, [sp, #12]
 8016ba4:	3307      	adds	r3, #7
 8016ba6:	f023 0307 	bic.w	r3, r3, #7
 8016baa:	3308      	adds	r3, #8
 8016bac:	9303      	str	r3, [sp, #12]
 8016bae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016bb0:	443b      	add	r3, r7
 8016bb2:	9309      	str	r3, [sp, #36]	@ 0x24
 8016bb4:	e76a      	b.n	8016a8c <_vfiprintf_r+0x78>
 8016bb6:	fb0c 3202 	mla	r2, ip, r2, r3
 8016bba:	460c      	mov	r4, r1
 8016bbc:	2001      	movs	r0, #1
 8016bbe:	e7a8      	b.n	8016b12 <_vfiprintf_r+0xfe>
 8016bc0:	2300      	movs	r3, #0
 8016bc2:	3401      	adds	r4, #1
 8016bc4:	9305      	str	r3, [sp, #20]
 8016bc6:	4619      	mov	r1, r3
 8016bc8:	f04f 0c0a 	mov.w	ip, #10
 8016bcc:	4620      	mov	r0, r4
 8016bce:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016bd2:	3a30      	subs	r2, #48	@ 0x30
 8016bd4:	2a09      	cmp	r2, #9
 8016bd6:	d903      	bls.n	8016be0 <_vfiprintf_r+0x1cc>
 8016bd8:	2b00      	cmp	r3, #0
 8016bda:	d0c6      	beq.n	8016b6a <_vfiprintf_r+0x156>
 8016bdc:	9105      	str	r1, [sp, #20]
 8016bde:	e7c4      	b.n	8016b6a <_vfiprintf_r+0x156>
 8016be0:	fb0c 2101 	mla	r1, ip, r1, r2
 8016be4:	4604      	mov	r4, r0
 8016be6:	2301      	movs	r3, #1
 8016be8:	e7f0      	b.n	8016bcc <_vfiprintf_r+0x1b8>
 8016bea:	ab03      	add	r3, sp, #12
 8016bec:	9300      	str	r3, [sp, #0]
 8016bee:	462a      	mov	r2, r5
 8016bf0:	4b12      	ldr	r3, [pc, #72]	@ (8016c3c <_vfiprintf_r+0x228>)
 8016bf2:	a904      	add	r1, sp, #16
 8016bf4:	4630      	mov	r0, r6
 8016bf6:	f3af 8000 	nop.w
 8016bfa:	4607      	mov	r7, r0
 8016bfc:	1c78      	adds	r0, r7, #1
 8016bfe:	d1d6      	bne.n	8016bae <_vfiprintf_r+0x19a>
 8016c00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016c02:	07d9      	lsls	r1, r3, #31
 8016c04:	d405      	bmi.n	8016c12 <_vfiprintf_r+0x1fe>
 8016c06:	89ab      	ldrh	r3, [r5, #12]
 8016c08:	059a      	lsls	r2, r3, #22
 8016c0a:	d402      	bmi.n	8016c12 <_vfiprintf_r+0x1fe>
 8016c0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016c0e:	f7ff fd25 	bl	801665c <__retarget_lock_release_recursive>
 8016c12:	89ab      	ldrh	r3, [r5, #12]
 8016c14:	065b      	lsls	r3, r3, #25
 8016c16:	f53f af1f 	bmi.w	8016a58 <_vfiprintf_r+0x44>
 8016c1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016c1c:	e71e      	b.n	8016a5c <_vfiprintf_r+0x48>
 8016c1e:	ab03      	add	r3, sp, #12
 8016c20:	9300      	str	r3, [sp, #0]
 8016c22:	462a      	mov	r2, r5
 8016c24:	4b05      	ldr	r3, [pc, #20]	@ (8016c3c <_vfiprintf_r+0x228>)
 8016c26:	a904      	add	r1, sp, #16
 8016c28:	4630      	mov	r0, r6
 8016c2a:	f000 f879 	bl	8016d20 <_printf_i>
 8016c2e:	e7e4      	b.n	8016bfa <_vfiprintf_r+0x1e6>
 8016c30:	08017804 	.word	0x08017804
 8016c34:	0801780e 	.word	0x0801780e
 8016c38:	00000000 	.word	0x00000000
 8016c3c:	080169ef 	.word	0x080169ef
 8016c40:	0801780a 	.word	0x0801780a

08016c44 <_printf_common>:
 8016c44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016c48:	4616      	mov	r6, r2
 8016c4a:	4698      	mov	r8, r3
 8016c4c:	688a      	ldr	r2, [r1, #8]
 8016c4e:	690b      	ldr	r3, [r1, #16]
 8016c50:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8016c54:	4293      	cmp	r3, r2
 8016c56:	bfb8      	it	lt
 8016c58:	4613      	movlt	r3, r2
 8016c5a:	6033      	str	r3, [r6, #0]
 8016c5c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8016c60:	4607      	mov	r7, r0
 8016c62:	460c      	mov	r4, r1
 8016c64:	b10a      	cbz	r2, 8016c6a <_printf_common+0x26>
 8016c66:	3301      	adds	r3, #1
 8016c68:	6033      	str	r3, [r6, #0]
 8016c6a:	6823      	ldr	r3, [r4, #0]
 8016c6c:	0699      	lsls	r1, r3, #26
 8016c6e:	bf42      	ittt	mi
 8016c70:	6833      	ldrmi	r3, [r6, #0]
 8016c72:	3302      	addmi	r3, #2
 8016c74:	6033      	strmi	r3, [r6, #0]
 8016c76:	6825      	ldr	r5, [r4, #0]
 8016c78:	f015 0506 	ands.w	r5, r5, #6
 8016c7c:	d106      	bne.n	8016c8c <_printf_common+0x48>
 8016c7e:	f104 0a19 	add.w	sl, r4, #25
 8016c82:	68e3      	ldr	r3, [r4, #12]
 8016c84:	6832      	ldr	r2, [r6, #0]
 8016c86:	1a9b      	subs	r3, r3, r2
 8016c88:	42ab      	cmp	r3, r5
 8016c8a:	dc26      	bgt.n	8016cda <_printf_common+0x96>
 8016c8c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8016c90:	6822      	ldr	r2, [r4, #0]
 8016c92:	3b00      	subs	r3, #0
 8016c94:	bf18      	it	ne
 8016c96:	2301      	movne	r3, #1
 8016c98:	0692      	lsls	r2, r2, #26
 8016c9a:	d42b      	bmi.n	8016cf4 <_printf_common+0xb0>
 8016c9c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8016ca0:	4641      	mov	r1, r8
 8016ca2:	4638      	mov	r0, r7
 8016ca4:	47c8      	blx	r9
 8016ca6:	3001      	adds	r0, #1
 8016ca8:	d01e      	beq.n	8016ce8 <_printf_common+0xa4>
 8016caa:	6823      	ldr	r3, [r4, #0]
 8016cac:	6922      	ldr	r2, [r4, #16]
 8016cae:	f003 0306 	and.w	r3, r3, #6
 8016cb2:	2b04      	cmp	r3, #4
 8016cb4:	bf02      	ittt	eq
 8016cb6:	68e5      	ldreq	r5, [r4, #12]
 8016cb8:	6833      	ldreq	r3, [r6, #0]
 8016cba:	1aed      	subeq	r5, r5, r3
 8016cbc:	68a3      	ldr	r3, [r4, #8]
 8016cbe:	bf0c      	ite	eq
 8016cc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016cc4:	2500      	movne	r5, #0
 8016cc6:	4293      	cmp	r3, r2
 8016cc8:	bfc4      	itt	gt
 8016cca:	1a9b      	subgt	r3, r3, r2
 8016ccc:	18ed      	addgt	r5, r5, r3
 8016cce:	2600      	movs	r6, #0
 8016cd0:	341a      	adds	r4, #26
 8016cd2:	42b5      	cmp	r5, r6
 8016cd4:	d11a      	bne.n	8016d0c <_printf_common+0xc8>
 8016cd6:	2000      	movs	r0, #0
 8016cd8:	e008      	b.n	8016cec <_printf_common+0xa8>
 8016cda:	2301      	movs	r3, #1
 8016cdc:	4652      	mov	r2, sl
 8016cde:	4641      	mov	r1, r8
 8016ce0:	4638      	mov	r0, r7
 8016ce2:	47c8      	blx	r9
 8016ce4:	3001      	adds	r0, #1
 8016ce6:	d103      	bne.n	8016cf0 <_printf_common+0xac>
 8016ce8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016cec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016cf0:	3501      	adds	r5, #1
 8016cf2:	e7c6      	b.n	8016c82 <_printf_common+0x3e>
 8016cf4:	18e1      	adds	r1, r4, r3
 8016cf6:	1c5a      	adds	r2, r3, #1
 8016cf8:	2030      	movs	r0, #48	@ 0x30
 8016cfa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8016cfe:	4422      	add	r2, r4
 8016d00:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8016d04:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8016d08:	3302      	adds	r3, #2
 8016d0a:	e7c7      	b.n	8016c9c <_printf_common+0x58>
 8016d0c:	2301      	movs	r3, #1
 8016d0e:	4622      	mov	r2, r4
 8016d10:	4641      	mov	r1, r8
 8016d12:	4638      	mov	r0, r7
 8016d14:	47c8      	blx	r9
 8016d16:	3001      	adds	r0, #1
 8016d18:	d0e6      	beq.n	8016ce8 <_printf_common+0xa4>
 8016d1a:	3601      	adds	r6, #1
 8016d1c:	e7d9      	b.n	8016cd2 <_printf_common+0x8e>
	...

08016d20 <_printf_i>:
 8016d20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016d24:	7e0f      	ldrb	r7, [r1, #24]
 8016d26:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8016d28:	2f78      	cmp	r7, #120	@ 0x78
 8016d2a:	4691      	mov	r9, r2
 8016d2c:	4680      	mov	r8, r0
 8016d2e:	460c      	mov	r4, r1
 8016d30:	469a      	mov	sl, r3
 8016d32:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8016d36:	d807      	bhi.n	8016d48 <_printf_i+0x28>
 8016d38:	2f62      	cmp	r7, #98	@ 0x62
 8016d3a:	d80a      	bhi.n	8016d52 <_printf_i+0x32>
 8016d3c:	2f00      	cmp	r7, #0
 8016d3e:	f000 80d1 	beq.w	8016ee4 <_printf_i+0x1c4>
 8016d42:	2f58      	cmp	r7, #88	@ 0x58
 8016d44:	f000 80b8 	beq.w	8016eb8 <_printf_i+0x198>
 8016d48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016d4c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8016d50:	e03a      	b.n	8016dc8 <_printf_i+0xa8>
 8016d52:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8016d56:	2b15      	cmp	r3, #21
 8016d58:	d8f6      	bhi.n	8016d48 <_printf_i+0x28>
 8016d5a:	a101      	add	r1, pc, #4	@ (adr r1, 8016d60 <_printf_i+0x40>)
 8016d5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016d60:	08016db9 	.word	0x08016db9
 8016d64:	08016dcd 	.word	0x08016dcd
 8016d68:	08016d49 	.word	0x08016d49
 8016d6c:	08016d49 	.word	0x08016d49
 8016d70:	08016d49 	.word	0x08016d49
 8016d74:	08016d49 	.word	0x08016d49
 8016d78:	08016dcd 	.word	0x08016dcd
 8016d7c:	08016d49 	.word	0x08016d49
 8016d80:	08016d49 	.word	0x08016d49
 8016d84:	08016d49 	.word	0x08016d49
 8016d88:	08016d49 	.word	0x08016d49
 8016d8c:	08016ecb 	.word	0x08016ecb
 8016d90:	08016df7 	.word	0x08016df7
 8016d94:	08016e85 	.word	0x08016e85
 8016d98:	08016d49 	.word	0x08016d49
 8016d9c:	08016d49 	.word	0x08016d49
 8016da0:	08016eed 	.word	0x08016eed
 8016da4:	08016d49 	.word	0x08016d49
 8016da8:	08016df7 	.word	0x08016df7
 8016dac:	08016d49 	.word	0x08016d49
 8016db0:	08016d49 	.word	0x08016d49
 8016db4:	08016e8d 	.word	0x08016e8d
 8016db8:	6833      	ldr	r3, [r6, #0]
 8016dba:	1d1a      	adds	r2, r3, #4
 8016dbc:	681b      	ldr	r3, [r3, #0]
 8016dbe:	6032      	str	r2, [r6, #0]
 8016dc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016dc4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8016dc8:	2301      	movs	r3, #1
 8016dca:	e09c      	b.n	8016f06 <_printf_i+0x1e6>
 8016dcc:	6833      	ldr	r3, [r6, #0]
 8016dce:	6820      	ldr	r0, [r4, #0]
 8016dd0:	1d19      	adds	r1, r3, #4
 8016dd2:	6031      	str	r1, [r6, #0]
 8016dd4:	0606      	lsls	r6, r0, #24
 8016dd6:	d501      	bpl.n	8016ddc <_printf_i+0xbc>
 8016dd8:	681d      	ldr	r5, [r3, #0]
 8016dda:	e003      	b.n	8016de4 <_printf_i+0xc4>
 8016ddc:	0645      	lsls	r5, r0, #25
 8016dde:	d5fb      	bpl.n	8016dd8 <_printf_i+0xb8>
 8016de0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8016de4:	2d00      	cmp	r5, #0
 8016de6:	da03      	bge.n	8016df0 <_printf_i+0xd0>
 8016de8:	232d      	movs	r3, #45	@ 0x2d
 8016dea:	426d      	negs	r5, r5
 8016dec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016df0:	4858      	ldr	r0, [pc, #352]	@ (8016f54 <_printf_i+0x234>)
 8016df2:	230a      	movs	r3, #10
 8016df4:	e011      	b.n	8016e1a <_printf_i+0xfa>
 8016df6:	6821      	ldr	r1, [r4, #0]
 8016df8:	6833      	ldr	r3, [r6, #0]
 8016dfa:	0608      	lsls	r0, r1, #24
 8016dfc:	f853 5b04 	ldr.w	r5, [r3], #4
 8016e00:	d402      	bmi.n	8016e08 <_printf_i+0xe8>
 8016e02:	0649      	lsls	r1, r1, #25
 8016e04:	bf48      	it	mi
 8016e06:	b2ad      	uxthmi	r5, r5
 8016e08:	2f6f      	cmp	r7, #111	@ 0x6f
 8016e0a:	4852      	ldr	r0, [pc, #328]	@ (8016f54 <_printf_i+0x234>)
 8016e0c:	6033      	str	r3, [r6, #0]
 8016e0e:	bf14      	ite	ne
 8016e10:	230a      	movne	r3, #10
 8016e12:	2308      	moveq	r3, #8
 8016e14:	2100      	movs	r1, #0
 8016e16:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8016e1a:	6866      	ldr	r6, [r4, #4]
 8016e1c:	60a6      	str	r6, [r4, #8]
 8016e1e:	2e00      	cmp	r6, #0
 8016e20:	db05      	blt.n	8016e2e <_printf_i+0x10e>
 8016e22:	6821      	ldr	r1, [r4, #0]
 8016e24:	432e      	orrs	r6, r5
 8016e26:	f021 0104 	bic.w	r1, r1, #4
 8016e2a:	6021      	str	r1, [r4, #0]
 8016e2c:	d04b      	beq.n	8016ec6 <_printf_i+0x1a6>
 8016e2e:	4616      	mov	r6, r2
 8016e30:	fbb5 f1f3 	udiv	r1, r5, r3
 8016e34:	fb03 5711 	mls	r7, r3, r1, r5
 8016e38:	5dc7      	ldrb	r7, [r0, r7]
 8016e3a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8016e3e:	462f      	mov	r7, r5
 8016e40:	42bb      	cmp	r3, r7
 8016e42:	460d      	mov	r5, r1
 8016e44:	d9f4      	bls.n	8016e30 <_printf_i+0x110>
 8016e46:	2b08      	cmp	r3, #8
 8016e48:	d10b      	bne.n	8016e62 <_printf_i+0x142>
 8016e4a:	6823      	ldr	r3, [r4, #0]
 8016e4c:	07df      	lsls	r7, r3, #31
 8016e4e:	d508      	bpl.n	8016e62 <_printf_i+0x142>
 8016e50:	6923      	ldr	r3, [r4, #16]
 8016e52:	6861      	ldr	r1, [r4, #4]
 8016e54:	4299      	cmp	r1, r3
 8016e56:	bfde      	ittt	le
 8016e58:	2330      	movle	r3, #48	@ 0x30
 8016e5a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8016e5e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8016e62:	1b92      	subs	r2, r2, r6
 8016e64:	6122      	str	r2, [r4, #16]
 8016e66:	f8cd a000 	str.w	sl, [sp]
 8016e6a:	464b      	mov	r3, r9
 8016e6c:	aa03      	add	r2, sp, #12
 8016e6e:	4621      	mov	r1, r4
 8016e70:	4640      	mov	r0, r8
 8016e72:	f7ff fee7 	bl	8016c44 <_printf_common>
 8016e76:	3001      	adds	r0, #1
 8016e78:	d14a      	bne.n	8016f10 <_printf_i+0x1f0>
 8016e7a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016e7e:	b004      	add	sp, #16
 8016e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016e84:	6823      	ldr	r3, [r4, #0]
 8016e86:	f043 0320 	orr.w	r3, r3, #32
 8016e8a:	6023      	str	r3, [r4, #0]
 8016e8c:	4832      	ldr	r0, [pc, #200]	@ (8016f58 <_printf_i+0x238>)
 8016e8e:	2778      	movs	r7, #120	@ 0x78
 8016e90:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8016e94:	6823      	ldr	r3, [r4, #0]
 8016e96:	6831      	ldr	r1, [r6, #0]
 8016e98:	061f      	lsls	r7, r3, #24
 8016e9a:	f851 5b04 	ldr.w	r5, [r1], #4
 8016e9e:	d402      	bmi.n	8016ea6 <_printf_i+0x186>
 8016ea0:	065f      	lsls	r7, r3, #25
 8016ea2:	bf48      	it	mi
 8016ea4:	b2ad      	uxthmi	r5, r5
 8016ea6:	6031      	str	r1, [r6, #0]
 8016ea8:	07d9      	lsls	r1, r3, #31
 8016eaa:	bf44      	itt	mi
 8016eac:	f043 0320 	orrmi.w	r3, r3, #32
 8016eb0:	6023      	strmi	r3, [r4, #0]
 8016eb2:	b11d      	cbz	r5, 8016ebc <_printf_i+0x19c>
 8016eb4:	2310      	movs	r3, #16
 8016eb6:	e7ad      	b.n	8016e14 <_printf_i+0xf4>
 8016eb8:	4826      	ldr	r0, [pc, #152]	@ (8016f54 <_printf_i+0x234>)
 8016eba:	e7e9      	b.n	8016e90 <_printf_i+0x170>
 8016ebc:	6823      	ldr	r3, [r4, #0]
 8016ebe:	f023 0320 	bic.w	r3, r3, #32
 8016ec2:	6023      	str	r3, [r4, #0]
 8016ec4:	e7f6      	b.n	8016eb4 <_printf_i+0x194>
 8016ec6:	4616      	mov	r6, r2
 8016ec8:	e7bd      	b.n	8016e46 <_printf_i+0x126>
 8016eca:	6833      	ldr	r3, [r6, #0]
 8016ecc:	6825      	ldr	r5, [r4, #0]
 8016ece:	6961      	ldr	r1, [r4, #20]
 8016ed0:	1d18      	adds	r0, r3, #4
 8016ed2:	6030      	str	r0, [r6, #0]
 8016ed4:	062e      	lsls	r6, r5, #24
 8016ed6:	681b      	ldr	r3, [r3, #0]
 8016ed8:	d501      	bpl.n	8016ede <_printf_i+0x1be>
 8016eda:	6019      	str	r1, [r3, #0]
 8016edc:	e002      	b.n	8016ee4 <_printf_i+0x1c4>
 8016ede:	0668      	lsls	r0, r5, #25
 8016ee0:	d5fb      	bpl.n	8016eda <_printf_i+0x1ba>
 8016ee2:	8019      	strh	r1, [r3, #0]
 8016ee4:	2300      	movs	r3, #0
 8016ee6:	6123      	str	r3, [r4, #16]
 8016ee8:	4616      	mov	r6, r2
 8016eea:	e7bc      	b.n	8016e66 <_printf_i+0x146>
 8016eec:	6833      	ldr	r3, [r6, #0]
 8016eee:	1d1a      	adds	r2, r3, #4
 8016ef0:	6032      	str	r2, [r6, #0]
 8016ef2:	681e      	ldr	r6, [r3, #0]
 8016ef4:	6862      	ldr	r2, [r4, #4]
 8016ef6:	2100      	movs	r1, #0
 8016ef8:	4630      	mov	r0, r6
 8016efa:	f7e9 f9f9 	bl	80002f0 <memchr>
 8016efe:	b108      	cbz	r0, 8016f04 <_printf_i+0x1e4>
 8016f00:	1b80      	subs	r0, r0, r6
 8016f02:	6060      	str	r0, [r4, #4]
 8016f04:	6863      	ldr	r3, [r4, #4]
 8016f06:	6123      	str	r3, [r4, #16]
 8016f08:	2300      	movs	r3, #0
 8016f0a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016f0e:	e7aa      	b.n	8016e66 <_printf_i+0x146>
 8016f10:	6923      	ldr	r3, [r4, #16]
 8016f12:	4632      	mov	r2, r6
 8016f14:	4649      	mov	r1, r9
 8016f16:	4640      	mov	r0, r8
 8016f18:	47d0      	blx	sl
 8016f1a:	3001      	adds	r0, #1
 8016f1c:	d0ad      	beq.n	8016e7a <_printf_i+0x15a>
 8016f1e:	6823      	ldr	r3, [r4, #0]
 8016f20:	079b      	lsls	r3, r3, #30
 8016f22:	d413      	bmi.n	8016f4c <_printf_i+0x22c>
 8016f24:	68e0      	ldr	r0, [r4, #12]
 8016f26:	9b03      	ldr	r3, [sp, #12]
 8016f28:	4298      	cmp	r0, r3
 8016f2a:	bfb8      	it	lt
 8016f2c:	4618      	movlt	r0, r3
 8016f2e:	e7a6      	b.n	8016e7e <_printf_i+0x15e>
 8016f30:	2301      	movs	r3, #1
 8016f32:	4632      	mov	r2, r6
 8016f34:	4649      	mov	r1, r9
 8016f36:	4640      	mov	r0, r8
 8016f38:	47d0      	blx	sl
 8016f3a:	3001      	adds	r0, #1
 8016f3c:	d09d      	beq.n	8016e7a <_printf_i+0x15a>
 8016f3e:	3501      	adds	r5, #1
 8016f40:	68e3      	ldr	r3, [r4, #12]
 8016f42:	9903      	ldr	r1, [sp, #12]
 8016f44:	1a5b      	subs	r3, r3, r1
 8016f46:	42ab      	cmp	r3, r5
 8016f48:	dcf2      	bgt.n	8016f30 <_printf_i+0x210>
 8016f4a:	e7eb      	b.n	8016f24 <_printf_i+0x204>
 8016f4c:	2500      	movs	r5, #0
 8016f4e:	f104 0619 	add.w	r6, r4, #25
 8016f52:	e7f5      	b.n	8016f40 <_printf_i+0x220>
 8016f54:	08017815 	.word	0x08017815
 8016f58:	08017826 	.word	0x08017826

08016f5c <__sflush_r>:
 8016f5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f64:	0716      	lsls	r6, r2, #28
 8016f66:	4605      	mov	r5, r0
 8016f68:	460c      	mov	r4, r1
 8016f6a:	d454      	bmi.n	8017016 <__sflush_r+0xba>
 8016f6c:	684b      	ldr	r3, [r1, #4]
 8016f6e:	2b00      	cmp	r3, #0
 8016f70:	dc02      	bgt.n	8016f78 <__sflush_r+0x1c>
 8016f72:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8016f74:	2b00      	cmp	r3, #0
 8016f76:	dd48      	ble.n	801700a <__sflush_r+0xae>
 8016f78:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016f7a:	2e00      	cmp	r6, #0
 8016f7c:	d045      	beq.n	801700a <__sflush_r+0xae>
 8016f7e:	2300      	movs	r3, #0
 8016f80:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8016f84:	682f      	ldr	r7, [r5, #0]
 8016f86:	6a21      	ldr	r1, [r4, #32]
 8016f88:	602b      	str	r3, [r5, #0]
 8016f8a:	d030      	beq.n	8016fee <__sflush_r+0x92>
 8016f8c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8016f8e:	89a3      	ldrh	r3, [r4, #12]
 8016f90:	0759      	lsls	r1, r3, #29
 8016f92:	d505      	bpl.n	8016fa0 <__sflush_r+0x44>
 8016f94:	6863      	ldr	r3, [r4, #4]
 8016f96:	1ad2      	subs	r2, r2, r3
 8016f98:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8016f9a:	b10b      	cbz	r3, 8016fa0 <__sflush_r+0x44>
 8016f9c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8016f9e:	1ad2      	subs	r2, r2, r3
 8016fa0:	2300      	movs	r3, #0
 8016fa2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016fa4:	6a21      	ldr	r1, [r4, #32]
 8016fa6:	4628      	mov	r0, r5
 8016fa8:	47b0      	blx	r6
 8016faa:	1c43      	adds	r3, r0, #1
 8016fac:	89a3      	ldrh	r3, [r4, #12]
 8016fae:	d106      	bne.n	8016fbe <__sflush_r+0x62>
 8016fb0:	6829      	ldr	r1, [r5, #0]
 8016fb2:	291d      	cmp	r1, #29
 8016fb4:	d82b      	bhi.n	801700e <__sflush_r+0xb2>
 8016fb6:	4a2a      	ldr	r2, [pc, #168]	@ (8017060 <__sflush_r+0x104>)
 8016fb8:	40ca      	lsrs	r2, r1
 8016fba:	07d6      	lsls	r6, r2, #31
 8016fbc:	d527      	bpl.n	801700e <__sflush_r+0xb2>
 8016fbe:	2200      	movs	r2, #0
 8016fc0:	6062      	str	r2, [r4, #4]
 8016fc2:	04d9      	lsls	r1, r3, #19
 8016fc4:	6922      	ldr	r2, [r4, #16]
 8016fc6:	6022      	str	r2, [r4, #0]
 8016fc8:	d504      	bpl.n	8016fd4 <__sflush_r+0x78>
 8016fca:	1c42      	adds	r2, r0, #1
 8016fcc:	d101      	bne.n	8016fd2 <__sflush_r+0x76>
 8016fce:	682b      	ldr	r3, [r5, #0]
 8016fd0:	b903      	cbnz	r3, 8016fd4 <__sflush_r+0x78>
 8016fd2:	6560      	str	r0, [r4, #84]	@ 0x54
 8016fd4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016fd6:	602f      	str	r7, [r5, #0]
 8016fd8:	b1b9      	cbz	r1, 801700a <__sflush_r+0xae>
 8016fda:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016fde:	4299      	cmp	r1, r3
 8016fe0:	d002      	beq.n	8016fe8 <__sflush_r+0x8c>
 8016fe2:	4628      	mov	r0, r5
 8016fe4:	f7ff fb4a 	bl	801667c <_free_r>
 8016fe8:	2300      	movs	r3, #0
 8016fea:	6363      	str	r3, [r4, #52]	@ 0x34
 8016fec:	e00d      	b.n	801700a <__sflush_r+0xae>
 8016fee:	2301      	movs	r3, #1
 8016ff0:	4628      	mov	r0, r5
 8016ff2:	47b0      	blx	r6
 8016ff4:	4602      	mov	r2, r0
 8016ff6:	1c50      	adds	r0, r2, #1
 8016ff8:	d1c9      	bne.n	8016f8e <__sflush_r+0x32>
 8016ffa:	682b      	ldr	r3, [r5, #0]
 8016ffc:	2b00      	cmp	r3, #0
 8016ffe:	d0c6      	beq.n	8016f8e <__sflush_r+0x32>
 8017000:	2b1d      	cmp	r3, #29
 8017002:	d001      	beq.n	8017008 <__sflush_r+0xac>
 8017004:	2b16      	cmp	r3, #22
 8017006:	d11e      	bne.n	8017046 <__sflush_r+0xea>
 8017008:	602f      	str	r7, [r5, #0]
 801700a:	2000      	movs	r0, #0
 801700c:	e022      	b.n	8017054 <__sflush_r+0xf8>
 801700e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017012:	b21b      	sxth	r3, r3
 8017014:	e01b      	b.n	801704e <__sflush_r+0xf2>
 8017016:	690f      	ldr	r7, [r1, #16]
 8017018:	2f00      	cmp	r7, #0
 801701a:	d0f6      	beq.n	801700a <__sflush_r+0xae>
 801701c:	0793      	lsls	r3, r2, #30
 801701e:	680e      	ldr	r6, [r1, #0]
 8017020:	bf08      	it	eq
 8017022:	694b      	ldreq	r3, [r1, #20]
 8017024:	600f      	str	r7, [r1, #0]
 8017026:	bf18      	it	ne
 8017028:	2300      	movne	r3, #0
 801702a:	eba6 0807 	sub.w	r8, r6, r7
 801702e:	608b      	str	r3, [r1, #8]
 8017030:	f1b8 0f00 	cmp.w	r8, #0
 8017034:	dde9      	ble.n	801700a <__sflush_r+0xae>
 8017036:	6a21      	ldr	r1, [r4, #32]
 8017038:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801703a:	4643      	mov	r3, r8
 801703c:	463a      	mov	r2, r7
 801703e:	4628      	mov	r0, r5
 8017040:	47b0      	blx	r6
 8017042:	2800      	cmp	r0, #0
 8017044:	dc08      	bgt.n	8017058 <__sflush_r+0xfc>
 8017046:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801704a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801704e:	81a3      	strh	r3, [r4, #12]
 8017050:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017058:	4407      	add	r7, r0
 801705a:	eba8 0800 	sub.w	r8, r8, r0
 801705e:	e7e7      	b.n	8017030 <__sflush_r+0xd4>
 8017060:	20400001 	.word	0x20400001

08017064 <_fflush_r>:
 8017064:	b538      	push	{r3, r4, r5, lr}
 8017066:	690b      	ldr	r3, [r1, #16]
 8017068:	4605      	mov	r5, r0
 801706a:	460c      	mov	r4, r1
 801706c:	b913      	cbnz	r3, 8017074 <_fflush_r+0x10>
 801706e:	2500      	movs	r5, #0
 8017070:	4628      	mov	r0, r5
 8017072:	bd38      	pop	{r3, r4, r5, pc}
 8017074:	b118      	cbz	r0, 801707e <_fflush_r+0x1a>
 8017076:	6a03      	ldr	r3, [r0, #32]
 8017078:	b90b      	cbnz	r3, 801707e <_fflush_r+0x1a>
 801707a:	f7fe ffb3 	bl	8015fe4 <__sinit>
 801707e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017082:	2b00      	cmp	r3, #0
 8017084:	d0f3      	beq.n	801706e <_fflush_r+0xa>
 8017086:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8017088:	07d0      	lsls	r0, r2, #31
 801708a:	d404      	bmi.n	8017096 <_fflush_r+0x32>
 801708c:	0599      	lsls	r1, r3, #22
 801708e:	d402      	bmi.n	8017096 <_fflush_r+0x32>
 8017090:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017092:	f7ff fae2 	bl	801665a <__retarget_lock_acquire_recursive>
 8017096:	4628      	mov	r0, r5
 8017098:	4621      	mov	r1, r4
 801709a:	f7ff ff5f 	bl	8016f5c <__sflush_r>
 801709e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80170a0:	07da      	lsls	r2, r3, #31
 80170a2:	4605      	mov	r5, r0
 80170a4:	d4e4      	bmi.n	8017070 <_fflush_r+0xc>
 80170a6:	89a3      	ldrh	r3, [r4, #12]
 80170a8:	059b      	lsls	r3, r3, #22
 80170aa:	d4e1      	bmi.n	8017070 <_fflush_r+0xc>
 80170ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80170ae:	f7ff fad5 	bl	801665c <__retarget_lock_release_recursive>
 80170b2:	e7dd      	b.n	8017070 <_fflush_r+0xc>

080170b4 <__swhatbuf_r>:
 80170b4:	b570      	push	{r4, r5, r6, lr}
 80170b6:	460c      	mov	r4, r1
 80170b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80170bc:	2900      	cmp	r1, #0
 80170be:	b096      	sub	sp, #88	@ 0x58
 80170c0:	4615      	mov	r5, r2
 80170c2:	461e      	mov	r6, r3
 80170c4:	da0d      	bge.n	80170e2 <__swhatbuf_r+0x2e>
 80170c6:	89a3      	ldrh	r3, [r4, #12]
 80170c8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80170cc:	f04f 0100 	mov.w	r1, #0
 80170d0:	bf14      	ite	ne
 80170d2:	2340      	movne	r3, #64	@ 0x40
 80170d4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80170d8:	2000      	movs	r0, #0
 80170da:	6031      	str	r1, [r6, #0]
 80170dc:	602b      	str	r3, [r5, #0]
 80170de:	b016      	add	sp, #88	@ 0x58
 80170e0:	bd70      	pop	{r4, r5, r6, pc}
 80170e2:	466a      	mov	r2, sp
 80170e4:	f000 f862 	bl	80171ac <_fstat_r>
 80170e8:	2800      	cmp	r0, #0
 80170ea:	dbec      	blt.n	80170c6 <__swhatbuf_r+0x12>
 80170ec:	9901      	ldr	r1, [sp, #4]
 80170ee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80170f2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80170f6:	4259      	negs	r1, r3
 80170f8:	4159      	adcs	r1, r3
 80170fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80170fe:	e7eb      	b.n	80170d8 <__swhatbuf_r+0x24>

08017100 <__smakebuf_r>:
 8017100:	898b      	ldrh	r3, [r1, #12]
 8017102:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017104:	079d      	lsls	r5, r3, #30
 8017106:	4606      	mov	r6, r0
 8017108:	460c      	mov	r4, r1
 801710a:	d507      	bpl.n	801711c <__smakebuf_r+0x1c>
 801710c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8017110:	6023      	str	r3, [r4, #0]
 8017112:	6123      	str	r3, [r4, #16]
 8017114:	2301      	movs	r3, #1
 8017116:	6163      	str	r3, [r4, #20]
 8017118:	b003      	add	sp, #12
 801711a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801711c:	ab01      	add	r3, sp, #4
 801711e:	466a      	mov	r2, sp
 8017120:	f7ff ffc8 	bl	80170b4 <__swhatbuf_r>
 8017124:	9f00      	ldr	r7, [sp, #0]
 8017126:	4605      	mov	r5, r0
 8017128:	4639      	mov	r1, r7
 801712a:	4630      	mov	r0, r6
 801712c:	f7fe fe42 	bl	8015db4 <_malloc_r>
 8017130:	b948      	cbnz	r0, 8017146 <__smakebuf_r+0x46>
 8017132:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017136:	059a      	lsls	r2, r3, #22
 8017138:	d4ee      	bmi.n	8017118 <__smakebuf_r+0x18>
 801713a:	f023 0303 	bic.w	r3, r3, #3
 801713e:	f043 0302 	orr.w	r3, r3, #2
 8017142:	81a3      	strh	r3, [r4, #12]
 8017144:	e7e2      	b.n	801710c <__smakebuf_r+0xc>
 8017146:	89a3      	ldrh	r3, [r4, #12]
 8017148:	6020      	str	r0, [r4, #0]
 801714a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801714e:	81a3      	strh	r3, [r4, #12]
 8017150:	9b01      	ldr	r3, [sp, #4]
 8017152:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8017156:	b15b      	cbz	r3, 8017170 <__smakebuf_r+0x70>
 8017158:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801715c:	4630      	mov	r0, r6
 801715e:	f000 f837 	bl	80171d0 <_isatty_r>
 8017162:	b128      	cbz	r0, 8017170 <__smakebuf_r+0x70>
 8017164:	89a3      	ldrh	r3, [r4, #12]
 8017166:	f023 0303 	bic.w	r3, r3, #3
 801716a:	f043 0301 	orr.w	r3, r3, #1
 801716e:	81a3      	strh	r3, [r4, #12]
 8017170:	89a3      	ldrh	r3, [r4, #12]
 8017172:	431d      	orrs	r5, r3
 8017174:	81a5      	strh	r5, [r4, #12]
 8017176:	e7cf      	b.n	8017118 <__smakebuf_r+0x18>

08017178 <memmove>:
 8017178:	4288      	cmp	r0, r1
 801717a:	b510      	push	{r4, lr}
 801717c:	eb01 0402 	add.w	r4, r1, r2
 8017180:	d902      	bls.n	8017188 <memmove+0x10>
 8017182:	4284      	cmp	r4, r0
 8017184:	4623      	mov	r3, r4
 8017186:	d807      	bhi.n	8017198 <memmove+0x20>
 8017188:	1e43      	subs	r3, r0, #1
 801718a:	42a1      	cmp	r1, r4
 801718c:	d008      	beq.n	80171a0 <memmove+0x28>
 801718e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017192:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017196:	e7f8      	b.n	801718a <memmove+0x12>
 8017198:	4402      	add	r2, r0
 801719a:	4601      	mov	r1, r0
 801719c:	428a      	cmp	r2, r1
 801719e:	d100      	bne.n	80171a2 <memmove+0x2a>
 80171a0:	bd10      	pop	{r4, pc}
 80171a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80171a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80171aa:	e7f7      	b.n	801719c <memmove+0x24>

080171ac <_fstat_r>:
 80171ac:	b538      	push	{r3, r4, r5, lr}
 80171ae:	4d07      	ldr	r5, [pc, #28]	@ (80171cc <_fstat_r+0x20>)
 80171b0:	2300      	movs	r3, #0
 80171b2:	4604      	mov	r4, r0
 80171b4:	4608      	mov	r0, r1
 80171b6:	4611      	mov	r1, r2
 80171b8:	602b      	str	r3, [r5, #0]
 80171ba:	f7ec fd87 	bl	8003ccc <_fstat>
 80171be:	1c43      	adds	r3, r0, #1
 80171c0:	d102      	bne.n	80171c8 <_fstat_r+0x1c>
 80171c2:	682b      	ldr	r3, [r5, #0]
 80171c4:	b103      	cbz	r3, 80171c8 <_fstat_r+0x1c>
 80171c6:	6023      	str	r3, [r4, #0]
 80171c8:	bd38      	pop	{r3, r4, r5, pc}
 80171ca:	bf00      	nop
 80171cc:	240054a4 	.word	0x240054a4

080171d0 <_isatty_r>:
 80171d0:	b538      	push	{r3, r4, r5, lr}
 80171d2:	4d06      	ldr	r5, [pc, #24]	@ (80171ec <_isatty_r+0x1c>)
 80171d4:	2300      	movs	r3, #0
 80171d6:	4604      	mov	r4, r0
 80171d8:	4608      	mov	r0, r1
 80171da:	602b      	str	r3, [r5, #0]
 80171dc:	f7ec fce4 	bl	8003ba8 <_isatty>
 80171e0:	1c43      	adds	r3, r0, #1
 80171e2:	d102      	bne.n	80171ea <_isatty_r+0x1a>
 80171e4:	682b      	ldr	r3, [r5, #0]
 80171e6:	b103      	cbz	r3, 80171ea <_isatty_r+0x1a>
 80171e8:	6023      	str	r3, [r4, #0]
 80171ea:	bd38      	pop	{r3, r4, r5, pc}
 80171ec:	240054a4 	.word	0x240054a4

080171f0 <_realloc_r>:
 80171f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80171f4:	4607      	mov	r7, r0
 80171f6:	4614      	mov	r4, r2
 80171f8:	460d      	mov	r5, r1
 80171fa:	b921      	cbnz	r1, 8017206 <_realloc_r+0x16>
 80171fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017200:	4611      	mov	r1, r2
 8017202:	f7fe bdd7 	b.w	8015db4 <_malloc_r>
 8017206:	b92a      	cbnz	r2, 8017214 <_realloc_r+0x24>
 8017208:	f7ff fa38 	bl	801667c <_free_r>
 801720c:	4625      	mov	r5, r4
 801720e:	4628      	mov	r0, r5
 8017210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017214:	f000 f81a 	bl	801724c <_malloc_usable_size_r>
 8017218:	4284      	cmp	r4, r0
 801721a:	4606      	mov	r6, r0
 801721c:	d802      	bhi.n	8017224 <_realloc_r+0x34>
 801721e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8017222:	d8f4      	bhi.n	801720e <_realloc_r+0x1e>
 8017224:	4621      	mov	r1, r4
 8017226:	4638      	mov	r0, r7
 8017228:	f7fe fdc4 	bl	8015db4 <_malloc_r>
 801722c:	4680      	mov	r8, r0
 801722e:	b908      	cbnz	r0, 8017234 <_realloc_r+0x44>
 8017230:	4645      	mov	r5, r8
 8017232:	e7ec      	b.n	801720e <_realloc_r+0x1e>
 8017234:	42b4      	cmp	r4, r6
 8017236:	4622      	mov	r2, r4
 8017238:	4629      	mov	r1, r5
 801723a:	bf28      	it	cs
 801723c:	4632      	movcs	r2, r6
 801723e:	f7ff fa0e 	bl	801665e <memcpy>
 8017242:	4629      	mov	r1, r5
 8017244:	4638      	mov	r0, r7
 8017246:	f7ff fa19 	bl	801667c <_free_r>
 801724a:	e7f1      	b.n	8017230 <_realloc_r+0x40>

0801724c <_malloc_usable_size_r>:
 801724c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017250:	1f18      	subs	r0, r3, #4
 8017252:	2b00      	cmp	r3, #0
 8017254:	bfbc      	itt	lt
 8017256:	580b      	ldrlt	r3, [r1, r0]
 8017258:	18c0      	addlt	r0, r0, r3
 801725a:	4770      	bx	lr

0801725c <_init>:
 801725c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801725e:	bf00      	nop
 8017260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017262:	bc08      	pop	{r3}
 8017264:	469e      	mov	lr, r3
 8017266:	4770      	bx	lr

08017268 <_fini>:
 8017268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801726a:	bf00      	nop
 801726c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801726e:	bc08      	pop	{r3}
 8017270:	469e      	mov	lr, r3
 8017272:	4770      	bx	lr
