
huiyang_motor_testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017704  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000438  080179a4  080179a4  000189a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08017ddc  08017ddc  00018ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08017de4  08017de4  00018de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000008  08017dec  08017dec  00018dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000070  24000000  08017df4  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005530  24000070  08017e64  00019070  2**2
                  ALLOC
  8 ._user_heap_stack 00006000  240055a0  08017e64  000195a0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00019070  2**0
                  CONTENTS, READONLY
 10 .debug_info   00038d24  00000000  00000000  0001909e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006c45  00000000  00000000  00051dc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000023a8  00000000  00000000  00058a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001b9d  00000000  00000000  0005adb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000dd02  00000000  00000000  0005c94d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00030d64  00000000  00000000  0006a64f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017edb7  00000000  00000000  0009b3b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0021a16a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009fdc  00000000  00000000  0021a1b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000056  00000000  00000000  0022418c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000070 	.word	0x24000070
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801798c 	.word	0x0801798c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000074 	.word	0x24000074
 80002dc:	0801798c 	.word	0x0801798c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <_ZL10MPU_Configv>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void MPU_Config(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80006c2:	463b      	mov	r3, r7
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80006ce:	f003 fc47 	bl	8003f60 <HAL_MPU_Disable>

  /* Configure the MPU attributes for the QSPI 256MB without instruction access */
  MPU_InitStruct.Enable           = MPU_REGION_ENABLE;
 80006d2:	2301      	movs	r3, #1
 80006d4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number           = MPU_REGION_NUMBER0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress      = QSPI_BASE;
 80006da:	f04f 4310 	mov.w	r3, #2415919104	@ 0x90000000
 80006de:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size             = MPU_REGION_SIZE_256MB;
 80006e0:	231b      	movs	r3, #27
 80006e2:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80006e4:	2300      	movs	r3, #0
 80006e6:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable     = MPU_ACCESS_NOT_BUFFERABLE;
 80006e8:	2300      	movs	r3, #0
 80006ea:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable      = MPU_ACCESS_NOT_CACHEABLE;
 80006ec:	2300      	movs	r3, #0
 80006ee:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable      = MPU_ACCESS_NOT_SHAREABLE;
 80006f0:	2300      	movs	r3, #0
 80006f2:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.DisableExec      = MPU_INSTRUCTION_ACCESS_DISABLE;
 80006f4:	2301      	movs	r3, #1
 80006f6:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.TypeExtField     = MPU_TEX_LEVEL1;
 80006f8:	2301      	movs	r3, #1
 80006fa:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 80006fc:	2300      	movs	r3, #0
 80006fe:	727b      	strb	r3, [r7, #9]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000700:	463b      	mov	r3, r7
 8000702:	4618      	mov	r0, r3
 8000704:	f003 fc64 	bl	8003fd0 <HAL_MPU_ConfigRegion>

  /* Configure the MPU attributes for the QSPI 8MB (QSPI Flash Size) to Cacheable WT */
  MPU_InitStruct.Enable           = MPU_REGION_ENABLE;
 8000708:	2301      	movs	r3, #1
 800070a:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number           = MPU_REGION_NUMBER1;
 800070c:	2301      	movs	r3, #1
 800070e:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress      = QSPI_BASE;
 8000710:	f04f 4310 	mov.w	r3, #2415919104	@ 0x90000000
 8000714:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size             = MPU_REGION_SIZE_8MB;
 8000716:	2316      	movs	r3, #22
 8000718:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RO;
 800071a:	2305      	movs	r3, #5
 800071c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable     = MPU_ACCESS_BUFFERABLE;
 800071e:	2301      	movs	r3, #1
 8000720:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable      = MPU_ACCESS_CACHEABLE;
 8000722:	2301      	movs	r3, #1
 8000724:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable      = MPU_ACCESS_NOT_SHAREABLE;
 8000726:	2300      	movs	r3, #0
 8000728:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.DisableExec      = MPU_INSTRUCTION_ACCESS_ENABLE;
 800072a:	2300      	movs	r3, #0
 800072c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.TypeExtField     = MPU_TEX_LEVEL1;
 800072e:	2301      	movs	r3, #1
 8000730:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 8000732:	2300      	movs	r3, #0
 8000734:	727b      	strb	r3, [r7, #9]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000736:	463b      	mov	r3, r7
 8000738:	4618      	mov	r0, r3
 800073a:	f003 fc49 	bl	8003fd0 <HAL_MPU_ConfigRegion>

  /* Setup AXI SRAM in Cacheable WB */
  MPU_InitStruct.Enable           = MPU_REGION_ENABLE;
 800073e:	2301      	movs	r3, #1
 8000740:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress      = D1_AXISRAM_BASE;
 8000742:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 8000746:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size             = MPU_REGION_SIZE_512KB;
 8000748:	2312      	movs	r3, #18
 800074a:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800074c:	2303      	movs	r3, #3
 800074e:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable     = MPU_ACCESS_BUFFERABLE;
 8000750:	2301      	movs	r3, #1
 8000752:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable      = MPU_ACCESS_CACHEABLE;
 8000754:	2301      	movs	r3, #1
 8000756:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable      = MPU_ACCESS_SHAREABLE;
 8000758:	2301      	movs	r3, #1
 800075a:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number           = MPU_REGION_NUMBER2;
 800075c:	2302      	movs	r3, #2
 800075e:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField     = MPU_TEX_LEVEL1;
 8000760:	2301      	movs	r3, #1
 8000762:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 8000764:	2300      	movs	r3, #0
 8000766:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec      = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000768:	2300      	movs	r3, #0
 800076a:	733b      	strb	r3, [r7, #12]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800076c:	463b      	mov	r3, r7
 800076e:	4618      	mov	r0, r3
 8000770:	f003 fc2e 	bl	8003fd0 <HAL_MPU_ConfigRegion>

  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000774:	2004      	movs	r0, #4
 8000776:	f003 fc0b 	bl	8003f90 <HAL_MPU_Enable>
}
 800077a:	bf00      	nop
 800077c:	3710      	adds	r7, #16
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
	...

08000784 <_ZL16CPU_CACHE_Enablev>:

static void CPU_CACHE_Enable(void)
{
 8000784:	b480      	push	{r7}
 8000786:	b085      	sub	sp, #20
 8000788:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800078a:	4b3e      	ldr	r3, [pc, #248]	@ (8000884 <_ZL16CPU_CACHE_Enablev+0x100>)
 800078c:	695b      	ldr	r3, [r3, #20]
 800078e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000792:	2b00      	cmp	r3, #0
 8000794:	bf14      	ite	ne
 8000796:	2301      	movne	r3, #1
 8000798:	2300      	moveq	r3, #0
 800079a:	b2db      	uxtb	r3, r3
 800079c:	2b00      	cmp	r3, #0
 800079e:	d11b      	bne.n	80007d8 <_ZL16CPU_CACHE_Enablev+0x54>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80007a0:	f3bf 8f4f 	dsb	sy
}
 80007a4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007a6:	f3bf 8f6f 	isb	sy
}
 80007aa:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80007ac:	4b35      	ldr	r3, [pc, #212]	@ (8000884 <_ZL16CPU_CACHE_Enablev+0x100>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80007b4:	f3bf 8f4f 	dsb	sy
}
 80007b8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007ba:	f3bf 8f6f 	isb	sy
}
 80007be:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80007c0:	4b30      	ldr	r3, [pc, #192]	@ (8000884 <_ZL16CPU_CACHE_Enablev+0x100>)
 80007c2:	695b      	ldr	r3, [r3, #20]
 80007c4:	4a2f      	ldr	r2, [pc, #188]	@ (8000884 <_ZL16CPU_CACHE_Enablev+0x100>)
 80007c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007ca:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80007cc:	f3bf 8f4f 	dsb	sy
}
 80007d0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007d2:	f3bf 8f6f 	isb	sy
}
 80007d6:	e000      	b.n	80007da <_ZL16CPU_CACHE_Enablev+0x56>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80007d8:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80007da:	4b2a      	ldr	r3, [pc, #168]	@ (8000884 <_ZL16CPU_CACHE_Enablev+0x100>)
 80007dc:	695b      	ldr	r3, [r3, #20]
 80007de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	bf14      	ite	ne
 80007e6:	2301      	movne	r3, #1
 80007e8:	2300      	moveq	r3, #0
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d142      	bne.n	8000876 <_ZL16CPU_CACHE_Enablev+0xf2>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80007f0:	4b24      	ldr	r3, [pc, #144]	@ (8000884 <_ZL16CPU_CACHE_Enablev+0x100>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80007f8:	f3bf 8f4f 	dsb	sy
}
 80007fc:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80007fe:	4b21      	ldr	r3, [pc, #132]	@ (8000884 <_ZL16CPU_CACHE_Enablev+0x100>)
 8000800:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000804:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	0b5b      	lsrs	r3, r3, #13
 800080a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800080e:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	08db      	lsrs	r3, r3, #3
 8000814:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000818:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800081a:	68bb      	ldr	r3, [r7, #8]
 800081c:	015a      	lsls	r2, r3, #5
 800081e:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000822:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000824:	687a      	ldr	r2, [r7, #4]
 8000826:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000828:	4916      	ldr	r1, [pc, #88]	@ (8000884 <_ZL16CPU_CACHE_Enablev+0x100>)
 800082a:	4313      	orrs	r3, r2
 800082c:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	1e5a      	subs	r2, r3, #1
 8000834:	607a      	str	r2, [r7, #4]
 8000836:	2b00      	cmp	r3, #0
 8000838:	bf14      	ite	ne
 800083a:	2301      	movne	r3, #1
 800083c:	2300      	moveq	r3, #0
 800083e:	b2db      	uxtb	r3, r3
 8000840:	2b00      	cmp	r3, #0
 8000842:	d1ea      	bne.n	800081a <_ZL16CPU_CACHE_Enablev+0x96>
    } while(sets-- != 0U);
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	1e5a      	subs	r2, r3, #1
 8000848:	60ba      	str	r2, [r7, #8]
 800084a:	2b00      	cmp	r3, #0
 800084c:	bf14      	ite	ne
 800084e:	2301      	movne	r3, #1
 8000850:	2300      	moveq	r3, #0
 8000852:	b2db      	uxtb	r3, r3
 8000854:	2b00      	cmp	r3, #0
 8000856:	d1db      	bne.n	8000810 <_ZL16CPU_CACHE_Enablev+0x8c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000858:	f3bf 8f4f 	dsb	sy
}
 800085c:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800085e:	4b09      	ldr	r3, [pc, #36]	@ (8000884 <_ZL16CPU_CACHE_Enablev+0x100>)
 8000860:	695b      	ldr	r3, [r3, #20]
 8000862:	4a08      	ldr	r2, [pc, #32]	@ (8000884 <_ZL16CPU_CACHE_Enablev+0x100>)
 8000864:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000868:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800086a:	f3bf 8f4f 	dsb	sy
}
 800086e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000870:	f3bf 8f6f 	isb	sy
}
 8000874:	e000      	b.n	8000878 <_ZL16CPU_CACHE_Enablev+0xf4>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000876:	bf00      	nop
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 8000878:	bf00      	nop
 800087a:	3714      	adds	r7, #20
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr
 8000884:	e000ed00 	.word	0xe000ed00

08000888 <_Z9LED_Blinkm>:

void LED_Blink(uint32_t delay)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(PE3_GPIO_Port,PE3_Pin,GPIO_PIN_SET);
 8000890:	2201      	movs	r2, #1
 8000892:	2108      	movs	r1, #8
 8000894:	480a      	ldr	r0, [pc, #40]	@ (80008c0 <_Z9LED_Blinkm+0x38>)
 8000896:	f004 faf3 	bl	8004e80 <HAL_GPIO_WritePin>
	HAL_Delay(delay - 1);
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	3b01      	subs	r3, #1
 800089e:	4618      	mov	r0, r3
 80008a0:	f003 fa4e 	bl	8003d40 <HAL_Delay>
	HAL_GPIO_WritePin(PE3_GPIO_Port,PE3_Pin,GPIO_PIN_RESET);
 80008a4:	2200      	movs	r2, #0
 80008a6:	2108      	movs	r1, #8
 80008a8:	4805      	ldr	r0, [pc, #20]	@ (80008c0 <_Z9LED_Blinkm+0x38>)
 80008aa:	f004 fae9 	bl	8004e80 <HAL_GPIO_WritePin>
	HAL_Delay(500-1);
 80008ae:	f240 10f3 	movw	r0, #499	@ 0x1f3
 80008b2:	f003 fa45 	bl	8003d40 <HAL_Delay>
}
 80008b6:	bf00      	nop
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	58021000 	.word	0x58021000

080008c4 <_Z9init_filev>:
    "hello word\r\n";
uint16_t file_memory=0;
uint32_t lastWriteTime = 0;     /* 上次写入时间 */
char timeStr[256];               /* 时间字符串缓冲区 */

void init_file(){
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  // mount SD card
  f_res = f_mount(&fs, "0:", 1);
 80008c8:	2201      	movs	r2, #1
 80008ca:	491e      	ldr	r1, [pc, #120]	@ (8000944 <_Z9init_filev+0x80>)
 80008cc:	481e      	ldr	r0, [pc, #120]	@ (8000948 <_Z9init_filev+0x84>)
 80008ce:	f010 fa13 	bl	8010cf8 <f_mount>
 80008d2:	4603      	mov	r3, r0
 80008d4:	461a      	mov	r2, r3
 80008d6:	4b1d      	ldr	r3, [pc, #116]	@ (800094c <_Z9init_filev+0x88>)
 80008d8:	701a      	strb	r2, [r3, #0]
	if(f_res != FR_OK){
 80008da:	4b1c      	ldr	r3, [pc, #112]	@ (800094c <_Z9init_filev+0x88>)
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d006      	beq.n	80008f0 <_Z9init_filev+0x2c>
    printf("f_mount error: %d\r\n", f_res);
 80008e2:	4b1a      	ldr	r3, [pc, #104]	@ (800094c <_Z9init_filev+0x88>)
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	4619      	mov	r1, r3
 80008e8:	4819      	ldr	r0, [pc, #100]	@ (8000950 <_Z9init_filev+0x8c>)
 80008ea:	f015 ff49 	bl	8016780 <iprintf>
    return;
 80008ee:	e027      	b.n	8000940 <_Z9init_filev+0x7c>
  }
	printf("sd mount ok\r\n");
 80008f0:	4818      	ldr	r0, [pc, #96]	@ (8000954 <_Z9init_filev+0x90>)
 80008f2:	f015 ffad 	bl	8016850 <puts>

  // open or create file
	f_res = f_open(&file, "testing.csv", FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
 80008f6:	2213      	movs	r2, #19
 80008f8:	4917      	ldr	r1, [pc, #92]	@ (8000958 <_Z9init_filev+0x94>)
 80008fa:	4818      	ldr	r0, [pc, #96]	@ (800095c <_Z9init_filev+0x98>)
 80008fc:	f010 fa60 	bl	8010dc0 <f_open>
 8000900:	4603      	mov	r3, r0
 8000902:	461a      	mov	r2, r3
 8000904:	4b11      	ldr	r3, [pc, #68]	@ (800094c <_Z9init_filev+0x88>)
 8000906:	701a      	strb	r2, [r3, #0]
	if(f_res != FR_OK){
 8000908:	4b10      	ldr	r3, [pc, #64]	@ (800094c <_Z9init_filev+0x88>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d006      	beq.n	800091e <_Z9init_filev+0x5a>
    printf("f_open error: %d\r\n", f_res);
 8000910:	4b0e      	ldr	r3, [pc, #56]	@ (800094c <_Z9init_filev+0x88>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	4619      	mov	r1, r3
 8000916:	4812      	ldr	r0, [pc, #72]	@ (8000960 <_Z9init_filev+0x9c>)
 8000918:	f015 ff32 	bl	8016780 <iprintf>
    return;
 800091c:	e010      	b.n	8000940 <_Z9init_filev+0x7c>
  }
  printf("testing.csv open ok\r\n");
 800091e:	4811      	ldr	r0, [pc, #68]	@ (8000964 <_Z9init_filev+0xa0>)
 8000920:	f015 ff96 	bl	8016850 <puts>
  f_lseek(&file, f_size(&file));
 8000924:	4b0d      	ldr	r3, [pc, #52]	@ (800095c <_Z9init_filev+0x98>)
 8000926:	68db      	ldr	r3, [r3, #12]
 8000928:	4619      	mov	r1, r3
 800092a:	480c      	ldr	r0, [pc, #48]	@ (800095c <_Z9init_filev+0x98>)
 800092c:	f010 fe36 	bl	801159c <f_lseek>
  if(f_size(&file) == 0) {
 8000930:	4b0a      	ldr	r3, [pc, #40]	@ (800095c <_Z9init_filev+0x98>)
 8000932:	68db      	ldr	r3, [r3, #12]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d103      	bne.n	8000940 <_Z9init_filev+0x7c>
    f_printf(&file, "Time(hh:mm:ss:msms)\r\n");
 8000938:	490b      	ldr	r1, [pc, #44]	@ (8000968 <_Z9init_filev+0xa4>)
 800093a:	4808      	ldr	r0, [pc, #32]	@ (800095c <_Z9init_filev+0x98>)
 800093c:	f011 f8f8 	bl	8011b30 <f_printf>
  }
}
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	080179b0 	.word	0x080179b0
 8000948:	24000280 	.word	0x24000280
 800094c:	240006e4 	.word	0x240006e4
 8000950:	080179b4 	.word	0x080179b4
 8000954:	080179c8 	.word	0x080179c8
 8000958:	080179d8 	.word	0x080179d8
 800095c:	240004b4 	.word	0x240004b4
 8000960:	080179e4 	.word	0x080179e4
 8000964:	080179f8 	.word	0x080179f8
 8000968:	08017a10 	.word	0x08017a10

0800096c <_ZNK21ModbusAbsoluteEncoder13isInitializedEv>:
    explicit ModbusAbsoluteEncoder(TIM_HandleTypeDef *htim = nullptr, uint8_t unit_id = 1);
    virtual ~ModbusAbsoluteEncoder() = default;
    // Initialization
    void init();

    bool isInitialized() const{return encoder_initialized;};
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	f893 31b8 	ldrb.w	r3, [r3, #440]	@ 0x1b8
 800097a:	4618      	mov	r0, r3
 800097c:	370c      	adds	r7, #12
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
	...

08000988 <_Z19angleUpdateCallbackm>:

Encoder485 encoder485(&htim3, 1, &huart2);
EventGroupHandle_t encoderEventGroup = NULL; // 事件组用于编码器任务同步
#define ENCODER_TICK_EVENT_BIT (1 << 0)
uint32_t oid_encoder = 0;
void angleUpdateCallback(uint32_t position){
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  oid_encoder = position;
 8000990:	4a04      	ldr	r2, [pc, #16]	@ (80009a4 <_Z19angleUpdateCallbackm+0x1c>)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	6013      	str	r3, [r2, #0]
}
 8000996:	bf00      	nop
 8000998:	370c      	adds	r7, #12
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	240009b0 	.word	0x240009b0

080009a8 <_Z16StartDefaultTaskPv>:

#endif

void StartDefaultTask(void *argument)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08e      	sub	sp, #56	@ 0x38
 80009ac:	af04      	add	r7, sp, #16
 80009ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */

#ifdef USE_SD_LOG
  MX_FATFS_Init();
 80009b0:	f00e fa0c 	bl	800edcc <MX_FATFS_Init>
  init_file();
 80009b4:	f7ff ff86 	bl	80008c4 <_Z9init_filev>
#endif

#ifdef USE_MOBUSRTU_ENCODER
  encoder485.setAngleUpdateCallback(angleUpdateCallback);
 80009b8:	495e      	ldr	r1, [pc, #376]	@ (8000b34 <_Z16StartDefaultTaskPv+0x18c>)
 80009ba:	485f      	ldr	r0, [pc, #380]	@ (8000b38 <_Z16StartDefaultTaskPv+0x190>)
 80009bc:	f002 ff3a 	bl	8003834 <_ZN21ModbusAbsoluteEncoder22setAngleUpdateCallbackEPFvmE>
  // 初始化编码器
  while(!encoder485.isInitialized()){
 80009c0:	e012      	b.n	80009e8 <_Z16StartDefaultTaskPv+0x40>
    encoder485.init();
 80009c2:	485d      	ldr	r0, [pc, #372]	@ (8000b38 <_Z16StartDefaultTaskPv+0x190>)
 80009c4:	f001 f822 	bl	8001a0c <_ZN10Encoder4854initEv>
    if(!encoder485.isInitialized()){
 80009c8:	485b      	ldr	r0, [pc, #364]	@ (8000b38 <_Z16StartDefaultTaskPv+0x190>)
 80009ca:	f7ff ffcf 	bl	800096c <_ZNK21ModbusAbsoluteEncoder13isInitializedEv>
 80009ce:	4603      	mov	r3, r0
 80009d0:	f083 0301 	eor.w	r3, r3, #1
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d006      	beq.n	80009e8 <_Z16StartDefaultTaskPv+0x40>
      printf("Encoder initialization failed, retrying in 10s...");
 80009da:	4858      	ldr	r0, [pc, #352]	@ (8000b3c <_Z16StartDefaultTaskPv+0x194>)
 80009dc:	f015 fed0 	bl	8016780 <iprintf>
      osDelay(10000);
 80009e0:	f242 7010 	movw	r0, #10000	@ 0x2710
 80009e4:	f011 fcc6 	bl	8012374 <osDelay>
  while(!encoder485.isInitialized()){
 80009e8:	4853      	ldr	r0, [pc, #332]	@ (8000b38 <_Z16StartDefaultTaskPv+0x190>)
 80009ea:	f7ff ffbf 	bl	800096c <_ZNK21ModbusAbsoluteEncoder13isInitializedEv>
 80009ee:	4603      	mov	r3, r0
 80009f0:	f083 0301 	eor.w	r3, r3, #1
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d1e3      	bne.n	80009c2 <_Z16StartDefaultTaskPv+0x1a>
    }
  }
  // 创建事件组（若尚未创建）
  if(encoderEventGroup == NULL){
 80009fa:	4b51      	ldr	r3, [pc, #324]	@ (8000b40 <_Z16StartDefaultTaskPv+0x198>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d104      	bne.n	8000a0c <_Z16StartDefaultTaskPv+0x64>
      encoderEventGroup = xEventGroupCreate();
 8000a02:	f011 ff7b 	bl	80128fc <xEventGroupCreate>
 8000a06:	4603      	mov	r3, r0
 8000a08:	4a4d      	ldr	r2, [pc, #308]	@ (8000b40 <_Z16StartDefaultTaskPv+0x198>)
 8000a0a:	6013      	str	r3, [r2, #0]
  }
  encoder485.startAsyncReading(10);
 8000a0c:	210a      	movs	r1, #10
 8000a0e:	484a      	ldr	r0, [pc, #296]	@ (8000b38 <_Z16StartDefaultTaskPv+0x190>)
 8000a10:	f002 fda6 	bl	8003560 <_ZN21ModbusAbsoluteEncoder17startAsyncReadingEm>
  printf("Encoder task ready, waiting for TIM3 notifications...\r\n");
 8000a14:	484b      	ldr	r0, [pc, #300]	@ (8000b44 <_Z16StartDefaultTaskPv+0x19c>)
 8000a16:	f015 ff1b 	bl	8016850 <puts>
#endif

  /* Infinite loop */
  for(;;)
  {
	  osDelay(1000);
 8000a1a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a1e:	f011 fca9 	bl	8012374 <osDelay>
    uint32_t currentTime = osKernelGetTickCount();
 8000a22:	f011 fbf5 	bl	8012210 <osKernelGetTickCount>
 8000a26:	6278      	str	r0, [r7, #36]	@ 0x24

#ifdef USE_HEARTBEAT_LED
   static uint32_t led_flash_time = 0;
   if(currentTime - led_flash_time >= 1000)
 8000a28:	4b47      	ldr	r3, [pc, #284]	@ (8000b48 <_Z16StartDefaultTaskPv+0x1a0>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a2e:	1ad3      	subs	r3, r2, r3
 8000a30:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000a34:	d306      	bcc.n	8000a44 <_Z16StartDefaultTaskPv+0x9c>
   {
	  HAL_GPIO_TogglePin(PE3_GPIO_Port,PE3_Pin);
 8000a36:	2108      	movs	r1, #8
 8000a38:	4844      	ldr	r0, [pc, #272]	@ (8000b4c <_Z16StartDefaultTaskPv+0x1a4>)
 8000a3a:	f004 fa3a 	bl	8004eb2 <HAL_GPIO_TogglePin>
      led_flash_time = currentTime;
 8000a3e:	4a42      	ldr	r2, [pc, #264]	@ (8000b48 <_Z16StartDefaultTaskPv+0x1a0>)
 8000a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a42:	6013      	str	r3, [r2, #0]
   }
#endif

#ifdef USE_MOBUSRTU_ENCODER
    xEventGroupWaitBits(encoderEventGroup, ENCODER_TICK_EVENT_BIT, pdTRUE, pdFALSE, portMAX_DELAY);
 8000a44:	4b3e      	ldr	r3, [pc, #248]	@ (8000b40 <_Z16StartDefaultTaskPv+0x198>)
 8000a46:	6818      	ldr	r0, [r3, #0]
 8000a48:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000a4c:	9300      	str	r3, [sp, #0]
 8000a4e:	2300      	movs	r3, #0
 8000a50:	2201      	movs	r2, #1
 8000a52:	2101      	movs	r1, #1
 8000a54:	f011 ff6c 	bl	8012930 <xEventGroupWaitBits>
    encoder485.asyncUpdateCallback();
 8000a58:	4837      	ldr	r0, [pc, #220]	@ (8000b38 <_Z16StartDefaultTaskPv+0x190>)
 8000a5a:	f002 fe69 	bl	8003730 <_ZN21ModbusAbsoluteEncoder19asyncUpdateCallbackEv>
    // printf("oid_encoder: %lu\n", oid_encoder);
#endif
    
#ifdef USE_SD_LOG
   static uint32_t log_write_time = 0;
   if(currentTime - log_write_time >= 6000)
 8000a5e:	4b3c      	ldr	r3, [pc, #240]	@ (8000b50 <_Z16StartDefaultTaskPv+0x1a8>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a64:	1ad3      	subs	r3, r2, r3
 8000a66:	f241 726f 	movw	r2, #5999	@ 0x176f
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d9d5      	bls.n	8000a1a <_Z16StartDefaultTaskPv+0x72>
   {
     uint32_t totalMs = currentTime;
 8000a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a70:	623b      	str	r3, [r7, #32]
     uint32_t ms = totalMs % 1000;
 8000a72:	6a3b      	ldr	r3, [r7, #32]
 8000a74:	4a37      	ldr	r2, [pc, #220]	@ (8000b54 <_Z16StartDefaultTaskPv+0x1ac>)
 8000a76:	fba2 1203 	umull	r1, r2, r2, r3
 8000a7a:	0992      	lsrs	r2, r2, #6
 8000a7c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000a80:	fb01 f202 	mul.w	r2, r1, r2
 8000a84:	1a9b      	subs	r3, r3, r2
 8000a86:	61fb      	str	r3, [r7, #28]
     uint32_t totalSec = totalMs / 1000;
 8000a88:	6a3b      	ldr	r3, [r7, #32]
 8000a8a:	4a32      	ldr	r2, [pc, #200]	@ (8000b54 <_Z16StartDefaultTaskPv+0x1ac>)
 8000a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8000a90:	099b      	lsrs	r3, r3, #6
 8000a92:	61bb      	str	r3, [r7, #24]
     uint32_t sec = totalSec % 60;
 8000a94:	69ba      	ldr	r2, [r7, #24]
 8000a96:	4b30      	ldr	r3, [pc, #192]	@ (8000b58 <_Z16StartDefaultTaskPv+0x1b0>)
 8000a98:	fba3 1302 	umull	r1, r3, r3, r2
 8000a9c:	0959      	lsrs	r1, r3, #5
 8000a9e:	460b      	mov	r3, r1
 8000aa0:	011b      	lsls	r3, r3, #4
 8000aa2:	1a5b      	subs	r3, r3, r1
 8000aa4:	009b      	lsls	r3, r3, #2
 8000aa6:	1ad3      	subs	r3, r2, r3
 8000aa8:	617b      	str	r3, [r7, #20]
     uint32_t totalMin = totalSec / 60;
 8000aaa:	69bb      	ldr	r3, [r7, #24]
 8000aac:	4a2a      	ldr	r2, [pc, #168]	@ (8000b58 <_Z16StartDefaultTaskPv+0x1b0>)
 8000aae:	fba2 2303 	umull	r2, r3, r2, r3
 8000ab2:	095b      	lsrs	r3, r3, #5
 8000ab4:	613b      	str	r3, [r7, #16]
     uint32_t min = totalMin % 60;
 8000ab6:	693a      	ldr	r2, [r7, #16]
 8000ab8:	4b27      	ldr	r3, [pc, #156]	@ (8000b58 <_Z16StartDefaultTaskPv+0x1b0>)
 8000aba:	fba3 1302 	umull	r1, r3, r3, r2
 8000abe:	0959      	lsrs	r1, r3, #5
 8000ac0:	460b      	mov	r3, r1
 8000ac2:	011b      	lsls	r3, r3, #4
 8000ac4:	1a5b      	subs	r3, r3, r1
 8000ac6:	009b      	lsls	r3, r3, #2
 8000ac8:	1ad3      	subs	r3, r2, r3
 8000aca:	60fb      	str	r3, [r7, #12]
     uint32_t hour = totalMin / 60;
 8000acc:	693b      	ldr	r3, [r7, #16]
 8000ace:	4a22      	ldr	r2, [pc, #136]	@ (8000b58 <_Z16StartDefaultTaskPv+0x1b0>)
 8000ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ad4:	095b      	lsrs	r3, r3, #5
 8000ad6:	60bb      	str	r3, [r7, #8]
      sprintf(timeStr, "%02lu:%02lu:%02lu:%03lu,%lu\r\n", hour, min, sec, ms,oid_encoder);
 8000ad8:	4b20      	ldr	r3, [pc, #128]	@ (8000b5c <_Z16StartDefaultTaskPv+0x1b4>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	9302      	str	r3, [sp, #8]
 8000ade:	69fb      	ldr	r3, [r7, #28]
 8000ae0:	9301      	str	r3, [sp, #4]
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	9300      	str	r3, [sp, #0]
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	68ba      	ldr	r2, [r7, #8]
 8000aea:	491d      	ldr	r1, [pc, #116]	@ (8000b60 <_Z16StartDefaultTaskPv+0x1b8>)
 8000aec:	481d      	ldr	r0, [pc, #116]	@ (8000b64 <_Z16StartDefaultTaskPv+0x1bc>)
 8000aee:	f015 ff6b 	bl	80169c8 <siprintf>
     if(f_write(&file, timeStr, strlen(timeStr), &fnum) == FR_OK){
 8000af2:	481c      	ldr	r0, [pc, #112]	@ (8000b64 <_Z16StartDefaultTaskPv+0x1bc>)
 8000af4:	f7ff fbf4 	bl	80002e0 <strlen>
 8000af8:	4602      	mov	r2, r0
 8000afa:	4b1b      	ldr	r3, [pc, #108]	@ (8000b68 <_Z16StartDefaultTaskPv+0x1c0>)
 8000afc:	4919      	ldr	r1, [pc, #100]	@ (8000b64 <_Z16StartDefaultTaskPv+0x1bc>)
 8000afe:	481b      	ldr	r0, [pc, #108]	@ (8000b6c <_Z16StartDefaultTaskPv+0x1c4>)
 8000b00:	f010 fb1f 	bl	8011142 <f_write>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	bf0c      	ite	eq
 8000b0a:	2301      	moveq	r3, #1
 8000b0c:	2300      	movne	r3, #0
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d007      	beq.n	8000b24 <_Z16StartDefaultTaskPv+0x17c>
       f_sync(&file);
 8000b14:	4815      	ldr	r0, [pc, #84]	@ (8000b6c <_Z16StartDefaultTaskPv+0x1c4>)
 8000b16:	f010 fcb8 	bl	801148a <f_sync>
       printf("write: %s", timeStr);
 8000b1a:	4912      	ldr	r1, [pc, #72]	@ (8000b64 <_Z16StartDefaultTaskPv+0x1bc>)
 8000b1c:	4814      	ldr	r0, [pc, #80]	@ (8000b70 <_Z16StartDefaultTaskPv+0x1c8>)
 8000b1e:	f015 fe2f 	bl	8016780 <iprintf>
 8000b22:	e002      	b.n	8000b2a <_Z16StartDefaultTaskPv+0x182>
     }
     else
     {
       printf("write failed\r\n");
 8000b24:	4813      	ldr	r0, [pc, #76]	@ (8000b74 <_Z16StartDefaultTaskPv+0x1cc>)
 8000b26:	f015 fe93 	bl	8016850 <puts>
     }
     log_write_time = currentTime;
 8000b2a:	4a09      	ldr	r2, [pc, #36]	@ (8000b50 <_Z16StartDefaultTaskPv+0x1a8>)
 8000b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b2e:	6013      	str	r3, [r2, #0]
#ifdef ENABLE_STACK_WATERMARK
   // 获取并打印任务栈最小剩余空间
   UBaseType_t stackHighWaterMark = uxTaskGetStackHighWaterMark(NULL);
   printf("Stack High Water Mark: %lu bytes\r\n", stackHighWaterMark * sizeof(StackType_t));
#endif
  }
 8000b30:	e773      	b.n	8000a1a <_Z16StartDefaultTaskPv+0x72>
 8000b32:	bf00      	nop
 8000b34:	08000989 	.word	0x08000989
 8000b38:	240007ec 	.word	0x240007ec
 8000b3c:	08017a28 	.word	0x08017a28
 8000b40:	240009ac 	.word	0x240009ac
 8000b44:	08017a5c 	.word	0x08017a5c
 8000b48:	240009b4 	.word	0x240009b4
 8000b4c:	58021000 	.word	0x58021000
 8000b50:	240009b8 	.word	0x240009b8
 8000b54:	10624dd3 	.word	0x10624dd3
 8000b58:	88888889 	.word	0x88888889
 8000b5c:	240009b0 	.word	0x240009b0
 8000b60:	08017a94 	.word	0x08017a94
 8000b64:	240006ec 	.word	0x240006ec
 8000b68:	240006e8 	.word	0x240006e8
 8000b6c:	240004b4 	.word	0x240004b4
 8000b70:	08017ab4 	.word	0x08017ab4
 8000b74:	08017ac0 	.word	0x08017ac0

08000b78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	#ifdef W25Qxx
	  SCB->VTOR = QSPI_BASE;
		#endif
	MPU_Config();
 8000b7c:	f7ff fd9e 	bl	80006bc <_ZL10MPU_Configv>
	CPU_CACHE_Enable();
 8000b80:	f7ff fe00 	bl	8000784 <_ZL16CPU_CACHE_Enablev>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b84:	f003 f880 	bl	8003c88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b88:	f000 f826 	bl	8000bd8 <_Z18SystemClock_Configv>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000b8c:	f000 f8ae 	bl	8000cec <_Z24PeriphCommonClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b90:	f000 fa28 	bl	8000fe4 <_ZL12MX_GPIO_Initv>
  MX_SDMMC1_SD_Init();
 8000b94:	f000 f8e2 	bl	8000d5c <_ZL17MX_SDMMC1_SD_Initv>
  MX_USART2_UART_Init();
 8000b98:	f000 f964 	bl	8000e64 <_ZL19MX_USART2_UART_Initv>
  MX_USART3_UART_Init();
 8000b9c:	f000 f9c2 	bl	8000f24 <_ZL19MX_USART3_UART_Initv>
  MX_TIM3_Init();
 8000ba0:	f000 f8fa 	bl	8000d98 <_ZL12MX_TIM3_Initv>
  // MX_FATFS_Init();
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart3);
 8000ba4:	4808      	ldr	r0, [pc, #32]	@ (8000bc8 <main+0x50>)
 8000ba6:	f000 fb25 	bl	80011f4 <RetargetInit>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000baa:	f011 fac5 	bl	8012138 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000bae:	4a07      	ldr	r2, [pc, #28]	@ (8000bcc <main+0x54>)
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	4807      	ldr	r0, [pc, #28]	@ (8000bd0 <main+0x58>)
 8000bb4:	f011 fb41 	bl	801223a <osThreadNew>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	4a06      	ldr	r2, [pc, #24]	@ (8000bd4 <main+0x5c>)
 8000bbc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000bbe:	f011 fb01 	bl	80121c4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bc2:	bf00      	nop
 8000bc4:	e7fd      	b.n	8000bc2 <main+0x4a>
 8000bc6:	bf00      	nop
 8000bc8:	240001e8 	.word	0x240001e8
 8000bcc:	08017ba4 	.word	0x08017ba4
 8000bd0:	080009a9 	.word	0x080009a9
 8000bd4:	2400027c 	.word	0x2400027c

08000bd8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b09c      	sub	sp, #112	@ 0x70
 8000bdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000be2:	224c      	movs	r2, #76	@ 0x4c
 8000be4:	2100      	movs	r1, #0
 8000be6:	4618      	mov	r0, r3
 8000be8:	f015 ffe8 	bl	8016bbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bec:	1d3b      	adds	r3, r7, #4
 8000bee:	2220      	movs	r2, #32
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f015 ffe2 	bl	8016bbc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000bf8:	2002      	movs	r0, #2
 8000bfa:	f004 f975 	bl	8004ee8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000bfe:	2300      	movs	r3, #0
 8000c00:	603b      	str	r3, [r7, #0]
 8000c02:	4b38      	ldr	r3, [pc, #224]	@ (8000ce4 <_Z18SystemClock_Configv+0x10c>)
 8000c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c06:	4a37      	ldr	r2, [pc, #220]	@ (8000ce4 <_Z18SystemClock_Configv+0x10c>)
 8000c08:	f023 0301 	bic.w	r3, r3, #1
 8000c0c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000c0e:	4b35      	ldr	r3, [pc, #212]	@ (8000ce4 <_Z18SystemClock_Configv+0x10c>)
 8000c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	603b      	str	r3, [r7, #0]
 8000c18:	4b33      	ldr	r3, [pc, #204]	@ (8000ce8 <_Z18SystemClock_Configv+0x110>)
 8000c1a:	699b      	ldr	r3, [r3, #24]
 8000c1c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000c20:	4a31      	ldr	r2, [pc, #196]	@ (8000ce8 <_Z18SystemClock_Configv+0x110>)
 8000c22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c26:	6193      	str	r3, [r2, #24]
 8000c28:	4b2f      	ldr	r3, [pc, #188]	@ (8000ce8 <_Z18SystemClock_Configv+0x110>)
 8000c2a:	699b      	ldr	r3, [r3, #24]
 8000c2c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c30:	603b      	str	r3, [r7, #0]
 8000c32:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c34:	bf00      	nop
 8000c36:	4b2c      	ldr	r3, [pc, #176]	@ (8000ce8 <_Z18SystemClock_Configv+0x110>)
 8000c38:	699b      	ldr	r3, [r3, #24]
 8000c3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c42:	bf14      	ite	ne
 8000c44:	2301      	movne	r3, #1
 8000c46:	2300      	moveq	r3, #0
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d1f3      	bne.n	8000c36 <_Z18SystemClock_Configv+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c52:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c56:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000c60:	2305      	movs	r3, #5
 8000c62:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000c64:	2360      	movs	r3, #96	@ 0x60
 8000c66:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 10;
 8000c6c:	230a      	movs	r3, #10
 8000c6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c70:	2302      	movs	r3, #2
 8000c72:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000c74:	2308      	movs	r3, #8
 8000c76:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c84:	4618      	mov	r0, r3
 8000c86:	f004 f969 	bl	8004f5c <HAL_RCC_OscConfig>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	bf14      	ite	ne
 8000c90:	2301      	movne	r3, #1
 8000c92:	2300      	moveq	r3, #0
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <_Z18SystemClock_Configv+0xc6>
  {
    Error_Handler();
 8000c9a:	f000 fa39 	bl	8001110 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c9e:	233f      	movs	r3, #63	@ 0x3f
 8000ca0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ca2:	2303      	movs	r3, #3
 8000ca4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000caa:	2308      	movs	r3, #8
 8000cac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cbe:	1d3b      	adds	r3, r7, #4
 8000cc0:	2102      	movs	r1, #2
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f004 fda4 	bl	8005810 <HAL_RCC_ClockConfig>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	bf14      	ite	ne
 8000cce:	2301      	movne	r3, #1
 8000cd0:	2300      	moveq	r3, #0
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <_Z18SystemClock_Configv+0x104>
  {
    Error_Handler();
 8000cd8:	f000 fa1a 	bl	8001110 <Error_Handler>
  }
}
 8000cdc:	bf00      	nop
 8000cde:	3770      	adds	r7, #112	@ 0x70
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	58000400 	.word	0x58000400
 8000ce8:	58024800 	.word	0x58024800

08000cec <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b0b0      	sub	sp, #192	@ 0xc0
 8000cf0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cf2:	463b      	mov	r3, r7
 8000cf4:	22c0      	movs	r2, #192	@ 0xc0
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f015 ff5f 	bl	8016bbc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_USART2
 8000cfe:	4a16      	ldr	r2, [pc, #88]	@ (8000d58 <_Z24PeriphCommonClock_Configv+0x6c>)
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_USART3;
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000d0c:	230c      	movs	r3, #12
 8000d0e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000d10:	2302      	movs	r3, #2
 8000d12:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000d14:	2302      	movs	r3, #2
 8000d16:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 3;
 8000d18:	2303      	movs	r3, #3
 8000d1a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000d1c:	23c0      	movs	r3, #192	@ 0xc0
 8000d1e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000d20:	2320      	movs	r3, #32
 8000d22:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000d24:	2300      	movs	r3, #0
 8000d26:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8000d28:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d2c:	653b      	str	r3, [r7, #80]	@ 0x50
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL2;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d32:	463b      	mov	r3, r7
 8000d34:	4618      	mov	r0, r3
 8000d36:	f005 f939 	bl	8005fac <HAL_RCCEx_PeriphCLKConfig>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	bf14      	ite	ne
 8000d40:	2301      	movne	r3, #1
 8000d42:	2300      	moveq	r3, #0
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <_Z24PeriphCommonClock_Configv+0x62>
  {
    Error_Handler();
 8000d4a:	f000 f9e1 	bl	8001110 <Error_Handler>
  }
}
 8000d4e:	bf00      	nop
 8000d50:	37c0      	adds	r7, #192	@ 0xc0
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	00010002 	.word	0x00010002

08000d5c <_ZL17MX_SDMMC1_SD_Initv>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000d60:	4b0b      	ldr	r3, [pc, #44]	@ (8000d90 <_ZL17MX_SDMMC1_SD_Initv+0x34>)
 8000d62:	4a0c      	ldr	r2, [pc, #48]	@ (8000d94 <_ZL17MX_SDMMC1_SD_Initv+0x38>)
 8000d64:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000d66:	4b0a      	ldr	r3, [pc, #40]	@ (8000d90 <_ZL17MX_SDMMC1_SD_Initv+0x34>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000d6c:	4b08      	ldr	r3, [pc, #32]	@ (8000d90 <_ZL17MX_SDMMC1_SD_Initv+0x34>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000d72:	4b07      	ldr	r3, [pc, #28]	@ (8000d90 <_ZL17MX_SDMMC1_SD_Initv+0x34>)
 8000d74:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d78:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000d7a:	4b05      	ldr	r3, [pc, #20]	@ (8000d90 <_ZL17MX_SDMMC1_SD_Initv+0x34>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000d80:	4b03      	ldr	r3, [pc, #12]	@ (8000d90 <_ZL17MX_SDMMC1_SD_Initv+0x34>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000d86:	bf00      	nop
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	2400008c 	.word	0x2400008c
 8000d94:	52007000 	.word	0x52007000

08000d98 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b08a      	sub	sp, #40	@ 0x28
 8000d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d9e:	f107 031c 	add.w	r3, r7, #28
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	605a      	str	r2, [r3, #4]
 8000da8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000daa:	463b      	mov	r3, r7
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]
 8000db8:	615a      	str	r2, [r3, #20]
 8000dba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000dbc:	4b27      	ldr	r3, [pc, #156]	@ (8000e5c <_ZL12MX_TIM3_Initv+0xc4>)
 8000dbe:	4a28      	ldr	r2, [pc, #160]	@ (8000e60 <_ZL12MX_TIM3_Initv+0xc8>)
 8000dc0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2399;
 8000dc2:	4b26      	ldr	r3, [pc, #152]	@ (8000e5c <_ZL12MX_TIM3_Initv+0xc4>)
 8000dc4:	f640 125f 	movw	r2, #2399	@ 0x95f
 8000dc8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dca:	4b24      	ldr	r3, [pc, #144]	@ (8000e5c <_ZL12MX_TIM3_Initv+0xc4>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000dd0:	4b22      	ldr	r3, [pc, #136]	@ (8000e5c <_ZL12MX_TIM3_Initv+0xc4>)
 8000dd2:	2263      	movs	r2, #99	@ 0x63
 8000dd4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dd6:	4b21      	ldr	r3, [pc, #132]	@ (8000e5c <_ZL12MX_TIM3_Initv+0xc4>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ddc:	4b1f      	ldr	r3, [pc, #124]	@ (8000e5c <_ZL12MX_TIM3_Initv+0xc4>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000de2:	481e      	ldr	r0, [pc, #120]	@ (8000e5c <_ZL12MX_TIM3_Initv+0xc4>)
 8000de4:	f009 fb1e 	bl	800a424 <HAL_TIM_OC_Init>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	bf14      	ite	ne
 8000dee:	2301      	movne	r3, #1
 8000df0:	2300      	moveq	r3, #0
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <_ZL12MX_TIM3_Initv+0x64>
  {
    Error_Handler();
 8000df8:	f000 f98a 	bl	8001110 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e00:	2300      	movs	r3, #0
 8000e02:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e04:	f107 031c 	add.w	r3, r7, #28
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4814      	ldr	r0, [pc, #80]	@ (8000e5c <_ZL12MX_TIM3_Initv+0xc4>)
 8000e0c:	f00a f892 	bl	800af34 <HAL_TIMEx_MasterConfigSynchronization>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	bf14      	ite	ne
 8000e16:	2301      	movne	r3, #1
 8000e18:	2300      	moveq	r3, #0
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <_ZL12MX_TIM3_Initv+0x8c>
  {
    Error_Handler();
 8000e20:	f000 f976 	bl	8001110 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000e24:	2300      	movs	r3, #0
 8000e26:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e30:	2300      	movs	r3, #0
 8000e32:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e34:	463b      	mov	r3, r7
 8000e36:	2200      	movs	r2, #0
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4808      	ldr	r0, [pc, #32]	@ (8000e5c <_ZL12MX_TIM3_Initv+0xc4>)
 8000e3c:	f009 fc68 	bl	800a710 <HAL_TIM_OC_ConfigChannel>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	bf14      	ite	ne
 8000e46:	2301      	movne	r3, #1
 8000e48:	2300      	moveq	r3, #0
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <_ZL12MX_TIM3_Initv+0xbc>
  {
    Error_Handler();
 8000e50:	f000 f95e 	bl	8001110 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e54:	bf00      	nop
 8000e56:	3728      	adds	r7, #40	@ 0x28
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	24000108 	.word	0x24000108
 8000e60:	40000400 	.word	0x40000400

08000e64 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e68:	4b2c      	ldr	r3, [pc, #176]	@ (8000f1c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000e6a:	4a2d      	ldr	r2, [pc, #180]	@ (8000f20 <_ZL19MX_USART2_UART_Initv+0xbc>)
 8000e6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000e6e:	4b2b      	ldr	r3, [pc, #172]	@ (8000f1c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000e70:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000e74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e76:	4b29      	ldr	r3, [pc, #164]	@ (8000f1c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e7c:	4b27      	ldr	r3, [pc, #156]	@ (8000f1c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e82:	4b26      	ldr	r3, [pc, #152]	@ (8000f1c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e88:	4b24      	ldr	r3, [pc, #144]	@ (8000f1c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000e8a:	220c      	movs	r2, #12
 8000e8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e8e:	4b23      	ldr	r3, [pc, #140]	@ (8000f1c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e94:	4b21      	ldr	r3, [pc, #132]	@ (8000f1c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e9a:	4b20      	ldr	r3, [pc, #128]	@ (8000f1c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ea0:	4b1e      	ldr	r3, [pc, #120]	@ (8000f1c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ea6:	4b1d      	ldr	r3, [pc, #116]	@ (8000f1c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000eac:	481b      	ldr	r0, [pc, #108]	@ (8000f1c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000eae:	f00a f8ed 	bl	800b08c <HAL_UART_Init>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	bf14      	ite	ne
 8000eb8:	2301      	movne	r3, #1
 8000eba:	2300      	moveq	r3, #0
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <_ZL19MX_USART2_UART_Initv+0x62>
  {
    Error_Handler();
 8000ec2:	f000 f925 	bl	8001110 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	4814      	ldr	r0, [pc, #80]	@ (8000f1c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000eca:	f00d f8ea 	bl	800e0a2 <HAL_UARTEx_SetTxFifoThreshold>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	bf14      	ite	ne
 8000ed4:	2301      	movne	r3, #1
 8000ed6:	2300      	moveq	r3, #0
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <_ZL19MX_USART2_UART_Initv+0x7e>
  {
    Error_Handler();
 8000ede:	f000 f917 	bl	8001110 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	480d      	ldr	r0, [pc, #52]	@ (8000f1c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000ee6:	f00d f91a 	bl	800e11e <HAL_UARTEx_SetRxFifoThreshold>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	bf14      	ite	ne
 8000ef0:	2301      	movne	r3, #1
 8000ef2:	2300      	moveq	r3, #0
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <_ZL19MX_USART2_UART_Initv+0x9a>
  {
    Error_Handler();
 8000efa:	f000 f909 	bl	8001110 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000efe:	4807      	ldr	r0, [pc, #28]	@ (8000f1c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000f00:	f00d f896 	bl	800e030 <HAL_UARTEx_DisableFifoMode>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	bf14      	ite	ne
 8000f0a:	2301      	movne	r3, #1
 8000f0c:	2300      	moveq	r3, #0
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <_ZL19MX_USART2_UART_Initv+0xb4>
  {
    Error_Handler();
 8000f14:	f000 f8fc 	bl	8001110 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f18:	bf00      	nop
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	24000154 	.word	0x24000154
 8000f20:	40004400 	.word	0x40004400

08000f24 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f28:	4b2c      	ldr	r3, [pc, #176]	@ (8000fdc <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f2a:	4a2d      	ldr	r2, [pc, #180]	@ (8000fe0 <_ZL19MX_USART3_UART_Initv+0xbc>)
 8000f2c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f2e:	4b2b      	ldr	r3, [pc, #172]	@ (8000fdc <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f30:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f34:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f36:	4b29      	ldr	r3, [pc, #164]	@ (8000fdc <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f3c:	4b27      	ldr	r3, [pc, #156]	@ (8000fdc <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f42:	4b26      	ldr	r3, [pc, #152]	@ (8000fdc <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f48:	4b24      	ldr	r3, [pc, #144]	@ (8000fdc <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f4a:	220c      	movs	r2, #12
 8000f4c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f4e:	4b23      	ldr	r3, [pc, #140]	@ (8000fdc <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f54:	4b21      	ldr	r3, [pc, #132]	@ (8000fdc <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f5a:	4b20      	ldr	r3, [pc, #128]	@ (8000fdc <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f60:	4b1e      	ldr	r3, [pc, #120]	@ (8000fdc <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f66:	4b1d      	ldr	r3, [pc, #116]	@ (8000fdc <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f6c:	481b      	ldr	r0, [pc, #108]	@ (8000fdc <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f6e:	f00a f88d 	bl	800b08c <HAL_UART_Init>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	bf14      	ite	ne
 8000f78:	2301      	movne	r3, #1
 8000f7a:	2300      	moveq	r3, #0
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <_ZL19MX_USART3_UART_Initv+0x62>
  {
    Error_Handler();
 8000f82:	f000 f8c5 	bl	8001110 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f86:	2100      	movs	r1, #0
 8000f88:	4814      	ldr	r0, [pc, #80]	@ (8000fdc <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000f8a:	f00d f88a 	bl	800e0a2 <HAL_UARTEx_SetTxFifoThreshold>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	bf14      	ite	ne
 8000f94:	2301      	movne	r3, #1
 8000f96:	2300      	moveq	r3, #0
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <_ZL19MX_USART3_UART_Initv+0x7e>
  {
    Error_Handler();
 8000f9e:	f000 f8b7 	bl	8001110 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	480d      	ldr	r0, [pc, #52]	@ (8000fdc <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000fa6:	f00d f8ba 	bl	800e11e <HAL_UARTEx_SetRxFifoThreshold>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	bf14      	ite	ne
 8000fb0:	2301      	movne	r3, #1
 8000fb2:	2300      	moveq	r3, #0
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <_ZL19MX_USART3_UART_Initv+0x9a>
  {
    Error_Handler();
 8000fba:	f000 f8a9 	bl	8001110 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000fbe:	4807      	ldr	r0, [pc, #28]	@ (8000fdc <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000fc0:	f00d f836 	bl	800e030 <HAL_UARTEx_DisableFifoMode>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	bf14      	ite	ne
 8000fca:	2301      	movne	r3, #1
 8000fcc:	2300      	moveq	r3, #0
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <_ZL19MX_USART3_UART_Initv+0xb4>
  {
    Error_Handler();
 8000fd4:	f000 f89c 	bl	8001110 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	240001e8 	.word	0x240001e8
 8000fe0:	40004800 	.word	0x40004800

08000fe4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b08a      	sub	sp, #40	@ 0x28
 8000fe8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fea:	f107 0314 	add.w	r3, r7, #20
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	605a      	str	r2, [r3, #4]
 8000ff4:	609a      	str	r2, [r3, #8]
 8000ff6:	60da      	str	r2, [r3, #12]
 8000ff8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ffa:	4b39      	ldr	r3, [pc, #228]	@ (80010e0 <_ZL12MX_GPIO_Initv+0xfc>)
 8000ffc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001000:	4a37      	ldr	r2, [pc, #220]	@ (80010e0 <_ZL12MX_GPIO_Initv+0xfc>)
 8001002:	f043 0310 	orr.w	r3, r3, #16
 8001006:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800100a:	4b35      	ldr	r3, [pc, #212]	@ (80010e0 <_ZL12MX_GPIO_Initv+0xfc>)
 800100c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001010:	f003 0310 	and.w	r3, r3, #16
 8001014:	613b      	str	r3, [r7, #16]
 8001016:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001018:	4b31      	ldr	r3, [pc, #196]	@ (80010e0 <_ZL12MX_GPIO_Initv+0xfc>)
 800101a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800101e:	4a30      	ldr	r2, [pc, #192]	@ (80010e0 <_ZL12MX_GPIO_Initv+0xfc>)
 8001020:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001024:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001028:	4b2d      	ldr	r3, [pc, #180]	@ (80010e0 <_ZL12MX_GPIO_Initv+0xfc>)
 800102a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800102e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001036:	4b2a      	ldr	r3, [pc, #168]	@ (80010e0 <_ZL12MX_GPIO_Initv+0xfc>)
 8001038:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800103c:	4a28      	ldr	r2, [pc, #160]	@ (80010e0 <_ZL12MX_GPIO_Initv+0xfc>)
 800103e:	f043 0308 	orr.w	r3, r3, #8
 8001042:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001046:	4b26      	ldr	r3, [pc, #152]	@ (80010e0 <_ZL12MX_GPIO_Initv+0xfc>)
 8001048:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800104c:	f003 0308 	and.w	r3, r3, #8
 8001050:	60bb      	str	r3, [r7, #8]
 8001052:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001054:	4b22      	ldr	r3, [pc, #136]	@ (80010e0 <_ZL12MX_GPIO_Initv+0xfc>)
 8001056:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800105a:	4a21      	ldr	r2, [pc, #132]	@ (80010e0 <_ZL12MX_GPIO_Initv+0xfc>)
 800105c:	f043 0304 	orr.w	r3, r3, #4
 8001060:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001064:	4b1e      	ldr	r3, [pc, #120]	@ (80010e0 <_ZL12MX_GPIO_Initv+0xfc>)
 8001066:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800106a:	f003 0304 	and.w	r3, r3, #4
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001072:	4b1b      	ldr	r3, [pc, #108]	@ (80010e0 <_ZL12MX_GPIO_Initv+0xfc>)
 8001074:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001078:	4a19      	ldr	r2, [pc, #100]	@ (80010e0 <_ZL12MX_GPIO_Initv+0xfc>)
 800107a:	f043 0301 	orr.w	r3, r3, #1
 800107e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001082:	4b17      	ldr	r3, [pc, #92]	@ (80010e0 <_ZL12MX_GPIO_Initv+0xfc>)
 8001084:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001088:	f003 0301 	and.w	r3, r3, #1
 800108c:	603b      	str	r3, [r7, #0]
 800108e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PE3_GPIO_Port, PE3_Pin, GPIO_PIN_RESET);
 8001090:	2200      	movs	r2, #0
 8001092:	2108      	movs	r1, #8
 8001094:	4813      	ldr	r0, [pc, #76]	@ (80010e4 <_ZL12MX_GPIO_Initv+0x100>)
 8001096:	f003 fef3 	bl	8004e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3_Pin */
  GPIO_InitStruct.Pin = PE3_Pin;
 800109a:	2308      	movs	r3, #8
 800109c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109e:	2301      	movs	r3, #1
 80010a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a6:	2300      	movs	r3, #0
 80010a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PE3_GPIO_Port, &GPIO_InitStruct);
 80010aa:	f107 0314 	add.w	r3, r7, #20
 80010ae:	4619      	mov	r1, r3
 80010b0:	480c      	ldr	r0, [pc, #48]	@ (80010e4 <_ZL12MX_GPIO_Initv+0x100>)
 80010b2:	f003 fd35 	bl	8004b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80010b6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80010ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010bc:	2302      	movs	r3, #2
 80010be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c4:	2300      	movs	r3, #0
 80010c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_UART4;
 80010c8:	2306      	movs	r3, #6
 80010ca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010cc:	f107 0314 	add.w	r3, r7, #20
 80010d0:	4619      	mov	r1, r3
 80010d2:	4805      	ldr	r0, [pc, #20]	@ (80010e8 <_ZL12MX_GPIO_Initv+0x104>)
 80010d4:	f003 fd24 	bl	8004b20 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010d8:	bf00      	nop
 80010da:	3728      	adds	r7, #40	@ 0x28
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	58024400 	.word	0x58024400
 80010e4:	58021000 	.word	0x58021000
 80010e8:	58020000 	.word	0x58020000

080010ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a04      	ldr	r2, [pc, #16]	@ (800110c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d101      	bne.n	8001102 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80010fe:	f002 fdff 	bl	8003d00 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40001000 	.word	0x40001000

08001110 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while (1)
  {
		LED_Blink(500);
 8001114:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001118:	f7ff fbb6 	bl	8000888 <_Z9LED_Blinkm>
 800111c:	e7fa      	b.n	8001114 <Error_Handler+0x4>
	...

08001120 <_Z41__static_initialization_and_destruction_0v>:
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
Encoder485 encoder485(&htim3, 1, &huart2);
 8001124:	4b03      	ldr	r3, [pc, #12]	@ (8001134 <_Z41__static_initialization_and_destruction_0v+0x14>)
 8001126:	2201      	movs	r2, #1
 8001128:	4903      	ldr	r1, [pc, #12]	@ (8001138 <_Z41__static_initialization_and_destruction_0v+0x18>)
 800112a:	4804      	ldr	r0, [pc, #16]	@ (800113c <_Z41__static_initialization_and_destruction_0v+0x1c>)
 800112c:	f000 fc52 	bl	80019d4 <_ZN10Encoder485C1EP17TIM_HandleTypeDefhP20__UART_HandleTypeDef>
}
 8001130:	bf00      	nop
 8001132:	bd80      	pop	{r7, pc}
 8001134:	24000154 	.word	0x24000154
 8001138:	24000108 	.word	0x24000108
 800113c:	240007ec 	.word	0x240007ec

08001140 <_ZN21ModbusAbsoluteEncoderD1Ev>:
    virtual ~ModbusAbsoluteEncoder() = default;
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	4a04      	ldr	r2, [pc, #16]	@ (800115c <_ZN21ModbusAbsoluteEncoderD1Ev+0x1c>)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4618      	mov	r0, r3
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	08017c90 	.word	0x08017c90

08001160 <_ZN21ModbusAbsoluteEncoderD0Ev>:
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f7ff ffe9 	bl	8001140 <_ZN21ModbusAbsoluteEncoderD1Ev>
 800116e:	f44f 71de 	mov.w	r1, #444	@ 0x1bc
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f015 f980 	bl	8016478 <_ZdlPvj>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4618      	mov	r0, r3
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
	...

08001184 <_ZN10Encoder485D1Ev>:

#include "ModbusAbsoluteEncoder.h"
#include "main.h"
#include <stdint.h>

class Encoder485 : public ModbusAbsoluteEncoder {
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	4a05      	ldr	r2, [pc, #20]	@ (80011a4 <_ZN10Encoder485D1Ev+0x20>)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff ffd3 	bl	8001140 <_ZN21ModbusAbsoluteEncoderD1Ev>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4618      	mov	r0, r3
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	08017be0 	.word	0x08017be0

080011a8 <_ZN10Encoder485D0Ev>:
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f7ff ffe7 	bl	8001184 <_ZN10Encoder485D1Ev>
 80011b6:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f015 f95c 	bl	8016478 <_ZdlPvj>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	4618      	mov	r0, r3
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
	...

080011cc <_Z41__static_initialization_and_destruction_1v>:
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
Encoder485 encoder485(&htim3, 1, &huart2);
 80011d0:	4802      	ldr	r0, [pc, #8]	@ (80011dc <_Z41__static_initialization_and_destruction_1v+0x10>)
 80011d2:	f7ff ffd7 	bl	8001184 <_ZN10Encoder485D1Ev>
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	240007ec 	.word	0x240007ec

080011e0 <_GLOBAL__sub_I_hsd1>:
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	f7ff ff9c 	bl	8001120 <_Z41__static_initialization_and_destruction_0v>
 80011e8:	bd80      	pop	{r7, pc}

080011ea <_GLOBAL__sub_D_hsd1>:
 80011ea:	b580      	push	{r7, lr}
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	f7ff ffed 	bl	80011cc <_Z41__static_initialization_and_destruction_1v>
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 80011fc:	4a07      	ldr	r2, [pc, #28]	@ (800121c <RetargetInit+0x28>)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8001202:	4b07      	ldr	r3, [pc, #28]	@ (8001220 <RetargetInit+0x2c>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	6898      	ldr	r0, [r3, #8]
 8001208:	2300      	movs	r3, #0
 800120a:	2202      	movs	r2, #2
 800120c:	2100      	movs	r1, #0
 800120e:	f015 fb27 	bl	8016860 <setvbuf>
}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	240009bc 	.word	0x240009bc
 8001220:	24000020 	.word	0x24000020

08001224 <_isatty>:

int _isatty(int fd) {
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2b00      	cmp	r3, #0
 8001230:	db04      	blt.n	800123c <_isatty+0x18>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2b02      	cmp	r3, #2
 8001236:	dc01      	bgt.n	800123c <_isatty+0x18>
    return 1;
 8001238:	2301      	movs	r3, #1
 800123a:	e005      	b.n	8001248 <_isatty+0x24>

  errno = EBADF;
 800123c:	f015 fd7a 	bl	8016d34 <__errno>
 8001240:	4603      	mov	r3, r0
 8001242:	2209      	movs	r2, #9
 8001244:	601a      	str	r2, [r3, #0]
  return 0;
 8001246:	2300      	movs	r3, #0
}
 8001248:	4618      	mov	r0, r3
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <_write>:

int _write(int fd, char* ptr, int len) {
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
 HAL_StatusTypeDef hstatus;

 if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	2b01      	cmp	r3, #1
 8001260:	d002      	beq.n	8001268 <_write+0x18>
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	2b02      	cmp	r3, #2
 8001266:	d111      	bne.n	800128c <_write+0x3c>
   hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001268:	4b0e      	ldr	r3, [pc, #56]	@ (80012a4 <_write+0x54>)
 800126a:	6818      	ldr	r0, [r3, #0]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	b29a      	uxth	r2, r3
 8001270:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001274:	68b9      	ldr	r1, [r7, #8]
 8001276:	f009 ff59 	bl	800b12c <HAL_UART_Transmit>
 800127a:	4603      	mov	r3, r0
 800127c:	75fb      	strb	r3, [r7, #23]
   if (hstatus == HAL_OK)
 800127e:	7dfb      	ldrb	r3, [r7, #23]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d101      	bne.n	8001288 <_write+0x38>
     return len;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	e008      	b.n	800129a <_write+0x4a>
   else
     return EIO;
 8001288:	2305      	movs	r3, #5
 800128a:	e006      	b.n	800129a <_write+0x4a>
 }
 errno = EBADF;
 800128c:	f015 fd52 	bl	8016d34 <__errno>
 8001290:	4603      	mov	r3, r0
 8001292:	2209      	movs	r2, #9
 8001294:	601a      	str	r2, [r3, #0]
 return -1;
 8001296:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800129a:	4618      	mov	r0, r3
 800129c:	3718      	adds	r7, #24
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	240009bc 	.word	0x240009bc

080012a8 <_close>:
//         ITM_SendChar(*ptr++);
//     }
//     return len;
// }

int _close(int fd) {
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	db04      	blt.n	80012c0 <_close+0x18>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	dc01      	bgt.n	80012c0 <_close+0x18>
    return 0;
 80012bc:	2300      	movs	r3, #0
 80012be:	e006      	b.n	80012ce <_close+0x26>

  errno = EBADF;
 80012c0:	f015 fd38 	bl	8016d34 <__errno>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2209      	movs	r2, #9
 80012c8:	601a      	str	r2, [r3, #0]
  return -1;
 80012ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b084      	sub	sp, #16
 80012da:	af00      	add	r7, sp, #0
 80012dc:	60f8      	str	r0, [r7, #12]
 80012de:	60b9      	str	r1, [r7, #8]
 80012e0:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 80012e2:	f015 fd27 	bl	8016d34 <__errno>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2209      	movs	r2, #9
 80012ea:	601a      	str	r2, [r3, #0]
  return -1;
 80012ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3710      	adds	r7, #16
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <_read>:

int _read(int fd, char* ptr, int len) {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d110      	bne.n	800132c <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 800130a:	4b0e      	ldr	r3, [pc, #56]	@ (8001344 <_read+0x4c>)
 800130c:	6818      	ldr	r0, [r3, #0]
 800130e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001312:	2201      	movs	r2, #1
 8001314:	68b9      	ldr	r1, [r7, #8]
 8001316:	f009 ff97 	bl	800b248 <HAL_UART_Receive>
 800131a:	4603      	mov	r3, r0
 800131c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800131e:	7dfb      	ldrb	r3, [r7, #23]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d101      	bne.n	8001328 <_read+0x30>
      return 1;
 8001324:	2301      	movs	r3, #1
 8001326:	e008      	b.n	800133a <_read+0x42>
    else
      return EIO;
 8001328:	2305      	movs	r3, #5
 800132a:	e006      	b.n	800133a <_read+0x42>
  }
  errno = EBADF;
 800132c:	f015 fd02 	bl	8016d34 <__errno>
 8001330:	4603      	mov	r3, r0
 8001332:	2209      	movs	r2, #9
 8001334:	601a      	str	r2, [r3, #0]
  return -1;
 8001336:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800133a:	4618      	mov	r0, r3
 800133c:	3718      	adds	r7, #24
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	240009bc 	.word	0x240009bc

08001348 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2b00      	cmp	r3, #0
 8001356:	db08      	blt.n	800136a <_fstat+0x22>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2b02      	cmp	r3, #2
 800135c:	dc05      	bgt.n	800136a <_fstat+0x22>
    st->st_mode = S_IFCHR;
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001364:	605a      	str	r2, [r3, #4]
    return 0;
 8001366:	2300      	movs	r3, #0
 8001368:	e005      	b.n	8001376 <_fstat+0x2e>
  }

  errno = EBADF;
 800136a:	f015 fce3 	bl	8016d34 <__errno>
 800136e:	4603      	mov	r3, r0
 8001370:	2209      	movs	r2, #9
 8001372:	601a      	str	r2, [r3, #0]
  return 0;
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
	...

08001380 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001386:	4b0c      	ldr	r3, [pc, #48]	@ (80013b8 <HAL_MspInit+0x38>)
 8001388:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800138c:	4a0a      	ldr	r2, [pc, #40]	@ (80013b8 <HAL_MspInit+0x38>)
 800138e:	f043 0302 	orr.w	r3, r3, #2
 8001392:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001396:	4b08      	ldr	r3, [pc, #32]	@ (80013b8 <HAL_MspInit+0x38>)
 8001398:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800139c:	f003 0302 	and.w	r3, r3, #2
 80013a0:	607b      	str	r3, [r7, #4]
 80013a2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013a4:	2200      	movs	r2, #0
 80013a6:	210f      	movs	r1, #15
 80013a8:	f06f 0001 	mvn.w	r0, #1
 80013ac:	f002 fdb0 	bl	8003f10 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013b0:	bf00      	nop
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	58024400 	.word	0x58024400

080013bc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08a      	sub	sp, #40	@ 0x28
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c4:	f107 0314 	add.w	r3, r7, #20
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	605a      	str	r2, [r3, #4]
 80013ce:	609a      	str	r2, [r3, #8]
 80013d0:	60da      	str	r2, [r3, #12]
 80013d2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a2e      	ldr	r2, [pc, #184]	@ (8001494 <HAL_SD_MspInit+0xd8>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d155      	bne.n	800148a <HAL_SD_MspInit+0xce>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80013de:	4b2e      	ldr	r3, [pc, #184]	@ (8001498 <HAL_SD_MspInit+0xdc>)
 80013e0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80013e4:	4a2c      	ldr	r2, [pc, #176]	@ (8001498 <HAL_SD_MspInit+0xdc>)
 80013e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013ea:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80013ee:	4b2a      	ldr	r3, [pc, #168]	@ (8001498 <HAL_SD_MspInit+0xdc>)
 80013f0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80013f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013f8:	613b      	str	r3, [r7, #16]
 80013fa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013fc:	4b26      	ldr	r3, [pc, #152]	@ (8001498 <HAL_SD_MspInit+0xdc>)
 80013fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001402:	4a25      	ldr	r2, [pc, #148]	@ (8001498 <HAL_SD_MspInit+0xdc>)
 8001404:	f043 0304 	orr.w	r3, r3, #4
 8001408:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800140c:	4b22      	ldr	r3, [pc, #136]	@ (8001498 <HAL_SD_MspInit+0xdc>)
 800140e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001412:	f003 0304 	and.w	r3, r3, #4
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800141a:	4b1f      	ldr	r3, [pc, #124]	@ (8001498 <HAL_SD_MspInit+0xdc>)
 800141c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001420:	4a1d      	ldr	r2, [pc, #116]	@ (8001498 <HAL_SD_MspInit+0xdc>)
 8001422:	f043 0308 	orr.w	r3, r3, #8
 8001426:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800142a:	4b1b      	ldr	r3, [pc, #108]	@ (8001498 <HAL_SD_MspInit+0xdc>)
 800142c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001430:	f003 0308 	and.w	r3, r3, #8
 8001434:	60bb      	str	r3, [r7, #8]
 8001436:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001438:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800143c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143e:	2302      	movs	r3, #2
 8001440:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001442:	2300      	movs	r3, #0
 8001444:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001446:	2303      	movs	r3, #3
 8001448:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800144a:	230c      	movs	r3, #12
 800144c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800144e:	f107 0314 	add.w	r3, r7, #20
 8001452:	4619      	mov	r1, r3
 8001454:	4811      	ldr	r0, [pc, #68]	@ (800149c <HAL_SD_MspInit+0xe0>)
 8001456:	f003 fb63 	bl	8004b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800145a:	2304      	movs	r3, #4
 800145c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145e:	2302      	movs	r3, #2
 8001460:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001466:	2303      	movs	r3, #3
 8001468:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800146a:	230c      	movs	r3, #12
 800146c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800146e:	f107 0314 	add.w	r3, r7, #20
 8001472:	4619      	mov	r1, r3
 8001474:	480a      	ldr	r0, [pc, #40]	@ (80014a0 <HAL_SD_MspInit+0xe4>)
 8001476:	f003 fb53 	bl	8004b20 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 800147a:	2200      	movs	r2, #0
 800147c:	2105      	movs	r1, #5
 800147e:	2031      	movs	r0, #49	@ 0x31
 8001480:	f002 fd46 	bl	8003f10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001484:	2031      	movs	r0, #49	@ 0x31
 8001486:	f002 fd5d 	bl	8003f44 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800148a:	bf00      	nop
 800148c:	3728      	adds	r7, #40	@ 0x28
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	52007000 	.word	0x52007000
 8001498:	58024400 	.word	0x58024400
 800149c:	58020800 	.word	0x58020800
 80014a0:	58020c00 	.word	0x58020c00

080014a4 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM3)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a0e      	ldr	r2, [pc, #56]	@ (80014ec <HAL_TIM_OC_MspInit+0x48>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d116      	bne.n	80014e4 <HAL_TIM_OC_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014b6:	4b0e      	ldr	r3, [pc, #56]	@ (80014f0 <HAL_TIM_OC_MspInit+0x4c>)
 80014b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80014bc:	4a0c      	ldr	r2, [pc, #48]	@ (80014f0 <HAL_TIM_OC_MspInit+0x4c>)
 80014be:	f043 0302 	orr.w	r3, r3, #2
 80014c2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80014c6:	4b0a      	ldr	r3, [pc, #40]	@ (80014f0 <HAL_TIM_OC_MspInit+0x4c>)
 80014c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80014cc:	f003 0302 	and.w	r3, r3, #2
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80014d4:	2200      	movs	r2, #0
 80014d6:	2105      	movs	r1, #5
 80014d8:	201d      	movs	r0, #29
 80014da:	f002 fd19 	bl	8003f10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80014de:	201d      	movs	r0, #29
 80014e0:	f002 fd30 	bl	8003f44 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80014e4:	bf00      	nop
 80014e6:	3710      	adds	r7, #16
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40000400 	.word	0x40000400
 80014f0:	58024400 	.word	0x58024400

080014f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b08c      	sub	sp, #48	@ 0x30
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fc:	f107 031c 	add.w	r3, r7, #28
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a3c      	ldr	r2, [pc, #240]	@ (8001604 <HAL_UART_MspInit+0x110>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d136      	bne.n	8001584 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001516:	4b3c      	ldr	r3, [pc, #240]	@ (8001608 <HAL_UART_MspInit+0x114>)
 8001518:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800151c:	4a3a      	ldr	r2, [pc, #232]	@ (8001608 <HAL_UART_MspInit+0x114>)
 800151e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001522:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001526:	4b38      	ldr	r3, [pc, #224]	@ (8001608 <HAL_UART_MspInit+0x114>)
 8001528:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800152c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001530:	61bb      	str	r3, [r7, #24]
 8001532:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001534:	4b34      	ldr	r3, [pc, #208]	@ (8001608 <HAL_UART_MspInit+0x114>)
 8001536:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800153a:	4a33      	ldr	r2, [pc, #204]	@ (8001608 <HAL_UART_MspInit+0x114>)
 800153c:	f043 0308 	orr.w	r3, r3, #8
 8001540:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001544:	4b30      	ldr	r3, [pc, #192]	@ (8001608 <HAL_UART_MspInit+0x114>)
 8001546:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800154a:	f003 0308 	and.w	r3, r3, #8
 800154e:	617b      	str	r3, [r7, #20]
 8001550:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001552:	2360      	movs	r3, #96	@ 0x60
 8001554:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001556:	2302      	movs	r3, #2
 8001558:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155e:	2300      	movs	r3, #0
 8001560:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001562:	2307      	movs	r3, #7
 8001564:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001566:	f107 031c 	add.w	r3, r7, #28
 800156a:	4619      	mov	r1, r3
 800156c:	4827      	ldr	r0, [pc, #156]	@ (800160c <HAL_UART_MspInit+0x118>)
 800156e:	f003 fad7 	bl	8004b20 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001572:	2200      	movs	r2, #0
 8001574:	2105      	movs	r1, #5
 8001576:	2026      	movs	r0, #38	@ 0x26
 8001578:	f002 fcca 	bl	8003f10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800157c:	2026      	movs	r0, #38	@ 0x26
 800157e:	f002 fce1 	bl	8003f44 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001582:	e03b      	b.n	80015fc <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART3)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a21      	ldr	r2, [pc, #132]	@ (8001610 <HAL_UART_MspInit+0x11c>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d136      	bne.n	80015fc <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART3_CLK_ENABLE();
 800158e:	4b1e      	ldr	r3, [pc, #120]	@ (8001608 <HAL_UART_MspInit+0x114>)
 8001590:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001594:	4a1c      	ldr	r2, [pc, #112]	@ (8001608 <HAL_UART_MspInit+0x114>)
 8001596:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800159a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800159e:	4b1a      	ldr	r3, [pc, #104]	@ (8001608 <HAL_UART_MspInit+0x114>)
 80015a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015a8:	613b      	str	r3, [r7, #16]
 80015aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015ac:	4b16      	ldr	r3, [pc, #88]	@ (8001608 <HAL_UART_MspInit+0x114>)
 80015ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015b2:	4a15      	ldr	r2, [pc, #84]	@ (8001608 <HAL_UART_MspInit+0x114>)
 80015b4:	f043 0308 	orr.w	r3, r3, #8
 80015b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015bc:	4b12      	ldr	r3, [pc, #72]	@ (8001608 <HAL_UART_MspInit+0x114>)
 80015be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015c2:	f003 0308 	and.w	r3, r3, #8
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015ca:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80015ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d0:	2302      	movs	r3, #2
 80015d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d8:	2300      	movs	r3, #0
 80015da:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015dc:	2307      	movs	r3, #7
 80015de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015e0:	f107 031c 	add.w	r3, r7, #28
 80015e4:	4619      	mov	r1, r3
 80015e6:	4809      	ldr	r0, [pc, #36]	@ (800160c <HAL_UART_MspInit+0x118>)
 80015e8:	f003 fa9a 	bl	8004b20 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80015ec:	2200      	movs	r2, #0
 80015ee:	2105      	movs	r1, #5
 80015f0:	2027      	movs	r0, #39	@ 0x27
 80015f2:	f002 fc8d 	bl	8003f10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80015f6:	2027      	movs	r0, #39	@ 0x27
 80015f8:	f002 fca4 	bl	8003f44 <HAL_NVIC_EnableIRQ>
}
 80015fc:	bf00      	nop
 80015fe:	3730      	adds	r7, #48	@ 0x30
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	40004400 	.word	0x40004400
 8001608:	58024400 	.word	0x58024400
 800160c:	58020c00 	.word	0x58020c00
 8001610:	40004800 	.word	0x40004800

08001614 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b090      	sub	sp, #64	@ 0x40
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2b0f      	cmp	r3, #15
 8001620:	d827      	bhi.n	8001672 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001622:	2200      	movs	r2, #0
 8001624:	6879      	ldr	r1, [r7, #4]
 8001626:	2036      	movs	r0, #54	@ 0x36
 8001628:	f002 fc72 	bl	8003f10 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800162c:	2036      	movs	r0, #54	@ 0x36
 800162e:	f002 fc89 	bl	8003f44 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001632:	4a29      	ldr	r2, [pc, #164]	@ (80016d8 <HAL_InitTick+0xc4>)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001638:	4b28      	ldr	r3, [pc, #160]	@ (80016dc <HAL_InitTick+0xc8>)
 800163a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800163e:	4a27      	ldr	r2, [pc, #156]	@ (80016dc <HAL_InitTick+0xc8>)
 8001640:	f043 0310 	orr.w	r3, r3, #16
 8001644:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001648:	4b24      	ldr	r3, [pc, #144]	@ (80016dc <HAL_InitTick+0xc8>)
 800164a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800164e:	f003 0310 	and.w	r3, r3, #16
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001656:	f107 0210 	add.w	r2, r7, #16
 800165a:	f107 0314 	add.w	r3, r7, #20
 800165e:	4611      	mov	r1, r2
 8001660:	4618      	mov	r0, r3
 8001662:	f004 fc61 	bl	8005f28 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001668:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800166a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800166c:	2b00      	cmp	r3, #0
 800166e:	d106      	bne.n	800167e <HAL_InitTick+0x6a>
 8001670:	e001      	b.n	8001676 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e02b      	b.n	80016ce <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001676:	f004 fc2b 	bl	8005ed0 <HAL_RCC_GetPCLK1Freq>
 800167a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800167c:	e004      	b.n	8001688 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800167e:	f004 fc27 	bl	8005ed0 <HAL_RCC_GetPCLK1Freq>
 8001682:	4603      	mov	r3, r0
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001688:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800168a:	4a15      	ldr	r2, [pc, #84]	@ (80016e0 <HAL_InitTick+0xcc>)
 800168c:	fba2 2303 	umull	r2, r3, r2, r3
 8001690:	0c9b      	lsrs	r3, r3, #18
 8001692:	3b01      	subs	r3, #1
 8001694:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001696:	4b13      	ldr	r3, [pc, #76]	@ (80016e4 <HAL_InitTick+0xd0>)
 8001698:	4a13      	ldr	r2, [pc, #76]	@ (80016e8 <HAL_InitTick+0xd4>)
 800169a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800169c:	4b11      	ldr	r3, [pc, #68]	@ (80016e4 <HAL_InitTick+0xd0>)
 800169e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80016a2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80016a4:	4a0f      	ldr	r2, [pc, #60]	@ (80016e4 <HAL_InitTick+0xd0>)
 80016a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016a8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80016aa:	4b0e      	ldr	r3, [pc, #56]	@ (80016e4 <HAL_InitTick+0xd0>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b0:	4b0c      	ldr	r3, [pc, #48]	@ (80016e4 <HAL_InitTick+0xd0>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80016b6:	480b      	ldr	r0, [pc, #44]	@ (80016e4 <HAL_InitTick+0xd0>)
 80016b8:	f008 fdda 	bl	800a270 <HAL_TIM_Base_Init>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d104      	bne.n	80016cc <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80016c2:	4808      	ldr	r0, [pc, #32]	@ (80016e4 <HAL_InitTick+0xd0>)
 80016c4:	f008 fe36 	bl	800a334 <HAL_TIM_Base_Start_IT>
 80016c8:	4603      	mov	r3, r0
 80016ca:	e000      	b.n	80016ce <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3740      	adds	r7, #64	@ 0x40
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	24000008 	.word	0x24000008
 80016dc:	58024400 	.word	0x58024400
 80016e0:	431bde83 	.word	0x431bde83
 80016e4:	240009c0 	.word	0x240009c0
 80016e8:	40001000 	.word	0x40001000

080016ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016f0:	bf00      	nop
 80016f2:	e7fd      	b.n	80016f0 <NMI_Handler+0x4>

080016f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016f8:	bf00      	nop
 80016fa:	e7fd      	b.n	80016f8 <HardFault_Handler+0x4>

080016fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001700:	bf00      	nop
 8001702:	e7fd      	b.n	8001700 <MemManage_Handler+0x4>

08001704 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001708:	bf00      	nop
 800170a:	e7fd      	b.n	8001708 <BusFault_Handler+0x4>

0800170c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001710:	bf00      	nop
 8001712:	e7fd      	b.n	8001710 <UsageFault_Handler+0x4>

08001714 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001718:	bf00      	nop
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
	...

08001724 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800172a:	481c      	ldr	r0, [pc, #112]	@ (800179c <TIM3_IRQHandler+0x78>)
 800172c:	f008 fed1 	bl	800a4d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
#ifdef USE_MOBUSRTU_ENCODER
  // 使用任务通知替代直接调用编码器更新函数
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001730:	2300      	movs	r3, #0
 8001732:	603b      	str	r3, [r7, #0]

  // 发送任务通知给编码器任务
  if (encoderEventGroup != NULL) {
 8001734:	4b1a      	ldr	r3, [pc, #104]	@ (80017a0 <TIM3_IRQHandler+0x7c>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d006      	beq.n	800174a <TIM3_IRQHandler+0x26>
    xEventGroupSetBitsFromISR(encoderEventGroup, ENCODER_TICK_EVENT_BIT, &xHigherPriorityTaskWoken);
 800173c:	4b18      	ldr	r3, [pc, #96]	@ (80017a0 <TIM3_IRQHandler+0x7c>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	463a      	mov	r2, r7
 8001742:	2101      	movs	r1, #1
 8001744:	4618      	mov	r0, r3
 8001746:	f011 fa81 	bl	8012c4c <xEventGroupSetBitsFromISR>
  }

  // 中断频率统计
  tim3_irq_count++;
 800174a:	4b16      	ldr	r3, [pc, #88]	@ (80017a4 <TIM3_IRQHandler+0x80>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	3301      	adds	r3, #1
 8001750:	4a14      	ldr	r2, [pc, #80]	@ (80017a4 <TIM3_IRQHandler+0x80>)
 8001752:	6013      	str	r3, [r2, #0]
  uint32_t current_tick = HAL_GetTick();
 8001754:	f002 fae8 	bl	8003d28 <HAL_GetTick>
 8001758:	6078      	str	r0, [r7, #4]

  // 每1000毫秒（1秒）统计一次频率
  if (current_tick - tim3_last_tick >= 1000) {
 800175a:	4b13      	ldr	r3, [pc, #76]	@ (80017a8 <TIM3_IRQHandler+0x84>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001766:	d309      	bcc.n	800177c <TIM3_IRQHandler+0x58>
    tim3_frequency = tim3_irq_count;
 8001768:	4b0e      	ldr	r3, [pc, #56]	@ (80017a4 <TIM3_IRQHandler+0x80>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a0f      	ldr	r2, [pc, #60]	@ (80017ac <TIM3_IRQHandler+0x88>)
 800176e:	6013      	str	r3, [r2, #0]

    // 重置计数器和时间戳
    tim3_irq_count = 0;
 8001770:	4b0c      	ldr	r3, [pc, #48]	@ (80017a4 <TIM3_IRQHandler+0x80>)
 8001772:	2200      	movs	r2, #0
 8001774:	601a      	str	r2, [r3, #0]
    tim3_last_tick = current_tick;
 8001776:	4a0c      	ldr	r2, [pc, #48]	@ (80017a8 <TIM3_IRQHandler+0x84>)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6013      	str	r3, [r2, #0]
  }

  // 如果需要进行任务切换，则执行
  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d007      	beq.n	8001792 <TIM3_IRQHandler+0x6e>
 8001782:	4b0b      	ldr	r3, [pc, #44]	@ (80017b0 <TIM3_IRQHandler+0x8c>)
 8001784:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	f3bf 8f4f 	dsb	sy
 800178e:	f3bf 8f6f 	isb	sy
#endif
  /* USER CODE END TIM3_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	24000108 	.word	0x24000108
 80017a0:	240009ac 	.word	0x240009ac
 80017a4:	24000a0c 	.word	0x24000a0c
 80017a8:	24000a10 	.word	0x24000a10
 80017ac:	24000a14 	.word	0x24000a14
 80017b0:	e000ed04 	.word	0xe000ed04

080017b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017b8:	4802      	ldr	r0, [pc, #8]	@ (80017c4 <USART2_IRQHandler+0x10>)
 80017ba:	f009 ffbb 	bl	800b734 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	24000154 	.word	0x24000154

080017c8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80017cc:	4802      	ldr	r0, [pc, #8]	@ (80017d8 <USART3_IRQHandler+0x10>)
 80017ce:	f009 ffb1 	bl	800b734 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	240001e8 	.word	0x240001e8

080017dc <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80017e0:	4802      	ldr	r0, [pc, #8]	@ (80017ec <SDMMC1_IRQHandler+0x10>)
 80017e2:	f007 fb51 	bl	8008e88 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	2400008c 	.word	0x2400008c

080017f0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80017f4:	4802      	ldr	r0, [pc, #8]	@ (8001800 <TIM6_DAC_IRQHandler+0x10>)
 80017f6:	f008 fe6c 	bl	800a4d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	240009c0 	.word	0x240009c0

08001804 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800180c:	4a14      	ldr	r2, [pc, #80]	@ (8001860 <_sbrk+0x5c>)
 800180e:	4b15      	ldr	r3, [pc, #84]	@ (8001864 <_sbrk+0x60>)
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001818:	4b13      	ldr	r3, [pc, #76]	@ (8001868 <_sbrk+0x64>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d102      	bne.n	8001826 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001820:	4b11      	ldr	r3, [pc, #68]	@ (8001868 <_sbrk+0x64>)
 8001822:	4a12      	ldr	r2, [pc, #72]	@ (800186c <_sbrk+0x68>)
 8001824:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001826:	4b10      	ldr	r3, [pc, #64]	@ (8001868 <_sbrk+0x64>)
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4413      	add	r3, r2
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	429a      	cmp	r2, r3
 8001832:	d207      	bcs.n	8001844 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001834:	f015 fa7e 	bl	8016d34 <__errno>
 8001838:	4603      	mov	r3, r0
 800183a:	220c      	movs	r2, #12
 800183c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800183e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001842:	e009      	b.n	8001858 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001844:	4b08      	ldr	r3, [pc, #32]	@ (8001868 <_sbrk+0x64>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800184a:	4b07      	ldr	r3, [pc, #28]	@ (8001868 <_sbrk+0x64>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4413      	add	r3, r2
 8001852:	4a05      	ldr	r2, [pc, #20]	@ (8001868 <_sbrk+0x64>)
 8001854:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001856:	68fb      	ldr	r3, [r7, #12]
}
 8001858:	4618      	mov	r0, r3
 800185a:	3718      	adds	r7, #24
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	24080000 	.word	0x24080000
 8001864:	00003000 	.word	0x00003000
 8001868:	24000a18 	.word	0x24000a18
 800186c:	240055a0 	.word	0x240055a0

08001870 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001874:	4b37      	ldr	r3, [pc, #220]	@ (8001954 <SystemInit+0xe4>)
 8001876:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800187a:	4a36      	ldr	r2, [pc, #216]	@ (8001954 <SystemInit+0xe4>)
 800187c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001880:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001884:	4b34      	ldr	r3, [pc, #208]	@ (8001958 <SystemInit+0xe8>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 030f 	and.w	r3, r3, #15
 800188c:	2b06      	cmp	r3, #6
 800188e:	d807      	bhi.n	80018a0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001890:	4b31      	ldr	r3, [pc, #196]	@ (8001958 <SystemInit+0xe8>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f023 030f 	bic.w	r3, r3, #15
 8001898:	4a2f      	ldr	r2, [pc, #188]	@ (8001958 <SystemInit+0xe8>)
 800189a:	f043 0307 	orr.w	r3, r3, #7
 800189e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80018a0:	4b2e      	ldr	r3, [pc, #184]	@ (800195c <SystemInit+0xec>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a2d      	ldr	r2, [pc, #180]	@ (800195c <SystemInit+0xec>)
 80018a6:	f043 0301 	orr.w	r3, r3, #1
 80018aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80018ac:	4b2b      	ldr	r3, [pc, #172]	@ (800195c <SystemInit+0xec>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80018b2:	4b2a      	ldr	r3, [pc, #168]	@ (800195c <SystemInit+0xec>)
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	4929      	ldr	r1, [pc, #164]	@ (800195c <SystemInit+0xec>)
 80018b8:	4b29      	ldr	r3, [pc, #164]	@ (8001960 <SystemInit+0xf0>)
 80018ba:	4013      	ands	r3, r2
 80018bc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80018be:	4b26      	ldr	r3, [pc, #152]	@ (8001958 <SystemInit+0xe8>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0308 	and.w	r3, r3, #8
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d007      	beq.n	80018da <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80018ca:	4b23      	ldr	r3, [pc, #140]	@ (8001958 <SystemInit+0xe8>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f023 030f 	bic.w	r3, r3, #15
 80018d2:	4a21      	ldr	r2, [pc, #132]	@ (8001958 <SystemInit+0xe8>)
 80018d4:	f043 0307 	orr.w	r3, r3, #7
 80018d8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80018da:	4b20      	ldr	r3, [pc, #128]	@ (800195c <SystemInit+0xec>)
 80018dc:	2200      	movs	r2, #0
 80018de:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80018e0:	4b1e      	ldr	r3, [pc, #120]	@ (800195c <SystemInit+0xec>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80018e6:	4b1d      	ldr	r3, [pc, #116]	@ (800195c <SystemInit+0xec>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80018ec:	4b1b      	ldr	r3, [pc, #108]	@ (800195c <SystemInit+0xec>)
 80018ee:	4a1d      	ldr	r2, [pc, #116]	@ (8001964 <SystemInit+0xf4>)
 80018f0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80018f2:	4b1a      	ldr	r3, [pc, #104]	@ (800195c <SystemInit+0xec>)
 80018f4:	4a1c      	ldr	r2, [pc, #112]	@ (8001968 <SystemInit+0xf8>)
 80018f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80018f8:	4b18      	ldr	r3, [pc, #96]	@ (800195c <SystemInit+0xec>)
 80018fa:	4a1c      	ldr	r2, [pc, #112]	@ (800196c <SystemInit+0xfc>)
 80018fc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80018fe:	4b17      	ldr	r3, [pc, #92]	@ (800195c <SystemInit+0xec>)
 8001900:	2200      	movs	r2, #0
 8001902:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001904:	4b15      	ldr	r3, [pc, #84]	@ (800195c <SystemInit+0xec>)
 8001906:	4a19      	ldr	r2, [pc, #100]	@ (800196c <SystemInit+0xfc>)
 8001908:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800190a:	4b14      	ldr	r3, [pc, #80]	@ (800195c <SystemInit+0xec>)
 800190c:	2200      	movs	r2, #0
 800190e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001910:	4b12      	ldr	r3, [pc, #72]	@ (800195c <SystemInit+0xec>)
 8001912:	4a16      	ldr	r2, [pc, #88]	@ (800196c <SystemInit+0xfc>)
 8001914:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001916:	4b11      	ldr	r3, [pc, #68]	@ (800195c <SystemInit+0xec>)
 8001918:	2200      	movs	r2, #0
 800191a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800191c:	4b0f      	ldr	r3, [pc, #60]	@ (800195c <SystemInit+0xec>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a0e      	ldr	r2, [pc, #56]	@ (800195c <SystemInit+0xec>)
 8001922:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001926:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001928:	4b0c      	ldr	r3, [pc, #48]	@ (800195c <SystemInit+0xec>)
 800192a:	2200      	movs	r2, #0
 800192c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800192e:	4b10      	ldr	r3, [pc, #64]	@ (8001970 <SystemInit+0x100>)
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	4b10      	ldr	r3, [pc, #64]	@ (8001974 <SystemInit+0x104>)
 8001934:	4013      	ands	r3, r2
 8001936:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800193a:	d202      	bcs.n	8001942 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800193c:	4b0e      	ldr	r3, [pc, #56]	@ (8001978 <SystemInit+0x108>)
 800193e:	2201      	movs	r2, #1
 8001940:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001942:	4b0e      	ldr	r3, [pc, #56]	@ (800197c <SystemInit+0x10c>)
 8001944:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001948:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800194a:	bf00      	nop
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	e000ed00 	.word	0xe000ed00
 8001958:	52002000 	.word	0x52002000
 800195c:	58024400 	.word	0x58024400
 8001960:	eaf6ed7f 	.word	0xeaf6ed7f
 8001964:	02020200 	.word	0x02020200
 8001968:	01ff0000 	.word	0x01ff0000
 800196c:	01010280 	.word	0x01010280
 8001970:	5c001000 	.word	0x5c001000
 8001974:	ffff0000 	.word	0xffff0000
 8001978:	51008108 	.word	0x51008108
 800197c:	52004000 	.word	0x52004000

08001980 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001980:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001984:	f7ff ff74 	bl	8001870 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001988:	480c      	ldr	r0, [pc, #48]	@ (80019bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800198a:	490d      	ldr	r1, [pc, #52]	@ (80019c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800198c:	4a0d      	ldr	r2, [pc, #52]	@ (80019c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800198e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001990:	e002      	b.n	8001998 <LoopCopyDataInit>

08001992 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001992:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001994:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001996:	3304      	adds	r3, #4

08001998 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001998:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800199a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800199c:	d3f9      	bcc.n	8001992 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800199e:	4a0a      	ldr	r2, [pc, #40]	@ (80019c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019a0:	4c0a      	ldr	r4, [pc, #40]	@ (80019cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80019a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019a4:	e001      	b.n	80019aa <LoopFillZerobss>

080019a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019a8:	3204      	adds	r2, #4

080019aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019ac:	d3fb      	bcc.n	80019a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019ae:	f015 f9c7 	bl	8016d40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019b2:	f7ff f8e1 	bl	8000b78 <main>
  bx  lr
 80019b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019b8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80019bc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80019c0:	24000070 	.word	0x24000070
  ldr r2, =_sidata
 80019c4:	08017df4 	.word	0x08017df4
  ldr r2, =_sbss
 80019c8:	24000070 	.word	0x24000070
  ldr r4, =_ebss
 80019cc:	240055a0 	.word	0x240055a0

080019d0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019d0:	e7fe      	b.n	80019d0 <ADC3_IRQHandler>
	...

080019d4 <_ZN10Encoder485C1EP17TIM_HandleTypeDefhP20__UART_HandleTypeDef>:

#include "Encoder485.h"
#include <cmath>


Encoder485::Encoder485(TIM_HandleTypeDef *htim, uint8_t unit_id, UART_HandleTypeDef *huart)
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	603b      	str	r3, [r7, #0]
 80019e0:	4613      	mov	r3, r2
 80019e2:	71fb      	strb	r3, [r7, #7]
  : ModbusAbsoluteEncoder(htim, unit_id),
    huart(huart)
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	79fa      	ldrb	r2, [r7, #7]
 80019e8:	68b9      	ldr	r1, [r7, #8]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f001 fcde 	bl	80033ac <_ZN21ModbusAbsoluteEncoderC1EP17TIM_HandleTypeDefh>
 80019f0:	4a05      	ldr	r2, [pc, #20]	@ (8001a08 <_ZN10Encoder485C1EP17TIM_HandleTypeDefhP20__UART_HandleTypeDef+0x34>)
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	683a      	ldr	r2, [r7, #0]
 80019fa:	f8c3 21bc 	str.w	r2, [r3, #444]	@ 0x1bc
{
}
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	4618      	mov	r0, r3
 8001a02:	3710      	adds	r7, #16
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	08017be0 	.word	0x08017be0

08001a0c <_ZN10Encoder4854initEv>:

void Encoder485::init(){
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
    /* Modbus Master initialization */
  ModbusH.uModbusType = MB_MASTER;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2204      	movs	r2, #4
 8001a18:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ModbusH.port = huart; 
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f8d3 21bc 	ldr.w	r2, [r3, #444]	@ 0x1bc
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	629a      	str	r2, [r3, #40]	@ 0x28
  ModbusH.u8id = 0; //master ID
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  ModbusH.u16timeOut = 1000;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001a34:	f8a3 20c6 	strh.w	r2, [r3, #198]	@ 0xc6
  ModbusH.EN_Port = NULL; // No RS485
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	631a      	str	r2, [r3, #48]	@ 0x30
  ModbusH.u16regs = ModbusDATA;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f503 72b6 	add.w	r2, r3, #364	@ 0x16c
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  ModbusH.u16regsize= sizeof(ModbusDATA)/sizeof(ModbusDATA[0]);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2208      	movs	r2, #8
 8001a4e:	f8a3 20c8 	strh.w	r2, [r3, #200]	@ 0xc8
  ModbusH.xTypeHW = USART_HW;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2201      	movs	r2, #1
 8001a56:	f883 2168 	strb.w	r2, [r3, #360]	@ 0x168
  
  ModbusAbsoluteEncoder::init();
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f001 fcff 	bl	8003460 <_ZN21ModbusAbsoluteEncoder4initEv>
}
 8001a62:	bf00      	nop
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <_ZN10Encoder48514constructQueryEP8modbus_t>:

bool Encoder485::constructQuery(modbus_t* modbusQuary) {
 8001a6a:	b480      	push	{r7}
 8001a6c:	b083      	sub	sp, #12
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
 8001a72:	6039      	str	r1, [r7, #0]
    modbusQuary->u8id = unit_id;                      // 从站地址03
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f893 217c 	ldrb.w	r2, [r3, #380]	@ 0x17c
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	701a      	strb	r2, [r3, #0]
    modbusQuary->u8fct = MB_FC_READ_REGISTERS;  // 功能码03：读取保持寄存器
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	2203      	movs	r2, #3
 8001a82:	705a      	strb	r2, [r3, #1]
    modbusQuary->u16RegAdd = 0x0000;            // 寄存器起始地址0x00
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	2200      	movs	r2, #0
 8001a88:	805a      	strh	r2, [r3, #2]
    modbusQuary->u16CoilsNo = 2;                // 读取2个寄存器（0x00和0x01）
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	2202      	movs	r2, #2
 8001a8e:	809a      	strh	r2, [r3, #4]
    modbusQuary->u16reg = ModbusDATA;           // 数据存储缓冲区
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f503 72b6 	add.w	r2, r3, #364	@ 0x16c
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	609a      	str	r2, [r3, #8]
    return true;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <RingAdd>:
#endif

/* Ring Buffer functions */
// This function must be called only after disabling USART RX interrupt or inside of the RX interrupt
void RingAdd(modbusRingBuffer_t *xRingBuffer, uint8_t u8Val)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	70fb      	strb	r3, [r7, #3]

	xRingBuffer->uxBuffer[xRingBuffer->u8end] = u8Val;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8001aba:	4619      	mov	r1, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	78fa      	ldrb	r2, [r7, #3]
 8001ac0:	545a      	strb	r2, [r3, r1]
	xRingBuffer->u8end = (xRingBuffer->u8end + 1) % MAX_BUFFER;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8001ac8:	3301      	adds	r3, #1
 8001aca:	425a      	negs	r2, r3
 8001acc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001ad0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001ad4:	bf58      	it	pl
 8001ad6:	4253      	negpl	r3, r2
 8001ad8:	b2da      	uxtb	r2, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
	if (xRingBuffer->u8available == MAX_BUFFER)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8001ae6:	2b80      	cmp	r3, #128	@ 0x80
 8001ae8:	d113      	bne.n	8001b12 <RingAdd+0x6a>
	{
		xRingBuffer->overflow = true;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2201      	movs	r2, #1
 8001aee:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8001af8:	3301      	adds	r3, #1
 8001afa:	425a      	negs	r2, r3
 8001afc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001b00:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001b04:	bf58      	it	pl
 8001b06:	4253      	negpl	r3, r2
 8001b08:	b2da      	uxtb	r2, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
	{
		xRingBuffer->overflow = false;
		xRingBuffer->u8available++;
	}

}
 8001b10:	e00b      	b.n	8001b2a <RingAdd+0x82>
		xRingBuffer->overflow = false;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
		xRingBuffer->u8available++;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8001b20:	3301      	adds	r3, #1
 8001b22:	b2da      	uxtb	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
}
 8001b2a:	bf00      	nop
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr

08001b36 <RingGetAllBytes>:

// This function must be called only after disabling USART RX interrupt
uint8_t RingGetAllBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b082      	sub	sp, #8
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
 8001b3e:	6039      	str	r1, [r7, #0]
	return RingGetNBytes(xRingBuffer, buffer, xRingBuffer->u8available);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8001b46:	461a      	mov	r2, r3
 8001b48:	6839      	ldr	r1, [r7, #0]
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f000 f805 	bl	8001b5a <RingGetNBytes>
 8001b50:	4603      	mov	r3, r0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <RingGetNBytes>:

// This function must be called only after disabling USART RX interrupt
uint8_t RingGetNBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer, uint8_t uNumber)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b086      	sub	sp, #24
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	60f8      	str	r0, [r7, #12]
 8001b62:	60b9      	str	r1, [r7, #8]
 8001b64:	4613      	mov	r3, r2
 8001b66:	71fb      	strb	r3, [r7, #7]
	uint8_t uCounter;
	if(xRingBuffer->u8available == 0  || uNumber == 0 ) return 0;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d002      	beq.n	8001b78 <RingGetNBytes+0x1e>
 8001b72:	79fb      	ldrb	r3, [r7, #7]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d101      	bne.n	8001b7c <RingGetNBytes+0x22>
 8001b78:	2300      	movs	r3, #0
 8001b7a:	e03e      	b.n	8001bfa <RingGetNBytes+0xa0>
	if(uNumber > MAX_BUFFER) return 0;
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
 8001b7e:	2b80      	cmp	r3, #128	@ 0x80
 8001b80:	d901      	bls.n	8001b86 <RingGetNBytes+0x2c>
 8001b82:	2300      	movs	r3, #0
 8001b84:	e039      	b.n	8001bfa <RingGetNBytes+0xa0>

	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 8001b86:	2300      	movs	r3, #0
 8001b88:	75fb      	strb	r3, [r7, #23]
 8001b8a:	e01b      	b.n	8001bc4 <RingGetNBytes+0x6a>
	{
		buffer[uCounter] = xRingBuffer->uxBuffer[xRingBuffer->u8start];
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8001b92:	4619      	mov	r1, r3
 8001b94:	7dfb      	ldrb	r3, [r7, #23]
 8001b96:	68ba      	ldr	r2, [r7, #8]
 8001b98:	4413      	add	r3, r2
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	5c52      	ldrb	r2, [r2, r1]
 8001b9e:	701a      	strb	r2, [r3, #0]
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	425a      	negs	r2, r3
 8001baa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001bae:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001bb2:	bf58      	it	pl
 8001bb4:	4253      	negpl	r3, r2
 8001bb6:	b2da      	uxtb	r2, r3
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 8001bbe:	7dfb      	ldrb	r3, [r7, #23]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	75fb      	strb	r3, [r7, #23]
 8001bc4:	7dfa      	ldrb	r2, [r7, #23]
 8001bc6:	79fb      	ldrb	r3, [r7, #7]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d205      	bcs.n	8001bd8 <RingGetNBytes+0x7e>
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8001bd2:	7dfa      	ldrb	r2, [r7, #23]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d3d9      	bcc.n	8001b8c <RingGetNBytes+0x32>
	}
	xRingBuffer->u8available = xRingBuffer->u8available - uCounter;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f893 2082 	ldrb.w	r2, [r3, #130]	@ 0x82
 8001bde:	7dfb      	ldrb	r3, [r7, #23]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	b2da      	uxtb	r2, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
	xRingBuffer->overflow = false;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
	RingClear(xRingBuffer);
 8001bf2:	68f8      	ldr	r0, [r7, #12]
 8001bf4:	f000 f805 	bl	8001c02 <RingClear>

	return uCounter;
 8001bf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3718      	adds	r7, #24
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <RingClear>:
{
return xRingBuffer->u8available;
}

void RingClear(modbusRingBuffer_t *xRingBuffer)
{
 8001c02:	b480      	push	{r7}
 8001c04:	b083      	sub	sp, #12
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
xRingBuffer->u8start = 0;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
xRingBuffer->u8end = 0;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
xRingBuffer->u8available = 0;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
xRingBuffer->overflow = false;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
	...

08001c38 <ModbusInit>:
 * of the modbus handler
 *
 * @param modH   modbus handler
 */
void ModbusInit(modbusHandler_t * modH)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af02      	add	r7, sp, #8
 8001c3e:	6078      	str	r0, [r7, #4]

  if (numberHandlers < MAX_M_HANDLERS)
 8001c40:	4b45      	ldr	r3, [pc, #276]	@ (8001d58 <ModbusInit+0x120>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	f200 8083 	bhi.w	8001d50 <ModbusInit+0x118>
  {

	  //Initialize the ring buffer

	  RingClear(&modH->xBufferRX);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	33c0      	adds	r3, #192	@ 0xc0
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7ff ffd7 	bl	8001c02 <RingClear>

	  if(modH->uModbusType == MB_SLAVE)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	2b03      	cmp	r3, #3
 8001c5a:	d109      	bne.n	8001c70 <ModbusInit+0x38>
		  }
		  else{
			  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusSlave, modH, &myTaskModbusA_attributes);
		  }
#else
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusSlave, modH, &myTaskModbusA_attributes);
 8001c5c:	4a3f      	ldr	r2, [pc, #252]	@ (8001d5c <ModbusInit+0x124>)
 8001c5e:	6879      	ldr	r1, [r7, #4]
 8001c60:	483f      	ldr	r0, [pc, #252]	@ (8001d60 <ModbusInit+0x128>)
 8001c62:	f010 faea 	bl	801223a <osThreadNew>
 8001c66:	4602      	mov	r2, r0
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8001c6e:	e035      	b.n	8001cdc <ModbusInit+0xa4>
#endif


	  }
	  else if (modH->uModbusType == MB_MASTER)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	2b04      	cmp	r3, #4
 8001c76:	d130      	bne.n	8001cda <ModbusInit+0xa2>
		  else
		  {
		     modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &myTaskModbusB_attributes);
		  }
#else
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &myTaskModbusB_attributes);
 8001c78:	4a3a      	ldr	r2, [pc, #232]	@ (8001d64 <ModbusInit+0x12c>)
 8001c7a:	6879      	ldr	r1, [r7, #4]
 8001c7c:	483a      	ldr	r0, [pc, #232]	@ (8001d68 <ModbusInit+0x130>)
 8001c7e:	f010 fadc 	bl	801223a <osThreadNew>
 8001c82:	4602      	mov	r2, r0
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
#endif



		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
				  	  	modH->u16timeOut ,     		// The timer period in ticks.
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	@ 0xa2
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 8001c90:	4619      	mov	r1, r3
						pdFALSE,         // The timers will auto-reload themselves when they expire.
						( void * )modH->xTimerTimeout,     // Assign each timer a unique id equal to its array index.
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 8001c98:	4a34      	ldr	r2, [pc, #208]	@ (8001d6c <ModbusInit+0x134>)
 8001c9a:	9200      	str	r2, [sp, #0]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	4834      	ldr	r0, [pc, #208]	@ (8001d70 <ModbusInit+0x138>)
 8001ca0:	f013 fc1c 	bl	80154dc <xTimerCreate>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
						(TimerCallbackFunction_t) vTimerCallbackTimeout  // Each timer calls the same callback when it expires.
                  	  	);

		  if(modH->xTimerTimeout == NULL)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d101      	bne.n	8001cba <ModbusInit+0x82>
		  {
			  while(1); //error creating timer, check heap and stack size
 8001cb6:	bf00      	nop
 8001cb8:	e7fd      	b.n	8001cb6 <ModbusInit+0x7e>
		  }


		  modH->QueueTelegramHandle = osMessageQueueNew (MAX_TELEGRAMS, sizeof(modbus_t), &QueueTelegram_attributes);
 8001cba:	4a2e      	ldr	r2, [pc, #184]	@ (8001d74 <ModbusInit+0x13c>)
 8001cbc:	2110      	movs	r1, #16
 8001cbe:	2002      	movs	r0, #2
 8001cc0:	f010 fcb6 	bl	8012630 <osMessageQueueNew>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac

		  if(modH->QueueTelegramHandle == NULL)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d102      	bne.n	8001cdc <ModbusInit+0xa4>
		  {
			  while(1); //error creating queue for telegrams, check heap and stack size
 8001cd6:	bf00      	nop
 8001cd8:	e7fd      	b.n	8001cd6 <ModbusInit+0x9e>
		  }

	  }
	  else
	  {
		  while(1); //Error Modbus type not supported choose a valid Type
 8001cda:	e7fe      	b.n	8001cda <ModbusInit+0xa2>
	  }

	  if  (modH->myTaskModbusAHandle == NULL)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d101      	bne.n	8001cea <ModbusInit+0xb2>
	  {
		  while(1); //Error creating Modbus task, check heap and stack size
 8001ce6:	bf00      	nop
 8001ce8:	e7fd      	b.n	8001ce6 <ModbusInit+0xae>


	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
		  	  	  	  	  	  	  	T35 ,     // The timer period in ticks.
                                    pdFALSE,         // The timers will auto-reload themselves when they expire.
									( void * )modH->xTimerT35,     // Assign each timer a unique id equal to its array index.
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
 8001cf0:	4a21      	ldr	r2, [pc, #132]	@ (8001d78 <ModbusInit+0x140>)
 8001cf2:	9200      	str	r2, [sp, #0]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	2105      	movs	r1, #5
 8001cf8:	4820      	ldr	r0, [pc, #128]	@ (8001d7c <ModbusInit+0x144>)
 8001cfa:	f013 fbef 	bl	80154dc <xTimerCreate>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
                                    (TimerCallbackFunction_t) vTimerCallbackT35     // Each timer calls the same callback when it expires.
                                    );
	  if (modH->xTimerT35 == NULL)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d101      	bne.n	8001d14 <ModbusInit+0xdc>
	  {
		  while(1); //Error creating the timer, check heap and stack size
 8001d10:	bf00      	nop
 8001d12:	e7fd      	b.n	8001d10 <ModbusInit+0xd8>
	  }


	  modH->ModBusSphrHandle = osSemaphoreNew(1, 1, &ModBusSphr_attributes);
 8001d14:	4a1a      	ldr	r2, [pc, #104]	@ (8001d80 <ModbusInit+0x148>)
 8001d16:	2101      	movs	r1, #1
 8001d18:	2001      	movs	r0, #1
 8001d1a:	f010 fb46 	bl	80123aa <osSemaphoreNew>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc

	  if(modH->ModBusSphrHandle == NULL)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d101      	bne.n	8001d34 <ModbusInit+0xfc>
	  {
		  while(1); //Error creating the semaphore, check heap and stack size
 8001d30:	bf00      	nop
 8001d32:	e7fd      	b.n	8001d30 <ModbusInit+0xf8>
	  }

	  mHandlers[numberHandlers] = modH;
 8001d34:	4b08      	ldr	r3, [pc, #32]	@ (8001d58 <ModbusInit+0x120>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4a12      	ldr	r2, [pc, #72]	@ (8001d84 <ModbusInit+0x14c>)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	  numberHandlers++;
 8001d42:	4b05      	ldr	r3, [pc, #20]	@ (8001d58 <ModbusInit+0x120>)
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	3301      	adds	r3, #1
 8001d48:	b2da      	uxtb	r2, r3
 8001d4a:	4b03      	ldr	r3, [pc, #12]	@ (8001d58 <ModbusInit+0x120>)
 8001d4c:	701a      	strb	r2, [r3, #0]
  else
  {
	  while(1); //error no more Modbus handlers supported
  }

}
 8001d4e:	e000      	b.n	8001d52 <ModbusInit+0x11a>
	  while(1); //error no more Modbus handlers supported
 8001d50:	e7fe      	b.n	8001d50 <ModbusInit+0x118>
}
 8001d52:	3708      	adds	r7, #8
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	24000a24 	.word	0x24000a24
 8001d5c:	08017c28 	.word	0x08017c28
 8001d60:	08001f7d 	.word	0x08001f7d
 8001d64:	08017c4c 	.word	0x08017c4c
 8001d68:	08002511 	.word	0x08002511
 8001d6c:	08001f21 	.word	0x08001f21
 8001d70:	08017b14 	.word	0x08017b14
 8001d74:	08017c10 	.word	0x08017c10
 8001d78:	08001e9d 	.word	0x08001e9d
 8001d7c:	08017b24 	.word	0x08017b24
 8001d80:	08017c70 	.word	0x08017c70
 8001d84:	24000a1c 	.word	0x24000a1c

08001d88 <ModbusStart>:
 * ModbusRtu's own begin() functions.)
 *
 * @ingroup setup
 */
void ModbusStart(modbusHandler_t * modH)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]

	if(modH->xTypeHW != USART_HW && modH->xTypeHW != TCP_HW && modH->xTypeHW != USB_CDC_HW  && modH->xTypeHW != USART_HW_DMA )
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d010      	beq.n	8001dbc <ModbusStart+0x34>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8001da0:	2b03      	cmp	r3, #3
 8001da2:	d00b      	beq.n	8001dbc <ModbusStart+0x34>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d006      	beq.n	8001dbc <ModbusStart+0x34>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8001db4:	2b04      	cmp	r3, #4
 8001db6:	d001      	beq.n	8001dbc <ModbusStart+0x34>
	{

		while(1); //ERROR select the type of hardware
 8001db8:	bf00      	nop
 8001dba:	e7fd      	b.n	8001db8 <ModbusStart+0x30>
	}

	if (modH->xTypeHW == USART_HW_DMA && ENABLE_USART_DMA == 0  )
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8001dc2:	2b04      	cmp	r3, #4
 8001dc4:	d101      	bne.n	8001dca <ModbusStart+0x42>
	{
		while(1); //ERROR To use USART_HW_DMA you need to enable it in the ModbusConfig.h file
 8001dc6:	bf00      	nop
 8001dc8:	e7fd      	b.n	8001dc6 <ModbusStart+0x3e>
	}



	if (modH->xTypeHW == USART_HW || modH->xTypeHW ==  USART_HW_DMA )
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d004      	beq.n	8001dde <ModbusStart+0x56>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8001dda:	2b04      	cmp	r3, #4
 8001ddc:	d140      	bne.n	8001e60 <ModbusStart+0xd8>
	{

	      if (modH->EN_Port != NULL )
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d007      	beq.n	8001df6 <ModbusStart+0x6e>
          {
              // return RS485 transceiver to receive mode
          	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	68d8      	ldr	r0, [r3, #12]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	8a1b      	ldrh	r3, [r3, #16]
 8001dee:	2200      	movs	r2, #0
 8001df0:	4619      	mov	r1, r3
 8001df2:	f003 f845 	bl	8004e80 <HAL_GPIO_WritePin>
          }

          if (modH->uModbusType == MB_SLAVE &&  modH->u16regs == NULL )
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	2b03      	cmp	r3, #3
 8001dfc:	d106      	bne.n	8001e0c <ModbusStart+0x84>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d101      	bne.n	8001e0c <ModbusStart+0x84>
          {
          	while(1); //ERROR define the DATA pointer shared through Modbus
 8001e08:	bf00      	nop
 8001e0a:	e7fd      	b.n	8001e08 <ModbusStart+0x80>
          }

          //check that port is initialized
          while (HAL_UART_GetState(modH->port) != HAL_UART_STATE_READY)
 8001e0c:	bf00      	nop
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f00a f910 	bl	800c038 <HAL_UART_GetState>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b20      	cmp	r3, #32
 8001e1c:	d1f7      	bne.n	8001e0e <ModbusStart+0x86>
          }


#else
          // Receive data from serial port for Modbus using interrupt
          if(HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1) != HAL_OK)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6858      	ldr	r0, [r3, #4]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	33a6      	adds	r3, #166	@ 0xa6
 8001e26:	2201      	movs	r2, #1
 8001e28:	4619      	mov	r1, r3
 8001e2a:	f009 fb69 	bl	800b500 <HAL_UART_Receive_IT>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <ModbusStart+0xb0>
          {
                while(1)
 8001e34:	bf00      	nop
 8001e36:	e7fd      	b.n	8001e34 <ModbusStart+0xac>
                 }
          }

#endif

          if(modH->u8id !=0 && modH->uModbusType == MB_MASTER )
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	7a1b      	ldrb	r3, [r3, #8]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d005      	beq.n	8001e4c <ModbusStart+0xc4>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	2b04      	cmp	r3, #4
 8001e46:	d101      	bne.n	8001e4c <ModbusStart+0xc4>
          {
        	  while(1)
 8001e48:	bf00      	nop
 8001e4a:	e7fd      	b.n	8001e48 <ModbusStart+0xc0>
        	     	  //error Master ID must be zero
        	  }

          }

          if(modH->u8id ==0 && modH->uModbusType == MB_SLAVE )
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	7a1b      	ldrb	r3, [r3, #8]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d105      	bne.n	8001e60 <ModbusStart+0xd8>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	2b03      	cmp	r3, #3
 8001e5a:	d101      	bne.n	8001e60 <ModbusStart+0xd8>
          {
             	  while(1)
 8001e5c:	bf00      	nop
 8001e5e:	e7fd      	b.n	8001e5c <ModbusStart+0xd4>


#endif


    modH->u8lastRec = modH->u8BufferSize = 0;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f893 2093 	ldrb.w	r2, [r3, #147]	@ 0x93
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
    modH->u16InCnt = modH->u16OutCnt = modH->u16errCnt = 0;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f8b3 20a0 	ldrh.w	r2, [r3, #160]	@ 0xa0
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f8b3 209e 	ldrh.w	r2, [r3, #158]	@ 0x9e
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c

}
 8001e94:	bf00      	nop
 8001e96:	3708      	adds	r7, #8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <vTimerCallbackT35>:
}
#endif


void vTimerCallbackT35(TimerHandle_t *pxTimer)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af02      	add	r7, sp, #8
 8001ea2:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	60fb      	str	r3, [r7, #12]
 8001ea8:	e02a      	b.n	8001f00 <vTimerCallbackT35+0x64>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerT35 ==  pxTimer ){
 8001eaa:	4a1b      	ldr	r2, [pc, #108]	@ (8001f18 <vTimerCallbackT35+0x7c>)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eb2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d11e      	bne.n	8001efa <vTimerCallbackT35+0x5e>
			if(mHandlers[i]->uModbusType == MB_MASTER)
 8001ebc:	4a16      	ldr	r2, [pc, #88]	@ (8001f18 <vTimerCallbackT35+0x7c>)
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	2b04      	cmp	r3, #4
 8001ec8:	d10c      	bne.n	8001ee4 <vTimerCallbackT35+0x48>
			{
				xTimerStop(mHandlers[i]->xTimerTimeout,0);
 8001eca:	4a13      	ldr	r2, [pc, #76]	@ (8001f18 <vTimerCallbackT35+0x7c>)
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ed2:	f8d3 00b8 	ldr.w	r0, [r3, #184]	@ 0xb8
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	9300      	str	r3, [sp, #0]
 8001eda:	2300      	movs	r3, #0
 8001edc:	2200      	movs	r2, #0
 8001ede:	2103      	movs	r1, #3
 8001ee0:	f013 fb5a 	bl	8015598 <xTimerGenericCommand>
			}
			xTaskNotify(mHandlers[i]->myTaskModbusAHandle, 0, eSetValueWithOverwrite);
 8001ee4:	4a0c      	ldr	r2, [pc, #48]	@ (8001f18 <vTimerCallbackT35+0x7c>)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eec:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	2203      	movs	r2, #3
 8001ef4:	2100      	movs	r1, #0
 8001ef6:	f013 f8ab 	bl	8015050 <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	3301      	adds	r3, #1
 8001efe:	60fb      	str	r3, [r7, #12]
 8001f00:	4b06      	ldr	r3, [pc, #24]	@ (8001f1c <vTimerCallbackT35+0x80>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	461a      	mov	r2, r3
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	dbce      	blt.n	8001eaa <vTimerCallbackT35+0xe>
		}

	}
}
 8001f0c:	bf00      	nop
 8001f0e:	bf00      	nop
 8001f10:	3710      	adds	r7, #16
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	24000a1c 	.word	0x24000a1c
 8001f1c:	24000a24 	.word	0x24000a24

08001f20 <vTimerCallbackTimeout>:

void vTimerCallbackTimeout(TimerHandle_t *pxTimer)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 8001f28:	2300      	movs	r3, #0
 8001f2a:	60fb      	str	r3, [r7, #12]
 8001f2c:	e016      	b.n	8001f5c <vTimerCallbackTimeout+0x3c>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerTimeout ==  pxTimer ){
 8001f2e:	4a11      	ldr	r2, [pc, #68]	@ (8001f74 <vTimerCallbackTimeout+0x54>)
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f36:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d10a      	bne.n	8001f56 <vTimerCallbackTimeout+0x36>
				xTaskNotify(mHandlers[i]->myTaskModbusAHandle, ERR_TIME_OUT, eSetValueWithOverwrite);
 8001f40:	4a0c      	ldr	r2, [pc, #48]	@ (8001f74 <vTimerCallbackTimeout+0x54>)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f48:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	2203      	movs	r2, #3
 8001f50:	2111      	movs	r1, #17
 8001f52:	f013 f87d 	bl	8015050 <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	60fb      	str	r3, [r7, #12]
 8001f5c:	4b06      	ldr	r3, [pc, #24]	@ (8001f78 <vTimerCallbackTimeout+0x58>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	461a      	mov	r2, r3
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	4293      	cmp	r3, r2
 8001f66:	dbe2      	blt.n	8001f2e <vTimerCallbackTimeout+0xe>
		}

	}

}
 8001f68:	bf00      	nop
 8001f6a:	bf00      	nop
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	24000a1c 	.word	0x24000a1c
 8001f78:	24000a24 	.word	0x24000a24

08001f7c <StartTaskModbusSlave>:
#endif



void StartTaskModbusSlave(void *argument)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	60fb      	str	r3, [r7, #12]
#endif

  for(;;)
  {

	modH->i8lastError = 0;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	749a      	strb	r2, [r3, #18]

	  }
#endif


   if(modH->xTypeHW == USART_HW || modH->xTypeHW == USART_HW_DMA)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d004      	beq.n	8001fa2 <StartTaskModbusSlave+0x26>
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8001f9e:	2b04      	cmp	r3, #4
 8001fa0:	d116      	bne.n	8001fd0 <StartTaskModbusSlave+0x54>
   {

	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY); /* Block until a Modbus Frame arrives */
 8001fa2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001fa6:	2001      	movs	r0, #1
 8001fa8:	f013 f806 	bl	8014fb8 <ulTaskNotifyTake>

	  if (getRxBuffer(modH) == ERR_BUFF_OVERFLOW)
 8001fac:	68f8      	ldr	r0, [r7, #12]
 8001fae:	f000 fc8f 	bl	80028d0 <getRxBuffer>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b0c      	cmp	r3, #12
 8001fb6:	d10b      	bne.n	8001fd0 <StartTaskModbusSlave+0x54>
	  {
	      modH->i8lastError = ERR_BUFF_OVERFLOW;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	220c      	movs	r2, #12
 8001fbc:	749a      	strb	r2, [r3, #18]
	   	  modH->u16errCnt++;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	b29a      	uxth	r2, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
		  continue;
 8001fce:	e0c2      	b.n	8002156 <StartTaskModbusSlave+0x1da>
	  }

   }

   if (modH->u8BufferSize < 7)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8001fd6:	2b06      	cmp	r3, #6
 8001fd8:	d80b      	bhi.n	8001ff2 <StartTaskModbusSlave+0x76>
   {
      //The size of the frame is invalid
      modH->i8lastError = ERR_BAD_SIZE;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	220f      	movs	r2, #15
 8001fde:	749a      	strb	r2, [r3, #18]
      modH->u16errCnt++;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	b29a      	uxth	r2, r3
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0

	  continue;
 8001ff0:	e0b1      	b.n	8002156 <StartTaskModbusSlave+0x1da>
    }

    //check broadcast mode
    modH->u8AddressMode = ADDRESS_NORMAL;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
    if (modH->u8Buffer[ID] == ADDRESS_BROADCAST)
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	7cdb      	ldrb	r3, [r3, #19]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d103      	bne.n	800200a <StartTaskModbusSlave+0x8e>
    {
        modH->u8AddressMode = ADDRESS_BROADCAST;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
    }

   // check slave id
    if ( modH->u8Buffer[ID] !=  modH->u8id && modH->u8AddressMode != ADDRESS_BROADCAST)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	7cda      	ldrb	r2, [r3, #19]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	7a1b      	ldrb	r3, [r3, #8]
 8002012:	429a      	cmp	r2, r3
 8002014:	d005      	beq.n	8002022 <StartTaskModbusSlave+0xa6>
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 800201c:	2b00      	cmp	r3, #0
 800201e:	f040 8099 	bne.w	8002154 <StartTaskModbusSlave+0x1d8>
    	}
#endif
	 }

	  // validate message: CRC, FCT, address and size
    uint8_t u8exception = validateRequest(modH);
 8002022:	68f8      	ldr	r0, [r7, #12]
 8002024:	f000 fc9c 	bl	8002960 <validateRequest>
 8002028:	4603      	mov	r3, r0
 800202a:	72fb      	strb	r3, [r7, #11]
	if (u8exception > 0)
 800202c:	7afb      	ldrb	r3, [r7, #11]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d00e      	beq.n	8002050 <StartTaskModbusSlave+0xd4>
	{
	    if (u8exception != ERR_TIME_OUT)
 8002032:	7afb      	ldrb	r3, [r7, #11]
 8002034:	2b11      	cmp	r3, #17
 8002036:	d007      	beq.n	8002048 <StartTaskModbusSlave+0xcc>
		{
		    buildException( u8exception, modH);
 8002038:	7afb      	ldrb	r3, [r7, #11]
 800203a:	68f9      	ldr	r1, [r7, #12]
 800203c:	4618      	mov	r0, r3
 800203e:	f000 fe32 	bl	8002ca6 <buildException>
			sendTxBuffer(modH);
 8002042:	68f8      	ldr	r0, [r7, #12]
 8002044:	f000 fe4e 	bl	8002ce4 <sendTxBuffer>
		}
		modH->i8lastError = u8exception;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	7afa      	ldrb	r2, [r7, #11]
 800204c:	749a      	strb	r2, [r3, #18]
		//return u8exception

		continue;
 800204e:	e082      	b.n	8002156 <StartTaskModbusSlave+0x1da>
	 }

	 modH->i8lastError = 0;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2200      	movs	r2, #0
 8002054:	749a      	strb	r2, [r3, #18]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800205c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002060:	4618      	mov	r0, r3
 8002062:	f011 fb81 	bl	8013768 <xQueueSemaphoreTake>

	 // process message
	 switch(modH->u8Buffer[ FUNC ] )
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	7d1b      	ldrb	r3, [r3, #20]
 800206a:	3b01      	subs	r3, #1
 800206c:	2b0f      	cmp	r3, #15
 800206e:	d863      	bhi.n	8002138 <StartTaskModbusSlave+0x1bc>
 8002070:	a201      	add	r2, pc, #4	@ (adr r2, 8002078 <StartTaskModbusSlave+0xfc>)
 8002072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002076:	bf00      	nop
 8002078:	080020b9 	.word	0x080020b9
 800207c:	080020b9 	.word	0x080020b9
 8002080:	080020d5 	.word	0x080020d5
 8002084:	080020d5 	.word	0x080020d5
 8002088:	080020f1 	.word	0x080020f1
 800208c:	08002103 	.word	0x08002103
 8002090:	08002139 	.word	0x08002139
 8002094:	08002139 	.word	0x08002139
 8002098:	08002139 	.word	0x08002139
 800209c:	08002139 	.word	0x08002139
 80020a0:	08002139 	.word	0x08002139
 80020a4:	08002139 	.word	0x08002139
 80020a8:	08002139 	.word	0x08002139
 80020ac:	08002139 	.word	0x08002139
 80020b0:	08002115 	.word	0x08002115
 80020b4:	08002127 	.word	0x08002127
	 {
		case MB_FC_READ_COILS:
		case MB_FC_READ_DISCRETE_INPUT:
			if (modH->u8AddressMode == ADDRESS_BROADCAST)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d03c      	beq.n	800213c <StartTaskModbusSlave+0x1c0>
			{
				/* broadcast mode should ignore read function */
				break;
			}
			modH->i8state = process_FC1(modH);
 80020c2:	68f8      	ldr	r0, [r7, #12]
 80020c4:	f000 feb2 	bl	8002e2c <process_FC1>
 80020c8:	4603      	mov	r3, r0
 80020ca:	461a      	mov	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7
			break;
 80020d2:	e036      	b.n	8002142 <StartTaskModbusSlave+0x1c6>
		case MB_FC_READ_INPUT_REGISTER:
		case MB_FC_READ_REGISTERS :
			if (modH->u8AddressMode == ADDRESS_BROADCAST)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d030      	beq.n	8002140 <StartTaskModbusSlave+0x1c4>
			{
				/* broadcast mode should ignore read function */
				break;
			}
			modH->i8state = process_FC3(modH);
 80020de:	68f8      	ldr	r0, [r7, #12]
 80020e0:	f000 ff59 	bl	8002f96 <process_FC3>
 80020e4:	4603      	mov	r3, r0
 80020e6:	461a      	mov	r2, r3
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7
			break;
 80020ee:	e028      	b.n	8002142 <StartTaskModbusSlave+0x1c6>
		case MB_FC_WRITE_COIL:
			modH->i8state = process_FC5(modH);
 80020f0:	68f8      	ldr	r0, [r7, #12]
 80020f2:	f000 ffbb 	bl	800306c <process_FC5>
 80020f6:	4603      	mov	r3, r0
 80020f8:	461a      	mov	r2, r3
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7
			break;
 8002100:	e01f      	b.n	8002142 <StartTaskModbusSlave+0x1c6>
		case MB_FC_WRITE_REGISTER :
			modH->i8state = process_FC6(modH);
 8002102:	68f8      	ldr	r0, [r7, #12]
 8002104:	f001 f80b 	bl	800311e <process_FC6>
 8002108:	4603      	mov	r3, r0
 800210a:	461a      	mov	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7
			break;
 8002112:	e016      	b.n	8002142 <StartTaskModbusSlave+0x1c6>
		case MB_FC_WRITE_MULTIPLE_COILS:
			modH->i8state = process_FC15(modH);
 8002114:	68f8      	ldr	r0, [r7, #12]
 8002116:	f001 f834 	bl	8003182 <process_FC15>
 800211a:	4603      	mov	r3, r0
 800211c:	461a      	mov	r2, r3
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7
			break;
 8002124:	e00d      	b.n	8002142 <StartTaskModbusSlave+0x1c6>
		case MB_FC_WRITE_MULTIPLE_REGISTERS :
			modH->i8state = process_FC16(modH);
 8002126:	68f8      	ldr	r0, [r7, #12]
 8002128:	f001 f8b9 	bl	800329e <process_FC16>
 800212c:	4603      	mov	r3, r0
 800212e:	461a      	mov	r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7
			break;
 8002136:	e004      	b.n	8002142 <StartTaskModbusSlave+0x1c6>
		default:
			break;
 8002138:	bf00      	nop
 800213a:	e002      	b.n	8002142 <StartTaskModbusSlave+0x1c6>
				break;
 800213c:	bf00      	nop
 800213e:	e000      	b.n	8002142 <StartTaskModbusSlave+0x1c6>
				break;
 8002140:	bf00      	nop
	 }


	 xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f8d3 00bc 	ldr.w	r0, [r3, #188]	@ 0xbc
 8002148:	2300      	movs	r3, #0
 800214a:	2200      	movs	r2, #0
 800214c:	2100      	movs	r1, #0
 800214e:	f010 fff9 	bl	8013144 <xQueueGenericSend>

	 continue;
 8002152:	e000      	b.n	8002156 <StartTaskModbusSlave+0x1da>
    	continue; // continue this is not for us
 8002154:	bf00      	nop
  {
 8002156:	e717      	b.n	8001f88 <StartTaskModbusSlave+0xc>

08002158 <ModbusQuery>:
}



void ModbusQuery(modbusHandler_t * modH, modbus_t telegram )
{
 8002158:	b084      	sub	sp, #16
 800215a:	b580      	push	{r7, lr}
 800215c:	b084      	sub	sp, #16
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
 8002162:	f107 001c 	add.w	r0, r7, #28
 8002166:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	//Add the telegram to the TX tail Queue of Modbus
	if (modH->uModbusType == MB_MASTER)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	2b04      	cmp	r3, #4
 8002170:	d12b      	bne.n	80021ca <ModbusQuery+0x72>
	{
	telegram.u32CurrentTask = (uint32_t *) osThreadGetId();
 8002172:	f010 f8f4 	bl	801235e <osThreadGetId>
 8002176:	4603      	mov	r3, r0
 8002178:	62bb      	str	r3, [r7, #40]	@ 0x28
	// 检查是否在中断中运行
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800217a:	2300      	movs	r3, #0
 800217c:	60fb      	str	r3, [r7, #12]
	if (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) {
 800217e:	4b17      	ldr	r3, [pc, #92]	@ (80021dc <ModbusQuery+0x84>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002186:	2b00      	cmp	r3, #0
 8002188:	d015      	beq.n	80021b6 <ModbusQuery+0x5e>
		// 在中断中，使用FromISR版本
		xQueueSendToBackFromISR(modH->QueueTelegramHandle, &telegram, &xHigherPriorityTaskWoken);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f8d3 00ac 	ldr.w	r0, [r3, #172]	@ 0xac
 8002190:	f107 020c 	add.w	r2, r7, #12
 8002194:	f107 011c 	add.w	r1, r7, #28
 8002198:	2300      	movs	r3, #0
 800219a:	f011 f8d5 	bl	8013348 <xQueueGenericSendFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d013      	beq.n	80021cc <ModbusQuery+0x74>
 80021a4:	4b0e      	ldr	r3, [pc, #56]	@ (80021e0 <ModbusQuery+0x88>)
 80021a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80021aa:	601a      	str	r2, [r3, #0]
 80021ac:	f3bf 8f4f 	dsb	sy
 80021b0:	f3bf 8f6f 	isb	sy
	}
	else{
//		LED_Toggle("red");
		while(1);// error a slave cannot send queries as a master
	}
}
 80021b4:	e00a      	b.n	80021cc <ModbusQuery+0x74>
		xQueueSendToBack(modH->QueueTelegramHandle, &telegram, 0);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f8d3 00ac 	ldr.w	r0, [r3, #172]	@ 0xac
 80021bc:	f107 011c 	add.w	r1, r7, #28
 80021c0:	2300      	movs	r3, #0
 80021c2:	2200      	movs	r2, #0
 80021c4:	f010 ffbe 	bl	8013144 <xQueueGenericSend>
}
 80021c8:	e000      	b.n	80021cc <ModbusQuery+0x74>
		while(1);// error a slave cannot send queries as a master
 80021ca:	e7fe      	b.n	80021ca <ModbusQuery+0x72>
}
 80021cc:	bf00      	nop
 80021ce:	3710      	adds	r7, #16
 80021d0:	46bd      	mov	sp, r7
 80021d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80021d6:	b004      	add	sp, #16
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	e000ed00 	.word	0xe000ed00
 80021e0:	e000ed04 	.word	0xe000ed04

080021e4 <ModbusQueryV2>:

uint32_t ModbusQueryV2(modbusHandler_t * modH, modbus_t telegram )
{
 80021e4:	b084      	sub	sp, #16
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b082      	sub	sp, #8
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
 80021ee:	f107 0014 	add.w	r0, r7, #20
 80021f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	//Add the telegram to the TX tail Queue of Modbus
	if (modH->uModbusType == MB_MASTER)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	2b04      	cmp	r3, #4
 80021fc:	d113      	bne.n	8002226 <ModbusQueryV2+0x42>
	{
	telegram.u32CurrentTask = (uint32_t *) osThreadGetId();
 80021fe:	f010 f8ae 	bl	801235e <osThreadGetId>
 8002202:	4603      	mov	r3, r0
 8002204:	623b      	str	r3, [r7, #32]
	xQueueSendToBack(modH->QueueTelegramHandle, &telegram, 0);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f8d3 00ac 	ldr.w	r0, [r3, #172]	@ 0xac
 800220c:	f107 0114 	add.w	r1, r7, #20
 8002210:	2300      	movs	r3, #0
 8002212:	2200      	movs	r2, #0
 8002214:	f010 ff96 	bl	8013144 <xQueueGenericSend>

	return ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8002218:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800221c:	2001      	movs	r0, #1
 800221e:	f012 fecb 	bl	8014fb8 <ulTaskNotifyTake>
 8002222:	4603      	mov	r3, r0
 8002224:	e000      	b.n	8002228 <ModbusQueryV2+0x44>

	}
	else{
//		LED_Toggle("red");
		while(1);// error a slave cannot send queries as a master
 8002226:	e7fe      	b.n	8002226 <ModbusQueryV2+0x42>
	}
}
 8002228:	4618      	mov	r0, r3
 800222a:	3708      	adds	r7, #8
 800222c:	46bd      	mov	sp, r7
 800222e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002232:	b004      	add	sp, #16
 8002234:	4770      	bx	lr
	...

08002238 <SendQuery>:
 * @param modH  modbus handler
 * @param modbus_t  modbus telegram structure (id, fct, ...)
 * @ingroup loop
 */
int8_t SendQuery(modbusHandler_t *modH ,  modbus_t telegram )
{
 8002238:	b084      	sub	sp, #16
 800223a:	b580      	push	{r7, lr}
 800223c:	b084      	sub	sp, #16
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
 8002242:	f107 001c 	add.w	r0, r7, #28
 8002246:	e880 000e 	stmia.w	r0, {r1, r2, r3}


	uint8_t u8regsno, u8bytesno;
	uint8_t  error = 0;
 800224a:	2300      	movs	r3, #0
 800224c:	73bb      	strb	r3, [r7, #14]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8002254:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002258:	4618      	mov	r0, r3
 800225a:	f011 fa85 	bl	8013768 <xQueueSemaphoreTake>

	if (modH->u8id!=0) error = ERR_NOT_MASTER;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	7a1b      	ldrb	r3, [r3, #8]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <SendQuery+0x32>
 8002266:	230a      	movs	r3, #10
 8002268:	73bb      	strb	r3, [r7, #14]
	if (modH->i8state != COM_IDLE) error = ERR_POLLING ;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f993 30a7 	ldrsb.w	r3, [r3, #167]	@ 0xa7
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <SendQuery+0x40>
 8002274:	230b      	movs	r3, #11
 8002276:	73bb      	strb	r3, [r7, #14]
	if ((telegram.u8id==0) || (telegram.u8id>247)) error = ERR_BAD_SLAVE_ID;
 8002278:	7f3b      	ldrb	r3, [r7, #28]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d002      	beq.n	8002284 <SendQuery+0x4c>
 800227e:	7f3b      	ldrb	r3, [r7, #28]
 8002280:	2bf7      	cmp	r3, #247	@ 0xf7
 8002282:	d901      	bls.n	8002288 <SendQuery+0x50>
 8002284:	2312      	movs	r3, #18
 8002286:	73bb      	strb	r3, [r7, #14]


	if(error)
 8002288:	7bbb      	ldrb	r3, [r7, #14]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00d      	beq.n	80022aa <SendQuery+0x72>
	{
		 modH->i8lastError = error;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	7bba      	ldrb	r2, [r7, #14]
 8002292:	749a      	strb	r2, [r3, #18]
		 xSemaphoreGive(modH->ModBusSphrHandle);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f8d3 00bc 	ldr.w	r0, [r3, #188]	@ 0xbc
 800229a:	2300      	movs	r3, #0
 800229c:	2200      	movs	r2, #0
 800229e:	2100      	movs	r1, #0
 80022a0:	f010 ff50 	bl	8013144 <xQueueGenericSend>
		 return error;
 80022a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80022a8:	e12a      	b.n	8002500 <SendQuery+0x2c8>
	}


	modH->u16regs = telegram.u16reg;
 80022aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

	// telegram header
	modH->u8Buffer[ ID ]         = telegram.u8id;
 80022b2:	7f3a      	ldrb	r2, [r7, #28]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	74da      	strb	r2, [r3, #19]
	modH->u8Buffer[ FUNC ]       = telegram.u8fct;
 80022b8:	7f7a      	ldrb	r2, [r7, #29]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	751a      	strb	r2, [r3, #20]
	modH->u8Buffer[ ADD_HI ]     = highByte(telegram.u16RegAdd );
 80022be:	8bfb      	ldrh	r3, [r7, #30]
 80022c0:	0a1b      	lsrs	r3, r3, #8
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	b2da      	uxtb	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	755a      	strb	r2, [r3, #21]
	modH->u8Buffer[ ADD_LO ]     = lowByte( telegram.u16RegAdd );
 80022ca:	8bfb      	ldrh	r3, [r7, #30]
 80022cc:	b2da      	uxtb	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	759a      	strb	r2, [r3, #22]

	switch( telegram.u8fct )
 80022d2:	7f7b      	ldrb	r3, [r7, #29]
 80022d4:	3b01      	subs	r3, #1
 80022d6:	2b0f      	cmp	r3, #15
 80022d8:	f200 80ff 	bhi.w	80024da <SendQuery+0x2a2>
 80022dc:	a201      	add	r2, pc, #4	@ (adr r2, 80022e4 <SendQuery+0xac>)
 80022de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022e2:	bf00      	nop
 80022e4:	08002325 	.word	0x08002325
 80022e8:	08002325 	.word	0x08002325
 80022ec:	08002325 	.word	0x08002325
 80022f0:	08002325 	.word	0x08002325
 80022f4:	08002343 	.word	0x08002343
 80022f8:	08002365 	.word	0x08002365
 80022fc:	080024db 	.word	0x080024db
 8002300:	080024db 	.word	0x080024db
 8002304:	080024db 	.word	0x080024db
 8002308:	080024db 	.word	0x080024db
 800230c:	080024db 	.word	0x080024db
 8002310:	080024db 	.word	0x080024db
 8002314:	080024db 	.word	0x080024db
 8002318:	080024db 	.word	0x080024db
 800231c:	08002387 	.word	0x08002387
 8002320:	08002445 	.word	0x08002445
	{
	case MB_FC_READ_COILS:
	case MB_FC_READ_DISCRETE_INPUT:
	case MB_FC_READ_REGISTERS:
	case MB_FC_READ_INPUT_REGISTER:
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 8002324:	8c3b      	ldrh	r3, [r7, #32]
 8002326:	0a1b      	lsrs	r3, r3, #8
 8002328:	b29b      	uxth	r3, r3
 800232a:	b2da      	uxtb	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 8002330:	8c3b      	ldrh	r3, [r7, #32]
 8002332:	b2da      	uxtb	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2206      	movs	r2, #6
 800233c:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
	    break;
 8002340:	e0cb      	b.n	80024da <SendQuery+0x2a2>
	case MB_FC_WRITE_COIL:
	    modH->u8Buffer[ NB_HI ]      = (( telegram.u16reg[0]> 0) ? 0xff : 0);
 8002342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002344:	881b      	ldrh	r3, [r3, #0]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <SendQuery+0x116>
 800234a:	22ff      	movs	r2, #255	@ 0xff
 800234c:	e000      	b.n	8002350 <SendQuery+0x118>
 800234e:	2200      	movs	r2, #0
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = 0;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2206      	movs	r2, #6
 800235e:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
	    break;
 8002362:	e0ba      	b.n	80024da <SendQuery+0x2a2>
	case MB_FC_WRITE_REGISTER:
	    modH->u8Buffer[ NB_HI ]      = highByte( telegram.u16reg[0]);
 8002364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002366:	881b      	ldrh	r3, [r3, #0]
 8002368:	0a1b      	lsrs	r3, r3, #8
 800236a:	b29b      	uxth	r3, r3
 800236c:	b2da      	uxtb	r2, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16reg[0]);
 8002372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002374:	881b      	ldrh	r3, [r3, #0]
 8002376:	b2da      	uxtb	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2206      	movs	r2, #6
 8002380:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
	    break;
 8002384:	e0a9      	b.n	80024da <SendQuery+0x2a2>
	case MB_FC_WRITE_MULTIPLE_COILS: // TODO: implement "sending coils"
	    u8regsno = telegram.u16CoilsNo / 16;
 8002386:	8c3b      	ldrh	r3, [r7, #32]
 8002388:	091b      	lsrs	r3, r3, #4
 800238a:	b29b      	uxth	r3, r3
 800238c:	727b      	strb	r3, [r7, #9]
	    u8bytesno = u8regsno * 2;
 800238e:	7a7b      	ldrb	r3, [r7, #9]
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	73fb      	strb	r3, [r7, #15]
	    if ((telegram.u16CoilsNo % 16) != 0)
 8002394:	8c3b      	ldrh	r3, [r7, #32]
 8002396:	f003 030f 	and.w	r3, r3, #15
 800239a:	b29b      	uxth	r3, r3
 800239c:	2b00      	cmp	r3, #0
 800239e:	d005      	beq.n	80023ac <SendQuery+0x174>
	    {
	        u8bytesno++;
 80023a0:	7bfb      	ldrb	r3, [r7, #15]
 80023a2:	3301      	adds	r3, #1
 80023a4:	73fb      	strb	r3, [r7, #15]
	        u8regsno++;
 80023a6:	7a7b      	ldrb	r3, [r7, #9]
 80023a8:	3301      	adds	r3, #1
 80023aa:	727b      	strb	r3, [r7, #9]
	    }

	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 80023ac:	8c3b      	ldrh	r3, [r7, #32]
 80023ae:	0a1b      	lsrs	r3, r3, #8
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	b2da      	uxtb	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 80023b8:	8c3b      	ldrh	r3, [r7, #32]
 80023ba:	b2da      	uxtb	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	761a      	strb	r2, [r3, #24]
	    modH->u8Buffer[ BYTE_CNT ]    = u8bytesno;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	7bfa      	ldrb	r2, [r7, #15]
 80023c4:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2207      	movs	r2, #7
 80023ca:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93

	    for (uint16_t i = 0; i < u8bytesno; i++)
 80023ce:	2300      	movs	r3, #0
 80023d0:	81bb      	strh	r3, [r7, #12]
 80023d2:	e031      	b.n	8002438 <SendQuery+0x200>
	    {
	        if(i%2)
 80023d4:	89bb      	ldrh	r3, [r7, #12]
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	b29b      	uxth	r3, r3
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d00f      	beq.n	8002400 <SendQuery+0x1c8>
	        {
	        	modH->u8Buffer[ modH->u8BufferSize ] = lowByte( telegram.u16reg[ i/2 ] );
 80023e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023e2:	89bb      	ldrh	r3, [r7, #12]
 80023e4:	085b      	lsrs	r3, r3, #1
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	4413      	add	r3, r2
 80023ec:	881a      	ldrh	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 80023f4:	4619      	mov	r1, r3
 80023f6:	b2d2      	uxtb	r2, r2
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	440b      	add	r3, r1
 80023fc:	74da      	strb	r2, [r3, #19]
 80023fe:	e010      	b.n	8002422 <SendQuery+0x1ea>
	        }
	        else
	        {
	        	modH->u8Buffer[  modH->u8BufferSize ] = highByte( telegram.u16reg[ i/2 ] );
 8002400:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002402:	89bb      	ldrh	r3, [r7, #12]
 8002404:	085b      	lsrs	r3, r3, #1
 8002406:	b29b      	uxth	r3, r3
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	4413      	add	r3, r2
 800240c:	881b      	ldrh	r3, [r3, #0]
 800240e:	0a1b      	lsrs	r3, r3, #8
 8002410:	b29a      	uxth	r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002418:	4619      	mov	r1, r3
 800241a:	b2d2      	uxtb	r2, r2
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	440b      	add	r3, r1
 8002420:	74da      	strb	r2, [r3, #19]

	        }
	        modH->u8BufferSize++;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002428:	3301      	adds	r3, #1
 800242a:	b2da      	uxtb	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
	    for (uint16_t i = 0; i < u8bytesno; i++)
 8002432:	89bb      	ldrh	r3, [r7, #12]
 8002434:	3301      	adds	r3, #1
 8002436:	81bb      	strh	r3, [r7, #12]
 8002438:	7bfb      	ldrb	r3, [r7, #15]
 800243a:	b29b      	uxth	r3, r3
 800243c:	89ba      	ldrh	r2, [r7, #12]
 800243e:	429a      	cmp	r2, r3
 8002440:	d3c8      	bcc.n	80023d4 <SendQuery+0x19c>
	    }
	    break;
 8002442:	e04a      	b.n	80024da <SendQuery+0x2a2>

	case MB_FC_WRITE_MULTIPLE_REGISTERS:
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 8002444:	8c3b      	ldrh	r3, [r7, #32]
 8002446:	0a1b      	lsrs	r3, r3, #8
 8002448:	b29b      	uxth	r3, r3
 800244a:	b2da      	uxtb	r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 8002450:	8c3b      	ldrh	r3, [r7, #32]
 8002452:	b2da      	uxtb	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	761a      	strb	r2, [r3, #24]
	    modH->u8Buffer[ BYTE_CNT ]    = (uint8_t) ( telegram.u16CoilsNo * 2 );
 8002458:	8c3b      	ldrh	r3, [r7, #32]
 800245a:	b2db      	uxtb	r3, r3
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	b2da      	uxtb	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2207      	movs	r2, #7
 8002468:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93

	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 800246c:	2300      	movs	r3, #0
 800246e:	817b      	strh	r3, [r7, #10]
 8002470:	e02e      	b.n	80024d0 <SendQuery+0x298>
	    {

	        modH->u8Buffer[  modH->u8BufferSize ] = highByte(  telegram.u16reg[ i ] );
 8002472:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002474:	897b      	ldrh	r3, [r7, #10]
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	4413      	add	r3, r2
 800247a:	881b      	ldrh	r3, [r3, #0]
 800247c:	0a1b      	lsrs	r3, r3, #8
 800247e:	b29a      	uxth	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002486:	4619      	mov	r1, r3
 8002488:	b2d2      	uxtb	r2, r2
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	440b      	add	r3, r1
 800248e:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002496:	3301      	adds	r3, #1
 8002498:	b2da      	uxtb	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
	        modH->u8Buffer[  modH->u8BufferSize ] = lowByte( telegram.u16reg[ i ] );
 80024a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024a2:	897b      	ldrh	r3, [r7, #10]
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	4413      	add	r3, r2
 80024a8:	881a      	ldrh	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 80024b0:	4619      	mov	r1, r3
 80024b2:	b2d2      	uxtb	r2, r2
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	440b      	add	r3, r1
 80024b8:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 80024c0:	3301      	adds	r3, #1
 80024c2:	b2da      	uxtb	r2, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 80024ca:	897b      	ldrh	r3, [r7, #10]
 80024cc:	3301      	adds	r3, #1
 80024ce:	817b      	strh	r3, [r7, #10]
 80024d0:	8c3b      	ldrh	r3, [r7, #32]
 80024d2:	897a      	ldrh	r2, [r7, #10]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d3cc      	bcc.n	8002472 <SendQuery+0x23a>
	    }
	    break;
 80024d8:	bf00      	nop
	}


	sendTxBuffer(modH);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f000 fc02 	bl	8002ce4 <sendTxBuffer>

	xSemaphoreGive(modH->ModBusSphrHandle);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f8d3 00bc 	ldr.w	r0, [r3, #188]	@ 0xbc
 80024e6:	2300      	movs	r3, #0
 80024e8:	2200      	movs	r2, #0
 80024ea:	2100      	movs	r1, #0
 80024ec:	f010 fe2a 	bl	8013144 <xQueueGenericSend>

	modH->i8state = COM_WAITING;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7
	modH->i8lastError = 0;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	749a      	strb	r2, [r3, #18]
	return 0;
 80024fe:	2300      	movs	r3, #0


}
 8002500:	4618      	mov	r0, r3
 8002502:	3710      	adds	r7, #16
 8002504:	46bd      	mov	sp, r7
 8002506:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800250a:	b004      	add	sp, #16
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop

08002510 <StartTaskModbusMaster>:
}

#endif

void StartTaskModbusMaster(void *argument)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b08c      	sub	sp, #48	@ 0x30
 8002514:	af02      	add	r7, sp, #8
 8002516:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	627b      	str	r3, [r7, #36]	@ 0x24


  for(;;)
  {
	  /*Wait indefinitely for a telegram to send */
	  xQueueReceive(modH->QueueTelegramHandle, &telegram, portMAX_DELAY);
 800251c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800251e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002522:	f107 010c 	add.w	r1, r7, #12
 8002526:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800252a:	4618      	mov	r0, r3
 800252c:	f011 f83a 	bl	80135a4 <xQueueReceive>
       /* Block until a Modbus Frame arrives or query timeouts*/
   	   ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
     }
#else
     /*Wait period of silence between modbus frame */
	 if(modH->port->Init.BaudRate <= 19200)
 8002530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f5b3 4f96 	cmp.w	r3, #19200	@ 0x4b00
 800253a:	d80b      	bhi.n	8002554 <StartTaskModbusMaster+0x44>
	 	osDelay((int)(35000/modH->port->Init.BaudRate) + 2);
 800253c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f648 02b8 	movw	r2, #35000	@ 0x88b8
 8002546:	fbb2 f3f3 	udiv	r3, r2, r3
 800254a:	3302      	adds	r3, #2
 800254c:	4618      	mov	r0, r3
 800254e:	f00f ff11 	bl	8012374 <osDelay>
 8002552:	e002      	b.n	800255a <StartTaskModbusMaster+0x4a>
	 else
	 	osDelay(3);
 8002554:	2003      	movs	r0, #3
 8002556:	f00f ff0d 	bl	8012374 <osDelay>

     // This is the case for implementations with only USART support
     SendQuery(modH, telegram);
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	9300      	str	r3, [sp, #0]
 800255e:	f107 030c 	add.w	r3, r7, #12
 8002562:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002564:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002566:	f7ff fe67 	bl	8002238 <SendQuery>
     /* Block indefinitely until a Modbus Frame arrives or query timeouts*/
     ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800256a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800256e:	2001      	movs	r0, #1
 8002570:	f012 fd22 	bl	8014fb8 <ulTaskNotifyTake>
 8002574:	6238      	str	r0, [r7, #32]

#endif

	  // notify the task the request timeout
      modH->i8lastError = 0;
 8002576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002578:	2200      	movs	r2, #0
 800257a:	749a      	strb	r2, [r3, #18]
      if(ulNotificationValue)
 800257c:	6a3b      	ldr	r3, [r7, #32]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d017      	beq.n	80025b2 <StartTaskModbusMaster+0xa2>
      {
    	  modH->i8state = COM_IDLE;
 8002582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002584:	2200      	movs	r2, #0
 8002586:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7
    	  modH->i8lastError = ERR_TIME_OUT;
 800258a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800258c:	2211      	movs	r2, #17
 800258e:	749a      	strb	r2, [r3, #18]
    	  modH->u16errCnt++;
 8002590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002592:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8002596:	3301      	adds	r3, #1
 8002598:	b29a      	uxth	r2, r3
 800259a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800259c:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
    	  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 80025a0:	69b8      	ldr	r0, [r7, #24]
 80025a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a4:	7c9b      	ldrb	r3, [r3, #18]
 80025a6:	4619      	mov	r1, r3
 80025a8:	2300      	movs	r3, #0
 80025aa:	2203      	movs	r2, #3
 80025ac:	f012 fd50 	bl	8015050 <xTaskGenericNotify>
    	  continue;
 80025b0:	e096      	b.n	80026e0 <StartTaskModbusMaster+0x1d0>
      {
    	  getRxBuffer(modH);
      }

#else
      getRxBuffer(modH);
 80025b2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80025b4:	f000 f98c 	bl	80028d0 <getRxBuffer>
#endif



	  if ( modH->u8BufferSize < 6){
 80025b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ba:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 80025be:	2b05      	cmp	r3, #5
 80025c0:	d817      	bhi.n	80025f2 <StartTaskModbusMaster+0xe2>

		  modH->i8state = COM_IDLE;
 80025c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7
		  modH->i8lastError = ERR_BAD_SIZE;
 80025ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025cc:	220f      	movs	r2, #15
 80025ce:	749a      	strb	r2, [r3, #18]
		  modH->u16errCnt++;
 80025d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d2:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 80025d6:	3301      	adds	r3, #1
 80025d8:	b29a      	uxth	r2, r3
 80025da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025dc:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 80025e0:	69b8      	ldr	r0, [r7, #24]
 80025e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e4:	7c9b      	ldrb	r3, [r3, #18]
 80025e6:	4619      	mov	r1, r3
 80025e8:	2300      	movs	r3, #0
 80025ea:	2203      	movs	r2, #3
 80025ec:	f012 fd30 	bl	8015050 <xTaskGenericNotify>
		  continue;
 80025f0:	e076      	b.n	80026e0 <StartTaskModbusMaster+0x1d0>
	  }

	  xTimerStop(modH->xTimerTimeout,0); // cancel timeout timer
 80025f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f4:	f8d3 00b8 	ldr.w	r0, [r3, #184]	@ 0xb8
 80025f8:	2300      	movs	r3, #0
 80025fa:	9300      	str	r3, [sp, #0]
 80025fc:	2300      	movs	r3, #0
 80025fe:	2200      	movs	r2, #0
 8002600:	2103      	movs	r1, #3
 8002602:	f012 ffc9 	bl	8015598 <xTimerGenericCommand>


	  // validate message: id, CRC, FCT, exception
	  int8_t u8exception = validateAnswer(modH);
 8002606:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002608:	f000 f8f2 	bl	80027f0 <validateAnswer>
 800260c:	4603      	mov	r3, r0
 800260e:	77fb      	strb	r3, [r7, #31]
	  if (u8exception != 0)
 8002610:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d00f      	beq.n	8002638 <StartTaskModbusMaster+0x128>
	  {
		 modH->i8state = COM_IDLE;
 8002618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800261a:	2200      	movs	r2, #0
 800261c:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7
         modH->i8lastError = u8exception;
 8002620:	7ffa      	ldrb	r2, [r7, #31]
 8002622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002624:	749a      	strb	r2, [r3, #18]
		 xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 8002626:	69b8      	ldr	r0, [r7, #24]
 8002628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800262a:	7c9b      	ldrb	r3, [r3, #18]
 800262c:	4619      	mov	r1, r3
 800262e:	2300      	movs	r3, #0
 8002630:	2203      	movs	r2, #3
 8002632:	f012 fd0d 	bl	8015050 <xTaskGenericNotify>
	     continue;
 8002636:	e053      	b.n	80026e0 <StartTaskModbusMaster+0x1d0>
	  }

	  modH->i8lastError = u8exception;
 8002638:	7ffa      	ldrb	r2, [r7, #31]
 800263a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800263c:	749a      	strb	r2, [r3, #18]

	  xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 800263e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002640:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8002644:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002648:	4618      	mov	r0, r3
 800264a:	f011 f88d 	bl	8013768 <xQueueSemaphoreTake>
	  // process answer
	  switch( modH->u8Buffer[ FUNC ] )
 800264e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002650:	7d1b      	ldrb	r3, [r3, #20]
 8002652:	3b01      	subs	r3, #1
 8002654:	2b0f      	cmp	r3, #15
 8002656:	d82b      	bhi.n	80026b0 <StartTaskModbusMaster+0x1a0>
 8002658:	a201      	add	r2, pc, #4	@ (adr r2, 8002660 <StartTaskModbusMaster+0x150>)
 800265a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800265e:	bf00      	nop
 8002660:	080026a1 	.word	0x080026a1
 8002664:	080026a1 	.word	0x080026a1
 8002668:	080026a9 	.word	0x080026a9
 800266c:	080026a9 	.word	0x080026a9
 8002670:	080026b1 	.word	0x080026b1
 8002674:	080026b1 	.word	0x080026b1
 8002678:	080026b1 	.word	0x080026b1
 800267c:	080026b1 	.word	0x080026b1
 8002680:	080026b1 	.word	0x080026b1
 8002684:	080026b1 	.word	0x080026b1
 8002688:	080026b1 	.word	0x080026b1
 800268c:	080026b1 	.word	0x080026b1
 8002690:	080026b1 	.word	0x080026b1
 8002694:	080026b1 	.word	0x080026b1
 8002698:	080026b1 	.word	0x080026b1
 800269c:	080026b1 	.word	0x080026b1
	  {
	  case MB_FC_READ_COILS:
	  case MB_FC_READ_DISCRETE_INPUT:
	      //call get_FC1 to transfer the incoming message to u16regs buffer
	      get_FC1(modH);
 80026a0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80026a2:	f000 f81f 	bl	80026e4 <get_FC1>
	      break;
 80026a6:	e004      	b.n	80026b2 <StartTaskModbusMaster+0x1a2>
	  case MB_FC_READ_INPUT_REGISTER:
	  case MB_FC_READ_REGISTERS :
	      // call get_FC3 to transfer the incoming message to u16regs buffer
	      get_FC3(modH);
 80026a8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80026aa:	f000 f872 	bl	8002792 <get_FC3>
	      break;
 80026ae:	e000      	b.n	80026b2 <StartTaskModbusMaster+0x1a2>
	  case MB_FC_WRITE_MULTIPLE_COILS:
	  case MB_FC_WRITE_MULTIPLE_REGISTERS :
	      // nothing to do
	      break;
	  default:
	      break;
 80026b0:	bf00      	nop
	  }
	  modH->i8state = COM_IDLE;
 80026b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7

	  if (modH->i8lastError ==0) // no error, we use OP_OK_QUERY, since we need to use a different value than 0 to detect the timeout
 80026ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026bc:	7c9b      	ldrb	r3, [r3, #18]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d10d      	bne.n	80026de <StartTaskModbusMaster+0x1ce>
	  {
		  xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 80026c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c4:	f8d3 00bc 	ldr.w	r0, [r3, #188]	@ 0xbc
 80026c8:	2300      	movs	r3, #0
 80026ca:	2200      	movs	r2, #0
 80026cc:	2100      	movs	r1, #0
 80026ce:	f010 fd39 	bl	8013144 <xQueueGenericSend>
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, OP_OK_QUERY, eSetValueWithOverwrite);
 80026d2:	69b8      	ldr	r0, [r7, #24]
 80026d4:	2300      	movs	r3, #0
 80026d6:	2203      	movs	r2, #3
 80026d8:	2114      	movs	r1, #20
 80026da:	f012 fcb9 	bl	8015050 <xTaskGenericNotify>
	  }


	  continue;
 80026de:	bf00      	nop
  {
 80026e0:	e71c      	b.n	800251c <StartTaskModbusMaster+0xc>
 80026e2:	bf00      	nop

080026e4 <get_FC1>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC1(modbusHandler_t *modH)
{
 80026e4:	b590      	push	{r4, r7, lr}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 80026ec:	2303      	movs	r3, #3
 80026ee:	73bb      	strb	r3, [r7, #14]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 80026f0:	2300      	movs	r3, #0
 80026f2:	73fb      	strb	r3, [r7, #15]
 80026f4:	e043      	b.n	800277e <get_FC1+0x9a>

        if(i%2)
 80026f6:	7bfb      	ldrb	r3, [r7, #15]
 80026f8:	f003 0301 	and.w	r3, r3, #1
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d01c      	beq.n	800273c <get_FC1+0x58>
        {
        	modH->u16regs[i/2]= word(modH->u8Buffer[i+u8byte], lowByte(modH->u16regs[i/2]));
 8002702:	7bfa      	ldrb	r2, [r7, #15]
 8002704:	7bbb      	ldrb	r3, [r7, #14]
 8002706:	4413      	add	r3, r2
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	4413      	add	r3, r2
 800270c:	7cd8      	ldrb	r0, [r3, #19]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8002714:	7bfb      	ldrb	r3, [r7, #15]
 8002716:	085b      	lsrs	r3, r3, #1
 8002718:	b2db      	uxtb	r3, r3
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	4413      	add	r3, r2
 800271e:	881b      	ldrh	r3, [r3, #0]
 8002720:	b2d9      	uxtb	r1, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8002728:	7bfb      	ldrb	r3, [r7, #15]
 800272a:	085b      	lsrs	r3, r3, #1
 800272c:	b2db      	uxtb	r3, r3
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	18d4      	adds	r4, r2, r3
 8002732:	f000 fa5f 	bl	8002bf4 <word>
 8002736:	4603      	mov	r3, r0
 8002738:	8023      	strh	r3, [r4, #0]
 800273a:	e01d      	b.n	8002778 <get_FC1+0x94>
        }
        else
        {

        	modH->u16regs[i/2]= word(highByte(modH->u16regs[i/2]), modH->u8Buffer[i+u8byte]);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8002742:	7bfb      	ldrb	r3, [r7, #15]
 8002744:	085b      	lsrs	r3, r3, #1
 8002746:	b2db      	uxtb	r3, r3
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	4413      	add	r3, r2
 800274c:	881b      	ldrh	r3, [r3, #0]
 800274e:	0a1b      	lsrs	r3, r3, #8
 8002750:	b29b      	uxth	r3, r3
 8002752:	b2d8      	uxtb	r0, r3
 8002754:	7bfa      	ldrb	r2, [r7, #15]
 8002756:	7bbb      	ldrb	r3, [r7, #14]
 8002758:	4413      	add	r3, r2
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	4413      	add	r3, r2
 800275e:	7cd9      	ldrb	r1, [r3, #19]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8002766:	7bfb      	ldrb	r3, [r7, #15]
 8002768:	085b      	lsrs	r3, r3, #1
 800276a:	b2db      	uxtb	r3, r3
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	18d4      	adds	r4, r2, r3
 8002770:	f000 fa40 	bl	8002bf4 <word>
 8002774:	4603      	mov	r3, r0
 8002776:	8023      	strh	r3, [r4, #0]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 8002778:	7bfb      	ldrb	r3, [r7, #15]
 800277a:	3301      	adds	r3, #1
 800277c:	73fb      	strb	r3, [r7, #15]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	7d5b      	ldrb	r3, [r3, #21]
 8002782:	7bfa      	ldrb	r2, [r7, #15]
 8002784:	429a      	cmp	r2, r3
 8002786:	d3b6      	bcc.n	80026f6 <get_FC1+0x12>
        }

     }
}
 8002788:	bf00      	nop
 800278a:	bf00      	nop
 800278c:	3714      	adds	r7, #20
 800278e:	46bd      	mov	sp, r7
 8002790:	bd90      	pop	{r4, r7, pc}

08002792 <get_FC3>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC3(modbusHandler_t *modH)
{
 8002792:	b590      	push	{r4, r7, lr}
 8002794:	b085      	sub	sp, #20
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 800279a:	2303      	movs	r3, #3
 800279c:	73fb      	strb	r3, [r7, #15]

    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 800279e:	2300      	movs	r3, #0
 80027a0:	73bb      	strb	r3, [r7, #14]
 80027a2:	e018      	b.n	80027d6 <get_FC3+0x44>
    {
    	modH->u16regs[ i ] = word(modH->u8Buffer[ u8byte ], modH->u8Buffer[ u8byte +1 ]);
 80027a4:	7bfb      	ldrb	r3, [r7, #15]
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	4413      	add	r3, r2
 80027aa:	7cd8      	ldrb	r0, [r3, #19]
 80027ac:	7bfb      	ldrb	r3, [r7, #15]
 80027ae:	3301      	adds	r3, #1
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	4413      	add	r3, r2
 80027b4:	7cd9      	ldrb	r1, [r3, #19]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80027bc:	7bbb      	ldrb	r3, [r7, #14]
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	18d4      	adds	r4, r2, r3
 80027c2:	f000 fa17 	bl	8002bf4 <word>
 80027c6:	4603      	mov	r3, r0
 80027c8:	8023      	strh	r3, [r4, #0]
        u8byte += 2;
 80027ca:	7bfb      	ldrb	r3, [r7, #15]
 80027cc:	3302      	adds	r3, #2
 80027ce:	73fb      	strb	r3, [r7, #15]
    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 80027d0:	7bbb      	ldrb	r3, [r7, #14]
 80027d2:	3301      	adds	r3, #1
 80027d4:	73bb      	strb	r3, [r7, #14]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	7d5b      	ldrb	r3, [r3, #21]
 80027da:	085b      	lsrs	r3, r3, #1
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	7bba      	ldrb	r2, [r7, #14]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d3df      	bcc.n	80027a4 <get_FC3+0x12>
    }
}
 80027e4:	bf00      	nop
 80027e6:	bf00      	nop
 80027e8:	3714      	adds	r7, #20
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd90      	pop	{r4, r7, pc}
	...

080027f0 <validateAnswer>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup buffer
 */
uint8_t validateAnswer(modbusHandler_t *modH)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
#if ENABLE_TCP ==1
	if(modH->xTypeHW != TCP_HW)
	{
#endif
	uint16_t u16MsgCRC =
        ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 80027fe:	3b02      	subs	r3, #2
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	4413      	add	r3, r2
 8002804:	7cdb      	ldrb	r3, [r3, #19]
         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 8002806:	b21b      	sxth	r3, r3
 8002808:	021b      	lsls	r3, r3, #8
 800280a:	b21a      	sxth	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002812:	3b01      	subs	r3, #1
 8002814:	6879      	ldr	r1, [r7, #4]
 8002816:	440b      	add	r3, r1
 8002818:	7cdb      	ldrb	r3, [r3, #19]
 800281a:	b21b      	sxth	r3, r3
 800281c:	4313      	orrs	r3, r2
 800281e:	b21b      	sxth	r3, r3
	uint16_t u16MsgCRC =
 8002820:	81bb      	strh	r3, [r7, #12]
    if ( calcCRC(modH->u8Buffer,  modH->u8BufferSize-2) != u16MsgCRC )
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f103 0213 	add.w	r2, r3, #19
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 800282e:	3b02      	subs	r3, #2
 8002830:	b2db      	uxtb	r3, r3
 8002832:	4619      	mov	r1, r3
 8002834:	4610      	mov	r0, r2
 8002836:	f000 f9f0 	bl	8002c1a <calcCRC>
 800283a:	4603      	mov	r3, r0
 800283c:	461a      	mov	r2, r3
 800283e:	89bb      	ldrh	r3, [r7, #12]
 8002840:	4293      	cmp	r3, r2
 8002842:	d009      	beq.n	8002858 <validateAnswer+0x68>
    {
    	modH->u16errCnt ++;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 800284a:	3301      	adds	r3, #1
 800284c:	b29a      	uxth	r2, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
        return ERR_BAD_CRC;
 8002854:	230d      	movs	r3, #13
 8002856:	e034      	b.n	80028c2 <validateAnswer+0xd2>
	}
#endif


    // check exception
    if ((modH->u8Buffer[ FUNC ] & 0x80) != 0)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	7d1b      	ldrb	r3, [r3, #20]
 800285c:	b25b      	sxtb	r3, r3
 800285e:	2b00      	cmp	r3, #0
 8002860:	da09      	bge.n	8002876 <validateAnswer+0x86>
    {
    	modH->u16errCnt ++;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8002868:	3301      	adds	r3, #1
 800286a:	b29a      	uxth	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
        return ERR_EXCEPTION;
 8002872:	230e      	movs	r3, #14
 8002874:	e025      	b.n	80028c2 <validateAnswer+0xd2>
    }

    // check fct code
    bool isSupported = false;
 8002876:	2300      	movs	r3, #0
 8002878:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 800287a:	2300      	movs	r3, #0
 800287c:	73bb      	strb	r3, [r7, #14]
 800287e:	e00c      	b.n	800289a <validateAnswer+0xaa>
    {
        if (fctsupported[i] == modH->u8Buffer[FUNC])
 8002880:	7bbb      	ldrb	r3, [r7, #14]
 8002882:	4a12      	ldr	r2, [pc, #72]	@ (80028cc <validateAnswer+0xdc>)
 8002884:	5cd2      	ldrb	r2, [r2, r3]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	7d1b      	ldrb	r3, [r3, #20]
 800288a:	429a      	cmp	r2, r3
 800288c:	d102      	bne.n	8002894 <validateAnswer+0xa4>
        {
            isSupported = 1;
 800288e:	2301      	movs	r3, #1
 8002890:	73fb      	strb	r3, [r7, #15]
            break;
 8002892:	e005      	b.n	80028a0 <validateAnswer+0xb0>
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8002894:	7bbb      	ldrb	r3, [r7, #14]
 8002896:	3301      	adds	r3, #1
 8002898:	73bb      	strb	r3, [r7, #14]
 800289a:	7bbb      	ldrb	r3, [r7, #14]
 800289c:	2b07      	cmp	r3, #7
 800289e:	d9ef      	bls.n	8002880 <validateAnswer+0x90>
        }
    }
    if (!isSupported)
 80028a0:	7bfb      	ldrb	r3, [r7, #15]
 80028a2:	f083 0301 	eor.w	r3, r3, #1
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d009      	beq.n	80028c0 <validateAnswer+0xd0>
    {
    	modH->u16errCnt ++;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 80028b2:	3301      	adds	r3, #1
 80028b4:	b29a      	uxth	r2, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
        return EXC_FUNC_CODE;
 80028bc:	2301      	movs	r3, #1
 80028be:	e000      	b.n	80028c2 <validateAnswer+0xd2>
    }

    return 0; // OK, no exception code thrown
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	08017c80 	.word	0x08017c80

080028d0 <getRxBuffer>:
 *
 * @return buffer size if OK, ERR_BUFF_OVERFLOW if u8BufferSize >= MAX_BUFFER
 * @ingroup buffer
 */
int16_t getRxBuffer(modbusHandler_t *modH)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]

    int16_t i16result;

    if(modH->xTypeHW == USART_HW)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d104      	bne.n	80028ec <getRxBuffer+0x1c>
    {
    	HAL_UART_AbortReceive_IT(modH->port); // disable interrupts to avoid race conditions on serial port
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f008 fe56 	bl	800b598 <HAL_UART_AbortReceive_IT>
    }

	if (modH->xBufferRX.overflow)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f893 3143 	ldrb.w	r3, [r3, #323]	@ 0x143
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d007      	beq.n	8002906 <getRxBuffer+0x36>
    {
       	RingClear(&modH->xBufferRX); // clean up the overflowed buffer
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	33c0      	adds	r3, #192	@ 0xc0
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7ff f981 	bl	8001c02 <RingClear>
       	i16result =  ERR_BUFF_OVERFLOW;
 8002900:	230c      	movs	r3, #12
 8002902:	81fb      	strh	r3, [r7, #14]
 8002904:	e019      	b.n	800293a <getRxBuffer+0x6a>
    }
	else
	{
		modH->u8BufferSize = RingGetAllBytes(&modH->xBufferRX, modH->u8Buffer);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f103 02c0 	add.w	r2, r3, #192	@ 0xc0
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	3313      	adds	r3, #19
 8002910:	4619      	mov	r1, r3
 8002912:	4610      	mov	r0, r2
 8002914:	f7ff f90f 	bl	8001b36 <RingGetAllBytes>
 8002918:	4603      	mov	r3, r0
 800291a:	461a      	mov	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
		modH->u16InCnt++;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 8002928:	3301      	adds	r3, #1
 800292a:	b29a      	uxth	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
		i16result = modH->u8BufferSize;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002938:	81fb      	strh	r3, [r7, #14]
	}

	if(modH->xTypeHW == USART_HW)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8002940:	2b01      	cmp	r3, #1
 8002942:	d107      	bne.n	8002954 <getRxBuffer+0x84>
	{
		HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6858      	ldr	r0, [r3, #4]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	33a6      	adds	r3, #166	@ 0xa6
 800294c:	2201      	movs	r2, #1
 800294e:	4619      	mov	r1, r3
 8002950:	f008 fdd6 	bl	800b500 <HAL_UART_Receive_IT>
	}

    return i16result;
 8002954:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8002958:	4618      	mov	r0, r3
 800295a:	3710      	adds	r7, #16
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <validateRequest>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup modH Modbus handler
 */
uint8_t validateRequest(modbusHandler_t *modH)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
	    		return ERR_BAD_CRC;
	    		}
	    }
#else
	    uint16_t u16MsgCRC;
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 800296e:	3b02      	subs	r3, #2
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	4413      	add	r3, r2
 8002974:	7cdb      	ldrb	r3, [r3, #19]
	    		   	         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 8002976:	b21b      	sxth	r3, r3
 8002978:	021b      	lsls	r3, r3, #8
 800297a:	b21a      	sxth	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002982:	3b01      	subs	r3, #1
 8002984:	6879      	ldr	r1, [r7, #4]
 8002986:	440b      	add	r3, r1
 8002988:	7cdb      	ldrb	r3, [r3, #19]
 800298a:	b21b      	sxth	r3, r3
 800298c:	4313      	orrs	r3, r2
 800298e:	b21b      	sxth	r3, r3
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 8002990:	813b      	strh	r3, [r7, #8]


	    if ( calcCRC( modH->u8Buffer,  modH->u8BufferSize-2 ) != u16MsgCRC )
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f103 0213 	add.w	r2, r3, #19
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 800299e:	3b02      	subs	r3, #2
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	4619      	mov	r1, r3
 80029a4:	4610      	mov	r0, r2
 80029a6:	f000 f938 	bl	8002c1a <calcCRC>
 80029aa:	4603      	mov	r3, r0
 80029ac:	461a      	mov	r2, r3
 80029ae:	893b      	ldrh	r3, [r7, #8]
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d009      	beq.n	80029c8 <validateRequest+0x68>
	    {
	       		modH->u16errCnt ++;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 80029ba:	3301      	adds	r3, #1
 80029bc:	b29a      	uxth	r2, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
	       		return ERR_BAD_CRC;
 80029c4:	230d      	movs	r3, #13
 80029c6:	e10e      	b.n	8002be6 <validateRequest+0x286>


#endif

	    // check fct code
	    bool isSupported = false;
 80029c8:	2300      	movs	r3, #0
 80029ca:	73fb      	strb	r3, [r7, #15]
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 80029cc:	2300      	movs	r3, #0
 80029ce:	73bb      	strb	r3, [r7, #14]
 80029d0:	e00c      	b.n	80029ec <validateRequest+0x8c>
	    {
	        if (fctsupported[i] == modH->u8Buffer[FUNC])
 80029d2:	7bbb      	ldrb	r3, [r7, #14]
 80029d4:	4a86      	ldr	r2, [pc, #536]	@ (8002bf0 <validateRequest+0x290>)
 80029d6:	5cd2      	ldrb	r2, [r2, r3]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	7d1b      	ldrb	r3, [r3, #20]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d102      	bne.n	80029e6 <validateRequest+0x86>
	        {
	            isSupported = 1;
 80029e0:	2301      	movs	r3, #1
 80029e2:	73fb      	strb	r3, [r7, #15]
	            break;
 80029e4:	e005      	b.n	80029f2 <validateRequest+0x92>
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 80029e6:	7bbb      	ldrb	r3, [r7, #14]
 80029e8:	3301      	adds	r3, #1
 80029ea:	73bb      	strb	r3, [r7, #14]
 80029ec:	7bbb      	ldrb	r3, [r7, #14]
 80029ee:	2b07      	cmp	r3, #7
 80029f0:	d9ef      	bls.n	80029d2 <validateRequest+0x72>
	        }
	    }
	    if (!isSupported)
 80029f2:	7bfb      	ldrb	r3, [r7, #15]
 80029f4:	f083 0301 	eor.w	r3, r3, #1
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d009      	beq.n	8002a12 <validateRequest+0xb2>
	    {
	    	modH->u16errCnt ++;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8002a04:	3301      	adds	r3, #1
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
	        return EXC_FUNC_CODE;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e0e9      	b.n	8002be6 <validateRequest+0x286>
	    }

	    // check start address & nb range
	    uint16_t u16AdRegs = 0;
 8002a12:	2300      	movs	r3, #0
 8002a14:	81bb      	strh	r3, [r7, #12]
	    uint16_t u16NRegs = 0;
 8002a16:	2300      	movs	r3, #0
 8002a18:	817b      	strh	r3, [r7, #10]

	    //uint8_t u8regs;
	    switch ( modH->u8Buffer[ FUNC ] )
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	7d1b      	ldrb	r3, [r3, #20]
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	2b0f      	cmp	r3, #15
 8002a22:	f200 80df 	bhi.w	8002be4 <validateRequest+0x284>
 8002a26:	a201      	add	r2, pc, #4	@ (adr r2, 8002a2c <validateRequest+0xcc>)
 8002a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a2c:	08002a6d 	.word	0x08002a6d
 8002a30:	08002a6d 	.word	0x08002a6d
 8002a34:	08002b85 	.word	0x08002b85
 8002a38:	08002b85 	.word	0x08002b85
 8002a3c:	08002b19 	.word	0x08002b19
 8002a40:	08002b61 	.word	0x08002b61
 8002a44:	08002be5 	.word	0x08002be5
 8002a48:	08002be5 	.word	0x08002be5
 8002a4c:	08002be5 	.word	0x08002be5
 8002a50:	08002be5 	.word	0x08002be5
 8002a54:	08002be5 	.word	0x08002be5
 8002a58:	08002be5 	.word	0x08002be5
 8002a5c:	08002be5 	.word	0x08002be5
 8002a60:	08002be5 	.word	0x08002be5
 8002a64:	08002a6d 	.word	0x08002a6d
 8002a68:	08002b85 	.word	0x08002b85
	    {
	    case MB_FC_READ_COILS:
	    case MB_FC_READ_DISCRETE_INPUT:
	    case MB_FC_WRITE_MULTIPLE_COILS:
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	7d5a      	ldrb	r2, [r3, #21]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	7d9b      	ldrb	r3, [r3, #22]
 8002a74:	4619      	mov	r1, r3
 8002a76:	4610      	mov	r0, r2
 8002a78:	f000 f8bc 	bl	8002bf4 <word>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	091b      	lsrs	r3, r3, #4
 8002a80:	81bb      	strh	r3, [r7, #12]
	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) /16;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	7dda      	ldrb	r2, [r3, #23]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	7e1b      	ldrb	r3, [r3, #24]
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	4610      	mov	r0, r2
 8002a8e:	f000 f8b1 	bl	8002bf4 <word>
 8002a92:	4603      	mov	r3, r0
 8002a94:	091b      	lsrs	r3, r3, #4
 8002a96:	817b      	strh	r3, [r7, #10]
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 16) u16NRegs++; // check for incomplete words
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	7dda      	ldrb	r2, [r3, #23]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	7e1b      	ldrb	r3, [r3, #24]
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	4610      	mov	r0, r2
 8002aa4:	f000 f8a6 	bl	8002bf4 <word>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	f003 030f 	and.w	r3, r3, #15
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d002      	beq.n	8002aba <validateRequest+0x15a>
 8002ab4:	897b      	ldrh	r3, [r7, #10]
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	817b      	strh	r3, [r7, #10]
	    	// verify address range
	    	if((u16AdRegs + u16NRegs) > modH->u16regsize) return EXC_ADDR_RANGE;
 8002aba:	89ba      	ldrh	r2, [r7, #12]
 8002abc:	897b      	ldrh	r3, [r7, #10]
 8002abe:	4413      	add	r3, r2
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	f8b2 20a4 	ldrh.w	r2, [r2, #164]	@ 0xa4
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	dd01      	ble.n	8002ace <validateRequest+0x16e>
 8002aca:	2302      	movs	r3, #2
 8002acc:	e08b      	b.n	8002be6 <validateRequest+0x286>

	    	//verify answer frame size in bytes

	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) / 8;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	7dda      	ldrb	r2, [r3, #23]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	7e1b      	ldrb	r3, [r3, #24]
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	4610      	mov	r0, r2
 8002ada:	f000 f88b 	bl	8002bf4 <word>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	08db      	lsrs	r3, r3, #3
 8002ae2:	817b      	strh	r3, [r7, #10]
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 8) u16NRegs++;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	7dda      	ldrb	r2, [r3, #23]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	7e1b      	ldrb	r3, [r3, #24]
 8002aec:	4619      	mov	r1, r3
 8002aee:	4610      	mov	r0, r2
 8002af0:	f000 f880 	bl	8002bf4 <word>
 8002af4:	4603      	mov	r3, r0
 8002af6:	f003 0307 	and.w	r3, r3, #7
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d002      	beq.n	8002b06 <validateRequest+0x1a6>
 8002b00:	897b      	ldrh	r3, [r7, #10]
 8002b02:	3301      	adds	r3, #1
 8002b04:	817b      	strh	r3, [r7, #10]
	    	u16NRegs = u16NRegs + 5; // adding the header  and CRC ( Slave address + Function code  + number of data bytes to follow + 2-byte CRC )
 8002b06:	897b      	ldrh	r3, [r7, #10]
 8002b08:	3305      	adds	r3, #5
 8002b0a:	817b      	strh	r3, [r7, #10]
	        if(u16NRegs > 256) return EXC_REGS_QUANT;
 8002b0c:	897b      	ldrh	r3, [r7, #10]
 8002b0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b12:	d960      	bls.n	8002bd6 <validateRequest+0x276>
 8002b14:	2303      	movs	r3, #3
 8002b16:	e066      	b.n	8002be6 <validateRequest+0x286>

	        break;
	    case MB_FC_WRITE_COIL:
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	7d5a      	ldrb	r2, [r3, #21]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	7d9b      	ldrb	r3, [r3, #22]
 8002b20:	4619      	mov	r1, r3
 8002b22:	4610      	mov	r0, r2
 8002b24:	f000 f866 	bl	8002bf4 <word>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	091b      	lsrs	r3, r3, #4
 8002b2c:	81bb      	strh	r3, [r7, #12]
	    	if(word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) % 16) u16AdRegs++;	// check for incomplete words
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	7d5a      	ldrb	r2, [r3, #21]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	7d9b      	ldrb	r3, [r3, #22]
 8002b36:	4619      	mov	r1, r3
 8002b38:	4610      	mov	r0, r2
 8002b3a:	f000 f85b 	bl	8002bf4 <word>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	f003 030f 	and.w	r3, r3, #15
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d002      	beq.n	8002b50 <validateRequest+0x1f0>
 8002b4a:	89bb      	ldrh	r3, [r7, #12]
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	81bb      	strh	r3, [r7, #12]
	        if (u16AdRegs >= modH->u16regsize) return EXC_ADDR_RANGE;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	@ 0xa4
 8002b56:	89ba      	ldrh	r2, [r7, #12]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d33e      	bcc.n	8002bda <validateRequest+0x27a>
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	e042      	b.n	8002be6 <validateRequest+0x286>
	        break;
	    case MB_FC_WRITE_REGISTER :
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	7d5a      	ldrb	r2, [r3, #21]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	7d9b      	ldrb	r3, [r3, #22]
 8002b68:	4619      	mov	r1, r3
 8002b6a:	4610      	mov	r0, r2
 8002b6c:	f000 f842 	bl	8002bf4 <word>
 8002b70:	4603      	mov	r3, r0
 8002b72:	81bb      	strh	r3, [r7, #12]
	        if (u16AdRegs >= modH-> u16regsize) return EXC_ADDR_RANGE;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	@ 0xa4
 8002b7a:	89ba      	ldrh	r2, [r7, #12]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d32e      	bcc.n	8002bde <validateRequest+0x27e>
 8002b80:	2302      	movs	r3, #2
 8002b82:	e030      	b.n	8002be6 <validateRequest+0x286>
	        break;
	    case MB_FC_READ_REGISTERS :
	    case MB_FC_READ_INPUT_REGISTER :
	    case MB_FC_WRITE_MULTIPLE_REGISTERS :
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	7d5a      	ldrb	r2, [r3, #21]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	7d9b      	ldrb	r3, [r3, #22]
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	4610      	mov	r0, r2
 8002b90:	f000 f830 	bl	8002bf4 <word>
 8002b94:	4603      	mov	r3, r0
 8002b96:	81bb      	strh	r3, [r7, #12]
	        u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	7dda      	ldrb	r2, [r3, #23]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	7e1b      	ldrb	r3, [r3, #24]
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	4610      	mov	r0, r2
 8002ba4:	f000 f826 	bl	8002bf4 <word>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	817b      	strh	r3, [r7, #10]
	        if (( u16AdRegs + u16NRegs ) > modH->u16regsize) return EXC_ADDR_RANGE;
 8002bac:	89ba      	ldrh	r2, [r7, #12]
 8002bae:	897b      	ldrh	r3, [r7, #10]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	f8b2 20a4 	ldrh.w	r2, [r2, #164]	@ 0xa4
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	dd01      	ble.n	8002bc0 <validateRequest+0x260>
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	e012      	b.n	8002be6 <validateRequest+0x286>

	        //verify answer frame size in bytes
	        u16NRegs = u16NRegs*2 + 5; // adding the header  and CRC
 8002bc0:	897b      	ldrh	r3, [r7, #10]
 8002bc2:	005b      	lsls	r3, r3, #1
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	3305      	adds	r3, #5
 8002bc8:	817b      	strh	r3, [r7, #10]
	        if ( u16NRegs > 256 ) return EXC_REGS_QUANT;
 8002bca:	897b      	ldrh	r3, [r7, #10]
 8002bcc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002bd0:	d907      	bls.n	8002be2 <validateRequest+0x282>
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e007      	b.n	8002be6 <validateRequest+0x286>
	        break;
 8002bd6:	bf00      	nop
 8002bd8:	e004      	b.n	8002be4 <validateRequest+0x284>
	        break;
 8002bda:	bf00      	nop
 8002bdc:	e002      	b.n	8002be4 <validateRequest+0x284>
	        break;
 8002bde:	bf00      	nop
 8002be0:	e000      	b.n	8002be4 <validateRequest+0x284>
	        break;
 8002be2:	bf00      	nop
	    }
	    return 0; // OK, no exception code thrown
 8002be4:	2300      	movs	r3, #0

}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3710      	adds	r7, #16
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	08017c80 	.word	0x08017c80

08002bf4 <word>:
 * @return uint16_t (word)
 * @ingroup H  Most significant byte
 * @ingroup L  Less significant byte
 */
uint16_t word(uint8_t H, uint8_t L)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	460a      	mov	r2, r1
 8002bfe:	71fb      	strb	r3, [r7, #7]
 8002c00:	4613      	mov	r3, r2
 8002c02:	71bb      	strb	r3, [r7, #6]
	bytesFields W;
	W.u8[0] = L;
 8002c04:	79bb      	ldrb	r3, [r7, #6]
 8002c06:	733b      	strb	r3, [r7, #12]
	W.u8[1] = H;
 8002c08:	79fb      	ldrb	r3, [r7, #7]
 8002c0a:	737b      	strb	r3, [r7, #13]

	return W.u16[0];
 8002c0c:	89bb      	ldrh	r3, [r7, #12]
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3714      	adds	r7, #20
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr

08002c1a <calcCRC>:
 * @return uint16_t calculated CRC value for the message
 * @ingroup Buffer
 * @ingroup u8length
 */
uint16_t calcCRC(uint8_t *Buffer, uint8_t u8length)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b087      	sub	sp, #28
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
 8002c22:	460b      	mov	r3, r1
 8002c24:	70fb      	strb	r3, [r7, #3]
    unsigned int temp, temp2, flag;
    temp = 0xFFFF;
 8002c26:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002c2a:	617b      	str	r3, [r7, #20]
    for (unsigned char i = 0; i < u8length; i++)
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	74fb      	strb	r3, [r7, #19]
 8002c30:	e022      	b.n	8002c78 <calcCRC+0x5e>
    {
        temp = temp ^ Buffer[i];
 8002c32:	7cfb      	ldrb	r3, [r7, #19]
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	4413      	add	r3, r2
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	4053      	eors	r3, r2
 8002c40:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 8002c42:	2301      	movs	r3, #1
 8002c44:	74bb      	strb	r3, [r7, #18]
 8002c46:	e011      	b.n	8002c6c <calcCRC+0x52>
        {
            flag = temp & 0x0001;
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	60bb      	str	r3, [r7, #8]
            temp >>=1;
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	085b      	lsrs	r3, r3, #1
 8002c54:	617b      	str	r3, [r7, #20]
            if (flag)
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d004      	beq.n	8002c66 <calcCRC+0x4c>
                temp ^= 0xA001;
 8002c5c:	697a      	ldr	r2, [r7, #20]
 8002c5e:	f24a 0301 	movw	r3, #40961	@ 0xa001
 8002c62:	4053      	eors	r3, r2
 8002c64:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 8002c66:	7cbb      	ldrb	r3, [r7, #18]
 8002c68:	3301      	adds	r3, #1
 8002c6a:	74bb      	strb	r3, [r7, #18]
 8002c6c:	7cbb      	ldrb	r3, [r7, #18]
 8002c6e:	2b08      	cmp	r3, #8
 8002c70:	d9ea      	bls.n	8002c48 <calcCRC+0x2e>
    for (unsigned char i = 0; i < u8length; i++)
 8002c72:	7cfb      	ldrb	r3, [r7, #19]
 8002c74:	3301      	adds	r3, #1
 8002c76:	74fb      	strb	r3, [r7, #19]
 8002c78:	7cfa      	ldrb	r2, [r7, #19]
 8002c7a:	78fb      	ldrb	r3, [r7, #3]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d3d8      	bcc.n	8002c32 <calcCRC+0x18>
        }
    }
    // Reverse byte order.
    temp2 = temp >> 8;
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	0a1b      	lsrs	r3, r3, #8
 8002c84:	60fb      	str	r3, [r7, #12]
    temp = (temp << 8) | temp2;
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	021b      	lsls	r3, r3, #8
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	617b      	str	r3, [r7, #20]
    temp &= 0xFFFF;
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	617b      	str	r3, [r7, #20]
    // the returned value is already swapped
    // crcLo byte is first & crcHi byte is last
    return temp;
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	b29b      	uxth	r3, r3

}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	371c      	adds	r7, #28
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr

08002ca6 <buildException>:
 *
 * @ingroup u8exception exception number
 * @ingroup modH modbus handler
 */
void buildException( uint8_t u8exception, modbusHandler_t *modH )
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	b085      	sub	sp, #20
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	4603      	mov	r3, r0
 8002cae:	6039      	str	r1, [r7, #0]
 8002cb0:	71fb      	strb	r3, [r7, #7]
    uint8_t u8func = modH->u8Buffer[ FUNC ];  // get the original FUNC code
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	7d1b      	ldrb	r3, [r3, #20]
 8002cb6:	73fb      	strb	r3, [r7, #15]

    modH->u8Buffer[ ID ]      = modH->u8id;
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	7a1a      	ldrb	r2, [r3, #8]
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	74da      	strb	r2, [r3, #19]
    modH->u8Buffer[ FUNC ]    = u8func + 0x80;
 8002cc0:	7bfb      	ldrb	r3, [r7, #15]
 8002cc2:	3b80      	subs	r3, #128	@ 0x80
 8002cc4:	b2da      	uxtb	r2, r3
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	751a      	strb	r2, [r3, #20]
    modH->u8Buffer[ 2 ]       = u8exception;
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	79fa      	ldrb	r2, [r7, #7]
 8002cce:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = EXCEPTION_SIZE;
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	2203      	movs	r2, #3
 8002cd4:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
}
 8002cd8:	bf00      	nop
 8002cda:	3714      	adds	r7, #20
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <sendTxBuffer>:
 *
 * @return nothing
 * @ingroup modH Modbus handler
 */
static void sendTxBuffer(modbusHandler_t *modH)
{
 8002ce4:	b590      	push	{r4, r7, lr}
 8002ce6:	b087      	sub	sp, #28
 8002ce8:	af02      	add	r7, sp, #8
 8002cea:	6078      	str	r0, [r7, #4]
    // when in slaveType and u8AddressMode == ADDRESS_BROADCAST, do not send anything
    if (modH->uModbusType == MB_SLAVE && modH->u8AddressMode == ADDRESS_BROADCAST)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	2b03      	cmp	r3, #3
 8002cf2:	d111      	bne.n	8002d18 <sendTxBuffer+0x34>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d10c      	bne.n	8002d18 <sendTxBuffer+0x34>
    {
        modH->u8BufferSize = 0;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
        // increase message counter
        modH->u16OutCnt++;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f8b3 309e 	ldrh.w	r3, [r3, #158]	@ 0x9e
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	b29a      	uxth	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
        return;
 8002d16:	e086      	b.n	8002e26 <sendTxBuffer+0x142>
#if  ENABLE_TCP == 1
if(modH->xTypeHW != TCP_HW)
	 {
#endif

	uint16_t u16crc = calcCRC(modH->u8Buffer, modH->u8BufferSize);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f103 0213 	add.w	r2, r3, #19
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002d24:	4619      	mov	r1, r3
 8002d26:	4610      	mov	r0, r2
 8002d28:	f7ff ff77 	bl	8002c1a <calcCRC>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	81fb      	strh	r3, [r7, #14]
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc >> 8;
 8002d30:	89fb      	ldrh	r3, [r7, #14]
 8002d32:	0a1b      	lsrs	r3, r3, #8
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	b2d2      	uxtb	r2, r2
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	440b      	add	r3, r1
 8002d44:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	b2da      	uxtb	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc & 0x00ff;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	89fb      	ldrh	r3, [r7, #14]
 8002d60:	b2da      	uxtb	r2, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	440b      	add	r3, r1
 8002d66:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002d6e:	3301      	adds	r3, #1
 8002d70:	b2da      	uxtb	r2, r3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
#if ENABLE_USB_CDC == 1 || ENABLE_TCP == 1
    if(modH->xTypeHW == USART_HW || modH->xTypeHW == USART_HW_DMA )
    {
#endif

    	if (modH->EN_Port != NULL)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d00c      	beq.n	8002d9a <sendTxBuffer+0xb6>
        {
    		//enable transmitter, disable receiver to avoid echo on RS485 transceivers
    		HAL_HalfDuplex_EnableTransmitter(modH->port);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	4618      	mov	r0, r3
 8002d86:	f009 f8af 	bl	800bee8 <HAL_HalfDuplex_EnableTransmitter>
    		HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_SET);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	68d8      	ldr	r0, [r3, #12]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	8a1b      	ldrh	r3, [r3, #16]
 8002d92:	2201      	movs	r2, #1
 8002d94:	4619      	mov	r1, r3
 8002d96:	f002 f873 	bl	8004e80 <HAL_GPIO_WritePin>
#if ENABLE_USART_DMA ==1
    	if(modH->xTypeHW == USART_HW)
    	{
#endif
    		// transfer buffer to serial line IT
    		HAL_UART_Transmit_IT(modH->port, modH->u8Buffer,  modH->u8BufferSize);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6858      	ldr	r0, [r3, #4]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f103 0113 	add.w	r1, r3, #19
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002daa:	461a      	mov	r2, r3
 8002dac:	f008 fb14 	bl	800b3d8 <HAL_UART_Transmit_IT>
        	HAL_UART_Transmit_DMA(modH->port, modH->u8Buffer, modH->u8BufferSize);

        }
#endif

        ulTaskNotifyTake(pdTRUE, 250); //wait notification from TXE interrupt
 8002db0:	21fa      	movs	r1, #250	@ 0xfa
 8002db2:	2001      	movs	r0, #1
 8002db4:	f012 f900 	bl	8014fb8 <ulTaskNotifyTake>
* If you are porting the library to a different MCU check the 
* USART datasheet and add the corresponding family in the following
* preprocessor conditions
*/
#if defined(STM32H7)  || defined(STM32F3) || defined(STM32L4) || defined(STM32L082xx) || defined(STM32F7) || defined(STM32WB) || defined(STM32G070xx) || defined(STM32F0) || defined(STM32G431xx) || defined(STM32H5)
          while((modH->port->Instance->ISR & USART_ISR_TC) ==0 )
 8002db8:	bf00      	nop
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	69db      	ldr	r3, [r3, #28]
 8002dc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d0f7      	beq.n	8002dba <sendTxBuffer+0xd6>
         {
 	        //block the task until the the last byte is send out of the shifting buffer in USART
         }


         if (modH->EN_Port != NULL)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00c      	beq.n	8002dec <sendTxBuffer+0x108>
         {

             //return RS485 transceiver to receive mode
        	 HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	68d8      	ldr	r0, [r3, #12]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	8a1b      	ldrh	r3, [r3, #16]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	4619      	mov	r1, r3
 8002dde:	f002 f84f 	bl	8004e80 <HAL_GPIO_WritePin>
        	 //enable receiver, disable transmitter
        	 HAL_HalfDuplex_EnableReceiver(modH->port);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f009 f8d2 	bl	800bf90 <HAL_HalfDuplex_EnableReceiver>

         }

         // set timeout for master query
         if(modH->uModbusType == MB_MASTER )
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	2b04      	cmp	r3, #4
 8002df2:	d10c      	bne.n	8002e0e <sendTxBuffer+0x12a>
         {
        	 xTimerReset(modH->xTimerTimeout,0);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f8d3 40b8 	ldr.w	r4, [r3, #184]	@ 0xb8
 8002dfa:	f011 fb2b 	bl	8014454 <xTaskGetTickCount>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	2300      	movs	r3, #0
 8002e02:	9300      	str	r3, [sp, #0]
 8002e04:	2300      	movs	r3, #0
 8002e06:	2102      	movs	r1, #2
 8002e08:	4620      	mov	r0, r4
 8002e0a:	f012 fbc5 	bl	8015598 <xTimerGenericCommand>

#endif

#endif

     modH->u8BufferSize = 0;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
     // increase message counter
     modH->u16OutCnt++;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f8b3 309e 	ldrh.w	r3, [r3, #158]	@ 0x9e
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	b29a      	uxth	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e


}
 8002e26:	3714      	adds	r7, #20
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd90      	pop	{r4, r7, pc}

08002e2c <process_FC1>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC1(modbusHandler_t *modH )
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b086      	sub	sp, #24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
    uint8_t u8currentBit, u8bytesno, u8bitsno;
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	7d5a      	ldrb	r2, [r3, #21]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	7d9b      	ldrb	r3, [r3, #22]
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	4610      	mov	r0, r2
 8002e40:	f7ff fed8 	bl	8002bf4 <word>
 8002e44:	4603      	mov	r3, r0
 8002e46:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	7dda      	ldrb	r2, [r3, #23]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	7e1b      	ldrb	r3, [r3, #24]
 8002e50:	4619      	mov	r1, r3
 8002e52:	4610      	mov	r0, r2
 8002e54:	f7ff fece 	bl	8002bf4 <word>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	823b      	strh	r3, [r7, #16]

    // put the number of bytes in the outcoming message
    u8bytesno = (uint8_t) (u16Coilno / 8);
 8002e5c:	8a3b      	ldrh	r3, [r7, #16]
 8002e5e:	08db      	lsrs	r3, r3, #3
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	75fb      	strb	r3, [r7, #23]
    if (u16Coilno % 8 != 0) u8bytesno ++;
 8002e64:	8a3b      	ldrh	r3, [r7, #16]
 8002e66:	f003 0307 	and.w	r3, r3, #7
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d002      	beq.n	8002e76 <process_FC1+0x4a>
 8002e70:	7dfb      	ldrb	r3, [r7, #23]
 8002e72:	3301      	adds	r3, #1
 8002e74:	75fb      	strb	r3, [r7, #23]
    modH->u8Buffer[ ADD_HI ]  = u8bytesno;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	7dfa      	ldrb	r2, [r7, #23]
 8002e7a:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = ADD_LO;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2203      	movs	r2, #3
 8002e80:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
    modH->u8Buffer[modH->u8BufferSize + u8bytesno - 1 ] = 0;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	7dfb      	ldrb	r3, [r7, #23]
 8002e8e:	4413      	add	r3, r2
 8002e90:	3b01      	subs	r3, #1
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	4413      	add	r3, r2
 8002e96:	2200      	movs	r2, #0
 8002e98:	74da      	strb	r2, [r3, #19]

    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	75bb      	strb	r3, [r7, #22]

    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	82bb      	strh	r3, [r7, #20]
 8002ea2:	e058      	b.n	8002f56 <process_FC1+0x12a>
    {
        u16coil = u16StartCoil + u16currentCoil;
 8002ea4:	8a7a      	ldrh	r2, [r7, #18]
 8002ea6:	8abb      	ldrh	r3, [r7, #20]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	81bb      	strh	r3, [r7, #12]
        u16currentRegister =  (u16coil / 16);
 8002eac:	89bb      	ldrh	r3, [r7, #12]
 8002eae:	091b      	lsrs	r3, r3, #4
 8002eb0:	817b      	strh	r3, [r7, #10]
        u8currentBit = (uint8_t) (u16coil % 16);
 8002eb2:	89bb      	ldrh	r3, [r7, #12]
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	f003 030f 	and.w	r3, r3, #15
 8002eba:	727b      	strb	r3, [r7, #9]

        bitWrite(
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8002ec2:	897b      	ldrh	r3, [r7, #10]
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	4413      	add	r3, r2
 8002ec8:	881b      	ldrh	r3, [r3, #0]
 8002eca:	461a      	mov	r2, r3
 8002ecc:	7a7b      	ldrb	r3, [r7, #9]
 8002ece:	fa42 f303 	asr.w	r3, r2, r3
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d014      	beq.n	8002f04 <process_FC1+0xd8>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	7cda      	ldrb	r2, [r3, #19]
 8002ee8:	7dbb      	ldrb	r3, [r7, #22]
 8002eea:	2101      	movs	r1, #1
 8002eec:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	6879      	ldr	r1, [r7, #4]
 8002ef4:	f891 1093 	ldrb.w	r1, [r1, #147]	@ 0x93
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	b2da      	uxtb	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	440b      	add	r3, r1
 8002f00:	74da      	strb	r2, [r3, #19]
 8002f02:	e015      	b.n	8002f30 <process_FC1+0x104>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4413      	add	r3, r2
 8002f10:	7cda      	ldrb	r2, [r3, #19]
 8002f12:	7dbb      	ldrb	r3, [r7, #22]
 8002f14:	2101      	movs	r1, #1
 8002f16:	fa01 f303 	lsl.w	r3, r1, r3
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	43db      	mvns	r3, r3
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	6879      	ldr	r1, [r7, #4]
 8002f22:	f891 1093 	ldrb.w	r1, [r1, #147]	@ 0x93
 8002f26:	4013      	ands	r3, r2
 8002f28:	b2da      	uxtb	r2, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	440b      	add	r3, r1
 8002f2e:	74da      	strb	r2, [r3, #19]
        	modH->u8Buffer[ modH->u8BufferSize ],
            u8bitsno,
		    bitRead( modH->u16regs[ u16currentRegister ], u8currentBit ) );
        u8bitsno ++;
 8002f30:	7dbb      	ldrb	r3, [r7, #22]
 8002f32:	3301      	adds	r3, #1
 8002f34:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 8002f36:	7dbb      	ldrb	r3, [r7, #22]
 8002f38:	2b07      	cmp	r3, #7
 8002f3a:	d909      	bls.n	8002f50 <process_FC1+0x124>
        {
            u8bitsno = 0;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	75bb      	strb	r3, [r7, #22]
            modH->u8BufferSize++;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002f46:	3301      	adds	r3, #1
 8002f48:	b2da      	uxtb	r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8002f50:	8abb      	ldrh	r3, [r7, #20]
 8002f52:	3301      	adds	r3, #1
 8002f54:	82bb      	strh	r3, [r7, #20]
 8002f56:	8aba      	ldrh	r2, [r7, #20]
 8002f58:	8a3b      	ldrh	r3, [r7, #16]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d3a2      	bcc.n	8002ea4 <process_FC1+0x78>
        }
    }

    // send outcoming message
    if (u16Coilno % 8 != 0) modH->u8BufferSize ++;
 8002f5e:	8a3b      	ldrh	r3, [r7, #16]
 8002f60:	f003 0307 	and.w	r3, r3, #7
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d007      	beq.n	8002f7a <process_FC1+0x14e>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002f70:	3301      	adds	r3, #1
 8002f72:	b2da      	uxtb	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002f80:	3302      	adds	r3, #2
 8002f82:	73fb      	strb	r3, [r7, #15]
    sendTxBuffer(modH);
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f7ff fead 	bl	8002ce4 <sendTxBuffer>
    return u8CopyBufferSize;
 8002f8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3718      	adds	r7, #24
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <process_FC3>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC3(modbusHandler_t *modH)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b084      	sub	sp, #16
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]

    uint16_t u16StartAdd = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	7d5a      	ldrb	r2, [r3, #21]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	7d9b      	ldrb	r3, [r3, #22]
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	4610      	mov	r0, r2
 8002faa:	f7ff fe23 	bl	8002bf4 <word>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	81bb      	strh	r3, [r7, #12]
    uint8_t u8regsno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	7dda      	ldrb	r2, [r3, #23]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	7e1b      	ldrb	r3, [r3, #24]
 8002fba:	4619      	mov	r1, r3
 8002fbc:	4610      	mov	r0, r2
 8002fbe:	f7ff fe19 	bl	8002bf4 <word>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	72fb      	strb	r3, [r7, #11]
    uint8_t u8CopyBufferSize;
    uint16_t i;

    modH->u8Buffer[ 2 ]       = u8regsno * 2;
 8002fc6:	7afb      	ldrb	r3, [r7, #11]
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	b2da      	uxtb	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = 3;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2203      	movs	r2, #3
 8002fd4:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93

    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 8002fd8:	89bb      	ldrh	r3, [r7, #12]
 8002fda:	81fb      	strh	r3, [r7, #14]
 8002fdc:	e032      	b.n	8003044 <process_FC3+0xae>
    {
    	modH->u8Buffer[ modH->u8BufferSize ] = highByte(modH->u16regs[i]);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8002fe4:	89fb      	ldrh	r3, [r7, #14]
 8002fe6:	005b      	lsls	r3, r3, #1
 8002fe8:	4413      	add	r3, r2
 8002fea:	881b      	ldrh	r3, [r3, #0]
 8002fec:	0a1b      	lsrs	r3, r3, #8
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	b2d2      	uxtb	r2, r2
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	440b      	add	r3, r1
 8002ffe:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8003006:	3301      	adds	r3, #1
 8003008:	b2da      	uxtb	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
    	modH->u8Buffer[ modH->u8BufferSize ] = lowByte(modH->u16regs[i]);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8003016:	89fb      	ldrh	r3, [r7, #14]
 8003018:	005b      	lsls	r3, r3, #1
 800301a:	4413      	add	r3, r2
 800301c:	881a      	ldrh	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8003024:	4619      	mov	r1, r3
 8003026:	b2d2      	uxtb	r2, r2
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	440b      	add	r3, r1
 800302c:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8003034:	3301      	adds	r3, #1
 8003036:	b2da      	uxtb	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 800303e:	89fb      	ldrh	r3, [r7, #14]
 8003040:	3301      	adds	r3, #1
 8003042:	81fb      	strh	r3, [r7, #14]
 8003044:	89fa      	ldrh	r2, [r7, #14]
 8003046:	89b9      	ldrh	r1, [r7, #12]
 8003048:	7afb      	ldrb	r3, [r7, #11]
 800304a:	440b      	add	r3, r1
 800304c:	429a      	cmp	r2, r3
 800304e:	dbc6      	blt.n	8002fde <process_FC3+0x48>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8003056:	3302      	adds	r3, #2
 8003058:	72bb      	strb	r3, [r7, #10]
    sendTxBuffer(modH);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f7ff fe42 	bl	8002ce4 <sendTxBuffer>

    return u8CopyBufferSize;
 8003060:	f997 300a 	ldrsb.w	r3, [r7, #10]
}
 8003064:	4618      	mov	r0, r3
 8003066:	3710      	adds	r7, #16
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <process_FC5>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC5( modbusHandler_t *modH )
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
    uint8_t u8currentBit;
    uint16_t u16currentRegister;
    uint8_t u8CopyBufferSize;
    uint16_t u16coil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	7d5a      	ldrb	r2, [r3, #21]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	7d9b      	ldrb	r3, [r3, #22]
 800307c:	4619      	mov	r1, r3
 800307e:	4610      	mov	r0, r2
 8003080:	f7ff fdb8 	bl	8002bf4 <word>
 8003084:	4603      	mov	r3, r0
 8003086:	81fb      	strh	r3, [r7, #14]

    // point to the register and its bit
    u16currentRegister = (u16coil / 16);
 8003088:	89fb      	ldrh	r3, [r7, #14]
 800308a:	091b      	lsrs	r3, r3, #4
 800308c:	81bb      	strh	r3, [r7, #12]
    u8currentBit = (uint8_t) (u16coil % 16);
 800308e:	89fb      	ldrh	r3, [r7, #14]
 8003090:	b2db      	uxtb	r3, r3
 8003092:	f003 030f 	and.w	r3, r3, #15
 8003096:	72fb      	strb	r3, [r7, #11]

    // write to coil
    bitWrite(
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	7ddb      	ldrb	r3, [r3, #23]
 800309c:	2bff      	cmp	r3, #255	@ 0xff
 800309e:	d115      	bne.n	80030cc <process_FC5+0x60>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80030a6:	89bb      	ldrh	r3, [r7, #12]
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	4413      	add	r3, r2
 80030ac:	8819      	ldrh	r1, [r3, #0]
 80030ae:	7afb      	ldrb	r3, [r7, #11]
 80030b0:	2201      	movs	r2, #1
 80030b2:	fa02 f303 	lsl.w	r3, r2, r3
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f8d3 0098 	ldr.w	r0, [r3, #152]	@ 0x98
 80030be:	89bb      	ldrh	r3, [r7, #12]
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	4403      	add	r3, r0
 80030c4:	430a      	orrs	r2, r1
 80030c6:	b292      	uxth	r2, r2
 80030c8:	801a      	strh	r2, [r3, #0]
 80030ca:	e016      	b.n	80030fa <process_FC5+0x8e>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80030d2:	89bb      	ldrh	r3, [r7, #12]
 80030d4:	005b      	lsls	r3, r3, #1
 80030d6:	4413      	add	r3, r2
 80030d8:	8819      	ldrh	r1, [r3, #0]
 80030da:	7afb      	ldrb	r3, [r7, #11]
 80030dc:	2201      	movs	r2, #1
 80030de:	fa02 f303 	lsl.w	r3, r2, r3
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	43db      	mvns	r3, r3
 80030e6:	b29a      	uxth	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f8d3 0098 	ldr.w	r0, [r3, #152]	@ 0x98
 80030ee:	89bb      	ldrh	r3, [r7, #12]
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	4403      	add	r3, r0
 80030f4:	400a      	ands	r2, r1
 80030f6:	b292      	uxth	r2, r2
 80030f8:	801a      	strh	r2, [r3, #0]
        u8currentBit,
		modH->u8Buffer[ NB_HI ] == 0xff );


    // send answer to master
    modH->u8BufferSize = 6;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2206      	movs	r2, #6
 80030fe:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
    u8CopyBufferSize =  modH->u8BufferSize +2;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8003108:	3302      	adds	r3, #2
 800310a:	72bb      	strb	r3, [r7, #10]
    sendTxBuffer(modH);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f7ff fde9 	bl	8002ce4 <sendTxBuffer>

    return u8CopyBufferSize;
 8003112:	f997 300a 	ldrsb.w	r3, [r7, #10]
}
 8003116:	4618      	mov	r0, r3
 8003118:	3710      	adds	r7, #16
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}

0800311e <process_FC6>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC6(modbusHandler_t *modH )
{
 800311e:	b580      	push	{r7, lr}
 8003120:	b084      	sub	sp, #16
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]

    uint16_t u16add = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	7d5a      	ldrb	r2, [r3, #21]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	7d9b      	ldrb	r3, [r3, #22]
 800312e:	4619      	mov	r1, r3
 8003130:	4610      	mov	r0, r2
 8003132:	f7ff fd5f 	bl	8002bf4 <word>
 8003136:	4603      	mov	r3, r0
 8003138:	81fb      	strh	r3, [r7, #14]
    uint8_t u8CopyBufferSize;
    uint16_t u16val = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	7dda      	ldrb	r2, [r3, #23]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	7e1b      	ldrb	r3, [r3, #24]
 8003142:	4619      	mov	r1, r3
 8003144:	4610      	mov	r0, r2
 8003146:	f7ff fd55 	bl	8002bf4 <word>
 800314a:	4603      	mov	r3, r0
 800314c:	81bb      	strh	r3, [r7, #12]

    modH->u16regs[ u16add ] = u16val;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8003154:	89fb      	ldrh	r3, [r7, #14]
 8003156:	005b      	lsls	r3, r3, #1
 8003158:	4413      	add	r3, r2
 800315a:	89ba      	ldrh	r2, [r7, #12]
 800315c:	801a      	strh	r2, [r3, #0]

    // keep the same header
    modH->u8BufferSize = RESPONSE_SIZE;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2206      	movs	r2, #6
 8003162:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93

    u8CopyBufferSize = modH->u8BufferSize + 2;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 800316c:	3302      	adds	r3, #2
 800316e:	72fb      	strb	r3, [r7, #11]
    sendTxBuffer(modH);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f7ff fdb7 	bl	8002ce4 <sendTxBuffer>

    return u8CopyBufferSize;
 8003176:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800317a:	4618      	mov	r0, r3
 800317c:	3710      	adds	r7, #16
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <process_FC15>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC15( modbusHandler_t *modH )
{
 8003182:	b580      	push	{r7, lr}
 8003184:	b086      	sub	sp, #24
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;
    bool bTemp;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	7d5a      	ldrb	r2, [r3, #21]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	7d9b      	ldrb	r3, [r3, #22]
 8003192:	4619      	mov	r1, r3
 8003194:	4610      	mov	r0, r2
 8003196:	f7ff fd2d 	bl	8002bf4 <word>
 800319a:	4603      	mov	r3, r0
 800319c:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	7dda      	ldrb	r2, [r3, #23]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	7e1b      	ldrb	r3, [r3, #24]
 80031a6:	4619      	mov	r1, r3
 80031a8:	4610      	mov	r0, r2
 80031aa:	f7ff fd23 	bl	8002bf4 <word>
 80031ae:	4603      	mov	r3, r0
 80031b0:	823b      	strh	r3, [r7, #16]


    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 80031b2:	2300      	movs	r3, #0
 80031b4:	75bb      	strb	r3, [r7, #22]
    u8frameByte = 7;
 80031b6:	2307      	movs	r3, #7
 80031b8:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 80031ba:	2300      	movs	r3, #0
 80031bc:	82bb      	strh	r3, [r7, #20]
 80031be:	e058      	b.n	8003272 <process_FC15+0xf0>
    {

        u16coil = u16StartCoil + u16currentCoil;
 80031c0:	8a7a      	ldrh	r2, [r7, #18]
 80031c2:	8abb      	ldrh	r3, [r7, #20]
 80031c4:	4413      	add	r3, r2
 80031c6:	81bb      	strh	r3, [r7, #12]
        u16currentRegister = (u16coil / 16);
 80031c8:	89bb      	ldrh	r3, [r7, #12]
 80031ca:	091b      	lsrs	r3, r3, #4
 80031cc:	817b      	strh	r3, [r7, #10]
        u8currentBit = (uint8_t) (u16coil % 16);
 80031ce:	89bb      	ldrh	r3, [r7, #12]
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	f003 030f 	and.w	r3, r3, #15
 80031d6:	727b      	strb	r3, [r7, #9]

        bTemp = bitRead(
 80031d8:	7dfb      	ldrb	r3, [r7, #23]
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	4413      	add	r3, r2
 80031de:	7cdb      	ldrb	r3, [r3, #19]
 80031e0:	461a      	mov	r2, r3
 80031e2:	7dbb      	ldrb	r3, [r7, #22]
 80031e4:	fa42 f303 	asr.w	r3, r2, r3
 80031e8:	f003 0301 	and.w	r3, r3, #1
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	bf14      	ite	ne
 80031f0:	2301      	movne	r3, #1
 80031f2:	2300      	moveq	r3, #0
 80031f4:	723b      	strb	r3, [r7, #8]
        			modH->u8Buffer[ u8frameByte ],
                    u8bitsno );

        bitWrite(
 80031f6:	7a3b      	ldrb	r3, [r7, #8]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d015      	beq.n	8003228 <process_FC15+0xa6>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8003202:	897b      	ldrh	r3, [r7, #10]
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	4413      	add	r3, r2
 8003208:	8819      	ldrh	r1, [r3, #0]
 800320a:	7a7b      	ldrb	r3, [r7, #9]
 800320c:	2201      	movs	r2, #1
 800320e:	fa02 f303 	lsl.w	r3, r2, r3
 8003212:	b29a      	uxth	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f8d3 0098 	ldr.w	r0, [r3, #152]	@ 0x98
 800321a:	897b      	ldrh	r3, [r7, #10]
 800321c:	005b      	lsls	r3, r3, #1
 800321e:	4403      	add	r3, r0
 8003220:	430a      	orrs	r2, r1
 8003222:	b292      	uxth	r2, r2
 8003224:	801a      	strh	r2, [r3, #0]
 8003226:	e016      	b.n	8003256 <process_FC15+0xd4>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800322e:	897b      	ldrh	r3, [r7, #10]
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	4413      	add	r3, r2
 8003234:	8819      	ldrh	r1, [r3, #0]
 8003236:	7a7b      	ldrb	r3, [r7, #9]
 8003238:	2201      	movs	r2, #1
 800323a:	fa02 f303 	lsl.w	r3, r2, r3
 800323e:	b29b      	uxth	r3, r3
 8003240:	43db      	mvns	r3, r3
 8003242:	b29a      	uxth	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f8d3 0098 	ldr.w	r0, [r3, #152]	@ 0x98
 800324a:	897b      	ldrh	r3, [r7, #10]
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	4403      	add	r3, r0
 8003250:	400a      	ands	r2, r1
 8003252:	b292      	uxth	r2, r2
 8003254:	801a      	strh	r2, [r3, #0]
            modH->u16regs[ u16currentRegister ],
            u8currentBit,
            bTemp );

        u8bitsno ++;
 8003256:	7dbb      	ldrb	r3, [r7, #22]
 8003258:	3301      	adds	r3, #1
 800325a:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 800325c:	7dbb      	ldrb	r3, [r7, #22]
 800325e:	2b07      	cmp	r3, #7
 8003260:	d904      	bls.n	800326c <process_FC15+0xea>
        {
            u8bitsno = 0;
 8003262:	2300      	movs	r3, #0
 8003264:	75bb      	strb	r3, [r7, #22]
            u8frameByte++;
 8003266:	7dfb      	ldrb	r3, [r7, #23]
 8003268:	3301      	adds	r3, #1
 800326a:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800326c:	8abb      	ldrh	r3, [r7, #20]
 800326e:	3301      	adds	r3, #1
 8003270:	82bb      	strh	r3, [r7, #20]
 8003272:	8aba      	ldrh	r2, [r7, #20]
 8003274:	8a3b      	ldrh	r3, [r7, #16]
 8003276:	429a      	cmp	r2, r3
 8003278:	d3a2      	bcc.n	80031c0 <process_FC15+0x3e>
        }
    }

    // send outcoming message
    // it's just a copy of the incomping frame until 6th byte
    modH->u8BufferSize         = 6;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2206      	movs	r2, #6
 800327e:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8003288:	3302      	adds	r3, #2
 800328a:	73fb      	strb	r3, [r7, #15]
    sendTxBuffer(modH);
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f7ff fd29 	bl	8002ce4 <sendTxBuffer>
    return u8CopyBufferSize;
 8003292:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003296:	4618      	mov	r0, r3
 8003298:	3718      	adds	r7, #24
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}

0800329e <process_FC16>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC16(modbusHandler_t *modH )
{
 800329e:	b580      	push	{r7, lr}
 80032a0:	b086      	sub	sp, #24
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
    uint16_t u16StartAdd = modH->u8Buffer[ ADD_HI ] << 8 | modH->u8Buffer[ ADD_LO ];
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	7d5b      	ldrb	r3, [r3, #21]
 80032aa:	b21b      	sxth	r3, r3
 80032ac:	021b      	lsls	r3, r3, #8
 80032ae:	b21a      	sxth	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	7d9b      	ldrb	r3, [r3, #22]
 80032b4:	b21b      	sxth	r3, r3
 80032b6:	4313      	orrs	r3, r2
 80032b8:	b21b      	sxth	r3, r3
 80032ba:	82bb      	strh	r3, [r7, #20]
    uint16_t u16regsno = modH->u8Buffer[ NB_HI ] << 8 | modH->u8Buffer[ NB_LO ];
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	7ddb      	ldrb	r3, [r3, #23]
 80032c0:	b21b      	sxth	r3, r3
 80032c2:	021b      	lsls	r3, r3, #8
 80032c4:	b21a      	sxth	r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	7e1b      	ldrb	r3, [r3, #24]
 80032ca:	b21b      	sxth	r3, r3
 80032cc:	4313      	orrs	r3, r2
 80032ce:	b21b      	sxth	r3, r3
 80032d0:	827b      	strh	r3, [r7, #18]
    uint8_t u8CopyBufferSize;
    uint16_t i;
    uint16_t temp;

    // build header
    modH->u8Buffer[ NB_HI ]   = 0;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	75da      	strb	r2, [r3, #23]
    modH->u8Buffer[ NB_LO ]   = (uint8_t) u16regsno; // answer is always 256 or less bytes
 80032d8:	8a7b      	ldrh	r3, [r7, #18]
 80032da:	b2da      	uxtb	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	761a      	strb	r2, [r3, #24]
    modH->u8BufferSize         = RESPONSE_SIZE;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2206      	movs	r2, #6
 80032e4:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93

    // write registers
    for (i = 0; i < u16regsno; i++)
 80032e8:	2300      	movs	r3, #0
 80032ea:	82fb      	strh	r3, [r7, #22]
 80032ec:	e01d      	b.n	800332a <process_FC16+0x8c>
    {
        temp = word(
        		modH->u8Buffer[ (BYTE_CNT + 1) + i * 2 ],
 80032ee:	8afb      	ldrh	r3, [r7, #22]
 80032f0:	005b      	lsls	r3, r3, #1
 80032f2:	3307      	adds	r3, #7
        temp = word(
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	4413      	add	r3, r2
 80032f8:	7cd8      	ldrb	r0, [r3, #19]
				modH->u8Buffer[ (BYTE_CNT + 2) + i * 2 ]);
 80032fa:	8afb      	ldrh	r3, [r7, #22]
 80032fc:	3304      	adds	r3, #4
 80032fe:	005b      	lsls	r3, r3, #1
        temp = word(
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	4413      	add	r3, r2
 8003304:	7cdb      	ldrb	r3, [r3, #19]
 8003306:	4619      	mov	r1, r3
 8003308:	f7ff fc74 	bl	8002bf4 <word>
 800330c:	4603      	mov	r3, r0
 800330e:	81fb      	strh	r3, [r7, #14]

        modH->u16regs[ u16StartAdd + i ] = temp;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8003316:	8ab9      	ldrh	r1, [r7, #20]
 8003318:	8afb      	ldrh	r3, [r7, #22]
 800331a:	440b      	add	r3, r1
 800331c:	005b      	lsls	r3, r3, #1
 800331e:	4413      	add	r3, r2
 8003320:	89fa      	ldrh	r2, [r7, #14]
 8003322:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < u16regsno; i++)
 8003324:	8afb      	ldrh	r3, [r7, #22]
 8003326:	3301      	adds	r3, #1
 8003328:	82fb      	strh	r3, [r7, #22]
 800332a:	8afa      	ldrh	r2, [r7, #22]
 800332c:	8a7b      	ldrh	r3, [r7, #18]
 800332e:	429a      	cmp	r2, r3
 8003330:	d3dd      	bcc.n	80032ee <process_FC16+0x50>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8003338:	3302      	adds	r3, #2
 800333a:	747b      	strb	r3, [r7, #17]
    sendTxBuffer(modH);
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f7ff fcd1 	bl	8002ce4 <sendTxBuffer>

    return u8CopyBufferSize;
 8003342:	f997 3011 	ldrsb.w	r3, [r7, #17]
}
 8003346:	4618      	mov	r0, r3
 8003348:	3718      	adds	r7, #24
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
	...

08003350 <_ZN6SensorC1Ev>:
 * The Sensor base class provides an implementation of getVelocity(), and takes care of counting full
 * revolutions in a precise way, but if you wish you can additionally override these methods to provide more
 * optimal implementations for your hardware.
 * 
 */
class Sensor{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	4a12      	ldr	r2, [pc, #72]	@ (80033a4 <_ZN6SensorC1Ev+0x54>)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	601a      	str	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a11      	ldr	r2, [pc, #68]	@ (80033a8 <_ZN6SensorC1Ev+0x58>)
 8003362:	605a      	str	r2, [r3, #4]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f04f 0200 	mov.w	r2, #0
 800336a:	609a      	str	r2, [r3, #8]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f04f 0200 	mov.w	r2, #0
 8003372:	60da      	str	r2, [r3, #12]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	611a      	str	r2, [r3, #16]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f04f 0200 	mov.w	r2, #0
 8003380:	615a      	str	r2, [r3, #20]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	619a      	str	r2, [r3, #24]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	61da      	str	r2, [r3, #28]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	621a      	str	r2, [r3, #32]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4618      	mov	r0, r3
 8003398:	370c      	adds	r7, #12
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	08017cc8 	.word	0x08017cc8
 80033a8:	38d1b717 	.word	0x38d1b717

080033ac <_ZN21ModbusAbsoluteEncoderC1EP17TIM_HandleTypeDefh>:
#include <cstdio>
#include "retarget.h"
// Define static constant
const float ModbusAbsoluteEncoder::RADIANS_PER_COUNT = 2.0f * M_PI / ModbusAbsoluteEncoder::ENCODER_RESOLUTION;

ModbusAbsoluteEncoder::ModbusAbsoluteEncoder(TIM_HandleTypeDef *htim, uint8_t unit_id)
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	4613      	mov	r3, r2
 80033b8:	71fb      	strb	r3, [r7, #7]
    last_position(0),
    full_rotations(0),
    zero_position(0),
    frequency_start_time(0),
    last_receive_count(0),
    encoder_initialized(false)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	4618      	mov	r0, r3
 80033be:	f7ff ffc7 	bl	8003350 <_ZN6SensorC1Ev>
 80033c2:	4a26      	ldr	r2, [pc, #152]	@ (800345c <_ZN21ModbusAbsoluteEncoderC1EP17TIM_HandleTypeDefh+0xb0>)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	601a      	str	r2, [r3, #0]
  : unit_id(unit_id),
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	79fa      	ldrb	r2, [r7, #7]
 80033cc:	f883 217c 	strb.w	r2, [r3, #380]	@ 0x17c
    encoder_initialized(false)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
    comm_ok(false),
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 2184 	strb.w	r2, [r3, #388]	@ 0x184
    modbus_state(IDLE),
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 2185 	strb.w	r2, [r3, #389]	@ 0x185
    cached_angle(0.0f),
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f04f 0200 	mov.w	r2, #0
 80033ee:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
    async_enabled(false),
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 218c 	strb.w	r2, [r3, #396]	@ 0x18c
    last_update_time(0),
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
    encoder_receive_count(0),
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2200      	movs	r2, #0
 8003406:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
    query_start_time(0),
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2200      	movs	r2, #0
 800340e:	f8c3 2198 	str.w	r2, [r3, #408]	@ 0x198
    first_read(true),
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2201      	movs	r2, #1
 8003416:	f883 219c 	strb.w	r2, [r3, #412]	@ 0x19c
    htim(htim),
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	68ba      	ldr	r2, [r7, #8]
 800341e:	f8c3 21a0 	str.w	r2, [r3, #416]	@ 0x1a0
    last_position(0),
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	f8c3 21a4 	str.w	r2, [r3, #420]	@ 0x1a4
    full_rotations(0),
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2200      	movs	r2, #0
 800342e:	f8c3 21a8 	str.w	r2, [r3, #424]	@ 0x1a8
    zero_position(0),
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
    frequency_start_time(0),
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	f8c3 21b0 	str.w	r2, [r3, #432]	@ 0x1b0
    last_receive_count(0),
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2200      	movs	r2, #0
 8003446:	f8c3 21b4 	str.w	r2, [r3, #436]	@ 0x1b4
    encoder_initialized(false)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 21b8 	strb.w	r2, [r3, #440]	@ 0x1b8
{
}
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	4618      	mov	r0, r3
 8003456:	3710      	adds	r7, #16
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	08017c90 	.word	0x08017c90

08003460 <_ZN21ModbusAbsoluteEncoder4initEv>:

void ModbusAbsoluteEncoder::init() {
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
    // Initialise timer stats
    //Initialize Modbus library
    ModbusInit(&ModbusH);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	3324      	adds	r3, #36	@ 0x24
 800346c:	4618      	mov	r0, r3
 800346e:	f7fe fbe3 	bl	8001c38 <ModbusInit>
    //Start capturing traffic on serial Port
    ModbusStart(&ModbusH);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	3324      	adds	r3, #36	@ 0x24
 8003476:	4618      	mov	r0, r3
 8003478:	f7fe fc86 	bl	8001d88 <ModbusStart>
    frequency_start_time = HAL_GetTick();
 800347c:	f000 fc54 	bl	8003d28 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f8c3 21b0 	str.w	r2, [r3, #432]	@ 0x1b0
    last_receive_count = 0;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	f8c3 21b4 	str.w	r2, [r3, #436]	@ 0x1b4
    encoder_initialized = true;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 21b8 	strb.w	r2, [r3, #440]	@ 0x1b8
}
 8003498:	bf00      	nop
 800349a:	3708      	adds	r7, #8
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <_ZN21ModbusAbsoluteEncoder15sendModbusQueryEv>:

bool ModbusAbsoluteEncoder::sendModbusQuery() {
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b088      	sub	sp, #32
 80034a4:	af02      	add	r7, sp, #8
 80034a6:	6078      	str	r0, [r7, #4]
    modbus_t telegram;
    constructQuery(&telegram);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	332c      	adds	r3, #44	@ 0x2c
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f107 0208 	add.w	r2, r7, #8
 80034b4:	4611      	mov	r1, r2
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	4798      	blx	r3
    // 发送Modbus查询（非阻塞）
    ModbusDATA[0] = ~ModbusDATA[0];
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f8b3 316c 	ldrh.w	r3, [r3, #364]	@ 0x16c
 80034c0:	43db      	mvns	r3, r3
 80034c2:	b29a      	uxth	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f8a3 216c 	strh.w	r2, [r3, #364]	@ 0x16c
    ModbusQuery(&ModbusH, telegram);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	9300      	str	r3, [sp, #0]
 80034d4:	f107 0308 	add.w	r3, r7, #8
 80034d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034da:	f7fe fe3d 	bl	8002158 <ModbusQuery>

    modbus_state = QUERY_SENT;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2201      	movs	r2, #1
 80034e2:	f883 2185 	strb.w	r2, [r3, #389]	@ 0x185
    query_start_time = HAL_GetTick();
 80034e6:	f000 fc1f 	bl	8003d28 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f8c3 2198 	str.w	r2, [r3, #408]	@ 0x198
    return true;
 80034f2:	2301      	movs	r3, #1
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3718      	adds	r7, #24
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <_ZN21ModbusAbsoluteEncoder19checkModbusResponseEv>:

bool ModbusAbsoluteEncoder::checkModbusResponse() {
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
    // 检查Modbus响应是否准备好
    // 这里需要根据具体的Modbus库实现来检查
    // 假设ModbusQueryV2是阻塞版本，我们需要非阻塞检查
    
    // 简化实现：检查Modbus状态
    uint32_t u32NotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // block until query finishes or timeouts
 8003504:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003508:	2001      	movs	r0, #1
 800350a:	f011 fd55 	bl	8014fb8 <ulTaskNotifyTake>
 800350e:	60f8      	str	r0, [r7, #12]
    if(u32NotificationValue != OP_OK_QUERY)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2b14      	cmp	r3, #20
 8003514:	d001      	beq.n	800351a <_ZN21ModbusAbsoluteEncoder19checkModbusResponseEv+0x1e>
    {
        return false;
 8003516:	2300      	movs	r3, #0
 8003518:	e01e      	b.n	8003558 <_ZN21ModbusAbsoluteEncoder19checkModbusResponseEv+0x5c>
    } else {
        // 成功接收到响应
        encoder_receive_count++;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f8d3 3194 	ldr.w	r3, [r3, #404]	@ 0x194
 8003520:	1c5a      	adds	r2, r3, #1
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
        uint32_t current_position = ((uint32_t)ModbusDATA[0] << 16) | ModbusDATA[1];
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f8b3 316c 	ldrh.w	r3, [r3, #364]	@ 0x16c
 800352e:	041b      	lsls	r3, r3, #16
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	f8b2 216e 	ldrh.w	r2, [r2, #366]	@ 0x16e
 8003536:	4313      	orrs	r3, r2
 8003538:	60bb      	str	r3, [r7, #8]
        updateAngleFromPosition(current_position);
 800353a:	68b9      	ldr	r1, [r7, #8]
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 f947 	bl	80037d0 <_ZN21ModbusAbsoluteEncoder23updateAngleFromPositionEm>
        comm_ok = true;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2201      	movs	r2, #1
 8003546:	f883 2184 	strb.w	r2, [r3, #388]	@ 0x184
        last_update_time = HAL_GetTick();
 800354a:	f000 fbed 	bl	8003d28 <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
        // 通讯完成，检查结果
        return true;
 8003556:	2301      	movs	r3, #1
    }
}
 8003558:	4618      	mov	r0, r3
 800355a:	3710      	adds	r7, #16
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <_ZN21ModbusAbsoluteEncoder17startAsyncReadingEm>:

void ModbusAbsoluteEncoder::startAsyncReading(uint32_t update_frequency_hz) {
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
    if(!htim) {
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d104      	bne.n	800357e <_ZN21ModbusAbsoluteEncoder17startAsyncReadingEm+0x1e>
        async_enabled = false;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 218c 	strb.w	r2, [r3, #396]	@ 0x18c
        return;
 800357c:	e058      	b.n	8003630 <_ZN21ModbusAbsoluteEncoder17startAsyncReadingEm+0xd0>
    }

    // Configure TIM ARR based on requested frequency (assuming clock already set as in Encoder485)
    uint32_t arr_value = (100000 / update_frequency_hz) - 1;
 800357e:	4a2e      	ldr	r2, [pc, #184]	@ (8003638 <_ZN21ModbusAbsoluteEncoder17startAsyncReadingEm+0xd8>)
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	fbb2 f3f3 	udiv	r3, r2, r3
 8003586:	3b01      	subs	r3, #1
 8003588:	60fb      	str	r3, [r7, #12]
    if(arr_value > 65535) arr_value = 65535;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003590:	d302      	bcc.n	8003598 <_ZN21ModbusAbsoluteEncoder17startAsyncReadingEm+0x38>
 8003592:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003596:	60fb      	str	r3, [r7, #12]
    if(arr_value < 10) arr_value = 10;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2b09      	cmp	r3, #9
 800359c:	d801      	bhi.n	80035a2 <_ZN21ModbusAbsoluteEncoder17startAsyncReadingEm+0x42>
 800359e:	230a      	movs	r3, #10
 80035a0:	60fb      	str	r3, [r7, #12]
    __HAL_TIM_DISABLE(htim);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	6a1a      	ldr	r2, [r3, #32]
 80035ac:	f241 1311 	movw	r3, #4369	@ 0x1111
 80035b0:	4013      	ands	r3, r2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	bf0c      	ite	eq
 80035b6:	2301      	moveq	r3, #1
 80035b8:	2300      	movne	r3, #0
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d01a      	beq.n	80035f6 <_ZN21ModbusAbsoluteEncoder17startAsyncReadingEm+0x96>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	6a1a      	ldr	r2, [r3, #32]
 80035ca:	f240 4344 	movw	r3, #1092	@ 0x444
 80035ce:	4013      	ands	r3, r2
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	bf0c      	ite	eq
 80035d4:	2301      	moveq	r3, #1
 80035d6:	2300      	movne	r3, #0
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d00b      	beq.n	80035f6 <_ZN21ModbusAbsoluteEncoder17startAsyncReadingEm+0x96>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f022 0201 	bic.w	r2, r2, #1
 80035f4:	601a      	str	r2, [r3, #0]
    htim->Instance->ARR = arr_value;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	62da      	str	r2, [r3, #44]	@ 0x2c
    __HAL_TIM_SET_COUNTER(htim, 0);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2200      	movs	r2, #0
 800360c:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_TIM_Base_Start_IT(htim);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 8003614:	4618      	mov	r0, r3
 8003616:	f006 fe8d 	bl	800a334 <HAL_TIM_Base_Start_IT>

    async_enabled = true;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2201      	movs	r2, #1
 800361e:	f883 218c 	strb.w	r2, [r3, #396]	@ 0x18c
    modbus_state = IDLE;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 2185 	strb.w	r2, [r3, #389]	@ 0x185

    // Initial query so first value is available quickly
    sendModbusQuery();
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f7ff ff38 	bl	80034a0 <_ZN21ModbusAbsoluteEncoder15sendModbusQueryEv>
}
 8003630:	3710      	adds	r7, #16
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	000186a0 	.word	0x000186a0
 800363c:	00000000 	.word	0x00000000

08003640 <_ZN21ModbusAbsoluteEncoder8getAngleEv>:
        HAL_TIM_Base_Stop_IT(htim);
    }
}


float ModbusAbsoluteEncoder::getAngle() {
 8003640:	b580      	push	{r7, lr}
 8003642:	b08a      	sub	sp, #40	@ 0x28
 8003644:	af02      	add	r7, sp, #8
 8003646:	6078      	str	r0, [r7, #4]
    if(async_enabled) {
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f893 318c 	ldrb.w	r3, [r3, #396]	@ 0x18c
 800364e:	b2db      	uxtb	r3, r3
 8003650:	2b00      	cmp	r3, #0
 8003652:	d003      	beq.n	800365c <_ZN21ModbusAbsoluteEncoder8getAngleEv+0x1c>
        return cached_angle;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	edd3 7a62 	vldr	s15, [r3, #392]	@ 0x188
 800365a:	e059      	b.n	8003710 <_ZN21ModbusAbsoluteEncoder8getAngleEv+0xd0>
    }
    // 构建Modbus查询结构体
    modbus_t telegram;
    constructQuery(&telegram);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	332c      	adds	r3, #44	@ 0x2c
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f107 0208 	add.w	r2, r7, #8
 8003668:	4611      	mov	r1, r2
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	4798      	blx	r3
    // 发送Modbus查询（非阻塞）
    ModbusDATA[0] = ~ModbusDATA[0];
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f8b3 316c 	ldrh.w	r3, [r3, #364]	@ 0x16c
 8003674:	43db      	mvns	r3, r3
 8003676:	b29a      	uxth	r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f8a3 216c 	strh.w	r2, [r3, #364]	@ 0x16c
    
    uint32_t result = ModbusQueryV2(&ModbusH, telegram);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	9300      	str	r3, [sp, #0]
 8003688:	f107 0308 	add.w	r3, r7, #8
 800368c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800368e:	f7fe fda9 	bl	80021e4 <ModbusQueryV2>
 8003692:	61f8      	str	r0, [r7, #28]
    
    if (result != OP_OK_QUERY) {
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	2b14      	cmp	r3, #20
 8003698:	d02a      	beq.n	80036f0 <_ZN21ModbusAbsoluteEncoder8getAngleEv+0xb0>
        if (first_read) {
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f893 319c 	ldrb.w	r3, [r3, #412]	@ 0x19c
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d002      	beq.n	80036aa <_ZN21ModbusAbsoluteEncoder8getAngleEv+0x6a>
            return 0.0f;
 80036a4:	eddf 7a20 	vldr	s15, [pc, #128]	@ 8003728 <_ZN21ModbusAbsoluteEncoder8getAngleEv+0xe8>
 80036a8:	e032      	b.n	8003710 <_ZN21ModbusAbsoluteEncoder8getAngleEv+0xd0>
        } else {
            return (float)(last_position % ENCODER_RESOLUTION) * RADIANS_PER_COUNT + 
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 80036b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80036b4:	ee07 3a90 	vmov	s15, r3
 80036b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036bc:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 800372c <_ZN21ModbusAbsoluteEncoder8getAngleEv+0xec>
 80036c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036c4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
                    (float)full_rotations * 2.0f * M_PI;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 80036ce:	ee07 3a90 	vmov	s15, r3
 80036d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036d6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80036da:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80036de:	ed9f 5b10 	vldr	d5, [pc, #64]	@ 8003720 <_ZN21ModbusAbsoluteEncoder8getAngleEv+0xe0>
 80036e2:	ee27 7b05 	vmul.f64	d7, d7, d5
            return (float)(last_position % ENCODER_RESOLUTION) * RADIANS_PER_COUNT + 
 80036e6:	ee36 7b07 	vadd.f64	d7, d6, d7
                    (float)full_rotations * 2.0f * M_PI;
 80036ea:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80036ee:	e00f      	b.n	8003710 <_ZN21ModbusAbsoluteEncoder8getAngleEv+0xd0>
        }
    }
    
    uint32_t current_position = ((uint32_t)ModbusDATA[0] << 16) | ModbusDATA[1];
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f8b3 316c 	ldrh.w	r3, [r3, #364]	@ 0x16c
 80036f6:	041b      	lsls	r3, r3, #16
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	f8b2 216e 	ldrh.w	r2, [r2, #366]	@ 0x16e
 80036fe:	4313      	orrs	r3, r2
 8003700:	61bb      	str	r3, [r7, #24]
    updateAngleFromPosition(current_position);
 8003702:	69b9      	ldr	r1, [r7, #24]
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f000 f863 	bl	80037d0 <_ZN21ModbusAbsoluteEncoder23updateAngleFromPositionEm>
    
    return cached_angle;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	edd3 7a62 	vldr	s15, [r3, #392]	@ 0x188
}
 8003710:	eeb0 0a67 	vmov.f32	s0, s15
 8003714:	3720      	adds	r7, #32
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	f3af 8000 	nop.w
 8003720:	54442d18 	.word	0x54442d18
 8003724:	400921fb 	.word	0x400921fb
 8003728:	00000000 	.word	0x00000000
 800372c:	3a490fdb 	.word	0x3a490fdb

08003730 <_ZN21ModbusAbsoluteEncoder19asyncUpdateCallbackEv>:

void ModbusAbsoluteEncoder::asyncUpdateCallback() {
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
    if(!async_enabled) return;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f893 318c 	ldrb.w	r3, [r3, #396]	@ 0x18c
 800373e:	b2db      	uxtb	r3, r3
 8003740:	f083 0301 	eor.w	r3, r3, #1
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d122      	bne.n	8003790 <_ZN21ModbusAbsoluteEncoder19asyncUpdateCallbackEv+0x60>

    switch(modbus_state) {
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f893 3185 	ldrb.w	r3, [r3, #389]	@ 0x185
 8003750:	2b00      	cmp	r3, #0
 8003752:	d002      	beq.n	800375a <_ZN21ModbusAbsoluteEncoder19asyncUpdateCallbackEv+0x2a>
 8003754:	2b01      	cmp	r3, #1
 8003756:	d004      	beq.n	8003762 <_ZN21ModbusAbsoluteEncoder19asyncUpdateCallbackEv+0x32>
 8003758:	e01b      	b.n	8003792 <_ZN21ModbusAbsoluteEncoder19asyncUpdateCallbackEv+0x62>
        case IDLE:
            sendModbusQuery();
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f7ff fea0 	bl	80034a0 <_ZN21ModbusAbsoluteEncoder15sendModbusQueryEv>
//             printf("Sending query...");
            break;
 8003760:	e017      	b.n	8003792 <_ZN21ModbusAbsoluteEncoder19asyncUpdateCallbackEv+0x62>
        case QUERY_SENT:
            if(checkModbusResponse()) {
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f7ff feca 	bl	80034fc <_ZN21ModbusAbsoluteEncoder19checkModbusResponseEv>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d004      	beq.n	8003778 <_ZN21ModbusAbsoluteEncoder19asyncUpdateCallbackEv+0x48>
                modbus_state = IDLE;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 2185 	strb.w	r2, [r3, #389]	@ 0x185
                // timeout
                comm_ok = false;
                modbus_state = IDLE;
                printf("Timeout, retrying...");
            }
            break;
 8003776:	e00c      	b.n	8003792 <_ZN21ModbusAbsoluteEncoder19asyncUpdateCallbackEv+0x62>
                comm_ok = false;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 2184 	strb.w	r2, [r3, #388]	@ 0x184
                modbus_state = IDLE;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 2185 	strb.w	r2, [r3, #389]	@ 0x185
                printf("Timeout, retrying...");
 8003788:	4803      	ldr	r0, [pc, #12]	@ (8003798 <_ZN21ModbusAbsoluteEncoder19asyncUpdateCallbackEv+0x68>)
 800378a:	f012 fff9 	bl	8016780 <iprintf>
            break;
 800378e:	e000      	b.n	8003792 <_ZN21ModbusAbsoluteEncoder19asyncUpdateCallbackEv+0x62>
    if(!async_enabled) return;
 8003790:	bf00      	nop
    }
}
 8003792:	3708      	adds	r7, #8
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	08017b30 	.word	0x08017b30

0800379c <_ZN21ModbusAbsoluteEncoder14getSensorAngleEv>:

float ModbusAbsoluteEncoder::getSensorAngle() {
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
    return (float)(last_position % ENCODER_RESOLUTION) * RADIANS_PER_COUNT;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 80037aa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80037ae:	ee07 3a90 	vmov	s15, r3
 80037b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037b6:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80037cc <_ZN21ModbusAbsoluteEncoder14getSensorAngleEv+0x30>
 80037ba:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80037be:	eeb0 0a67 	vmov.f32	s0, s15
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr
 80037cc:	3a490fdb 	.word	0x3a490fdb

080037d0 <_ZN21ModbusAbsoluteEncoder23updateAngleFromPositionEm>:

uint32_t ModbusAbsoluteEncoder::reg2u32(uint16_t reg) {
    return (uint32_t)reg + ENCODER_ZERO_POSITION;
}

void ModbusAbsoluteEncoder::updateAngleFromPosition(uint32_t current_position) {
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
    if(first_read) {
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f893 319c 	ldrb.w	r3, [r3, #412]	@ 0x19c
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d007      	beq.n	80037f4 <_ZN21ModbusAbsoluteEncoder23updateAngleFromPositionEm+0x24>
        zero_position = current_position;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	683a      	ldr	r2, [r7, #0]
 80037e8:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
        first_read = false;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 219c 	strb.w	r2, [r3, #412]	@ 0x19c
    }

    last_position = current_position;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	683a      	ldr	r2, [r7, #0]
 80037f8:	f8c3 21a4 	str.w	r2, [r3, #420]	@ 0x1a4
    cached_angle = current_position * RADIANS_PER_COUNT;
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	ee07 3a90 	vmov	s15, r3
 8003802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003806:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8003830 <_ZN21ModbusAbsoluteEncoder23updateAngleFromPositionEm+0x60>
 800380a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	edc3 7a62 	vstr	s15, [r3, #392]	@ 0x188
    if(angleUpdateCallback) {
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 800381a:	2b00      	cmp	r3, #0
 800381c:	d004      	beq.n	8003828 <_ZN21ModbusAbsoluteEncoder23updateAngleFromPositionEm+0x58>
        angleUpdateCallback(current_position);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 8003824:	6838      	ldr	r0, [r7, #0]
 8003826:	4798      	blx	r3
    }
}
 8003828:	bf00      	nop
 800382a:	3708      	adds	r7, #8
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	3a490fdb 	.word	0x3a490fdb

08003834 <_ZN21ModbusAbsoluteEncoder22setAngleUpdateCallbackEPFvmE>:

void ModbusAbsoluteEncoder::setAngleUpdateCallback(void (*callback)(uint32_t position)) {
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
    angleUpdateCallback = callback;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	683a      	ldr	r2, [r7, #0]
 8003842:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
}
 8003846:	bf00      	nop
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr

08003852 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8003852:	b480      	push	{r7}
 8003854:	b083      	sub	sp, #12
 8003856:	af00      	add	r7, sp, #0
 8003858:	ed87 0a01 	vstr	s0, [r7, #4]
 800385c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003860:	eef0 7ae7 	vabs.f32	s15, s15
 8003864:	eeb0 0a67 	vmov.f32	s0, s15
 8003868:	370c      	adds	r7, #12
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
	...

08003874 <_ZN6Sensor6updateEv>:
#include "main.h"
#include <cmath>
#include "cmsis_os.h"
#define _2PI 6.28318530718f

void Sensor::update() {
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
    float val = getSensorAngle();
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	331c      	adds	r3, #28
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	4798      	blx	r3
 8003888:	ed87 0a03 	vstr	s0, [r7, #12]
    if (val<0) // sensor angles are strictly non-negative. Negative values are used to signal errors.
 800388c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003890:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003898:	d434      	bmi.n	8003904 <_ZN6Sensor6updateEv+0x90>
        return; // TODO signal error, e.g. via a flag and counter
    angle_prev_ts = HAL_GetTick();
 800389a:	f000 fa45 	bl	8003d28 <HAL_GetTick>
 800389e:	4603      	mov	r3, r0
 80038a0:	461a      	mov	r2, r3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	611a      	str	r2, [r3, #16]
    float d_angle = val - angle_prev;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	edd3 7a03 	vldr	s15, [r3, #12]
 80038ac:	ed97 7a03 	vldr	s14, [r7, #12]
 80038b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038b4:	edc7 7a02 	vstr	s15, [r7, #8]
    // if overflow happened track it as full rotation
    if(abs(d_angle) > (0.8f*_2PI) ) full_rotations += ( d_angle > 0 ) ? -1 : 1; 
 80038b8:	ed97 0a02 	vldr	s0, [r7, #8]
 80038bc:	f7ff ffc9 	bl	8003852 <_ZSt3absf>
 80038c0:	eef0 7a40 	vmov.f32	s15, s0
 80038c4:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 800390c <_ZN6Sensor6updateEv+0x98>
 80038c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038d0:	bfcc      	ite	gt
 80038d2:	2301      	movgt	r3, #1
 80038d4:	2300      	movle	r3, #0
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00f      	beq.n	80038fc <_ZN6Sensor6updateEv+0x88>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	69db      	ldr	r3, [r3, #28]
 80038e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80038e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80038e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038ec:	dd02      	ble.n	80038f4 <_ZN6Sensor6updateEv+0x80>
 80038ee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80038f2:	e000      	b.n	80038f6 <_ZN6Sensor6updateEv+0x82>
 80038f4:	2201      	movs	r2, #1
 80038f6:	441a      	add	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	61da      	str	r2, [r3, #28]
    angle_prev = val;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	60da      	str	r2, [r3, #12]
 8003902:	e000      	b.n	8003906 <_ZN6Sensor6updateEv+0x92>
        return; // TODO signal error, e.g. via a flag and counter
 8003904:	bf00      	nop
}
 8003906:	3710      	adds	r7, #16
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	40a0d97c 	.word	0x40a0d97c

08003910 <_ZN6Sensor11getVelocityEv>:


 /** get current angular velocity (rad/s) */
float Sensor::getVelocity() {
 8003910:	b480      	push	{r7}
 8003912:	b085      	sub	sp, #20
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
    // calculate sample time
    float Ts = (angle_prev_ts - vel_angle_prev_ts)*1e-6f;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	691a      	ldr	r2, [r3, #16]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	699b      	ldr	r3, [r3, #24]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	ee07 3a90 	vmov	s15, r3
 8003926:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800392a:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80039e8 <_ZN6Sensor11getVelocityEv+0xd8>
 800392e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003932:	edc7 7a03 	vstr	s15, [r7, #12]
    if (Ts < 0.0f) {    // handle micros() overflow - we need to reset vel_angle_prev_ts
 8003936:	edd7 7a03 	vldr	s15, [r7, #12]
 800393a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800393e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003942:	d50e      	bpl.n	8003962 <_ZN6Sensor11getVelocityEv+0x52>
        vel_angle_prev = angle_prev;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	68da      	ldr	r2, [r3, #12]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	615a      	str	r2, [r3, #20]
        vel_full_rotations = full_rotations;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	69da      	ldr	r2, [r3, #28]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	621a      	str	r2, [r3, #32]
        vel_angle_prev_ts = angle_prev_ts;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	691a      	ldr	r2, [r3, #16]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	619a      	str	r2, [r3, #24]
        return velocity;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	e038      	b.n	80039d4 <_ZN6Sensor11getVelocityEv+0xc4>
    }
    if (Ts < min_elapsed_time) return velocity; // don't update velocity if deltaT is too small
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	edd3 7a01 	vldr	s15, [r3, #4]
 8003968:	ed97 7a03 	vldr	s14, [r7, #12]
 800396c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003974:	d502      	bpl.n	800397c <_ZN6Sensor11getVelocityEv+0x6c>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	e02b      	b.n	80039d4 <_ZN6Sensor11getVelocityEv+0xc4>

    velocity = ( (float)(full_rotations - vel_full_rotations)*_2PI + (angle_prev - vel_angle_prev) ) / Ts;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	69da      	ldr	r2, [r3, #28]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a1b      	ldr	r3, [r3, #32]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	ee07 3a90 	vmov	s15, r3
 800398a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800398e:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80039ec <_ZN6Sensor11getVelocityEv+0xdc>
 8003992:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	edd3 6a03 	vldr	s13, [r3, #12]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	edd3 7a05 	vldr	s15, [r3, #20]
 80039a2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80039a6:	ee77 6a27 	vadd.f32	s13, s14, s15
 80039aa:	ed97 7a03 	vldr	s14, [r7, #12]
 80039ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	edc3 7a02 	vstr	s15, [r3, #8]
    vel_angle_prev = angle_prev;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	68da      	ldr	r2, [r3, #12]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	615a      	str	r2, [r3, #20]
    vel_full_rotations = full_rotations;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	69da      	ldr	r2, [r3, #28]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	621a      	str	r2, [r3, #32]
    vel_angle_prev_ts = angle_prev_ts;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	691a      	ldr	r2, [r3, #16]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	619a      	str	r2, [r3, #24]
    return velocity;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	689b      	ldr	r3, [r3, #8]
}
 80039d4:	ee07 3a90 	vmov	s15, r3
 80039d8:	eeb0 0a67 	vmov.f32	s0, s15
 80039dc:	3714      	adds	r7, #20
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	358637bd 	.word	0x358637bd
 80039ec:	40c90fdb 	.word	0x40c90fdb

080039f0 <_ZN6Sensor4initEv>:



void Sensor::init() {
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
    // initialize all the internal variables of Sensor to ensure a "smooth" startup (without a 'jump' from zero)
    getSensorAngle(); // call once
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	331c      	adds	r3, #28
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	4798      	blx	r3
    osDelay(1);
 8003a04:	2001      	movs	r0, #1
 8003a06:	f00e fcb5 	bl	8012374 <osDelay>
    vel_angle_prev = getSensorAngle(); // call again
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	331c      	adds	r3, #28
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	4798      	blx	r3
 8003a16:	eef0 7a40 	vmov.f32	s15, s0
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	edc3 7a05 	vstr	s15, [r3, #20]
    vel_angle_prev_ts = HAL_GetTick();
 8003a20:	f000 f982 	bl	8003d28 <HAL_GetTick>
 8003a24:	4603      	mov	r3, r0
 8003a26:	461a      	mov	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	619a      	str	r2, [r3, #24]
    osDelay(1);
 8003a2c:	2001      	movs	r0, #1
 8003a2e:	f00e fca1 	bl	8012374 <osDelay>
    getSensorAngle(); // call once
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	331c      	adds	r3, #28
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	4798      	blx	r3
    osDelay(1);
 8003a3e:	2001      	movs	r0, #1
 8003a40:	f00e fc98 	bl	8012374 <osDelay>
    angle_prev = getSensorAngle(); // call again
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	331c      	adds	r3, #28
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	4798      	blx	r3
 8003a50:	eef0 7a40 	vmov.f32	s15, s0
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	edc3 7a03 	vstr	s15, [r3, #12]
    angle_prev_ts = HAL_GetTick();
 8003a5a:	f000 f965 	bl	8003d28 <HAL_GetTick>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	461a      	mov	r2, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	611a      	str	r2, [r3, #16]
}
 8003a66:	bf00      	nop
 8003a68:	3708      	adds	r7, #8
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <_ZN6Sensor18getMechanicalAngleEv>:


float Sensor::getMechanicalAngle() {
 8003a6e:	b480      	push	{r7}
 8003a70:	b083      	sub	sp, #12
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
    return angle_prev;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	ee07 3a90 	vmov	s15, r3
}
 8003a7e:	eeb0 0a67 	vmov.f32	s0, s15
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <_ZN6Sensor8getAngleEv>:



float Sensor::getAngle(){
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
    return (float)full_rotations * _2PI + angle_prev;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	69db      	ldr	r3, [r3, #28]
 8003a98:	ee07 3a90 	vmov	s15, r3
 8003a9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003aa0:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8003ac0 <_ZN6Sensor8getAngleEv+0x34>
 8003aa4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	edd3 7a03 	vldr	s15, [r3, #12]
 8003aae:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8003ab2:	eeb0 0a67 	vmov.f32	s0, s15
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr
 8003ac0:	40c90fdb 	.word	0x40c90fdb
 8003ac4:	00000000 	.word	0x00000000

08003ac8 <_ZN6Sensor15getPreciseAngleEv>:



double Sensor::getPreciseAngle() {
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
    return (double)full_rotations * (double)_2PI + (double)angle_prev;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	69db      	ldr	r3, [r3, #28]
 8003ad4:	ee07 3a90 	vmov	s15, r3
 8003ad8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003adc:	ed9f 6b08 	vldr	d6, [pc, #32]	@ 8003b00 <_ZN6Sensor15getPreciseAngleEv+0x38>
 8003ae0:	ee27 6b06 	vmul.f64	d6, d7, d6
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	edd3 7a03 	vldr	s15, [r3, #12]
 8003aea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003aee:	ee36 7b07 	vadd.f64	d7, d6, d7
}
 8003af2:	eeb0 0b47 	vmov.f64	d0, d7
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr
 8003b00:	60000000 	.word	0x60000000
 8003b04:	401921fb 	.word	0x401921fb

08003b08 <_ZN6Sensor16getFullRotationsEv>:



int32_t Sensor::getFullRotations() {
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
    return full_rotations;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	69db      	ldr	r3, [r3, #28]
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <_ZN6Sensor11needsSearchEv>:



int Sensor::needsSearch() {
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
    return 0; // default false
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	370c      	adds	r7, #12
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
	...

08003b38 <HAL_UART_TxCpltCallback>:
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b086      	sub	sp, #24
 8003b3c:	af02      	add	r7, sp, #8
 8003b3e:	6078      	str	r0, [r7, #4]
	/* Modbus RTU TX callback BEGIN */
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8003b40:	2300      	movs	r3, #0
 8003b42:	60bb      	str	r3, [r7, #8]
	int i;
	for (i = 0; i < numberHandlers; i++ )
 8003b44:	2300      	movs	r3, #0
 8003b46:	60fb      	str	r3, [r7, #12]
 8003b48:	e019      	b.n	8003b7e <HAL_UART_TxCpltCallback+0x46>
	{
	   	if (mHandlers[i]->port == huart  )
 8003b4a:	4a17      	ldr	r2, [pc, #92]	@ (8003ba8 <HAL_UART_TxCpltCallback+0x70>)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d10e      	bne.n	8003b78 <HAL_UART_TxCpltCallback+0x40>
	   	{
	   		// notify the end of TX
	   		xTaskNotifyFromISR(mHandlers[i]->myTaskModbusAHandle, 0, eNoAction, &xHigherPriorityTaskWoken);
 8003b5a:	4a13      	ldr	r2, [pc, #76]	@ (8003ba8 <HAL_UART_TxCpltCallback+0x70>)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b62:	f8d3 00b0 	ldr.w	r0, [r3, #176]	@ 0xb0
 8003b66:	f107 0308 	add.w	r3, r7, #8
 8003b6a:	9300      	str	r3, [sp, #0]
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	2200      	movs	r2, #0
 8003b70:	2100      	movs	r1, #0
 8003b72:	f011 fb2f 	bl	80151d4 <xTaskGenericNotifyFromISR>
	   		break;
 8003b76:	e008      	b.n	8003b8a <HAL_UART_TxCpltCallback+0x52>
	for (i = 0; i < numberHandlers; i++ )
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	60fb      	str	r3, [r7, #12]
 8003b7e:	4b0b      	ldr	r3, [pc, #44]	@ (8003bac <HAL_UART_TxCpltCallback+0x74>)
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	461a      	mov	r2, r3
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	4293      	cmp	r3, r2
 8003b88:	dbdf      	blt.n	8003b4a <HAL_UART_TxCpltCallback+0x12>
	   	}

	}
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d007      	beq.n	8003ba0 <HAL_UART_TxCpltCallback+0x68>
 8003b90:	4b07      	ldr	r3, [pc, #28]	@ (8003bb0 <HAL_UART_TxCpltCallback+0x78>)
 8003b92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b96:	601a      	str	r2, [r3, #0]
 8003b98:	f3bf 8f4f 	dsb	sy
 8003b9c:	f3bf 8f6f 	isb	sy
	/*
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 * */

}
 8003ba0:	bf00      	nop
 8003ba2:	3710      	adds	r7, #16
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	24000a1c 	.word	0x24000a1c
 8003bac:	24000a24 	.word	0x24000a24
 8003bb0:	e000ed04 	.word	0xe000ed04

08003bb4 <HAL_UART_RxCpltCallback>:
 * user should implement the correct control flow and verification to maintain
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8003bb4:	b590      	push	{r4, r7, lr}
 8003bb6:	b087      	sub	sp, #28
 8003bb8:	af02      	add	r7, sp, #8
 8003bba:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	60bb      	str	r3, [r7, #8]

	/* Modbus RTU RX callback BEGIN */
    int i;
    for (i = 0; i < numberHandlers; i++ )
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	60fb      	str	r3, [r7, #12]
 8003bc4:	e042      	b.n	8003c4c <HAL_UART_RxCpltCallback+0x98>
    {
    	if (mHandlers[i]->port == UartHandle  )
 8003bc6:	4a2d      	ldr	r2, [pc, #180]	@ (8003c7c <HAL_UART_RxCpltCallback+0xc8>)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d137      	bne.n	8003c46 <HAL_UART_RxCpltCallback+0x92>
    	{

    		if(mHandlers[i]->xTypeHW == USART_HW)
 8003bd6:	4a29      	ldr	r2, [pc, #164]	@ (8003c7c <HAL_UART_RxCpltCallback+0xc8>)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bde:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d139      	bne.n	8003c5a <HAL_UART_RxCpltCallback+0xa6>
    		{
    			RingAdd(&mHandlers[i]->xBufferRX, mHandlers[i]->dataRX);
 8003be6:	4a25      	ldr	r2, [pc, #148]	@ (8003c7c <HAL_UART_RxCpltCallback+0xc8>)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bee:	f103 02c0 	add.w	r2, r3, #192	@ 0xc0
 8003bf2:	4922      	ldr	r1, [pc, #136]	@ (8003c7c <HAL_UART_RxCpltCallback+0xc8>)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003bfa:	f893 30a6 	ldrb.w	r3, [r3, #166]	@ 0xa6
 8003bfe:	4619      	mov	r1, r3
 8003c00:	4610      	mov	r0, r2
 8003c02:	f7fd ff51 	bl	8001aa8 <RingAdd>
    			HAL_UART_Receive_IT(mHandlers[i]->port, &mHandlers[i]->dataRX, 1);
 8003c06:	4a1d      	ldr	r2, [pc, #116]	@ (8003c7c <HAL_UART_RxCpltCallback+0xc8>)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c0e:	6858      	ldr	r0, [r3, #4]
 8003c10:	4a1a      	ldr	r2, [pc, #104]	@ (8003c7c <HAL_UART_RxCpltCallback+0xc8>)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c18:	33a6      	adds	r3, #166	@ 0xa6
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	f007 fc6f 	bl	800b500 <HAL_UART_Receive_IT>
    			xTimerResetFromISR(mHandlers[i]->xTimerT35, &xHigherPriorityTaskWoken);
 8003c22:	4a16      	ldr	r2, [pc, #88]	@ (8003c7c <HAL_UART_RxCpltCallback+0xc8>)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c2a:	f8d3 40b4 	ldr.w	r4, [r3, #180]	@ 0xb4
 8003c2e:	f010 fc21 	bl	8014474 <xTaskGetTickCountFromISR>
 8003c32:	4602      	mov	r2, r0
 8003c34:	f107 0308 	add.w	r3, r7, #8
 8003c38:	2100      	movs	r1, #0
 8003c3a:	9100      	str	r1, [sp, #0]
 8003c3c:	2107      	movs	r1, #7
 8003c3e:	4620      	mov	r0, r4
 8003c40:	f011 fcaa 	bl	8015598 <xTimerGenericCommand>
    		}
    		break;
 8003c44:	e009      	b.n	8003c5a <HAL_UART_RxCpltCallback+0xa6>
    for (i = 0; i < numberHandlers; i++ )
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	3301      	adds	r3, #1
 8003c4a:	60fb      	str	r3, [r7, #12]
 8003c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8003c80 <HAL_UART_RxCpltCallback+0xcc>)
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	461a      	mov	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	4293      	cmp	r3, r2
 8003c56:	dbb6      	blt.n	8003bc6 <HAL_UART_RxCpltCallback+0x12>
 8003c58:	e000      	b.n	8003c5c <HAL_UART_RxCpltCallback+0xa8>
    		break;
 8003c5a:	bf00      	nop
    	}
    }
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d007      	beq.n	8003c72 <HAL_UART_RxCpltCallback+0xbe>
 8003c62:	4b08      	ldr	r3, [pc, #32]	@ (8003c84 <HAL_UART_RxCpltCallback+0xd0>)
 8003c64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c68:	601a      	str	r2, [r3, #0]
 8003c6a:	f3bf 8f4f 	dsb	sy
 8003c6e:	f3bf 8f6f 	isb	sy
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 *
	 * */

}
 8003c72:	bf00      	nop
 8003c74:	3714      	adds	r7, #20
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd90      	pop	{r4, r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	24000a1c 	.word	0x24000a1c
 8003c80:	24000a24 	.word	0x24000a24
 8003c84:	e000ed04 	.word	0xe000ed04

08003c88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c8e:	2003      	movs	r0, #3
 8003c90:	f000 f933 	bl	8003efa <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003c94:	f001 ff72 	bl	8005b7c <HAL_RCC_GetSysClockFreq>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	4b15      	ldr	r3, [pc, #84]	@ (8003cf0 <HAL_Init+0x68>)
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	0a1b      	lsrs	r3, r3, #8
 8003ca0:	f003 030f 	and.w	r3, r3, #15
 8003ca4:	4913      	ldr	r1, [pc, #76]	@ (8003cf4 <HAL_Init+0x6c>)
 8003ca6:	5ccb      	ldrb	r3, [r1, r3]
 8003ca8:	f003 031f 	and.w	r3, r3, #31
 8003cac:	fa22 f303 	lsr.w	r3, r2, r3
 8003cb0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003cb2:	4b0f      	ldr	r3, [pc, #60]	@ (8003cf0 <HAL_Init+0x68>)
 8003cb4:	699b      	ldr	r3, [r3, #24]
 8003cb6:	f003 030f 	and.w	r3, r3, #15
 8003cba:	4a0e      	ldr	r2, [pc, #56]	@ (8003cf4 <HAL_Init+0x6c>)
 8003cbc:	5cd3      	ldrb	r3, [r2, r3]
 8003cbe:	f003 031f 	and.w	r3, r3, #31
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	fa22 f303 	lsr.w	r3, r2, r3
 8003cc8:	4a0b      	ldr	r2, [pc, #44]	@ (8003cf8 <HAL_Init+0x70>)
 8003cca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003ccc:	4a0b      	ldr	r2, [pc, #44]	@ (8003cfc <HAL_Init+0x74>)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003cd2:	200f      	movs	r0, #15
 8003cd4:	f7fd fc9e 	bl	8001614 <HAL_InitTick>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d001      	beq.n	8003ce2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e002      	b.n	8003ce8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003ce2:	f7fd fb4d 	bl	8001380 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ce6:	2300      	movs	r3, #0
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3708      	adds	r7, #8
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	58024400 	.word	0x58024400
 8003cf4:	08017bc8 	.word	0x08017bc8
 8003cf8:	24000004 	.word	0x24000004
 8003cfc:	24000000 	.word	0x24000000

08003d00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d00:	b480      	push	{r7}
 8003d02:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003d04:	4b06      	ldr	r3, [pc, #24]	@ (8003d20 <HAL_IncTick+0x20>)
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	461a      	mov	r2, r3
 8003d0a:	4b06      	ldr	r3, [pc, #24]	@ (8003d24 <HAL_IncTick+0x24>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4413      	add	r3, r2
 8003d10:	4a04      	ldr	r2, [pc, #16]	@ (8003d24 <HAL_IncTick+0x24>)
 8003d12:	6013      	str	r3, [r2, #0]
}
 8003d14:	bf00      	nop
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	2400000c 	.word	0x2400000c
 8003d24:	24000a28 	.word	0x24000a28

08003d28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	af00      	add	r7, sp, #0
  return uwTick;
 8003d2c:	4b03      	ldr	r3, [pc, #12]	@ (8003d3c <HAL_GetTick+0x14>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	24000a28 	.word	0x24000a28

08003d40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d48:	f7ff ffee 	bl	8003d28 <HAL_GetTick>
 8003d4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d58:	d005      	beq.n	8003d66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d5a:	4b0a      	ldr	r3, [pc, #40]	@ (8003d84 <HAL_Delay+0x44>)
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	461a      	mov	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	4413      	add	r3, r2
 8003d64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003d66:	bf00      	nop
 8003d68:	f7ff ffde 	bl	8003d28 <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d8f7      	bhi.n	8003d68 <HAL_Delay+0x28>
  {
  }
}
 8003d78:	bf00      	nop
 8003d7a:	bf00      	nop
 8003d7c:	3710      	adds	r7, #16
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	2400000c 	.word	0x2400000c

08003d88 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003d8c:	4b03      	ldr	r3, [pc, #12]	@ (8003d9c <HAL_GetREVID+0x14>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	0c1b      	lsrs	r3, r3, #16
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr
 8003d9c:	5c001000 	.word	0x5c001000

08003da0 <__NVIC_SetPriorityGrouping>:
{
 8003da0:	b480      	push	{r7}
 8003da2:	b085      	sub	sp, #20
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f003 0307 	and.w	r3, r3, #7
 8003dae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003db0:	4b0b      	ldr	r3, [pc, #44]	@ (8003de0 <__NVIC_SetPriorityGrouping+0x40>)
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003db6:	68ba      	ldr	r2, [r7, #8]
 8003db8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003dc8:	4b06      	ldr	r3, [pc, #24]	@ (8003de4 <__NVIC_SetPriorityGrouping+0x44>)
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dce:	4a04      	ldr	r2, [pc, #16]	@ (8003de0 <__NVIC_SetPriorityGrouping+0x40>)
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	60d3      	str	r3, [r2, #12]
}
 8003dd4:	bf00      	nop
 8003dd6:	3714      	adds	r7, #20
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr
 8003de0:	e000ed00 	.word	0xe000ed00
 8003de4:	05fa0000 	.word	0x05fa0000

08003de8 <__NVIC_GetPriorityGrouping>:
{
 8003de8:	b480      	push	{r7}
 8003dea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003dec:	4b04      	ldr	r3, [pc, #16]	@ (8003e00 <__NVIC_GetPriorityGrouping+0x18>)
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	0a1b      	lsrs	r3, r3, #8
 8003df2:	f003 0307 	and.w	r3, r3, #7
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr
 8003e00:	e000ed00 	.word	0xe000ed00

08003e04 <__NVIC_EnableIRQ>:
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003e0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	db0b      	blt.n	8003e2e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e16:	88fb      	ldrh	r3, [r7, #6]
 8003e18:	f003 021f 	and.w	r2, r3, #31
 8003e1c:	4907      	ldr	r1, [pc, #28]	@ (8003e3c <__NVIC_EnableIRQ+0x38>)
 8003e1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e22:	095b      	lsrs	r3, r3, #5
 8003e24:	2001      	movs	r0, #1
 8003e26:	fa00 f202 	lsl.w	r2, r0, r2
 8003e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003e2e:	bf00      	nop
 8003e30:	370c      	adds	r7, #12
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	e000e100 	.word	0xe000e100

08003e40 <__NVIC_SetPriority>:
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	4603      	mov	r3, r0
 8003e48:	6039      	str	r1, [r7, #0]
 8003e4a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003e4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	db0a      	blt.n	8003e6a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	b2da      	uxtb	r2, r3
 8003e58:	490c      	ldr	r1, [pc, #48]	@ (8003e8c <__NVIC_SetPriority+0x4c>)
 8003e5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e5e:	0112      	lsls	r2, r2, #4
 8003e60:	b2d2      	uxtb	r2, r2
 8003e62:	440b      	add	r3, r1
 8003e64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003e68:	e00a      	b.n	8003e80 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	b2da      	uxtb	r2, r3
 8003e6e:	4908      	ldr	r1, [pc, #32]	@ (8003e90 <__NVIC_SetPriority+0x50>)
 8003e70:	88fb      	ldrh	r3, [r7, #6]
 8003e72:	f003 030f 	and.w	r3, r3, #15
 8003e76:	3b04      	subs	r3, #4
 8003e78:	0112      	lsls	r2, r2, #4
 8003e7a:	b2d2      	uxtb	r2, r2
 8003e7c:	440b      	add	r3, r1
 8003e7e:	761a      	strb	r2, [r3, #24]
}
 8003e80:	bf00      	nop
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr
 8003e8c:	e000e100 	.word	0xe000e100
 8003e90:	e000ed00 	.word	0xe000ed00

08003e94 <NVIC_EncodePriority>:
{
 8003e94:	b480      	push	{r7}
 8003e96:	b089      	sub	sp, #36	@ 0x24
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f003 0307 	and.w	r3, r3, #7
 8003ea6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	f1c3 0307 	rsb	r3, r3, #7
 8003eae:	2b04      	cmp	r3, #4
 8003eb0:	bf28      	it	cs
 8003eb2:	2304      	movcs	r3, #4
 8003eb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	3304      	adds	r3, #4
 8003eba:	2b06      	cmp	r3, #6
 8003ebc:	d902      	bls.n	8003ec4 <NVIC_EncodePriority+0x30>
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	3b03      	subs	r3, #3
 8003ec2:	e000      	b.n	8003ec6 <NVIC_EncodePriority+0x32>
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ec8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed2:	43da      	mvns	r2, r3
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	401a      	ands	r2, r3
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003edc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ee6:	43d9      	mvns	r1, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003eec:	4313      	orrs	r3, r2
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3724      	adds	r7, #36	@ 0x24
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr

08003efa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b082      	sub	sp, #8
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f7ff ff4c 	bl	8003da0 <__NVIC_SetPriorityGrouping>
}
 8003f08:	bf00      	nop
 8003f0a:	3708      	adds	r7, #8
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b086      	sub	sp, #24
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	4603      	mov	r3, r0
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	607a      	str	r2, [r7, #4]
 8003f1c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003f1e:	f7ff ff63 	bl	8003de8 <__NVIC_GetPriorityGrouping>
 8003f22:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	68b9      	ldr	r1, [r7, #8]
 8003f28:	6978      	ldr	r0, [r7, #20]
 8003f2a:	f7ff ffb3 	bl	8003e94 <NVIC_EncodePriority>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003f34:	4611      	mov	r1, r2
 8003f36:	4618      	mov	r0, r3
 8003f38:	f7ff ff82 	bl	8003e40 <__NVIC_SetPriority>
}
 8003f3c:	bf00      	nop
 8003f3e:	3718      	adds	r7, #24
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7ff ff56 	bl	8003e04 <__NVIC_EnableIRQ>
}
 8003f58:	bf00      	nop
 8003f5a:	3708      	adds	r7, #8
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003f60:	b480      	push	{r7}
 8003f62:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003f64:	f3bf 8f5f 	dmb	sy
}
 8003f68:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003f6a:	4b07      	ldr	r3, [pc, #28]	@ (8003f88 <HAL_MPU_Disable+0x28>)
 8003f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f6e:	4a06      	ldr	r2, [pc, #24]	@ (8003f88 <HAL_MPU_Disable+0x28>)
 8003f70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f74:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003f76:	4b05      	ldr	r3, [pc, #20]	@ (8003f8c <HAL_MPU_Disable+0x2c>)
 8003f78:	2200      	movs	r2, #0
 8003f7a:	605a      	str	r2, [r3, #4]
}
 8003f7c:	bf00      	nop
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	e000ed00 	.word	0xe000ed00
 8003f8c:	e000ed90 	.word	0xe000ed90

08003f90 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003f98:	4a0b      	ldr	r2, [pc, #44]	@ (8003fc8 <HAL_MPU_Enable+0x38>)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f043 0301 	orr.w	r3, r3, #1
 8003fa0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003fa2:	4b0a      	ldr	r3, [pc, #40]	@ (8003fcc <HAL_MPU_Enable+0x3c>)
 8003fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa6:	4a09      	ldr	r2, [pc, #36]	@ (8003fcc <HAL_MPU_Enable+0x3c>)
 8003fa8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fac:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003fae:	f3bf 8f4f 	dsb	sy
}
 8003fb2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003fb4:	f3bf 8f6f 	isb	sy
}
 8003fb8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003fba:	bf00      	nop
 8003fbc:	370c      	adds	r7, #12
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop
 8003fc8:	e000ed90 	.word	0xe000ed90
 8003fcc:	e000ed00 	.word	0xe000ed00

08003fd0 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	785a      	ldrb	r2, [r3, #1]
 8003fdc:	4b1d      	ldr	r3, [pc, #116]	@ (8004054 <HAL_MPU_ConfigRegion+0x84>)
 8003fde:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d029      	beq.n	800403c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8003fe8:	4a1a      	ldr	r2, [pc, #104]	@ (8004054 <HAL_MPU_ConfigRegion+0x84>)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	7b1b      	ldrb	r3, [r3, #12]
 8003ff4:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	7adb      	ldrb	r3, [r3, #11]
 8003ffa:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003ffc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	7a9b      	ldrb	r3, [r3, #10]
 8004002:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004004:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	7b5b      	ldrb	r3, [r3, #13]
 800400a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800400c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	7b9b      	ldrb	r3, [r3, #14]
 8004012:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004014:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	7bdb      	ldrb	r3, [r3, #15]
 800401a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800401c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	7a5b      	ldrb	r3, [r3, #9]
 8004022:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004024:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	7a1b      	ldrb	r3, [r3, #8]
 800402a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800402c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	7812      	ldrb	r2, [r2, #0]
 8004032:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004034:	4a07      	ldr	r2, [pc, #28]	@ (8004054 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004036:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004038:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800403a:	e005      	b.n	8004048 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 800403c:	4b05      	ldr	r3, [pc, #20]	@ (8004054 <HAL_MPU_ConfigRegion+0x84>)
 800403e:	2200      	movs	r2, #0
 8004040:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8004042:	4b04      	ldr	r3, [pc, #16]	@ (8004054 <HAL_MPU_ConfigRegion+0x84>)
 8004044:	2200      	movs	r2, #0
 8004046:	611a      	str	r2, [r3, #16]
}
 8004048:	bf00      	nop
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr
 8004054:	e000ed90 	.word	0xe000ed90

08004058 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b086      	sub	sp, #24
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004060:	f7ff fe62 	bl	8003d28 <HAL_GetTick>
 8004064:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d101      	bne.n	8004070 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e2dc      	b.n	800462a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004076:	b2db      	uxtb	r3, r3
 8004078:	2b02      	cmp	r3, #2
 800407a:	d008      	beq.n	800408e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2280      	movs	r2, #128	@ 0x80
 8004080:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e2cd      	b.n	800462a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a76      	ldr	r2, [pc, #472]	@ (800426c <HAL_DMA_Abort+0x214>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d04a      	beq.n	800412e <HAL_DMA_Abort+0xd6>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a74      	ldr	r2, [pc, #464]	@ (8004270 <HAL_DMA_Abort+0x218>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d045      	beq.n	800412e <HAL_DMA_Abort+0xd6>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a73      	ldr	r2, [pc, #460]	@ (8004274 <HAL_DMA_Abort+0x21c>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d040      	beq.n	800412e <HAL_DMA_Abort+0xd6>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a71      	ldr	r2, [pc, #452]	@ (8004278 <HAL_DMA_Abort+0x220>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d03b      	beq.n	800412e <HAL_DMA_Abort+0xd6>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a70      	ldr	r2, [pc, #448]	@ (800427c <HAL_DMA_Abort+0x224>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d036      	beq.n	800412e <HAL_DMA_Abort+0xd6>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a6e      	ldr	r2, [pc, #440]	@ (8004280 <HAL_DMA_Abort+0x228>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d031      	beq.n	800412e <HAL_DMA_Abort+0xd6>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a6d      	ldr	r2, [pc, #436]	@ (8004284 <HAL_DMA_Abort+0x22c>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d02c      	beq.n	800412e <HAL_DMA_Abort+0xd6>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a6b      	ldr	r2, [pc, #428]	@ (8004288 <HAL_DMA_Abort+0x230>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d027      	beq.n	800412e <HAL_DMA_Abort+0xd6>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a6a      	ldr	r2, [pc, #424]	@ (800428c <HAL_DMA_Abort+0x234>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d022      	beq.n	800412e <HAL_DMA_Abort+0xd6>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a68      	ldr	r2, [pc, #416]	@ (8004290 <HAL_DMA_Abort+0x238>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d01d      	beq.n	800412e <HAL_DMA_Abort+0xd6>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a67      	ldr	r2, [pc, #412]	@ (8004294 <HAL_DMA_Abort+0x23c>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d018      	beq.n	800412e <HAL_DMA_Abort+0xd6>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a65      	ldr	r2, [pc, #404]	@ (8004298 <HAL_DMA_Abort+0x240>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d013      	beq.n	800412e <HAL_DMA_Abort+0xd6>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a64      	ldr	r2, [pc, #400]	@ (800429c <HAL_DMA_Abort+0x244>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d00e      	beq.n	800412e <HAL_DMA_Abort+0xd6>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a62      	ldr	r2, [pc, #392]	@ (80042a0 <HAL_DMA_Abort+0x248>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d009      	beq.n	800412e <HAL_DMA_Abort+0xd6>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a61      	ldr	r2, [pc, #388]	@ (80042a4 <HAL_DMA_Abort+0x24c>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d004      	beq.n	800412e <HAL_DMA_Abort+0xd6>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a5f      	ldr	r2, [pc, #380]	@ (80042a8 <HAL_DMA_Abort+0x250>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d101      	bne.n	8004132 <HAL_DMA_Abort+0xda>
 800412e:	2301      	movs	r3, #1
 8004130:	e000      	b.n	8004134 <HAL_DMA_Abort+0xdc>
 8004132:	2300      	movs	r3, #0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d013      	beq.n	8004160 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f022 021e 	bic.w	r2, r2, #30
 8004146:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	695a      	ldr	r2, [r3, #20]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004156:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	617b      	str	r3, [r7, #20]
 800415e:	e00a      	b.n	8004176 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f022 020e 	bic.w	r2, r2, #14
 800416e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a3c      	ldr	r2, [pc, #240]	@ (800426c <HAL_DMA_Abort+0x214>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d072      	beq.n	8004266 <HAL_DMA_Abort+0x20e>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a3a      	ldr	r2, [pc, #232]	@ (8004270 <HAL_DMA_Abort+0x218>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d06d      	beq.n	8004266 <HAL_DMA_Abort+0x20e>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a39      	ldr	r2, [pc, #228]	@ (8004274 <HAL_DMA_Abort+0x21c>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d068      	beq.n	8004266 <HAL_DMA_Abort+0x20e>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a37      	ldr	r2, [pc, #220]	@ (8004278 <HAL_DMA_Abort+0x220>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d063      	beq.n	8004266 <HAL_DMA_Abort+0x20e>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a36      	ldr	r2, [pc, #216]	@ (800427c <HAL_DMA_Abort+0x224>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d05e      	beq.n	8004266 <HAL_DMA_Abort+0x20e>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a34      	ldr	r2, [pc, #208]	@ (8004280 <HAL_DMA_Abort+0x228>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d059      	beq.n	8004266 <HAL_DMA_Abort+0x20e>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a33      	ldr	r2, [pc, #204]	@ (8004284 <HAL_DMA_Abort+0x22c>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d054      	beq.n	8004266 <HAL_DMA_Abort+0x20e>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a31      	ldr	r2, [pc, #196]	@ (8004288 <HAL_DMA_Abort+0x230>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d04f      	beq.n	8004266 <HAL_DMA_Abort+0x20e>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a30      	ldr	r2, [pc, #192]	@ (800428c <HAL_DMA_Abort+0x234>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d04a      	beq.n	8004266 <HAL_DMA_Abort+0x20e>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a2e      	ldr	r2, [pc, #184]	@ (8004290 <HAL_DMA_Abort+0x238>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d045      	beq.n	8004266 <HAL_DMA_Abort+0x20e>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a2d      	ldr	r2, [pc, #180]	@ (8004294 <HAL_DMA_Abort+0x23c>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d040      	beq.n	8004266 <HAL_DMA_Abort+0x20e>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a2b      	ldr	r2, [pc, #172]	@ (8004298 <HAL_DMA_Abort+0x240>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d03b      	beq.n	8004266 <HAL_DMA_Abort+0x20e>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a2a      	ldr	r2, [pc, #168]	@ (800429c <HAL_DMA_Abort+0x244>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d036      	beq.n	8004266 <HAL_DMA_Abort+0x20e>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a28      	ldr	r2, [pc, #160]	@ (80042a0 <HAL_DMA_Abort+0x248>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d031      	beq.n	8004266 <HAL_DMA_Abort+0x20e>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a27      	ldr	r2, [pc, #156]	@ (80042a4 <HAL_DMA_Abort+0x24c>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d02c      	beq.n	8004266 <HAL_DMA_Abort+0x20e>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a25      	ldr	r2, [pc, #148]	@ (80042a8 <HAL_DMA_Abort+0x250>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d027      	beq.n	8004266 <HAL_DMA_Abort+0x20e>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a24      	ldr	r2, [pc, #144]	@ (80042ac <HAL_DMA_Abort+0x254>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d022      	beq.n	8004266 <HAL_DMA_Abort+0x20e>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a22      	ldr	r2, [pc, #136]	@ (80042b0 <HAL_DMA_Abort+0x258>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d01d      	beq.n	8004266 <HAL_DMA_Abort+0x20e>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a21      	ldr	r2, [pc, #132]	@ (80042b4 <HAL_DMA_Abort+0x25c>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d018      	beq.n	8004266 <HAL_DMA_Abort+0x20e>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a1f      	ldr	r2, [pc, #124]	@ (80042b8 <HAL_DMA_Abort+0x260>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d013      	beq.n	8004266 <HAL_DMA_Abort+0x20e>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a1e      	ldr	r2, [pc, #120]	@ (80042bc <HAL_DMA_Abort+0x264>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d00e      	beq.n	8004266 <HAL_DMA_Abort+0x20e>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a1c      	ldr	r2, [pc, #112]	@ (80042c0 <HAL_DMA_Abort+0x268>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d009      	beq.n	8004266 <HAL_DMA_Abort+0x20e>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a1b      	ldr	r2, [pc, #108]	@ (80042c4 <HAL_DMA_Abort+0x26c>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d004      	beq.n	8004266 <HAL_DMA_Abort+0x20e>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a19      	ldr	r2, [pc, #100]	@ (80042c8 <HAL_DMA_Abort+0x270>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d132      	bne.n	80042cc <HAL_DMA_Abort+0x274>
 8004266:	2301      	movs	r3, #1
 8004268:	e031      	b.n	80042ce <HAL_DMA_Abort+0x276>
 800426a:	bf00      	nop
 800426c:	40020010 	.word	0x40020010
 8004270:	40020028 	.word	0x40020028
 8004274:	40020040 	.word	0x40020040
 8004278:	40020058 	.word	0x40020058
 800427c:	40020070 	.word	0x40020070
 8004280:	40020088 	.word	0x40020088
 8004284:	400200a0 	.word	0x400200a0
 8004288:	400200b8 	.word	0x400200b8
 800428c:	40020410 	.word	0x40020410
 8004290:	40020428 	.word	0x40020428
 8004294:	40020440 	.word	0x40020440
 8004298:	40020458 	.word	0x40020458
 800429c:	40020470 	.word	0x40020470
 80042a0:	40020488 	.word	0x40020488
 80042a4:	400204a0 	.word	0x400204a0
 80042a8:	400204b8 	.word	0x400204b8
 80042ac:	58025408 	.word	0x58025408
 80042b0:	5802541c 	.word	0x5802541c
 80042b4:	58025430 	.word	0x58025430
 80042b8:	58025444 	.word	0x58025444
 80042bc:	58025458 	.word	0x58025458
 80042c0:	5802546c 	.word	0x5802546c
 80042c4:	58025480 	.word	0x58025480
 80042c8:	58025494 	.word	0x58025494
 80042cc:	2300      	movs	r3, #0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d007      	beq.n	80042e2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80042e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a6d      	ldr	r2, [pc, #436]	@ (800449c <HAL_DMA_Abort+0x444>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d04a      	beq.n	8004382 <HAL_DMA_Abort+0x32a>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a6b      	ldr	r2, [pc, #428]	@ (80044a0 <HAL_DMA_Abort+0x448>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d045      	beq.n	8004382 <HAL_DMA_Abort+0x32a>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a6a      	ldr	r2, [pc, #424]	@ (80044a4 <HAL_DMA_Abort+0x44c>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d040      	beq.n	8004382 <HAL_DMA_Abort+0x32a>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a68      	ldr	r2, [pc, #416]	@ (80044a8 <HAL_DMA_Abort+0x450>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d03b      	beq.n	8004382 <HAL_DMA_Abort+0x32a>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a67      	ldr	r2, [pc, #412]	@ (80044ac <HAL_DMA_Abort+0x454>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d036      	beq.n	8004382 <HAL_DMA_Abort+0x32a>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a65      	ldr	r2, [pc, #404]	@ (80044b0 <HAL_DMA_Abort+0x458>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d031      	beq.n	8004382 <HAL_DMA_Abort+0x32a>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a64      	ldr	r2, [pc, #400]	@ (80044b4 <HAL_DMA_Abort+0x45c>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d02c      	beq.n	8004382 <HAL_DMA_Abort+0x32a>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a62      	ldr	r2, [pc, #392]	@ (80044b8 <HAL_DMA_Abort+0x460>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d027      	beq.n	8004382 <HAL_DMA_Abort+0x32a>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a61      	ldr	r2, [pc, #388]	@ (80044bc <HAL_DMA_Abort+0x464>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d022      	beq.n	8004382 <HAL_DMA_Abort+0x32a>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a5f      	ldr	r2, [pc, #380]	@ (80044c0 <HAL_DMA_Abort+0x468>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d01d      	beq.n	8004382 <HAL_DMA_Abort+0x32a>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a5e      	ldr	r2, [pc, #376]	@ (80044c4 <HAL_DMA_Abort+0x46c>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d018      	beq.n	8004382 <HAL_DMA_Abort+0x32a>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a5c      	ldr	r2, [pc, #368]	@ (80044c8 <HAL_DMA_Abort+0x470>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d013      	beq.n	8004382 <HAL_DMA_Abort+0x32a>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a5b      	ldr	r2, [pc, #364]	@ (80044cc <HAL_DMA_Abort+0x474>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d00e      	beq.n	8004382 <HAL_DMA_Abort+0x32a>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a59      	ldr	r2, [pc, #356]	@ (80044d0 <HAL_DMA_Abort+0x478>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d009      	beq.n	8004382 <HAL_DMA_Abort+0x32a>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a58      	ldr	r2, [pc, #352]	@ (80044d4 <HAL_DMA_Abort+0x47c>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d004      	beq.n	8004382 <HAL_DMA_Abort+0x32a>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a56      	ldr	r2, [pc, #344]	@ (80044d8 <HAL_DMA_Abort+0x480>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d108      	bne.n	8004394 <HAL_DMA_Abort+0x33c>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f022 0201 	bic.w	r2, r2, #1
 8004390:	601a      	str	r2, [r3, #0]
 8004392:	e007      	b.n	80043a4 <HAL_DMA_Abort+0x34c>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f022 0201 	bic.w	r2, r2, #1
 80043a2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80043a4:	e013      	b.n	80043ce <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80043a6:	f7ff fcbf 	bl	8003d28 <HAL_GetTick>
 80043aa:	4602      	mov	r2, r0
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	2b05      	cmp	r3, #5
 80043b2:	d90c      	bls.n	80043ce <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2220      	movs	r2, #32
 80043b8:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2203      	movs	r2, #3
 80043be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e12d      	b.n	800462a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0301 	and.w	r3, r3, #1
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1e5      	bne.n	80043a6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a2f      	ldr	r2, [pc, #188]	@ (800449c <HAL_DMA_Abort+0x444>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d04a      	beq.n	800447a <HAL_DMA_Abort+0x422>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a2d      	ldr	r2, [pc, #180]	@ (80044a0 <HAL_DMA_Abort+0x448>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d045      	beq.n	800447a <HAL_DMA_Abort+0x422>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a2c      	ldr	r2, [pc, #176]	@ (80044a4 <HAL_DMA_Abort+0x44c>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d040      	beq.n	800447a <HAL_DMA_Abort+0x422>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a2a      	ldr	r2, [pc, #168]	@ (80044a8 <HAL_DMA_Abort+0x450>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d03b      	beq.n	800447a <HAL_DMA_Abort+0x422>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a29      	ldr	r2, [pc, #164]	@ (80044ac <HAL_DMA_Abort+0x454>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d036      	beq.n	800447a <HAL_DMA_Abort+0x422>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a27      	ldr	r2, [pc, #156]	@ (80044b0 <HAL_DMA_Abort+0x458>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d031      	beq.n	800447a <HAL_DMA_Abort+0x422>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a26      	ldr	r2, [pc, #152]	@ (80044b4 <HAL_DMA_Abort+0x45c>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d02c      	beq.n	800447a <HAL_DMA_Abort+0x422>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a24      	ldr	r2, [pc, #144]	@ (80044b8 <HAL_DMA_Abort+0x460>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d027      	beq.n	800447a <HAL_DMA_Abort+0x422>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a23      	ldr	r2, [pc, #140]	@ (80044bc <HAL_DMA_Abort+0x464>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d022      	beq.n	800447a <HAL_DMA_Abort+0x422>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a21      	ldr	r2, [pc, #132]	@ (80044c0 <HAL_DMA_Abort+0x468>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d01d      	beq.n	800447a <HAL_DMA_Abort+0x422>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a20      	ldr	r2, [pc, #128]	@ (80044c4 <HAL_DMA_Abort+0x46c>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d018      	beq.n	800447a <HAL_DMA_Abort+0x422>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a1e      	ldr	r2, [pc, #120]	@ (80044c8 <HAL_DMA_Abort+0x470>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d013      	beq.n	800447a <HAL_DMA_Abort+0x422>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a1d      	ldr	r2, [pc, #116]	@ (80044cc <HAL_DMA_Abort+0x474>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d00e      	beq.n	800447a <HAL_DMA_Abort+0x422>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a1b      	ldr	r2, [pc, #108]	@ (80044d0 <HAL_DMA_Abort+0x478>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d009      	beq.n	800447a <HAL_DMA_Abort+0x422>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a1a      	ldr	r2, [pc, #104]	@ (80044d4 <HAL_DMA_Abort+0x47c>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d004      	beq.n	800447a <HAL_DMA_Abort+0x422>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a18      	ldr	r2, [pc, #96]	@ (80044d8 <HAL_DMA_Abort+0x480>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d101      	bne.n	800447e <HAL_DMA_Abort+0x426>
 800447a:	2301      	movs	r3, #1
 800447c:	e000      	b.n	8004480 <HAL_DMA_Abort+0x428>
 800447e:	2300      	movs	r3, #0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d02b      	beq.n	80044dc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004488:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800448e:	f003 031f 	and.w	r3, r3, #31
 8004492:	223f      	movs	r2, #63	@ 0x3f
 8004494:	409a      	lsls	r2, r3
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	609a      	str	r2, [r3, #8]
 800449a:	e02a      	b.n	80044f2 <HAL_DMA_Abort+0x49a>
 800449c:	40020010 	.word	0x40020010
 80044a0:	40020028 	.word	0x40020028
 80044a4:	40020040 	.word	0x40020040
 80044a8:	40020058 	.word	0x40020058
 80044ac:	40020070 	.word	0x40020070
 80044b0:	40020088 	.word	0x40020088
 80044b4:	400200a0 	.word	0x400200a0
 80044b8:	400200b8 	.word	0x400200b8
 80044bc:	40020410 	.word	0x40020410
 80044c0:	40020428 	.word	0x40020428
 80044c4:	40020440 	.word	0x40020440
 80044c8:	40020458 	.word	0x40020458
 80044cc:	40020470 	.word	0x40020470
 80044d0:	40020488 	.word	0x40020488
 80044d4:	400204a0 	.word	0x400204a0
 80044d8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044e0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044e6:	f003 031f 	and.w	r3, r3, #31
 80044ea:	2201      	movs	r2, #1
 80044ec:	409a      	lsls	r2, r3
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a4f      	ldr	r2, [pc, #316]	@ (8004634 <HAL_DMA_Abort+0x5dc>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d072      	beq.n	80045e2 <HAL_DMA_Abort+0x58a>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a4d      	ldr	r2, [pc, #308]	@ (8004638 <HAL_DMA_Abort+0x5e0>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d06d      	beq.n	80045e2 <HAL_DMA_Abort+0x58a>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a4c      	ldr	r2, [pc, #304]	@ (800463c <HAL_DMA_Abort+0x5e4>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d068      	beq.n	80045e2 <HAL_DMA_Abort+0x58a>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a4a      	ldr	r2, [pc, #296]	@ (8004640 <HAL_DMA_Abort+0x5e8>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d063      	beq.n	80045e2 <HAL_DMA_Abort+0x58a>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a49      	ldr	r2, [pc, #292]	@ (8004644 <HAL_DMA_Abort+0x5ec>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d05e      	beq.n	80045e2 <HAL_DMA_Abort+0x58a>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a47      	ldr	r2, [pc, #284]	@ (8004648 <HAL_DMA_Abort+0x5f0>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d059      	beq.n	80045e2 <HAL_DMA_Abort+0x58a>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a46      	ldr	r2, [pc, #280]	@ (800464c <HAL_DMA_Abort+0x5f4>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d054      	beq.n	80045e2 <HAL_DMA_Abort+0x58a>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a44      	ldr	r2, [pc, #272]	@ (8004650 <HAL_DMA_Abort+0x5f8>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d04f      	beq.n	80045e2 <HAL_DMA_Abort+0x58a>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a43      	ldr	r2, [pc, #268]	@ (8004654 <HAL_DMA_Abort+0x5fc>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d04a      	beq.n	80045e2 <HAL_DMA_Abort+0x58a>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a41      	ldr	r2, [pc, #260]	@ (8004658 <HAL_DMA_Abort+0x600>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d045      	beq.n	80045e2 <HAL_DMA_Abort+0x58a>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a40      	ldr	r2, [pc, #256]	@ (800465c <HAL_DMA_Abort+0x604>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d040      	beq.n	80045e2 <HAL_DMA_Abort+0x58a>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a3e      	ldr	r2, [pc, #248]	@ (8004660 <HAL_DMA_Abort+0x608>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d03b      	beq.n	80045e2 <HAL_DMA_Abort+0x58a>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a3d      	ldr	r2, [pc, #244]	@ (8004664 <HAL_DMA_Abort+0x60c>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d036      	beq.n	80045e2 <HAL_DMA_Abort+0x58a>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a3b      	ldr	r2, [pc, #236]	@ (8004668 <HAL_DMA_Abort+0x610>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d031      	beq.n	80045e2 <HAL_DMA_Abort+0x58a>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a3a      	ldr	r2, [pc, #232]	@ (800466c <HAL_DMA_Abort+0x614>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d02c      	beq.n	80045e2 <HAL_DMA_Abort+0x58a>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a38      	ldr	r2, [pc, #224]	@ (8004670 <HAL_DMA_Abort+0x618>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d027      	beq.n	80045e2 <HAL_DMA_Abort+0x58a>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a37      	ldr	r2, [pc, #220]	@ (8004674 <HAL_DMA_Abort+0x61c>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d022      	beq.n	80045e2 <HAL_DMA_Abort+0x58a>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a35      	ldr	r2, [pc, #212]	@ (8004678 <HAL_DMA_Abort+0x620>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d01d      	beq.n	80045e2 <HAL_DMA_Abort+0x58a>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a34      	ldr	r2, [pc, #208]	@ (800467c <HAL_DMA_Abort+0x624>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d018      	beq.n	80045e2 <HAL_DMA_Abort+0x58a>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a32      	ldr	r2, [pc, #200]	@ (8004680 <HAL_DMA_Abort+0x628>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d013      	beq.n	80045e2 <HAL_DMA_Abort+0x58a>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a31      	ldr	r2, [pc, #196]	@ (8004684 <HAL_DMA_Abort+0x62c>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d00e      	beq.n	80045e2 <HAL_DMA_Abort+0x58a>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a2f      	ldr	r2, [pc, #188]	@ (8004688 <HAL_DMA_Abort+0x630>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d009      	beq.n	80045e2 <HAL_DMA_Abort+0x58a>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a2e      	ldr	r2, [pc, #184]	@ (800468c <HAL_DMA_Abort+0x634>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d004      	beq.n	80045e2 <HAL_DMA_Abort+0x58a>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a2c      	ldr	r2, [pc, #176]	@ (8004690 <HAL_DMA_Abort+0x638>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d101      	bne.n	80045e6 <HAL_DMA_Abort+0x58e>
 80045e2:	2301      	movs	r3, #1
 80045e4:	e000      	b.n	80045e8 <HAL_DMA_Abort+0x590>
 80045e6:	2300      	movs	r3, #0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d015      	beq.n	8004618 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80045f4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00c      	beq.n	8004618 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004608:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800460c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004616:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8004628:	2300      	movs	r3, #0
}
 800462a:	4618      	mov	r0, r3
 800462c:	3718      	adds	r7, #24
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	40020010 	.word	0x40020010
 8004638:	40020028 	.word	0x40020028
 800463c:	40020040 	.word	0x40020040
 8004640:	40020058 	.word	0x40020058
 8004644:	40020070 	.word	0x40020070
 8004648:	40020088 	.word	0x40020088
 800464c:	400200a0 	.word	0x400200a0
 8004650:	400200b8 	.word	0x400200b8
 8004654:	40020410 	.word	0x40020410
 8004658:	40020428 	.word	0x40020428
 800465c:	40020440 	.word	0x40020440
 8004660:	40020458 	.word	0x40020458
 8004664:	40020470 	.word	0x40020470
 8004668:	40020488 	.word	0x40020488
 800466c:	400204a0 	.word	0x400204a0
 8004670:	400204b8 	.word	0x400204b8
 8004674:	58025408 	.word	0x58025408
 8004678:	5802541c 	.word	0x5802541c
 800467c:	58025430 	.word	0x58025430
 8004680:	58025444 	.word	0x58025444
 8004684:	58025458 	.word	0x58025458
 8004688:	5802546c 	.word	0x5802546c
 800468c:	58025480 	.word	0x58025480
 8004690:	58025494 	.word	0x58025494

08004694 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d101      	bne.n	80046a6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e237      	b.n	8004b16 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d004      	beq.n	80046bc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2280      	movs	r2, #128	@ 0x80
 80046b6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e22c      	b.n	8004b16 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a5c      	ldr	r2, [pc, #368]	@ (8004834 <HAL_DMA_Abort_IT+0x1a0>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d04a      	beq.n	800475c <HAL_DMA_Abort_IT+0xc8>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a5b      	ldr	r2, [pc, #364]	@ (8004838 <HAL_DMA_Abort_IT+0x1a4>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d045      	beq.n	800475c <HAL_DMA_Abort_IT+0xc8>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a59      	ldr	r2, [pc, #356]	@ (800483c <HAL_DMA_Abort_IT+0x1a8>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d040      	beq.n	800475c <HAL_DMA_Abort_IT+0xc8>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a58      	ldr	r2, [pc, #352]	@ (8004840 <HAL_DMA_Abort_IT+0x1ac>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d03b      	beq.n	800475c <HAL_DMA_Abort_IT+0xc8>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a56      	ldr	r2, [pc, #344]	@ (8004844 <HAL_DMA_Abort_IT+0x1b0>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d036      	beq.n	800475c <HAL_DMA_Abort_IT+0xc8>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a55      	ldr	r2, [pc, #340]	@ (8004848 <HAL_DMA_Abort_IT+0x1b4>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d031      	beq.n	800475c <HAL_DMA_Abort_IT+0xc8>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a53      	ldr	r2, [pc, #332]	@ (800484c <HAL_DMA_Abort_IT+0x1b8>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d02c      	beq.n	800475c <HAL_DMA_Abort_IT+0xc8>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a52      	ldr	r2, [pc, #328]	@ (8004850 <HAL_DMA_Abort_IT+0x1bc>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d027      	beq.n	800475c <HAL_DMA_Abort_IT+0xc8>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a50      	ldr	r2, [pc, #320]	@ (8004854 <HAL_DMA_Abort_IT+0x1c0>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d022      	beq.n	800475c <HAL_DMA_Abort_IT+0xc8>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a4f      	ldr	r2, [pc, #316]	@ (8004858 <HAL_DMA_Abort_IT+0x1c4>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d01d      	beq.n	800475c <HAL_DMA_Abort_IT+0xc8>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a4d      	ldr	r2, [pc, #308]	@ (800485c <HAL_DMA_Abort_IT+0x1c8>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d018      	beq.n	800475c <HAL_DMA_Abort_IT+0xc8>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a4c      	ldr	r2, [pc, #304]	@ (8004860 <HAL_DMA_Abort_IT+0x1cc>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d013      	beq.n	800475c <HAL_DMA_Abort_IT+0xc8>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a4a      	ldr	r2, [pc, #296]	@ (8004864 <HAL_DMA_Abort_IT+0x1d0>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d00e      	beq.n	800475c <HAL_DMA_Abort_IT+0xc8>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a49      	ldr	r2, [pc, #292]	@ (8004868 <HAL_DMA_Abort_IT+0x1d4>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d009      	beq.n	800475c <HAL_DMA_Abort_IT+0xc8>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a47      	ldr	r2, [pc, #284]	@ (800486c <HAL_DMA_Abort_IT+0x1d8>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d004      	beq.n	800475c <HAL_DMA_Abort_IT+0xc8>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a46      	ldr	r2, [pc, #280]	@ (8004870 <HAL_DMA_Abort_IT+0x1dc>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d101      	bne.n	8004760 <HAL_DMA_Abort_IT+0xcc>
 800475c:	2301      	movs	r3, #1
 800475e:	e000      	b.n	8004762 <HAL_DMA_Abort_IT+0xce>
 8004760:	2300      	movs	r3, #0
 8004762:	2b00      	cmp	r3, #0
 8004764:	f000 8086 	beq.w	8004874 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2204      	movs	r2, #4
 800476c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a2f      	ldr	r2, [pc, #188]	@ (8004834 <HAL_DMA_Abort_IT+0x1a0>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d04a      	beq.n	8004810 <HAL_DMA_Abort_IT+0x17c>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a2e      	ldr	r2, [pc, #184]	@ (8004838 <HAL_DMA_Abort_IT+0x1a4>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d045      	beq.n	8004810 <HAL_DMA_Abort_IT+0x17c>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a2c      	ldr	r2, [pc, #176]	@ (800483c <HAL_DMA_Abort_IT+0x1a8>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d040      	beq.n	8004810 <HAL_DMA_Abort_IT+0x17c>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a2b      	ldr	r2, [pc, #172]	@ (8004840 <HAL_DMA_Abort_IT+0x1ac>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d03b      	beq.n	8004810 <HAL_DMA_Abort_IT+0x17c>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a29      	ldr	r2, [pc, #164]	@ (8004844 <HAL_DMA_Abort_IT+0x1b0>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d036      	beq.n	8004810 <HAL_DMA_Abort_IT+0x17c>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a28      	ldr	r2, [pc, #160]	@ (8004848 <HAL_DMA_Abort_IT+0x1b4>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d031      	beq.n	8004810 <HAL_DMA_Abort_IT+0x17c>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a26      	ldr	r2, [pc, #152]	@ (800484c <HAL_DMA_Abort_IT+0x1b8>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d02c      	beq.n	8004810 <HAL_DMA_Abort_IT+0x17c>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a25      	ldr	r2, [pc, #148]	@ (8004850 <HAL_DMA_Abort_IT+0x1bc>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d027      	beq.n	8004810 <HAL_DMA_Abort_IT+0x17c>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a23      	ldr	r2, [pc, #140]	@ (8004854 <HAL_DMA_Abort_IT+0x1c0>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d022      	beq.n	8004810 <HAL_DMA_Abort_IT+0x17c>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a22      	ldr	r2, [pc, #136]	@ (8004858 <HAL_DMA_Abort_IT+0x1c4>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d01d      	beq.n	8004810 <HAL_DMA_Abort_IT+0x17c>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a20      	ldr	r2, [pc, #128]	@ (800485c <HAL_DMA_Abort_IT+0x1c8>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d018      	beq.n	8004810 <HAL_DMA_Abort_IT+0x17c>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a1f      	ldr	r2, [pc, #124]	@ (8004860 <HAL_DMA_Abort_IT+0x1cc>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d013      	beq.n	8004810 <HAL_DMA_Abort_IT+0x17c>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a1d      	ldr	r2, [pc, #116]	@ (8004864 <HAL_DMA_Abort_IT+0x1d0>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d00e      	beq.n	8004810 <HAL_DMA_Abort_IT+0x17c>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a1c      	ldr	r2, [pc, #112]	@ (8004868 <HAL_DMA_Abort_IT+0x1d4>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d009      	beq.n	8004810 <HAL_DMA_Abort_IT+0x17c>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a1a      	ldr	r2, [pc, #104]	@ (800486c <HAL_DMA_Abort_IT+0x1d8>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d004      	beq.n	8004810 <HAL_DMA_Abort_IT+0x17c>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a19      	ldr	r2, [pc, #100]	@ (8004870 <HAL_DMA_Abort_IT+0x1dc>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d108      	bne.n	8004822 <HAL_DMA_Abort_IT+0x18e>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f022 0201 	bic.w	r2, r2, #1
 800481e:	601a      	str	r2, [r3, #0]
 8004820:	e178      	b.n	8004b14 <HAL_DMA_Abort_IT+0x480>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f022 0201 	bic.w	r2, r2, #1
 8004830:	601a      	str	r2, [r3, #0]
 8004832:	e16f      	b.n	8004b14 <HAL_DMA_Abort_IT+0x480>
 8004834:	40020010 	.word	0x40020010
 8004838:	40020028 	.word	0x40020028
 800483c:	40020040 	.word	0x40020040
 8004840:	40020058 	.word	0x40020058
 8004844:	40020070 	.word	0x40020070
 8004848:	40020088 	.word	0x40020088
 800484c:	400200a0 	.word	0x400200a0
 8004850:	400200b8 	.word	0x400200b8
 8004854:	40020410 	.word	0x40020410
 8004858:	40020428 	.word	0x40020428
 800485c:	40020440 	.word	0x40020440
 8004860:	40020458 	.word	0x40020458
 8004864:	40020470 	.word	0x40020470
 8004868:	40020488 	.word	0x40020488
 800486c:	400204a0 	.word	0x400204a0
 8004870:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f022 020e 	bic.w	r2, r2, #14
 8004882:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a6c      	ldr	r2, [pc, #432]	@ (8004a3c <HAL_DMA_Abort_IT+0x3a8>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d04a      	beq.n	8004924 <HAL_DMA_Abort_IT+0x290>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a6b      	ldr	r2, [pc, #428]	@ (8004a40 <HAL_DMA_Abort_IT+0x3ac>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d045      	beq.n	8004924 <HAL_DMA_Abort_IT+0x290>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a69      	ldr	r2, [pc, #420]	@ (8004a44 <HAL_DMA_Abort_IT+0x3b0>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d040      	beq.n	8004924 <HAL_DMA_Abort_IT+0x290>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a68      	ldr	r2, [pc, #416]	@ (8004a48 <HAL_DMA_Abort_IT+0x3b4>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d03b      	beq.n	8004924 <HAL_DMA_Abort_IT+0x290>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a66      	ldr	r2, [pc, #408]	@ (8004a4c <HAL_DMA_Abort_IT+0x3b8>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d036      	beq.n	8004924 <HAL_DMA_Abort_IT+0x290>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a65      	ldr	r2, [pc, #404]	@ (8004a50 <HAL_DMA_Abort_IT+0x3bc>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d031      	beq.n	8004924 <HAL_DMA_Abort_IT+0x290>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a63      	ldr	r2, [pc, #396]	@ (8004a54 <HAL_DMA_Abort_IT+0x3c0>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d02c      	beq.n	8004924 <HAL_DMA_Abort_IT+0x290>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a62      	ldr	r2, [pc, #392]	@ (8004a58 <HAL_DMA_Abort_IT+0x3c4>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d027      	beq.n	8004924 <HAL_DMA_Abort_IT+0x290>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a60      	ldr	r2, [pc, #384]	@ (8004a5c <HAL_DMA_Abort_IT+0x3c8>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d022      	beq.n	8004924 <HAL_DMA_Abort_IT+0x290>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a5f      	ldr	r2, [pc, #380]	@ (8004a60 <HAL_DMA_Abort_IT+0x3cc>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d01d      	beq.n	8004924 <HAL_DMA_Abort_IT+0x290>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a5d      	ldr	r2, [pc, #372]	@ (8004a64 <HAL_DMA_Abort_IT+0x3d0>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d018      	beq.n	8004924 <HAL_DMA_Abort_IT+0x290>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a5c      	ldr	r2, [pc, #368]	@ (8004a68 <HAL_DMA_Abort_IT+0x3d4>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d013      	beq.n	8004924 <HAL_DMA_Abort_IT+0x290>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a5a      	ldr	r2, [pc, #360]	@ (8004a6c <HAL_DMA_Abort_IT+0x3d8>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d00e      	beq.n	8004924 <HAL_DMA_Abort_IT+0x290>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a59      	ldr	r2, [pc, #356]	@ (8004a70 <HAL_DMA_Abort_IT+0x3dc>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d009      	beq.n	8004924 <HAL_DMA_Abort_IT+0x290>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a57      	ldr	r2, [pc, #348]	@ (8004a74 <HAL_DMA_Abort_IT+0x3e0>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d004      	beq.n	8004924 <HAL_DMA_Abort_IT+0x290>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a56      	ldr	r2, [pc, #344]	@ (8004a78 <HAL_DMA_Abort_IT+0x3e4>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d108      	bne.n	8004936 <HAL_DMA_Abort_IT+0x2a2>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f022 0201 	bic.w	r2, r2, #1
 8004932:	601a      	str	r2, [r3, #0]
 8004934:	e007      	b.n	8004946 <HAL_DMA_Abort_IT+0x2b2>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f022 0201 	bic.w	r2, r2, #1
 8004944:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a3c      	ldr	r2, [pc, #240]	@ (8004a3c <HAL_DMA_Abort_IT+0x3a8>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d072      	beq.n	8004a36 <HAL_DMA_Abort_IT+0x3a2>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a3a      	ldr	r2, [pc, #232]	@ (8004a40 <HAL_DMA_Abort_IT+0x3ac>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d06d      	beq.n	8004a36 <HAL_DMA_Abort_IT+0x3a2>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a39      	ldr	r2, [pc, #228]	@ (8004a44 <HAL_DMA_Abort_IT+0x3b0>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d068      	beq.n	8004a36 <HAL_DMA_Abort_IT+0x3a2>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a37      	ldr	r2, [pc, #220]	@ (8004a48 <HAL_DMA_Abort_IT+0x3b4>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d063      	beq.n	8004a36 <HAL_DMA_Abort_IT+0x3a2>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a36      	ldr	r2, [pc, #216]	@ (8004a4c <HAL_DMA_Abort_IT+0x3b8>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d05e      	beq.n	8004a36 <HAL_DMA_Abort_IT+0x3a2>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a34      	ldr	r2, [pc, #208]	@ (8004a50 <HAL_DMA_Abort_IT+0x3bc>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d059      	beq.n	8004a36 <HAL_DMA_Abort_IT+0x3a2>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a33      	ldr	r2, [pc, #204]	@ (8004a54 <HAL_DMA_Abort_IT+0x3c0>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d054      	beq.n	8004a36 <HAL_DMA_Abort_IT+0x3a2>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a31      	ldr	r2, [pc, #196]	@ (8004a58 <HAL_DMA_Abort_IT+0x3c4>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d04f      	beq.n	8004a36 <HAL_DMA_Abort_IT+0x3a2>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a30      	ldr	r2, [pc, #192]	@ (8004a5c <HAL_DMA_Abort_IT+0x3c8>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d04a      	beq.n	8004a36 <HAL_DMA_Abort_IT+0x3a2>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a2e      	ldr	r2, [pc, #184]	@ (8004a60 <HAL_DMA_Abort_IT+0x3cc>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d045      	beq.n	8004a36 <HAL_DMA_Abort_IT+0x3a2>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a2d      	ldr	r2, [pc, #180]	@ (8004a64 <HAL_DMA_Abort_IT+0x3d0>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d040      	beq.n	8004a36 <HAL_DMA_Abort_IT+0x3a2>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a2b      	ldr	r2, [pc, #172]	@ (8004a68 <HAL_DMA_Abort_IT+0x3d4>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d03b      	beq.n	8004a36 <HAL_DMA_Abort_IT+0x3a2>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a2a      	ldr	r2, [pc, #168]	@ (8004a6c <HAL_DMA_Abort_IT+0x3d8>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d036      	beq.n	8004a36 <HAL_DMA_Abort_IT+0x3a2>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a28      	ldr	r2, [pc, #160]	@ (8004a70 <HAL_DMA_Abort_IT+0x3dc>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d031      	beq.n	8004a36 <HAL_DMA_Abort_IT+0x3a2>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a27      	ldr	r2, [pc, #156]	@ (8004a74 <HAL_DMA_Abort_IT+0x3e0>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d02c      	beq.n	8004a36 <HAL_DMA_Abort_IT+0x3a2>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a25      	ldr	r2, [pc, #148]	@ (8004a78 <HAL_DMA_Abort_IT+0x3e4>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d027      	beq.n	8004a36 <HAL_DMA_Abort_IT+0x3a2>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a24      	ldr	r2, [pc, #144]	@ (8004a7c <HAL_DMA_Abort_IT+0x3e8>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d022      	beq.n	8004a36 <HAL_DMA_Abort_IT+0x3a2>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a22      	ldr	r2, [pc, #136]	@ (8004a80 <HAL_DMA_Abort_IT+0x3ec>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d01d      	beq.n	8004a36 <HAL_DMA_Abort_IT+0x3a2>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a21      	ldr	r2, [pc, #132]	@ (8004a84 <HAL_DMA_Abort_IT+0x3f0>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d018      	beq.n	8004a36 <HAL_DMA_Abort_IT+0x3a2>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a1f      	ldr	r2, [pc, #124]	@ (8004a88 <HAL_DMA_Abort_IT+0x3f4>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d013      	beq.n	8004a36 <HAL_DMA_Abort_IT+0x3a2>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a1e      	ldr	r2, [pc, #120]	@ (8004a8c <HAL_DMA_Abort_IT+0x3f8>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d00e      	beq.n	8004a36 <HAL_DMA_Abort_IT+0x3a2>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a1c      	ldr	r2, [pc, #112]	@ (8004a90 <HAL_DMA_Abort_IT+0x3fc>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d009      	beq.n	8004a36 <HAL_DMA_Abort_IT+0x3a2>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a1b      	ldr	r2, [pc, #108]	@ (8004a94 <HAL_DMA_Abort_IT+0x400>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d004      	beq.n	8004a36 <HAL_DMA_Abort_IT+0x3a2>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a19      	ldr	r2, [pc, #100]	@ (8004a98 <HAL_DMA_Abort_IT+0x404>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d132      	bne.n	8004a9c <HAL_DMA_Abort_IT+0x408>
 8004a36:	2301      	movs	r3, #1
 8004a38:	e031      	b.n	8004a9e <HAL_DMA_Abort_IT+0x40a>
 8004a3a:	bf00      	nop
 8004a3c:	40020010 	.word	0x40020010
 8004a40:	40020028 	.word	0x40020028
 8004a44:	40020040 	.word	0x40020040
 8004a48:	40020058 	.word	0x40020058
 8004a4c:	40020070 	.word	0x40020070
 8004a50:	40020088 	.word	0x40020088
 8004a54:	400200a0 	.word	0x400200a0
 8004a58:	400200b8 	.word	0x400200b8
 8004a5c:	40020410 	.word	0x40020410
 8004a60:	40020428 	.word	0x40020428
 8004a64:	40020440 	.word	0x40020440
 8004a68:	40020458 	.word	0x40020458
 8004a6c:	40020470 	.word	0x40020470
 8004a70:	40020488 	.word	0x40020488
 8004a74:	400204a0 	.word	0x400204a0
 8004a78:	400204b8 	.word	0x400204b8
 8004a7c:	58025408 	.word	0x58025408
 8004a80:	5802541c 	.word	0x5802541c
 8004a84:	58025430 	.word	0x58025430
 8004a88:	58025444 	.word	0x58025444
 8004a8c:	58025458 	.word	0x58025458
 8004a90:	5802546c 	.word	0x5802546c
 8004a94:	58025480 	.word	0x58025480
 8004a98:	58025494 	.word	0x58025494
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d028      	beq.n	8004af4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004aac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004ab0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ab6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004abc:	f003 031f 	and.w	r3, r3, #31
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	409a      	lsls	r2, r3
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004ad0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d00c      	beq.n	8004af4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ae4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004ae8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004af2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d003      	beq.n	8004b14 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3710      	adds	r7, #16
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop

08004b20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b089      	sub	sp, #36	@ 0x24
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004b2e:	4b89      	ldr	r3, [pc, #548]	@ (8004d54 <HAL_GPIO_Init+0x234>)
 8004b30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004b32:	e194      	b.n	8004e5e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	2101      	movs	r1, #1
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b40:	4013      	ands	r3, r2
 8004b42:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	f000 8186 	beq.w	8004e58 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f003 0303 	and.w	r3, r3, #3
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d005      	beq.n	8004b64 <HAL_GPIO_Init+0x44>
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	f003 0303 	and.w	r3, r3, #3
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d130      	bne.n	8004bc6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004b6a:	69fb      	ldr	r3, [r7, #28]
 8004b6c:	005b      	lsls	r3, r3, #1
 8004b6e:	2203      	movs	r2, #3
 8004b70:	fa02 f303 	lsl.w	r3, r2, r3
 8004b74:	43db      	mvns	r3, r3
 8004b76:	69ba      	ldr	r2, [r7, #24]
 8004b78:	4013      	ands	r3, r2
 8004b7a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	68da      	ldr	r2, [r3, #12]
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	005b      	lsls	r3, r3, #1
 8004b84:	fa02 f303 	lsl.w	r3, r2, r3
 8004b88:	69ba      	ldr	r2, [r7, #24]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	69ba      	ldr	r2, [r7, #24]
 8004b92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	69fb      	ldr	r3, [r7, #28]
 8004b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba2:	43db      	mvns	r3, r3
 8004ba4:	69ba      	ldr	r2, [r7, #24]
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	091b      	lsrs	r3, r3, #4
 8004bb0:	f003 0201 	and.w	r2, r3, #1
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bba:	69ba      	ldr	r2, [r7, #24]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	69ba      	ldr	r2, [r7, #24]
 8004bc4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	f003 0303 	and.w	r3, r3, #3
 8004bce:	2b03      	cmp	r3, #3
 8004bd0:	d017      	beq.n	8004c02 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	005b      	lsls	r3, r3, #1
 8004bdc:	2203      	movs	r2, #3
 8004bde:	fa02 f303 	lsl.w	r3, r2, r3
 8004be2:	43db      	mvns	r3, r3
 8004be4:	69ba      	ldr	r2, [r7, #24]
 8004be6:	4013      	ands	r3, r2
 8004be8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	689a      	ldr	r2, [r3, #8]
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	005b      	lsls	r3, r3, #1
 8004bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf6:	69ba      	ldr	r2, [r7, #24]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	69ba      	ldr	r2, [r7, #24]
 8004c00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	f003 0303 	and.w	r3, r3, #3
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d123      	bne.n	8004c56 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	08da      	lsrs	r2, r3, #3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	3208      	adds	r2, #8
 8004c16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	f003 0307 	and.w	r3, r3, #7
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	220f      	movs	r2, #15
 8004c26:	fa02 f303 	lsl.w	r3, r2, r3
 8004c2a:	43db      	mvns	r3, r3
 8004c2c:	69ba      	ldr	r2, [r7, #24]
 8004c2e:	4013      	ands	r3, r2
 8004c30:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	691a      	ldr	r2, [r3, #16]
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	f003 0307 	and.w	r3, r3, #7
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c42:	69ba      	ldr	r2, [r7, #24]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	08da      	lsrs	r2, r3, #3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	3208      	adds	r2, #8
 8004c50:	69b9      	ldr	r1, [r7, #24]
 8004c52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	005b      	lsls	r3, r3, #1
 8004c60:	2203      	movs	r2, #3
 8004c62:	fa02 f303 	lsl.w	r3, r2, r3
 8004c66:	43db      	mvns	r3, r3
 8004c68:	69ba      	ldr	r2, [r7, #24]
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	f003 0203 	and.w	r2, r3, #3
 8004c76:	69fb      	ldr	r3, [r7, #28]
 8004c78:	005b      	lsls	r3, r3, #1
 8004c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7e:	69ba      	ldr	r2, [r7, #24]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	69ba      	ldr	r2, [r7, #24]
 8004c88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	f000 80e0 	beq.w	8004e58 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c98:	4b2f      	ldr	r3, [pc, #188]	@ (8004d58 <HAL_GPIO_Init+0x238>)
 8004c9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004c9e:	4a2e      	ldr	r2, [pc, #184]	@ (8004d58 <HAL_GPIO_Init+0x238>)
 8004ca0:	f043 0302 	orr.w	r3, r3, #2
 8004ca4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004ca8:	4b2b      	ldr	r3, [pc, #172]	@ (8004d58 <HAL_GPIO_Init+0x238>)
 8004caa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004cae:	f003 0302 	and.w	r3, r3, #2
 8004cb2:	60fb      	str	r3, [r7, #12]
 8004cb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004cb6:	4a29      	ldr	r2, [pc, #164]	@ (8004d5c <HAL_GPIO_Init+0x23c>)
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	089b      	lsrs	r3, r3, #2
 8004cbc:	3302      	adds	r3, #2
 8004cbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	f003 0303 	and.w	r3, r3, #3
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	220f      	movs	r2, #15
 8004cce:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd2:	43db      	mvns	r3, r3
 8004cd4:	69ba      	ldr	r2, [r7, #24]
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a20      	ldr	r2, [pc, #128]	@ (8004d60 <HAL_GPIO_Init+0x240>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d052      	beq.n	8004d88 <HAL_GPIO_Init+0x268>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a1f      	ldr	r2, [pc, #124]	@ (8004d64 <HAL_GPIO_Init+0x244>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d031      	beq.n	8004d4e <HAL_GPIO_Init+0x22e>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a1e      	ldr	r2, [pc, #120]	@ (8004d68 <HAL_GPIO_Init+0x248>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d02b      	beq.n	8004d4a <HAL_GPIO_Init+0x22a>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a1d      	ldr	r2, [pc, #116]	@ (8004d6c <HAL_GPIO_Init+0x24c>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d025      	beq.n	8004d46 <HAL_GPIO_Init+0x226>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a1c      	ldr	r2, [pc, #112]	@ (8004d70 <HAL_GPIO_Init+0x250>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d01f      	beq.n	8004d42 <HAL_GPIO_Init+0x222>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a1b      	ldr	r2, [pc, #108]	@ (8004d74 <HAL_GPIO_Init+0x254>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d019      	beq.n	8004d3e <HAL_GPIO_Init+0x21e>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a1a      	ldr	r2, [pc, #104]	@ (8004d78 <HAL_GPIO_Init+0x258>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d013      	beq.n	8004d3a <HAL_GPIO_Init+0x21a>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4a19      	ldr	r2, [pc, #100]	@ (8004d7c <HAL_GPIO_Init+0x25c>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d00d      	beq.n	8004d36 <HAL_GPIO_Init+0x216>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4a18      	ldr	r2, [pc, #96]	@ (8004d80 <HAL_GPIO_Init+0x260>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d007      	beq.n	8004d32 <HAL_GPIO_Init+0x212>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4a17      	ldr	r2, [pc, #92]	@ (8004d84 <HAL_GPIO_Init+0x264>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d101      	bne.n	8004d2e <HAL_GPIO_Init+0x20e>
 8004d2a:	2309      	movs	r3, #9
 8004d2c:	e02d      	b.n	8004d8a <HAL_GPIO_Init+0x26a>
 8004d2e:	230a      	movs	r3, #10
 8004d30:	e02b      	b.n	8004d8a <HAL_GPIO_Init+0x26a>
 8004d32:	2308      	movs	r3, #8
 8004d34:	e029      	b.n	8004d8a <HAL_GPIO_Init+0x26a>
 8004d36:	2307      	movs	r3, #7
 8004d38:	e027      	b.n	8004d8a <HAL_GPIO_Init+0x26a>
 8004d3a:	2306      	movs	r3, #6
 8004d3c:	e025      	b.n	8004d8a <HAL_GPIO_Init+0x26a>
 8004d3e:	2305      	movs	r3, #5
 8004d40:	e023      	b.n	8004d8a <HAL_GPIO_Init+0x26a>
 8004d42:	2304      	movs	r3, #4
 8004d44:	e021      	b.n	8004d8a <HAL_GPIO_Init+0x26a>
 8004d46:	2303      	movs	r3, #3
 8004d48:	e01f      	b.n	8004d8a <HAL_GPIO_Init+0x26a>
 8004d4a:	2302      	movs	r3, #2
 8004d4c:	e01d      	b.n	8004d8a <HAL_GPIO_Init+0x26a>
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e01b      	b.n	8004d8a <HAL_GPIO_Init+0x26a>
 8004d52:	bf00      	nop
 8004d54:	58000080 	.word	0x58000080
 8004d58:	58024400 	.word	0x58024400
 8004d5c:	58000400 	.word	0x58000400
 8004d60:	58020000 	.word	0x58020000
 8004d64:	58020400 	.word	0x58020400
 8004d68:	58020800 	.word	0x58020800
 8004d6c:	58020c00 	.word	0x58020c00
 8004d70:	58021000 	.word	0x58021000
 8004d74:	58021400 	.word	0x58021400
 8004d78:	58021800 	.word	0x58021800
 8004d7c:	58021c00 	.word	0x58021c00
 8004d80:	58022000 	.word	0x58022000
 8004d84:	58022400 	.word	0x58022400
 8004d88:	2300      	movs	r3, #0
 8004d8a:	69fa      	ldr	r2, [r7, #28]
 8004d8c:	f002 0203 	and.w	r2, r2, #3
 8004d90:	0092      	lsls	r2, r2, #2
 8004d92:	4093      	lsls	r3, r2
 8004d94:	69ba      	ldr	r2, [r7, #24]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004d9a:	4938      	ldr	r1, [pc, #224]	@ (8004e7c <HAL_GPIO_Init+0x35c>)
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	089b      	lsrs	r3, r3, #2
 8004da0:	3302      	adds	r3, #2
 8004da2:	69ba      	ldr	r2, [r7, #24]
 8004da4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004da8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	43db      	mvns	r3, r3
 8004db4:	69ba      	ldr	r2, [r7, #24]
 8004db6:	4013      	ands	r3, r2
 8004db8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d003      	beq.n	8004dce <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004dc6:	69ba      	ldr	r2, [r7, #24]
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004dce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004dd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	43db      	mvns	r3, r3
 8004de2:	69ba      	ldr	r2, [r7, #24]
 8004de4:	4013      	ands	r3, r2
 8004de6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d003      	beq.n	8004dfc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004df4:	69ba      	ldr	r2, [r7, #24]
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004dfc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	43db      	mvns	r3, r3
 8004e0e:	69ba      	ldr	r2, [r7, #24]
 8004e10:	4013      	ands	r3, r2
 8004e12:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d003      	beq.n	8004e28 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004e20:	69ba      	ldr	r2, [r7, #24]
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	69ba      	ldr	r2, [r7, #24]
 8004e2c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	43db      	mvns	r3, r3
 8004e38:	69ba      	ldr	r2, [r7, #24]
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d003      	beq.n	8004e52 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004e4a:	69ba      	ldr	r2, [r7, #24]
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	69ba      	ldr	r2, [r7, #24]
 8004e56:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	3301      	adds	r3, #1
 8004e5c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	fa22 f303 	lsr.w	r3, r2, r3
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	f47f ae63 	bne.w	8004b34 <HAL_GPIO_Init+0x14>
  }
}
 8004e6e:	bf00      	nop
 8004e70:	bf00      	nop
 8004e72:	3724      	adds	r7, #36	@ 0x24
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr
 8004e7c:	58000400 	.word	0x58000400

08004e80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b083      	sub	sp, #12
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	460b      	mov	r3, r1
 8004e8a:	807b      	strh	r3, [r7, #2]
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004e90:	787b      	ldrb	r3, [r7, #1]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d003      	beq.n	8004e9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e96:	887a      	ldrh	r2, [r7, #2]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004e9c:	e003      	b.n	8004ea6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004e9e:	887b      	ldrh	r3, [r7, #2]
 8004ea0:	041a      	lsls	r2, r3, #16
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	619a      	str	r2, [r3, #24]
}
 8004ea6:	bf00      	nop
 8004ea8:	370c      	adds	r7, #12
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr

08004eb2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004eb2:	b480      	push	{r7}
 8004eb4:	b085      	sub	sp, #20
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
 8004eba:	460b      	mov	r3, r1
 8004ebc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	695b      	ldr	r3, [r3, #20]
 8004ec2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004ec4:	887a      	ldrh	r2, [r7, #2]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	4013      	ands	r3, r2
 8004eca:	041a      	lsls	r2, r3, #16
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	43d9      	mvns	r1, r3
 8004ed0:	887b      	ldrh	r3, [r7, #2]
 8004ed2:	400b      	ands	r3, r1
 8004ed4:	431a      	orrs	r2, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	619a      	str	r2, [r3, #24]
}
 8004eda:	bf00      	nop
 8004edc:	3714      	adds	r7, #20
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr
	...

08004ee8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004ef0:	4b19      	ldr	r3, [pc, #100]	@ (8004f58 <HAL_PWREx_ConfigSupply+0x70>)
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	f003 0304 	and.w	r3, r3, #4
 8004ef8:	2b04      	cmp	r3, #4
 8004efa:	d00a      	beq.n	8004f12 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004efc:	4b16      	ldr	r3, [pc, #88]	@ (8004f58 <HAL_PWREx_ConfigSupply+0x70>)
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	f003 0307 	and.w	r3, r3, #7
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d001      	beq.n	8004f0e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e01f      	b.n	8004f4e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	e01d      	b.n	8004f4e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004f12:	4b11      	ldr	r3, [pc, #68]	@ (8004f58 <HAL_PWREx_ConfigSupply+0x70>)
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	f023 0207 	bic.w	r2, r3, #7
 8004f1a:	490f      	ldr	r1, [pc, #60]	@ (8004f58 <HAL_PWREx_ConfigSupply+0x70>)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004f22:	f7fe ff01 	bl	8003d28 <HAL_GetTick>
 8004f26:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004f28:	e009      	b.n	8004f3e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004f2a:	f7fe fefd 	bl	8003d28 <HAL_GetTick>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	1ad3      	subs	r3, r2, r3
 8004f34:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004f38:	d901      	bls.n	8004f3e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e007      	b.n	8004f4e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004f3e:	4b06      	ldr	r3, [pc, #24]	@ (8004f58 <HAL_PWREx_ConfigSupply+0x70>)
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f4a:	d1ee      	bne.n	8004f2a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3710      	adds	r7, #16
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	58024800 	.word	0x58024800

08004f5c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b08c      	sub	sp, #48	@ 0x30
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d102      	bne.n	8004f70 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	f000 bc48 	b.w	8005800 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0301 	and.w	r3, r3, #1
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	f000 8088 	beq.w	800508e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f7e:	4b99      	ldr	r3, [pc, #612]	@ (80051e4 <HAL_RCC_OscConfig+0x288>)
 8004f80:	691b      	ldr	r3, [r3, #16]
 8004f82:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004f88:	4b96      	ldr	r3, [pc, #600]	@ (80051e4 <HAL_RCC_OscConfig+0x288>)
 8004f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004f8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f90:	2b10      	cmp	r3, #16
 8004f92:	d007      	beq.n	8004fa4 <HAL_RCC_OscConfig+0x48>
 8004f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f96:	2b18      	cmp	r3, #24
 8004f98:	d111      	bne.n	8004fbe <HAL_RCC_OscConfig+0x62>
 8004f9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f9c:	f003 0303 	and.w	r3, r3, #3
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	d10c      	bne.n	8004fbe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fa4:	4b8f      	ldr	r3, [pc, #572]	@ (80051e4 <HAL_RCC_OscConfig+0x288>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d06d      	beq.n	800508c <HAL_RCC_OscConfig+0x130>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d169      	bne.n	800508c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	f000 bc21 	b.w	8005800 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fc6:	d106      	bne.n	8004fd6 <HAL_RCC_OscConfig+0x7a>
 8004fc8:	4b86      	ldr	r3, [pc, #536]	@ (80051e4 <HAL_RCC_OscConfig+0x288>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a85      	ldr	r2, [pc, #532]	@ (80051e4 <HAL_RCC_OscConfig+0x288>)
 8004fce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fd2:	6013      	str	r3, [r2, #0]
 8004fd4:	e02e      	b.n	8005034 <HAL_RCC_OscConfig+0xd8>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d10c      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x9c>
 8004fde:	4b81      	ldr	r3, [pc, #516]	@ (80051e4 <HAL_RCC_OscConfig+0x288>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a80      	ldr	r2, [pc, #512]	@ (80051e4 <HAL_RCC_OscConfig+0x288>)
 8004fe4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fe8:	6013      	str	r3, [r2, #0]
 8004fea:	4b7e      	ldr	r3, [pc, #504]	@ (80051e4 <HAL_RCC_OscConfig+0x288>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a7d      	ldr	r2, [pc, #500]	@ (80051e4 <HAL_RCC_OscConfig+0x288>)
 8004ff0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ff4:	6013      	str	r3, [r2, #0]
 8004ff6:	e01d      	b.n	8005034 <HAL_RCC_OscConfig+0xd8>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005000:	d10c      	bne.n	800501c <HAL_RCC_OscConfig+0xc0>
 8005002:	4b78      	ldr	r3, [pc, #480]	@ (80051e4 <HAL_RCC_OscConfig+0x288>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a77      	ldr	r2, [pc, #476]	@ (80051e4 <HAL_RCC_OscConfig+0x288>)
 8005008:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800500c:	6013      	str	r3, [r2, #0]
 800500e:	4b75      	ldr	r3, [pc, #468]	@ (80051e4 <HAL_RCC_OscConfig+0x288>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a74      	ldr	r2, [pc, #464]	@ (80051e4 <HAL_RCC_OscConfig+0x288>)
 8005014:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005018:	6013      	str	r3, [r2, #0]
 800501a:	e00b      	b.n	8005034 <HAL_RCC_OscConfig+0xd8>
 800501c:	4b71      	ldr	r3, [pc, #452]	@ (80051e4 <HAL_RCC_OscConfig+0x288>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a70      	ldr	r2, [pc, #448]	@ (80051e4 <HAL_RCC_OscConfig+0x288>)
 8005022:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005026:	6013      	str	r3, [r2, #0]
 8005028:	4b6e      	ldr	r3, [pc, #440]	@ (80051e4 <HAL_RCC_OscConfig+0x288>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a6d      	ldr	r2, [pc, #436]	@ (80051e4 <HAL_RCC_OscConfig+0x288>)
 800502e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005032:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d013      	beq.n	8005064 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800503c:	f7fe fe74 	bl	8003d28 <HAL_GetTick>
 8005040:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005042:	e008      	b.n	8005056 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005044:	f7fe fe70 	bl	8003d28 <HAL_GetTick>
 8005048:	4602      	mov	r2, r0
 800504a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	2b64      	cmp	r3, #100	@ 0x64
 8005050:	d901      	bls.n	8005056 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	e3d4      	b.n	8005800 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005056:	4b63      	ldr	r3, [pc, #396]	@ (80051e4 <HAL_RCC_OscConfig+0x288>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800505e:	2b00      	cmp	r3, #0
 8005060:	d0f0      	beq.n	8005044 <HAL_RCC_OscConfig+0xe8>
 8005062:	e014      	b.n	800508e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005064:	f7fe fe60 	bl	8003d28 <HAL_GetTick>
 8005068:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800506a:	e008      	b.n	800507e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800506c:	f7fe fe5c 	bl	8003d28 <HAL_GetTick>
 8005070:	4602      	mov	r2, r0
 8005072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	2b64      	cmp	r3, #100	@ 0x64
 8005078:	d901      	bls.n	800507e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	e3c0      	b.n	8005800 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800507e:	4b59      	ldr	r3, [pc, #356]	@ (80051e4 <HAL_RCC_OscConfig+0x288>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d1f0      	bne.n	800506c <HAL_RCC_OscConfig+0x110>
 800508a:	e000      	b.n	800508e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800508c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0302 	and.w	r3, r3, #2
 8005096:	2b00      	cmp	r3, #0
 8005098:	f000 80ca 	beq.w	8005230 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800509c:	4b51      	ldr	r3, [pc, #324]	@ (80051e4 <HAL_RCC_OscConfig+0x288>)
 800509e:	691b      	ldr	r3, [r3, #16]
 80050a0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80050a4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80050a6:	4b4f      	ldr	r3, [pc, #316]	@ (80051e4 <HAL_RCC_OscConfig+0x288>)
 80050a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050aa:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80050ac:	6a3b      	ldr	r3, [r7, #32]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d007      	beq.n	80050c2 <HAL_RCC_OscConfig+0x166>
 80050b2:	6a3b      	ldr	r3, [r7, #32]
 80050b4:	2b18      	cmp	r3, #24
 80050b6:	d156      	bne.n	8005166 <HAL_RCC_OscConfig+0x20a>
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	f003 0303 	and.w	r3, r3, #3
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d151      	bne.n	8005166 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050c2:	4b48      	ldr	r3, [pc, #288]	@ (80051e4 <HAL_RCC_OscConfig+0x288>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 0304 	and.w	r3, r3, #4
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d005      	beq.n	80050da <HAL_RCC_OscConfig+0x17e>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d101      	bne.n	80050da <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e392      	b.n	8005800 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80050da:	4b42      	ldr	r3, [pc, #264]	@ (80051e4 <HAL_RCC_OscConfig+0x288>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f023 0219 	bic.w	r2, r3, #25
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	493f      	ldr	r1, [pc, #252]	@ (80051e4 <HAL_RCC_OscConfig+0x288>)
 80050e8:	4313      	orrs	r3, r2
 80050ea:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ec:	f7fe fe1c 	bl	8003d28 <HAL_GetTick>
 80050f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80050f2:	e008      	b.n	8005106 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050f4:	f7fe fe18 	bl	8003d28 <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d901      	bls.n	8005106 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	e37c      	b.n	8005800 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005106:	4b37      	ldr	r3, [pc, #220]	@ (80051e4 <HAL_RCC_OscConfig+0x288>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 0304 	and.w	r3, r3, #4
 800510e:	2b00      	cmp	r3, #0
 8005110:	d0f0      	beq.n	80050f4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005112:	f7fe fe39 	bl	8003d88 <HAL_GetREVID>
 8005116:	4603      	mov	r3, r0
 8005118:	f241 0203 	movw	r2, #4099	@ 0x1003
 800511c:	4293      	cmp	r3, r2
 800511e:	d817      	bhi.n	8005150 <HAL_RCC_OscConfig+0x1f4>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	691b      	ldr	r3, [r3, #16]
 8005124:	2b40      	cmp	r3, #64	@ 0x40
 8005126:	d108      	bne.n	800513a <HAL_RCC_OscConfig+0x1de>
 8005128:	4b2e      	ldr	r3, [pc, #184]	@ (80051e4 <HAL_RCC_OscConfig+0x288>)
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005130:	4a2c      	ldr	r2, [pc, #176]	@ (80051e4 <HAL_RCC_OscConfig+0x288>)
 8005132:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005136:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005138:	e07a      	b.n	8005230 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800513a:	4b2a      	ldr	r3, [pc, #168]	@ (80051e4 <HAL_RCC_OscConfig+0x288>)
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	031b      	lsls	r3, r3, #12
 8005148:	4926      	ldr	r1, [pc, #152]	@ (80051e4 <HAL_RCC_OscConfig+0x288>)
 800514a:	4313      	orrs	r3, r2
 800514c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800514e:	e06f      	b.n	8005230 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005150:	4b24      	ldr	r3, [pc, #144]	@ (80051e4 <HAL_RCC_OscConfig+0x288>)
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	691b      	ldr	r3, [r3, #16]
 800515c:	061b      	lsls	r3, r3, #24
 800515e:	4921      	ldr	r1, [pc, #132]	@ (80051e4 <HAL_RCC_OscConfig+0x288>)
 8005160:	4313      	orrs	r3, r2
 8005162:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005164:	e064      	b.n	8005230 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d047      	beq.n	80051fe <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800516e:	4b1d      	ldr	r3, [pc, #116]	@ (80051e4 <HAL_RCC_OscConfig+0x288>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f023 0219 	bic.w	r2, r3, #25
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	491a      	ldr	r1, [pc, #104]	@ (80051e4 <HAL_RCC_OscConfig+0x288>)
 800517c:	4313      	orrs	r3, r2
 800517e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005180:	f7fe fdd2 	bl	8003d28 <HAL_GetTick>
 8005184:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005186:	e008      	b.n	800519a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005188:	f7fe fdce 	bl	8003d28 <HAL_GetTick>
 800518c:	4602      	mov	r2, r0
 800518e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	2b02      	cmp	r3, #2
 8005194:	d901      	bls.n	800519a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e332      	b.n	8005800 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800519a:	4b12      	ldr	r3, [pc, #72]	@ (80051e4 <HAL_RCC_OscConfig+0x288>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0304 	and.w	r3, r3, #4
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d0f0      	beq.n	8005188 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051a6:	f7fe fdef 	bl	8003d88 <HAL_GetREVID>
 80051aa:	4603      	mov	r3, r0
 80051ac:	f241 0203 	movw	r2, #4099	@ 0x1003
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d819      	bhi.n	80051e8 <HAL_RCC_OscConfig+0x28c>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	691b      	ldr	r3, [r3, #16]
 80051b8:	2b40      	cmp	r3, #64	@ 0x40
 80051ba:	d108      	bne.n	80051ce <HAL_RCC_OscConfig+0x272>
 80051bc:	4b09      	ldr	r3, [pc, #36]	@ (80051e4 <HAL_RCC_OscConfig+0x288>)
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80051c4:	4a07      	ldr	r2, [pc, #28]	@ (80051e4 <HAL_RCC_OscConfig+0x288>)
 80051c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051ca:	6053      	str	r3, [r2, #4]
 80051cc:	e030      	b.n	8005230 <HAL_RCC_OscConfig+0x2d4>
 80051ce:	4b05      	ldr	r3, [pc, #20]	@ (80051e4 <HAL_RCC_OscConfig+0x288>)
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	031b      	lsls	r3, r3, #12
 80051dc:	4901      	ldr	r1, [pc, #4]	@ (80051e4 <HAL_RCC_OscConfig+0x288>)
 80051de:	4313      	orrs	r3, r2
 80051e0:	604b      	str	r3, [r1, #4]
 80051e2:	e025      	b.n	8005230 <HAL_RCC_OscConfig+0x2d4>
 80051e4:	58024400 	.word	0x58024400
 80051e8:	4b9a      	ldr	r3, [pc, #616]	@ (8005454 <HAL_RCC_OscConfig+0x4f8>)
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	691b      	ldr	r3, [r3, #16]
 80051f4:	061b      	lsls	r3, r3, #24
 80051f6:	4997      	ldr	r1, [pc, #604]	@ (8005454 <HAL_RCC_OscConfig+0x4f8>)
 80051f8:	4313      	orrs	r3, r2
 80051fa:	604b      	str	r3, [r1, #4]
 80051fc:	e018      	b.n	8005230 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051fe:	4b95      	ldr	r3, [pc, #596]	@ (8005454 <HAL_RCC_OscConfig+0x4f8>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a94      	ldr	r2, [pc, #592]	@ (8005454 <HAL_RCC_OscConfig+0x4f8>)
 8005204:	f023 0301 	bic.w	r3, r3, #1
 8005208:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800520a:	f7fe fd8d 	bl	8003d28 <HAL_GetTick>
 800520e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005210:	e008      	b.n	8005224 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005212:	f7fe fd89 	bl	8003d28 <HAL_GetTick>
 8005216:	4602      	mov	r2, r0
 8005218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800521a:	1ad3      	subs	r3, r2, r3
 800521c:	2b02      	cmp	r3, #2
 800521e:	d901      	bls.n	8005224 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	e2ed      	b.n	8005800 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005224:	4b8b      	ldr	r3, [pc, #556]	@ (8005454 <HAL_RCC_OscConfig+0x4f8>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 0304 	and.w	r3, r3, #4
 800522c:	2b00      	cmp	r3, #0
 800522e:	d1f0      	bne.n	8005212 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 0310 	and.w	r3, r3, #16
 8005238:	2b00      	cmp	r3, #0
 800523a:	f000 80a9 	beq.w	8005390 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800523e:	4b85      	ldr	r3, [pc, #532]	@ (8005454 <HAL_RCC_OscConfig+0x4f8>)
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005246:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005248:	4b82      	ldr	r3, [pc, #520]	@ (8005454 <HAL_RCC_OscConfig+0x4f8>)
 800524a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800524c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800524e:	69bb      	ldr	r3, [r7, #24]
 8005250:	2b08      	cmp	r3, #8
 8005252:	d007      	beq.n	8005264 <HAL_RCC_OscConfig+0x308>
 8005254:	69bb      	ldr	r3, [r7, #24]
 8005256:	2b18      	cmp	r3, #24
 8005258:	d13a      	bne.n	80052d0 <HAL_RCC_OscConfig+0x374>
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	f003 0303 	and.w	r3, r3, #3
 8005260:	2b01      	cmp	r3, #1
 8005262:	d135      	bne.n	80052d0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005264:	4b7b      	ldr	r3, [pc, #492]	@ (8005454 <HAL_RCC_OscConfig+0x4f8>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800526c:	2b00      	cmp	r3, #0
 800526e:	d005      	beq.n	800527c <HAL_RCC_OscConfig+0x320>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	69db      	ldr	r3, [r3, #28]
 8005274:	2b80      	cmp	r3, #128	@ 0x80
 8005276:	d001      	beq.n	800527c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	e2c1      	b.n	8005800 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800527c:	f7fe fd84 	bl	8003d88 <HAL_GetREVID>
 8005280:	4603      	mov	r3, r0
 8005282:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005286:	4293      	cmp	r3, r2
 8005288:	d817      	bhi.n	80052ba <HAL_RCC_OscConfig+0x35e>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a1b      	ldr	r3, [r3, #32]
 800528e:	2b20      	cmp	r3, #32
 8005290:	d108      	bne.n	80052a4 <HAL_RCC_OscConfig+0x348>
 8005292:	4b70      	ldr	r3, [pc, #448]	@ (8005454 <HAL_RCC_OscConfig+0x4f8>)
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800529a:	4a6e      	ldr	r2, [pc, #440]	@ (8005454 <HAL_RCC_OscConfig+0x4f8>)
 800529c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80052a0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80052a2:	e075      	b.n	8005390 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80052a4:	4b6b      	ldr	r3, [pc, #428]	@ (8005454 <HAL_RCC_OscConfig+0x4f8>)
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a1b      	ldr	r3, [r3, #32]
 80052b0:	069b      	lsls	r3, r3, #26
 80052b2:	4968      	ldr	r1, [pc, #416]	@ (8005454 <HAL_RCC_OscConfig+0x4f8>)
 80052b4:	4313      	orrs	r3, r2
 80052b6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80052b8:	e06a      	b.n	8005390 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80052ba:	4b66      	ldr	r3, [pc, #408]	@ (8005454 <HAL_RCC_OscConfig+0x4f8>)
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a1b      	ldr	r3, [r3, #32]
 80052c6:	061b      	lsls	r3, r3, #24
 80052c8:	4962      	ldr	r1, [pc, #392]	@ (8005454 <HAL_RCC_OscConfig+0x4f8>)
 80052ca:	4313      	orrs	r3, r2
 80052cc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80052ce:	e05f      	b.n	8005390 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	69db      	ldr	r3, [r3, #28]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d042      	beq.n	800535e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80052d8:	4b5e      	ldr	r3, [pc, #376]	@ (8005454 <HAL_RCC_OscConfig+0x4f8>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a5d      	ldr	r2, [pc, #372]	@ (8005454 <HAL_RCC_OscConfig+0x4f8>)
 80052de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052e4:	f7fe fd20 	bl	8003d28 <HAL_GetTick>
 80052e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80052ea:	e008      	b.n	80052fe <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80052ec:	f7fe fd1c 	bl	8003d28 <HAL_GetTick>
 80052f0:	4602      	mov	r2, r0
 80052f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	2b02      	cmp	r3, #2
 80052f8:	d901      	bls.n	80052fe <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e280      	b.n	8005800 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80052fe:	4b55      	ldr	r3, [pc, #340]	@ (8005454 <HAL_RCC_OscConfig+0x4f8>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005306:	2b00      	cmp	r3, #0
 8005308:	d0f0      	beq.n	80052ec <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800530a:	f7fe fd3d 	bl	8003d88 <HAL_GetREVID>
 800530e:	4603      	mov	r3, r0
 8005310:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005314:	4293      	cmp	r3, r2
 8005316:	d817      	bhi.n	8005348 <HAL_RCC_OscConfig+0x3ec>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6a1b      	ldr	r3, [r3, #32]
 800531c:	2b20      	cmp	r3, #32
 800531e:	d108      	bne.n	8005332 <HAL_RCC_OscConfig+0x3d6>
 8005320:	4b4c      	ldr	r3, [pc, #304]	@ (8005454 <HAL_RCC_OscConfig+0x4f8>)
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005328:	4a4a      	ldr	r2, [pc, #296]	@ (8005454 <HAL_RCC_OscConfig+0x4f8>)
 800532a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800532e:	6053      	str	r3, [r2, #4]
 8005330:	e02e      	b.n	8005390 <HAL_RCC_OscConfig+0x434>
 8005332:	4b48      	ldr	r3, [pc, #288]	@ (8005454 <HAL_RCC_OscConfig+0x4f8>)
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a1b      	ldr	r3, [r3, #32]
 800533e:	069b      	lsls	r3, r3, #26
 8005340:	4944      	ldr	r1, [pc, #272]	@ (8005454 <HAL_RCC_OscConfig+0x4f8>)
 8005342:	4313      	orrs	r3, r2
 8005344:	604b      	str	r3, [r1, #4]
 8005346:	e023      	b.n	8005390 <HAL_RCC_OscConfig+0x434>
 8005348:	4b42      	ldr	r3, [pc, #264]	@ (8005454 <HAL_RCC_OscConfig+0x4f8>)
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6a1b      	ldr	r3, [r3, #32]
 8005354:	061b      	lsls	r3, r3, #24
 8005356:	493f      	ldr	r1, [pc, #252]	@ (8005454 <HAL_RCC_OscConfig+0x4f8>)
 8005358:	4313      	orrs	r3, r2
 800535a:	60cb      	str	r3, [r1, #12]
 800535c:	e018      	b.n	8005390 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800535e:	4b3d      	ldr	r3, [pc, #244]	@ (8005454 <HAL_RCC_OscConfig+0x4f8>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a3c      	ldr	r2, [pc, #240]	@ (8005454 <HAL_RCC_OscConfig+0x4f8>)
 8005364:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005368:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800536a:	f7fe fcdd 	bl	8003d28 <HAL_GetTick>
 800536e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005370:	e008      	b.n	8005384 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005372:	f7fe fcd9 	bl	8003d28 <HAL_GetTick>
 8005376:	4602      	mov	r2, r0
 8005378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800537a:	1ad3      	subs	r3, r2, r3
 800537c:	2b02      	cmp	r3, #2
 800537e:	d901      	bls.n	8005384 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005380:	2303      	movs	r3, #3
 8005382:	e23d      	b.n	8005800 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005384:	4b33      	ldr	r3, [pc, #204]	@ (8005454 <HAL_RCC_OscConfig+0x4f8>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800538c:	2b00      	cmp	r3, #0
 800538e:	d1f0      	bne.n	8005372 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 0308 	and.w	r3, r3, #8
 8005398:	2b00      	cmp	r3, #0
 800539a:	d036      	beq.n	800540a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	695b      	ldr	r3, [r3, #20]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d019      	beq.n	80053d8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053a4:	4b2b      	ldr	r3, [pc, #172]	@ (8005454 <HAL_RCC_OscConfig+0x4f8>)
 80053a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053a8:	4a2a      	ldr	r2, [pc, #168]	@ (8005454 <HAL_RCC_OscConfig+0x4f8>)
 80053aa:	f043 0301 	orr.w	r3, r3, #1
 80053ae:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053b0:	f7fe fcba 	bl	8003d28 <HAL_GetTick>
 80053b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80053b6:	e008      	b.n	80053ca <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053b8:	f7fe fcb6 	bl	8003d28 <HAL_GetTick>
 80053bc:	4602      	mov	r2, r0
 80053be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	2b02      	cmp	r3, #2
 80053c4:	d901      	bls.n	80053ca <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80053c6:	2303      	movs	r3, #3
 80053c8:	e21a      	b.n	8005800 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80053ca:	4b22      	ldr	r3, [pc, #136]	@ (8005454 <HAL_RCC_OscConfig+0x4f8>)
 80053cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053ce:	f003 0302 	and.w	r3, r3, #2
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d0f0      	beq.n	80053b8 <HAL_RCC_OscConfig+0x45c>
 80053d6:	e018      	b.n	800540a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053d8:	4b1e      	ldr	r3, [pc, #120]	@ (8005454 <HAL_RCC_OscConfig+0x4f8>)
 80053da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053dc:	4a1d      	ldr	r2, [pc, #116]	@ (8005454 <HAL_RCC_OscConfig+0x4f8>)
 80053de:	f023 0301 	bic.w	r3, r3, #1
 80053e2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053e4:	f7fe fca0 	bl	8003d28 <HAL_GetTick>
 80053e8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80053ea:	e008      	b.n	80053fe <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053ec:	f7fe fc9c 	bl	8003d28 <HAL_GetTick>
 80053f0:	4602      	mov	r2, r0
 80053f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	2b02      	cmp	r3, #2
 80053f8:	d901      	bls.n	80053fe <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80053fa:	2303      	movs	r3, #3
 80053fc:	e200      	b.n	8005800 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80053fe:	4b15      	ldr	r3, [pc, #84]	@ (8005454 <HAL_RCC_OscConfig+0x4f8>)
 8005400:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005402:	f003 0302 	and.w	r3, r3, #2
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1f0      	bne.n	80053ec <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0320 	and.w	r3, r3, #32
 8005412:	2b00      	cmp	r3, #0
 8005414:	d039      	beq.n	800548a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	699b      	ldr	r3, [r3, #24]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d01c      	beq.n	8005458 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800541e:	4b0d      	ldr	r3, [pc, #52]	@ (8005454 <HAL_RCC_OscConfig+0x4f8>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a0c      	ldr	r2, [pc, #48]	@ (8005454 <HAL_RCC_OscConfig+0x4f8>)
 8005424:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005428:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800542a:	f7fe fc7d 	bl	8003d28 <HAL_GetTick>
 800542e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005430:	e008      	b.n	8005444 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005432:	f7fe fc79 	bl	8003d28 <HAL_GetTick>
 8005436:	4602      	mov	r2, r0
 8005438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800543a:	1ad3      	subs	r3, r2, r3
 800543c:	2b02      	cmp	r3, #2
 800543e:	d901      	bls.n	8005444 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005440:	2303      	movs	r3, #3
 8005442:	e1dd      	b.n	8005800 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005444:	4b03      	ldr	r3, [pc, #12]	@ (8005454 <HAL_RCC_OscConfig+0x4f8>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800544c:	2b00      	cmp	r3, #0
 800544e:	d0f0      	beq.n	8005432 <HAL_RCC_OscConfig+0x4d6>
 8005450:	e01b      	b.n	800548a <HAL_RCC_OscConfig+0x52e>
 8005452:	bf00      	nop
 8005454:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005458:	4b9b      	ldr	r3, [pc, #620]	@ (80056c8 <HAL_RCC_OscConfig+0x76c>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a9a      	ldr	r2, [pc, #616]	@ (80056c8 <HAL_RCC_OscConfig+0x76c>)
 800545e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005462:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005464:	f7fe fc60 	bl	8003d28 <HAL_GetTick>
 8005468:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800546a:	e008      	b.n	800547e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800546c:	f7fe fc5c 	bl	8003d28 <HAL_GetTick>
 8005470:	4602      	mov	r2, r0
 8005472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	2b02      	cmp	r3, #2
 8005478:	d901      	bls.n	800547e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800547a:	2303      	movs	r3, #3
 800547c:	e1c0      	b.n	8005800 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800547e:	4b92      	ldr	r3, [pc, #584]	@ (80056c8 <HAL_RCC_OscConfig+0x76c>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005486:	2b00      	cmp	r3, #0
 8005488:	d1f0      	bne.n	800546c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 0304 	and.w	r3, r3, #4
 8005492:	2b00      	cmp	r3, #0
 8005494:	f000 8081 	beq.w	800559a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005498:	4b8c      	ldr	r3, [pc, #560]	@ (80056cc <HAL_RCC_OscConfig+0x770>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a8b      	ldr	r2, [pc, #556]	@ (80056cc <HAL_RCC_OscConfig+0x770>)
 800549e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054a2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80054a4:	f7fe fc40 	bl	8003d28 <HAL_GetTick>
 80054a8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80054aa:	e008      	b.n	80054be <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054ac:	f7fe fc3c 	bl	8003d28 <HAL_GetTick>
 80054b0:	4602      	mov	r2, r0
 80054b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	2b64      	cmp	r3, #100	@ 0x64
 80054b8:	d901      	bls.n	80054be <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80054ba:	2303      	movs	r3, #3
 80054bc:	e1a0      	b.n	8005800 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80054be:	4b83      	ldr	r3, [pc, #524]	@ (80056cc <HAL_RCC_OscConfig+0x770>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d0f0      	beq.n	80054ac <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d106      	bne.n	80054e0 <HAL_RCC_OscConfig+0x584>
 80054d2:	4b7d      	ldr	r3, [pc, #500]	@ (80056c8 <HAL_RCC_OscConfig+0x76c>)
 80054d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054d6:	4a7c      	ldr	r2, [pc, #496]	@ (80056c8 <HAL_RCC_OscConfig+0x76c>)
 80054d8:	f043 0301 	orr.w	r3, r3, #1
 80054dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80054de:	e02d      	b.n	800553c <HAL_RCC_OscConfig+0x5e0>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d10c      	bne.n	8005502 <HAL_RCC_OscConfig+0x5a6>
 80054e8:	4b77      	ldr	r3, [pc, #476]	@ (80056c8 <HAL_RCC_OscConfig+0x76c>)
 80054ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054ec:	4a76      	ldr	r2, [pc, #472]	@ (80056c8 <HAL_RCC_OscConfig+0x76c>)
 80054ee:	f023 0301 	bic.w	r3, r3, #1
 80054f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80054f4:	4b74      	ldr	r3, [pc, #464]	@ (80056c8 <HAL_RCC_OscConfig+0x76c>)
 80054f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054f8:	4a73      	ldr	r2, [pc, #460]	@ (80056c8 <HAL_RCC_OscConfig+0x76c>)
 80054fa:	f023 0304 	bic.w	r3, r3, #4
 80054fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8005500:	e01c      	b.n	800553c <HAL_RCC_OscConfig+0x5e0>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	2b05      	cmp	r3, #5
 8005508:	d10c      	bne.n	8005524 <HAL_RCC_OscConfig+0x5c8>
 800550a:	4b6f      	ldr	r3, [pc, #444]	@ (80056c8 <HAL_RCC_OscConfig+0x76c>)
 800550c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800550e:	4a6e      	ldr	r2, [pc, #440]	@ (80056c8 <HAL_RCC_OscConfig+0x76c>)
 8005510:	f043 0304 	orr.w	r3, r3, #4
 8005514:	6713      	str	r3, [r2, #112]	@ 0x70
 8005516:	4b6c      	ldr	r3, [pc, #432]	@ (80056c8 <HAL_RCC_OscConfig+0x76c>)
 8005518:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800551a:	4a6b      	ldr	r2, [pc, #428]	@ (80056c8 <HAL_RCC_OscConfig+0x76c>)
 800551c:	f043 0301 	orr.w	r3, r3, #1
 8005520:	6713      	str	r3, [r2, #112]	@ 0x70
 8005522:	e00b      	b.n	800553c <HAL_RCC_OscConfig+0x5e0>
 8005524:	4b68      	ldr	r3, [pc, #416]	@ (80056c8 <HAL_RCC_OscConfig+0x76c>)
 8005526:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005528:	4a67      	ldr	r2, [pc, #412]	@ (80056c8 <HAL_RCC_OscConfig+0x76c>)
 800552a:	f023 0301 	bic.w	r3, r3, #1
 800552e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005530:	4b65      	ldr	r3, [pc, #404]	@ (80056c8 <HAL_RCC_OscConfig+0x76c>)
 8005532:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005534:	4a64      	ldr	r2, [pc, #400]	@ (80056c8 <HAL_RCC_OscConfig+0x76c>)
 8005536:	f023 0304 	bic.w	r3, r3, #4
 800553a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d015      	beq.n	8005570 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005544:	f7fe fbf0 	bl	8003d28 <HAL_GetTick>
 8005548:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800554a:	e00a      	b.n	8005562 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800554c:	f7fe fbec 	bl	8003d28 <HAL_GetTick>
 8005550:	4602      	mov	r2, r0
 8005552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	f241 3288 	movw	r2, #5000	@ 0x1388
 800555a:	4293      	cmp	r3, r2
 800555c:	d901      	bls.n	8005562 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800555e:	2303      	movs	r3, #3
 8005560:	e14e      	b.n	8005800 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005562:	4b59      	ldr	r3, [pc, #356]	@ (80056c8 <HAL_RCC_OscConfig+0x76c>)
 8005564:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005566:	f003 0302 	and.w	r3, r3, #2
 800556a:	2b00      	cmp	r3, #0
 800556c:	d0ee      	beq.n	800554c <HAL_RCC_OscConfig+0x5f0>
 800556e:	e014      	b.n	800559a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005570:	f7fe fbda 	bl	8003d28 <HAL_GetTick>
 8005574:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005576:	e00a      	b.n	800558e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005578:	f7fe fbd6 	bl	8003d28 <HAL_GetTick>
 800557c:	4602      	mov	r2, r0
 800557e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005586:	4293      	cmp	r3, r2
 8005588:	d901      	bls.n	800558e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	e138      	b.n	8005800 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800558e:	4b4e      	ldr	r3, [pc, #312]	@ (80056c8 <HAL_RCC_OscConfig+0x76c>)
 8005590:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005592:	f003 0302 	and.w	r3, r3, #2
 8005596:	2b00      	cmp	r3, #0
 8005598:	d1ee      	bne.n	8005578 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800559e:	2b00      	cmp	r3, #0
 80055a0:	f000 812d 	beq.w	80057fe <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80055a4:	4b48      	ldr	r3, [pc, #288]	@ (80056c8 <HAL_RCC_OscConfig+0x76c>)
 80055a6:	691b      	ldr	r3, [r3, #16]
 80055a8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80055ac:	2b18      	cmp	r3, #24
 80055ae:	f000 80bd 	beq.w	800572c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	f040 809e 	bne.w	80056f8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055bc:	4b42      	ldr	r3, [pc, #264]	@ (80056c8 <HAL_RCC_OscConfig+0x76c>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a41      	ldr	r2, [pc, #260]	@ (80056c8 <HAL_RCC_OscConfig+0x76c>)
 80055c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80055c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055c8:	f7fe fbae 	bl	8003d28 <HAL_GetTick>
 80055cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80055ce:	e008      	b.n	80055e2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055d0:	f7fe fbaa 	bl	8003d28 <HAL_GetTick>
 80055d4:	4602      	mov	r2, r0
 80055d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	2b02      	cmp	r3, #2
 80055dc:	d901      	bls.n	80055e2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e10e      	b.n	8005800 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80055e2:	4b39      	ldr	r3, [pc, #228]	@ (80056c8 <HAL_RCC_OscConfig+0x76c>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d1f0      	bne.n	80055d0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80055ee:	4b36      	ldr	r3, [pc, #216]	@ (80056c8 <HAL_RCC_OscConfig+0x76c>)
 80055f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80055f2:	4b37      	ldr	r3, [pc, #220]	@ (80056d0 <HAL_RCC_OscConfig+0x774>)
 80055f4:	4013      	ands	r3, r2
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80055fe:	0112      	lsls	r2, r2, #4
 8005600:	430a      	orrs	r2, r1
 8005602:	4931      	ldr	r1, [pc, #196]	@ (80056c8 <HAL_RCC_OscConfig+0x76c>)
 8005604:	4313      	orrs	r3, r2
 8005606:	628b      	str	r3, [r1, #40]	@ 0x28
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800560c:	3b01      	subs	r3, #1
 800560e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005616:	3b01      	subs	r3, #1
 8005618:	025b      	lsls	r3, r3, #9
 800561a:	b29b      	uxth	r3, r3
 800561c:	431a      	orrs	r2, r3
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005622:	3b01      	subs	r3, #1
 8005624:	041b      	lsls	r3, r3, #16
 8005626:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800562a:	431a      	orrs	r2, r3
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005630:	3b01      	subs	r3, #1
 8005632:	061b      	lsls	r3, r3, #24
 8005634:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005638:	4923      	ldr	r1, [pc, #140]	@ (80056c8 <HAL_RCC_OscConfig+0x76c>)
 800563a:	4313      	orrs	r3, r2
 800563c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800563e:	4b22      	ldr	r3, [pc, #136]	@ (80056c8 <HAL_RCC_OscConfig+0x76c>)
 8005640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005642:	4a21      	ldr	r2, [pc, #132]	@ (80056c8 <HAL_RCC_OscConfig+0x76c>)
 8005644:	f023 0301 	bic.w	r3, r3, #1
 8005648:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800564a:	4b1f      	ldr	r3, [pc, #124]	@ (80056c8 <HAL_RCC_OscConfig+0x76c>)
 800564c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800564e:	4b21      	ldr	r3, [pc, #132]	@ (80056d4 <HAL_RCC_OscConfig+0x778>)
 8005650:	4013      	ands	r3, r2
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005656:	00d2      	lsls	r2, r2, #3
 8005658:	491b      	ldr	r1, [pc, #108]	@ (80056c8 <HAL_RCC_OscConfig+0x76c>)
 800565a:	4313      	orrs	r3, r2
 800565c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800565e:	4b1a      	ldr	r3, [pc, #104]	@ (80056c8 <HAL_RCC_OscConfig+0x76c>)
 8005660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005662:	f023 020c 	bic.w	r2, r3, #12
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800566a:	4917      	ldr	r1, [pc, #92]	@ (80056c8 <HAL_RCC_OscConfig+0x76c>)
 800566c:	4313      	orrs	r3, r2
 800566e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005670:	4b15      	ldr	r3, [pc, #84]	@ (80056c8 <HAL_RCC_OscConfig+0x76c>)
 8005672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005674:	f023 0202 	bic.w	r2, r3, #2
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800567c:	4912      	ldr	r1, [pc, #72]	@ (80056c8 <HAL_RCC_OscConfig+0x76c>)
 800567e:	4313      	orrs	r3, r2
 8005680:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005682:	4b11      	ldr	r3, [pc, #68]	@ (80056c8 <HAL_RCC_OscConfig+0x76c>)
 8005684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005686:	4a10      	ldr	r2, [pc, #64]	@ (80056c8 <HAL_RCC_OscConfig+0x76c>)
 8005688:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800568c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800568e:	4b0e      	ldr	r3, [pc, #56]	@ (80056c8 <HAL_RCC_OscConfig+0x76c>)
 8005690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005692:	4a0d      	ldr	r2, [pc, #52]	@ (80056c8 <HAL_RCC_OscConfig+0x76c>)
 8005694:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005698:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800569a:	4b0b      	ldr	r3, [pc, #44]	@ (80056c8 <HAL_RCC_OscConfig+0x76c>)
 800569c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800569e:	4a0a      	ldr	r2, [pc, #40]	@ (80056c8 <HAL_RCC_OscConfig+0x76c>)
 80056a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80056a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80056a6:	4b08      	ldr	r3, [pc, #32]	@ (80056c8 <HAL_RCC_OscConfig+0x76c>)
 80056a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056aa:	4a07      	ldr	r2, [pc, #28]	@ (80056c8 <HAL_RCC_OscConfig+0x76c>)
 80056ac:	f043 0301 	orr.w	r3, r3, #1
 80056b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056b2:	4b05      	ldr	r3, [pc, #20]	@ (80056c8 <HAL_RCC_OscConfig+0x76c>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a04      	ldr	r2, [pc, #16]	@ (80056c8 <HAL_RCC_OscConfig+0x76c>)
 80056b8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80056bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056be:	f7fe fb33 	bl	8003d28 <HAL_GetTick>
 80056c2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80056c4:	e011      	b.n	80056ea <HAL_RCC_OscConfig+0x78e>
 80056c6:	bf00      	nop
 80056c8:	58024400 	.word	0x58024400
 80056cc:	58024800 	.word	0x58024800
 80056d0:	fffffc0c 	.word	0xfffffc0c
 80056d4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056d8:	f7fe fb26 	bl	8003d28 <HAL_GetTick>
 80056dc:	4602      	mov	r2, r0
 80056de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	d901      	bls.n	80056ea <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	e08a      	b.n	8005800 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80056ea:	4b47      	ldr	r3, [pc, #284]	@ (8005808 <HAL_RCC_OscConfig+0x8ac>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d0f0      	beq.n	80056d8 <HAL_RCC_OscConfig+0x77c>
 80056f6:	e082      	b.n	80057fe <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056f8:	4b43      	ldr	r3, [pc, #268]	@ (8005808 <HAL_RCC_OscConfig+0x8ac>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a42      	ldr	r2, [pc, #264]	@ (8005808 <HAL_RCC_OscConfig+0x8ac>)
 80056fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005702:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005704:	f7fe fb10 	bl	8003d28 <HAL_GetTick>
 8005708:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800570a:	e008      	b.n	800571e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800570c:	f7fe fb0c 	bl	8003d28 <HAL_GetTick>
 8005710:	4602      	mov	r2, r0
 8005712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005714:	1ad3      	subs	r3, r2, r3
 8005716:	2b02      	cmp	r3, #2
 8005718:	d901      	bls.n	800571e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800571a:	2303      	movs	r3, #3
 800571c:	e070      	b.n	8005800 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800571e:	4b3a      	ldr	r3, [pc, #232]	@ (8005808 <HAL_RCC_OscConfig+0x8ac>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005726:	2b00      	cmp	r3, #0
 8005728:	d1f0      	bne.n	800570c <HAL_RCC_OscConfig+0x7b0>
 800572a:	e068      	b.n	80057fe <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800572c:	4b36      	ldr	r3, [pc, #216]	@ (8005808 <HAL_RCC_OscConfig+0x8ac>)
 800572e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005730:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005732:	4b35      	ldr	r3, [pc, #212]	@ (8005808 <HAL_RCC_OscConfig+0x8ac>)
 8005734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005736:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800573c:	2b01      	cmp	r3, #1
 800573e:	d031      	beq.n	80057a4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	f003 0203 	and.w	r2, r3, #3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800574a:	429a      	cmp	r2, r3
 800574c:	d12a      	bne.n	80057a4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	091b      	lsrs	r3, r3, #4
 8005752:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800575a:	429a      	cmp	r2, r3
 800575c:	d122      	bne.n	80057a4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005768:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800576a:	429a      	cmp	r2, r3
 800576c:	d11a      	bne.n	80057a4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	0a5b      	lsrs	r3, r3, #9
 8005772:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800577a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800577c:	429a      	cmp	r2, r3
 800577e:	d111      	bne.n	80057a4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	0c1b      	lsrs	r3, r3, #16
 8005784:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800578c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800578e:	429a      	cmp	r2, r3
 8005790:	d108      	bne.n	80057a4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	0e1b      	lsrs	r3, r3, #24
 8005796:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800579e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d001      	beq.n	80057a8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	e02b      	b.n	8005800 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80057a8:	4b17      	ldr	r3, [pc, #92]	@ (8005808 <HAL_RCC_OscConfig+0x8ac>)
 80057aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057ac:	08db      	lsrs	r3, r3, #3
 80057ae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80057b2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057b8:	693a      	ldr	r2, [r7, #16]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d01f      	beq.n	80057fe <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80057be:	4b12      	ldr	r3, [pc, #72]	@ (8005808 <HAL_RCC_OscConfig+0x8ac>)
 80057c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057c2:	4a11      	ldr	r2, [pc, #68]	@ (8005808 <HAL_RCC_OscConfig+0x8ac>)
 80057c4:	f023 0301 	bic.w	r3, r3, #1
 80057c8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80057ca:	f7fe faad 	bl	8003d28 <HAL_GetTick>
 80057ce:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80057d0:	bf00      	nop
 80057d2:	f7fe faa9 	bl	8003d28 <HAL_GetTick>
 80057d6:	4602      	mov	r2, r0
 80057d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057da:	4293      	cmp	r3, r2
 80057dc:	d0f9      	beq.n	80057d2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80057de:	4b0a      	ldr	r3, [pc, #40]	@ (8005808 <HAL_RCC_OscConfig+0x8ac>)
 80057e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80057e2:	4b0a      	ldr	r3, [pc, #40]	@ (800580c <HAL_RCC_OscConfig+0x8b0>)
 80057e4:	4013      	ands	r3, r2
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80057ea:	00d2      	lsls	r2, r2, #3
 80057ec:	4906      	ldr	r1, [pc, #24]	@ (8005808 <HAL_RCC_OscConfig+0x8ac>)
 80057ee:	4313      	orrs	r3, r2
 80057f0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80057f2:	4b05      	ldr	r3, [pc, #20]	@ (8005808 <HAL_RCC_OscConfig+0x8ac>)
 80057f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057f6:	4a04      	ldr	r2, [pc, #16]	@ (8005808 <HAL_RCC_OscConfig+0x8ac>)
 80057f8:	f043 0301 	orr.w	r3, r3, #1
 80057fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80057fe:	2300      	movs	r3, #0
}
 8005800:	4618      	mov	r0, r3
 8005802:	3730      	adds	r7, #48	@ 0x30
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}
 8005808:	58024400 	.word	0x58024400
 800580c:	ffff0007 	.word	0xffff0007

08005810 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b086      	sub	sp, #24
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d101      	bne.n	8005824 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e19c      	b.n	8005b5e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005824:	4b8a      	ldr	r3, [pc, #552]	@ (8005a50 <HAL_RCC_ClockConfig+0x240>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 030f 	and.w	r3, r3, #15
 800582c:	683a      	ldr	r2, [r7, #0]
 800582e:	429a      	cmp	r2, r3
 8005830:	d910      	bls.n	8005854 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005832:	4b87      	ldr	r3, [pc, #540]	@ (8005a50 <HAL_RCC_ClockConfig+0x240>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f023 020f 	bic.w	r2, r3, #15
 800583a:	4985      	ldr	r1, [pc, #532]	@ (8005a50 <HAL_RCC_ClockConfig+0x240>)
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	4313      	orrs	r3, r2
 8005840:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005842:	4b83      	ldr	r3, [pc, #524]	@ (8005a50 <HAL_RCC_ClockConfig+0x240>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 030f 	and.w	r3, r3, #15
 800584a:	683a      	ldr	r2, [r7, #0]
 800584c:	429a      	cmp	r2, r3
 800584e:	d001      	beq.n	8005854 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	e184      	b.n	8005b5e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 0304 	and.w	r3, r3, #4
 800585c:	2b00      	cmp	r3, #0
 800585e:	d010      	beq.n	8005882 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	691a      	ldr	r2, [r3, #16]
 8005864:	4b7b      	ldr	r3, [pc, #492]	@ (8005a54 <HAL_RCC_ClockConfig+0x244>)
 8005866:	699b      	ldr	r3, [r3, #24]
 8005868:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800586c:	429a      	cmp	r2, r3
 800586e:	d908      	bls.n	8005882 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005870:	4b78      	ldr	r3, [pc, #480]	@ (8005a54 <HAL_RCC_ClockConfig+0x244>)
 8005872:	699b      	ldr	r3, [r3, #24]
 8005874:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	691b      	ldr	r3, [r3, #16]
 800587c:	4975      	ldr	r1, [pc, #468]	@ (8005a54 <HAL_RCC_ClockConfig+0x244>)
 800587e:	4313      	orrs	r3, r2
 8005880:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 0308 	and.w	r3, r3, #8
 800588a:	2b00      	cmp	r3, #0
 800588c:	d010      	beq.n	80058b0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	695a      	ldr	r2, [r3, #20]
 8005892:	4b70      	ldr	r3, [pc, #448]	@ (8005a54 <HAL_RCC_ClockConfig+0x244>)
 8005894:	69db      	ldr	r3, [r3, #28]
 8005896:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800589a:	429a      	cmp	r2, r3
 800589c:	d908      	bls.n	80058b0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800589e:	4b6d      	ldr	r3, [pc, #436]	@ (8005a54 <HAL_RCC_ClockConfig+0x244>)
 80058a0:	69db      	ldr	r3, [r3, #28]
 80058a2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	695b      	ldr	r3, [r3, #20]
 80058aa:	496a      	ldr	r1, [pc, #424]	@ (8005a54 <HAL_RCC_ClockConfig+0x244>)
 80058ac:	4313      	orrs	r3, r2
 80058ae:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 0310 	and.w	r3, r3, #16
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d010      	beq.n	80058de <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	699a      	ldr	r2, [r3, #24]
 80058c0:	4b64      	ldr	r3, [pc, #400]	@ (8005a54 <HAL_RCC_ClockConfig+0x244>)
 80058c2:	69db      	ldr	r3, [r3, #28]
 80058c4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d908      	bls.n	80058de <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80058cc:	4b61      	ldr	r3, [pc, #388]	@ (8005a54 <HAL_RCC_ClockConfig+0x244>)
 80058ce:	69db      	ldr	r3, [r3, #28]
 80058d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	699b      	ldr	r3, [r3, #24]
 80058d8:	495e      	ldr	r1, [pc, #376]	@ (8005a54 <HAL_RCC_ClockConfig+0x244>)
 80058da:	4313      	orrs	r3, r2
 80058dc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 0320 	and.w	r3, r3, #32
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d010      	beq.n	800590c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	69da      	ldr	r2, [r3, #28]
 80058ee:	4b59      	ldr	r3, [pc, #356]	@ (8005a54 <HAL_RCC_ClockConfig+0x244>)
 80058f0:	6a1b      	ldr	r3, [r3, #32]
 80058f2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d908      	bls.n	800590c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80058fa:	4b56      	ldr	r3, [pc, #344]	@ (8005a54 <HAL_RCC_ClockConfig+0x244>)
 80058fc:	6a1b      	ldr	r3, [r3, #32]
 80058fe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	69db      	ldr	r3, [r3, #28]
 8005906:	4953      	ldr	r1, [pc, #332]	@ (8005a54 <HAL_RCC_ClockConfig+0x244>)
 8005908:	4313      	orrs	r3, r2
 800590a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 0302 	and.w	r3, r3, #2
 8005914:	2b00      	cmp	r3, #0
 8005916:	d010      	beq.n	800593a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	68da      	ldr	r2, [r3, #12]
 800591c:	4b4d      	ldr	r3, [pc, #308]	@ (8005a54 <HAL_RCC_ClockConfig+0x244>)
 800591e:	699b      	ldr	r3, [r3, #24]
 8005920:	f003 030f 	and.w	r3, r3, #15
 8005924:	429a      	cmp	r2, r3
 8005926:	d908      	bls.n	800593a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005928:	4b4a      	ldr	r3, [pc, #296]	@ (8005a54 <HAL_RCC_ClockConfig+0x244>)
 800592a:	699b      	ldr	r3, [r3, #24]
 800592c:	f023 020f 	bic.w	r2, r3, #15
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	4947      	ldr	r1, [pc, #284]	@ (8005a54 <HAL_RCC_ClockConfig+0x244>)
 8005936:	4313      	orrs	r3, r2
 8005938:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 0301 	and.w	r3, r3, #1
 8005942:	2b00      	cmp	r3, #0
 8005944:	d055      	beq.n	80059f2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005946:	4b43      	ldr	r3, [pc, #268]	@ (8005a54 <HAL_RCC_ClockConfig+0x244>)
 8005948:	699b      	ldr	r3, [r3, #24]
 800594a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	4940      	ldr	r1, [pc, #256]	@ (8005a54 <HAL_RCC_ClockConfig+0x244>)
 8005954:	4313      	orrs	r3, r2
 8005956:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	2b02      	cmp	r3, #2
 800595e:	d107      	bne.n	8005970 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005960:	4b3c      	ldr	r3, [pc, #240]	@ (8005a54 <HAL_RCC_ClockConfig+0x244>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005968:	2b00      	cmp	r3, #0
 800596a:	d121      	bne.n	80059b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	e0f6      	b.n	8005b5e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	2b03      	cmp	r3, #3
 8005976:	d107      	bne.n	8005988 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005978:	4b36      	ldr	r3, [pc, #216]	@ (8005a54 <HAL_RCC_ClockConfig+0x244>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005980:	2b00      	cmp	r3, #0
 8005982:	d115      	bne.n	80059b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	e0ea      	b.n	8005b5e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	2b01      	cmp	r3, #1
 800598e:	d107      	bne.n	80059a0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005990:	4b30      	ldr	r3, [pc, #192]	@ (8005a54 <HAL_RCC_ClockConfig+0x244>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005998:	2b00      	cmp	r3, #0
 800599a:	d109      	bne.n	80059b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	e0de      	b.n	8005b5e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80059a0:	4b2c      	ldr	r3, [pc, #176]	@ (8005a54 <HAL_RCC_ClockConfig+0x244>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 0304 	and.w	r3, r3, #4
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d101      	bne.n	80059b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	e0d6      	b.n	8005b5e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80059b0:	4b28      	ldr	r3, [pc, #160]	@ (8005a54 <HAL_RCC_ClockConfig+0x244>)
 80059b2:	691b      	ldr	r3, [r3, #16]
 80059b4:	f023 0207 	bic.w	r2, r3, #7
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	4925      	ldr	r1, [pc, #148]	@ (8005a54 <HAL_RCC_ClockConfig+0x244>)
 80059be:	4313      	orrs	r3, r2
 80059c0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059c2:	f7fe f9b1 	bl	8003d28 <HAL_GetTick>
 80059c6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059c8:	e00a      	b.n	80059e0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059ca:	f7fe f9ad 	bl	8003d28 <HAL_GetTick>
 80059ce:	4602      	mov	r2, r0
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	1ad3      	subs	r3, r2, r3
 80059d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059d8:	4293      	cmp	r3, r2
 80059da:	d901      	bls.n	80059e0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80059dc:	2303      	movs	r3, #3
 80059de:	e0be      	b.n	8005b5e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059e0:	4b1c      	ldr	r3, [pc, #112]	@ (8005a54 <HAL_RCC_ClockConfig+0x244>)
 80059e2:	691b      	ldr	r3, [r3, #16]
 80059e4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	00db      	lsls	r3, r3, #3
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d1eb      	bne.n	80059ca <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 0302 	and.w	r3, r3, #2
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d010      	beq.n	8005a20 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	68da      	ldr	r2, [r3, #12]
 8005a02:	4b14      	ldr	r3, [pc, #80]	@ (8005a54 <HAL_RCC_ClockConfig+0x244>)
 8005a04:	699b      	ldr	r3, [r3, #24]
 8005a06:	f003 030f 	and.w	r3, r3, #15
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d208      	bcs.n	8005a20 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a0e:	4b11      	ldr	r3, [pc, #68]	@ (8005a54 <HAL_RCC_ClockConfig+0x244>)
 8005a10:	699b      	ldr	r3, [r3, #24]
 8005a12:	f023 020f 	bic.w	r2, r3, #15
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	490e      	ldr	r1, [pc, #56]	@ (8005a54 <HAL_RCC_ClockConfig+0x244>)
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a20:	4b0b      	ldr	r3, [pc, #44]	@ (8005a50 <HAL_RCC_ClockConfig+0x240>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 030f 	and.w	r3, r3, #15
 8005a28:	683a      	ldr	r2, [r7, #0]
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d214      	bcs.n	8005a58 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a2e:	4b08      	ldr	r3, [pc, #32]	@ (8005a50 <HAL_RCC_ClockConfig+0x240>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f023 020f 	bic.w	r2, r3, #15
 8005a36:	4906      	ldr	r1, [pc, #24]	@ (8005a50 <HAL_RCC_ClockConfig+0x240>)
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a3e:	4b04      	ldr	r3, [pc, #16]	@ (8005a50 <HAL_RCC_ClockConfig+0x240>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f003 030f 	and.w	r3, r3, #15
 8005a46:	683a      	ldr	r2, [r7, #0]
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d005      	beq.n	8005a58 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e086      	b.n	8005b5e <HAL_RCC_ClockConfig+0x34e>
 8005a50:	52002000 	.word	0x52002000
 8005a54:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 0304 	and.w	r3, r3, #4
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d010      	beq.n	8005a86 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	691a      	ldr	r2, [r3, #16]
 8005a68:	4b3f      	ldr	r3, [pc, #252]	@ (8005b68 <HAL_RCC_ClockConfig+0x358>)
 8005a6a:	699b      	ldr	r3, [r3, #24]
 8005a6c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d208      	bcs.n	8005a86 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005a74:	4b3c      	ldr	r3, [pc, #240]	@ (8005b68 <HAL_RCC_ClockConfig+0x358>)
 8005a76:	699b      	ldr	r3, [r3, #24]
 8005a78:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	691b      	ldr	r3, [r3, #16]
 8005a80:	4939      	ldr	r1, [pc, #228]	@ (8005b68 <HAL_RCC_ClockConfig+0x358>)
 8005a82:	4313      	orrs	r3, r2
 8005a84:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 0308 	and.w	r3, r3, #8
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d010      	beq.n	8005ab4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	695a      	ldr	r2, [r3, #20]
 8005a96:	4b34      	ldr	r3, [pc, #208]	@ (8005b68 <HAL_RCC_ClockConfig+0x358>)
 8005a98:	69db      	ldr	r3, [r3, #28]
 8005a9a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d208      	bcs.n	8005ab4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005aa2:	4b31      	ldr	r3, [pc, #196]	@ (8005b68 <HAL_RCC_ClockConfig+0x358>)
 8005aa4:	69db      	ldr	r3, [r3, #28]
 8005aa6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	695b      	ldr	r3, [r3, #20]
 8005aae:	492e      	ldr	r1, [pc, #184]	@ (8005b68 <HAL_RCC_ClockConfig+0x358>)
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f003 0310 	and.w	r3, r3, #16
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d010      	beq.n	8005ae2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	699a      	ldr	r2, [r3, #24]
 8005ac4:	4b28      	ldr	r3, [pc, #160]	@ (8005b68 <HAL_RCC_ClockConfig+0x358>)
 8005ac6:	69db      	ldr	r3, [r3, #28]
 8005ac8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d208      	bcs.n	8005ae2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005ad0:	4b25      	ldr	r3, [pc, #148]	@ (8005b68 <HAL_RCC_ClockConfig+0x358>)
 8005ad2:	69db      	ldr	r3, [r3, #28]
 8005ad4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	699b      	ldr	r3, [r3, #24]
 8005adc:	4922      	ldr	r1, [pc, #136]	@ (8005b68 <HAL_RCC_ClockConfig+0x358>)
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 0320 	and.w	r3, r3, #32
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d010      	beq.n	8005b10 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	69da      	ldr	r2, [r3, #28]
 8005af2:	4b1d      	ldr	r3, [pc, #116]	@ (8005b68 <HAL_RCC_ClockConfig+0x358>)
 8005af4:	6a1b      	ldr	r3, [r3, #32]
 8005af6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d208      	bcs.n	8005b10 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005afe:	4b1a      	ldr	r3, [pc, #104]	@ (8005b68 <HAL_RCC_ClockConfig+0x358>)
 8005b00:	6a1b      	ldr	r3, [r3, #32]
 8005b02:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	69db      	ldr	r3, [r3, #28]
 8005b0a:	4917      	ldr	r1, [pc, #92]	@ (8005b68 <HAL_RCC_ClockConfig+0x358>)
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005b10:	f000 f834 	bl	8005b7c <HAL_RCC_GetSysClockFreq>
 8005b14:	4602      	mov	r2, r0
 8005b16:	4b14      	ldr	r3, [pc, #80]	@ (8005b68 <HAL_RCC_ClockConfig+0x358>)
 8005b18:	699b      	ldr	r3, [r3, #24]
 8005b1a:	0a1b      	lsrs	r3, r3, #8
 8005b1c:	f003 030f 	and.w	r3, r3, #15
 8005b20:	4912      	ldr	r1, [pc, #72]	@ (8005b6c <HAL_RCC_ClockConfig+0x35c>)
 8005b22:	5ccb      	ldrb	r3, [r1, r3]
 8005b24:	f003 031f 	and.w	r3, r3, #31
 8005b28:	fa22 f303 	lsr.w	r3, r2, r3
 8005b2c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005b2e:	4b0e      	ldr	r3, [pc, #56]	@ (8005b68 <HAL_RCC_ClockConfig+0x358>)
 8005b30:	699b      	ldr	r3, [r3, #24]
 8005b32:	f003 030f 	and.w	r3, r3, #15
 8005b36:	4a0d      	ldr	r2, [pc, #52]	@ (8005b6c <HAL_RCC_ClockConfig+0x35c>)
 8005b38:	5cd3      	ldrb	r3, [r2, r3]
 8005b3a:	f003 031f 	and.w	r3, r3, #31
 8005b3e:	693a      	ldr	r2, [r7, #16]
 8005b40:	fa22 f303 	lsr.w	r3, r2, r3
 8005b44:	4a0a      	ldr	r2, [pc, #40]	@ (8005b70 <HAL_RCC_ClockConfig+0x360>)
 8005b46:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005b48:	4a0a      	ldr	r2, [pc, #40]	@ (8005b74 <HAL_RCC_ClockConfig+0x364>)
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005b4e:	4b0a      	ldr	r3, [pc, #40]	@ (8005b78 <HAL_RCC_ClockConfig+0x368>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4618      	mov	r0, r3
 8005b54:	f7fb fd5e 	bl	8001614 <HAL_InitTick>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3718      	adds	r7, #24
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	58024400 	.word	0x58024400
 8005b6c:	08017bc8 	.word	0x08017bc8
 8005b70:	24000004 	.word	0x24000004
 8005b74:	24000000 	.word	0x24000000
 8005b78:	24000008 	.word	0x24000008

08005b7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b089      	sub	sp, #36	@ 0x24
 8005b80:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b82:	4bb3      	ldr	r3, [pc, #716]	@ (8005e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005b8a:	2b18      	cmp	r3, #24
 8005b8c:	f200 8155 	bhi.w	8005e3a <HAL_RCC_GetSysClockFreq+0x2be>
 8005b90:	a201      	add	r2, pc, #4	@ (adr r2, 8005b98 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b96:	bf00      	nop
 8005b98:	08005bfd 	.word	0x08005bfd
 8005b9c:	08005e3b 	.word	0x08005e3b
 8005ba0:	08005e3b 	.word	0x08005e3b
 8005ba4:	08005e3b 	.word	0x08005e3b
 8005ba8:	08005e3b 	.word	0x08005e3b
 8005bac:	08005e3b 	.word	0x08005e3b
 8005bb0:	08005e3b 	.word	0x08005e3b
 8005bb4:	08005e3b 	.word	0x08005e3b
 8005bb8:	08005c23 	.word	0x08005c23
 8005bbc:	08005e3b 	.word	0x08005e3b
 8005bc0:	08005e3b 	.word	0x08005e3b
 8005bc4:	08005e3b 	.word	0x08005e3b
 8005bc8:	08005e3b 	.word	0x08005e3b
 8005bcc:	08005e3b 	.word	0x08005e3b
 8005bd0:	08005e3b 	.word	0x08005e3b
 8005bd4:	08005e3b 	.word	0x08005e3b
 8005bd8:	08005c29 	.word	0x08005c29
 8005bdc:	08005e3b 	.word	0x08005e3b
 8005be0:	08005e3b 	.word	0x08005e3b
 8005be4:	08005e3b 	.word	0x08005e3b
 8005be8:	08005e3b 	.word	0x08005e3b
 8005bec:	08005e3b 	.word	0x08005e3b
 8005bf0:	08005e3b 	.word	0x08005e3b
 8005bf4:	08005e3b 	.word	0x08005e3b
 8005bf8:	08005c2f 	.word	0x08005c2f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005bfc:	4b94      	ldr	r3, [pc, #592]	@ (8005e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 0320 	and.w	r3, r3, #32
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d009      	beq.n	8005c1c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c08:	4b91      	ldr	r3, [pc, #580]	@ (8005e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	08db      	lsrs	r3, r3, #3
 8005c0e:	f003 0303 	and.w	r3, r3, #3
 8005c12:	4a90      	ldr	r2, [pc, #576]	@ (8005e54 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005c14:	fa22 f303 	lsr.w	r3, r2, r3
 8005c18:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005c1a:	e111      	b.n	8005e40 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005c1c:	4b8d      	ldr	r3, [pc, #564]	@ (8005e54 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005c1e:	61bb      	str	r3, [r7, #24]
      break;
 8005c20:	e10e      	b.n	8005e40 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005c22:	4b8d      	ldr	r3, [pc, #564]	@ (8005e58 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005c24:	61bb      	str	r3, [r7, #24]
      break;
 8005c26:	e10b      	b.n	8005e40 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005c28:	4b8c      	ldr	r3, [pc, #560]	@ (8005e5c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005c2a:	61bb      	str	r3, [r7, #24]
      break;
 8005c2c:	e108      	b.n	8005e40 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005c2e:	4b88      	ldr	r3, [pc, #544]	@ (8005e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c32:	f003 0303 	and.w	r3, r3, #3
 8005c36:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005c38:	4b85      	ldr	r3, [pc, #532]	@ (8005e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c3c:	091b      	lsrs	r3, r3, #4
 8005c3e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c42:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005c44:	4b82      	ldr	r3, [pc, #520]	@ (8005e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c48:	f003 0301 	and.w	r3, r3, #1
 8005c4c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005c4e:	4b80      	ldr	r3, [pc, #512]	@ (8005e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c52:	08db      	lsrs	r3, r3, #3
 8005c54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	fb02 f303 	mul.w	r3, r2, r3
 8005c5e:	ee07 3a90 	vmov	s15, r3
 8005c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c66:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	f000 80e1 	beq.w	8005e34 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	2b02      	cmp	r3, #2
 8005c76:	f000 8083 	beq.w	8005d80 <HAL_RCC_GetSysClockFreq+0x204>
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	2b02      	cmp	r3, #2
 8005c7e:	f200 80a1 	bhi.w	8005dc4 <HAL_RCC_GetSysClockFreq+0x248>
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d003      	beq.n	8005c90 <HAL_RCC_GetSysClockFreq+0x114>
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d056      	beq.n	8005d3c <HAL_RCC_GetSysClockFreq+0x1c0>
 8005c8e:	e099      	b.n	8005dc4 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c90:	4b6f      	ldr	r3, [pc, #444]	@ (8005e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 0320 	and.w	r3, r3, #32
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d02d      	beq.n	8005cf8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c9c:	4b6c      	ldr	r3, [pc, #432]	@ (8005e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	08db      	lsrs	r3, r3, #3
 8005ca2:	f003 0303 	and.w	r3, r3, #3
 8005ca6:	4a6b      	ldr	r2, [pc, #428]	@ (8005e54 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005ca8:	fa22 f303 	lsr.w	r3, r2, r3
 8005cac:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	ee07 3a90 	vmov	s15, r3
 8005cb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	ee07 3a90 	vmov	s15, r3
 8005cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cc6:	4b62      	ldr	r3, [pc, #392]	@ (8005e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cce:	ee07 3a90 	vmov	s15, r3
 8005cd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005cda:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005e60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005cde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ce2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ce6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005cea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cf2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005cf6:	e087      	b.n	8005e08 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	ee07 3a90 	vmov	s15, r3
 8005cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d02:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005e64 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005d06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d0a:	4b51      	ldr	r3, [pc, #324]	@ (8005e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d12:	ee07 3a90 	vmov	s15, r3
 8005d16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d1e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005e60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005d22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d36:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005d3a:	e065      	b.n	8005e08 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	ee07 3a90 	vmov	s15, r3
 8005d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d46:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005e68 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005d4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d4e:	4b40      	ldr	r3, [pc, #256]	@ (8005e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d56:	ee07 3a90 	vmov	s15, r3
 8005d5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d62:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005e60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005d66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d7a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005d7e:	e043      	b.n	8005e08 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	ee07 3a90 	vmov	s15, r3
 8005d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d8a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005e6c <HAL_RCC_GetSysClockFreq+0x2f0>
 8005d8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d92:	4b2f      	ldr	r3, [pc, #188]	@ (8005e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d9a:	ee07 3a90 	vmov	s15, r3
 8005d9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005da2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005da6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005e60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005daa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005db2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005db6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dbe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005dc2:	e021      	b.n	8005e08 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	ee07 3a90 	vmov	s15, r3
 8005dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dce:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005e68 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005dd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dd6:	4b1e      	ldr	r3, [pc, #120]	@ (8005e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dde:	ee07 3a90 	vmov	s15, r3
 8005de2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005de6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005dea:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005e60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005dee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005df2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005df6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005dfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e02:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005e06:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005e08:	4b11      	ldr	r3, [pc, #68]	@ (8005e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e0c:	0a5b      	lsrs	r3, r3, #9
 8005e0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e12:	3301      	adds	r3, #1
 8005e14:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	ee07 3a90 	vmov	s15, r3
 8005e1c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005e20:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e2c:	ee17 3a90 	vmov	r3, s15
 8005e30:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005e32:	e005      	b.n	8005e40 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005e34:	2300      	movs	r3, #0
 8005e36:	61bb      	str	r3, [r7, #24]
      break;
 8005e38:	e002      	b.n	8005e40 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005e3a:	4b07      	ldr	r3, [pc, #28]	@ (8005e58 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005e3c:	61bb      	str	r3, [r7, #24]
      break;
 8005e3e:	bf00      	nop
  }

  return sysclockfreq;
 8005e40:	69bb      	ldr	r3, [r7, #24]
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3724      	adds	r7, #36	@ 0x24
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr
 8005e4e:	bf00      	nop
 8005e50:	58024400 	.word	0x58024400
 8005e54:	03d09000 	.word	0x03d09000
 8005e58:	003d0900 	.word	0x003d0900
 8005e5c:	017d7840 	.word	0x017d7840
 8005e60:	46000000 	.word	0x46000000
 8005e64:	4c742400 	.word	0x4c742400
 8005e68:	4a742400 	.word	0x4a742400
 8005e6c:	4bbebc20 	.word	0x4bbebc20

08005e70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b082      	sub	sp, #8
 8005e74:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005e76:	f7ff fe81 	bl	8005b7c <HAL_RCC_GetSysClockFreq>
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	4b10      	ldr	r3, [pc, #64]	@ (8005ec0 <HAL_RCC_GetHCLKFreq+0x50>)
 8005e7e:	699b      	ldr	r3, [r3, #24]
 8005e80:	0a1b      	lsrs	r3, r3, #8
 8005e82:	f003 030f 	and.w	r3, r3, #15
 8005e86:	490f      	ldr	r1, [pc, #60]	@ (8005ec4 <HAL_RCC_GetHCLKFreq+0x54>)
 8005e88:	5ccb      	ldrb	r3, [r1, r3]
 8005e8a:	f003 031f 	and.w	r3, r3, #31
 8005e8e:	fa22 f303 	lsr.w	r3, r2, r3
 8005e92:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005e94:	4b0a      	ldr	r3, [pc, #40]	@ (8005ec0 <HAL_RCC_GetHCLKFreq+0x50>)
 8005e96:	699b      	ldr	r3, [r3, #24]
 8005e98:	f003 030f 	and.w	r3, r3, #15
 8005e9c:	4a09      	ldr	r2, [pc, #36]	@ (8005ec4 <HAL_RCC_GetHCLKFreq+0x54>)
 8005e9e:	5cd3      	ldrb	r3, [r2, r3]
 8005ea0:	f003 031f 	and.w	r3, r3, #31
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	fa22 f303 	lsr.w	r3, r2, r3
 8005eaa:	4a07      	ldr	r2, [pc, #28]	@ (8005ec8 <HAL_RCC_GetHCLKFreq+0x58>)
 8005eac:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005eae:	4a07      	ldr	r2, [pc, #28]	@ (8005ecc <HAL_RCC_GetHCLKFreq+0x5c>)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005eb4:	4b04      	ldr	r3, [pc, #16]	@ (8005ec8 <HAL_RCC_GetHCLKFreq+0x58>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3708      	adds	r7, #8
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}
 8005ec0:	58024400 	.word	0x58024400
 8005ec4:	08017bc8 	.word	0x08017bc8
 8005ec8:	24000004 	.word	0x24000004
 8005ecc:	24000000 	.word	0x24000000

08005ed0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005ed4:	f7ff ffcc 	bl	8005e70 <HAL_RCC_GetHCLKFreq>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	4b06      	ldr	r3, [pc, #24]	@ (8005ef4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005edc:	69db      	ldr	r3, [r3, #28]
 8005ede:	091b      	lsrs	r3, r3, #4
 8005ee0:	f003 0307 	and.w	r3, r3, #7
 8005ee4:	4904      	ldr	r1, [pc, #16]	@ (8005ef8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005ee6:	5ccb      	ldrb	r3, [r1, r3]
 8005ee8:	f003 031f 	and.w	r3, r3, #31
 8005eec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	bd80      	pop	{r7, pc}
 8005ef4:	58024400 	.word	0x58024400
 8005ef8:	08017bc8 	.word	0x08017bc8

08005efc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005f00:	f7ff ffb6 	bl	8005e70 <HAL_RCC_GetHCLKFreq>
 8005f04:	4602      	mov	r2, r0
 8005f06:	4b06      	ldr	r3, [pc, #24]	@ (8005f20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f08:	69db      	ldr	r3, [r3, #28]
 8005f0a:	0a1b      	lsrs	r3, r3, #8
 8005f0c:	f003 0307 	and.w	r3, r3, #7
 8005f10:	4904      	ldr	r1, [pc, #16]	@ (8005f24 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005f12:	5ccb      	ldrb	r3, [r1, r3]
 8005f14:	f003 031f 	and.w	r3, r3, #31
 8005f18:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	bd80      	pop	{r7, pc}
 8005f20:	58024400 	.word	0x58024400
 8005f24:	08017bc8 	.word	0x08017bc8

08005f28 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	223f      	movs	r2, #63	@ 0x3f
 8005f36:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005f38:	4b1a      	ldr	r3, [pc, #104]	@ (8005fa4 <HAL_RCC_GetClockConfig+0x7c>)
 8005f3a:	691b      	ldr	r3, [r3, #16]
 8005f3c:	f003 0207 	and.w	r2, r3, #7
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8005f44:	4b17      	ldr	r3, [pc, #92]	@ (8005fa4 <HAL_RCC_GetClockConfig+0x7c>)
 8005f46:	699b      	ldr	r3, [r3, #24]
 8005f48:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8005f50:	4b14      	ldr	r3, [pc, #80]	@ (8005fa4 <HAL_RCC_GetClockConfig+0x7c>)
 8005f52:	699b      	ldr	r3, [r3, #24]
 8005f54:	f003 020f 	and.w	r2, r3, #15
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8005f5c:	4b11      	ldr	r3, [pc, #68]	@ (8005fa4 <HAL_RCC_GetClockConfig+0x7c>)
 8005f5e:	699b      	ldr	r3, [r3, #24]
 8005f60:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8005f68:	4b0e      	ldr	r3, [pc, #56]	@ (8005fa4 <HAL_RCC_GetClockConfig+0x7c>)
 8005f6a:	69db      	ldr	r3, [r3, #28]
 8005f6c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8005f74:	4b0b      	ldr	r3, [pc, #44]	@ (8005fa4 <HAL_RCC_GetClockConfig+0x7c>)
 8005f76:	69db      	ldr	r3, [r3, #28]
 8005f78:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8005f80:	4b08      	ldr	r3, [pc, #32]	@ (8005fa4 <HAL_RCC_GetClockConfig+0x7c>)
 8005f82:	6a1b      	ldr	r3, [r3, #32]
 8005f84:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005f8c:	4b06      	ldr	r3, [pc, #24]	@ (8005fa8 <HAL_RCC_GetClockConfig+0x80>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f003 020f 	and.w	r2, r3, #15
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	601a      	str	r2, [r3, #0]
}
 8005f98:	bf00      	nop
 8005f9a:	370c      	adds	r7, #12
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr
 8005fa4:	58024400 	.word	0x58024400
 8005fa8:	52002000 	.word	0x52002000

08005fac <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005fac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fb0:	b0ca      	sub	sp, #296	@ 0x128
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005fb8:	2300      	movs	r3, #0
 8005fba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005fc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fcc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005fd0:	2500      	movs	r5, #0
 8005fd2:	ea54 0305 	orrs.w	r3, r4, r5
 8005fd6:	d049      	beq.n	800606c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005fd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fdc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005fde:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005fe2:	d02f      	beq.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005fe4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005fe8:	d828      	bhi.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005fea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005fee:	d01a      	beq.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005ff0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005ff4:	d822      	bhi.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d003      	beq.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005ffa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ffe:	d007      	beq.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006000:	e01c      	b.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006002:	4bb8      	ldr	r3, [pc, #736]	@ (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006006:	4ab7      	ldr	r2, [pc, #732]	@ (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006008:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800600c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800600e:	e01a      	b.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006010:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006014:	3308      	adds	r3, #8
 8006016:	2102      	movs	r1, #2
 8006018:	4618      	mov	r0, r3
 800601a:	f002 fb61 	bl	80086e0 <RCCEx_PLL2_Config>
 800601e:	4603      	mov	r3, r0
 8006020:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006024:	e00f      	b.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006026:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800602a:	3328      	adds	r3, #40	@ 0x28
 800602c:	2102      	movs	r1, #2
 800602e:	4618      	mov	r0, r3
 8006030:	f002 fc08 	bl	8008844 <RCCEx_PLL3_Config>
 8006034:	4603      	mov	r3, r0
 8006036:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800603a:	e004      	b.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006042:	e000      	b.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006044:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006046:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800604a:	2b00      	cmp	r3, #0
 800604c:	d10a      	bne.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800604e:	4ba5      	ldr	r3, [pc, #660]	@ (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006050:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006052:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006056:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800605a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800605c:	4aa1      	ldr	r2, [pc, #644]	@ (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800605e:	430b      	orrs	r3, r1
 8006060:	6513      	str	r3, [r2, #80]	@ 0x50
 8006062:	e003      	b.n	800606c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006064:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006068:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800606c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006074:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006078:	f04f 0900 	mov.w	r9, #0
 800607c:	ea58 0309 	orrs.w	r3, r8, r9
 8006080:	d047      	beq.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006082:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006086:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006088:	2b04      	cmp	r3, #4
 800608a:	d82a      	bhi.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800608c:	a201      	add	r2, pc, #4	@ (adr r2, 8006094 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800608e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006092:	bf00      	nop
 8006094:	080060a9 	.word	0x080060a9
 8006098:	080060b7 	.word	0x080060b7
 800609c:	080060cd 	.word	0x080060cd
 80060a0:	080060eb 	.word	0x080060eb
 80060a4:	080060eb 	.word	0x080060eb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060a8:	4b8e      	ldr	r3, [pc, #568]	@ (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80060aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060ac:	4a8d      	ldr	r2, [pc, #564]	@ (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80060ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80060b4:	e01a      	b.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80060b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060ba:	3308      	adds	r3, #8
 80060bc:	2100      	movs	r1, #0
 80060be:	4618      	mov	r0, r3
 80060c0:	f002 fb0e 	bl	80086e0 <RCCEx_PLL2_Config>
 80060c4:	4603      	mov	r3, r0
 80060c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80060ca:	e00f      	b.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80060cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060d0:	3328      	adds	r3, #40	@ 0x28
 80060d2:	2100      	movs	r1, #0
 80060d4:	4618      	mov	r0, r3
 80060d6:	f002 fbb5 	bl	8008844 <RCCEx_PLL3_Config>
 80060da:	4603      	mov	r3, r0
 80060dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80060e0:	e004      	b.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80060e8:	e000      	b.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80060ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d10a      	bne.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80060f4:	4b7b      	ldr	r3, [pc, #492]	@ (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80060f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060f8:	f023 0107 	bic.w	r1, r3, #7
 80060fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006100:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006102:	4a78      	ldr	r2, [pc, #480]	@ (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006104:	430b      	orrs	r3, r1
 8006106:	6513      	str	r3, [r2, #80]	@ 0x50
 8006108:	e003      	b.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800610a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800610e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006112:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800611a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800611e:	f04f 0b00 	mov.w	fp, #0
 8006122:	ea5a 030b 	orrs.w	r3, sl, fp
 8006126:	d04c      	beq.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006128:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800612c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800612e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006132:	d030      	beq.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006134:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006138:	d829      	bhi.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800613a:	2bc0      	cmp	r3, #192	@ 0xc0
 800613c:	d02d      	beq.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800613e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006140:	d825      	bhi.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006142:	2b80      	cmp	r3, #128	@ 0x80
 8006144:	d018      	beq.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006146:	2b80      	cmp	r3, #128	@ 0x80
 8006148:	d821      	bhi.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800614a:	2b00      	cmp	r3, #0
 800614c:	d002      	beq.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800614e:	2b40      	cmp	r3, #64	@ 0x40
 8006150:	d007      	beq.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006152:	e01c      	b.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006154:	4b63      	ldr	r3, [pc, #396]	@ (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006158:	4a62      	ldr	r2, [pc, #392]	@ (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800615a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800615e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006160:	e01c      	b.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006162:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006166:	3308      	adds	r3, #8
 8006168:	2100      	movs	r1, #0
 800616a:	4618      	mov	r0, r3
 800616c:	f002 fab8 	bl	80086e0 <RCCEx_PLL2_Config>
 8006170:	4603      	mov	r3, r0
 8006172:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006176:	e011      	b.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006178:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800617c:	3328      	adds	r3, #40	@ 0x28
 800617e:	2100      	movs	r1, #0
 8006180:	4618      	mov	r0, r3
 8006182:	f002 fb5f 	bl	8008844 <RCCEx_PLL3_Config>
 8006186:	4603      	mov	r3, r0
 8006188:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800618c:	e006      	b.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006194:	e002      	b.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006196:	bf00      	nop
 8006198:	e000      	b.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800619a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800619c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d10a      	bne.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80061a4:	4b4f      	ldr	r3, [pc, #316]	@ (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80061a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061a8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80061ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061b2:	4a4c      	ldr	r2, [pc, #304]	@ (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80061b4:	430b      	orrs	r3, r1
 80061b6:	6513      	str	r3, [r2, #80]	@ 0x50
 80061b8:	e003      	b.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80061c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ca:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80061ce:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80061d2:	2300      	movs	r3, #0
 80061d4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80061d8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80061dc:	460b      	mov	r3, r1
 80061de:	4313      	orrs	r3, r2
 80061e0:	d053      	beq.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80061e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80061ea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80061ee:	d035      	beq.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80061f0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80061f4:	d82e      	bhi.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80061f6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80061fa:	d031      	beq.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80061fc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006200:	d828      	bhi.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006202:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006206:	d01a      	beq.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006208:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800620c:	d822      	bhi.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800620e:	2b00      	cmp	r3, #0
 8006210:	d003      	beq.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006212:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006216:	d007      	beq.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006218:	e01c      	b.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800621a:	4b32      	ldr	r3, [pc, #200]	@ (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800621c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800621e:	4a31      	ldr	r2, [pc, #196]	@ (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006220:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006224:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006226:	e01c      	b.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006228:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800622c:	3308      	adds	r3, #8
 800622e:	2100      	movs	r1, #0
 8006230:	4618      	mov	r0, r3
 8006232:	f002 fa55 	bl	80086e0 <RCCEx_PLL2_Config>
 8006236:	4603      	mov	r3, r0
 8006238:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800623c:	e011      	b.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800623e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006242:	3328      	adds	r3, #40	@ 0x28
 8006244:	2100      	movs	r1, #0
 8006246:	4618      	mov	r0, r3
 8006248:	f002 fafc 	bl	8008844 <RCCEx_PLL3_Config>
 800624c:	4603      	mov	r3, r0
 800624e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006252:	e006      	b.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800625a:	e002      	b.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800625c:	bf00      	nop
 800625e:	e000      	b.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006260:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006262:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006266:	2b00      	cmp	r3, #0
 8006268:	d10b      	bne.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800626a:	4b1e      	ldr	r3, [pc, #120]	@ (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800626c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800626e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006272:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006276:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800627a:	4a1a      	ldr	r2, [pc, #104]	@ (80062e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800627c:	430b      	orrs	r3, r1
 800627e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006280:	e003      	b.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006282:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006286:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800628a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800628e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006292:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006296:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800629a:	2300      	movs	r3, #0
 800629c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80062a0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80062a4:	460b      	mov	r3, r1
 80062a6:	4313      	orrs	r3, r2
 80062a8:	d056      	beq.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80062aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062ae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80062b2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80062b6:	d038      	beq.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80062b8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80062bc:	d831      	bhi.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80062be:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80062c2:	d034      	beq.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x382>
 80062c4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80062c8:	d82b      	bhi.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80062ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80062ce:	d01d      	beq.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x360>
 80062d0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80062d4:	d825      	bhi.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d006      	beq.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80062da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80062de:	d00a      	beq.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80062e0:	e01f      	b.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80062e2:	bf00      	nop
 80062e4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062e8:	4ba2      	ldr	r3, [pc, #648]	@ (8006574 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80062ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ec:	4aa1      	ldr	r2, [pc, #644]	@ (8006574 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80062ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80062f4:	e01c      	b.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80062f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062fa:	3308      	adds	r3, #8
 80062fc:	2100      	movs	r1, #0
 80062fe:	4618      	mov	r0, r3
 8006300:	f002 f9ee 	bl	80086e0 <RCCEx_PLL2_Config>
 8006304:	4603      	mov	r3, r0
 8006306:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800630a:	e011      	b.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800630c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006310:	3328      	adds	r3, #40	@ 0x28
 8006312:	2100      	movs	r1, #0
 8006314:	4618      	mov	r0, r3
 8006316:	f002 fa95 	bl	8008844 <RCCEx_PLL3_Config>
 800631a:	4603      	mov	r3, r0
 800631c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006320:	e006      	b.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006328:	e002      	b.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800632a:	bf00      	nop
 800632c:	e000      	b.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800632e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006330:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006334:	2b00      	cmp	r3, #0
 8006336:	d10b      	bne.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006338:	4b8e      	ldr	r3, [pc, #568]	@ (8006574 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800633a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800633c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006340:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006344:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006348:	4a8a      	ldr	r2, [pc, #552]	@ (8006574 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800634a:	430b      	orrs	r3, r1
 800634c:	6593      	str	r3, [r2, #88]	@ 0x58
 800634e:	e003      	b.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006350:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006354:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006358:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800635c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006360:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006364:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006368:	2300      	movs	r3, #0
 800636a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800636e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006372:	460b      	mov	r3, r1
 8006374:	4313      	orrs	r3, r2
 8006376:	d03a      	beq.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006378:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800637c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800637e:	2b30      	cmp	r3, #48	@ 0x30
 8006380:	d01f      	beq.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006382:	2b30      	cmp	r3, #48	@ 0x30
 8006384:	d819      	bhi.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006386:	2b20      	cmp	r3, #32
 8006388:	d00c      	beq.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800638a:	2b20      	cmp	r3, #32
 800638c:	d815      	bhi.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800638e:	2b00      	cmp	r3, #0
 8006390:	d019      	beq.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006392:	2b10      	cmp	r3, #16
 8006394:	d111      	bne.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006396:	4b77      	ldr	r3, [pc, #476]	@ (8006574 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800639a:	4a76      	ldr	r2, [pc, #472]	@ (8006574 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800639c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80063a2:	e011      	b.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80063a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063a8:	3308      	adds	r3, #8
 80063aa:	2102      	movs	r1, #2
 80063ac:	4618      	mov	r0, r3
 80063ae:	f002 f997 	bl	80086e0 <RCCEx_PLL2_Config>
 80063b2:	4603      	mov	r3, r0
 80063b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80063b8:	e006      	b.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80063c0:	e002      	b.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80063c2:	bf00      	nop
 80063c4:	e000      	b.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80063c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d10a      	bne.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80063d0:	4b68      	ldr	r3, [pc, #416]	@ (8006574 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80063d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80063d4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80063d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80063de:	4a65      	ldr	r2, [pc, #404]	@ (8006574 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80063e0:	430b      	orrs	r3, r1
 80063e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80063e4:	e003      	b.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80063ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80063fa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80063fe:	2300      	movs	r3, #0
 8006400:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006404:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006408:	460b      	mov	r3, r1
 800640a:	4313      	orrs	r3, r2
 800640c:	d051      	beq.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800640e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006412:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006414:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006418:	d035      	beq.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800641a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800641e:	d82e      	bhi.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006420:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006424:	d031      	beq.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006426:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800642a:	d828      	bhi.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800642c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006430:	d01a      	beq.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006432:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006436:	d822      	bhi.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006438:	2b00      	cmp	r3, #0
 800643a:	d003      	beq.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800643c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006440:	d007      	beq.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006442:	e01c      	b.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006444:	4b4b      	ldr	r3, [pc, #300]	@ (8006574 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006448:	4a4a      	ldr	r2, [pc, #296]	@ (8006574 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800644a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800644e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006450:	e01c      	b.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006452:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006456:	3308      	adds	r3, #8
 8006458:	2100      	movs	r1, #0
 800645a:	4618      	mov	r0, r3
 800645c:	f002 f940 	bl	80086e0 <RCCEx_PLL2_Config>
 8006460:	4603      	mov	r3, r0
 8006462:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006466:	e011      	b.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006468:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800646c:	3328      	adds	r3, #40	@ 0x28
 800646e:	2100      	movs	r1, #0
 8006470:	4618      	mov	r0, r3
 8006472:	f002 f9e7 	bl	8008844 <RCCEx_PLL3_Config>
 8006476:	4603      	mov	r3, r0
 8006478:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800647c:	e006      	b.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006484:	e002      	b.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006486:	bf00      	nop
 8006488:	e000      	b.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800648a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800648c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006490:	2b00      	cmp	r3, #0
 8006492:	d10a      	bne.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006494:	4b37      	ldr	r3, [pc, #220]	@ (8006574 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006496:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006498:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800649c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064a2:	4a34      	ldr	r2, [pc, #208]	@ (8006574 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80064a4:	430b      	orrs	r3, r1
 80064a6:	6513      	str	r3, [r2, #80]	@ 0x50
 80064a8:	e003      	b.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80064b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ba:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80064be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80064c2:	2300      	movs	r3, #0
 80064c4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80064c8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80064cc:	460b      	mov	r3, r1
 80064ce:	4313      	orrs	r3, r2
 80064d0:	d056      	beq.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80064d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80064d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80064dc:	d033      	beq.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80064de:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80064e2:	d82c      	bhi.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80064e4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80064e8:	d02f      	beq.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80064ea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80064ee:	d826      	bhi.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80064f0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80064f4:	d02b      	beq.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80064f6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80064fa:	d820      	bhi.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80064fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006500:	d012      	beq.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8006502:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006506:	d81a      	bhi.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006508:	2b00      	cmp	r3, #0
 800650a:	d022      	beq.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800650c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006510:	d115      	bne.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006512:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006516:	3308      	adds	r3, #8
 8006518:	2101      	movs	r1, #1
 800651a:	4618      	mov	r0, r3
 800651c:	f002 f8e0 	bl	80086e0 <RCCEx_PLL2_Config>
 8006520:	4603      	mov	r3, r0
 8006522:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006526:	e015      	b.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006528:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800652c:	3328      	adds	r3, #40	@ 0x28
 800652e:	2101      	movs	r1, #1
 8006530:	4618      	mov	r0, r3
 8006532:	f002 f987 	bl	8008844 <RCCEx_PLL3_Config>
 8006536:	4603      	mov	r3, r0
 8006538:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800653c:	e00a      	b.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006544:	e006      	b.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006546:	bf00      	nop
 8006548:	e004      	b.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800654a:	bf00      	nop
 800654c:	e002      	b.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800654e:	bf00      	nop
 8006550:	e000      	b.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006552:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006554:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006558:	2b00      	cmp	r3, #0
 800655a:	d10d      	bne.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800655c:	4b05      	ldr	r3, [pc, #20]	@ (8006574 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800655e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006560:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006564:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006568:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800656a:	4a02      	ldr	r2, [pc, #8]	@ (8006574 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800656c:	430b      	orrs	r3, r1
 800656e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006570:	e006      	b.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006572:	bf00      	nop
 8006574:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006578:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800657c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006580:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006588:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800658c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006590:	2300      	movs	r3, #0
 8006592:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006596:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800659a:	460b      	mov	r3, r1
 800659c:	4313      	orrs	r3, r2
 800659e:	d055      	beq.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80065a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80065a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80065ac:	d033      	beq.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80065ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80065b2:	d82c      	bhi.n	800660e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80065b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065b8:	d02f      	beq.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80065ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065be:	d826      	bhi.n	800660e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80065c0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80065c4:	d02b      	beq.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x672>
 80065c6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80065ca:	d820      	bhi.n	800660e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80065cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065d0:	d012      	beq.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80065d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065d6:	d81a      	bhi.n	800660e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d022      	beq.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80065dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80065e0:	d115      	bne.n	800660e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80065e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065e6:	3308      	adds	r3, #8
 80065e8:	2101      	movs	r1, #1
 80065ea:	4618      	mov	r0, r3
 80065ec:	f002 f878 	bl	80086e0 <RCCEx_PLL2_Config>
 80065f0:	4603      	mov	r3, r0
 80065f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80065f6:	e015      	b.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80065f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065fc:	3328      	adds	r3, #40	@ 0x28
 80065fe:	2101      	movs	r1, #1
 8006600:	4618      	mov	r0, r3
 8006602:	f002 f91f 	bl	8008844 <RCCEx_PLL3_Config>
 8006606:	4603      	mov	r3, r0
 8006608:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800660c:	e00a      	b.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006614:	e006      	b.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006616:	bf00      	nop
 8006618:	e004      	b.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800661a:	bf00      	nop
 800661c:	e002      	b.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800661e:	bf00      	nop
 8006620:	e000      	b.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006622:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006624:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006628:	2b00      	cmp	r3, #0
 800662a:	d10b      	bne.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800662c:	4ba3      	ldr	r3, [pc, #652]	@ (80068bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800662e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006630:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006634:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006638:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800663c:	4a9f      	ldr	r2, [pc, #636]	@ (80068bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800663e:	430b      	orrs	r3, r1
 8006640:	6593      	str	r3, [r2, #88]	@ 0x58
 8006642:	e003      	b.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006644:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006648:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800664c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006654:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006658:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800665c:	2300      	movs	r3, #0
 800665e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006662:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006666:	460b      	mov	r3, r1
 8006668:	4313      	orrs	r3, r2
 800666a:	d037      	beq.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800666c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006670:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006672:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006676:	d00e      	beq.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006678:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800667c:	d816      	bhi.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x700>
 800667e:	2b00      	cmp	r3, #0
 8006680:	d018      	beq.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8006682:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006686:	d111      	bne.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006688:	4b8c      	ldr	r3, [pc, #560]	@ (80068bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800668a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800668c:	4a8b      	ldr	r2, [pc, #556]	@ (80068bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800668e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006692:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006694:	e00f      	b.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006696:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800669a:	3308      	adds	r3, #8
 800669c:	2101      	movs	r1, #1
 800669e:	4618      	mov	r0, r3
 80066a0:	f002 f81e 	bl	80086e0 <RCCEx_PLL2_Config>
 80066a4:	4603      	mov	r3, r0
 80066a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80066aa:	e004      	b.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80066b2:	e000      	b.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80066b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d10a      	bne.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80066be:	4b7f      	ldr	r3, [pc, #508]	@ (80068bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80066c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066c2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80066c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066cc:	4a7b      	ldr	r2, [pc, #492]	@ (80068bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80066ce:	430b      	orrs	r3, r1
 80066d0:	6513      	str	r3, [r2, #80]	@ 0x50
 80066d2:	e003      	b.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80066dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80066e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80066ec:	2300      	movs	r3, #0
 80066ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80066f2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80066f6:	460b      	mov	r3, r1
 80066f8:	4313      	orrs	r3, r2
 80066fa:	d039      	beq.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80066fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006700:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006702:	2b03      	cmp	r3, #3
 8006704:	d81c      	bhi.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8006706:	a201      	add	r2, pc, #4	@ (adr r2, 800670c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800670c:	08006749 	.word	0x08006749
 8006710:	0800671d 	.word	0x0800671d
 8006714:	0800672b 	.word	0x0800672b
 8006718:	08006749 	.word	0x08006749
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800671c:	4b67      	ldr	r3, [pc, #412]	@ (80068bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800671e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006720:	4a66      	ldr	r2, [pc, #408]	@ (80068bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006722:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006726:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006728:	e00f      	b.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800672a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800672e:	3308      	adds	r3, #8
 8006730:	2102      	movs	r1, #2
 8006732:	4618      	mov	r0, r3
 8006734:	f001 ffd4 	bl	80086e0 <RCCEx_PLL2_Config>
 8006738:	4603      	mov	r3, r0
 800673a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800673e:	e004      	b.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006746:	e000      	b.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006748:	bf00      	nop
    }

    if (ret == HAL_OK)
 800674a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800674e:	2b00      	cmp	r3, #0
 8006750:	d10a      	bne.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006752:	4b5a      	ldr	r3, [pc, #360]	@ (80068bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006756:	f023 0103 	bic.w	r1, r3, #3
 800675a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800675e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006760:	4a56      	ldr	r2, [pc, #344]	@ (80068bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006762:	430b      	orrs	r3, r1
 8006764:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006766:	e003      	b.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006768:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800676c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006770:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006778:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800677c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006780:	2300      	movs	r3, #0
 8006782:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006786:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800678a:	460b      	mov	r3, r1
 800678c:	4313      	orrs	r3, r2
 800678e:	f000 809f 	beq.w	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006792:	4b4b      	ldr	r3, [pc, #300]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a4a      	ldr	r2, [pc, #296]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006798:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800679c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800679e:	f7fd fac3 	bl	8003d28 <HAL_GetTick>
 80067a2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067a6:	e00b      	b.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067a8:	f7fd fabe 	bl	8003d28 <HAL_GetTick>
 80067ac:	4602      	mov	r2, r0
 80067ae:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80067b2:	1ad3      	subs	r3, r2, r3
 80067b4:	2b64      	cmp	r3, #100	@ 0x64
 80067b6:	d903      	bls.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80067b8:	2303      	movs	r3, #3
 80067ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80067be:	e005      	b.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067c0:	4b3f      	ldr	r3, [pc, #252]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d0ed      	beq.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80067cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d179      	bne.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80067d4:	4b39      	ldr	r3, [pc, #228]	@ (80068bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80067d6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80067d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067dc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80067e0:	4053      	eors	r3, r2
 80067e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d015      	beq.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80067ea:	4b34      	ldr	r3, [pc, #208]	@ (80068bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80067ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067f2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80067f6:	4b31      	ldr	r3, [pc, #196]	@ (80068bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80067f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067fa:	4a30      	ldr	r2, [pc, #192]	@ (80068bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80067fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006800:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006802:	4b2e      	ldr	r3, [pc, #184]	@ (80068bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006804:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006806:	4a2d      	ldr	r2, [pc, #180]	@ (80068bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006808:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800680c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800680e:	4a2b      	ldr	r2, [pc, #172]	@ (80068bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006810:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006814:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006816:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800681a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800681e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006822:	d118      	bne.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006824:	f7fd fa80 	bl	8003d28 <HAL_GetTick>
 8006828:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800682c:	e00d      	b.n	800684a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800682e:	f7fd fa7b 	bl	8003d28 <HAL_GetTick>
 8006832:	4602      	mov	r2, r0
 8006834:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006838:	1ad2      	subs	r2, r2, r3
 800683a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800683e:	429a      	cmp	r2, r3
 8006840:	d903      	bls.n	800684a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8006842:	2303      	movs	r3, #3
 8006844:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8006848:	e005      	b.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800684a:	4b1c      	ldr	r3, [pc, #112]	@ (80068bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800684c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800684e:	f003 0302 	and.w	r3, r3, #2
 8006852:	2b00      	cmp	r3, #0
 8006854:	d0eb      	beq.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8006856:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800685a:	2b00      	cmp	r3, #0
 800685c:	d129      	bne.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800685e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006862:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006866:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800686a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800686e:	d10e      	bne.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006870:	4b12      	ldr	r3, [pc, #72]	@ (80068bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006872:	691b      	ldr	r3, [r3, #16]
 8006874:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006878:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800687c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006880:	091a      	lsrs	r2, r3, #4
 8006882:	4b10      	ldr	r3, [pc, #64]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006884:	4013      	ands	r3, r2
 8006886:	4a0d      	ldr	r2, [pc, #52]	@ (80068bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006888:	430b      	orrs	r3, r1
 800688a:	6113      	str	r3, [r2, #16]
 800688c:	e005      	b.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800688e:	4b0b      	ldr	r3, [pc, #44]	@ (80068bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006890:	691b      	ldr	r3, [r3, #16]
 8006892:	4a0a      	ldr	r2, [pc, #40]	@ (80068bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006894:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006898:	6113      	str	r3, [r2, #16]
 800689a:	4b08      	ldr	r3, [pc, #32]	@ (80068bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800689c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800689e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80068a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068aa:	4a04      	ldr	r2, [pc, #16]	@ (80068bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068ac:	430b      	orrs	r3, r1
 80068ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80068b0:	e00e      	b.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80068b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80068ba:	e009      	b.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80068bc:	58024400 	.word	0x58024400
 80068c0:	58024800 	.word	0x58024800
 80068c4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80068d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d8:	f002 0301 	and.w	r3, r2, #1
 80068dc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80068e0:	2300      	movs	r3, #0
 80068e2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80068e6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80068ea:	460b      	mov	r3, r1
 80068ec:	4313      	orrs	r3, r2
 80068ee:	f000 8089 	beq.w	8006a04 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80068f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80068f8:	2b28      	cmp	r3, #40	@ 0x28
 80068fa:	d86b      	bhi.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80068fc:	a201      	add	r2, pc, #4	@ (adr r2, 8006904 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80068fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006902:	bf00      	nop
 8006904:	080069dd 	.word	0x080069dd
 8006908:	080069d5 	.word	0x080069d5
 800690c:	080069d5 	.word	0x080069d5
 8006910:	080069d5 	.word	0x080069d5
 8006914:	080069d5 	.word	0x080069d5
 8006918:	080069d5 	.word	0x080069d5
 800691c:	080069d5 	.word	0x080069d5
 8006920:	080069d5 	.word	0x080069d5
 8006924:	080069a9 	.word	0x080069a9
 8006928:	080069d5 	.word	0x080069d5
 800692c:	080069d5 	.word	0x080069d5
 8006930:	080069d5 	.word	0x080069d5
 8006934:	080069d5 	.word	0x080069d5
 8006938:	080069d5 	.word	0x080069d5
 800693c:	080069d5 	.word	0x080069d5
 8006940:	080069d5 	.word	0x080069d5
 8006944:	080069bf 	.word	0x080069bf
 8006948:	080069d5 	.word	0x080069d5
 800694c:	080069d5 	.word	0x080069d5
 8006950:	080069d5 	.word	0x080069d5
 8006954:	080069d5 	.word	0x080069d5
 8006958:	080069d5 	.word	0x080069d5
 800695c:	080069d5 	.word	0x080069d5
 8006960:	080069d5 	.word	0x080069d5
 8006964:	080069dd 	.word	0x080069dd
 8006968:	080069d5 	.word	0x080069d5
 800696c:	080069d5 	.word	0x080069d5
 8006970:	080069d5 	.word	0x080069d5
 8006974:	080069d5 	.word	0x080069d5
 8006978:	080069d5 	.word	0x080069d5
 800697c:	080069d5 	.word	0x080069d5
 8006980:	080069d5 	.word	0x080069d5
 8006984:	080069dd 	.word	0x080069dd
 8006988:	080069d5 	.word	0x080069d5
 800698c:	080069d5 	.word	0x080069d5
 8006990:	080069d5 	.word	0x080069d5
 8006994:	080069d5 	.word	0x080069d5
 8006998:	080069d5 	.word	0x080069d5
 800699c:	080069d5 	.word	0x080069d5
 80069a0:	080069d5 	.word	0x080069d5
 80069a4:	080069dd 	.word	0x080069dd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80069a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069ac:	3308      	adds	r3, #8
 80069ae:	2101      	movs	r1, #1
 80069b0:	4618      	mov	r0, r3
 80069b2:	f001 fe95 	bl	80086e0 <RCCEx_PLL2_Config>
 80069b6:	4603      	mov	r3, r0
 80069b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80069bc:	e00f      	b.n	80069de <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80069be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069c2:	3328      	adds	r3, #40	@ 0x28
 80069c4:	2101      	movs	r1, #1
 80069c6:	4618      	mov	r0, r3
 80069c8:	f001 ff3c 	bl	8008844 <RCCEx_PLL3_Config>
 80069cc:	4603      	mov	r3, r0
 80069ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80069d2:	e004      	b.n	80069de <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069d4:	2301      	movs	r3, #1
 80069d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80069da:	e000      	b.n	80069de <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80069dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d10a      	bne.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80069e6:	4bbf      	ldr	r3, [pc, #764]	@ (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80069e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069ea:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80069ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80069f4:	4abb      	ldr	r2, [pc, #748]	@ (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80069f6:	430b      	orrs	r3, r1
 80069f8:	6553      	str	r3, [r2, #84]	@ 0x54
 80069fa:	e003      	b.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a00:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006a04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a0c:	f002 0302 	and.w	r3, r2, #2
 8006a10:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006a14:	2300      	movs	r3, #0
 8006a16:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006a1a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006a1e:	460b      	mov	r3, r1
 8006a20:	4313      	orrs	r3, r2
 8006a22:	d041      	beq.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006a24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a28:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006a2a:	2b05      	cmp	r3, #5
 8006a2c:	d824      	bhi.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006a2e:	a201      	add	r2, pc, #4	@ (adr r2, 8006a34 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a34:	08006a81 	.word	0x08006a81
 8006a38:	08006a4d 	.word	0x08006a4d
 8006a3c:	08006a63 	.word	0x08006a63
 8006a40:	08006a81 	.word	0x08006a81
 8006a44:	08006a81 	.word	0x08006a81
 8006a48:	08006a81 	.word	0x08006a81
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006a4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a50:	3308      	adds	r3, #8
 8006a52:	2101      	movs	r1, #1
 8006a54:	4618      	mov	r0, r3
 8006a56:	f001 fe43 	bl	80086e0 <RCCEx_PLL2_Config>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006a60:	e00f      	b.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a66:	3328      	adds	r3, #40	@ 0x28
 8006a68:	2101      	movs	r1, #1
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f001 feea 	bl	8008844 <RCCEx_PLL3_Config>
 8006a70:	4603      	mov	r3, r0
 8006a72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006a76:	e004      	b.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006a7e:	e000      	b.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006a80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d10a      	bne.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006a8a:	4b96      	ldr	r3, [pc, #600]	@ (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006a8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a8e:	f023 0107 	bic.w	r1, r3, #7
 8006a92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a96:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006a98:	4a92      	ldr	r2, [pc, #584]	@ (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006a9a:	430b      	orrs	r3, r1
 8006a9c:	6553      	str	r3, [r2, #84]	@ 0x54
 8006a9e:	e003      	b.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aa0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006aa4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006aa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab0:	f002 0304 	and.w	r3, r2, #4
 8006ab4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006ab8:	2300      	movs	r3, #0
 8006aba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006abe:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006ac2:	460b      	mov	r3, r1
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	d044      	beq.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006acc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ad0:	2b05      	cmp	r3, #5
 8006ad2:	d825      	bhi.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006ad4:	a201      	add	r2, pc, #4	@ (adr r2, 8006adc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8006ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ada:	bf00      	nop
 8006adc:	08006b29 	.word	0x08006b29
 8006ae0:	08006af5 	.word	0x08006af5
 8006ae4:	08006b0b 	.word	0x08006b0b
 8006ae8:	08006b29 	.word	0x08006b29
 8006aec:	08006b29 	.word	0x08006b29
 8006af0:	08006b29 	.word	0x08006b29
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006af4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006af8:	3308      	adds	r3, #8
 8006afa:	2101      	movs	r1, #1
 8006afc:	4618      	mov	r0, r3
 8006afe:	f001 fdef 	bl	80086e0 <RCCEx_PLL2_Config>
 8006b02:	4603      	mov	r3, r0
 8006b04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006b08:	e00f      	b.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b0e:	3328      	adds	r3, #40	@ 0x28
 8006b10:	2101      	movs	r1, #1
 8006b12:	4618      	mov	r0, r3
 8006b14:	f001 fe96 	bl	8008844 <RCCEx_PLL3_Config>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006b1e:	e004      	b.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b20:	2301      	movs	r3, #1
 8006b22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006b26:	e000      	b.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006b28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d10b      	bne.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006b32:	4b6c      	ldr	r3, [pc, #432]	@ (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006b34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b36:	f023 0107 	bic.w	r1, r3, #7
 8006b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b42:	4a68      	ldr	r2, [pc, #416]	@ (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006b44:	430b      	orrs	r3, r1
 8006b46:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b48:	e003      	b.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b5a:	f002 0320 	and.w	r3, r2, #32
 8006b5e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006b62:	2300      	movs	r3, #0
 8006b64:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006b68:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006b6c:	460b      	mov	r3, r1
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	d055      	beq.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006b7e:	d033      	beq.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006b80:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006b84:	d82c      	bhi.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006b86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b8a:	d02f      	beq.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b90:	d826      	bhi.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006b92:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006b96:	d02b      	beq.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006b98:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006b9c:	d820      	bhi.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006b9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ba2:	d012      	beq.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006ba4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ba8:	d81a      	bhi.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d022      	beq.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006bae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006bb2:	d115      	bne.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bb8:	3308      	adds	r3, #8
 8006bba:	2100      	movs	r1, #0
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f001 fd8f 	bl	80086e0 <RCCEx_PLL2_Config>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006bc8:	e015      	b.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bce:	3328      	adds	r3, #40	@ 0x28
 8006bd0:	2102      	movs	r1, #2
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f001 fe36 	bl	8008844 <RCCEx_PLL3_Config>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006bde:	e00a      	b.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006be0:	2301      	movs	r3, #1
 8006be2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006be6:	e006      	b.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006be8:	bf00      	nop
 8006bea:	e004      	b.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006bec:	bf00      	nop
 8006bee:	e002      	b.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006bf0:	bf00      	nop
 8006bf2:	e000      	b.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006bf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bf6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d10b      	bne.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006bfe:	4b39      	ldr	r3, [pc, #228]	@ (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006c00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c02:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c0e:	4a35      	ldr	r2, [pc, #212]	@ (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006c10:	430b      	orrs	r3, r1
 8006c12:	6553      	str	r3, [r2, #84]	@ 0x54
 8006c14:	e003      	b.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c26:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006c2a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006c2e:	2300      	movs	r3, #0
 8006c30:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006c34:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006c38:	460b      	mov	r3, r1
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	d058      	beq.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c42:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006c46:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006c4a:	d033      	beq.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006c4c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006c50:	d82c      	bhi.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006c52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c56:	d02f      	beq.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006c58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c5c:	d826      	bhi.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006c5e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006c62:	d02b      	beq.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006c64:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006c68:	d820      	bhi.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006c6a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c6e:	d012      	beq.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006c70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c74:	d81a      	bhi.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d022      	beq.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006c7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c7e:	d115      	bne.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c84:	3308      	adds	r3, #8
 8006c86:	2100      	movs	r1, #0
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f001 fd29 	bl	80086e0 <RCCEx_PLL2_Config>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006c94:	e015      	b.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c9a:	3328      	adds	r3, #40	@ 0x28
 8006c9c:	2102      	movs	r1, #2
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f001 fdd0 	bl	8008844 <RCCEx_PLL3_Config>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006caa:	e00a      	b.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006cac:	2301      	movs	r3, #1
 8006cae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006cb2:	e006      	b.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006cb4:	bf00      	nop
 8006cb6:	e004      	b.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006cb8:	bf00      	nop
 8006cba:	e002      	b.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006cbc:	bf00      	nop
 8006cbe:	e000      	b.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006cc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d10e      	bne.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006cca:	4b06      	ldr	r3, [pc, #24]	@ (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006ccc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cce:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006cda:	4a02      	ldr	r2, [pc, #8]	@ (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006cdc:	430b      	orrs	r3, r1
 8006cde:	6593      	str	r3, [r2, #88]	@ 0x58
 8006ce0:	e006      	b.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006ce2:	bf00      	nop
 8006ce4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ce8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006cf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006cfc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006d00:	2300      	movs	r3, #0
 8006d02:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006d06:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006d0a:	460b      	mov	r3, r1
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	d055      	beq.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d14:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006d18:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006d1c:	d033      	beq.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006d1e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006d22:	d82c      	bhi.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006d24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d28:	d02f      	beq.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006d2a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d2e:	d826      	bhi.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006d30:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006d34:	d02b      	beq.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006d36:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006d3a:	d820      	bhi.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006d3c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006d40:	d012      	beq.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006d42:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006d46:	d81a      	bhi.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d022      	beq.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006d4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d50:	d115      	bne.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d56:	3308      	adds	r3, #8
 8006d58:	2100      	movs	r1, #0
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f001 fcc0 	bl	80086e0 <RCCEx_PLL2_Config>
 8006d60:	4603      	mov	r3, r0
 8006d62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006d66:	e015      	b.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006d68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d6c:	3328      	adds	r3, #40	@ 0x28
 8006d6e:	2102      	movs	r1, #2
 8006d70:	4618      	mov	r0, r3
 8006d72:	f001 fd67 	bl	8008844 <RCCEx_PLL3_Config>
 8006d76:	4603      	mov	r3, r0
 8006d78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006d7c:	e00a      	b.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006d84:	e006      	b.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006d86:	bf00      	nop
 8006d88:	e004      	b.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006d8a:	bf00      	nop
 8006d8c:	e002      	b.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006d8e:	bf00      	nop
 8006d90:	e000      	b.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006d92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d10b      	bne.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006d9c:	4ba1      	ldr	r3, [pc, #644]	@ (8007024 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006d9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006da0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006da4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006da8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006dac:	4a9d      	ldr	r2, [pc, #628]	@ (8007024 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006dae:	430b      	orrs	r3, r1
 8006db0:	6593      	str	r3, [r2, #88]	@ 0x58
 8006db2:	e003      	b.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006db4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006db8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc4:	f002 0308 	and.w	r3, r2, #8
 8006dc8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006dcc:	2300      	movs	r3, #0
 8006dce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006dd2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006dd6:	460b      	mov	r3, r1
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	d01e      	beq.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006ddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006de0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006de4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006de8:	d10c      	bne.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dee:	3328      	adds	r3, #40	@ 0x28
 8006df0:	2102      	movs	r1, #2
 8006df2:	4618      	mov	r0, r3
 8006df4:	f001 fd26 	bl	8008844 <RCCEx_PLL3_Config>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d002      	beq.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006e04:	4b87      	ldr	r3, [pc, #540]	@ (8007024 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006e06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e08:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e14:	4a83      	ldr	r2, [pc, #524]	@ (8007024 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006e16:	430b      	orrs	r3, r1
 8006e18:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006e1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e22:	f002 0310 	and.w	r3, r2, #16
 8006e26:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006e30:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006e34:	460b      	mov	r3, r1
 8006e36:	4313      	orrs	r3, r2
 8006e38:	d01e      	beq.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006e42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e46:	d10c      	bne.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006e48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e4c:	3328      	adds	r3, #40	@ 0x28
 8006e4e:	2102      	movs	r1, #2
 8006e50:	4618      	mov	r0, r3
 8006e52:	f001 fcf7 	bl	8008844 <RCCEx_PLL3_Config>
 8006e56:	4603      	mov	r3, r0
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d002      	beq.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006e62:	4b70      	ldr	r3, [pc, #448]	@ (8007024 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006e64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e66:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006e72:	4a6c      	ldr	r2, [pc, #432]	@ (8007024 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006e74:	430b      	orrs	r3, r1
 8006e76:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e80:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006e84:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006e88:	2300      	movs	r3, #0
 8006e8a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006e8e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006e92:	460b      	mov	r3, r1
 8006e94:	4313      	orrs	r3, r2
 8006e96:	d03e      	beq.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e9c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006ea0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ea4:	d022      	beq.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006ea6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006eaa:	d81b      	bhi.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d003      	beq.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006eb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006eb4:	d00b      	beq.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006eb6:	e015      	b.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ebc:	3308      	adds	r3, #8
 8006ebe:	2100      	movs	r1, #0
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f001 fc0d 	bl	80086e0 <RCCEx_PLL2_Config>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006ecc:	e00f      	b.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ed2:	3328      	adds	r3, #40	@ 0x28
 8006ed4:	2102      	movs	r1, #2
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f001 fcb4 	bl	8008844 <RCCEx_PLL3_Config>
 8006edc:	4603      	mov	r3, r0
 8006ede:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006ee2:	e004      	b.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006eea:	e000      	b.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006eec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006eee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d10b      	bne.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006ef6:	4b4b      	ldr	r3, [pc, #300]	@ (8007024 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006ef8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006efa:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006efe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f02:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006f06:	4a47      	ldr	r2, [pc, #284]	@ (8007024 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006f08:	430b      	orrs	r3, r1
 8006f0a:	6593      	str	r3, [r2, #88]	@ 0x58
 8006f0c:	e003      	b.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f1e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006f22:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006f24:	2300      	movs	r3, #0
 8006f26:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006f28:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006f2c:	460b      	mov	r3, r1
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	d03b      	beq.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006f32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f3a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006f3e:	d01f      	beq.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006f40:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006f44:	d818      	bhi.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006f46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f4a:	d003      	beq.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006f4c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006f50:	d007      	beq.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006f52:	e011      	b.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f54:	4b33      	ldr	r3, [pc, #204]	@ (8007024 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f58:	4a32      	ldr	r2, [pc, #200]	@ (8007024 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006f5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006f60:	e00f      	b.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f66:	3328      	adds	r3, #40	@ 0x28
 8006f68:	2101      	movs	r1, #1
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f001 fc6a 	bl	8008844 <RCCEx_PLL3_Config>
 8006f70:	4603      	mov	r3, r0
 8006f72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006f76:	e004      	b.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006f7e:	e000      	b.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006f80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d10b      	bne.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006f8a:	4b26      	ldr	r3, [pc, #152]	@ (8007024 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006f8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f8e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f9a:	4a22      	ldr	r2, [pc, #136]	@ (8007024 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006f9c:	430b      	orrs	r3, r1
 8006f9e:	6553      	str	r3, [r2, #84]	@ 0x54
 8006fa0:	e003      	b.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fa2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fa6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006fb6:	673b      	str	r3, [r7, #112]	@ 0x70
 8006fb8:	2300      	movs	r3, #0
 8006fba:	677b      	str	r3, [r7, #116]	@ 0x74
 8006fbc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006fc0:	460b      	mov	r3, r1
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	d034      	beq.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d003      	beq.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006fd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fd4:	d007      	beq.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006fd6:	e011      	b.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fd8:	4b12      	ldr	r3, [pc, #72]	@ (8007024 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fdc:	4a11      	ldr	r2, [pc, #68]	@ (8007024 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006fde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006fe2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006fe4:	e00e      	b.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fea:	3308      	adds	r3, #8
 8006fec:	2102      	movs	r1, #2
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f001 fb76 	bl	80086e0 <RCCEx_PLL2_Config>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006ffa:	e003      	b.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007002:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007004:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007008:	2b00      	cmp	r3, #0
 800700a:	d10d      	bne.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800700c:	4b05      	ldr	r3, [pc, #20]	@ (8007024 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800700e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007010:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007014:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007018:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800701a:	4a02      	ldr	r2, [pc, #8]	@ (8007024 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800701c:	430b      	orrs	r3, r1
 800701e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007020:	e006      	b.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007022:	bf00      	nop
 8007024:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007028:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800702c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007030:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007038:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800703c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800703e:	2300      	movs	r3, #0
 8007040:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007042:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007046:	460b      	mov	r3, r1
 8007048:	4313      	orrs	r3, r2
 800704a:	d00c      	beq.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800704c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007050:	3328      	adds	r3, #40	@ 0x28
 8007052:	2102      	movs	r1, #2
 8007054:	4618      	mov	r0, r3
 8007056:	f001 fbf5 	bl	8008844 <RCCEx_PLL3_Config>
 800705a:	4603      	mov	r3, r0
 800705c:	2b00      	cmp	r3, #0
 800705e:	d002      	beq.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007060:	2301      	movs	r3, #1
 8007062:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007066:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800706a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800706e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007072:	663b      	str	r3, [r7, #96]	@ 0x60
 8007074:	2300      	movs	r3, #0
 8007076:	667b      	str	r3, [r7, #100]	@ 0x64
 8007078:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800707c:	460b      	mov	r3, r1
 800707e:	4313      	orrs	r3, r2
 8007080:	d038      	beq.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007082:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007086:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800708a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800708e:	d018      	beq.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007090:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007094:	d811      	bhi.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007096:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800709a:	d014      	beq.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800709c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070a0:	d80b      	bhi.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d011      	beq.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80070a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070aa:	d106      	bne.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070ac:	4bc3      	ldr	r3, [pc, #780]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80070ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070b0:	4ac2      	ldr	r2, [pc, #776]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80070b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80070b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80070b8:	e008      	b.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070ba:	2301      	movs	r3, #1
 80070bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80070c0:	e004      	b.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80070c2:	bf00      	nop
 80070c4:	e002      	b.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80070c6:	bf00      	nop
 80070c8:	e000      	b.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80070ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d10b      	bne.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80070d4:	4bb9      	ldr	r3, [pc, #740]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80070d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070d8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80070dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070e4:	4ab5      	ldr	r2, [pc, #724]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80070e6:	430b      	orrs	r3, r1
 80070e8:	6553      	str	r3, [r2, #84]	@ 0x54
 80070ea:	e003      	b.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80070f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070fc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007100:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007102:	2300      	movs	r3, #0
 8007104:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007106:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800710a:	460b      	mov	r3, r1
 800710c:	4313      	orrs	r3, r2
 800710e:	d009      	beq.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007110:	4baa      	ldr	r3, [pc, #680]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007112:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007114:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007118:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800711c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800711e:	4aa7      	ldr	r2, [pc, #668]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007120:	430b      	orrs	r3, r1
 8007122:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007124:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800712c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007130:	653b      	str	r3, [r7, #80]	@ 0x50
 8007132:	2300      	movs	r3, #0
 8007134:	657b      	str	r3, [r7, #84]	@ 0x54
 8007136:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800713a:	460b      	mov	r3, r1
 800713c:	4313      	orrs	r3, r2
 800713e:	d00a      	beq.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007140:	4b9e      	ldr	r3, [pc, #632]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007142:	691b      	ldr	r3, [r3, #16]
 8007144:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007148:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800714c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007150:	4a9a      	ldr	r2, [pc, #616]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007152:	430b      	orrs	r3, r1
 8007154:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007156:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800715a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800715e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007162:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007164:	2300      	movs	r3, #0
 8007166:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007168:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800716c:	460b      	mov	r3, r1
 800716e:	4313      	orrs	r3, r2
 8007170:	d009      	beq.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007172:	4b92      	ldr	r3, [pc, #584]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007174:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007176:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800717a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800717e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007180:	4a8e      	ldr	r2, [pc, #568]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007182:	430b      	orrs	r3, r1
 8007184:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007186:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800718a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800718e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007192:	643b      	str	r3, [r7, #64]	@ 0x40
 8007194:	2300      	movs	r3, #0
 8007196:	647b      	str	r3, [r7, #68]	@ 0x44
 8007198:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800719c:	460b      	mov	r3, r1
 800719e:	4313      	orrs	r3, r2
 80071a0:	d00e      	beq.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80071a2:	4b86      	ldr	r3, [pc, #536]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80071a4:	691b      	ldr	r3, [r3, #16]
 80071a6:	4a85      	ldr	r2, [pc, #532]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80071a8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80071ac:	6113      	str	r3, [r2, #16]
 80071ae:	4b83      	ldr	r3, [pc, #524]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80071b0:	6919      	ldr	r1, [r3, #16]
 80071b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071b6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80071ba:	4a80      	ldr	r2, [pc, #512]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80071bc:	430b      	orrs	r3, r1
 80071be:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80071c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80071cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80071ce:	2300      	movs	r3, #0
 80071d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80071d2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80071d6:	460b      	mov	r3, r1
 80071d8:	4313      	orrs	r3, r2
 80071da:	d009      	beq.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80071dc:	4b77      	ldr	r3, [pc, #476]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80071de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071e0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80071e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071ea:	4a74      	ldr	r2, [pc, #464]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80071ec:	430b      	orrs	r3, r1
 80071ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80071f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80071fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80071fe:	2300      	movs	r3, #0
 8007200:	637b      	str	r3, [r7, #52]	@ 0x34
 8007202:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007206:	460b      	mov	r3, r1
 8007208:	4313      	orrs	r3, r2
 800720a:	d00a      	beq.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800720c:	4b6b      	ldr	r3, [pc, #428]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800720e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007210:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007214:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007218:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800721c:	4a67      	ldr	r2, [pc, #412]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800721e:	430b      	orrs	r3, r1
 8007220:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007222:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800722a:	2100      	movs	r1, #0
 800722c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800722e:	f003 0301 	and.w	r3, r3, #1
 8007232:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007234:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007238:	460b      	mov	r3, r1
 800723a:	4313      	orrs	r3, r2
 800723c:	d011      	beq.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800723e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007242:	3308      	adds	r3, #8
 8007244:	2100      	movs	r1, #0
 8007246:	4618      	mov	r0, r3
 8007248:	f001 fa4a 	bl	80086e0 <RCCEx_PLL2_Config>
 800724c:	4603      	mov	r3, r0
 800724e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007252:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007256:	2b00      	cmp	r3, #0
 8007258:	d003      	beq.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800725a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800725e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007262:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800726a:	2100      	movs	r1, #0
 800726c:	6239      	str	r1, [r7, #32]
 800726e:	f003 0302 	and.w	r3, r3, #2
 8007272:	627b      	str	r3, [r7, #36]	@ 0x24
 8007274:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007278:	460b      	mov	r3, r1
 800727a:	4313      	orrs	r3, r2
 800727c:	d011      	beq.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800727e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007282:	3308      	adds	r3, #8
 8007284:	2101      	movs	r1, #1
 8007286:	4618      	mov	r0, r3
 8007288:	f001 fa2a 	bl	80086e0 <RCCEx_PLL2_Config>
 800728c:	4603      	mov	r3, r0
 800728e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007292:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007296:	2b00      	cmp	r3, #0
 8007298:	d003      	beq.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800729a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800729e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80072a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072aa:	2100      	movs	r1, #0
 80072ac:	61b9      	str	r1, [r7, #24]
 80072ae:	f003 0304 	and.w	r3, r3, #4
 80072b2:	61fb      	str	r3, [r7, #28]
 80072b4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80072b8:	460b      	mov	r3, r1
 80072ba:	4313      	orrs	r3, r2
 80072bc:	d011      	beq.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80072be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072c2:	3308      	adds	r3, #8
 80072c4:	2102      	movs	r1, #2
 80072c6:	4618      	mov	r0, r3
 80072c8:	f001 fa0a 	bl	80086e0 <RCCEx_PLL2_Config>
 80072cc:	4603      	mov	r3, r0
 80072ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80072d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d003      	beq.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80072e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ea:	2100      	movs	r1, #0
 80072ec:	6139      	str	r1, [r7, #16]
 80072ee:	f003 0308 	and.w	r3, r3, #8
 80072f2:	617b      	str	r3, [r7, #20]
 80072f4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80072f8:	460b      	mov	r3, r1
 80072fa:	4313      	orrs	r3, r2
 80072fc:	d011      	beq.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80072fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007302:	3328      	adds	r3, #40	@ 0x28
 8007304:	2100      	movs	r1, #0
 8007306:	4618      	mov	r0, r3
 8007308:	f001 fa9c 	bl	8008844 <RCCEx_PLL3_Config>
 800730c:	4603      	mov	r3, r0
 800730e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8007312:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007316:	2b00      	cmp	r3, #0
 8007318:	d003      	beq.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800731a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800731e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007322:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800732a:	2100      	movs	r1, #0
 800732c:	60b9      	str	r1, [r7, #8]
 800732e:	f003 0310 	and.w	r3, r3, #16
 8007332:	60fb      	str	r3, [r7, #12]
 8007334:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007338:	460b      	mov	r3, r1
 800733a:	4313      	orrs	r3, r2
 800733c:	d011      	beq.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800733e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007342:	3328      	adds	r3, #40	@ 0x28
 8007344:	2101      	movs	r1, #1
 8007346:	4618      	mov	r0, r3
 8007348:	f001 fa7c 	bl	8008844 <RCCEx_PLL3_Config>
 800734c:	4603      	mov	r3, r0
 800734e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007352:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007356:	2b00      	cmp	r3, #0
 8007358:	d003      	beq.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800735a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800735e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007362:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800736a:	2100      	movs	r1, #0
 800736c:	6039      	str	r1, [r7, #0]
 800736e:	f003 0320 	and.w	r3, r3, #32
 8007372:	607b      	str	r3, [r7, #4]
 8007374:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007378:	460b      	mov	r3, r1
 800737a:	4313      	orrs	r3, r2
 800737c:	d011      	beq.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800737e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007382:	3328      	adds	r3, #40	@ 0x28
 8007384:	2102      	movs	r1, #2
 8007386:	4618      	mov	r0, r3
 8007388:	f001 fa5c 	bl	8008844 <RCCEx_PLL3_Config>
 800738c:	4603      	mov	r3, r0
 800738e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007392:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007396:	2b00      	cmp	r3, #0
 8007398:	d003      	beq.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800739a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800739e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80073a2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d101      	bne.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80073aa:	2300      	movs	r3, #0
 80073ac:	e000      	b.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80073ae:	2301      	movs	r3, #1
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80073b6:	46bd      	mov	sp, r7
 80073b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073bc:	58024400 	.word	0x58024400

080073c0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b090      	sub	sp, #64	@ 0x40
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80073ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073ce:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80073d2:	430b      	orrs	r3, r1
 80073d4:	f040 8094 	bne.w	8007500 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80073d8:	4b9e      	ldr	r3, [pc, #632]	@ (8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80073da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073dc:	f003 0307 	and.w	r3, r3, #7
 80073e0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80073e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073e4:	2b04      	cmp	r3, #4
 80073e6:	f200 8087 	bhi.w	80074f8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80073ea:	a201      	add	r2, pc, #4	@ (adr r2, 80073f0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80073ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073f0:	08007405 	.word	0x08007405
 80073f4:	0800742d 	.word	0x0800742d
 80073f8:	08007455 	.word	0x08007455
 80073fc:	080074f1 	.word	0x080074f1
 8007400:	0800747d 	.word	0x0800747d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007404:	4b93      	ldr	r3, [pc, #588]	@ (8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800740c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007410:	d108      	bne.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007412:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007416:	4618      	mov	r0, r3
 8007418:	f001 f810 	bl	800843c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800741c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800741e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007420:	f000 bd45 	b.w	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007424:	2300      	movs	r3, #0
 8007426:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007428:	f000 bd41 	b.w	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800742c:	4b89      	ldr	r3, [pc, #548]	@ (8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007434:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007438:	d108      	bne.n	800744c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800743a:	f107 0318 	add.w	r3, r7, #24
 800743e:	4618      	mov	r0, r3
 8007440:	f000 fd54 	bl	8007eec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007444:	69bb      	ldr	r3, [r7, #24]
 8007446:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007448:	f000 bd31 	b.w	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800744c:	2300      	movs	r3, #0
 800744e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007450:	f000 bd2d 	b.w	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007454:	4b7f      	ldr	r3, [pc, #508]	@ (8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800745c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007460:	d108      	bne.n	8007474 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007462:	f107 030c 	add.w	r3, r7, #12
 8007466:	4618      	mov	r0, r3
 8007468:	f000 fe94 	bl	8008194 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007470:	f000 bd1d 	b.w	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007474:	2300      	movs	r3, #0
 8007476:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007478:	f000 bd19 	b.w	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800747c:	4b75      	ldr	r3, [pc, #468]	@ (8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800747e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007480:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007484:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007486:	4b73      	ldr	r3, [pc, #460]	@ (8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f003 0304 	and.w	r3, r3, #4
 800748e:	2b04      	cmp	r3, #4
 8007490:	d10c      	bne.n	80074ac <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007492:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007494:	2b00      	cmp	r3, #0
 8007496:	d109      	bne.n	80074ac <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007498:	4b6e      	ldr	r3, [pc, #440]	@ (8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	08db      	lsrs	r3, r3, #3
 800749e:	f003 0303 	and.w	r3, r3, #3
 80074a2:	4a6d      	ldr	r2, [pc, #436]	@ (8007658 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80074a4:	fa22 f303 	lsr.w	r3, r2, r3
 80074a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80074aa:	e01f      	b.n	80074ec <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80074ac:	4b69      	ldr	r3, [pc, #420]	@ (8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80074b8:	d106      	bne.n	80074c8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80074ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80074c0:	d102      	bne.n	80074c8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80074c2:	4b66      	ldr	r3, [pc, #408]	@ (800765c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80074c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80074c6:	e011      	b.n	80074ec <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80074c8:	4b62      	ldr	r3, [pc, #392]	@ (8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80074d4:	d106      	bne.n	80074e4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80074d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80074dc:	d102      	bne.n	80074e4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80074de:	4b60      	ldr	r3, [pc, #384]	@ (8007660 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80074e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80074e2:	e003      	b.n	80074ec <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80074e4:	2300      	movs	r3, #0
 80074e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80074e8:	f000 bce1 	b.w	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80074ec:	f000 bcdf 	b.w	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80074f0:	4b5c      	ldr	r3, [pc, #368]	@ (8007664 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80074f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074f4:	f000 bcdb 	b.w	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80074f8:	2300      	movs	r3, #0
 80074fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074fc:	f000 bcd7 	b.w	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007500:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007504:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8007508:	430b      	orrs	r3, r1
 800750a:	f040 80ad 	bne.w	8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800750e:	4b51      	ldr	r3, [pc, #324]	@ (8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007510:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007512:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8007516:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800751a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800751e:	d056      	beq.n	80075ce <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8007520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007522:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007526:	f200 8090 	bhi.w	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800752a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800752c:	2bc0      	cmp	r3, #192	@ 0xc0
 800752e:	f000 8088 	beq.w	8007642 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8007532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007534:	2bc0      	cmp	r3, #192	@ 0xc0
 8007536:	f200 8088 	bhi.w	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800753a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800753c:	2b80      	cmp	r3, #128	@ 0x80
 800753e:	d032      	beq.n	80075a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007542:	2b80      	cmp	r3, #128	@ 0x80
 8007544:	f200 8081 	bhi.w	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800754a:	2b00      	cmp	r3, #0
 800754c:	d003      	beq.n	8007556 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800754e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007550:	2b40      	cmp	r3, #64	@ 0x40
 8007552:	d014      	beq.n	800757e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8007554:	e079      	b.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007556:	4b3f      	ldr	r3, [pc, #252]	@ (8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800755e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007562:	d108      	bne.n	8007576 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007564:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007568:	4618      	mov	r0, r3
 800756a:	f000 ff67 	bl	800843c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800756e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007570:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007572:	f000 bc9c 	b.w	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007576:	2300      	movs	r3, #0
 8007578:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800757a:	f000 bc98 	b.w	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800757e:	4b35      	ldr	r3, [pc, #212]	@ (8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007586:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800758a:	d108      	bne.n	800759e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800758c:	f107 0318 	add.w	r3, r7, #24
 8007590:	4618      	mov	r0, r3
 8007592:	f000 fcab 	bl	8007eec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007596:	69bb      	ldr	r3, [r7, #24]
 8007598:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800759a:	f000 bc88 	b.w	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800759e:	2300      	movs	r3, #0
 80075a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075a2:	f000 bc84 	b.w	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80075a6:	4b2b      	ldr	r3, [pc, #172]	@ (8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80075ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80075b2:	d108      	bne.n	80075c6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80075b4:	f107 030c 	add.w	r3, r7, #12
 80075b8:	4618      	mov	r0, r3
 80075ba:	f000 fdeb 	bl	8008194 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075c2:	f000 bc74 	b.w	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80075c6:	2300      	movs	r3, #0
 80075c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075ca:	f000 bc70 	b.w	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80075ce:	4b21      	ldr	r3, [pc, #132]	@ (8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80075d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075d2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80075d6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80075d8:	4b1e      	ldr	r3, [pc, #120]	@ (8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f003 0304 	and.w	r3, r3, #4
 80075e0:	2b04      	cmp	r3, #4
 80075e2:	d10c      	bne.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80075e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d109      	bne.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80075ea:	4b1a      	ldr	r3, [pc, #104]	@ (8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	08db      	lsrs	r3, r3, #3
 80075f0:	f003 0303 	and.w	r3, r3, #3
 80075f4:	4a18      	ldr	r2, [pc, #96]	@ (8007658 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80075f6:	fa22 f303 	lsr.w	r3, r2, r3
 80075fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80075fc:	e01f      	b.n	800763e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80075fe:	4b15      	ldr	r3, [pc, #84]	@ (8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007606:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800760a:	d106      	bne.n	800761a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800760c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800760e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007612:	d102      	bne.n	800761a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007614:	4b11      	ldr	r3, [pc, #68]	@ (800765c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007616:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007618:	e011      	b.n	800763e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800761a:	4b0e      	ldr	r3, [pc, #56]	@ (8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007622:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007626:	d106      	bne.n	8007636 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8007628:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800762a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800762e:	d102      	bne.n	8007636 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007630:	4b0b      	ldr	r3, [pc, #44]	@ (8007660 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007632:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007634:	e003      	b.n	800763e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007636:	2300      	movs	r3, #0
 8007638:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800763a:	f000 bc38 	b.w	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800763e:	f000 bc36 	b.w	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007642:	4b08      	ldr	r3, [pc, #32]	@ (8007664 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007644:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007646:	f000 bc32 	b.w	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800764a:	2300      	movs	r3, #0
 800764c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800764e:	f000 bc2e 	b.w	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007652:	bf00      	nop
 8007654:	58024400 	.word	0x58024400
 8007658:	03d09000 	.word	0x03d09000
 800765c:	003d0900 	.word	0x003d0900
 8007660:	017d7840 	.word	0x017d7840
 8007664:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007668:	e9d7 2300 	ldrd	r2, r3, [r7]
 800766c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8007670:	430b      	orrs	r3, r1
 8007672:	f040 809c 	bne.w	80077ae <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8007676:	4b9e      	ldr	r3, [pc, #632]	@ (80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007678:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800767a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800767e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007682:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007686:	d054      	beq.n	8007732 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8007688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800768a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800768e:	f200 808b 	bhi.w	80077a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007694:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007698:	f000 8083 	beq.w	80077a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800769c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800769e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80076a2:	f200 8081 	bhi.w	80077a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80076a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80076ac:	d02f      	beq.n	800770e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80076ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80076b4:	d878      	bhi.n	80077a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80076b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d004      	beq.n	80076c6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80076bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076be:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80076c2:	d012      	beq.n	80076ea <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80076c4:	e070      	b.n	80077a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80076c6:	4b8a      	ldr	r3, [pc, #552]	@ (80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80076d2:	d107      	bne.n	80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80076d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80076d8:	4618      	mov	r0, r3
 80076da:	f000 feaf 	bl	800843c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80076de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80076e2:	e3e4      	b.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80076e4:	2300      	movs	r3, #0
 80076e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076e8:	e3e1      	b.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80076ea:	4b81      	ldr	r3, [pc, #516]	@ (80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80076f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80076f6:	d107      	bne.n	8007708 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076f8:	f107 0318 	add.w	r3, r7, #24
 80076fc:	4618      	mov	r0, r3
 80076fe:	f000 fbf5 	bl	8007eec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007702:	69bb      	ldr	r3, [r7, #24]
 8007704:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007706:	e3d2      	b.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007708:	2300      	movs	r3, #0
 800770a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800770c:	e3cf      	b.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800770e:	4b78      	ldr	r3, [pc, #480]	@ (80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007716:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800771a:	d107      	bne.n	800772c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800771c:	f107 030c 	add.w	r3, r7, #12
 8007720:	4618      	mov	r0, r3
 8007722:	f000 fd37 	bl	8008194 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800772a:	e3c0      	b.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800772c:	2300      	movs	r3, #0
 800772e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007730:	e3bd      	b.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007732:	4b6f      	ldr	r3, [pc, #444]	@ (80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007736:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800773a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800773c:	4b6c      	ldr	r3, [pc, #432]	@ (80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f003 0304 	and.w	r3, r3, #4
 8007744:	2b04      	cmp	r3, #4
 8007746:	d10c      	bne.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8007748:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800774a:	2b00      	cmp	r3, #0
 800774c:	d109      	bne.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800774e:	4b68      	ldr	r3, [pc, #416]	@ (80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	08db      	lsrs	r3, r3, #3
 8007754:	f003 0303 	and.w	r3, r3, #3
 8007758:	4a66      	ldr	r2, [pc, #408]	@ (80078f4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800775a:	fa22 f303 	lsr.w	r3, r2, r3
 800775e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007760:	e01e      	b.n	80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007762:	4b63      	ldr	r3, [pc, #396]	@ (80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800776a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800776e:	d106      	bne.n	800777e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8007770:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007772:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007776:	d102      	bne.n	800777e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007778:	4b5f      	ldr	r3, [pc, #380]	@ (80078f8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800777a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800777c:	e010      	b.n	80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800777e:	4b5c      	ldr	r3, [pc, #368]	@ (80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007786:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800778a:	d106      	bne.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800778c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800778e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007792:	d102      	bne.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007794:	4b59      	ldr	r3, [pc, #356]	@ (80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007796:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007798:	e002      	b.n	80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800779a:	2300      	movs	r3, #0
 800779c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800779e:	e386      	b.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80077a0:	e385      	b.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80077a2:	4b57      	ldr	r3, [pc, #348]	@ (8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80077a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077a6:	e382      	b.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80077a8:	2300      	movs	r3, #0
 80077aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077ac:	e37f      	b.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80077ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077b2:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80077b6:	430b      	orrs	r3, r1
 80077b8:	f040 80a7 	bne.w	800790a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80077bc:	4b4c      	ldr	r3, [pc, #304]	@ (80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80077be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077c0:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80077c4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80077c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077c8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80077cc:	d055      	beq.n	800787a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80077ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077d0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80077d4:	f200 8096 	bhi.w	8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80077d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077da:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80077de:	f000 8084 	beq.w	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80077e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077e4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80077e8:	f200 808c 	bhi.w	8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80077ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80077f2:	d030      	beq.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80077f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80077fa:	f200 8083 	bhi.w	8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80077fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007800:	2b00      	cmp	r3, #0
 8007802:	d004      	beq.n	800780e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8007804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007806:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800780a:	d012      	beq.n	8007832 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800780c:	e07a      	b.n	8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800780e:	4b38      	ldr	r3, [pc, #224]	@ (80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007816:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800781a:	d107      	bne.n	800782c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800781c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007820:	4618      	mov	r0, r3
 8007822:	f000 fe0b 	bl	800843c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007828:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800782a:	e340      	b.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800782c:	2300      	movs	r3, #0
 800782e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007830:	e33d      	b.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007832:	4b2f      	ldr	r3, [pc, #188]	@ (80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800783a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800783e:	d107      	bne.n	8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007840:	f107 0318 	add.w	r3, r7, #24
 8007844:	4618      	mov	r0, r3
 8007846:	f000 fb51 	bl	8007eec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800784a:	69bb      	ldr	r3, [r7, #24]
 800784c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800784e:	e32e      	b.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007850:	2300      	movs	r3, #0
 8007852:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007854:	e32b      	b.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007856:	4b26      	ldr	r3, [pc, #152]	@ (80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800785e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007862:	d107      	bne.n	8007874 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007864:	f107 030c 	add.w	r3, r7, #12
 8007868:	4618      	mov	r0, r3
 800786a:	f000 fc93 	bl	8008194 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007872:	e31c      	b.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007874:	2300      	movs	r3, #0
 8007876:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007878:	e319      	b.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800787a:	4b1d      	ldr	r3, [pc, #116]	@ (80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800787c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800787e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007882:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007884:	4b1a      	ldr	r3, [pc, #104]	@ (80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f003 0304 	and.w	r3, r3, #4
 800788c:	2b04      	cmp	r3, #4
 800788e:	d10c      	bne.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8007890:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007892:	2b00      	cmp	r3, #0
 8007894:	d109      	bne.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007896:	4b16      	ldr	r3, [pc, #88]	@ (80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	08db      	lsrs	r3, r3, #3
 800789c:	f003 0303 	and.w	r3, r3, #3
 80078a0:	4a14      	ldr	r2, [pc, #80]	@ (80078f4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80078a2:	fa22 f303 	lsr.w	r3, r2, r3
 80078a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80078a8:	e01e      	b.n	80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80078aa:	4b11      	ldr	r3, [pc, #68]	@ (80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078b6:	d106      	bne.n	80078c6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80078b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80078be:	d102      	bne.n	80078c6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80078c0:	4b0d      	ldr	r3, [pc, #52]	@ (80078f8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80078c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80078c4:	e010      	b.n	80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80078c6:	4b0a      	ldr	r3, [pc, #40]	@ (80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80078d2:	d106      	bne.n	80078e2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80078d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80078da:	d102      	bne.n	80078e2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80078dc:	4b07      	ldr	r3, [pc, #28]	@ (80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80078de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80078e0:	e002      	b.n	80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80078e2:	2300      	movs	r3, #0
 80078e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80078e6:	e2e2      	b.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80078e8:	e2e1      	b.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80078ea:	4b05      	ldr	r3, [pc, #20]	@ (8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80078ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078ee:	e2de      	b.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80078f0:	58024400 	.word	0x58024400
 80078f4:	03d09000 	.word	0x03d09000
 80078f8:	003d0900 	.word	0x003d0900
 80078fc:	017d7840 	.word	0x017d7840
 8007900:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8007904:	2300      	movs	r3, #0
 8007906:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007908:	e2d1      	b.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800790a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800790e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8007912:	430b      	orrs	r3, r1
 8007914:	f040 809c 	bne.w	8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8007918:	4b93      	ldr	r3, [pc, #588]	@ (8007b68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800791a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800791c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007920:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007924:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007928:	d054      	beq.n	80079d4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800792a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800792c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007930:	f200 808b 	bhi.w	8007a4a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007936:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800793a:	f000 8083 	beq.w	8007a44 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800793e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007940:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007944:	f200 8081 	bhi.w	8007a4a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800794a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800794e:	d02f      	beq.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8007950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007952:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007956:	d878      	bhi.n	8007a4a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800795a:	2b00      	cmp	r3, #0
 800795c:	d004      	beq.n	8007968 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800795e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007960:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007964:	d012      	beq.n	800798c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8007966:	e070      	b.n	8007a4a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007968:	4b7f      	ldr	r3, [pc, #508]	@ (8007b68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007970:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007974:	d107      	bne.n	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007976:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800797a:	4618      	mov	r0, r3
 800797c:	f000 fd5e 	bl	800843c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007982:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007984:	e293      	b.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007986:	2300      	movs	r3, #0
 8007988:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800798a:	e290      	b.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800798c:	4b76      	ldr	r3, [pc, #472]	@ (8007b68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007994:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007998:	d107      	bne.n	80079aa <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800799a:	f107 0318 	add.w	r3, r7, #24
 800799e:	4618      	mov	r0, r3
 80079a0:	f000 faa4 	bl	8007eec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80079a4:	69bb      	ldr	r3, [r7, #24]
 80079a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80079a8:	e281      	b.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80079aa:	2300      	movs	r3, #0
 80079ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079ae:	e27e      	b.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80079b0:	4b6d      	ldr	r3, [pc, #436]	@ (8007b68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80079b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079bc:	d107      	bne.n	80079ce <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079be:	f107 030c 	add.w	r3, r7, #12
 80079c2:	4618      	mov	r0, r3
 80079c4:	f000 fbe6 	bl	8008194 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80079cc:	e26f      	b.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80079ce:	2300      	movs	r3, #0
 80079d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079d2:	e26c      	b.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80079d4:	4b64      	ldr	r3, [pc, #400]	@ (8007b68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80079d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079d8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80079dc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80079de:	4b62      	ldr	r3, [pc, #392]	@ (8007b68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f003 0304 	and.w	r3, r3, #4
 80079e6:	2b04      	cmp	r3, #4
 80079e8:	d10c      	bne.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80079ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d109      	bne.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80079f0:	4b5d      	ldr	r3, [pc, #372]	@ (8007b68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	08db      	lsrs	r3, r3, #3
 80079f6:	f003 0303 	and.w	r3, r3, #3
 80079fa:	4a5c      	ldr	r2, [pc, #368]	@ (8007b6c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80079fc:	fa22 f303 	lsr.w	r3, r2, r3
 8007a00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a02:	e01e      	b.n	8007a42 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007a04:	4b58      	ldr	r3, [pc, #352]	@ (8007b68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a10:	d106      	bne.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8007a12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a14:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a18:	d102      	bne.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007a1a:	4b55      	ldr	r3, [pc, #340]	@ (8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007a1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a1e:	e010      	b.n	8007a42 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007a20:	4b51      	ldr	r3, [pc, #324]	@ (8007b68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a28:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a2c:	d106      	bne.n	8007a3c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8007a2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a34:	d102      	bne.n	8007a3c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007a36:	4b4f      	ldr	r3, [pc, #316]	@ (8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007a38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a3a:	e002      	b.n	8007a42 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007a40:	e235      	b.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007a42:	e234      	b.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007a44:	4b4c      	ldr	r3, [pc, #304]	@ (8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8007a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a48:	e231      	b.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a4e:	e22e      	b.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8007a50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a54:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8007a58:	430b      	orrs	r3, r1
 8007a5a:	f040 808f 	bne.w	8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8007a5e:	4b42      	ldr	r3, [pc, #264]	@ (8007b68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007a60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a62:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007a66:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8007a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a6a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007a6e:	d06b      	beq.n	8007b48 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8007a70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a72:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007a76:	d874      	bhi.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007a78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a7a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007a7e:	d056      	beq.n	8007b2e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8007a80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a82:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007a86:	d86c      	bhi.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007a88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a8a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007a8e:	d03b      	beq.n	8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8007a90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a92:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007a96:	d864      	bhi.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007a98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a9a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a9e:	d021      	beq.n	8007ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007aa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aa2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007aa6:	d85c      	bhi.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007aa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d004      	beq.n	8007ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8007aae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ab0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ab4:	d004      	beq.n	8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8007ab6:	e054      	b.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8007ab8:	f7fe fa0a 	bl	8005ed0 <HAL_RCC_GetPCLK1Freq>
 8007abc:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007abe:	e1f6      	b.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007ac0:	4b29      	ldr	r3, [pc, #164]	@ (8007b68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ac8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007acc:	d107      	bne.n	8007ade <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ace:	f107 0318 	add.w	r3, r7, #24
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f000 fa0a 	bl	8007eec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007ad8:	69fb      	ldr	r3, [r7, #28]
 8007ada:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007adc:	e1e7      	b.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ae2:	e1e4      	b.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007ae4:	4b20      	ldr	r3, [pc, #128]	@ (8007b68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007aec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007af0:	d107      	bne.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007af2:	f107 030c 	add.w	r3, r7, #12
 8007af6:	4618      	mov	r0, r3
 8007af8:	f000 fb4c 	bl	8008194 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b00:	e1d5      	b.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b02:	2300      	movs	r3, #0
 8007b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b06:	e1d2      	b.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007b08:	4b17      	ldr	r3, [pc, #92]	@ (8007b68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f003 0304 	and.w	r3, r3, #4
 8007b10:	2b04      	cmp	r3, #4
 8007b12:	d109      	bne.n	8007b28 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007b14:	4b14      	ldr	r3, [pc, #80]	@ (8007b68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	08db      	lsrs	r3, r3, #3
 8007b1a:	f003 0303 	and.w	r3, r3, #3
 8007b1e:	4a13      	ldr	r2, [pc, #76]	@ (8007b6c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007b20:	fa22 f303 	lsr.w	r3, r2, r3
 8007b24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b26:	e1c2      	b.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b2c:	e1bf      	b.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007b2e:	4b0e      	ldr	r3, [pc, #56]	@ (8007b68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b3a:	d102      	bne.n	8007b42 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8007b3c:	4b0c      	ldr	r3, [pc, #48]	@ (8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b40:	e1b5      	b.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b42:	2300      	movs	r3, #0
 8007b44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b46:	e1b2      	b.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007b48:	4b07      	ldr	r3, [pc, #28]	@ (8007b68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b50:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b54:	d102      	bne.n	8007b5c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8007b56:	4b07      	ldr	r3, [pc, #28]	@ (8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007b58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b5a:	e1a8      	b.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b60:	e1a5      	b.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007b62:	2300      	movs	r3, #0
 8007b64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b66:	e1a2      	b.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007b68:	58024400 	.word	0x58024400
 8007b6c:	03d09000 	.word	0x03d09000
 8007b70:	003d0900 	.word	0x003d0900
 8007b74:	017d7840 	.word	0x017d7840
 8007b78:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007b7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b80:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8007b84:	430b      	orrs	r3, r1
 8007b86:	d173      	bne.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007b88:	4b9c      	ldr	r3, [pc, #624]	@ (8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007b8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b8c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007b90:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b94:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b98:	d02f      	beq.n	8007bfa <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8007b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ba0:	d863      	bhi.n	8007c6a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8007ba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d004      	beq.n	8007bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8007ba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007baa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007bae:	d012      	beq.n	8007bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8007bb0:	e05b      	b.n	8007c6a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007bb2:	4b92      	ldr	r3, [pc, #584]	@ (8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007bba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007bbe:	d107      	bne.n	8007bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007bc0:	f107 0318 	add.w	r3, r7, #24
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f000 f991 	bl	8007eec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007bca:	69bb      	ldr	r3, [r7, #24]
 8007bcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007bce:	e16e      	b.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007bd4:	e16b      	b.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007bd6:	4b89      	ldr	r3, [pc, #548]	@ (8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007bde:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007be2:	d107      	bne.n	8007bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007be4:	f107 030c 	add.w	r3, r7, #12
 8007be8:	4618      	mov	r0, r3
 8007bea:	f000 fad3 	bl	8008194 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007bf2:	e15c      	b.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007bf8:	e159      	b.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007bfa:	4b80      	ldr	r3, [pc, #512]	@ (8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007bfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007bfe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007c02:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007c04:	4b7d      	ldr	r3, [pc, #500]	@ (8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f003 0304 	and.w	r3, r3, #4
 8007c0c:	2b04      	cmp	r3, #4
 8007c0e:	d10c      	bne.n	8007c2a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8007c10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d109      	bne.n	8007c2a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c16:	4b79      	ldr	r3, [pc, #484]	@ (8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	08db      	lsrs	r3, r3, #3
 8007c1c:	f003 0303 	and.w	r3, r3, #3
 8007c20:	4a77      	ldr	r2, [pc, #476]	@ (8007e00 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007c22:	fa22 f303 	lsr.w	r3, r2, r3
 8007c26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c28:	e01e      	b.n	8007c68 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007c2a:	4b74      	ldr	r3, [pc, #464]	@ (8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c36:	d106      	bne.n	8007c46 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8007c38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c3a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c3e:	d102      	bne.n	8007c46 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007c40:	4b70      	ldr	r3, [pc, #448]	@ (8007e04 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007c42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c44:	e010      	b.n	8007c68 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007c46:	4b6d      	ldr	r3, [pc, #436]	@ (8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c4e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c52:	d106      	bne.n	8007c62 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8007c54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c5a:	d102      	bne.n	8007c62 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007c5c:	4b6a      	ldr	r3, [pc, #424]	@ (8007e08 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007c5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c60:	e002      	b.n	8007c68 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007c62:	2300      	movs	r3, #0
 8007c64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007c66:	e122      	b.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007c68:	e121      	b.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c6e:	e11e      	b.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007c70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c74:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8007c78:	430b      	orrs	r3, r1
 8007c7a:	d133      	bne.n	8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007c7c:	4b5f      	ldr	r3, [pc, #380]	@ (8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007c84:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007c86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d004      	beq.n	8007c96 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8007c8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c92:	d012      	beq.n	8007cba <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8007c94:	e023      	b.n	8007cde <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007c96:	4b59      	ldr	r3, [pc, #356]	@ (8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c9e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007ca2:	d107      	bne.n	8007cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ca4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f000 fbc7 	bl	800843c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007cb2:	e0fc      	b.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cb8:	e0f9      	b.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007cba:	4b50      	ldr	r3, [pc, #320]	@ (8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007cc2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007cc6:	d107      	bne.n	8007cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007cc8:	f107 0318 	add.w	r3, r7, #24
 8007ccc:	4618      	mov	r0, r3
 8007cce:	f000 f90d 	bl	8007eec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007cd2:	6a3b      	ldr	r3, [r7, #32]
 8007cd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007cd6:	e0ea      	b.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cdc:	e0e7      	b.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ce2:	e0e4      	b.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007ce4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ce8:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8007cec:	430b      	orrs	r3, r1
 8007cee:	f040 808d 	bne.w	8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007cf2:	4b42      	ldr	r3, [pc, #264]	@ (8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007cf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cf6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8007cfa:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007cfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007d02:	d06b      	beq.n	8007ddc <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8007d04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d06:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007d0a:	d874      	bhi.n	8007df6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007d0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d12:	d056      	beq.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8007d14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d1a:	d86c      	bhi.n	8007df6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d1e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007d22:	d03b      	beq.n	8007d9c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8007d24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d26:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007d2a:	d864      	bhi.n	8007df6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007d2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d32:	d021      	beq.n	8007d78 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007d34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d3a:	d85c      	bhi.n	8007df6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007d3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d004      	beq.n	8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8007d42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d48:	d004      	beq.n	8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8007d4a:	e054      	b.n	8007df6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007d4c:	f000 f8b8 	bl	8007ec0 <HAL_RCCEx_GetD3PCLK1Freq>
 8007d50:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007d52:	e0ac      	b.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007d54:	4b29      	ldr	r3, [pc, #164]	@ (8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007d60:	d107      	bne.n	8007d72 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d62:	f107 0318 	add.w	r3, r7, #24
 8007d66:	4618      	mov	r0, r3
 8007d68:	f000 f8c0 	bl	8007eec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007d6c:	69fb      	ldr	r3, [r7, #28]
 8007d6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d70:	e09d      	b.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d72:	2300      	movs	r3, #0
 8007d74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d76:	e09a      	b.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007d78:	4b20      	ldr	r3, [pc, #128]	@ (8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007d80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d84:	d107      	bne.n	8007d96 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d86:	f107 030c 	add.w	r3, r7, #12
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f000 fa02 	bl	8008194 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d94:	e08b      	b.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d96:	2300      	movs	r3, #0
 8007d98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d9a:	e088      	b.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007d9c:	4b17      	ldr	r3, [pc, #92]	@ (8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f003 0304 	and.w	r3, r3, #4
 8007da4:	2b04      	cmp	r3, #4
 8007da6:	d109      	bne.n	8007dbc <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007da8:	4b14      	ldr	r3, [pc, #80]	@ (8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	08db      	lsrs	r3, r3, #3
 8007dae:	f003 0303 	and.w	r3, r3, #3
 8007db2:	4a13      	ldr	r2, [pc, #76]	@ (8007e00 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007db4:	fa22 f303 	lsr.w	r3, r2, r3
 8007db8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007dba:	e078      	b.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007dc0:	e075      	b.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007dca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007dce:	d102      	bne.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8007dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8007e04 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007dd4:	e06b      	b.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007dda:	e068      	b.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007ddc:	4b07      	ldr	r3, [pc, #28]	@ (8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007de4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007de8:	d102      	bne.n	8007df0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8007dea:	4b07      	ldr	r3, [pc, #28]	@ (8007e08 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007dec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007dee:	e05e      	b.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007df0:	2300      	movs	r3, #0
 8007df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007df4:	e05b      	b.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8007df6:	2300      	movs	r3, #0
 8007df8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007dfa:	e058      	b.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007dfc:	58024400 	.word	0x58024400
 8007e00:	03d09000 	.word	0x03d09000
 8007e04:	003d0900 	.word	0x003d0900
 8007e08:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007e0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e10:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8007e14:	430b      	orrs	r3, r1
 8007e16:	d148      	bne.n	8007eaa <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007e18:	4b27      	ldr	r3, [pc, #156]	@ (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007e1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e1c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007e20:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007e22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e28:	d02a      	beq.n	8007e80 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8007e2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e30:	d838      	bhi.n	8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8007e32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d004      	beq.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8007e38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e3a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e3e:	d00d      	beq.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8007e40:	e030      	b.n	8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007e42:	4b1d      	ldr	r3, [pc, #116]	@ (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e4a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e4e:	d102      	bne.n	8007e56 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8007e50:	4b1a      	ldr	r3, [pc, #104]	@ (8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007e52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e54:	e02b      	b.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e56:	2300      	movs	r3, #0
 8007e58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e5a:	e028      	b.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007e5c:	4b16      	ldr	r3, [pc, #88]	@ (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e64:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007e68:	d107      	bne.n	8007e7a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f000 fae4 	bl	800843c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e78:	e019      	b.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e7e:	e016      	b.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e80:	4b0d      	ldr	r3, [pc, #52]	@ (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e88:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007e8c:	d107      	bne.n	8007e9e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e8e:	f107 0318 	add.w	r3, r7, #24
 8007e92:	4618      	mov	r0, r3
 8007e94:	f000 f82a 	bl	8007eec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007e98:	69fb      	ldr	r3, [r7, #28]
 8007e9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e9c:	e007      	b.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ea2:	e004      	b.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ea8:	e001      	b.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8007eae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3740      	adds	r7, #64	@ 0x40
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}
 8007eb8:	58024400 	.word	0x58024400
 8007ebc:	017d7840 	.word	0x017d7840

08007ec0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007ec4:	f7fd ffd4 	bl	8005e70 <HAL_RCC_GetHCLKFreq>
 8007ec8:	4602      	mov	r2, r0
 8007eca:	4b06      	ldr	r3, [pc, #24]	@ (8007ee4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007ecc:	6a1b      	ldr	r3, [r3, #32]
 8007ece:	091b      	lsrs	r3, r3, #4
 8007ed0:	f003 0307 	and.w	r3, r3, #7
 8007ed4:	4904      	ldr	r1, [pc, #16]	@ (8007ee8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007ed6:	5ccb      	ldrb	r3, [r1, r3]
 8007ed8:	f003 031f 	and.w	r3, r3, #31
 8007edc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	bd80      	pop	{r7, pc}
 8007ee4:	58024400 	.word	0x58024400
 8007ee8:	08017bc8 	.word	0x08017bc8

08007eec <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b089      	sub	sp, #36	@ 0x24
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007ef4:	4ba1      	ldr	r3, [pc, #644]	@ (800817c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ef8:	f003 0303 	and.w	r3, r3, #3
 8007efc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007efe:	4b9f      	ldr	r3, [pc, #636]	@ (800817c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f02:	0b1b      	lsrs	r3, r3, #12
 8007f04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007f08:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007f0a:	4b9c      	ldr	r3, [pc, #624]	@ (800817c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f0e:	091b      	lsrs	r3, r3, #4
 8007f10:	f003 0301 	and.w	r3, r3, #1
 8007f14:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007f16:	4b99      	ldr	r3, [pc, #612]	@ (800817c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f1a:	08db      	lsrs	r3, r3, #3
 8007f1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007f20:	693a      	ldr	r2, [r7, #16]
 8007f22:	fb02 f303 	mul.w	r3, r2, r3
 8007f26:	ee07 3a90 	vmov	s15, r3
 8007f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f2e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	f000 8111 	beq.w	800815c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007f3a:	69bb      	ldr	r3, [r7, #24]
 8007f3c:	2b02      	cmp	r3, #2
 8007f3e:	f000 8083 	beq.w	8008048 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007f42:	69bb      	ldr	r3, [r7, #24]
 8007f44:	2b02      	cmp	r3, #2
 8007f46:	f200 80a1 	bhi.w	800808c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007f4a:	69bb      	ldr	r3, [r7, #24]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d003      	beq.n	8007f58 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007f50:	69bb      	ldr	r3, [r7, #24]
 8007f52:	2b01      	cmp	r3, #1
 8007f54:	d056      	beq.n	8008004 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007f56:	e099      	b.n	800808c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f58:	4b88      	ldr	r3, [pc, #544]	@ (800817c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f003 0320 	and.w	r3, r3, #32
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d02d      	beq.n	8007fc0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007f64:	4b85      	ldr	r3, [pc, #532]	@ (800817c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	08db      	lsrs	r3, r3, #3
 8007f6a:	f003 0303 	and.w	r3, r3, #3
 8007f6e:	4a84      	ldr	r2, [pc, #528]	@ (8008180 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007f70:	fa22 f303 	lsr.w	r3, r2, r3
 8007f74:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	ee07 3a90 	vmov	s15, r3
 8007f7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	ee07 3a90 	vmov	s15, r3
 8007f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f8e:	4b7b      	ldr	r3, [pc, #492]	@ (800817c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f96:	ee07 3a90 	vmov	s15, r3
 8007f9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fa2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008184 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007fa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007faa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007fb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007fbe:	e087      	b.n	80080d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	ee07 3a90 	vmov	s15, r3
 8007fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fca:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008188 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007fce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fd2:	4b6a      	ldr	r3, [pc, #424]	@ (800817c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fda:	ee07 3a90 	vmov	s15, r3
 8007fde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fe2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fe6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008184 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007fea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ff2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ff6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ffa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ffe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008002:	e065      	b.n	80080d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	ee07 3a90 	vmov	s15, r3
 800800a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800800e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800818c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008012:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008016:	4b59      	ldr	r3, [pc, #356]	@ (800817c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008018:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800801a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800801e:	ee07 3a90 	vmov	s15, r3
 8008022:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008026:	ed97 6a03 	vldr	s12, [r7, #12]
 800802a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008184 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800802e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008032:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008036:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800803a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800803e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008042:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008046:	e043      	b.n	80080d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	ee07 3a90 	vmov	s15, r3
 800804e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008052:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008190 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008056:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800805a:	4b48      	ldr	r3, [pc, #288]	@ (800817c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800805c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800805e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008062:	ee07 3a90 	vmov	s15, r3
 8008066:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800806a:	ed97 6a03 	vldr	s12, [r7, #12]
 800806e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008184 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008072:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008076:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800807a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800807e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008082:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008086:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800808a:	e021      	b.n	80080d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	ee07 3a90 	vmov	s15, r3
 8008092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008096:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800818c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800809a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800809e:	4b37      	ldr	r3, [pc, #220]	@ (800817c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080a6:	ee07 3a90 	vmov	s15, r3
 80080aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80080b2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008184 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80080b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80080c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80080ce:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80080d0:	4b2a      	ldr	r3, [pc, #168]	@ (800817c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080d4:	0a5b      	lsrs	r3, r3, #9
 80080d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80080da:	ee07 3a90 	vmov	s15, r3
 80080de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80080e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80080ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080f6:	ee17 2a90 	vmov	r2, s15
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80080fe:	4b1f      	ldr	r3, [pc, #124]	@ (800817c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008100:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008102:	0c1b      	lsrs	r3, r3, #16
 8008104:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008108:	ee07 3a90 	vmov	s15, r3
 800810c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008110:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008114:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008118:	edd7 6a07 	vldr	s13, [r7, #28]
 800811c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008120:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008124:	ee17 2a90 	vmov	r2, s15
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800812c:	4b13      	ldr	r3, [pc, #76]	@ (800817c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800812e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008130:	0e1b      	lsrs	r3, r3, #24
 8008132:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008136:	ee07 3a90 	vmov	s15, r3
 800813a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800813e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008142:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008146:	edd7 6a07 	vldr	s13, [r7, #28]
 800814a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800814e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008152:	ee17 2a90 	vmov	r2, s15
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800815a:	e008      	b.n	800816e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2200      	movs	r2, #0
 8008160:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2200      	movs	r2, #0
 8008166:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2200      	movs	r2, #0
 800816c:	609a      	str	r2, [r3, #8]
}
 800816e:	bf00      	nop
 8008170:	3724      	adds	r7, #36	@ 0x24
 8008172:	46bd      	mov	sp, r7
 8008174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008178:	4770      	bx	lr
 800817a:	bf00      	nop
 800817c:	58024400 	.word	0x58024400
 8008180:	03d09000 	.word	0x03d09000
 8008184:	46000000 	.word	0x46000000
 8008188:	4c742400 	.word	0x4c742400
 800818c:	4a742400 	.word	0x4a742400
 8008190:	4bbebc20 	.word	0x4bbebc20

08008194 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008194:	b480      	push	{r7}
 8008196:	b089      	sub	sp, #36	@ 0x24
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800819c:	4ba1      	ldr	r3, [pc, #644]	@ (8008424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800819e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081a0:	f003 0303 	and.w	r3, r3, #3
 80081a4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80081a6:	4b9f      	ldr	r3, [pc, #636]	@ (8008424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081aa:	0d1b      	lsrs	r3, r3, #20
 80081ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80081b0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80081b2:	4b9c      	ldr	r3, [pc, #624]	@ (8008424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081b6:	0a1b      	lsrs	r3, r3, #8
 80081b8:	f003 0301 	and.w	r3, r3, #1
 80081bc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80081be:	4b99      	ldr	r3, [pc, #612]	@ (8008424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081c2:	08db      	lsrs	r3, r3, #3
 80081c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80081c8:	693a      	ldr	r2, [r7, #16]
 80081ca:	fb02 f303 	mul.w	r3, r2, r3
 80081ce:	ee07 3a90 	vmov	s15, r3
 80081d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	f000 8111 	beq.w	8008404 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80081e2:	69bb      	ldr	r3, [r7, #24]
 80081e4:	2b02      	cmp	r3, #2
 80081e6:	f000 8083 	beq.w	80082f0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80081ea:	69bb      	ldr	r3, [r7, #24]
 80081ec:	2b02      	cmp	r3, #2
 80081ee:	f200 80a1 	bhi.w	8008334 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80081f2:	69bb      	ldr	r3, [r7, #24]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d003      	beq.n	8008200 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80081f8:	69bb      	ldr	r3, [r7, #24]
 80081fa:	2b01      	cmp	r3, #1
 80081fc:	d056      	beq.n	80082ac <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80081fe:	e099      	b.n	8008334 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008200:	4b88      	ldr	r3, [pc, #544]	@ (8008424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f003 0320 	and.w	r3, r3, #32
 8008208:	2b00      	cmp	r3, #0
 800820a:	d02d      	beq.n	8008268 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800820c:	4b85      	ldr	r3, [pc, #532]	@ (8008424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	08db      	lsrs	r3, r3, #3
 8008212:	f003 0303 	and.w	r3, r3, #3
 8008216:	4a84      	ldr	r2, [pc, #528]	@ (8008428 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008218:	fa22 f303 	lsr.w	r3, r2, r3
 800821c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	ee07 3a90 	vmov	s15, r3
 8008224:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	ee07 3a90 	vmov	s15, r3
 800822e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008232:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008236:	4b7b      	ldr	r3, [pc, #492]	@ (8008424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800823a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800823e:	ee07 3a90 	vmov	s15, r3
 8008242:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008246:	ed97 6a03 	vldr	s12, [r7, #12]
 800824a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800842c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800824e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008252:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008256:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800825a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800825e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008262:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008266:	e087      	b.n	8008378 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	ee07 3a90 	vmov	s15, r3
 800826e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008272:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008430 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008276:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800827a:	4b6a      	ldr	r3, [pc, #424]	@ (8008424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800827c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800827e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008282:	ee07 3a90 	vmov	s15, r3
 8008286:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800828a:	ed97 6a03 	vldr	s12, [r7, #12]
 800828e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800842c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008292:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008296:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800829a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800829e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80082aa:	e065      	b.n	8008378 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	ee07 3a90 	vmov	s15, r3
 80082b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082b6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008434 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80082ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082be:	4b59      	ldr	r3, [pc, #356]	@ (8008424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082c6:	ee07 3a90 	vmov	s15, r3
 80082ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80082d2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800842c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80082d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80082e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80082ee:	e043      	b.n	8008378 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	ee07 3a90 	vmov	s15, r3
 80082f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082fa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008438 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80082fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008302:	4b48      	ldr	r3, [pc, #288]	@ (8008424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008306:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800830a:	ee07 3a90 	vmov	s15, r3
 800830e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008312:	ed97 6a03 	vldr	s12, [r7, #12]
 8008316:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800842c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800831a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800831e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008322:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008326:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800832a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800832e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008332:	e021      	b.n	8008378 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	ee07 3a90 	vmov	s15, r3
 800833a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800833e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008434 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008342:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008346:	4b37      	ldr	r3, [pc, #220]	@ (8008424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800834a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800834e:	ee07 3a90 	vmov	s15, r3
 8008352:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008356:	ed97 6a03 	vldr	s12, [r7, #12]
 800835a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800842c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800835e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008362:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008366:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800836a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800836e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008372:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008376:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008378:	4b2a      	ldr	r3, [pc, #168]	@ (8008424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800837a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800837c:	0a5b      	lsrs	r3, r3, #9
 800837e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008382:	ee07 3a90 	vmov	s15, r3
 8008386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800838a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800838e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008392:	edd7 6a07 	vldr	s13, [r7, #28]
 8008396:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800839a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800839e:	ee17 2a90 	vmov	r2, s15
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80083a6:	4b1f      	ldr	r3, [pc, #124]	@ (8008424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083aa:	0c1b      	lsrs	r3, r3, #16
 80083ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083b0:	ee07 3a90 	vmov	s15, r3
 80083b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083b8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80083bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80083c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083cc:	ee17 2a90 	vmov	r2, s15
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80083d4:	4b13      	ldr	r3, [pc, #76]	@ (8008424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083d8:	0e1b      	lsrs	r3, r3, #24
 80083da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083de:	ee07 3a90 	vmov	s15, r3
 80083e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80083ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80083f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083fa:	ee17 2a90 	vmov	r2, s15
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008402:	e008      	b.n	8008416 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2200      	movs	r2, #0
 8008408:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2200      	movs	r2, #0
 800840e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2200      	movs	r2, #0
 8008414:	609a      	str	r2, [r3, #8]
}
 8008416:	bf00      	nop
 8008418:	3724      	adds	r7, #36	@ 0x24
 800841a:	46bd      	mov	sp, r7
 800841c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008420:	4770      	bx	lr
 8008422:	bf00      	nop
 8008424:	58024400 	.word	0x58024400
 8008428:	03d09000 	.word	0x03d09000
 800842c:	46000000 	.word	0x46000000
 8008430:	4c742400 	.word	0x4c742400
 8008434:	4a742400 	.word	0x4a742400
 8008438:	4bbebc20 	.word	0x4bbebc20

0800843c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800843c:	b480      	push	{r7}
 800843e:	b089      	sub	sp, #36	@ 0x24
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008444:	4ba0      	ldr	r3, [pc, #640]	@ (80086c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008448:	f003 0303 	and.w	r3, r3, #3
 800844c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800844e:	4b9e      	ldr	r3, [pc, #632]	@ (80086c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008452:	091b      	lsrs	r3, r3, #4
 8008454:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008458:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800845a:	4b9b      	ldr	r3, [pc, #620]	@ (80086c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800845c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800845e:	f003 0301 	and.w	r3, r3, #1
 8008462:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008464:	4b98      	ldr	r3, [pc, #608]	@ (80086c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008466:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008468:	08db      	lsrs	r3, r3, #3
 800846a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800846e:	693a      	ldr	r2, [r7, #16]
 8008470:	fb02 f303 	mul.w	r3, r2, r3
 8008474:	ee07 3a90 	vmov	s15, r3
 8008478:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800847c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	2b00      	cmp	r3, #0
 8008484:	f000 8111 	beq.w	80086aa <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008488:	69bb      	ldr	r3, [r7, #24]
 800848a:	2b02      	cmp	r3, #2
 800848c:	f000 8083 	beq.w	8008596 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008490:	69bb      	ldr	r3, [r7, #24]
 8008492:	2b02      	cmp	r3, #2
 8008494:	f200 80a1 	bhi.w	80085da <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008498:	69bb      	ldr	r3, [r7, #24]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d003      	beq.n	80084a6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800849e:	69bb      	ldr	r3, [r7, #24]
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	d056      	beq.n	8008552 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80084a4:	e099      	b.n	80085da <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80084a6:	4b88      	ldr	r3, [pc, #544]	@ (80086c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f003 0320 	and.w	r3, r3, #32
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d02d      	beq.n	800850e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80084b2:	4b85      	ldr	r3, [pc, #532]	@ (80086c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	08db      	lsrs	r3, r3, #3
 80084b8:	f003 0303 	and.w	r3, r3, #3
 80084bc:	4a83      	ldr	r2, [pc, #524]	@ (80086cc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80084be:	fa22 f303 	lsr.w	r3, r2, r3
 80084c2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	ee07 3a90 	vmov	s15, r3
 80084ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	ee07 3a90 	vmov	s15, r3
 80084d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084dc:	4b7a      	ldr	r3, [pc, #488]	@ (80086c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80084de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084e4:	ee07 3a90 	vmov	s15, r3
 80084e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084ec:	ed97 6a03 	vldr	s12, [r7, #12]
 80084f0:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80086d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80084f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008500:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008504:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008508:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800850c:	e087      	b.n	800861e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	ee07 3a90 	vmov	s15, r3
 8008514:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008518:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80086d4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800851c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008520:	4b69      	ldr	r3, [pc, #420]	@ (80086c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008522:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008524:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008528:	ee07 3a90 	vmov	s15, r3
 800852c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008530:	ed97 6a03 	vldr	s12, [r7, #12]
 8008534:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80086d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008538:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800853c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008540:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008544:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008548:	ee67 7a27 	vmul.f32	s15, s14, s15
 800854c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008550:	e065      	b.n	800861e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	ee07 3a90 	vmov	s15, r3
 8008558:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800855c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80086d8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008560:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008564:	4b58      	ldr	r3, [pc, #352]	@ (80086c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008568:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800856c:	ee07 3a90 	vmov	s15, r3
 8008570:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008574:	ed97 6a03 	vldr	s12, [r7, #12]
 8008578:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80086d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800857c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008580:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008584:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008588:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800858c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008590:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008594:	e043      	b.n	800861e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	ee07 3a90 	vmov	s15, r3
 800859c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085a0:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80086dc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80085a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085a8:	4b47      	ldr	r3, [pc, #284]	@ (80086c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80085aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085b0:	ee07 3a90 	vmov	s15, r3
 80085b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085b8:	ed97 6a03 	vldr	s12, [r7, #12]
 80085bc:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80086d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80085c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085c8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80085cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80085d8:	e021      	b.n	800861e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	ee07 3a90 	vmov	s15, r3
 80085e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085e4:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80086d4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80085e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085ec:	4b36      	ldr	r3, [pc, #216]	@ (80086c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80085ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085f4:	ee07 3a90 	vmov	s15, r3
 80085f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085fc:	ed97 6a03 	vldr	s12, [r7, #12]
 8008600:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80086d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008604:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008608:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800860c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008610:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008614:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008618:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800861c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800861e:	4b2a      	ldr	r3, [pc, #168]	@ (80086c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008622:	0a5b      	lsrs	r3, r3, #9
 8008624:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008628:	ee07 3a90 	vmov	s15, r3
 800862c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008630:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008634:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008638:	edd7 6a07 	vldr	s13, [r7, #28]
 800863c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008640:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008644:	ee17 2a90 	vmov	r2, s15
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800864c:	4b1e      	ldr	r3, [pc, #120]	@ (80086c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800864e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008650:	0c1b      	lsrs	r3, r3, #16
 8008652:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008656:	ee07 3a90 	vmov	s15, r3
 800865a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800865e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008662:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008666:	edd7 6a07 	vldr	s13, [r7, #28]
 800866a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800866e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008672:	ee17 2a90 	vmov	r2, s15
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800867a:	4b13      	ldr	r3, [pc, #76]	@ (80086c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800867c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800867e:	0e1b      	lsrs	r3, r3, #24
 8008680:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008684:	ee07 3a90 	vmov	s15, r3
 8008688:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800868c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008690:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008694:	edd7 6a07 	vldr	s13, [r7, #28]
 8008698:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800869c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086a0:	ee17 2a90 	vmov	r2, s15
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80086a8:	e008      	b.n	80086bc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2200      	movs	r2, #0
 80086ae:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2200      	movs	r2, #0
 80086b4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2200      	movs	r2, #0
 80086ba:	609a      	str	r2, [r3, #8]
}
 80086bc:	bf00      	nop
 80086be:	3724      	adds	r7, #36	@ 0x24
 80086c0:	46bd      	mov	sp, r7
 80086c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c6:	4770      	bx	lr
 80086c8:	58024400 	.word	0x58024400
 80086cc:	03d09000 	.word	0x03d09000
 80086d0:	46000000 	.word	0x46000000
 80086d4:	4c742400 	.word	0x4c742400
 80086d8:	4a742400 	.word	0x4a742400
 80086dc:	4bbebc20 	.word	0x4bbebc20

080086e0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b084      	sub	sp, #16
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80086ea:	2300      	movs	r3, #0
 80086ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80086ee:	4b53      	ldr	r3, [pc, #332]	@ (800883c <RCCEx_PLL2_Config+0x15c>)
 80086f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086f2:	f003 0303 	and.w	r3, r3, #3
 80086f6:	2b03      	cmp	r3, #3
 80086f8:	d101      	bne.n	80086fe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80086fa:	2301      	movs	r3, #1
 80086fc:	e099      	b.n	8008832 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80086fe:	4b4f      	ldr	r3, [pc, #316]	@ (800883c <RCCEx_PLL2_Config+0x15c>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4a4e      	ldr	r2, [pc, #312]	@ (800883c <RCCEx_PLL2_Config+0x15c>)
 8008704:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008708:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800870a:	f7fb fb0d 	bl	8003d28 <HAL_GetTick>
 800870e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008710:	e008      	b.n	8008724 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008712:	f7fb fb09 	bl	8003d28 <HAL_GetTick>
 8008716:	4602      	mov	r2, r0
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	1ad3      	subs	r3, r2, r3
 800871c:	2b02      	cmp	r3, #2
 800871e:	d901      	bls.n	8008724 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008720:	2303      	movs	r3, #3
 8008722:	e086      	b.n	8008832 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008724:	4b45      	ldr	r3, [pc, #276]	@ (800883c <RCCEx_PLL2_Config+0x15c>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800872c:	2b00      	cmp	r3, #0
 800872e:	d1f0      	bne.n	8008712 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008730:	4b42      	ldr	r3, [pc, #264]	@ (800883c <RCCEx_PLL2_Config+0x15c>)
 8008732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008734:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	031b      	lsls	r3, r3, #12
 800873e:	493f      	ldr	r1, [pc, #252]	@ (800883c <RCCEx_PLL2_Config+0x15c>)
 8008740:	4313      	orrs	r3, r2
 8008742:	628b      	str	r3, [r1, #40]	@ 0x28
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	685b      	ldr	r3, [r3, #4]
 8008748:	3b01      	subs	r3, #1
 800874a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	689b      	ldr	r3, [r3, #8]
 8008752:	3b01      	subs	r3, #1
 8008754:	025b      	lsls	r3, r3, #9
 8008756:	b29b      	uxth	r3, r3
 8008758:	431a      	orrs	r2, r3
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	68db      	ldr	r3, [r3, #12]
 800875e:	3b01      	subs	r3, #1
 8008760:	041b      	lsls	r3, r3, #16
 8008762:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008766:	431a      	orrs	r2, r3
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	691b      	ldr	r3, [r3, #16]
 800876c:	3b01      	subs	r3, #1
 800876e:	061b      	lsls	r3, r3, #24
 8008770:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008774:	4931      	ldr	r1, [pc, #196]	@ (800883c <RCCEx_PLL2_Config+0x15c>)
 8008776:	4313      	orrs	r3, r2
 8008778:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800877a:	4b30      	ldr	r3, [pc, #192]	@ (800883c <RCCEx_PLL2_Config+0x15c>)
 800877c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800877e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	695b      	ldr	r3, [r3, #20]
 8008786:	492d      	ldr	r1, [pc, #180]	@ (800883c <RCCEx_PLL2_Config+0x15c>)
 8008788:	4313      	orrs	r3, r2
 800878a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800878c:	4b2b      	ldr	r3, [pc, #172]	@ (800883c <RCCEx_PLL2_Config+0x15c>)
 800878e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008790:	f023 0220 	bic.w	r2, r3, #32
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	699b      	ldr	r3, [r3, #24]
 8008798:	4928      	ldr	r1, [pc, #160]	@ (800883c <RCCEx_PLL2_Config+0x15c>)
 800879a:	4313      	orrs	r3, r2
 800879c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800879e:	4b27      	ldr	r3, [pc, #156]	@ (800883c <RCCEx_PLL2_Config+0x15c>)
 80087a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087a2:	4a26      	ldr	r2, [pc, #152]	@ (800883c <RCCEx_PLL2_Config+0x15c>)
 80087a4:	f023 0310 	bic.w	r3, r3, #16
 80087a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80087aa:	4b24      	ldr	r3, [pc, #144]	@ (800883c <RCCEx_PLL2_Config+0x15c>)
 80087ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80087ae:	4b24      	ldr	r3, [pc, #144]	@ (8008840 <RCCEx_PLL2_Config+0x160>)
 80087b0:	4013      	ands	r3, r2
 80087b2:	687a      	ldr	r2, [r7, #4]
 80087b4:	69d2      	ldr	r2, [r2, #28]
 80087b6:	00d2      	lsls	r2, r2, #3
 80087b8:	4920      	ldr	r1, [pc, #128]	@ (800883c <RCCEx_PLL2_Config+0x15c>)
 80087ba:	4313      	orrs	r3, r2
 80087bc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80087be:	4b1f      	ldr	r3, [pc, #124]	@ (800883c <RCCEx_PLL2_Config+0x15c>)
 80087c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087c2:	4a1e      	ldr	r2, [pc, #120]	@ (800883c <RCCEx_PLL2_Config+0x15c>)
 80087c4:	f043 0310 	orr.w	r3, r3, #16
 80087c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d106      	bne.n	80087de <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80087d0:	4b1a      	ldr	r3, [pc, #104]	@ (800883c <RCCEx_PLL2_Config+0x15c>)
 80087d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087d4:	4a19      	ldr	r2, [pc, #100]	@ (800883c <RCCEx_PLL2_Config+0x15c>)
 80087d6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80087da:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80087dc:	e00f      	b.n	80087fe <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	d106      	bne.n	80087f2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80087e4:	4b15      	ldr	r3, [pc, #84]	@ (800883c <RCCEx_PLL2_Config+0x15c>)
 80087e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087e8:	4a14      	ldr	r2, [pc, #80]	@ (800883c <RCCEx_PLL2_Config+0x15c>)
 80087ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80087ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80087f0:	e005      	b.n	80087fe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80087f2:	4b12      	ldr	r3, [pc, #72]	@ (800883c <RCCEx_PLL2_Config+0x15c>)
 80087f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087f6:	4a11      	ldr	r2, [pc, #68]	@ (800883c <RCCEx_PLL2_Config+0x15c>)
 80087f8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80087fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80087fe:	4b0f      	ldr	r3, [pc, #60]	@ (800883c <RCCEx_PLL2_Config+0x15c>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4a0e      	ldr	r2, [pc, #56]	@ (800883c <RCCEx_PLL2_Config+0x15c>)
 8008804:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008808:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800880a:	f7fb fa8d 	bl	8003d28 <HAL_GetTick>
 800880e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008810:	e008      	b.n	8008824 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008812:	f7fb fa89 	bl	8003d28 <HAL_GetTick>
 8008816:	4602      	mov	r2, r0
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	1ad3      	subs	r3, r2, r3
 800881c:	2b02      	cmp	r3, #2
 800881e:	d901      	bls.n	8008824 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008820:	2303      	movs	r3, #3
 8008822:	e006      	b.n	8008832 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008824:	4b05      	ldr	r3, [pc, #20]	@ (800883c <RCCEx_PLL2_Config+0x15c>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800882c:	2b00      	cmp	r3, #0
 800882e:	d0f0      	beq.n	8008812 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008830:	7bfb      	ldrb	r3, [r7, #15]
}
 8008832:	4618      	mov	r0, r3
 8008834:	3710      	adds	r7, #16
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}
 800883a:	bf00      	nop
 800883c:	58024400 	.word	0x58024400
 8008840:	ffff0007 	.word	0xffff0007

08008844 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b084      	sub	sp, #16
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
 800884c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800884e:	2300      	movs	r3, #0
 8008850:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008852:	4b53      	ldr	r3, [pc, #332]	@ (80089a0 <RCCEx_PLL3_Config+0x15c>)
 8008854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008856:	f003 0303 	and.w	r3, r3, #3
 800885a:	2b03      	cmp	r3, #3
 800885c:	d101      	bne.n	8008862 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800885e:	2301      	movs	r3, #1
 8008860:	e099      	b.n	8008996 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008862:	4b4f      	ldr	r3, [pc, #316]	@ (80089a0 <RCCEx_PLL3_Config+0x15c>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4a4e      	ldr	r2, [pc, #312]	@ (80089a0 <RCCEx_PLL3_Config+0x15c>)
 8008868:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800886c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800886e:	f7fb fa5b 	bl	8003d28 <HAL_GetTick>
 8008872:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008874:	e008      	b.n	8008888 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008876:	f7fb fa57 	bl	8003d28 <HAL_GetTick>
 800887a:	4602      	mov	r2, r0
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	1ad3      	subs	r3, r2, r3
 8008880:	2b02      	cmp	r3, #2
 8008882:	d901      	bls.n	8008888 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008884:	2303      	movs	r3, #3
 8008886:	e086      	b.n	8008996 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008888:	4b45      	ldr	r3, [pc, #276]	@ (80089a0 <RCCEx_PLL3_Config+0x15c>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008890:	2b00      	cmp	r3, #0
 8008892:	d1f0      	bne.n	8008876 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008894:	4b42      	ldr	r3, [pc, #264]	@ (80089a0 <RCCEx_PLL3_Config+0x15c>)
 8008896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008898:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	051b      	lsls	r3, r3, #20
 80088a2:	493f      	ldr	r1, [pc, #252]	@ (80089a0 <RCCEx_PLL3_Config+0x15c>)
 80088a4:	4313      	orrs	r3, r2
 80088a6:	628b      	str	r3, [r1, #40]	@ 0x28
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	685b      	ldr	r3, [r3, #4]
 80088ac:	3b01      	subs	r3, #1
 80088ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	689b      	ldr	r3, [r3, #8]
 80088b6:	3b01      	subs	r3, #1
 80088b8:	025b      	lsls	r3, r3, #9
 80088ba:	b29b      	uxth	r3, r3
 80088bc:	431a      	orrs	r2, r3
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	68db      	ldr	r3, [r3, #12]
 80088c2:	3b01      	subs	r3, #1
 80088c4:	041b      	lsls	r3, r3, #16
 80088c6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80088ca:	431a      	orrs	r2, r3
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	691b      	ldr	r3, [r3, #16]
 80088d0:	3b01      	subs	r3, #1
 80088d2:	061b      	lsls	r3, r3, #24
 80088d4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80088d8:	4931      	ldr	r1, [pc, #196]	@ (80089a0 <RCCEx_PLL3_Config+0x15c>)
 80088da:	4313      	orrs	r3, r2
 80088dc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80088de:	4b30      	ldr	r3, [pc, #192]	@ (80089a0 <RCCEx_PLL3_Config+0x15c>)
 80088e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088e2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	695b      	ldr	r3, [r3, #20]
 80088ea:	492d      	ldr	r1, [pc, #180]	@ (80089a0 <RCCEx_PLL3_Config+0x15c>)
 80088ec:	4313      	orrs	r3, r2
 80088ee:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80088f0:	4b2b      	ldr	r3, [pc, #172]	@ (80089a0 <RCCEx_PLL3_Config+0x15c>)
 80088f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088f4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	699b      	ldr	r3, [r3, #24]
 80088fc:	4928      	ldr	r1, [pc, #160]	@ (80089a0 <RCCEx_PLL3_Config+0x15c>)
 80088fe:	4313      	orrs	r3, r2
 8008900:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008902:	4b27      	ldr	r3, [pc, #156]	@ (80089a0 <RCCEx_PLL3_Config+0x15c>)
 8008904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008906:	4a26      	ldr	r2, [pc, #152]	@ (80089a0 <RCCEx_PLL3_Config+0x15c>)
 8008908:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800890c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800890e:	4b24      	ldr	r3, [pc, #144]	@ (80089a0 <RCCEx_PLL3_Config+0x15c>)
 8008910:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008912:	4b24      	ldr	r3, [pc, #144]	@ (80089a4 <RCCEx_PLL3_Config+0x160>)
 8008914:	4013      	ands	r3, r2
 8008916:	687a      	ldr	r2, [r7, #4]
 8008918:	69d2      	ldr	r2, [r2, #28]
 800891a:	00d2      	lsls	r2, r2, #3
 800891c:	4920      	ldr	r1, [pc, #128]	@ (80089a0 <RCCEx_PLL3_Config+0x15c>)
 800891e:	4313      	orrs	r3, r2
 8008920:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008922:	4b1f      	ldr	r3, [pc, #124]	@ (80089a0 <RCCEx_PLL3_Config+0x15c>)
 8008924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008926:	4a1e      	ldr	r2, [pc, #120]	@ (80089a0 <RCCEx_PLL3_Config+0x15c>)
 8008928:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800892c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d106      	bne.n	8008942 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008934:	4b1a      	ldr	r3, [pc, #104]	@ (80089a0 <RCCEx_PLL3_Config+0x15c>)
 8008936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008938:	4a19      	ldr	r2, [pc, #100]	@ (80089a0 <RCCEx_PLL3_Config+0x15c>)
 800893a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800893e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008940:	e00f      	b.n	8008962 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	2b01      	cmp	r3, #1
 8008946:	d106      	bne.n	8008956 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008948:	4b15      	ldr	r3, [pc, #84]	@ (80089a0 <RCCEx_PLL3_Config+0x15c>)
 800894a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800894c:	4a14      	ldr	r2, [pc, #80]	@ (80089a0 <RCCEx_PLL3_Config+0x15c>)
 800894e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008952:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008954:	e005      	b.n	8008962 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008956:	4b12      	ldr	r3, [pc, #72]	@ (80089a0 <RCCEx_PLL3_Config+0x15c>)
 8008958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800895a:	4a11      	ldr	r2, [pc, #68]	@ (80089a0 <RCCEx_PLL3_Config+0x15c>)
 800895c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008960:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008962:	4b0f      	ldr	r3, [pc, #60]	@ (80089a0 <RCCEx_PLL3_Config+0x15c>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	4a0e      	ldr	r2, [pc, #56]	@ (80089a0 <RCCEx_PLL3_Config+0x15c>)
 8008968:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800896c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800896e:	f7fb f9db 	bl	8003d28 <HAL_GetTick>
 8008972:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008974:	e008      	b.n	8008988 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008976:	f7fb f9d7 	bl	8003d28 <HAL_GetTick>
 800897a:	4602      	mov	r2, r0
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	1ad3      	subs	r3, r2, r3
 8008980:	2b02      	cmp	r3, #2
 8008982:	d901      	bls.n	8008988 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008984:	2303      	movs	r3, #3
 8008986:	e006      	b.n	8008996 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008988:	4b05      	ldr	r3, [pc, #20]	@ (80089a0 <RCCEx_PLL3_Config+0x15c>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008990:	2b00      	cmp	r3, #0
 8008992:	d0f0      	beq.n	8008976 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008994:	7bfb      	ldrb	r3, [r7, #15]
}
 8008996:	4618      	mov	r0, r3
 8008998:	3710      	adds	r7, #16
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}
 800899e:	bf00      	nop
 80089a0:	58024400 	.word	0x58024400
 80089a4:	ffff0007 	.word	0xffff0007

080089a8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b08a      	sub	sp, #40	@ 0x28
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d101      	bne.n	80089ba <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80089b6:	2301      	movs	r3, #1
 80089b8:	e075      	b.n	8008aa6 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80089c0:	b2db      	uxtb	r3, r3
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d105      	bne.n	80089d2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2200      	movs	r2, #0
 80089ca:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f7f8 fcf5 	bl	80013bc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2204      	movs	r2, #4
 80089d6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f000 f868 	bl	8008ab0 <HAL_SD_InitCard>
 80089e0:	4603      	mov	r3, r0
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d001      	beq.n	80089ea <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80089e6:	2301      	movs	r3, #1
 80089e8:	e05d      	b.n	8008aa6 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80089ea:	f107 0308 	add.w	r3, r7, #8
 80089ee:	4619      	mov	r1, r3
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f000 fdaf 	bl	8009554 <HAL_SD_GetCardStatus>
 80089f6:	4603      	mov	r3, r0
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d001      	beq.n	8008a00 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 80089fc:	2301      	movs	r3, #1
 80089fe:	e052      	b.n	8008aa6 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8008a00:	7e3b      	ldrb	r3, [r7, #24]
 8008a02:	b2db      	uxtb	r3, r3
 8008a04:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8008a06:	7e7b      	ldrb	r3, [r7, #25]
 8008a08:	b2db      	uxtb	r3, r3
 8008a0a:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a10:	2b01      	cmp	r3, #1
 8008a12:	d10a      	bne.n	8008a2a <HAL_SD_Init+0x82>
 8008a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d102      	bne.n	8008a20 <HAL_SD_Init+0x78>
 8008a1a:	6a3b      	ldr	r3, [r7, #32]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d004      	beq.n	8008a2a <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008a26:	659a      	str	r2, [r3, #88]	@ 0x58
 8008a28:	e00b      	b.n	8008a42 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a2e:	2b01      	cmp	r3, #1
 8008a30:	d104      	bne.n	8008a3c <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008a38:	659a      	str	r2, [r3, #88]	@ 0x58
 8008a3a:	e002      	b.n	8008a42 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	68db      	ldr	r3, [r3, #12]
 8008a46:	4619      	mov	r1, r3
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f000 fe6d 	bl	8009728 <HAL_SD_ConfigWideBusOperation>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d001      	beq.n	8008a58 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8008a54:	2301      	movs	r3, #1
 8008a56:	e026      	b.n	8008aa6 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8008a58:	f7fb f966 	bl	8003d28 <HAL_GetTick>
 8008a5c:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008a5e:	e011      	b.n	8008a84 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008a60:	f7fb f962 	bl	8003d28 <HAL_GetTick>
 8008a64:	4602      	mov	r2, r0
 8008a66:	69fb      	ldr	r3, [r7, #28]
 8008a68:	1ad3      	subs	r3, r2, r3
 8008a6a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008a6e:	d109      	bne.n	8008a84 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008a76:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8008a80:	2303      	movs	r3, #3
 8008a82:	e010      	b.n	8008aa6 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f000 ff61 	bl	800994c <HAL_SD_GetCardState>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	2b04      	cmp	r3, #4
 8008a8e:	d1e7      	bne.n	8008a60 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2200      	movs	r2, #0
 8008a94:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8008aa4:	2300      	movs	r3, #0
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3728      	adds	r7, #40	@ 0x28
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}
	...

08008ab0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008ab0:	b590      	push	{r4, r7, lr}
 8008ab2:	b08d      	sub	sp, #52	@ 0x34
 8008ab4:	af02      	add	r7, sp, #8
 8008ab6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008abc:	2300      	movs	r3, #0
 8008abe:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8008ac8:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8008acc:	f04f 0100 	mov.w	r1, #0
 8008ad0:	f7fe fc76 	bl	80073c0 <HAL_RCCEx_GetPeriphCLKFreq>
 8008ad4:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8008ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d109      	bne.n	8008af0 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2201      	movs	r2, #1
 8008ae0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8008aea:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008aec:	2301      	movs	r3, #1
 8008aee:	e070      	b.n	8008bd2 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8008af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008af2:	0a1b      	lsrs	r3, r3, #8
 8008af4:	4a39      	ldr	r2, [pc, #228]	@ (8008bdc <HAL_SD_InitCard+0x12c>)
 8008af6:	fba2 2303 	umull	r2, r3, r2, r3
 8008afa:	091b      	lsrs	r3, r3, #4
 8008afc:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681c      	ldr	r4, [r3, #0]
 8008b02:	466a      	mov	r2, sp
 8008b04:	f107 0318 	add.w	r3, r7, #24
 8008b08:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008b0c:	e882 0003 	stmia.w	r2, {r0, r1}
 8008b10:	f107 030c 	add.w	r3, r7, #12
 8008b14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008b16:	4620      	mov	r0, r4
 8008b18:	f005 fb8e 	bl	800e238 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	4618      	mov	r0, r3
 8008b22:	f005 fbd1 	bl	800e2c8 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8008b26:	69fb      	ldr	r3, [r7, #28]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d005      	beq.n	8008b38 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8008b2c:	69fb      	ldr	r3, [r7, #28]
 8008b2e:	005b      	lsls	r3, r3, #1
 8008b30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b36:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8008b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d007      	beq.n	8008b4e <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8008b3e:	4a28      	ldr	r2, [pc, #160]	@ (8008be0 <HAL_SD_InitCard+0x130>)
 8008b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b46:	3301      	adds	r3, #1
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f7fb f8f9 	bl	8003d40 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f000 ffea 	bl	8009b28 <SD_PowerON>
 8008b54:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008b56:	6a3b      	ldr	r3, [r7, #32]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d00b      	beq.n	8008b74 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2201      	movs	r2, #1
 8008b60:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008b68:	6a3b      	ldr	r3, [r7, #32]
 8008b6a:	431a      	orrs	r2, r3
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008b70:	2301      	movs	r3, #1
 8008b72:	e02e      	b.n	8008bd2 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f000 ff09 	bl	800998c <SD_InitCard>
 8008b7a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008b7c:	6a3b      	ldr	r3, [r7, #32]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d00b      	beq.n	8008b9a <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2201      	movs	r2, #1
 8008b86:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008b8e:	6a3b      	ldr	r3, [r7, #32]
 8008b90:	431a      	orrs	r2, r3
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008b96:	2301      	movs	r3, #1
 8008b98:	e01b      	b.n	8008bd2 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f005 fc26 	bl	800e3f4 <SDMMC_CmdBlockLength>
 8008ba8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008baa:	6a3b      	ldr	r3, [r7, #32]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d00f      	beq.n	8008bd0 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	4a0b      	ldr	r2, [pc, #44]	@ (8008be4 <HAL_SD_InitCard+0x134>)
 8008bb6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008bbc:	6a3b      	ldr	r3, [r7, #32]
 8008bbe:	431a      	orrs	r2, r3
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8008bcc:	2301      	movs	r3, #1
 8008bce:	e000      	b.n	8008bd2 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8008bd0:	2300      	movs	r3, #0
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	372c      	adds	r7, #44	@ 0x2c
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd90      	pop	{r4, r7, pc}
 8008bda:	bf00      	nop
 8008bdc:	014f8b59 	.word	0x014f8b59
 8008be0:	00012110 	.word	0x00012110
 8008be4:	1fe00fff 	.word	0x1fe00fff

08008be8 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b08c      	sub	sp, #48	@ 0x30
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	60f8      	str	r0, [r7, #12]
 8008bf0:	60b9      	str	r1, [r7, #8]
 8008bf2:	607a      	str	r2, [r7, #4]
 8008bf4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d107      	bne.n	8008c10 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c04:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	e08d      	b.n	8008d2c <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008c16:	b2db      	uxtb	r3, r3
 8008c18:	2b01      	cmp	r3, #1
 8008c1a:	f040 8086 	bne.w	8008d2a <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	2200      	movs	r2, #0
 8008c22:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008c24:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	441a      	add	r2, r3
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c2e:	429a      	cmp	r2, r3
 8008c30:	d907      	bls.n	8008c42 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c36:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8008c3e:	2301      	movs	r3, #1
 8008c40:	e074      	b.n	8008d2c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	2203      	movs	r2, #3
 8008c46:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	68ba      	ldr	r2, [r7, #8]
 8008c56:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	025a      	lsls	r2, r3, #9
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c64:	2b01      	cmp	r3, #1
 8008c66:	d002      	beq.n	8008c6e <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8008c68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c6a:	025b      	lsls	r3, r3, #9
 8008c6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008c6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008c72:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	025b      	lsls	r3, r3, #9
 8008c78:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008c7a:	2390      	movs	r3, #144	@ 0x90
 8008c7c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008c7e:	2302      	movs	r3, #2
 8008c80:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008c82:	2300      	movs	r3, #0
 8008c84:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008c86:	2300      	movs	r3, #0
 8008c88:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f107 0210 	add.w	r2, r7, #16
 8008c92:	4611      	mov	r1, r2
 8008c94:	4618      	mov	r0, r3
 8008c96:	f005 fb81 	bl	800e39c <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	68da      	ldr	r2, [r3, #12]
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008ca8:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	68ba      	ldr	r2, [r7, #8]
 8008cb0:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	2b01      	cmp	r3, #1
 8008cbe:	d90a      	bls.n	8008cd6 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	2282      	movs	r2, #130	@ 0x82
 8008cc4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f005 fbd7 	bl	800e480 <SDMMC_CmdReadMultiBlock>
 8008cd2:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8008cd4:	e009      	b.n	8008cea <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	2281      	movs	r2, #129	@ 0x81
 8008cda:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f005 fba9 	bl	800e43a <SDMMC_CmdReadSingleBlock>
 8008ce8:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8008cea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d012      	beq.n	8008d16 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	4a0f      	ldr	r2, [pc, #60]	@ (8008d34 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8008cf6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008cfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cfe:	431a      	orrs	r2, r3
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	2201      	movs	r2, #1
 8008d08:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8008d12:	2301      	movs	r3, #1
 8008d14:	e00a      	b.n	8008d2c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8008d24:	63da      	str	r2, [r3, #60]	@ 0x3c


    return HAL_OK;
 8008d26:	2300      	movs	r3, #0
 8008d28:	e000      	b.n	8008d2c <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8008d2a:	2302      	movs	r3, #2
  }
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	3730      	adds	r7, #48	@ 0x30
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd80      	pop	{r7, pc}
 8008d34:	1fe00fff 	.word	0x1fe00fff

08008d38 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b08c      	sub	sp, #48	@ 0x30
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	60f8      	str	r0, [r7, #12]
 8008d40:	60b9      	str	r1, [r7, #8]
 8008d42:	607a      	str	r2, [r7, #4]
 8008d44:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d107      	bne.n	8008d60 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d54:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	e08d      	b.n	8008e7c <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008d66:	b2db      	uxtb	r3, r3
 8008d68:	2b01      	cmp	r3, #1
 8008d6a:	f040 8086 	bne.w	8008e7a <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	2200      	movs	r2, #0
 8008d72:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008d74:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	441a      	add	r2, r3
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d7e:	429a      	cmp	r2, r3
 8008d80:	d907      	bls.n	8008d92 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d86:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8008d8e:	2301      	movs	r3, #1
 8008d90:	e074      	b.n	8008e7c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	2203      	movs	r2, #3
 8008d96:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	68ba      	ldr	r2, [r7, #8]
 8008da6:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	025a      	lsls	r2, r3, #9
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008db4:	2b01      	cmp	r3, #1
 8008db6:	d002      	beq.n	8008dbe <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8008db8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dba:	025b      	lsls	r3, r3, #9
 8008dbc:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008dbe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008dc2:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	025b      	lsls	r3, r3, #9
 8008dc8:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008dca:	2390      	movs	r3, #144	@ 0x90
 8008dcc:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f107 0210 	add.w	r2, r7, #16
 8008de2:	4611      	mov	r1, r2
 8008de4:	4618      	mov	r0, r3
 8008de6:	f005 fad9 	bl	800e39c <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	68da      	ldr	r2, [r3, #12]
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008df8:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	68ba      	ldr	r2, [r7, #8]
 8008e00:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	2201      	movs	r2, #1
 8008e08:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	2b01      	cmp	r3, #1
 8008e0e:	d90a      	bls.n	8008e26 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	22a0      	movs	r2, #160	@ 0xa0
 8008e14:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f005 fb75 	bl	800e50c <SDMMC_CmdWriteMultiBlock>
 8008e22:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8008e24:	e009      	b.n	8008e3a <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	2290      	movs	r2, #144	@ 0x90
 8008e2a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008e32:	4618      	mov	r0, r3
 8008e34:	f005 fb47 	bl	800e4c6 <SDMMC_CmdWriteSingleBlock>
 8008e38:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8008e3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d012      	beq.n	8008e66 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4a0f      	ldr	r2, [pc, #60]	@ (8008e84 <HAL_SD_WriteBlocks_DMA+0x14c>)
 8008e46:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008e4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e4e:	431a      	orrs	r2, r3
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	2201      	movs	r2, #1
 8008e58:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8008e62:	2301      	movs	r3, #1
 8008e64:	e00a      	b.n	8008e7c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 8008e74:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008e76:	2300      	movs	r3, #0
 8008e78:	e000      	b.n	8008e7c <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8008e7a:	2302      	movs	r3, #2
  }
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	3730      	adds	r7, #48	@ 0x30
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}
 8008e84:	1fe00fff 	.word	0x1fe00fff

08008e88 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b084      	sub	sp, #16
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e94:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e9c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d008      	beq.n	8008eb6 <HAL_SD_IRQHandler+0x2e>
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	f003 0308 	and.w	r3, r3, #8
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d003      	beq.n	8008eb6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f001 f926 	bl	800a100 <SD_Read_IT>
 8008eb4:	e19a      	b.n	80091ec <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ebc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	f000 80ac 	beq.w	800901e <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008ece:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681a      	ldr	r2, [r3, #0]
 8008eda:	4b59      	ldr	r3, [pc, #356]	@ (8009040 <HAL_SD_IRQHandler+0x1b8>)
 8008edc:	400b      	ands	r3, r1
 8008ede:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8008eee:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	68da      	ldr	r2, [r3, #12]
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008efe:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	f003 0308 	and.w	r3, r3, #8
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d038      	beq.n	8008f7c <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	f003 0302 	and.w	r3, r3, #2
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d104      	bne.n	8008f1e <HAL_SD_IRQHandler+0x96>
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	f003 0320 	and.w	r3, r3, #32
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d011      	beq.n	8008f42 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	4618      	mov	r0, r3
 8008f24:	f005 fb16 	bl	800e554 <SDMMC_CmdStopTransfer>
 8008f28:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d008      	beq.n	8008f42 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	431a      	orrs	r2, r3
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f000 f95b 	bl	80091f8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	4a3f      	ldr	r2, [pc, #252]	@ (8009044 <HAL_SD_IRQHandler+0x1bc>)
 8008f48:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2201      	movs	r2, #1
 8008f4e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2200      	movs	r2, #0
 8008f56:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	f003 0301 	and.w	r3, r3, #1
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d104      	bne.n	8008f6c <HAL_SD_IRQHandler+0xe4>
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	f003 0302 	and.w	r3, r3, #2
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d003      	beq.n	8008f74 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f005 ffc9 	bl	800ef04 <HAL_SD_RxCpltCallback>
 8008f72:	e13b      	b.n	80091ec <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f005 ffbb 	bl	800eef0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008f7a:	e137      	b.n	80091ec <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	f000 8132 	beq.w	80091ec <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	2200      	movs	r2, #0
 8008f96:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	f003 0302 	and.w	r3, r3, #2
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d104      	bne.n	8008fb4 <HAL_SD_IRQHandler+0x12c>
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	f003 0320 	and.w	r3, r3, #32
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d011      	beq.n	8008fd8 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f005 facb 	bl	800e554 <SDMMC_CmdStopTransfer>
 8008fbe:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d008      	beq.n	8008fd8 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	431a      	orrs	r2, r3
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f000 f910 	bl	80091f8 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2201      	movs	r2, #1
 8008fdc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	f003 0310 	and.w	r3, r3, #16
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d104      	bne.n	8008ffa <HAL_SD_IRQHandler+0x172>
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	f003 0320 	and.w	r3, r3, #32
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d002      	beq.n	8009000 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f005 ff78 	bl	800eef0 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	f003 0301 	and.w	r3, r3, #1
 8009006:	2b00      	cmp	r3, #0
 8009008:	d105      	bne.n	8009016 <HAL_SD_IRQHandler+0x18e>
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	f003 0302 	and.w	r3, r3, #2
 8009010:	2b00      	cmp	r3, #0
 8009012:	f000 80eb 	beq.w	80091ec <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f005 ff74 	bl	800ef04 <HAL_SD_RxCpltCallback>
}
 800901c:	e0e6      	b.n	80091ec <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009024:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009028:	2b00      	cmp	r3, #0
 800902a:	d00d      	beq.n	8009048 <HAL_SD_IRQHandler+0x1c0>
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	f003 0308 	and.w	r3, r3, #8
 8009032:	2b00      	cmp	r3, #0
 8009034:	d008      	beq.n	8009048 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f001 f8a8 	bl	800a18c <SD_Write_IT>
 800903c:	e0d6      	b.n	80091ec <HAL_SD_IRQHandler+0x364>
 800903e:	bf00      	nop
 8009040:	ffff3ec5 	.word	0xffff3ec5
 8009044:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800904e:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 8009052:	2b00      	cmp	r3, #0
 8009054:	f000 809d 	beq.w	8009192 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800905e:	f003 0302 	and.w	r3, r3, #2
 8009062:	2b00      	cmp	r3, #0
 8009064:	d005      	beq.n	8009072 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800906a:	f043 0202 	orr.w	r2, r3, #2
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009078:	f003 0308 	and.w	r3, r3, #8
 800907c:	2b00      	cmp	r3, #0
 800907e:	d005      	beq.n	800908c <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009084:	f043 0208 	orr.w	r2, r3, #8
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009092:	f003 0320 	and.w	r3, r3, #32
 8009096:	2b00      	cmp	r3, #0
 8009098:	d005      	beq.n	80090a6 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800909e:	f043 0220 	orr.w	r2, r3, #32
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090ac:	f003 0310 	and.w	r3, r3, #16
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d005      	beq.n	80090c0 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090b8:	f043 0210 	orr.w	r2, r3, #16
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	4a4b      	ldr	r2, [pc, #300]	@ (80091f4 <HAL_SD_IRQHandler+0x36c>)
 80090c6:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 80090d6:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	68da      	ldr	r2, [r3, #12]
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80090e6:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80090f6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	68da      	ldr	r2, [r3, #12]
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009106:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	4618      	mov	r0, r3
 800910e:	f005 fa21 	bl	800e554 <SDMMC_CmdStopTransfer>
 8009112:	4602      	mov	r2, r0
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009118:	431a      	orrs	r2, r3
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	68da      	ldr	r2, [r3, #12]
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800912c:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009136:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	f003 0308 	and.w	r3, r3, #8
 800913e:	2b00      	cmp	r3, #0
 8009140:	d00a      	beq.n	8009158 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2201      	movs	r2, #1
 8009146:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2200      	movs	r2, #0
 800914e:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f000 f851 	bl	80091f8 <HAL_SD_ErrorCallback>
}
 8009156:	e049      	b.n	80091ec <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800915e:	2b00      	cmp	r3, #0
 8009160:	d044      	beq.n	80091ec <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009166:	2b00      	cmp	r3, #0
 8009168:	d040      	beq.n	80091ec <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8009178:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	2200      	movs	r2, #0
 8009180:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2201      	movs	r2, #1
 8009186:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f000 f834 	bl	80091f8 <HAL_SD_ErrorCallback>
}
 8009190:	e02c      	b.n	80091ec <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009198:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800919c:	2b00      	cmp	r3, #0
 800919e:	d025      	beq.n	80091ec <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80091a8:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091b0:	f003 0304 	and.w	r3, r3, #4
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d10c      	bne.n	80091d2 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	f003 0320 	and.w	r3, r3, #32
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d003      	beq.n	80091ca <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f001 f84a 	bl	800a25c <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 80091c8:	e010      	b.n	80091ec <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f001 f832 	bl	800a234 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 80091d0:	e00c      	b.n	80091ec <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	f003 0320 	and.w	r3, r3, #32
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d003      	beq.n	80091e4 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f001 f833 	bl	800a248 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 80091e2:	e003      	b.n	80091ec <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	f001 f81b 	bl	800a220 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 80091ea:	e7ff      	b.n	80091ec <HAL_SD_IRQHandler+0x364>
 80091ec:	bf00      	nop
 80091ee:	3710      	adds	r7, #16
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}
 80091f4:	18000f3a 	.word	0x18000f3a

080091f8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80091f8:	b480      	push	{r7}
 80091fa:	b083      	sub	sp, #12
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8009200:	bf00      	nop
 8009202:	370c      	adds	r7, #12
 8009204:	46bd      	mov	sp, r7
 8009206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920a:	4770      	bx	lr

0800920c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800920c:	b480      	push	{r7}
 800920e:	b083      	sub	sp, #12
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
 8009214:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800921a:	0f9b      	lsrs	r3, r3, #30
 800921c:	b2da      	uxtb	r2, r3
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009226:	0e9b      	lsrs	r3, r3, #26
 8009228:	b2db      	uxtb	r3, r3
 800922a:	f003 030f 	and.w	r3, r3, #15
 800922e:	b2da      	uxtb	r2, r3
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009238:	0e1b      	lsrs	r3, r3, #24
 800923a:	b2db      	uxtb	r3, r3
 800923c:	f003 0303 	and.w	r3, r3, #3
 8009240:	b2da      	uxtb	r2, r3
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800924a:	0c1b      	lsrs	r3, r3, #16
 800924c:	b2da      	uxtb	r2, r3
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009256:	0a1b      	lsrs	r3, r3, #8
 8009258:	b2da      	uxtb	r2, r3
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009262:	b2da      	uxtb	r2, r3
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800926c:	0d1b      	lsrs	r3, r3, #20
 800926e:	b29a      	uxth	r2, r3
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009278:	0c1b      	lsrs	r3, r3, #16
 800927a:	b2db      	uxtb	r3, r3
 800927c:	f003 030f 	and.w	r3, r3, #15
 8009280:	b2da      	uxtb	r2, r3
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800928a:	0bdb      	lsrs	r3, r3, #15
 800928c:	b2db      	uxtb	r3, r3
 800928e:	f003 0301 	and.w	r3, r3, #1
 8009292:	b2da      	uxtb	r2, r3
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800929c:	0b9b      	lsrs	r3, r3, #14
 800929e:	b2db      	uxtb	r3, r3
 80092a0:	f003 0301 	and.w	r3, r3, #1
 80092a4:	b2da      	uxtb	r2, r3
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092ae:	0b5b      	lsrs	r3, r3, #13
 80092b0:	b2db      	uxtb	r3, r3
 80092b2:	f003 0301 	and.w	r3, r3, #1
 80092b6:	b2da      	uxtb	r2, r3
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092c0:	0b1b      	lsrs	r3, r3, #12
 80092c2:	b2db      	uxtb	r3, r3
 80092c4:	f003 0301 	and.w	r3, r3, #1
 80092c8:	b2da      	uxtb	r2, r3
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	2200      	movs	r2, #0
 80092d2:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d163      	bne.n	80093a4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092e0:	009a      	lsls	r2, r3, #2
 80092e2:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80092e6:	4013      	ands	r3, r2
 80092e8:	687a      	ldr	r2, [r7, #4]
 80092ea:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 80092ec:	0f92      	lsrs	r2, r2, #30
 80092ee:	431a      	orrs	r2, r3
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80092f8:	0edb      	lsrs	r3, r3, #27
 80092fa:	b2db      	uxtb	r3, r3
 80092fc:	f003 0307 	and.w	r3, r3, #7
 8009300:	b2da      	uxtb	r2, r3
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800930a:	0e1b      	lsrs	r3, r3, #24
 800930c:	b2db      	uxtb	r3, r3
 800930e:	f003 0307 	and.w	r3, r3, #7
 8009312:	b2da      	uxtb	r2, r3
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800931c:	0d5b      	lsrs	r3, r3, #21
 800931e:	b2db      	uxtb	r3, r3
 8009320:	f003 0307 	and.w	r3, r3, #7
 8009324:	b2da      	uxtb	r2, r3
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800932e:	0c9b      	lsrs	r3, r3, #18
 8009330:	b2db      	uxtb	r3, r3
 8009332:	f003 0307 	and.w	r3, r3, #7
 8009336:	b2da      	uxtb	r2, r3
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009340:	0bdb      	lsrs	r3, r3, #15
 8009342:	b2db      	uxtb	r3, r3
 8009344:	f003 0307 	and.w	r3, r3, #7
 8009348:	b2da      	uxtb	r2, r3
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	691b      	ldr	r3, [r3, #16]
 8009352:	1c5a      	adds	r2, r3, #1
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	7e1b      	ldrb	r3, [r3, #24]
 800935c:	b2db      	uxtb	r3, r3
 800935e:	f003 0307 	and.w	r3, r3, #7
 8009362:	3302      	adds	r3, #2
 8009364:	2201      	movs	r2, #1
 8009366:	fa02 f303 	lsl.w	r3, r2, r3
 800936a:	687a      	ldr	r2, [r7, #4]
 800936c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800936e:	fb03 f202 	mul.w	r2, r3, r2
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	7a1b      	ldrb	r3, [r3, #8]
 800937a:	b2db      	uxtb	r3, r3
 800937c:	f003 030f 	and.w	r3, r3, #15
 8009380:	2201      	movs	r2, #1
 8009382:	409a      	lsls	r2, r3
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800938c:	687a      	ldr	r2, [r7, #4]
 800938e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8009390:	0a52      	lsrs	r2, r2, #9
 8009392:	fb03 f202 	mul.w	r2, r3, r2
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80093a0:	655a      	str	r2, [r3, #84]	@ 0x54
 80093a2:	e031      	b.n	8009408 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093a8:	2b01      	cmp	r3, #1
 80093aa:	d11d      	bne.n	80093e8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80093b0:	041b      	lsls	r3, r3, #16
 80093b2:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80093ba:	0c1b      	lsrs	r3, r3, #16
 80093bc:	431a      	orrs	r2, r3
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	691b      	ldr	r3, [r3, #16]
 80093c6:	3301      	adds	r3, #1
 80093c8:	029a      	lsls	r2, r3, #10
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80093dc:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	655a      	str	r2, [r3, #84]	@ 0x54
 80093e6:	e00f      	b.n	8009408 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	4a58      	ldr	r2, [pc, #352]	@ (8009550 <HAL_SD_GetCardCSD+0x344>)
 80093ee:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093f4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2201      	movs	r2, #1
 8009400:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8009404:	2301      	movs	r3, #1
 8009406:	e09d      	b.n	8009544 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800940c:	0b9b      	lsrs	r3, r3, #14
 800940e:	b2db      	uxtb	r3, r3
 8009410:	f003 0301 	and.w	r3, r3, #1
 8009414:	b2da      	uxtb	r2, r3
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800941e:	09db      	lsrs	r3, r3, #7
 8009420:	b2db      	uxtb	r3, r3
 8009422:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009426:	b2da      	uxtb	r2, r3
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009430:	b2db      	uxtb	r3, r3
 8009432:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009436:	b2da      	uxtb	r2, r3
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009440:	0fdb      	lsrs	r3, r3, #31
 8009442:	b2da      	uxtb	r2, r3
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800944c:	0f5b      	lsrs	r3, r3, #29
 800944e:	b2db      	uxtb	r3, r3
 8009450:	f003 0303 	and.w	r3, r3, #3
 8009454:	b2da      	uxtb	r2, r3
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800945e:	0e9b      	lsrs	r3, r3, #26
 8009460:	b2db      	uxtb	r3, r3
 8009462:	f003 0307 	and.w	r3, r3, #7
 8009466:	b2da      	uxtb	r2, r3
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009470:	0d9b      	lsrs	r3, r3, #22
 8009472:	b2db      	uxtb	r3, r3
 8009474:	f003 030f 	and.w	r3, r3, #15
 8009478:	b2da      	uxtb	r2, r3
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009482:	0d5b      	lsrs	r3, r3, #21
 8009484:	b2db      	uxtb	r3, r3
 8009486:	f003 0301 	and.w	r3, r3, #1
 800948a:	b2da      	uxtb	r2, r3
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	2200      	movs	r2, #0
 8009496:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800949e:	0c1b      	lsrs	r3, r3, #16
 80094a0:	b2db      	uxtb	r3, r3
 80094a2:	f003 0301 	and.w	r3, r3, #1
 80094a6:	b2da      	uxtb	r2, r3
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80094b2:	0bdb      	lsrs	r3, r3, #15
 80094b4:	b2db      	uxtb	r3, r3
 80094b6:	f003 0301 	and.w	r3, r3, #1
 80094ba:	b2da      	uxtb	r2, r3
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80094c6:	0b9b      	lsrs	r3, r3, #14
 80094c8:	b2db      	uxtb	r3, r3
 80094ca:	f003 0301 	and.w	r3, r3, #1
 80094ce:	b2da      	uxtb	r2, r3
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80094da:	0b5b      	lsrs	r3, r3, #13
 80094dc:	b2db      	uxtb	r3, r3
 80094de:	f003 0301 	and.w	r3, r3, #1
 80094e2:	b2da      	uxtb	r2, r3
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80094ee:	0b1b      	lsrs	r3, r3, #12
 80094f0:	b2db      	uxtb	r3, r3
 80094f2:	f003 0301 	and.w	r3, r3, #1
 80094f6:	b2da      	uxtb	r2, r3
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009502:	0a9b      	lsrs	r3, r3, #10
 8009504:	b2db      	uxtb	r3, r3
 8009506:	f003 0303 	and.w	r3, r3, #3
 800950a:	b2da      	uxtb	r2, r3
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009516:	0a1b      	lsrs	r3, r3, #8
 8009518:	b2db      	uxtb	r3, r3
 800951a:	f003 0303 	and.w	r3, r3, #3
 800951e:	b2da      	uxtb	r2, r3
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800952a:	085b      	lsrs	r3, r3, #1
 800952c:	b2db      	uxtb	r3, r3
 800952e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009532:	b2da      	uxtb	r2, r3
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	2201      	movs	r2, #1
 800953e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8009542:	2300      	movs	r3, #0
}
 8009544:	4618      	mov	r0, r3
 8009546:	370c      	adds	r7, #12
 8009548:	46bd      	mov	sp, r7
 800954a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954e:	4770      	bx	lr
 8009550:	1fe00fff 	.word	0x1fe00fff

08009554 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b094      	sub	sp, #80	@ 0x50
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
 800955c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800955e:	2300      	movs	r3, #0
 8009560:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800956a:	b2db      	uxtb	r3, r3
 800956c:	2b03      	cmp	r3, #3
 800956e:	d101      	bne.n	8009574 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8009570:	2301      	movs	r3, #1
 8009572:	e0a7      	b.n	80096c4 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8009574:	f107 0308 	add.w	r3, r7, #8
 8009578:	4619      	mov	r1, r3
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f000 fb62 	bl	8009c44 <SD_SendSDStatus>
 8009580:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8009582:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009584:	2b00      	cmp	r3, #0
 8009586:	d011      	beq.n	80095ac <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	4a4f      	ldr	r2, [pc, #316]	@ (80096cc <HAL_SD_GetCardStatus+0x178>)
 800958e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009594:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009596:	431a      	orrs	r2, r3
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2201      	movs	r2, #1
 80095a0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 80095a4:	2301      	movs	r3, #1
 80095a6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80095aa:	e070      	b.n	800968e <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	099b      	lsrs	r3, r3, #6
 80095b0:	b2db      	uxtb	r3, r3
 80095b2:	f003 0303 	and.w	r3, r3, #3
 80095b6:	b2da      	uxtb	r2, r3
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	095b      	lsrs	r3, r3, #5
 80095c0:	b2db      	uxtb	r3, r3
 80095c2:	f003 0301 	and.w	r3, r3, #1
 80095c6:	b2da      	uxtb	r2, r3
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	0a1b      	lsrs	r3, r3, #8
 80095d0:	b29b      	uxth	r3, r3
 80095d2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80095d6:	b29a      	uxth	r2, r3
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	0e1b      	lsrs	r3, r3, #24
 80095dc:	b29b      	uxth	r3, r3
 80095de:	4313      	orrs	r3, r2
 80095e0:	b29a      	uxth	r2, r3
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	061a      	lsls	r2, r3, #24
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	021b      	lsls	r3, r3, #8
 80095ee:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80095f2:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	0a1b      	lsrs	r3, r3, #8
 80095f8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80095fc:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	0e1b      	lsrs	r3, r3, #24
 8009602:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8009608:	693b      	ldr	r3, [r7, #16]
 800960a:	b2da      	uxtb	r2, r3
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8009610:	693b      	ldr	r3, [r7, #16]
 8009612:	0a1b      	lsrs	r3, r3, #8
 8009614:	b2da      	uxtb	r2, r3
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800961a:	693b      	ldr	r3, [r7, #16]
 800961c:	0d1b      	lsrs	r3, r3, #20
 800961e:	b2db      	uxtb	r3, r3
 8009620:	f003 030f 	and.w	r3, r3, #15
 8009624:	b2da      	uxtb	r2, r3
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800962a:	693b      	ldr	r3, [r7, #16]
 800962c:	0c1b      	lsrs	r3, r3, #16
 800962e:	b29b      	uxth	r3, r3
 8009630:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009634:	b29a      	uxth	r2, r3
 8009636:	697b      	ldr	r3, [r7, #20]
 8009638:	b29b      	uxth	r3, r3
 800963a:	b2db      	uxtb	r3, r3
 800963c:	b29b      	uxth	r3, r3
 800963e:	4313      	orrs	r3, r2
 8009640:	b29a      	uxth	r2, r3
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	0a9b      	lsrs	r3, r3, #10
 800964a:	b2db      	uxtb	r3, r3
 800964c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009650:	b2da      	uxtb	r2, r3
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	0a1b      	lsrs	r3, r3, #8
 800965a:	b2db      	uxtb	r3, r3
 800965c:	f003 0303 	and.w	r3, r3, #3
 8009660:	b2da      	uxtb	r2, r3
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	091b      	lsrs	r3, r3, #4
 800966a:	b2db      	uxtb	r3, r3
 800966c:	f003 030f 	and.w	r3, r3, #15
 8009670:	b2da      	uxtb	r2, r3
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	b2db      	uxtb	r3, r3
 800967a:	f003 030f 	and.w	r3, r3, #15
 800967e:	b2da      	uxtb	r2, r3
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8009684:	69bb      	ldr	r3, [r7, #24]
 8009686:	0e1b      	lsrs	r3, r3, #24
 8009688:	b2da      	uxtb	r2, r3
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009696:	4618      	mov	r0, r3
 8009698:	f004 feac 	bl	800e3f4 <SDMMC_CmdBlockLength>
 800969c:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800969e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d00d      	beq.n	80096c0 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	4a08      	ldr	r2, [pc, #32]	@ (80096cc <HAL_SD_GetCardStatus+0x178>)
 80096aa:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80096b0:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2201      	movs	r2, #1
 80096b6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 80096ba:	2301      	movs	r3, #1
 80096bc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 80096c0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	3750      	adds	r7, #80	@ 0x50
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bd80      	pop	{r7, pc}
 80096cc:	1fe00fff 	.word	0x1fe00fff

080096d0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80096d0:	b480      	push	{r7}
 80096d2:	b083      	sub	sp, #12
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800971a:	2300      	movs	r3, #0
}
 800971c:	4618      	mov	r0, r3
 800971e:	370c      	adds	r7, #12
 8009720:	46bd      	mov	sp, r7
 8009722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009726:	4770      	bx	lr

08009728 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8009728:	b590      	push	{r4, r7, lr}
 800972a:	b08d      	sub	sp, #52	@ 0x34
 800972c:	af02      	add	r7, sp, #8
 800972e:	6078      	str	r0, [r7, #4]
 8009730:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8009732:	2300      	movs	r3, #0
 8009734:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2203      	movs	r2, #3
 800973c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009744:	2b03      	cmp	r3, #3
 8009746:	d02e      	beq.n	80097a6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800974e:	d106      	bne.n	800975e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009754:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	635a      	str	r2, [r3, #52]	@ 0x34
 800975c:	e029      	b.n	80097b2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009764:	d10a      	bne.n	800977c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f000 fb64 	bl	8009e34 <SD_WideBus_Enable>
 800976c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009772:	6a3b      	ldr	r3, [r7, #32]
 8009774:	431a      	orrs	r2, r3
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	635a      	str	r2, [r3, #52]	@ 0x34
 800977a:	e01a      	b.n	80097b2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d10a      	bne.n	8009798 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	f000 fba1 	bl	8009eca <SD_WideBus_Disable>
 8009788:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800978e:	6a3b      	ldr	r3, [r7, #32]
 8009790:	431a      	orrs	r2, r3
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	635a      	str	r2, [r3, #52]	@ 0x34
 8009796:	e00c      	b.n	80097b2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800979c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	635a      	str	r2, [r3, #52]	@ 0x34
 80097a4:	e005      	b.n	80097b2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097aa:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d007      	beq.n	80097ca <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	4a5f      	ldr	r2, [pc, #380]	@ (800993c <HAL_SD_ConfigWideBusOperation+0x214>)
 80097c0:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 80097c2:	2301      	movs	r3, #1
 80097c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80097c8:	e096      	b.n	80098f8 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80097ca:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80097ce:	f04f 0100 	mov.w	r1, #0
 80097d2:	f7fd fdf5 	bl	80073c0 <HAL_RCCEx_GetPeriphCLKFreq>
 80097d6:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 80097d8:	69fb      	ldr	r3, [r7, #28]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	f000 8083 	beq.w	80098e6 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	685b      	ldr	r3, [r3, #4]
 80097e4:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	689b      	ldr	r3, [r3, #8]
 80097ea:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	691b      	ldr	r3, [r3, #16]
 80097f4:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	695a      	ldr	r2, [r3, #20]
 80097fa:	69fb      	ldr	r3, [r7, #28]
 80097fc:	4950      	ldr	r1, [pc, #320]	@ (8009940 <HAL_SD_ConfigWideBusOperation+0x218>)
 80097fe:	fba1 1303 	umull	r1, r3, r1, r3
 8009802:	0e1b      	lsrs	r3, r3, #24
 8009804:	429a      	cmp	r2, r3
 8009806:	d303      	bcc.n	8009810 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	695b      	ldr	r3, [r3, #20]
 800980c:	61bb      	str	r3, [r7, #24]
 800980e:	e05a      	b.n	80098c6 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009814:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009818:	d103      	bne.n	8009822 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	695b      	ldr	r3, [r3, #20]
 800981e:	61bb      	str	r3, [r7, #24]
 8009820:	e051      	b.n	80098c6 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009826:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800982a:	d126      	bne.n	800987a <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	695b      	ldr	r3, [r3, #20]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d10e      	bne.n	8009852 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8009834:	69fb      	ldr	r3, [r7, #28]
 8009836:	4a43      	ldr	r2, [pc, #268]	@ (8009944 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8009838:	4293      	cmp	r3, r2
 800983a:	d906      	bls.n	800984a <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800983c:	69fb      	ldr	r3, [r7, #28]
 800983e:	4a40      	ldr	r2, [pc, #256]	@ (8009940 <HAL_SD_ConfigWideBusOperation+0x218>)
 8009840:	fba2 2303 	umull	r2, r3, r2, r3
 8009844:	0e5b      	lsrs	r3, r3, #25
 8009846:	61bb      	str	r3, [r7, #24]
 8009848:	e03d      	b.n	80098c6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	695b      	ldr	r3, [r3, #20]
 800984e:	61bb      	str	r3, [r7, #24]
 8009850:	e039      	b.n	80098c6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	695b      	ldr	r3, [r3, #20]
 8009856:	005b      	lsls	r3, r3, #1
 8009858:	69fa      	ldr	r2, [r7, #28]
 800985a:	fbb2 f3f3 	udiv	r3, r2, r3
 800985e:	4a39      	ldr	r2, [pc, #228]	@ (8009944 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8009860:	4293      	cmp	r3, r2
 8009862:	d906      	bls.n	8009872 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8009864:	69fb      	ldr	r3, [r7, #28]
 8009866:	4a36      	ldr	r2, [pc, #216]	@ (8009940 <HAL_SD_ConfigWideBusOperation+0x218>)
 8009868:	fba2 2303 	umull	r2, r3, r2, r3
 800986c:	0e5b      	lsrs	r3, r3, #25
 800986e:	61bb      	str	r3, [r7, #24]
 8009870:	e029      	b.n	80098c6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	695b      	ldr	r3, [r3, #20]
 8009876:	61bb      	str	r3, [r7, #24]
 8009878:	e025      	b.n	80098c6 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	695b      	ldr	r3, [r3, #20]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d10e      	bne.n	80098a0 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8009882:	69fb      	ldr	r3, [r7, #28]
 8009884:	4a30      	ldr	r2, [pc, #192]	@ (8009948 <HAL_SD_ConfigWideBusOperation+0x220>)
 8009886:	4293      	cmp	r3, r2
 8009888:	d906      	bls.n	8009898 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800988a:	69fb      	ldr	r3, [r7, #28]
 800988c:	4a2c      	ldr	r2, [pc, #176]	@ (8009940 <HAL_SD_ConfigWideBusOperation+0x218>)
 800988e:	fba2 2303 	umull	r2, r3, r2, r3
 8009892:	0e1b      	lsrs	r3, r3, #24
 8009894:	61bb      	str	r3, [r7, #24]
 8009896:	e016      	b.n	80098c6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	695b      	ldr	r3, [r3, #20]
 800989c:	61bb      	str	r3, [r7, #24]
 800989e:	e012      	b.n	80098c6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	695b      	ldr	r3, [r3, #20]
 80098a4:	005b      	lsls	r3, r3, #1
 80098a6:	69fa      	ldr	r2, [r7, #28]
 80098a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80098ac:	4a26      	ldr	r2, [pc, #152]	@ (8009948 <HAL_SD_ConfigWideBusOperation+0x220>)
 80098ae:	4293      	cmp	r3, r2
 80098b0:	d906      	bls.n	80098c0 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80098b2:	69fb      	ldr	r3, [r7, #28]
 80098b4:	4a22      	ldr	r2, [pc, #136]	@ (8009940 <HAL_SD_ConfigWideBusOperation+0x218>)
 80098b6:	fba2 2303 	umull	r2, r3, r2, r3
 80098ba:	0e1b      	lsrs	r3, r3, #24
 80098bc:	61bb      	str	r3, [r7, #24]
 80098be:	e002      	b.n	80098c6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	695b      	ldr	r3, [r3, #20]
 80098c4:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681c      	ldr	r4, [r3, #0]
 80098ca:	466a      	mov	r2, sp
 80098cc:	f107 0314 	add.w	r3, r7, #20
 80098d0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80098d4:	e882 0003 	stmia.w	r2, {r0, r1}
 80098d8:	f107 0308 	add.w	r3, r7, #8
 80098dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80098de:	4620      	mov	r0, r4
 80098e0:	f004 fcaa 	bl	800e238 <SDMMC_Init>
 80098e4:	e008      	b.n	80098f8 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098ea:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 80098f2:	2301      	movs	r3, #1
 80098f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009900:	4618      	mov	r0, r3
 8009902:	f004 fd77 	bl	800e3f4 <SDMMC_CmdBlockLength>
 8009906:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009908:	6a3b      	ldr	r3, [r7, #32]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d00c      	beq.n	8009928 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	4a0a      	ldr	r2, [pc, #40]	@ (800993c <HAL_SD_ConfigWideBusOperation+0x214>)
 8009914:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800991a:	6a3b      	ldr	r3, [r7, #32]
 800991c:	431a      	orrs	r2, r3
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8009922:	2301      	movs	r3, #1
 8009924:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2201      	movs	r2, #1
 800992c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 8009930:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8009934:	4618      	mov	r0, r3
 8009936:	372c      	adds	r7, #44	@ 0x2c
 8009938:	46bd      	mov	sp, r7
 800993a:	bd90      	pop	{r4, r7, pc}
 800993c:	1fe00fff 	.word	0x1fe00fff
 8009940:	55e63b89 	.word	0x55e63b89
 8009944:	02faf080 	.word	0x02faf080
 8009948:	017d7840 	.word	0x017d7840

0800994c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b086      	sub	sp, #24
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009954:	2300      	movs	r3, #0
 8009956:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009958:	f107 030c 	add.w	r3, r7, #12
 800995c:	4619      	mov	r1, r3
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f000 fa40 	bl	8009de4 <SD_SendStatus>
 8009964:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d005      	beq.n	8009978 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009970:	697b      	ldr	r3, [r7, #20]
 8009972:	431a      	orrs	r2, r3
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	0a5b      	lsrs	r3, r3, #9
 800997c:	f003 030f 	and.w	r3, r3, #15
 8009980:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009982:	693b      	ldr	r3, [r7, #16]
}
 8009984:	4618      	mov	r0, r3
 8009986:	3718      	adds	r7, #24
 8009988:	46bd      	mov	sp, r7
 800998a:	bd80      	pop	{r7, pc}

0800998c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b090      	sub	sp, #64	@ 0x40
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8009994:	2300      	movs	r3, #0
 8009996:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8009998:	f7fa f9c6 	bl	8003d28 <HAL_GetTick>
 800999c:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	4618      	mov	r0, r3
 80099a4:	f004 fca1 	bl	800e2ea <SDMMC_GetPowerState>
 80099a8:	4603      	mov	r3, r0
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d102      	bne.n	80099b4 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80099ae:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80099b2:	e0b5      	b.n	8009b20 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099b8:	2b03      	cmp	r3, #3
 80099ba:	d02e      	beq.n	8009a1a <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	4618      	mov	r0, r3
 80099c2:	f004 feec 	bl	800e79e <SDMMC_CmdSendCID>
 80099c6:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80099c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d001      	beq.n	80099d2 <SD_InitCard+0x46>
    {
      return errorstate;
 80099ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099d0:	e0a6      	b.n	8009b20 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	2100      	movs	r1, #0
 80099d8:	4618      	mov	r0, r3
 80099da:	f004 fccc 	bl	800e376 <SDMMC_GetResponse>
 80099de:	4602      	mov	r2, r0
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	2104      	movs	r1, #4
 80099ea:	4618      	mov	r0, r3
 80099ec:	f004 fcc3 	bl	800e376 <SDMMC_GetResponse>
 80099f0:	4602      	mov	r2, r0
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	2108      	movs	r1, #8
 80099fc:	4618      	mov	r0, r3
 80099fe:	f004 fcba 	bl	800e376 <SDMMC_GetResponse>
 8009a02:	4602      	mov	r2, r0
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	210c      	movs	r1, #12
 8009a0e:	4618      	mov	r0, r3
 8009a10:	f004 fcb1 	bl	800e376 <SDMMC_GetResponse>
 8009a14:	4602      	mov	r2, r0
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a1e:	2b03      	cmp	r3, #3
 8009a20:	d01d      	beq.n	8009a5e <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8009a22:	e019      	b.n	8009a58 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f107 020a 	add.w	r2, r7, #10
 8009a2c:	4611      	mov	r1, r2
 8009a2e:	4618      	mov	r0, r3
 8009a30:	f004 fef4 	bl	800e81c <SDMMC_CmdSetRelAdd>
 8009a34:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8009a36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d001      	beq.n	8009a40 <SD_InitCard+0xb4>
      {
        return errorstate;
 8009a3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a3e:	e06f      	b.n	8009b20 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8009a40:	f7fa f972 	bl	8003d28 <HAL_GetTick>
 8009a44:	4602      	mov	r2, r0
 8009a46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a48:	1ad3      	subs	r3, r2, r3
 8009a4a:	f241 3287 	movw	r2, #4999	@ 0x1387
 8009a4e:	4293      	cmp	r3, r2
 8009a50:	d902      	bls.n	8009a58 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8009a52:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009a56:	e063      	b.n	8009b20 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8009a58:	897b      	ldrh	r3, [r7, #10]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d0e2      	beq.n	8009a24 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a62:	2b03      	cmp	r3, #3
 8009a64:	d036      	beq.n	8009ad4 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009a66:	897b      	ldrh	r3, [r7, #10]
 8009a68:	461a      	mov	r2, r3
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681a      	ldr	r2, [r3, #0]
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a76:	041b      	lsls	r3, r3, #16
 8009a78:	4619      	mov	r1, r3
 8009a7a:	4610      	mov	r0, r2
 8009a7c:	f004 feae 	bl	800e7dc <SDMMC_CmdSendCSD>
 8009a80:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8009a82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d001      	beq.n	8009a8c <SD_InitCard+0x100>
    {
      return errorstate;
 8009a88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a8a:	e049      	b.n	8009b20 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	2100      	movs	r1, #0
 8009a92:	4618      	mov	r0, r3
 8009a94:	f004 fc6f 	bl	800e376 <SDMMC_GetResponse>
 8009a98:	4602      	mov	r2, r0
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	2104      	movs	r1, #4
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	f004 fc66 	bl	800e376 <SDMMC_GetResponse>
 8009aaa:	4602      	mov	r2, r0
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	2108      	movs	r1, #8
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f004 fc5d 	bl	800e376 <SDMMC_GetResponse>
 8009abc:	4602      	mov	r2, r0
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	210c      	movs	r1, #12
 8009ac8:	4618      	mov	r0, r3
 8009aca:	f004 fc54 	bl	800e376 <SDMMC_GetResponse>
 8009ace:	4602      	mov	r2, r0
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	2104      	movs	r1, #4
 8009ada:	4618      	mov	r0, r3
 8009adc:	f004 fc4b 	bl	800e376 <SDMMC_GetResponse>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	0d1a      	lsrs	r2, r3, #20
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009ae8:	f107 030c 	add.w	r3, r7, #12
 8009aec:	4619      	mov	r1, r3
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f7ff fb8c 	bl	800920c <HAL_SD_GetCardCSD>
 8009af4:	4603      	mov	r3, r0
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d002      	beq.n	8009b00 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009afa:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009afe:	e00f      	b.n	8009b20 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681a      	ldr	r2, [r3, #0]
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b08:	041b      	lsls	r3, r3, #16
 8009b0a:	4619      	mov	r1, r3
 8009b0c:	4610      	mov	r0, r2
 8009b0e:	f004 fd5d 	bl	800e5cc <SDMMC_CmdSelDesel>
 8009b12:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8009b14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d001      	beq.n	8009b1e <SD_InitCard+0x192>
  {
    return errorstate;
 8009b1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b1c:	e000      	b.n	8009b20 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009b1e:	2300      	movs	r3, #0
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	3740      	adds	r7, #64	@ 0x40
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}

08009b28 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b086      	sub	sp, #24
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009b30:	2300      	movs	r3, #0
 8009b32:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8009b34:	2300      	movs	r3, #0
 8009b36:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8009b38:	2300      	movs	r3, #0
 8009b3a:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	4618      	mov	r0, r3
 8009b42:	f004 fd66 	bl	800e612 <SDMMC_CmdGoIdleState>
 8009b46:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d001      	beq.n	8009b52 <SD_PowerON+0x2a>
  {
    return errorstate;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	e072      	b.n	8009c38 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	4618      	mov	r0, r3
 8009b58:	f004 fd79 	bl	800e64e <SDMMC_CmdOperCond>
 8009b5c:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009b64:	d10d      	bne.n	8009b82 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	4618      	mov	r0, r3
 8009b72:	f004 fd4e 	bl	800e612 <SDMMC_CmdGoIdleState>
 8009b76:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d004      	beq.n	8009b88 <SD_PowerON+0x60>
    {
      return errorstate;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	e05a      	b.n	8009c38 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	2201      	movs	r2, #1
 8009b86:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b8c:	2b01      	cmp	r3, #1
 8009b8e:	d137      	bne.n	8009c00 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	2100      	movs	r1, #0
 8009b96:	4618      	mov	r0, r3
 8009b98:	f004 fd79 	bl	800e68e <SDMMC_CmdAppCommand>
 8009b9c:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d02d      	beq.n	8009c00 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009ba4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009ba8:	e046      	b.n	8009c38 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	2100      	movs	r1, #0
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	f004 fd6c 	bl	800e68e <SDMMC_CmdAppCommand>
 8009bb6:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d001      	beq.n	8009bc2 <SD_PowerON+0x9a>
    {
      return errorstate;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	e03a      	b.n	8009c38 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	491e      	ldr	r1, [pc, #120]	@ (8009c40 <SD_PowerON+0x118>)
 8009bc8:	4618      	mov	r0, r3
 8009bca:	f004 fd83 	bl	800e6d4 <SDMMC_CmdAppOperCommand>
 8009bce:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d002      	beq.n	8009bdc <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009bd6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009bda:	e02d      	b.n	8009c38 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	2100      	movs	r1, #0
 8009be2:	4618      	mov	r0, r3
 8009be4:	f004 fbc7 	bl	800e376 <SDMMC_GetResponse>
 8009be8:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009bea:	697b      	ldr	r3, [r7, #20]
 8009bec:	0fdb      	lsrs	r3, r3, #31
 8009bee:	2b01      	cmp	r3, #1
 8009bf0:	d101      	bne.n	8009bf6 <SD_PowerON+0xce>
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	e000      	b.n	8009bf8 <SD_PowerON+0xd0>
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	613b      	str	r3, [r7, #16]

    count++;
 8009bfa:	68bb      	ldr	r3, [r7, #8]
 8009bfc:	3301      	adds	r3, #1
 8009bfe:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009c06:	4293      	cmp	r3, r2
 8009c08:	d802      	bhi.n	8009c10 <SD_PowerON+0xe8>
 8009c0a:	693b      	ldr	r3, [r7, #16]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d0cc      	beq.n	8009baa <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009c16:	4293      	cmp	r3, r2
 8009c18:	d902      	bls.n	8009c20 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009c1a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009c1e:	e00b      	b.n	8009c38 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2200      	movs	r2, #0
 8009c24:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8009c26:	697b      	ldr	r3, [r7, #20]
 8009c28:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d002      	beq.n	8009c36 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2201      	movs	r2, #1
 8009c34:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8009c36:	2300      	movs	r3, #0
}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	3718      	adds	r7, #24
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	bd80      	pop	{r7, pc}
 8009c40:	c1100000 	.word	0xc1100000

08009c44 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b08c      	sub	sp, #48	@ 0x30
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
 8009c4c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009c4e:	f7fa f86b 	bl	8003d28 <HAL_GetTick>
 8009c52:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	2100      	movs	r1, #0
 8009c5e:	4618      	mov	r0, r3
 8009c60:	f004 fb89 	bl	800e376 <SDMMC_GetResponse>
 8009c64:	4603      	mov	r3, r0
 8009c66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009c6a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009c6e:	d102      	bne.n	8009c76 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009c70:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009c74:	e0b0      	b.n	8009dd8 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	2140      	movs	r1, #64	@ 0x40
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	f004 fbb9 	bl	800e3f4 <SDMMC_CmdBlockLength>
 8009c82:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009c84:	6a3b      	ldr	r3, [r7, #32]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d005      	beq.n	8009c96 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8009c92:	6a3b      	ldr	r3, [r7, #32]
 8009c94:	e0a0      	b.n	8009dd8 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681a      	ldr	r2, [r3, #0]
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c9e:	041b      	lsls	r3, r3, #16
 8009ca0:	4619      	mov	r1, r3
 8009ca2:	4610      	mov	r0, r2
 8009ca4:	f004 fcf3 	bl	800e68e <SDMMC_CmdAppCommand>
 8009ca8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009caa:	6a3b      	ldr	r3, [r7, #32]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d005      	beq.n	8009cbc <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8009cb8:	6a3b      	ldr	r3, [r7, #32]
 8009cba:	e08d      	b.n	8009dd8 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009cbc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009cc0:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8009cc2:	2340      	movs	r3, #64	@ 0x40
 8009cc4:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8009cc6:	2360      	movs	r3, #96	@ 0x60
 8009cc8:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009cca:	2302      	movs	r3, #2
 8009ccc:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009cce:	2300      	movs	r3, #0
 8009cd0:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f107 0208 	add.w	r2, r7, #8
 8009cde:	4611      	mov	r1, r2
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f004 fb5b 	bl	800e39c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	4618      	mov	r0, r3
 8009cec:	f004 fddb 	bl	800e8a6 <SDMMC_CmdStatusRegister>
 8009cf0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009cf2:	6a3b      	ldr	r3, [r7, #32]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d02b      	beq.n	8009d50 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8009d00:	6a3b      	ldr	r3, [r7, #32]
 8009d02:	e069      	b.n	8009dd8 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d0a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d013      	beq.n	8009d3a <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8009d12:	2300      	movs	r3, #0
 8009d14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009d16:	e00d      	b.n	8009d34 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	f004 fab5 	bl	800e28c <SDMMC_ReadFIFO>
 8009d22:	4602      	mov	r2, r0
 8009d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d26:	601a      	str	r2, [r3, #0]
        pData++;
 8009d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d2a:	3304      	adds	r3, #4
 8009d2c:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 8009d2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d30:	3301      	adds	r3, #1
 8009d32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009d34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d36:	2b07      	cmp	r3, #7
 8009d38:	d9ee      	bls.n	8009d18 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009d3a:	f7f9 fff5 	bl	8003d28 <HAL_GetTick>
 8009d3e:	4602      	mov	r2, r0
 8009d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d42:	1ad3      	subs	r3, r2, r3
 8009d44:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009d48:	d102      	bne.n	8009d50 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009d4a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009d4e:	e043      	b.n	8009dd8 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d56:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d0d2      	beq.n	8009d04 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d64:	f003 0308 	and.w	r3, r3, #8
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d001      	beq.n	8009d70 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009d6c:	2308      	movs	r3, #8
 8009d6e:	e033      	b.n	8009dd8 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d76:	f003 0302 	and.w	r3, r3, #2
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d001      	beq.n	8009d82 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009d7e:	2302      	movs	r3, #2
 8009d80:	e02a      	b.n	8009dd8 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d88:	f003 0320 	and.w	r3, r3, #32
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d017      	beq.n	8009dc0 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8009d90:	2320      	movs	r3, #32
 8009d92:	e021      	b.n	8009dd8 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	4618      	mov	r0, r3
 8009d9a:	f004 fa77 	bl	800e28c <SDMMC_ReadFIFO>
 8009d9e:	4602      	mov	r2, r0
 8009da0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009da2:	601a      	str	r2, [r3, #0]
    pData++;
 8009da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009da6:	3304      	adds	r3, #4
 8009da8:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009daa:	f7f9 ffbd 	bl	8003d28 <HAL_GetTick>
 8009dae:	4602      	mov	r2, r0
 8009db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009db2:	1ad3      	subs	r3, r2, r3
 8009db4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009db8:	d102      	bne.n	8009dc0 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009dba:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009dbe:	e00b      	b.n	8009dd8 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009dc6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d1e2      	bne.n	8009d94 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	4a03      	ldr	r2, [pc, #12]	@ (8009de0 <SD_SendSDStatus+0x19c>)
 8009dd4:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 8009dd6:	2300      	movs	r3, #0
}
 8009dd8:	4618      	mov	r0, r3
 8009dda:	3730      	adds	r7, #48	@ 0x30
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd80      	pop	{r7, pc}
 8009de0:	18000f3a 	.word	0x18000f3a

08009de4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b084      	sub	sp, #16
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
 8009dec:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d102      	bne.n	8009dfa <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009df4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009df8:	e018      	b.n	8009e2c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681a      	ldr	r2, [r3, #0]
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e02:	041b      	lsls	r3, r3, #16
 8009e04:	4619      	mov	r1, r3
 8009e06:	4610      	mov	r0, r2
 8009e08:	f004 fd2a 	bl	800e860 <SDMMC_CmdSendStatus>
 8009e0c:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d001      	beq.n	8009e18 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	e009      	b.n	8009e2c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	2100      	movs	r1, #0
 8009e1e:	4618      	mov	r0, r3
 8009e20:	f004 faa9 	bl	800e376 <SDMMC_GetResponse>
 8009e24:	4602      	mov	r2, r0
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009e2a:	2300      	movs	r3, #0
}
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	3710      	adds	r7, #16
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd80      	pop	{r7, pc}

08009e34 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b086      	sub	sp, #24
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	60fb      	str	r3, [r7, #12]
 8009e40:	2300      	movs	r3, #0
 8009e42:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	2100      	movs	r1, #0
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	f004 fa93 	bl	800e376 <SDMMC_GetResponse>
 8009e50:	4603      	mov	r3, r0
 8009e52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009e56:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009e5a:	d102      	bne.n	8009e62 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009e5c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009e60:	e02f      	b.n	8009ec2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009e62:	f107 030c 	add.w	r3, r7, #12
 8009e66:	4619      	mov	r1, r3
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	f000 f879 	bl	8009f60 <SD_FindSCR>
 8009e6e:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009e70:	697b      	ldr	r3, [r7, #20]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d001      	beq.n	8009e7a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009e76:	697b      	ldr	r3, [r7, #20]
 8009e78:	e023      	b.n	8009ec2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009e7a:	693b      	ldr	r3, [r7, #16]
 8009e7c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d01c      	beq.n	8009ebe <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681a      	ldr	r2, [r3, #0]
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e8c:	041b      	lsls	r3, r3, #16
 8009e8e:	4619      	mov	r1, r3
 8009e90:	4610      	mov	r0, r2
 8009e92:	f004 fbfc 	bl	800e68e <SDMMC_CmdAppCommand>
 8009e96:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009e98:	697b      	ldr	r3, [r7, #20]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d001      	beq.n	8009ea2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009e9e:	697b      	ldr	r3, [r7, #20]
 8009ea0:	e00f      	b.n	8009ec2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	2102      	movs	r1, #2
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f004 fc33 	bl	800e714 <SDMMC_CmdBusWidth>
 8009eae:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009eb0:	697b      	ldr	r3, [r7, #20]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d001      	beq.n	8009eba <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009eb6:	697b      	ldr	r3, [r7, #20]
 8009eb8:	e003      	b.n	8009ec2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009eba:	2300      	movs	r3, #0
 8009ebc:	e001      	b.n	8009ec2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009ebe:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3718      	adds	r7, #24
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}

08009eca <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009eca:	b580      	push	{r7, lr}
 8009ecc:	b086      	sub	sp, #24
 8009ece:	af00      	add	r7, sp, #0
 8009ed0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	60fb      	str	r3, [r7, #12]
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	2100      	movs	r1, #0
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f004 fa48 	bl	800e376 <SDMMC_GetResponse>
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009eec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009ef0:	d102      	bne.n	8009ef8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009ef2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009ef6:	e02f      	b.n	8009f58 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009ef8:	f107 030c 	add.w	r3, r7, #12
 8009efc:	4619      	mov	r1, r3
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f000 f82e 	bl	8009f60 <SD_FindSCR>
 8009f04:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009f06:	697b      	ldr	r3, [r7, #20]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d001      	beq.n	8009f10 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009f0c:	697b      	ldr	r3, [r7, #20]
 8009f0e:	e023      	b.n	8009f58 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009f10:	693b      	ldr	r3, [r7, #16]
 8009f12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d01c      	beq.n	8009f54 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681a      	ldr	r2, [r3, #0]
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f22:	041b      	lsls	r3, r3, #16
 8009f24:	4619      	mov	r1, r3
 8009f26:	4610      	mov	r0, r2
 8009f28:	f004 fbb1 	bl	800e68e <SDMMC_CmdAppCommand>
 8009f2c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d001      	beq.n	8009f38 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009f34:	697b      	ldr	r3, [r7, #20]
 8009f36:	e00f      	b.n	8009f58 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	2100      	movs	r1, #0
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f004 fbe8 	bl	800e714 <SDMMC_CmdBusWidth>
 8009f44:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009f46:	697b      	ldr	r3, [r7, #20]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d001      	beq.n	8009f50 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009f4c:	697b      	ldr	r3, [r7, #20]
 8009f4e:	e003      	b.n	8009f58 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009f50:	2300      	movs	r3, #0
 8009f52:	e001      	b.n	8009f58 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009f54:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3718      	adds	r7, #24
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}

08009f60 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b08e      	sub	sp, #56	@ 0x38
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
 8009f68:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009f6a:	f7f9 fedd 	bl	8003d28 <HAL_GetTick>
 8009f6e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8009f70:	2300      	movs	r3, #0
 8009f72:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8009f74:	2300      	movs	r3, #0
 8009f76:	60bb      	str	r3, [r7, #8]
 8009f78:	2300      	movs	r3, #0
 8009f7a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	2108      	movs	r1, #8
 8009f86:	4618      	mov	r0, r3
 8009f88:	f004 fa34 	bl	800e3f4 <SDMMC_CmdBlockLength>
 8009f8c:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d001      	beq.n	8009f98 <SD_FindSCR+0x38>
  {
    return errorstate;
 8009f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f96:	e0ad      	b.n	800a0f4 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681a      	ldr	r2, [r3, #0]
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009fa0:	041b      	lsls	r3, r3, #16
 8009fa2:	4619      	mov	r1, r3
 8009fa4:	4610      	mov	r0, r2
 8009fa6:	f004 fb72 	bl	800e68e <SDMMC_CmdAppCommand>
 8009faa:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009fac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d001      	beq.n	8009fb6 <SD_FindSCR+0x56>
  {
    return errorstate;
 8009fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fb4:	e09e      	b.n	800a0f4 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009fb6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009fba:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009fbc:	2308      	movs	r3, #8
 8009fbe:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009fc0:	2330      	movs	r3, #48	@ 0x30
 8009fc2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009fc4:	2302      	movs	r3, #2
 8009fc6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009fc8:	2300      	movs	r3, #0
 8009fca:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009fcc:	2301      	movs	r3, #1
 8009fce:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f107 0210 	add.w	r2, r7, #16
 8009fd8:	4611      	mov	r1, r2
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f004 f9de 	bl	800e39c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	f004 fbb8 	bl	800e75a <SDMMC_CmdSendSCR>
 8009fea:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d027      	beq.n	800a042 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8009ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ff4:	e07e      	b.n	800a0f4 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ffc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a000:	2b00      	cmp	r3, #0
 800a002:	d113      	bne.n	800a02c <SD_FindSCR+0xcc>
 800a004:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a006:	2b00      	cmp	r3, #0
 800a008:	d110      	bne.n	800a02c <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	4618      	mov	r0, r3
 800a010:	f004 f93c 	bl	800e28c <SDMMC_ReadFIFO>
 800a014:	4603      	mov	r3, r0
 800a016:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	4618      	mov	r0, r3
 800a01e:	f004 f935 	bl	800e28c <SDMMC_ReadFIFO>
 800a022:	4603      	mov	r3, r0
 800a024:	60fb      	str	r3, [r7, #12]
      index++;
 800a026:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a028:	3301      	adds	r3, #1
 800a02a:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a02c:	f7f9 fe7c 	bl	8003d28 <HAL_GetTick>
 800a030:	4602      	mov	r2, r0
 800a032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a034:	1ad3      	subs	r3, r2, r3
 800a036:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a03a:	d102      	bne.n	800a042 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a03c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a040:	e058      	b.n	800a0f4 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a048:	f240 532a 	movw	r3, #1322	@ 0x52a
 800a04c:	4013      	ands	r3, r2
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d0d1      	beq.n	8009ff6 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a058:	f003 0308 	and.w	r3, r3, #8
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d005      	beq.n	800a06c <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	2208      	movs	r2, #8
 800a066:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a068:	2308      	movs	r3, #8
 800a06a:	e043      	b.n	800a0f4 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a072:	f003 0302 	and.w	r3, r3, #2
 800a076:	2b00      	cmp	r3, #0
 800a078:	d005      	beq.n	800a086 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	2202      	movs	r2, #2
 800a080:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a082:	2302      	movs	r3, #2
 800a084:	e036      	b.n	800a0f4 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a08c:	f003 0320 	and.w	r3, r3, #32
 800a090:	2b00      	cmp	r3, #0
 800a092:	d005      	beq.n	800a0a0 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	2220      	movs	r2, #32
 800a09a:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800a09c:	2320      	movs	r3, #32
 800a09e:	e029      	b.n	800a0f4 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	4a15      	ldr	r2, [pc, #84]	@ (800a0fc <SD_FindSCR+0x19c>)
 800a0a6:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	061a      	lsls	r2, r3, #24
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	021b      	lsls	r3, r3, #8
 800a0b0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a0b4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	0a1b      	lsrs	r3, r3, #8
 800a0ba:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800a0be:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	0e1b      	lsrs	r3, r3, #24
 800a0c4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800a0c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0c8:	601a      	str	r2, [r3, #0]
    scr++;
 800a0ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0cc:	3304      	adds	r3, #4
 800a0ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	061a      	lsls	r2, r3, #24
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	021b      	lsls	r3, r3, #8
 800a0d8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a0dc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	0a1b      	lsrs	r3, r3, #8
 800a0e2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800a0e6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	0e1b      	lsrs	r3, r3, #24
 800a0ec:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800a0ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0f0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800a0f2:	2300      	movs	r3, #0
}
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	3738      	adds	r7, #56	@ 0x38
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	bd80      	pop	{r7, pc}
 800a0fc:	18000f3a 	.word	0x18000f3a

0800a100 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b086      	sub	sp, #24
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a10c:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a112:	2b1f      	cmp	r3, #31
 800a114:	d936      	bls.n	800a184 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800a116:	2300      	movs	r3, #0
 800a118:	617b      	str	r3, [r7, #20]
 800a11a:	e027      	b.n	800a16c <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	4618      	mov	r0, r3
 800a122:	f004 f8b3 	bl	800e28c <SDMMC_ReadFIFO>
 800a126:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	b2da      	uxtb	r2, r3
 800a12c:	693b      	ldr	r3, [r7, #16]
 800a12e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a130:	693b      	ldr	r3, [r7, #16]
 800a132:	3301      	adds	r3, #1
 800a134:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	0a1b      	lsrs	r3, r3, #8
 800a13a:	b2da      	uxtb	r2, r3
 800a13c:	693b      	ldr	r3, [r7, #16]
 800a13e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a140:	693b      	ldr	r3, [r7, #16]
 800a142:	3301      	adds	r3, #1
 800a144:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	0c1b      	lsrs	r3, r3, #16
 800a14a:	b2da      	uxtb	r2, r3
 800a14c:	693b      	ldr	r3, [r7, #16]
 800a14e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a150:	693b      	ldr	r3, [r7, #16]
 800a152:	3301      	adds	r3, #1
 800a154:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	0e1b      	lsrs	r3, r3, #24
 800a15a:	b2da      	uxtb	r2, r3
 800a15c:	693b      	ldr	r3, [r7, #16]
 800a15e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a160:	693b      	ldr	r3, [r7, #16]
 800a162:	3301      	adds	r3, #1
 800a164:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800a166:	697b      	ldr	r3, [r7, #20]
 800a168:	3301      	adds	r3, #1
 800a16a:	617b      	str	r3, [r7, #20]
 800a16c:	697b      	ldr	r3, [r7, #20]
 800a16e:	2b07      	cmp	r3, #7
 800a170:	d9d4      	bls.n	800a11c <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	693a      	ldr	r2, [r7, #16]
 800a176:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a17c:	f1a3 0220 	sub.w	r2, r3, #32
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 800a184:	bf00      	nop
 800a186:	3718      	adds	r7, #24
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}

0800a18c <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b086      	sub	sp, #24
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	69db      	ldr	r3, [r3, #28]
 800a198:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6a1b      	ldr	r3, [r3, #32]
 800a19e:	2b1f      	cmp	r3, #31
 800a1a0:	d93a      	bls.n	800a218 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	617b      	str	r3, [r7, #20]
 800a1a6:	e02b      	b.n	800a200 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800a1a8:	693b      	ldr	r3, [r7, #16]
 800a1aa:	781b      	ldrb	r3, [r3, #0]
 800a1ac:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a1ae:	693b      	ldr	r3, [r7, #16]
 800a1b0:	3301      	adds	r3, #1
 800a1b2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800a1b4:	693b      	ldr	r3, [r7, #16]
 800a1b6:	781b      	ldrb	r3, [r3, #0]
 800a1b8:	021a      	lsls	r2, r3, #8
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	4313      	orrs	r3, r2
 800a1be:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a1c0:	693b      	ldr	r3, [r7, #16]
 800a1c2:	3301      	adds	r3, #1
 800a1c4:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800a1c6:	693b      	ldr	r3, [r7, #16]
 800a1c8:	781b      	ldrb	r3, [r3, #0]
 800a1ca:	041a      	lsls	r2, r3, #16
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	4313      	orrs	r3, r2
 800a1d0:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a1d2:	693b      	ldr	r3, [r7, #16]
 800a1d4:	3301      	adds	r3, #1
 800a1d6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800a1d8:	693b      	ldr	r3, [r7, #16]
 800a1da:	781b      	ldrb	r3, [r3, #0]
 800a1dc:	061a      	lsls	r2, r3, #24
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	4313      	orrs	r3, r2
 800a1e2:	60fb      	str	r3, [r7, #12]
      tmp++;
 800a1e4:	693b      	ldr	r3, [r7, #16]
 800a1e6:	3301      	adds	r3, #1
 800a1e8:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f107 020c 	add.w	r2, r7, #12
 800a1f2:	4611      	mov	r1, r2
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	f004 f856 	bl	800e2a6 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800a1fa:	697b      	ldr	r3, [r7, #20]
 800a1fc:	3301      	adds	r3, #1
 800a1fe:	617b      	str	r3, [r7, #20]
 800a200:	697b      	ldr	r3, [r7, #20]
 800a202:	2b07      	cmp	r3, #7
 800a204:	d9d0      	bls.n	800a1a8 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	693a      	ldr	r2, [r7, #16]
 800a20a:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6a1b      	ldr	r3, [r3, #32]
 800a210:	f1a3 0220 	sub.w	r2, r3, #32
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	621a      	str	r2, [r3, #32]
  }
}
 800a218:	bf00      	nop
 800a21a:	3718      	adds	r7, #24
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}

0800a220 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800a220:	b480      	push	{r7}
 800a222:	b083      	sub	sp, #12
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800a228:	bf00      	nop
 800a22a:	370c      	adds	r7, #12
 800a22c:	46bd      	mov	sp, r7
 800a22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a232:	4770      	bx	lr

0800a234 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800a234:	b480      	push	{r7}
 800a236:	b083      	sub	sp, #12
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800a23c:	bf00      	nop
 800a23e:	370c      	adds	r7, #12
 800a240:	46bd      	mov	sp, r7
 800a242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a246:	4770      	bx	lr

0800a248 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800a248:	b480      	push	{r7}
 800a24a:	b083      	sub	sp, #12
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800a250:	bf00      	nop
 800a252:	370c      	adds	r7, #12
 800a254:	46bd      	mov	sp, r7
 800a256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25a:	4770      	bx	lr

0800a25c <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800a25c:	b480      	push	{r7}
 800a25e:	b083      	sub	sp, #12
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800a264:	bf00      	nop
 800a266:	370c      	adds	r7, #12
 800a268:	46bd      	mov	sp, r7
 800a26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26e:	4770      	bx	lr

0800a270 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b082      	sub	sp, #8
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d101      	bne.n	800a282 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a27e:	2301      	movs	r3, #1
 800a280:	e049      	b.n	800a316 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a288:	b2db      	uxtb	r3, r3
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d106      	bne.n	800a29c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2200      	movs	r2, #0
 800a292:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	f000 f841 	bl	800a31e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2202      	movs	r2, #2
 800a2a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681a      	ldr	r2, [r3, #0]
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	3304      	adds	r3, #4
 800a2ac:	4619      	mov	r1, r3
 800a2ae:	4610      	mov	r0, r2
 800a2b0:	f000 fad0 	bl	800a854 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2201      	movs	r2, #1
 800a2b8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2201      	movs	r2, #1
 800a2c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2201      	movs	r2, #1
 800a2c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2201      	movs	r2, #1
 800a2d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2201      	movs	r2, #1
 800a2d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2201      	movs	r2, #1
 800a2e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2201      	movs	r2, #1
 800a2e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2201      	movs	r2, #1
 800a2f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2201      	movs	r2, #1
 800a2f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2201      	movs	r2, #1
 800a300:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2201      	movs	r2, #1
 800a308:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2201      	movs	r2, #1
 800a310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a314:	2300      	movs	r3, #0
}
 800a316:	4618      	mov	r0, r3
 800a318:	3708      	adds	r7, #8
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bd80      	pop	{r7, pc}

0800a31e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800a31e:	b480      	push	{r7}
 800a320:	b083      	sub	sp, #12
 800a322:	af00      	add	r7, sp, #0
 800a324:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a326:	bf00      	nop
 800a328:	370c      	adds	r7, #12
 800a32a:	46bd      	mov	sp, r7
 800a32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a330:	4770      	bx	lr
	...

0800a334 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a334:	b480      	push	{r7}
 800a336:	b085      	sub	sp, #20
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a342:	b2db      	uxtb	r3, r3
 800a344:	2b01      	cmp	r3, #1
 800a346:	d001      	beq.n	800a34c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a348:	2301      	movs	r3, #1
 800a34a:	e054      	b.n	800a3f6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2202      	movs	r2, #2
 800a350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	68da      	ldr	r2, [r3, #12]
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	f042 0201 	orr.w	r2, r2, #1
 800a362:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	4a26      	ldr	r2, [pc, #152]	@ (800a404 <HAL_TIM_Base_Start_IT+0xd0>)
 800a36a:	4293      	cmp	r3, r2
 800a36c:	d022      	beq.n	800a3b4 <HAL_TIM_Base_Start_IT+0x80>
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a376:	d01d      	beq.n	800a3b4 <HAL_TIM_Base_Start_IT+0x80>
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	4a22      	ldr	r2, [pc, #136]	@ (800a408 <HAL_TIM_Base_Start_IT+0xd4>)
 800a37e:	4293      	cmp	r3, r2
 800a380:	d018      	beq.n	800a3b4 <HAL_TIM_Base_Start_IT+0x80>
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	4a21      	ldr	r2, [pc, #132]	@ (800a40c <HAL_TIM_Base_Start_IT+0xd8>)
 800a388:	4293      	cmp	r3, r2
 800a38a:	d013      	beq.n	800a3b4 <HAL_TIM_Base_Start_IT+0x80>
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	4a1f      	ldr	r2, [pc, #124]	@ (800a410 <HAL_TIM_Base_Start_IT+0xdc>)
 800a392:	4293      	cmp	r3, r2
 800a394:	d00e      	beq.n	800a3b4 <HAL_TIM_Base_Start_IT+0x80>
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	4a1e      	ldr	r2, [pc, #120]	@ (800a414 <HAL_TIM_Base_Start_IT+0xe0>)
 800a39c:	4293      	cmp	r3, r2
 800a39e:	d009      	beq.n	800a3b4 <HAL_TIM_Base_Start_IT+0x80>
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	4a1c      	ldr	r2, [pc, #112]	@ (800a418 <HAL_TIM_Base_Start_IT+0xe4>)
 800a3a6:	4293      	cmp	r3, r2
 800a3a8:	d004      	beq.n	800a3b4 <HAL_TIM_Base_Start_IT+0x80>
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	4a1b      	ldr	r2, [pc, #108]	@ (800a41c <HAL_TIM_Base_Start_IT+0xe8>)
 800a3b0:	4293      	cmp	r3, r2
 800a3b2:	d115      	bne.n	800a3e0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	689a      	ldr	r2, [r3, #8]
 800a3ba:	4b19      	ldr	r3, [pc, #100]	@ (800a420 <HAL_TIM_Base_Start_IT+0xec>)
 800a3bc:	4013      	ands	r3, r2
 800a3be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	2b06      	cmp	r3, #6
 800a3c4:	d015      	beq.n	800a3f2 <HAL_TIM_Base_Start_IT+0xbe>
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a3cc:	d011      	beq.n	800a3f2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	681a      	ldr	r2, [r3, #0]
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	f042 0201 	orr.w	r2, r2, #1
 800a3dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3de:	e008      	b.n	800a3f2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	681a      	ldr	r2, [r3, #0]
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	f042 0201 	orr.w	r2, r2, #1
 800a3ee:	601a      	str	r2, [r3, #0]
 800a3f0:	e000      	b.n	800a3f4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a3f4:	2300      	movs	r3, #0
}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	3714      	adds	r7, #20
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a400:	4770      	bx	lr
 800a402:	bf00      	nop
 800a404:	40010000 	.word	0x40010000
 800a408:	40000400 	.word	0x40000400
 800a40c:	40000800 	.word	0x40000800
 800a410:	40000c00 	.word	0x40000c00
 800a414:	40010400 	.word	0x40010400
 800a418:	40001800 	.word	0x40001800
 800a41c:	40014000 	.word	0x40014000
 800a420:	00010007 	.word	0x00010007

0800a424 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b082      	sub	sp, #8
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d101      	bne.n	800a436 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800a432:	2301      	movs	r3, #1
 800a434:	e049      	b.n	800a4ca <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a43c:	b2db      	uxtb	r3, r3
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d106      	bne.n	800a450 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2200      	movs	r2, #0
 800a446:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	f7f7 f82a 	bl	80014a4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2202      	movs	r2, #2
 800a454:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681a      	ldr	r2, [r3, #0]
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	3304      	adds	r3, #4
 800a460:	4619      	mov	r1, r3
 800a462:	4610      	mov	r0, r2
 800a464:	f000 f9f6 	bl	800a854 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2201      	movs	r2, #1
 800a46c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2201      	movs	r2, #1
 800a474:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2201      	movs	r2, #1
 800a47c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2201      	movs	r2, #1
 800a484:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2201      	movs	r2, #1
 800a48c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2201      	movs	r2, #1
 800a494:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2201      	movs	r2, #1
 800a49c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2201      	movs	r2, #1
 800a4a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2201      	movs	r2, #1
 800a4ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2201      	movs	r2, #1
 800a4b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2201      	movs	r2, #1
 800a4bc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2201      	movs	r2, #1
 800a4c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a4c8:	2300      	movs	r3, #0
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	3708      	adds	r7, #8
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}

0800a4d2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a4d2:	b580      	push	{r7, lr}
 800a4d4:	b082      	sub	sp, #8
 800a4d6:	af00      	add	r7, sp, #0
 800a4d8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	691b      	ldr	r3, [r3, #16]
 800a4e0:	f003 0302 	and.w	r3, r3, #2
 800a4e4:	2b02      	cmp	r3, #2
 800a4e6:	d122      	bne.n	800a52e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	68db      	ldr	r3, [r3, #12]
 800a4ee:	f003 0302 	and.w	r3, r3, #2
 800a4f2:	2b02      	cmp	r3, #2
 800a4f4:	d11b      	bne.n	800a52e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f06f 0202 	mvn.w	r2, #2
 800a4fe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2201      	movs	r2, #1
 800a504:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	699b      	ldr	r3, [r3, #24]
 800a50c:	f003 0303 	and.w	r3, r3, #3
 800a510:	2b00      	cmp	r3, #0
 800a512:	d003      	beq.n	800a51c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a514:	6878      	ldr	r0, [r7, #4]
 800a516:	f000 f97f 	bl	800a818 <HAL_TIM_IC_CaptureCallback>
 800a51a:	e005      	b.n	800a528 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	f000 f971 	bl	800a804 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f000 f982 	bl	800a82c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2200      	movs	r2, #0
 800a52c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	691b      	ldr	r3, [r3, #16]
 800a534:	f003 0304 	and.w	r3, r3, #4
 800a538:	2b04      	cmp	r3, #4
 800a53a:	d122      	bne.n	800a582 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	68db      	ldr	r3, [r3, #12]
 800a542:	f003 0304 	and.w	r3, r3, #4
 800a546:	2b04      	cmp	r3, #4
 800a548:	d11b      	bne.n	800a582 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	f06f 0204 	mvn.w	r2, #4
 800a552:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2202      	movs	r2, #2
 800a558:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	699b      	ldr	r3, [r3, #24]
 800a560:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a564:	2b00      	cmp	r3, #0
 800a566:	d003      	beq.n	800a570 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a568:	6878      	ldr	r0, [r7, #4]
 800a56a:	f000 f955 	bl	800a818 <HAL_TIM_IC_CaptureCallback>
 800a56e:	e005      	b.n	800a57c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a570:	6878      	ldr	r0, [r7, #4]
 800a572:	f000 f947 	bl	800a804 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	f000 f958 	bl	800a82c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2200      	movs	r2, #0
 800a580:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	691b      	ldr	r3, [r3, #16]
 800a588:	f003 0308 	and.w	r3, r3, #8
 800a58c:	2b08      	cmp	r3, #8
 800a58e:	d122      	bne.n	800a5d6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	68db      	ldr	r3, [r3, #12]
 800a596:	f003 0308 	and.w	r3, r3, #8
 800a59a:	2b08      	cmp	r3, #8
 800a59c:	d11b      	bne.n	800a5d6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f06f 0208 	mvn.w	r2, #8
 800a5a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2204      	movs	r2, #4
 800a5ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	69db      	ldr	r3, [r3, #28]
 800a5b4:	f003 0303 	and.w	r3, r3, #3
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d003      	beq.n	800a5c4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a5bc:	6878      	ldr	r0, [r7, #4]
 800a5be:	f000 f92b 	bl	800a818 <HAL_TIM_IC_CaptureCallback>
 800a5c2:	e005      	b.n	800a5d0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	f000 f91d 	bl	800a804 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f000 f92e 	bl	800a82c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	691b      	ldr	r3, [r3, #16]
 800a5dc:	f003 0310 	and.w	r3, r3, #16
 800a5e0:	2b10      	cmp	r3, #16
 800a5e2:	d122      	bne.n	800a62a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	68db      	ldr	r3, [r3, #12]
 800a5ea:	f003 0310 	and.w	r3, r3, #16
 800a5ee:	2b10      	cmp	r3, #16
 800a5f0:	d11b      	bne.n	800a62a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f06f 0210 	mvn.w	r2, #16
 800a5fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2208      	movs	r2, #8
 800a600:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	69db      	ldr	r3, [r3, #28]
 800a608:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d003      	beq.n	800a618 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	f000 f901 	bl	800a818 <HAL_TIM_IC_CaptureCallback>
 800a616:	e005      	b.n	800a624 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a618:	6878      	ldr	r0, [r7, #4]
 800a61a:	f000 f8f3 	bl	800a804 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	f000 f904 	bl	800a82c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2200      	movs	r2, #0
 800a628:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	691b      	ldr	r3, [r3, #16]
 800a630:	f003 0301 	and.w	r3, r3, #1
 800a634:	2b01      	cmp	r3, #1
 800a636:	d10e      	bne.n	800a656 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	68db      	ldr	r3, [r3, #12]
 800a63e:	f003 0301 	and.w	r3, r3, #1
 800a642:	2b01      	cmp	r3, #1
 800a644:	d107      	bne.n	800a656 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	f06f 0201 	mvn.w	r2, #1
 800a64e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a650:	6878      	ldr	r0, [r7, #4]
 800a652:	f7f6 fd4b 	bl	80010ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	691b      	ldr	r3, [r3, #16]
 800a65c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a660:	2b80      	cmp	r3, #128	@ 0x80
 800a662:	d10e      	bne.n	800a682 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	68db      	ldr	r3, [r3, #12]
 800a66a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a66e:	2b80      	cmp	r3, #128	@ 0x80
 800a670:	d107      	bne.n	800a682 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800a67a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	f000 fcf1 	bl	800b064 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	691b      	ldr	r3, [r3, #16]
 800a688:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a68c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a690:	d10e      	bne.n	800a6b0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	68db      	ldr	r3, [r3, #12]
 800a698:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a69c:	2b80      	cmp	r3, #128	@ 0x80
 800a69e:	d107      	bne.n	800a6b0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a6a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	f000 fce4 	bl	800b078 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	691b      	ldr	r3, [r3, #16]
 800a6b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a6ba:	2b40      	cmp	r3, #64	@ 0x40
 800a6bc:	d10e      	bne.n	800a6dc <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	68db      	ldr	r3, [r3, #12]
 800a6c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a6c8:	2b40      	cmp	r3, #64	@ 0x40
 800a6ca:	d107      	bne.n	800a6dc <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a6d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a6d6:	6878      	ldr	r0, [r7, #4]
 800a6d8:	f000 f8b2 	bl	800a840 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	691b      	ldr	r3, [r3, #16]
 800a6e2:	f003 0320 	and.w	r3, r3, #32
 800a6e6:	2b20      	cmp	r3, #32
 800a6e8:	d10e      	bne.n	800a708 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	68db      	ldr	r3, [r3, #12]
 800a6f0:	f003 0320 	and.w	r3, r3, #32
 800a6f4:	2b20      	cmp	r3, #32
 800a6f6:	d107      	bne.n	800a708 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	f06f 0220 	mvn.w	r2, #32
 800a700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f000 fca4 	bl	800b050 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a708:	bf00      	nop
 800a70a:	3708      	adds	r7, #8
 800a70c:	46bd      	mov	sp, r7
 800a70e:	bd80      	pop	{r7, pc}

0800a710 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b086      	sub	sp, #24
 800a714:	af00      	add	r7, sp, #0
 800a716:	60f8      	str	r0, [r7, #12]
 800a718:	60b9      	str	r1, [r7, #8]
 800a71a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a71c:	2300      	movs	r3, #0
 800a71e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a726:	2b01      	cmp	r3, #1
 800a728:	d101      	bne.n	800a72e <HAL_TIM_OC_ConfigChannel+0x1e>
 800a72a:	2302      	movs	r3, #2
 800a72c:	e066      	b.n	800a7fc <HAL_TIM_OC_ConfigChannel+0xec>
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	2201      	movs	r2, #1
 800a732:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2b14      	cmp	r3, #20
 800a73a:	d857      	bhi.n	800a7ec <HAL_TIM_OC_ConfigChannel+0xdc>
 800a73c:	a201      	add	r2, pc, #4	@ (adr r2, 800a744 <HAL_TIM_OC_ConfigChannel+0x34>)
 800a73e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a742:	bf00      	nop
 800a744:	0800a799 	.word	0x0800a799
 800a748:	0800a7ed 	.word	0x0800a7ed
 800a74c:	0800a7ed 	.word	0x0800a7ed
 800a750:	0800a7ed 	.word	0x0800a7ed
 800a754:	0800a7a7 	.word	0x0800a7a7
 800a758:	0800a7ed 	.word	0x0800a7ed
 800a75c:	0800a7ed 	.word	0x0800a7ed
 800a760:	0800a7ed 	.word	0x0800a7ed
 800a764:	0800a7b5 	.word	0x0800a7b5
 800a768:	0800a7ed 	.word	0x0800a7ed
 800a76c:	0800a7ed 	.word	0x0800a7ed
 800a770:	0800a7ed 	.word	0x0800a7ed
 800a774:	0800a7c3 	.word	0x0800a7c3
 800a778:	0800a7ed 	.word	0x0800a7ed
 800a77c:	0800a7ed 	.word	0x0800a7ed
 800a780:	0800a7ed 	.word	0x0800a7ed
 800a784:	0800a7d1 	.word	0x0800a7d1
 800a788:	0800a7ed 	.word	0x0800a7ed
 800a78c:	0800a7ed 	.word	0x0800a7ed
 800a790:	0800a7ed 	.word	0x0800a7ed
 800a794:	0800a7df 	.word	0x0800a7df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	68b9      	ldr	r1, [r7, #8]
 800a79e:	4618      	mov	r0, r3
 800a7a0:	f000 f8f2 	bl	800a988 <TIM_OC1_SetConfig>
      break;
 800a7a4:	e025      	b.n	800a7f2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	68b9      	ldr	r1, [r7, #8]
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	f000 f97b 	bl	800aaa8 <TIM_OC2_SetConfig>
      break;
 800a7b2:	e01e      	b.n	800a7f2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	68b9      	ldr	r1, [r7, #8]
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	f000 f9fe 	bl	800abbc <TIM_OC3_SetConfig>
      break;
 800a7c0:	e017      	b.n	800a7f2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	68b9      	ldr	r1, [r7, #8]
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	f000 fa7f 	bl	800accc <TIM_OC4_SetConfig>
      break;
 800a7ce:	e010      	b.n	800a7f2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	68b9      	ldr	r1, [r7, #8]
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	f000 fae2 	bl	800ada0 <TIM_OC5_SetConfig>
      break;
 800a7dc:	e009      	b.n	800a7f2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	68b9      	ldr	r1, [r7, #8]
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	f000 fb3f 	bl	800ae68 <TIM_OC6_SetConfig>
      break;
 800a7ea:	e002      	b.n	800a7f2 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800a7ec:	2301      	movs	r3, #1
 800a7ee:	75fb      	strb	r3, [r7, #23]
      break;
 800a7f0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a7fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	3718      	adds	r7, #24
 800a800:	46bd      	mov	sp, r7
 800a802:	bd80      	pop	{r7, pc}

0800a804 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a804:	b480      	push	{r7}
 800a806:	b083      	sub	sp, #12
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a80c:	bf00      	nop
 800a80e:	370c      	adds	r7, #12
 800a810:	46bd      	mov	sp, r7
 800a812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a816:	4770      	bx	lr

0800a818 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a818:	b480      	push	{r7}
 800a81a:	b083      	sub	sp, #12
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a820:	bf00      	nop
 800a822:	370c      	adds	r7, #12
 800a824:	46bd      	mov	sp, r7
 800a826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82a:	4770      	bx	lr

0800a82c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a82c:	b480      	push	{r7}
 800a82e:	b083      	sub	sp, #12
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a834:	bf00      	nop
 800a836:	370c      	adds	r7, #12
 800a838:	46bd      	mov	sp, r7
 800a83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83e:	4770      	bx	lr

0800a840 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a840:	b480      	push	{r7}
 800a842:	b083      	sub	sp, #12
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a848:	bf00      	nop
 800a84a:	370c      	adds	r7, #12
 800a84c:	46bd      	mov	sp, r7
 800a84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a852:	4770      	bx	lr

0800a854 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a854:	b480      	push	{r7}
 800a856:	b085      	sub	sp, #20
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
 800a85c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	4a40      	ldr	r2, [pc, #256]	@ (800a968 <TIM_Base_SetConfig+0x114>)
 800a868:	4293      	cmp	r3, r2
 800a86a:	d013      	beq.n	800a894 <TIM_Base_SetConfig+0x40>
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a872:	d00f      	beq.n	800a894 <TIM_Base_SetConfig+0x40>
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	4a3d      	ldr	r2, [pc, #244]	@ (800a96c <TIM_Base_SetConfig+0x118>)
 800a878:	4293      	cmp	r3, r2
 800a87a:	d00b      	beq.n	800a894 <TIM_Base_SetConfig+0x40>
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	4a3c      	ldr	r2, [pc, #240]	@ (800a970 <TIM_Base_SetConfig+0x11c>)
 800a880:	4293      	cmp	r3, r2
 800a882:	d007      	beq.n	800a894 <TIM_Base_SetConfig+0x40>
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	4a3b      	ldr	r2, [pc, #236]	@ (800a974 <TIM_Base_SetConfig+0x120>)
 800a888:	4293      	cmp	r3, r2
 800a88a:	d003      	beq.n	800a894 <TIM_Base_SetConfig+0x40>
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	4a3a      	ldr	r2, [pc, #232]	@ (800a978 <TIM_Base_SetConfig+0x124>)
 800a890:	4293      	cmp	r3, r2
 800a892:	d108      	bne.n	800a8a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a89a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	685b      	ldr	r3, [r3, #4]
 800a8a0:	68fa      	ldr	r2, [r7, #12]
 800a8a2:	4313      	orrs	r3, r2
 800a8a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	4a2f      	ldr	r2, [pc, #188]	@ (800a968 <TIM_Base_SetConfig+0x114>)
 800a8aa:	4293      	cmp	r3, r2
 800a8ac:	d01f      	beq.n	800a8ee <TIM_Base_SetConfig+0x9a>
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a8b4:	d01b      	beq.n	800a8ee <TIM_Base_SetConfig+0x9a>
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	4a2c      	ldr	r2, [pc, #176]	@ (800a96c <TIM_Base_SetConfig+0x118>)
 800a8ba:	4293      	cmp	r3, r2
 800a8bc:	d017      	beq.n	800a8ee <TIM_Base_SetConfig+0x9a>
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	4a2b      	ldr	r2, [pc, #172]	@ (800a970 <TIM_Base_SetConfig+0x11c>)
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	d013      	beq.n	800a8ee <TIM_Base_SetConfig+0x9a>
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	4a2a      	ldr	r2, [pc, #168]	@ (800a974 <TIM_Base_SetConfig+0x120>)
 800a8ca:	4293      	cmp	r3, r2
 800a8cc:	d00f      	beq.n	800a8ee <TIM_Base_SetConfig+0x9a>
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	4a29      	ldr	r2, [pc, #164]	@ (800a978 <TIM_Base_SetConfig+0x124>)
 800a8d2:	4293      	cmp	r3, r2
 800a8d4:	d00b      	beq.n	800a8ee <TIM_Base_SetConfig+0x9a>
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	4a28      	ldr	r2, [pc, #160]	@ (800a97c <TIM_Base_SetConfig+0x128>)
 800a8da:	4293      	cmp	r3, r2
 800a8dc:	d007      	beq.n	800a8ee <TIM_Base_SetConfig+0x9a>
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	4a27      	ldr	r2, [pc, #156]	@ (800a980 <TIM_Base_SetConfig+0x12c>)
 800a8e2:	4293      	cmp	r3, r2
 800a8e4:	d003      	beq.n	800a8ee <TIM_Base_SetConfig+0x9a>
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	4a26      	ldr	r2, [pc, #152]	@ (800a984 <TIM_Base_SetConfig+0x130>)
 800a8ea:	4293      	cmp	r3, r2
 800a8ec:	d108      	bne.n	800a900 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a8f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	68db      	ldr	r3, [r3, #12]
 800a8fa:	68fa      	ldr	r2, [r7, #12]
 800a8fc:	4313      	orrs	r3, r2
 800a8fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	695b      	ldr	r3, [r3, #20]
 800a90a:	4313      	orrs	r3, r2
 800a90c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	68fa      	ldr	r2, [r7, #12]
 800a912:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	689a      	ldr	r2, [r3, #8]
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	681a      	ldr	r2, [r3, #0]
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	4a10      	ldr	r2, [pc, #64]	@ (800a968 <TIM_Base_SetConfig+0x114>)
 800a928:	4293      	cmp	r3, r2
 800a92a:	d00f      	beq.n	800a94c <TIM_Base_SetConfig+0xf8>
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	4a12      	ldr	r2, [pc, #72]	@ (800a978 <TIM_Base_SetConfig+0x124>)
 800a930:	4293      	cmp	r3, r2
 800a932:	d00b      	beq.n	800a94c <TIM_Base_SetConfig+0xf8>
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	4a11      	ldr	r2, [pc, #68]	@ (800a97c <TIM_Base_SetConfig+0x128>)
 800a938:	4293      	cmp	r3, r2
 800a93a:	d007      	beq.n	800a94c <TIM_Base_SetConfig+0xf8>
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	4a10      	ldr	r2, [pc, #64]	@ (800a980 <TIM_Base_SetConfig+0x12c>)
 800a940:	4293      	cmp	r3, r2
 800a942:	d003      	beq.n	800a94c <TIM_Base_SetConfig+0xf8>
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	4a0f      	ldr	r2, [pc, #60]	@ (800a984 <TIM_Base_SetConfig+0x130>)
 800a948:	4293      	cmp	r3, r2
 800a94a:	d103      	bne.n	800a954 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	691a      	ldr	r2, [r3, #16]
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2201      	movs	r2, #1
 800a958:	615a      	str	r2, [r3, #20]
}
 800a95a:	bf00      	nop
 800a95c:	3714      	adds	r7, #20
 800a95e:	46bd      	mov	sp, r7
 800a960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a964:	4770      	bx	lr
 800a966:	bf00      	nop
 800a968:	40010000 	.word	0x40010000
 800a96c:	40000400 	.word	0x40000400
 800a970:	40000800 	.word	0x40000800
 800a974:	40000c00 	.word	0x40000c00
 800a978:	40010400 	.word	0x40010400
 800a97c:	40014000 	.word	0x40014000
 800a980:	40014400 	.word	0x40014400
 800a984:	40014800 	.word	0x40014800

0800a988 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a988:	b480      	push	{r7}
 800a98a:	b087      	sub	sp, #28
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
 800a990:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6a1b      	ldr	r3, [r3, #32]
 800a996:	f023 0201 	bic.w	r2, r3, #1
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	6a1b      	ldr	r3, [r3, #32]
 800a9a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	685b      	ldr	r3, [r3, #4]
 800a9a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	699b      	ldr	r3, [r3, #24]
 800a9ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a9b0:	68fa      	ldr	r2, [r7, #12]
 800a9b2:	4b37      	ldr	r3, [pc, #220]	@ (800aa90 <TIM_OC1_SetConfig+0x108>)
 800a9b4:	4013      	ands	r3, r2
 800a9b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	f023 0303 	bic.w	r3, r3, #3
 800a9be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	68fa      	ldr	r2, [r7, #12]
 800a9c6:	4313      	orrs	r3, r2
 800a9c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a9ca:	697b      	ldr	r3, [r7, #20]
 800a9cc:	f023 0302 	bic.w	r3, r3, #2
 800a9d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a9d2:	683b      	ldr	r3, [r7, #0]
 800a9d4:	689b      	ldr	r3, [r3, #8]
 800a9d6:	697a      	ldr	r2, [r7, #20]
 800a9d8:	4313      	orrs	r3, r2
 800a9da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	4a2d      	ldr	r2, [pc, #180]	@ (800aa94 <TIM_OC1_SetConfig+0x10c>)
 800a9e0:	4293      	cmp	r3, r2
 800a9e2:	d00f      	beq.n	800aa04 <TIM_OC1_SetConfig+0x7c>
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	4a2c      	ldr	r2, [pc, #176]	@ (800aa98 <TIM_OC1_SetConfig+0x110>)
 800a9e8:	4293      	cmp	r3, r2
 800a9ea:	d00b      	beq.n	800aa04 <TIM_OC1_SetConfig+0x7c>
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	4a2b      	ldr	r2, [pc, #172]	@ (800aa9c <TIM_OC1_SetConfig+0x114>)
 800a9f0:	4293      	cmp	r3, r2
 800a9f2:	d007      	beq.n	800aa04 <TIM_OC1_SetConfig+0x7c>
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	4a2a      	ldr	r2, [pc, #168]	@ (800aaa0 <TIM_OC1_SetConfig+0x118>)
 800a9f8:	4293      	cmp	r3, r2
 800a9fa:	d003      	beq.n	800aa04 <TIM_OC1_SetConfig+0x7c>
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	4a29      	ldr	r2, [pc, #164]	@ (800aaa4 <TIM_OC1_SetConfig+0x11c>)
 800aa00:	4293      	cmp	r3, r2
 800aa02:	d10c      	bne.n	800aa1e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800aa04:	697b      	ldr	r3, [r7, #20]
 800aa06:	f023 0308 	bic.w	r3, r3, #8
 800aa0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	68db      	ldr	r3, [r3, #12]
 800aa10:	697a      	ldr	r2, [r7, #20]
 800aa12:	4313      	orrs	r3, r2
 800aa14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800aa16:	697b      	ldr	r3, [r7, #20]
 800aa18:	f023 0304 	bic.w	r3, r3, #4
 800aa1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	4a1c      	ldr	r2, [pc, #112]	@ (800aa94 <TIM_OC1_SetConfig+0x10c>)
 800aa22:	4293      	cmp	r3, r2
 800aa24:	d00f      	beq.n	800aa46 <TIM_OC1_SetConfig+0xbe>
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	4a1b      	ldr	r2, [pc, #108]	@ (800aa98 <TIM_OC1_SetConfig+0x110>)
 800aa2a:	4293      	cmp	r3, r2
 800aa2c:	d00b      	beq.n	800aa46 <TIM_OC1_SetConfig+0xbe>
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	4a1a      	ldr	r2, [pc, #104]	@ (800aa9c <TIM_OC1_SetConfig+0x114>)
 800aa32:	4293      	cmp	r3, r2
 800aa34:	d007      	beq.n	800aa46 <TIM_OC1_SetConfig+0xbe>
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	4a19      	ldr	r2, [pc, #100]	@ (800aaa0 <TIM_OC1_SetConfig+0x118>)
 800aa3a:	4293      	cmp	r3, r2
 800aa3c:	d003      	beq.n	800aa46 <TIM_OC1_SetConfig+0xbe>
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	4a18      	ldr	r2, [pc, #96]	@ (800aaa4 <TIM_OC1_SetConfig+0x11c>)
 800aa42:	4293      	cmp	r3, r2
 800aa44:	d111      	bne.n	800aa6a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800aa46:	693b      	ldr	r3, [r7, #16]
 800aa48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aa4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800aa4e:	693b      	ldr	r3, [r7, #16]
 800aa50:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800aa54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	695b      	ldr	r3, [r3, #20]
 800aa5a:	693a      	ldr	r2, [r7, #16]
 800aa5c:	4313      	orrs	r3, r2
 800aa5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	699b      	ldr	r3, [r3, #24]
 800aa64:	693a      	ldr	r2, [r7, #16]
 800aa66:	4313      	orrs	r3, r2
 800aa68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	693a      	ldr	r2, [r7, #16]
 800aa6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	68fa      	ldr	r2, [r7, #12]
 800aa74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	685a      	ldr	r2, [r3, #4]
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	697a      	ldr	r2, [r7, #20]
 800aa82:	621a      	str	r2, [r3, #32]
}
 800aa84:	bf00      	nop
 800aa86:	371c      	adds	r7, #28
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8e:	4770      	bx	lr
 800aa90:	fffeff8f 	.word	0xfffeff8f
 800aa94:	40010000 	.word	0x40010000
 800aa98:	40010400 	.word	0x40010400
 800aa9c:	40014000 	.word	0x40014000
 800aaa0:	40014400 	.word	0x40014400
 800aaa4:	40014800 	.word	0x40014800

0800aaa8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aaa8:	b480      	push	{r7}
 800aaaa:	b087      	sub	sp, #28
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
 800aab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	6a1b      	ldr	r3, [r3, #32]
 800aab6:	f023 0210 	bic.w	r2, r3, #16
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	6a1b      	ldr	r3, [r3, #32]
 800aac2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	685b      	ldr	r3, [r3, #4]
 800aac8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	699b      	ldr	r3, [r3, #24]
 800aace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800aad0:	68fa      	ldr	r2, [r7, #12]
 800aad2:	4b34      	ldr	r3, [pc, #208]	@ (800aba4 <TIM_OC2_SetConfig+0xfc>)
 800aad4:	4013      	ands	r3, r2
 800aad6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800aade:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	021b      	lsls	r3, r3, #8
 800aae6:	68fa      	ldr	r2, [r7, #12]
 800aae8:	4313      	orrs	r3, r2
 800aaea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800aaec:	697b      	ldr	r3, [r7, #20]
 800aaee:	f023 0320 	bic.w	r3, r3, #32
 800aaf2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800aaf4:	683b      	ldr	r3, [r7, #0]
 800aaf6:	689b      	ldr	r3, [r3, #8]
 800aaf8:	011b      	lsls	r3, r3, #4
 800aafa:	697a      	ldr	r2, [r7, #20]
 800aafc:	4313      	orrs	r3, r2
 800aafe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	4a29      	ldr	r2, [pc, #164]	@ (800aba8 <TIM_OC2_SetConfig+0x100>)
 800ab04:	4293      	cmp	r3, r2
 800ab06:	d003      	beq.n	800ab10 <TIM_OC2_SetConfig+0x68>
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	4a28      	ldr	r2, [pc, #160]	@ (800abac <TIM_OC2_SetConfig+0x104>)
 800ab0c:	4293      	cmp	r3, r2
 800ab0e:	d10d      	bne.n	800ab2c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ab10:	697b      	ldr	r3, [r7, #20]
 800ab12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ab16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	68db      	ldr	r3, [r3, #12]
 800ab1c:	011b      	lsls	r3, r3, #4
 800ab1e:	697a      	ldr	r2, [r7, #20]
 800ab20:	4313      	orrs	r3, r2
 800ab22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ab24:	697b      	ldr	r3, [r7, #20]
 800ab26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ab2a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	4a1e      	ldr	r2, [pc, #120]	@ (800aba8 <TIM_OC2_SetConfig+0x100>)
 800ab30:	4293      	cmp	r3, r2
 800ab32:	d00f      	beq.n	800ab54 <TIM_OC2_SetConfig+0xac>
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	4a1d      	ldr	r2, [pc, #116]	@ (800abac <TIM_OC2_SetConfig+0x104>)
 800ab38:	4293      	cmp	r3, r2
 800ab3a:	d00b      	beq.n	800ab54 <TIM_OC2_SetConfig+0xac>
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	4a1c      	ldr	r2, [pc, #112]	@ (800abb0 <TIM_OC2_SetConfig+0x108>)
 800ab40:	4293      	cmp	r3, r2
 800ab42:	d007      	beq.n	800ab54 <TIM_OC2_SetConfig+0xac>
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	4a1b      	ldr	r2, [pc, #108]	@ (800abb4 <TIM_OC2_SetConfig+0x10c>)
 800ab48:	4293      	cmp	r3, r2
 800ab4a:	d003      	beq.n	800ab54 <TIM_OC2_SetConfig+0xac>
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	4a1a      	ldr	r2, [pc, #104]	@ (800abb8 <TIM_OC2_SetConfig+0x110>)
 800ab50:	4293      	cmp	r3, r2
 800ab52:	d113      	bne.n	800ab7c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ab5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ab5c:	693b      	ldr	r3, [r7, #16]
 800ab5e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ab62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	695b      	ldr	r3, [r3, #20]
 800ab68:	009b      	lsls	r3, r3, #2
 800ab6a:	693a      	ldr	r2, [r7, #16]
 800ab6c:	4313      	orrs	r3, r2
 800ab6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	699b      	ldr	r3, [r3, #24]
 800ab74:	009b      	lsls	r3, r3, #2
 800ab76:	693a      	ldr	r2, [r7, #16]
 800ab78:	4313      	orrs	r3, r2
 800ab7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	693a      	ldr	r2, [r7, #16]
 800ab80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	68fa      	ldr	r2, [r7, #12]
 800ab86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	685a      	ldr	r2, [r3, #4]
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	697a      	ldr	r2, [r7, #20]
 800ab94:	621a      	str	r2, [r3, #32]
}
 800ab96:	bf00      	nop
 800ab98:	371c      	adds	r7, #28
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba0:	4770      	bx	lr
 800aba2:	bf00      	nop
 800aba4:	feff8fff 	.word	0xfeff8fff
 800aba8:	40010000 	.word	0x40010000
 800abac:	40010400 	.word	0x40010400
 800abb0:	40014000 	.word	0x40014000
 800abb4:	40014400 	.word	0x40014400
 800abb8:	40014800 	.word	0x40014800

0800abbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800abbc:	b480      	push	{r7}
 800abbe:	b087      	sub	sp, #28
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
 800abc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6a1b      	ldr	r3, [r3, #32]
 800abca:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	6a1b      	ldr	r3, [r3, #32]
 800abd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	685b      	ldr	r3, [r3, #4]
 800abdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	69db      	ldr	r3, [r3, #28]
 800abe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800abe4:	68fa      	ldr	r2, [r7, #12]
 800abe6:	4b33      	ldr	r3, [pc, #204]	@ (800acb4 <TIM_OC3_SetConfig+0xf8>)
 800abe8:	4013      	ands	r3, r2
 800abea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	f023 0303 	bic.w	r3, r3, #3
 800abf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	68fa      	ldr	r2, [r7, #12]
 800abfa:	4313      	orrs	r3, r2
 800abfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800abfe:	697b      	ldr	r3, [r7, #20]
 800ac00:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ac04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	689b      	ldr	r3, [r3, #8]
 800ac0a:	021b      	lsls	r3, r3, #8
 800ac0c:	697a      	ldr	r2, [r7, #20]
 800ac0e:	4313      	orrs	r3, r2
 800ac10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	4a28      	ldr	r2, [pc, #160]	@ (800acb8 <TIM_OC3_SetConfig+0xfc>)
 800ac16:	4293      	cmp	r3, r2
 800ac18:	d003      	beq.n	800ac22 <TIM_OC3_SetConfig+0x66>
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	4a27      	ldr	r2, [pc, #156]	@ (800acbc <TIM_OC3_SetConfig+0x100>)
 800ac1e:	4293      	cmp	r3, r2
 800ac20:	d10d      	bne.n	800ac3e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ac22:	697b      	ldr	r3, [r7, #20]
 800ac24:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ac28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	68db      	ldr	r3, [r3, #12]
 800ac2e:	021b      	lsls	r3, r3, #8
 800ac30:	697a      	ldr	r2, [r7, #20]
 800ac32:	4313      	orrs	r3, r2
 800ac34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ac3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	4a1d      	ldr	r2, [pc, #116]	@ (800acb8 <TIM_OC3_SetConfig+0xfc>)
 800ac42:	4293      	cmp	r3, r2
 800ac44:	d00f      	beq.n	800ac66 <TIM_OC3_SetConfig+0xaa>
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	4a1c      	ldr	r2, [pc, #112]	@ (800acbc <TIM_OC3_SetConfig+0x100>)
 800ac4a:	4293      	cmp	r3, r2
 800ac4c:	d00b      	beq.n	800ac66 <TIM_OC3_SetConfig+0xaa>
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	4a1b      	ldr	r2, [pc, #108]	@ (800acc0 <TIM_OC3_SetConfig+0x104>)
 800ac52:	4293      	cmp	r3, r2
 800ac54:	d007      	beq.n	800ac66 <TIM_OC3_SetConfig+0xaa>
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	4a1a      	ldr	r2, [pc, #104]	@ (800acc4 <TIM_OC3_SetConfig+0x108>)
 800ac5a:	4293      	cmp	r3, r2
 800ac5c:	d003      	beq.n	800ac66 <TIM_OC3_SetConfig+0xaa>
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	4a19      	ldr	r2, [pc, #100]	@ (800acc8 <TIM_OC3_SetConfig+0x10c>)
 800ac62:	4293      	cmp	r3, r2
 800ac64:	d113      	bne.n	800ac8e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ac66:	693b      	ldr	r3, [r7, #16]
 800ac68:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ac6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ac6e:	693b      	ldr	r3, [r7, #16]
 800ac70:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ac74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	695b      	ldr	r3, [r3, #20]
 800ac7a:	011b      	lsls	r3, r3, #4
 800ac7c:	693a      	ldr	r2, [r7, #16]
 800ac7e:	4313      	orrs	r3, r2
 800ac80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	699b      	ldr	r3, [r3, #24]
 800ac86:	011b      	lsls	r3, r3, #4
 800ac88:	693a      	ldr	r2, [r7, #16]
 800ac8a:	4313      	orrs	r3, r2
 800ac8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	693a      	ldr	r2, [r7, #16]
 800ac92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	68fa      	ldr	r2, [r7, #12]
 800ac98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	685a      	ldr	r2, [r3, #4]
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	697a      	ldr	r2, [r7, #20]
 800aca6:	621a      	str	r2, [r3, #32]
}
 800aca8:	bf00      	nop
 800acaa:	371c      	adds	r7, #28
 800acac:	46bd      	mov	sp, r7
 800acae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb2:	4770      	bx	lr
 800acb4:	fffeff8f 	.word	0xfffeff8f
 800acb8:	40010000 	.word	0x40010000
 800acbc:	40010400 	.word	0x40010400
 800acc0:	40014000 	.word	0x40014000
 800acc4:	40014400 	.word	0x40014400
 800acc8:	40014800 	.word	0x40014800

0800accc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800accc:	b480      	push	{r7}
 800acce:	b087      	sub	sp, #28
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
 800acd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6a1b      	ldr	r3, [r3, #32]
 800acda:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6a1b      	ldr	r3, [r3, #32]
 800ace6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	685b      	ldr	r3, [r3, #4]
 800acec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	69db      	ldr	r3, [r3, #28]
 800acf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800acf4:	68fa      	ldr	r2, [r7, #12]
 800acf6:	4b24      	ldr	r3, [pc, #144]	@ (800ad88 <TIM_OC4_SetConfig+0xbc>)
 800acf8:	4013      	ands	r3, r2
 800acfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ad02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	021b      	lsls	r3, r3, #8
 800ad0a:	68fa      	ldr	r2, [r7, #12]
 800ad0c:	4313      	orrs	r3, r2
 800ad0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ad10:	693b      	ldr	r3, [r7, #16]
 800ad12:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ad16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ad18:	683b      	ldr	r3, [r7, #0]
 800ad1a:	689b      	ldr	r3, [r3, #8]
 800ad1c:	031b      	lsls	r3, r3, #12
 800ad1e:	693a      	ldr	r2, [r7, #16]
 800ad20:	4313      	orrs	r3, r2
 800ad22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	4a19      	ldr	r2, [pc, #100]	@ (800ad8c <TIM_OC4_SetConfig+0xc0>)
 800ad28:	4293      	cmp	r3, r2
 800ad2a:	d00f      	beq.n	800ad4c <TIM_OC4_SetConfig+0x80>
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	4a18      	ldr	r2, [pc, #96]	@ (800ad90 <TIM_OC4_SetConfig+0xc4>)
 800ad30:	4293      	cmp	r3, r2
 800ad32:	d00b      	beq.n	800ad4c <TIM_OC4_SetConfig+0x80>
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	4a17      	ldr	r2, [pc, #92]	@ (800ad94 <TIM_OC4_SetConfig+0xc8>)
 800ad38:	4293      	cmp	r3, r2
 800ad3a:	d007      	beq.n	800ad4c <TIM_OC4_SetConfig+0x80>
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	4a16      	ldr	r2, [pc, #88]	@ (800ad98 <TIM_OC4_SetConfig+0xcc>)
 800ad40:	4293      	cmp	r3, r2
 800ad42:	d003      	beq.n	800ad4c <TIM_OC4_SetConfig+0x80>
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	4a15      	ldr	r2, [pc, #84]	@ (800ad9c <TIM_OC4_SetConfig+0xd0>)
 800ad48:	4293      	cmp	r3, r2
 800ad4a:	d109      	bne.n	800ad60 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ad4c:	697b      	ldr	r3, [r7, #20]
 800ad4e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ad52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	695b      	ldr	r3, [r3, #20]
 800ad58:	019b      	lsls	r3, r3, #6
 800ad5a:	697a      	ldr	r2, [r7, #20]
 800ad5c:	4313      	orrs	r3, r2
 800ad5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	697a      	ldr	r2, [r7, #20]
 800ad64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	68fa      	ldr	r2, [r7, #12]
 800ad6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ad6c:	683b      	ldr	r3, [r7, #0]
 800ad6e:	685a      	ldr	r2, [r3, #4]
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	693a      	ldr	r2, [r7, #16]
 800ad78:	621a      	str	r2, [r3, #32]
}
 800ad7a:	bf00      	nop
 800ad7c:	371c      	adds	r7, #28
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad84:	4770      	bx	lr
 800ad86:	bf00      	nop
 800ad88:	feff8fff 	.word	0xfeff8fff
 800ad8c:	40010000 	.word	0x40010000
 800ad90:	40010400 	.word	0x40010400
 800ad94:	40014000 	.word	0x40014000
 800ad98:	40014400 	.word	0x40014400
 800ad9c:	40014800 	.word	0x40014800

0800ada0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ada0:	b480      	push	{r7}
 800ada2:	b087      	sub	sp, #28
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
 800ada8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	6a1b      	ldr	r3, [r3, #32]
 800adae:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	6a1b      	ldr	r3, [r3, #32]
 800adba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	685b      	ldr	r3, [r3, #4]
 800adc0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800adc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800adc8:	68fa      	ldr	r2, [r7, #12]
 800adca:	4b21      	ldr	r3, [pc, #132]	@ (800ae50 <TIM_OC5_SetConfig+0xb0>)
 800adcc:	4013      	ands	r3, r2
 800adce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	68fa      	ldr	r2, [r7, #12]
 800add6:	4313      	orrs	r3, r2
 800add8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800adda:	693b      	ldr	r3, [r7, #16]
 800addc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800ade0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ade2:	683b      	ldr	r3, [r7, #0]
 800ade4:	689b      	ldr	r3, [r3, #8]
 800ade6:	041b      	lsls	r3, r3, #16
 800ade8:	693a      	ldr	r2, [r7, #16]
 800adea:	4313      	orrs	r3, r2
 800adec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	4a18      	ldr	r2, [pc, #96]	@ (800ae54 <TIM_OC5_SetConfig+0xb4>)
 800adf2:	4293      	cmp	r3, r2
 800adf4:	d00f      	beq.n	800ae16 <TIM_OC5_SetConfig+0x76>
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	4a17      	ldr	r2, [pc, #92]	@ (800ae58 <TIM_OC5_SetConfig+0xb8>)
 800adfa:	4293      	cmp	r3, r2
 800adfc:	d00b      	beq.n	800ae16 <TIM_OC5_SetConfig+0x76>
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	4a16      	ldr	r2, [pc, #88]	@ (800ae5c <TIM_OC5_SetConfig+0xbc>)
 800ae02:	4293      	cmp	r3, r2
 800ae04:	d007      	beq.n	800ae16 <TIM_OC5_SetConfig+0x76>
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	4a15      	ldr	r2, [pc, #84]	@ (800ae60 <TIM_OC5_SetConfig+0xc0>)
 800ae0a:	4293      	cmp	r3, r2
 800ae0c:	d003      	beq.n	800ae16 <TIM_OC5_SetConfig+0x76>
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	4a14      	ldr	r2, [pc, #80]	@ (800ae64 <TIM_OC5_SetConfig+0xc4>)
 800ae12:	4293      	cmp	r3, r2
 800ae14:	d109      	bne.n	800ae2a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ae16:	697b      	ldr	r3, [r7, #20]
 800ae18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ae1c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ae1e:	683b      	ldr	r3, [r7, #0]
 800ae20:	695b      	ldr	r3, [r3, #20]
 800ae22:	021b      	lsls	r3, r3, #8
 800ae24:	697a      	ldr	r2, [r7, #20]
 800ae26:	4313      	orrs	r3, r2
 800ae28:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	697a      	ldr	r2, [r7, #20]
 800ae2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	68fa      	ldr	r2, [r7, #12]
 800ae34:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	685a      	ldr	r2, [r3, #4]
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	693a      	ldr	r2, [r7, #16]
 800ae42:	621a      	str	r2, [r3, #32]
}
 800ae44:	bf00      	nop
 800ae46:	371c      	adds	r7, #28
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4e:	4770      	bx	lr
 800ae50:	fffeff8f 	.word	0xfffeff8f
 800ae54:	40010000 	.word	0x40010000
 800ae58:	40010400 	.word	0x40010400
 800ae5c:	40014000 	.word	0x40014000
 800ae60:	40014400 	.word	0x40014400
 800ae64:	40014800 	.word	0x40014800

0800ae68 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ae68:	b480      	push	{r7}
 800ae6a:	b087      	sub	sp, #28
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
 800ae70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6a1b      	ldr	r3, [r3, #32]
 800ae76:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6a1b      	ldr	r3, [r3, #32]
 800ae82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	685b      	ldr	r3, [r3, #4]
 800ae88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ae90:	68fa      	ldr	r2, [r7, #12]
 800ae92:	4b22      	ldr	r3, [pc, #136]	@ (800af1c <TIM_OC6_SetConfig+0xb4>)
 800ae94:	4013      	ands	r3, r2
 800ae96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	021b      	lsls	r3, r3, #8
 800ae9e:	68fa      	ldr	r2, [r7, #12]
 800aea0:	4313      	orrs	r3, r2
 800aea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800aea4:	693b      	ldr	r3, [r7, #16]
 800aea6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800aeaa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800aeac:	683b      	ldr	r3, [r7, #0]
 800aeae:	689b      	ldr	r3, [r3, #8]
 800aeb0:	051b      	lsls	r3, r3, #20
 800aeb2:	693a      	ldr	r2, [r7, #16]
 800aeb4:	4313      	orrs	r3, r2
 800aeb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	4a19      	ldr	r2, [pc, #100]	@ (800af20 <TIM_OC6_SetConfig+0xb8>)
 800aebc:	4293      	cmp	r3, r2
 800aebe:	d00f      	beq.n	800aee0 <TIM_OC6_SetConfig+0x78>
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	4a18      	ldr	r2, [pc, #96]	@ (800af24 <TIM_OC6_SetConfig+0xbc>)
 800aec4:	4293      	cmp	r3, r2
 800aec6:	d00b      	beq.n	800aee0 <TIM_OC6_SetConfig+0x78>
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	4a17      	ldr	r2, [pc, #92]	@ (800af28 <TIM_OC6_SetConfig+0xc0>)
 800aecc:	4293      	cmp	r3, r2
 800aece:	d007      	beq.n	800aee0 <TIM_OC6_SetConfig+0x78>
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	4a16      	ldr	r2, [pc, #88]	@ (800af2c <TIM_OC6_SetConfig+0xc4>)
 800aed4:	4293      	cmp	r3, r2
 800aed6:	d003      	beq.n	800aee0 <TIM_OC6_SetConfig+0x78>
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	4a15      	ldr	r2, [pc, #84]	@ (800af30 <TIM_OC6_SetConfig+0xc8>)
 800aedc:	4293      	cmp	r3, r2
 800aede:	d109      	bne.n	800aef4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800aee0:	697b      	ldr	r3, [r7, #20]
 800aee2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800aee6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	695b      	ldr	r3, [r3, #20]
 800aeec:	029b      	lsls	r3, r3, #10
 800aeee:	697a      	ldr	r2, [r7, #20]
 800aef0:	4313      	orrs	r3, r2
 800aef2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	697a      	ldr	r2, [r7, #20]
 800aef8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	68fa      	ldr	r2, [r7, #12]
 800aefe:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	685a      	ldr	r2, [r3, #4]
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	693a      	ldr	r2, [r7, #16]
 800af0c:	621a      	str	r2, [r3, #32]
}
 800af0e:	bf00      	nop
 800af10:	371c      	adds	r7, #28
 800af12:	46bd      	mov	sp, r7
 800af14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af18:	4770      	bx	lr
 800af1a:	bf00      	nop
 800af1c:	feff8fff 	.word	0xfeff8fff
 800af20:	40010000 	.word	0x40010000
 800af24:	40010400 	.word	0x40010400
 800af28:	40014000 	.word	0x40014000
 800af2c:	40014400 	.word	0x40014400
 800af30:	40014800 	.word	0x40014800

0800af34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800af34:	b480      	push	{r7}
 800af36:	b085      	sub	sp, #20
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
 800af3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800af44:	2b01      	cmp	r3, #1
 800af46:	d101      	bne.n	800af4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800af48:	2302      	movs	r3, #2
 800af4a:	e06d      	b.n	800b028 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2201      	movs	r2, #1
 800af50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2202      	movs	r2, #2
 800af58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	685b      	ldr	r3, [r3, #4]
 800af62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	689b      	ldr	r3, [r3, #8]
 800af6a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	4a30      	ldr	r2, [pc, #192]	@ (800b034 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800af72:	4293      	cmp	r3, r2
 800af74:	d004      	beq.n	800af80 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	4a2f      	ldr	r2, [pc, #188]	@ (800b038 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800af7c:	4293      	cmp	r3, r2
 800af7e:	d108      	bne.n	800af92 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800af86:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	685b      	ldr	r3, [r3, #4]
 800af8c:	68fa      	ldr	r2, [r7, #12]
 800af8e:	4313      	orrs	r3, r2
 800af90:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af98:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	68fa      	ldr	r2, [r7, #12]
 800afa0:	4313      	orrs	r3, r2
 800afa2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	68fa      	ldr	r2, [r7, #12]
 800afaa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	4a20      	ldr	r2, [pc, #128]	@ (800b034 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800afb2:	4293      	cmp	r3, r2
 800afb4:	d022      	beq.n	800affc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800afbe:	d01d      	beq.n	800affc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	4a1d      	ldr	r2, [pc, #116]	@ (800b03c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800afc6:	4293      	cmp	r3, r2
 800afc8:	d018      	beq.n	800affc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	4a1c      	ldr	r2, [pc, #112]	@ (800b040 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800afd0:	4293      	cmp	r3, r2
 800afd2:	d013      	beq.n	800affc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	4a1a      	ldr	r2, [pc, #104]	@ (800b044 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800afda:	4293      	cmp	r3, r2
 800afdc:	d00e      	beq.n	800affc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	4a15      	ldr	r2, [pc, #84]	@ (800b038 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800afe4:	4293      	cmp	r3, r2
 800afe6:	d009      	beq.n	800affc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	4a16      	ldr	r2, [pc, #88]	@ (800b048 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800afee:	4293      	cmp	r3, r2
 800aff0:	d004      	beq.n	800affc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	4a15      	ldr	r2, [pc, #84]	@ (800b04c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800aff8:	4293      	cmp	r3, r2
 800affa:	d10c      	bne.n	800b016 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800affc:	68bb      	ldr	r3, [r7, #8]
 800affe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b002:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b004:	683b      	ldr	r3, [r7, #0]
 800b006:	689b      	ldr	r3, [r3, #8]
 800b008:	68ba      	ldr	r2, [r7, #8]
 800b00a:	4313      	orrs	r3, r2
 800b00c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	68ba      	ldr	r2, [r7, #8]
 800b014:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	2201      	movs	r2, #1
 800b01a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	2200      	movs	r2, #0
 800b022:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b026:	2300      	movs	r3, #0
}
 800b028:	4618      	mov	r0, r3
 800b02a:	3714      	adds	r7, #20
 800b02c:	46bd      	mov	sp, r7
 800b02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b032:	4770      	bx	lr
 800b034:	40010000 	.word	0x40010000
 800b038:	40010400 	.word	0x40010400
 800b03c:	40000400 	.word	0x40000400
 800b040:	40000800 	.word	0x40000800
 800b044:	40000c00 	.word	0x40000c00
 800b048:	40001800 	.word	0x40001800
 800b04c:	40014000 	.word	0x40014000

0800b050 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b050:	b480      	push	{r7}
 800b052:	b083      	sub	sp, #12
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b058:	bf00      	nop
 800b05a:	370c      	adds	r7, #12
 800b05c:	46bd      	mov	sp, r7
 800b05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b062:	4770      	bx	lr

0800b064 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b064:	b480      	push	{r7}
 800b066:	b083      	sub	sp, #12
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b06c:	bf00      	nop
 800b06e:	370c      	adds	r7, #12
 800b070:	46bd      	mov	sp, r7
 800b072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b076:	4770      	bx	lr

0800b078 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b078:	b480      	push	{r7}
 800b07a:	b083      	sub	sp, #12
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b080:	bf00      	nop
 800b082:	370c      	adds	r7, #12
 800b084:	46bd      	mov	sp, r7
 800b086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08a:	4770      	bx	lr

0800b08c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b082      	sub	sp, #8
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d101      	bne.n	800b09e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b09a:	2301      	movs	r3, #1
 800b09c:	e042      	b.n	800b124 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d106      	bne.n	800b0b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b0b0:	6878      	ldr	r0, [r7, #4]
 800b0b2:	f7f6 fa1f 	bl	80014f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	2224      	movs	r2, #36	@ 0x24
 800b0ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	681a      	ldr	r2, [r3, #0]
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	f022 0201 	bic.w	r2, r2, #1
 800b0cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b0ce:	6878      	ldr	r0, [r7, #4]
 800b0d0:	f000 ffc8 	bl	800c064 <UART_SetConfig>
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	2b01      	cmp	r3, #1
 800b0d8:	d101      	bne.n	800b0de <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b0da:	2301      	movs	r3, #1
 800b0dc:	e022      	b.n	800b124 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d002      	beq.n	800b0ec <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b0e6:	6878      	ldr	r0, [r7, #4]
 800b0e8:	f001 fd24 	bl	800cb34 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	685a      	ldr	r2, [r3, #4]
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b0fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	689a      	ldr	r2, [r3, #8]
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b10a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	681a      	ldr	r2, [r3, #0]
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	f042 0201 	orr.w	r2, r2, #1
 800b11a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b11c:	6878      	ldr	r0, [r7, #4]
 800b11e:	f001 fdab 	bl	800cc78 <UART_CheckIdleState>
 800b122:	4603      	mov	r3, r0
}
 800b124:	4618      	mov	r0, r3
 800b126:	3708      	adds	r7, #8
 800b128:	46bd      	mov	sp, r7
 800b12a:	bd80      	pop	{r7, pc}

0800b12c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b08a      	sub	sp, #40	@ 0x28
 800b130:	af02      	add	r7, sp, #8
 800b132:	60f8      	str	r0, [r7, #12]
 800b134:	60b9      	str	r1, [r7, #8]
 800b136:	603b      	str	r3, [r7, #0]
 800b138:	4613      	mov	r3, r2
 800b13a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b142:	2b20      	cmp	r3, #32
 800b144:	d17b      	bne.n	800b23e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800b146:	68bb      	ldr	r3, [r7, #8]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d002      	beq.n	800b152 <HAL_UART_Transmit+0x26>
 800b14c:	88fb      	ldrh	r3, [r7, #6]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d101      	bne.n	800b156 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b152:	2301      	movs	r3, #1
 800b154:	e074      	b.n	800b240 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	2200      	movs	r2, #0
 800b15a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	2221      	movs	r2, #33	@ 0x21
 800b162:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b166:	f7f8 fddf 	bl	8003d28 <HAL_GetTick>
 800b16a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	88fa      	ldrh	r2, [r7, #6]
 800b170:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	88fa      	ldrh	r2, [r7, #6]
 800b178:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	689b      	ldr	r3, [r3, #8]
 800b180:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b184:	d108      	bne.n	800b198 <HAL_UART_Transmit+0x6c>
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	691b      	ldr	r3, [r3, #16]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d104      	bne.n	800b198 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b18e:	2300      	movs	r3, #0
 800b190:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b192:	68bb      	ldr	r3, [r7, #8]
 800b194:	61bb      	str	r3, [r7, #24]
 800b196:	e003      	b.n	800b1a0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b198:	68bb      	ldr	r3, [r7, #8]
 800b19a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b19c:	2300      	movs	r3, #0
 800b19e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b1a0:	e030      	b.n	800b204 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b1a2:	683b      	ldr	r3, [r7, #0]
 800b1a4:	9300      	str	r3, [sp, #0]
 800b1a6:	697b      	ldr	r3, [r7, #20]
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	2180      	movs	r1, #128	@ 0x80
 800b1ac:	68f8      	ldr	r0, [r7, #12]
 800b1ae:	f001 fe0d 	bl	800cdcc <UART_WaitOnFlagUntilTimeout>
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d005      	beq.n	800b1c4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	2220      	movs	r2, #32
 800b1bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800b1c0:	2303      	movs	r3, #3
 800b1c2:	e03d      	b.n	800b240 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800b1c4:	69fb      	ldr	r3, [r7, #28]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d10b      	bne.n	800b1e2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b1ca:	69bb      	ldr	r3, [r7, #24]
 800b1cc:	881b      	ldrh	r3, [r3, #0]
 800b1ce:	461a      	mov	r2, r3
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b1d8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800b1da:	69bb      	ldr	r3, [r7, #24]
 800b1dc:	3302      	adds	r3, #2
 800b1de:	61bb      	str	r3, [r7, #24]
 800b1e0:	e007      	b.n	800b1f2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b1e2:	69fb      	ldr	r3, [r7, #28]
 800b1e4:	781a      	ldrb	r2, [r3, #0]
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800b1ec:	69fb      	ldr	r3, [r7, #28]
 800b1ee:	3301      	adds	r3, #1
 800b1f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b1f8:	b29b      	uxth	r3, r3
 800b1fa:	3b01      	subs	r3, #1
 800b1fc:	b29a      	uxth	r2, r3
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b20a:	b29b      	uxth	r3, r3
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d1c8      	bne.n	800b1a2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	9300      	str	r3, [sp, #0]
 800b214:	697b      	ldr	r3, [r7, #20]
 800b216:	2200      	movs	r2, #0
 800b218:	2140      	movs	r1, #64	@ 0x40
 800b21a:	68f8      	ldr	r0, [r7, #12]
 800b21c:	f001 fdd6 	bl	800cdcc <UART_WaitOnFlagUntilTimeout>
 800b220:	4603      	mov	r3, r0
 800b222:	2b00      	cmp	r3, #0
 800b224:	d005      	beq.n	800b232 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	2220      	movs	r2, #32
 800b22a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800b22e:	2303      	movs	r3, #3
 800b230:	e006      	b.n	800b240 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	2220      	movs	r2, #32
 800b236:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800b23a:	2300      	movs	r3, #0
 800b23c:	e000      	b.n	800b240 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800b23e:	2302      	movs	r3, #2
  }
}
 800b240:	4618      	mov	r0, r3
 800b242:	3720      	adds	r7, #32
 800b244:	46bd      	mov	sp, r7
 800b246:	bd80      	pop	{r7, pc}

0800b248 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b08a      	sub	sp, #40	@ 0x28
 800b24c:	af02      	add	r7, sp, #8
 800b24e:	60f8      	str	r0, [r7, #12]
 800b250:	60b9      	str	r1, [r7, #8]
 800b252:	603b      	str	r3, [r7, #0]
 800b254:	4613      	mov	r3, r2
 800b256:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b25e:	2b20      	cmp	r3, #32
 800b260:	f040 80b5 	bne.w	800b3ce <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800b264:	68bb      	ldr	r3, [r7, #8]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d002      	beq.n	800b270 <HAL_UART_Receive+0x28>
 800b26a:	88fb      	ldrh	r3, [r7, #6]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d101      	bne.n	800b274 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800b270:	2301      	movs	r3, #1
 800b272:	e0ad      	b.n	800b3d0 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	2200      	movs	r2, #0
 800b278:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	2222      	movs	r2, #34	@ 0x22
 800b280:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	2200      	movs	r2, #0
 800b288:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b28a:	f7f8 fd4d 	bl	8003d28 <HAL_GetTick>
 800b28e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	88fa      	ldrh	r2, [r7, #6]
 800b294:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	88fa      	ldrh	r2, [r7, #6]
 800b29c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	689b      	ldr	r3, [r3, #8]
 800b2a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b2a8:	d10e      	bne.n	800b2c8 <HAL_UART_Receive+0x80>
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	691b      	ldr	r3, [r3, #16]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d105      	bne.n	800b2be <HAL_UART_Receive+0x76>
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800b2b8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b2bc:	e02d      	b.n	800b31a <HAL_UART_Receive+0xd2>
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	22ff      	movs	r2, #255	@ 0xff
 800b2c2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b2c6:	e028      	b.n	800b31a <HAL_UART_Receive+0xd2>
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	689b      	ldr	r3, [r3, #8]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d10d      	bne.n	800b2ec <HAL_UART_Receive+0xa4>
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	691b      	ldr	r3, [r3, #16]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d104      	bne.n	800b2e2 <HAL_UART_Receive+0x9a>
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	22ff      	movs	r2, #255	@ 0xff
 800b2dc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b2e0:	e01b      	b.n	800b31a <HAL_UART_Receive+0xd2>
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	227f      	movs	r2, #127	@ 0x7f
 800b2e6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b2ea:	e016      	b.n	800b31a <HAL_UART_Receive+0xd2>
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	689b      	ldr	r3, [r3, #8]
 800b2f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b2f4:	d10d      	bne.n	800b312 <HAL_UART_Receive+0xca>
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	691b      	ldr	r3, [r3, #16]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d104      	bne.n	800b308 <HAL_UART_Receive+0xc0>
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	227f      	movs	r2, #127	@ 0x7f
 800b302:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b306:	e008      	b.n	800b31a <HAL_UART_Receive+0xd2>
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	223f      	movs	r2, #63	@ 0x3f
 800b30c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b310:	e003      	b.n	800b31a <HAL_UART_Receive+0xd2>
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	2200      	movs	r2, #0
 800b316:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b320:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	689b      	ldr	r3, [r3, #8]
 800b326:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b32a:	d108      	bne.n	800b33e <HAL_UART_Receive+0xf6>
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	691b      	ldr	r3, [r3, #16]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d104      	bne.n	800b33e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800b334:	2300      	movs	r3, #0
 800b336:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b338:	68bb      	ldr	r3, [r7, #8]
 800b33a:	61bb      	str	r3, [r7, #24]
 800b33c:	e003      	b.n	800b346 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800b33e:	68bb      	ldr	r3, [r7, #8]
 800b340:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b342:	2300      	movs	r3, #0
 800b344:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800b346:	e036      	b.n	800b3b6 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800b348:	683b      	ldr	r3, [r7, #0]
 800b34a:	9300      	str	r3, [sp, #0]
 800b34c:	697b      	ldr	r3, [r7, #20]
 800b34e:	2200      	movs	r2, #0
 800b350:	2120      	movs	r1, #32
 800b352:	68f8      	ldr	r0, [r7, #12]
 800b354:	f001 fd3a 	bl	800cdcc <UART_WaitOnFlagUntilTimeout>
 800b358:	4603      	mov	r3, r0
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d005      	beq.n	800b36a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	2220      	movs	r2, #32
 800b362:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800b366:	2303      	movs	r3, #3
 800b368:	e032      	b.n	800b3d0 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800b36a:	69fb      	ldr	r3, [r7, #28]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d10c      	bne.n	800b38a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b376:	b29a      	uxth	r2, r3
 800b378:	8a7b      	ldrh	r3, [r7, #18]
 800b37a:	4013      	ands	r3, r2
 800b37c:	b29a      	uxth	r2, r3
 800b37e:	69bb      	ldr	r3, [r7, #24]
 800b380:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800b382:	69bb      	ldr	r3, [r7, #24]
 800b384:	3302      	adds	r3, #2
 800b386:	61bb      	str	r3, [r7, #24]
 800b388:	e00c      	b.n	800b3a4 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b390:	b2da      	uxtb	r2, r3
 800b392:	8a7b      	ldrh	r3, [r7, #18]
 800b394:	b2db      	uxtb	r3, r3
 800b396:	4013      	ands	r3, r2
 800b398:	b2da      	uxtb	r2, r3
 800b39a:	69fb      	ldr	r3, [r7, #28]
 800b39c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800b39e:	69fb      	ldr	r3, [r7, #28]
 800b3a0:	3301      	adds	r3, #1
 800b3a2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b3aa:	b29b      	uxth	r3, r3
 800b3ac:	3b01      	subs	r3, #1
 800b3ae:	b29a      	uxth	r2, r3
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b3bc:	b29b      	uxth	r3, r3
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d1c2      	bne.n	800b348 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	2220      	movs	r2, #32
 800b3c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	e000      	b.n	800b3d0 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800b3ce:	2302      	movs	r3, #2
  }
}
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	3720      	adds	r7, #32
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	bd80      	pop	{r7, pc}

0800b3d8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b3d8:	b480      	push	{r7}
 800b3da:	b091      	sub	sp, #68	@ 0x44
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	60f8      	str	r0, [r7, #12]
 800b3e0:	60b9      	str	r1, [r7, #8]
 800b3e2:	4613      	mov	r3, r2
 800b3e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b3ec:	2b20      	cmp	r3, #32
 800b3ee:	d178      	bne.n	800b4e2 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b3f0:	68bb      	ldr	r3, [r7, #8]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d002      	beq.n	800b3fc <HAL_UART_Transmit_IT+0x24>
 800b3f6:	88fb      	ldrh	r3, [r7, #6]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d101      	bne.n	800b400 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800b3fc:	2301      	movs	r3, #1
 800b3fe:	e071      	b.n	800b4e4 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	68ba      	ldr	r2, [r7, #8]
 800b404:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	88fa      	ldrh	r2, [r7, #6]
 800b40a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	88fa      	ldrh	r2, [r7, #6]
 800b412:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	2200      	movs	r2, #0
 800b41a:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	2200      	movs	r2, #0
 800b420:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	2221      	movs	r2, #33	@ 0x21
 800b428:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b430:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b434:	d12a      	bne.n	800b48c <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	689b      	ldr	r3, [r3, #8]
 800b43a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b43e:	d107      	bne.n	800b450 <HAL_UART_Transmit_IT+0x78>
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	691b      	ldr	r3, [r3, #16]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d103      	bne.n	800b450 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	4a29      	ldr	r2, [pc, #164]	@ (800b4f0 <HAL_UART_Transmit_IT+0x118>)
 800b44c:	679a      	str	r2, [r3, #120]	@ 0x78
 800b44e:	e002      	b.n	800b456 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	4a28      	ldr	r2, [pc, #160]	@ (800b4f4 <HAL_UART_Transmit_IT+0x11c>)
 800b454:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	3308      	adds	r3, #8
 800b45c:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b45e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b460:	e853 3f00 	ldrex	r3, [r3]
 800b464:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b468:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b46c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	3308      	adds	r3, #8
 800b474:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b476:	637a      	str	r2, [r7, #52]	@ 0x34
 800b478:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b47a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b47c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b47e:	e841 2300 	strex	r3, r2, [r1]
 800b482:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b486:	2b00      	cmp	r3, #0
 800b488:	d1e5      	bne.n	800b456 <HAL_UART_Transmit_IT+0x7e>
 800b48a:	e028      	b.n	800b4de <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	689b      	ldr	r3, [r3, #8]
 800b490:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b494:	d107      	bne.n	800b4a6 <HAL_UART_Transmit_IT+0xce>
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	691b      	ldr	r3, [r3, #16]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d103      	bne.n	800b4a6 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	4a15      	ldr	r2, [pc, #84]	@ (800b4f8 <HAL_UART_Transmit_IT+0x120>)
 800b4a2:	679a      	str	r2, [r3, #120]	@ 0x78
 800b4a4:	e002      	b.n	800b4ac <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	4a14      	ldr	r2, [pc, #80]	@ (800b4fc <HAL_UART_Transmit_IT+0x124>)
 800b4aa:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4b2:	697b      	ldr	r3, [r7, #20]
 800b4b4:	e853 3f00 	ldrex	r3, [r3]
 800b4b8:	613b      	str	r3, [r7, #16]
   return(result);
 800b4ba:	693b      	ldr	r3, [r7, #16]
 800b4bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b4c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	461a      	mov	r2, r3
 800b4c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4ca:	623b      	str	r3, [r7, #32]
 800b4cc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4ce:	69f9      	ldr	r1, [r7, #28]
 800b4d0:	6a3a      	ldr	r2, [r7, #32]
 800b4d2:	e841 2300 	strex	r3, r2, [r1]
 800b4d6:	61bb      	str	r3, [r7, #24]
   return(result);
 800b4d8:	69bb      	ldr	r3, [r7, #24]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d1e6      	bne.n	800b4ac <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800b4de:	2300      	movs	r3, #0
 800b4e0:	e000      	b.n	800b4e4 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800b4e2:	2302      	movs	r3, #2
  }
}
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	3744      	adds	r7, #68	@ 0x44
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ee:	4770      	bx	lr
 800b4f0:	0800d47d 	.word	0x0800d47d
 800b4f4:	0800d39d 	.word	0x0800d39d
 800b4f8:	0800d2db 	.word	0x0800d2db
 800b4fc:	0800d223 	.word	0x0800d223

0800b500 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b08a      	sub	sp, #40	@ 0x28
 800b504:	af00      	add	r7, sp, #0
 800b506:	60f8      	str	r0, [r7, #12]
 800b508:	60b9      	str	r1, [r7, #8]
 800b50a:	4613      	mov	r3, r2
 800b50c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b514:	2b20      	cmp	r3, #32
 800b516:	d137      	bne.n	800b588 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800b518:	68bb      	ldr	r3, [r7, #8]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d002      	beq.n	800b524 <HAL_UART_Receive_IT+0x24>
 800b51e:	88fb      	ldrh	r3, [r7, #6]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d101      	bne.n	800b528 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800b524:	2301      	movs	r3, #1
 800b526:	e030      	b.n	800b58a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	2200      	movs	r2, #0
 800b52c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	4a18      	ldr	r2, [pc, #96]	@ (800b594 <HAL_UART_Receive_IT+0x94>)
 800b534:	4293      	cmp	r3, r2
 800b536:	d01f      	beq.n	800b578 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	685b      	ldr	r3, [r3, #4]
 800b53e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b542:	2b00      	cmp	r3, #0
 800b544:	d018      	beq.n	800b578 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b54c:	697b      	ldr	r3, [r7, #20]
 800b54e:	e853 3f00 	ldrex	r3, [r3]
 800b552:	613b      	str	r3, [r7, #16]
   return(result);
 800b554:	693b      	ldr	r3, [r7, #16]
 800b556:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b55a:	627b      	str	r3, [r7, #36]	@ 0x24
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	461a      	mov	r2, r3
 800b562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b564:	623b      	str	r3, [r7, #32]
 800b566:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b568:	69f9      	ldr	r1, [r7, #28]
 800b56a:	6a3a      	ldr	r2, [r7, #32]
 800b56c:	e841 2300 	strex	r3, r2, [r1]
 800b570:	61bb      	str	r3, [r7, #24]
   return(result);
 800b572:	69bb      	ldr	r3, [r7, #24]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d1e6      	bne.n	800b546 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b578:	88fb      	ldrh	r3, [r7, #6]
 800b57a:	461a      	mov	r2, r3
 800b57c:	68b9      	ldr	r1, [r7, #8]
 800b57e:	68f8      	ldr	r0, [r7, #12]
 800b580:	f001 fc8c 	bl	800ce9c <UART_Start_Receive_IT>
 800b584:	4603      	mov	r3, r0
 800b586:	e000      	b.n	800b58a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b588:	2302      	movs	r3, #2
  }
}
 800b58a:	4618      	mov	r0, r3
 800b58c:	3728      	adds	r7, #40	@ 0x28
 800b58e:	46bd      	mov	sp, r7
 800b590:	bd80      	pop	{r7, pc}
 800b592:	bf00      	nop
 800b594:	58000c00 	.word	0x58000c00

0800b598 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b09a      	sub	sp, #104	@ 0x68
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b5a8:	e853 3f00 	ldrex	r3, [r3]
 800b5ac:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b5ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b5b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b5b4:	667b      	str	r3, [r7, #100]	@ 0x64
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	461a      	mov	r2, r3
 800b5bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b5be:	657b      	str	r3, [r7, #84]	@ 0x54
 800b5c0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5c2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b5c4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b5c6:	e841 2300 	strex	r3, r2, [r1]
 800b5ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b5cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d1e6      	bne.n	800b5a0 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	3308      	adds	r3, #8
 800b5d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5dc:	e853 3f00 	ldrex	r3, [r3]
 800b5e0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b5e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b5e4:	4b51      	ldr	r3, [pc, #324]	@ (800b72c <HAL_UART_AbortReceive_IT+0x194>)
 800b5e6:	4013      	ands	r3, r2
 800b5e8:	663b      	str	r3, [r7, #96]	@ 0x60
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	3308      	adds	r3, #8
 800b5f0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b5f2:	643a      	str	r2, [r7, #64]	@ 0x40
 800b5f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b5f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b5fa:	e841 2300 	strex	r3, r2, [r1]
 800b5fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b602:	2b00      	cmp	r3, #0
 800b604:	d1e5      	bne.n	800b5d2 <HAL_UART_AbortReceive_IT+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b60a:	2b01      	cmp	r3, #1
 800b60c:	d118      	bne.n	800b640 <HAL_UART_AbortReceive_IT+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b614:	6a3b      	ldr	r3, [r7, #32]
 800b616:	e853 3f00 	ldrex	r3, [r3]
 800b61a:	61fb      	str	r3, [r7, #28]
   return(result);
 800b61c:	69fb      	ldr	r3, [r7, #28]
 800b61e:	f023 0310 	bic.w	r3, r3, #16
 800b622:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	461a      	mov	r2, r3
 800b62a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b62c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b62e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b630:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b632:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b634:	e841 2300 	strex	r3, r2, [r1]
 800b638:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b63a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d1e6      	bne.n	800b60e <HAL_UART_AbortReceive_IT+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	689b      	ldr	r3, [r3, #8]
 800b646:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b64a:	2b40      	cmp	r3, #64	@ 0x40
 800b64c:	d154      	bne.n	800b6f8 <HAL_UART_AbortReceive_IT+0x160>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	3308      	adds	r3, #8
 800b654:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	e853 3f00 	ldrex	r3, [r3]
 800b65c:	60bb      	str	r3, [r7, #8]
   return(result);
 800b65e:	68bb      	ldr	r3, [r7, #8]
 800b660:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b664:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	3308      	adds	r3, #8
 800b66c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b66e:	61ba      	str	r2, [r7, #24]
 800b670:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b672:	6979      	ldr	r1, [r7, #20]
 800b674:	69ba      	ldr	r2, [r7, #24]
 800b676:	e841 2300 	strex	r3, r2, [r1]
 800b67a:	613b      	str	r3, [r7, #16]
   return(result);
 800b67c:	693b      	ldr	r3, [r7, #16]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d1e5      	bne.n	800b64e <HAL_UART_AbortReceive_IT+0xb6>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d017      	beq.n	800b6bc <HAL_UART_AbortReceive_IT+0x124>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b692:	4a27      	ldr	r2, [pc, #156]	@ (800b730 <HAL_UART_AbortReceive_IT+0x198>)
 800b694:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b69c:	4618      	mov	r0, r3
 800b69e:	f7f8 fff9 	bl	8004694 <HAL_DMA_Abort_IT>
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d03c      	beq.n	800b722 <HAL_UART_AbortReceive_IT+0x18a>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b6ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b6b0:	687a      	ldr	r2, [r7, #4]
 800b6b2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800b6b6:	4610      	mov	r0, r2
 800b6b8:	4798      	blx	r3
 800b6ba:	e032      	b.n	800b722 <HAL_UART_AbortReceive_IT+0x18a>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2200      	movs	r2, #0
 800b6c0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	220f      	movs	r2, #15
 800b6d0:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	699a      	ldr	r2, [r3, #24]
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	f042 0208 	orr.w	r2, r2, #8
 800b6e0:	619a      	str	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	2220      	movs	r2, #32
 800b6e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 800b6f0:	6878      	ldr	r0, [r7, #4]
 800b6f2:	f000 fbe3 	bl	800bebc <HAL_UART_AbortReceiveCpltCallback>
 800b6f6:	e014      	b.n	800b722 <HAL_UART_AbortReceive_IT+0x18a>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	2200      	movs	r2, #0
 800b704:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	220f      	movs	r2, #15
 800b70c:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	2220      	movs	r2, #32
 800b712:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2200      	movs	r2, #0
 800b71a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 800b71c:	6878      	ldr	r0, [r7, #4]
 800b71e:	f000 fbcd 	bl	800bebc <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800b722:	2300      	movs	r3, #0
}
 800b724:	4618      	mov	r0, r3
 800b726:	3768      	adds	r7, #104	@ 0x68
 800b728:	46bd      	mov	sp, r7
 800b72a:	bd80      	pop	{r7, pc}
 800b72c:	effffffe 	.word	0xeffffffe
 800b730:	0800d1d9 	.word	0x0800d1d9

0800b734 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b0ba      	sub	sp, #232	@ 0xe8
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	69db      	ldr	r3, [r3, #28]
 800b742:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	689b      	ldr	r3, [r3, #8]
 800b756:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b75a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800b75e:	f640 030f 	movw	r3, #2063	@ 0x80f
 800b762:	4013      	ands	r3, r2
 800b764:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800b768:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d11b      	bne.n	800b7a8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b770:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b774:	f003 0320 	and.w	r3, r3, #32
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d015      	beq.n	800b7a8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b77c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b780:	f003 0320 	and.w	r3, r3, #32
 800b784:	2b00      	cmp	r3, #0
 800b786:	d105      	bne.n	800b794 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b788:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b78c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b790:	2b00      	cmp	r3, #0
 800b792:	d009      	beq.n	800b7a8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b798:	2b00      	cmp	r3, #0
 800b79a:	f000 8377 	beq.w	800be8c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b7a2:	6878      	ldr	r0, [r7, #4]
 800b7a4:	4798      	blx	r3
      }
      return;
 800b7a6:	e371      	b.n	800be8c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b7a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	f000 8123 	beq.w	800b9f8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b7b2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b7b6:	4b8d      	ldr	r3, [pc, #564]	@ (800b9ec <HAL_UART_IRQHandler+0x2b8>)
 800b7b8:	4013      	ands	r3, r2
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d106      	bne.n	800b7cc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b7be:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800b7c2:	4b8b      	ldr	r3, [pc, #556]	@ (800b9f0 <HAL_UART_IRQHandler+0x2bc>)
 800b7c4:	4013      	ands	r3, r2
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	f000 8116 	beq.w	800b9f8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b7cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b7d0:	f003 0301 	and.w	r3, r3, #1
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d011      	beq.n	800b7fc <HAL_UART_IRQHandler+0xc8>
 800b7d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b7dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d00b      	beq.n	800b7fc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	2201      	movs	r2, #1
 800b7ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b7f2:	f043 0201 	orr.w	r2, r3, #1
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b7fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b800:	f003 0302 	and.w	r3, r3, #2
 800b804:	2b00      	cmp	r3, #0
 800b806:	d011      	beq.n	800b82c <HAL_UART_IRQHandler+0xf8>
 800b808:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b80c:	f003 0301 	and.w	r3, r3, #1
 800b810:	2b00      	cmp	r3, #0
 800b812:	d00b      	beq.n	800b82c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	2202      	movs	r2, #2
 800b81a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b822:	f043 0204 	orr.w	r2, r3, #4
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b82c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b830:	f003 0304 	and.w	r3, r3, #4
 800b834:	2b00      	cmp	r3, #0
 800b836:	d011      	beq.n	800b85c <HAL_UART_IRQHandler+0x128>
 800b838:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b83c:	f003 0301 	and.w	r3, r3, #1
 800b840:	2b00      	cmp	r3, #0
 800b842:	d00b      	beq.n	800b85c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	2204      	movs	r2, #4
 800b84a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b852:	f043 0202 	orr.w	r2, r3, #2
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b85c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b860:	f003 0308 	and.w	r3, r3, #8
 800b864:	2b00      	cmp	r3, #0
 800b866:	d017      	beq.n	800b898 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b868:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b86c:	f003 0320 	and.w	r3, r3, #32
 800b870:	2b00      	cmp	r3, #0
 800b872:	d105      	bne.n	800b880 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b874:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b878:	4b5c      	ldr	r3, [pc, #368]	@ (800b9ec <HAL_UART_IRQHandler+0x2b8>)
 800b87a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d00b      	beq.n	800b898 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	2208      	movs	r2, #8
 800b886:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b88e:	f043 0208 	orr.w	r2, r3, #8
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b898:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b89c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d012      	beq.n	800b8ca <HAL_UART_IRQHandler+0x196>
 800b8a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b8a8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d00c      	beq.n	800b8ca <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b8b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b8c0:	f043 0220 	orr.w	r2, r3, #32
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	f000 82dd 	beq.w	800be90 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b8d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b8da:	f003 0320 	and.w	r3, r3, #32
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d013      	beq.n	800b90a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b8e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b8e6:	f003 0320 	and.w	r3, r3, #32
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d105      	bne.n	800b8fa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b8ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b8f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d007      	beq.n	800b90a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d003      	beq.n	800b90a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b906:	6878      	ldr	r0, [r7, #4]
 800b908:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b910:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	689b      	ldr	r3, [r3, #8]
 800b91a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b91e:	2b40      	cmp	r3, #64	@ 0x40
 800b920:	d005      	beq.n	800b92e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b922:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b926:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d054      	beq.n	800b9d8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b92e:	6878      	ldr	r0, [r7, #4]
 800b930:	f001 fbd6 	bl	800d0e0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	689b      	ldr	r3, [r3, #8]
 800b93a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b93e:	2b40      	cmp	r3, #64	@ 0x40
 800b940:	d146      	bne.n	800b9d0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	3308      	adds	r3, #8
 800b948:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b94c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b950:	e853 3f00 	ldrex	r3, [r3]
 800b954:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b958:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b95c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b960:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	3308      	adds	r3, #8
 800b96a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b96e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b972:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b976:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b97a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b97e:	e841 2300 	strex	r3, r2, [r1]
 800b982:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b986:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d1d9      	bne.n	800b942 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b994:	2b00      	cmp	r3, #0
 800b996:	d017      	beq.n	800b9c8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b99e:	4a15      	ldr	r2, [pc, #84]	@ (800b9f4 <HAL_UART_IRQHandler+0x2c0>)
 800b9a0:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	f7f8 fe73 	bl	8004694 <HAL_DMA_Abort_IT>
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d019      	beq.n	800b9e8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b9ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b9bc:	687a      	ldr	r2, [r7, #4]
 800b9be:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800b9c2:	4610      	mov	r0, r2
 800b9c4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b9c6:	e00f      	b.n	800b9e8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b9c8:	6878      	ldr	r0, [r7, #4]
 800b9ca:	f000 fa6d 	bl	800bea8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b9ce:	e00b      	b.n	800b9e8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b9d0:	6878      	ldr	r0, [r7, #4]
 800b9d2:	f000 fa69 	bl	800bea8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b9d6:	e007      	b.n	800b9e8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b9d8:	6878      	ldr	r0, [r7, #4]
 800b9da:	f000 fa65 	bl	800bea8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800b9e6:	e253      	b.n	800be90 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b9e8:	bf00      	nop
    return;
 800b9ea:	e251      	b.n	800be90 <HAL_UART_IRQHandler+0x75c>
 800b9ec:	10000001 	.word	0x10000001
 800b9f0:	04000120 	.word	0x04000120
 800b9f4:	0800d1ad 	.word	0x0800d1ad

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b9fc:	2b01      	cmp	r3, #1
 800b9fe:	f040 81e7 	bne.w	800bdd0 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ba02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ba06:	f003 0310 	and.w	r3, r3, #16
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	f000 81e0 	beq.w	800bdd0 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ba10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ba14:	f003 0310 	and.w	r3, r3, #16
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	f000 81d9 	beq.w	800bdd0 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	2210      	movs	r2, #16
 800ba24:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	689b      	ldr	r3, [r3, #8]
 800ba2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba30:	2b40      	cmp	r3, #64	@ 0x40
 800ba32:	f040 8151 	bne.w	800bcd8 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	4a96      	ldr	r2, [pc, #600]	@ (800bc98 <HAL_UART_IRQHandler+0x564>)
 800ba40:	4293      	cmp	r3, r2
 800ba42:	d068      	beq.n	800bb16 <HAL_UART_IRQHandler+0x3e2>
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	4a93      	ldr	r2, [pc, #588]	@ (800bc9c <HAL_UART_IRQHandler+0x568>)
 800ba4e:	4293      	cmp	r3, r2
 800ba50:	d061      	beq.n	800bb16 <HAL_UART_IRQHandler+0x3e2>
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	4a91      	ldr	r2, [pc, #580]	@ (800bca0 <HAL_UART_IRQHandler+0x56c>)
 800ba5c:	4293      	cmp	r3, r2
 800ba5e:	d05a      	beq.n	800bb16 <HAL_UART_IRQHandler+0x3e2>
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	4a8e      	ldr	r2, [pc, #568]	@ (800bca4 <HAL_UART_IRQHandler+0x570>)
 800ba6a:	4293      	cmp	r3, r2
 800ba6c:	d053      	beq.n	800bb16 <HAL_UART_IRQHandler+0x3e2>
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	4a8c      	ldr	r2, [pc, #560]	@ (800bca8 <HAL_UART_IRQHandler+0x574>)
 800ba78:	4293      	cmp	r3, r2
 800ba7a:	d04c      	beq.n	800bb16 <HAL_UART_IRQHandler+0x3e2>
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	4a89      	ldr	r2, [pc, #548]	@ (800bcac <HAL_UART_IRQHandler+0x578>)
 800ba86:	4293      	cmp	r3, r2
 800ba88:	d045      	beq.n	800bb16 <HAL_UART_IRQHandler+0x3e2>
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	4a87      	ldr	r2, [pc, #540]	@ (800bcb0 <HAL_UART_IRQHandler+0x57c>)
 800ba94:	4293      	cmp	r3, r2
 800ba96:	d03e      	beq.n	800bb16 <HAL_UART_IRQHandler+0x3e2>
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	4a84      	ldr	r2, [pc, #528]	@ (800bcb4 <HAL_UART_IRQHandler+0x580>)
 800baa2:	4293      	cmp	r3, r2
 800baa4:	d037      	beq.n	800bb16 <HAL_UART_IRQHandler+0x3e2>
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	4a82      	ldr	r2, [pc, #520]	@ (800bcb8 <HAL_UART_IRQHandler+0x584>)
 800bab0:	4293      	cmp	r3, r2
 800bab2:	d030      	beq.n	800bb16 <HAL_UART_IRQHandler+0x3e2>
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	4a7f      	ldr	r2, [pc, #508]	@ (800bcbc <HAL_UART_IRQHandler+0x588>)
 800babe:	4293      	cmp	r3, r2
 800bac0:	d029      	beq.n	800bb16 <HAL_UART_IRQHandler+0x3e2>
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	4a7d      	ldr	r2, [pc, #500]	@ (800bcc0 <HAL_UART_IRQHandler+0x58c>)
 800bacc:	4293      	cmp	r3, r2
 800bace:	d022      	beq.n	800bb16 <HAL_UART_IRQHandler+0x3e2>
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	4a7a      	ldr	r2, [pc, #488]	@ (800bcc4 <HAL_UART_IRQHandler+0x590>)
 800bada:	4293      	cmp	r3, r2
 800badc:	d01b      	beq.n	800bb16 <HAL_UART_IRQHandler+0x3e2>
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	4a78      	ldr	r2, [pc, #480]	@ (800bcc8 <HAL_UART_IRQHandler+0x594>)
 800bae8:	4293      	cmp	r3, r2
 800baea:	d014      	beq.n	800bb16 <HAL_UART_IRQHandler+0x3e2>
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	4a75      	ldr	r2, [pc, #468]	@ (800bccc <HAL_UART_IRQHandler+0x598>)
 800baf6:	4293      	cmp	r3, r2
 800baf8:	d00d      	beq.n	800bb16 <HAL_UART_IRQHandler+0x3e2>
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	4a73      	ldr	r2, [pc, #460]	@ (800bcd0 <HAL_UART_IRQHandler+0x59c>)
 800bb04:	4293      	cmp	r3, r2
 800bb06:	d006      	beq.n	800bb16 <HAL_UART_IRQHandler+0x3e2>
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	4a70      	ldr	r2, [pc, #448]	@ (800bcd4 <HAL_UART_IRQHandler+0x5a0>)
 800bb12:	4293      	cmp	r3, r2
 800bb14:	d106      	bne.n	800bb24 <HAL_UART_IRQHandler+0x3f0>
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	685b      	ldr	r3, [r3, #4]
 800bb20:	b29b      	uxth	r3, r3
 800bb22:	e005      	b.n	800bb30 <HAL_UART_IRQHandler+0x3fc>
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	685b      	ldr	r3, [r3, #4]
 800bb2e:	b29b      	uxth	r3, r3
 800bb30:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bb34:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	f000 81ab 	beq.w	800be94 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800bb44:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bb48:	429a      	cmp	r2, r3
 800bb4a:	f080 81a3 	bcs.w	800be94 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bb54:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bb5e:	69db      	ldr	r3, [r3, #28]
 800bb60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bb64:	f000 8087 	beq.w	800bc76 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb70:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800bb74:	e853 3f00 	ldrex	r3, [r3]
 800bb78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800bb7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800bb80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bb84:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	461a      	mov	r2, r3
 800bb8e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bb92:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800bb96:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb9a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800bb9e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800bba2:	e841 2300 	strex	r3, r2, [r1]
 800bba6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800bbaa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d1da      	bne.n	800bb68 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	3308      	adds	r3, #8
 800bbb8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bbbc:	e853 3f00 	ldrex	r3, [r3]
 800bbc0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800bbc2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bbc4:	f023 0301 	bic.w	r3, r3, #1
 800bbc8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	3308      	adds	r3, #8
 800bbd2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800bbd6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800bbda:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbdc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800bbde:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800bbe2:	e841 2300 	strex	r3, r2, [r1]
 800bbe6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800bbe8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d1e1      	bne.n	800bbb2 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	3308      	adds	r3, #8
 800bbf4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbf6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bbf8:	e853 3f00 	ldrex	r3, [r3]
 800bbfc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800bbfe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bc00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bc04:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	3308      	adds	r3, #8
 800bc0e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800bc12:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800bc14:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc16:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800bc18:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800bc1a:	e841 2300 	strex	r3, r2, [r1]
 800bc1e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800bc20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d1e3      	bne.n	800bbee <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	2220      	movs	r2, #32
 800bc2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	2200      	movs	r2, #0
 800bc32:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bc3c:	e853 3f00 	ldrex	r3, [r3]
 800bc40:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800bc42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bc44:	f023 0310 	bic.w	r3, r3, #16
 800bc48:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	461a      	mov	r2, r3
 800bc52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bc56:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bc58:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc5a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bc5c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bc5e:	e841 2300 	strex	r3, r2, [r1]
 800bc62:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800bc64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d1e4      	bne.n	800bc34 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bc70:	4618      	mov	r0, r3
 800bc72:	f7f8 f9f1 	bl	8004058 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	2202      	movs	r2, #2
 800bc7a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bc88:	b29b      	uxth	r3, r3
 800bc8a:	1ad3      	subs	r3, r2, r3
 800bc8c:	b29b      	uxth	r3, r3
 800bc8e:	4619      	mov	r1, r3
 800bc90:	6878      	ldr	r0, [r7, #4]
 800bc92:	f000 f91d 	bl	800bed0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bc96:	e0fd      	b.n	800be94 <HAL_UART_IRQHandler+0x760>
 800bc98:	40020010 	.word	0x40020010
 800bc9c:	40020028 	.word	0x40020028
 800bca0:	40020040 	.word	0x40020040
 800bca4:	40020058 	.word	0x40020058
 800bca8:	40020070 	.word	0x40020070
 800bcac:	40020088 	.word	0x40020088
 800bcb0:	400200a0 	.word	0x400200a0
 800bcb4:	400200b8 	.word	0x400200b8
 800bcb8:	40020410 	.word	0x40020410
 800bcbc:	40020428 	.word	0x40020428
 800bcc0:	40020440 	.word	0x40020440
 800bcc4:	40020458 	.word	0x40020458
 800bcc8:	40020470 	.word	0x40020470
 800bccc:	40020488 	.word	0x40020488
 800bcd0:	400204a0 	.word	0x400204a0
 800bcd4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bce4:	b29b      	uxth	r3, r3
 800bce6:	1ad3      	subs	r3, r2, r3
 800bce8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bcf2:	b29b      	uxth	r3, r3
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	f000 80cf 	beq.w	800be98 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800bcfa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	f000 80ca 	beq.w	800be98 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd0c:	e853 3f00 	ldrex	r3, [r3]
 800bd10:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bd12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bd18:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	461a      	mov	r2, r3
 800bd22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800bd26:	647b      	str	r3, [r7, #68]	@ 0x44
 800bd28:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd2a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bd2c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bd2e:	e841 2300 	strex	r3, r2, [r1]
 800bd32:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bd34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d1e4      	bne.n	800bd04 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	3308      	adds	r3, #8
 800bd40:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd44:	e853 3f00 	ldrex	r3, [r3]
 800bd48:	623b      	str	r3, [r7, #32]
   return(result);
 800bd4a:	6a3a      	ldr	r2, [r7, #32]
 800bd4c:	4b55      	ldr	r3, [pc, #340]	@ (800bea4 <HAL_UART_IRQHandler+0x770>)
 800bd4e:	4013      	ands	r3, r2
 800bd50:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	3308      	adds	r3, #8
 800bd5a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800bd5e:	633a      	str	r2, [r7, #48]	@ 0x30
 800bd60:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bd64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bd66:	e841 2300 	strex	r3, r2, [r1]
 800bd6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bd6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d1e3      	bne.n	800bd3a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	2220      	movs	r2, #32
 800bd76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	2200      	movs	r2, #0
 800bd84:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd8c:	693b      	ldr	r3, [r7, #16]
 800bd8e:	e853 3f00 	ldrex	r3, [r3]
 800bd92:	60fb      	str	r3, [r7, #12]
   return(result);
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	f023 0310 	bic.w	r3, r3, #16
 800bd9a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	461a      	mov	r2, r3
 800bda4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800bda8:	61fb      	str	r3, [r7, #28]
 800bdaa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdac:	69b9      	ldr	r1, [r7, #24]
 800bdae:	69fa      	ldr	r2, [r7, #28]
 800bdb0:	e841 2300 	strex	r3, r2, [r1]
 800bdb4:	617b      	str	r3, [r7, #20]
   return(result);
 800bdb6:	697b      	ldr	r3, [r7, #20]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d1e4      	bne.n	800bd86 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	2202      	movs	r2, #2
 800bdc0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bdc2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800bdc6:	4619      	mov	r1, r3
 800bdc8:	6878      	ldr	r0, [r7, #4]
 800bdca:	f000 f881 	bl	800bed0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bdce:	e063      	b.n	800be98 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800bdd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bdd4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d00e      	beq.n	800bdfa <HAL_UART_IRQHandler+0x6c6>
 800bddc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bde0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d008      	beq.n	800bdfa <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800bdf0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800bdf2:	6878      	ldr	r0, [r7, #4]
 800bdf4:	f002 f8fe 	bl	800dff4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bdf8:	e051      	b.n	800be9e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800bdfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bdfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800be02:	2b00      	cmp	r3, #0
 800be04:	d014      	beq.n	800be30 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800be06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800be0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d105      	bne.n	800be1e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800be12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800be16:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d008      	beq.n	800be30 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800be22:	2b00      	cmp	r3, #0
 800be24:	d03a      	beq.n	800be9c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800be2a:	6878      	ldr	r0, [r7, #4]
 800be2c:	4798      	blx	r3
    }
    return;
 800be2e:	e035      	b.n	800be9c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800be30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800be34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d009      	beq.n	800be50 <HAL_UART_IRQHandler+0x71c>
 800be3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800be40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be44:	2b00      	cmp	r3, #0
 800be46:	d003      	beq.n	800be50 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800be48:	6878      	ldr	r0, [r7, #4]
 800be4a:	f001 fb8c 	bl	800d566 <UART_EndTransmit_IT>
    return;
 800be4e:	e026      	b.n	800be9e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800be50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800be54:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d009      	beq.n	800be70 <HAL_UART_IRQHandler+0x73c>
 800be5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800be60:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800be64:	2b00      	cmp	r3, #0
 800be66:	d003      	beq.n	800be70 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800be68:	6878      	ldr	r0, [r7, #4]
 800be6a:	f002 f8d7 	bl	800e01c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800be6e:	e016      	b.n	800be9e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800be70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800be74:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d010      	beq.n	800be9e <HAL_UART_IRQHandler+0x76a>
 800be7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800be80:	2b00      	cmp	r3, #0
 800be82:	da0c      	bge.n	800be9e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800be84:	6878      	ldr	r0, [r7, #4]
 800be86:	f002 f8bf 	bl	800e008 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800be8a:	e008      	b.n	800be9e <HAL_UART_IRQHandler+0x76a>
      return;
 800be8c:	bf00      	nop
 800be8e:	e006      	b.n	800be9e <HAL_UART_IRQHandler+0x76a>
    return;
 800be90:	bf00      	nop
 800be92:	e004      	b.n	800be9e <HAL_UART_IRQHandler+0x76a>
      return;
 800be94:	bf00      	nop
 800be96:	e002      	b.n	800be9e <HAL_UART_IRQHandler+0x76a>
      return;
 800be98:	bf00      	nop
 800be9a:	e000      	b.n	800be9e <HAL_UART_IRQHandler+0x76a>
    return;
 800be9c:	bf00      	nop
  }
}
 800be9e:	37e8      	adds	r7, #232	@ 0xe8
 800bea0:	46bd      	mov	sp, r7
 800bea2:	bd80      	pop	{r7, pc}
 800bea4:	effffffe 	.word	0xeffffffe

0800bea8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bea8:	b480      	push	{r7}
 800beaa:	b083      	sub	sp, #12
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800beb0:	bf00      	nop
 800beb2:	370c      	adds	r7, #12
 800beb4:	46bd      	mov	sp, r7
 800beb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beba:	4770      	bx	lr

0800bebc <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800bebc:	b480      	push	{r7}
 800bebe:	b083      	sub	sp, #12
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800bec4:	bf00      	nop
 800bec6:	370c      	adds	r7, #12
 800bec8:	46bd      	mov	sp, r7
 800beca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bece:	4770      	bx	lr

0800bed0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bed0:	b480      	push	{r7}
 800bed2:	b083      	sub	sp, #12
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
 800bed8:	460b      	mov	r3, r1
 800beda:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bedc:	bf00      	nop
 800bede:	370c      	adds	r7, #12
 800bee0:	46bd      	mov	sp, r7
 800bee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee6:	4770      	bx	lr

0800bee8 <HAL_HalfDuplex_EnableTransmitter>:
  * @brief  Enable the UART transmitter and disable the UART receiver.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 800bee8:	b480      	push	{r7}
 800beea:	b08f      	sub	sp, #60	@ 0x3c
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bef6:	2b01      	cmp	r3, #1
 800bef8:	d101      	bne.n	800befe <HAL_HalfDuplex_EnableTransmitter+0x16>
 800befa:	2302      	movs	r3, #2
 800befc:	e042      	b.n	800bf84 <HAL_HalfDuplex_EnableTransmitter+0x9c>
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	2201      	movs	r2, #1
 800bf02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	2224      	movs	r2, #36	@ 0x24
 800bf0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf14:	6a3b      	ldr	r3, [r7, #32]
 800bf16:	e853 3f00 	ldrex	r3, [r3]
 800bf1a:	61fb      	str	r3, [r7, #28]
   return(result);
 800bf1c:	69fb      	ldr	r3, [r7, #28]
 800bf1e:	f023 030c 	bic.w	r3, r3, #12
 800bf22:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	461a      	mov	r2, r3
 800bf2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bf2e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf30:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bf32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bf34:	e841 2300 	strex	r3, r2, [r1]
 800bf38:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bf3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d1e6      	bne.n	800bf0e <HAL_HalfDuplex_EnableTransmitter+0x26>

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	e853 3f00 	ldrex	r3, [r3]
 800bf4c:	60bb      	str	r3, [r7, #8]
   return(result);
 800bf4e:	68bb      	ldr	r3, [r7, #8]
 800bf50:	f043 0308 	orr.w	r3, r3, #8
 800bf54:	633b      	str	r3, [r7, #48]	@ 0x30
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	461a      	mov	r2, r3
 800bf5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf5e:	61bb      	str	r3, [r7, #24]
 800bf60:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf62:	6979      	ldr	r1, [r7, #20]
 800bf64:	69ba      	ldr	r2, [r7, #24]
 800bf66:	e841 2300 	strex	r3, r2, [r1]
 800bf6a:	613b      	str	r3, [r7, #16]
   return(result);
 800bf6c:	693b      	ldr	r3, [r7, #16]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d1e6      	bne.n	800bf40 <HAL_HalfDuplex_EnableTransmitter+0x58>

  huart->gState = HAL_UART_STATE_READY;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	2220      	movs	r2, #32
 800bf76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UNLOCK(huart);
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	2200      	movs	r2, #0
 800bf7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bf82:	2300      	movs	r3, #0
}
 800bf84:	4618      	mov	r0, r3
 800bf86:	373c      	adds	r7, #60	@ 0x3c
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8e:	4770      	bx	lr

0800bf90 <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 800bf90:	b480      	push	{r7}
 800bf92:	b08f      	sub	sp, #60	@ 0x3c
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bf9e:	2b01      	cmp	r3, #1
 800bfa0:	d101      	bne.n	800bfa6 <HAL_HalfDuplex_EnableReceiver+0x16>
 800bfa2:	2302      	movs	r3, #2
 800bfa4:	e042      	b.n	800c02c <HAL_HalfDuplex_EnableReceiver+0x9c>
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	2201      	movs	r2, #1
 800bfaa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	2224      	movs	r2, #36	@ 0x24
 800bfb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfbc:	6a3b      	ldr	r3, [r7, #32]
 800bfbe:	e853 3f00 	ldrex	r3, [r3]
 800bfc2:	61fb      	str	r3, [r7, #28]
   return(result);
 800bfc4:	69fb      	ldr	r3, [r7, #28]
 800bfc6:	f023 030c 	bic.w	r3, r3, #12
 800bfca:	637b      	str	r3, [r7, #52]	@ 0x34
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	461a      	mov	r2, r3
 800bfd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bfd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bfd6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfd8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bfda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bfdc:	e841 2300 	strex	r3, r2, [r1]
 800bfe0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bfe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d1e6      	bne.n	800bfb6 <HAL_HalfDuplex_EnableReceiver+0x26>

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	e853 3f00 	ldrex	r3, [r3]
 800bff4:	60bb      	str	r3, [r7, #8]
   return(result);
 800bff6:	68bb      	ldr	r3, [r7, #8]
 800bff8:	f043 0304 	orr.w	r3, r3, #4
 800bffc:	633b      	str	r3, [r7, #48]	@ 0x30
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	461a      	mov	r2, r3
 800c004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c006:	61bb      	str	r3, [r7, #24]
 800c008:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c00a:	6979      	ldr	r1, [r7, #20]
 800c00c:	69ba      	ldr	r2, [r7, #24]
 800c00e:	e841 2300 	strex	r3, r2, [r1]
 800c012:	613b      	str	r3, [r7, #16]
   return(result);
 800c014:	693b      	ldr	r3, [r7, #16]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d1e6      	bne.n	800bfe8 <HAL_HalfDuplex_EnableReceiver+0x58>

  huart->gState = HAL_UART_STATE_READY;
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	2220      	movs	r2, #32
 800c01e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UNLOCK(huart);
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	2200      	movs	r2, #0
 800c026:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c02a:	2300      	movs	r3, #0
}
 800c02c:	4618      	mov	r0, r3
 800c02e:	373c      	adds	r7, #60	@ 0x3c
 800c030:	46bd      	mov	sp, r7
 800c032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c036:	4770      	bx	lr

0800c038 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 800c038:	b480      	push	{r7}
 800c03a:	b085      	sub	sp, #20
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c046:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c04e:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800c050:	68fa      	ldr	r2, [r7, #12]
 800c052:	68bb      	ldr	r3, [r7, #8]
 800c054:	4313      	orrs	r3, r2
}
 800c056:	4618      	mov	r0, r3
 800c058:	3714      	adds	r7, #20
 800c05a:	46bd      	mov	sp, r7
 800c05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c060:	4770      	bx	lr
	...

0800c064 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c064:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c068:	b092      	sub	sp, #72	@ 0x48
 800c06a:	af00      	add	r7, sp, #0
 800c06c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c06e:	2300      	movs	r3, #0
 800c070:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c074:	697b      	ldr	r3, [r7, #20]
 800c076:	689a      	ldr	r2, [r3, #8]
 800c078:	697b      	ldr	r3, [r7, #20]
 800c07a:	691b      	ldr	r3, [r3, #16]
 800c07c:	431a      	orrs	r2, r3
 800c07e:	697b      	ldr	r3, [r7, #20]
 800c080:	695b      	ldr	r3, [r3, #20]
 800c082:	431a      	orrs	r2, r3
 800c084:	697b      	ldr	r3, [r7, #20]
 800c086:	69db      	ldr	r3, [r3, #28]
 800c088:	4313      	orrs	r3, r2
 800c08a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c08c:	697b      	ldr	r3, [r7, #20]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	681a      	ldr	r2, [r3, #0]
 800c092:	4bbe      	ldr	r3, [pc, #760]	@ (800c38c <UART_SetConfig+0x328>)
 800c094:	4013      	ands	r3, r2
 800c096:	697a      	ldr	r2, [r7, #20]
 800c098:	6812      	ldr	r2, [r2, #0]
 800c09a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c09c:	430b      	orrs	r3, r1
 800c09e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c0a0:	697b      	ldr	r3, [r7, #20]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	685b      	ldr	r3, [r3, #4]
 800c0a6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c0aa:	697b      	ldr	r3, [r7, #20]
 800c0ac:	68da      	ldr	r2, [r3, #12]
 800c0ae:	697b      	ldr	r3, [r7, #20]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	430a      	orrs	r2, r1
 800c0b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c0b6:	697b      	ldr	r3, [r7, #20]
 800c0b8:	699b      	ldr	r3, [r3, #24]
 800c0ba:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c0bc:	697b      	ldr	r3, [r7, #20]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	4ab3      	ldr	r2, [pc, #716]	@ (800c390 <UART_SetConfig+0x32c>)
 800c0c2:	4293      	cmp	r3, r2
 800c0c4:	d004      	beq.n	800c0d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c0c6:	697b      	ldr	r3, [r7, #20]
 800c0c8:	6a1b      	ldr	r3, [r3, #32]
 800c0ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c0cc:	4313      	orrs	r3, r2
 800c0ce:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c0d0:	697b      	ldr	r3, [r7, #20]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	689a      	ldr	r2, [r3, #8]
 800c0d6:	4baf      	ldr	r3, [pc, #700]	@ (800c394 <UART_SetConfig+0x330>)
 800c0d8:	4013      	ands	r3, r2
 800c0da:	697a      	ldr	r2, [r7, #20]
 800c0dc:	6812      	ldr	r2, [r2, #0]
 800c0de:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c0e0:	430b      	orrs	r3, r1
 800c0e2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c0e4:	697b      	ldr	r3, [r7, #20]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0ea:	f023 010f 	bic.w	r1, r3, #15
 800c0ee:	697b      	ldr	r3, [r7, #20]
 800c0f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c0f2:	697b      	ldr	r3, [r7, #20]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	430a      	orrs	r2, r1
 800c0f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c0fa:	697b      	ldr	r3, [r7, #20]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	4aa6      	ldr	r2, [pc, #664]	@ (800c398 <UART_SetConfig+0x334>)
 800c100:	4293      	cmp	r3, r2
 800c102:	d177      	bne.n	800c1f4 <UART_SetConfig+0x190>
 800c104:	4ba5      	ldr	r3, [pc, #660]	@ (800c39c <UART_SetConfig+0x338>)
 800c106:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c108:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c10c:	2b28      	cmp	r3, #40	@ 0x28
 800c10e:	d86d      	bhi.n	800c1ec <UART_SetConfig+0x188>
 800c110:	a201      	add	r2, pc, #4	@ (adr r2, 800c118 <UART_SetConfig+0xb4>)
 800c112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c116:	bf00      	nop
 800c118:	0800c1bd 	.word	0x0800c1bd
 800c11c:	0800c1ed 	.word	0x0800c1ed
 800c120:	0800c1ed 	.word	0x0800c1ed
 800c124:	0800c1ed 	.word	0x0800c1ed
 800c128:	0800c1ed 	.word	0x0800c1ed
 800c12c:	0800c1ed 	.word	0x0800c1ed
 800c130:	0800c1ed 	.word	0x0800c1ed
 800c134:	0800c1ed 	.word	0x0800c1ed
 800c138:	0800c1c5 	.word	0x0800c1c5
 800c13c:	0800c1ed 	.word	0x0800c1ed
 800c140:	0800c1ed 	.word	0x0800c1ed
 800c144:	0800c1ed 	.word	0x0800c1ed
 800c148:	0800c1ed 	.word	0x0800c1ed
 800c14c:	0800c1ed 	.word	0x0800c1ed
 800c150:	0800c1ed 	.word	0x0800c1ed
 800c154:	0800c1ed 	.word	0x0800c1ed
 800c158:	0800c1cd 	.word	0x0800c1cd
 800c15c:	0800c1ed 	.word	0x0800c1ed
 800c160:	0800c1ed 	.word	0x0800c1ed
 800c164:	0800c1ed 	.word	0x0800c1ed
 800c168:	0800c1ed 	.word	0x0800c1ed
 800c16c:	0800c1ed 	.word	0x0800c1ed
 800c170:	0800c1ed 	.word	0x0800c1ed
 800c174:	0800c1ed 	.word	0x0800c1ed
 800c178:	0800c1d5 	.word	0x0800c1d5
 800c17c:	0800c1ed 	.word	0x0800c1ed
 800c180:	0800c1ed 	.word	0x0800c1ed
 800c184:	0800c1ed 	.word	0x0800c1ed
 800c188:	0800c1ed 	.word	0x0800c1ed
 800c18c:	0800c1ed 	.word	0x0800c1ed
 800c190:	0800c1ed 	.word	0x0800c1ed
 800c194:	0800c1ed 	.word	0x0800c1ed
 800c198:	0800c1dd 	.word	0x0800c1dd
 800c19c:	0800c1ed 	.word	0x0800c1ed
 800c1a0:	0800c1ed 	.word	0x0800c1ed
 800c1a4:	0800c1ed 	.word	0x0800c1ed
 800c1a8:	0800c1ed 	.word	0x0800c1ed
 800c1ac:	0800c1ed 	.word	0x0800c1ed
 800c1b0:	0800c1ed 	.word	0x0800c1ed
 800c1b4:	0800c1ed 	.word	0x0800c1ed
 800c1b8:	0800c1e5 	.word	0x0800c1e5
 800c1bc:	2301      	movs	r3, #1
 800c1be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1c2:	e222      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c1c4:	2304      	movs	r3, #4
 800c1c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1ca:	e21e      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c1cc:	2308      	movs	r3, #8
 800c1ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1d2:	e21a      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c1d4:	2310      	movs	r3, #16
 800c1d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1da:	e216      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c1dc:	2320      	movs	r3, #32
 800c1de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1e2:	e212      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c1e4:	2340      	movs	r3, #64	@ 0x40
 800c1e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1ea:	e20e      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c1ec:	2380      	movs	r3, #128	@ 0x80
 800c1ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1f2:	e20a      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c1f4:	697b      	ldr	r3, [r7, #20]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	4a69      	ldr	r2, [pc, #420]	@ (800c3a0 <UART_SetConfig+0x33c>)
 800c1fa:	4293      	cmp	r3, r2
 800c1fc:	d130      	bne.n	800c260 <UART_SetConfig+0x1fc>
 800c1fe:	4b67      	ldr	r3, [pc, #412]	@ (800c39c <UART_SetConfig+0x338>)
 800c200:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c202:	f003 0307 	and.w	r3, r3, #7
 800c206:	2b05      	cmp	r3, #5
 800c208:	d826      	bhi.n	800c258 <UART_SetConfig+0x1f4>
 800c20a:	a201      	add	r2, pc, #4	@ (adr r2, 800c210 <UART_SetConfig+0x1ac>)
 800c20c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c210:	0800c229 	.word	0x0800c229
 800c214:	0800c231 	.word	0x0800c231
 800c218:	0800c239 	.word	0x0800c239
 800c21c:	0800c241 	.word	0x0800c241
 800c220:	0800c249 	.word	0x0800c249
 800c224:	0800c251 	.word	0x0800c251
 800c228:	2300      	movs	r3, #0
 800c22a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c22e:	e1ec      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c230:	2304      	movs	r3, #4
 800c232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c236:	e1e8      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c238:	2308      	movs	r3, #8
 800c23a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c23e:	e1e4      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c240:	2310      	movs	r3, #16
 800c242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c246:	e1e0      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c248:	2320      	movs	r3, #32
 800c24a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c24e:	e1dc      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c250:	2340      	movs	r3, #64	@ 0x40
 800c252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c256:	e1d8      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c258:	2380      	movs	r3, #128	@ 0x80
 800c25a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c25e:	e1d4      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c260:	697b      	ldr	r3, [r7, #20]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	4a4f      	ldr	r2, [pc, #316]	@ (800c3a4 <UART_SetConfig+0x340>)
 800c266:	4293      	cmp	r3, r2
 800c268:	d130      	bne.n	800c2cc <UART_SetConfig+0x268>
 800c26a:	4b4c      	ldr	r3, [pc, #304]	@ (800c39c <UART_SetConfig+0x338>)
 800c26c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c26e:	f003 0307 	and.w	r3, r3, #7
 800c272:	2b05      	cmp	r3, #5
 800c274:	d826      	bhi.n	800c2c4 <UART_SetConfig+0x260>
 800c276:	a201      	add	r2, pc, #4	@ (adr r2, 800c27c <UART_SetConfig+0x218>)
 800c278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c27c:	0800c295 	.word	0x0800c295
 800c280:	0800c29d 	.word	0x0800c29d
 800c284:	0800c2a5 	.word	0x0800c2a5
 800c288:	0800c2ad 	.word	0x0800c2ad
 800c28c:	0800c2b5 	.word	0x0800c2b5
 800c290:	0800c2bd 	.word	0x0800c2bd
 800c294:	2300      	movs	r3, #0
 800c296:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c29a:	e1b6      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c29c:	2304      	movs	r3, #4
 800c29e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2a2:	e1b2      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c2a4:	2308      	movs	r3, #8
 800c2a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2aa:	e1ae      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c2ac:	2310      	movs	r3, #16
 800c2ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2b2:	e1aa      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c2b4:	2320      	movs	r3, #32
 800c2b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2ba:	e1a6      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c2bc:	2340      	movs	r3, #64	@ 0x40
 800c2be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2c2:	e1a2      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c2c4:	2380      	movs	r3, #128	@ 0x80
 800c2c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2ca:	e19e      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c2cc:	697b      	ldr	r3, [r7, #20]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	4a35      	ldr	r2, [pc, #212]	@ (800c3a8 <UART_SetConfig+0x344>)
 800c2d2:	4293      	cmp	r3, r2
 800c2d4:	d130      	bne.n	800c338 <UART_SetConfig+0x2d4>
 800c2d6:	4b31      	ldr	r3, [pc, #196]	@ (800c39c <UART_SetConfig+0x338>)
 800c2d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c2da:	f003 0307 	and.w	r3, r3, #7
 800c2de:	2b05      	cmp	r3, #5
 800c2e0:	d826      	bhi.n	800c330 <UART_SetConfig+0x2cc>
 800c2e2:	a201      	add	r2, pc, #4	@ (adr r2, 800c2e8 <UART_SetConfig+0x284>)
 800c2e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2e8:	0800c301 	.word	0x0800c301
 800c2ec:	0800c309 	.word	0x0800c309
 800c2f0:	0800c311 	.word	0x0800c311
 800c2f4:	0800c319 	.word	0x0800c319
 800c2f8:	0800c321 	.word	0x0800c321
 800c2fc:	0800c329 	.word	0x0800c329
 800c300:	2300      	movs	r3, #0
 800c302:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c306:	e180      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c308:	2304      	movs	r3, #4
 800c30a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c30e:	e17c      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c310:	2308      	movs	r3, #8
 800c312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c316:	e178      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c318:	2310      	movs	r3, #16
 800c31a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c31e:	e174      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c320:	2320      	movs	r3, #32
 800c322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c326:	e170      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c328:	2340      	movs	r3, #64	@ 0x40
 800c32a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c32e:	e16c      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c330:	2380      	movs	r3, #128	@ 0x80
 800c332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c336:	e168      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c338:	697b      	ldr	r3, [r7, #20]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	4a1b      	ldr	r2, [pc, #108]	@ (800c3ac <UART_SetConfig+0x348>)
 800c33e:	4293      	cmp	r3, r2
 800c340:	d142      	bne.n	800c3c8 <UART_SetConfig+0x364>
 800c342:	4b16      	ldr	r3, [pc, #88]	@ (800c39c <UART_SetConfig+0x338>)
 800c344:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c346:	f003 0307 	and.w	r3, r3, #7
 800c34a:	2b05      	cmp	r3, #5
 800c34c:	d838      	bhi.n	800c3c0 <UART_SetConfig+0x35c>
 800c34e:	a201      	add	r2, pc, #4	@ (adr r2, 800c354 <UART_SetConfig+0x2f0>)
 800c350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c354:	0800c36d 	.word	0x0800c36d
 800c358:	0800c375 	.word	0x0800c375
 800c35c:	0800c37d 	.word	0x0800c37d
 800c360:	0800c385 	.word	0x0800c385
 800c364:	0800c3b1 	.word	0x0800c3b1
 800c368:	0800c3b9 	.word	0x0800c3b9
 800c36c:	2300      	movs	r3, #0
 800c36e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c372:	e14a      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c374:	2304      	movs	r3, #4
 800c376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c37a:	e146      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c37c:	2308      	movs	r3, #8
 800c37e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c382:	e142      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c384:	2310      	movs	r3, #16
 800c386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c38a:	e13e      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c38c:	cfff69f3 	.word	0xcfff69f3
 800c390:	58000c00 	.word	0x58000c00
 800c394:	11fff4ff 	.word	0x11fff4ff
 800c398:	40011000 	.word	0x40011000
 800c39c:	58024400 	.word	0x58024400
 800c3a0:	40004400 	.word	0x40004400
 800c3a4:	40004800 	.word	0x40004800
 800c3a8:	40004c00 	.word	0x40004c00
 800c3ac:	40005000 	.word	0x40005000
 800c3b0:	2320      	movs	r3, #32
 800c3b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3b6:	e128      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c3b8:	2340      	movs	r3, #64	@ 0x40
 800c3ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3be:	e124      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c3c0:	2380      	movs	r3, #128	@ 0x80
 800c3c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3c6:	e120      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c3c8:	697b      	ldr	r3, [r7, #20]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	4acb      	ldr	r2, [pc, #812]	@ (800c6fc <UART_SetConfig+0x698>)
 800c3ce:	4293      	cmp	r3, r2
 800c3d0:	d176      	bne.n	800c4c0 <UART_SetConfig+0x45c>
 800c3d2:	4bcb      	ldr	r3, [pc, #812]	@ (800c700 <UART_SetConfig+0x69c>)
 800c3d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c3d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c3da:	2b28      	cmp	r3, #40	@ 0x28
 800c3dc:	d86c      	bhi.n	800c4b8 <UART_SetConfig+0x454>
 800c3de:	a201      	add	r2, pc, #4	@ (adr r2, 800c3e4 <UART_SetConfig+0x380>)
 800c3e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3e4:	0800c489 	.word	0x0800c489
 800c3e8:	0800c4b9 	.word	0x0800c4b9
 800c3ec:	0800c4b9 	.word	0x0800c4b9
 800c3f0:	0800c4b9 	.word	0x0800c4b9
 800c3f4:	0800c4b9 	.word	0x0800c4b9
 800c3f8:	0800c4b9 	.word	0x0800c4b9
 800c3fc:	0800c4b9 	.word	0x0800c4b9
 800c400:	0800c4b9 	.word	0x0800c4b9
 800c404:	0800c491 	.word	0x0800c491
 800c408:	0800c4b9 	.word	0x0800c4b9
 800c40c:	0800c4b9 	.word	0x0800c4b9
 800c410:	0800c4b9 	.word	0x0800c4b9
 800c414:	0800c4b9 	.word	0x0800c4b9
 800c418:	0800c4b9 	.word	0x0800c4b9
 800c41c:	0800c4b9 	.word	0x0800c4b9
 800c420:	0800c4b9 	.word	0x0800c4b9
 800c424:	0800c499 	.word	0x0800c499
 800c428:	0800c4b9 	.word	0x0800c4b9
 800c42c:	0800c4b9 	.word	0x0800c4b9
 800c430:	0800c4b9 	.word	0x0800c4b9
 800c434:	0800c4b9 	.word	0x0800c4b9
 800c438:	0800c4b9 	.word	0x0800c4b9
 800c43c:	0800c4b9 	.word	0x0800c4b9
 800c440:	0800c4b9 	.word	0x0800c4b9
 800c444:	0800c4a1 	.word	0x0800c4a1
 800c448:	0800c4b9 	.word	0x0800c4b9
 800c44c:	0800c4b9 	.word	0x0800c4b9
 800c450:	0800c4b9 	.word	0x0800c4b9
 800c454:	0800c4b9 	.word	0x0800c4b9
 800c458:	0800c4b9 	.word	0x0800c4b9
 800c45c:	0800c4b9 	.word	0x0800c4b9
 800c460:	0800c4b9 	.word	0x0800c4b9
 800c464:	0800c4a9 	.word	0x0800c4a9
 800c468:	0800c4b9 	.word	0x0800c4b9
 800c46c:	0800c4b9 	.word	0x0800c4b9
 800c470:	0800c4b9 	.word	0x0800c4b9
 800c474:	0800c4b9 	.word	0x0800c4b9
 800c478:	0800c4b9 	.word	0x0800c4b9
 800c47c:	0800c4b9 	.word	0x0800c4b9
 800c480:	0800c4b9 	.word	0x0800c4b9
 800c484:	0800c4b1 	.word	0x0800c4b1
 800c488:	2301      	movs	r3, #1
 800c48a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c48e:	e0bc      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c490:	2304      	movs	r3, #4
 800c492:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c496:	e0b8      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c498:	2308      	movs	r3, #8
 800c49a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c49e:	e0b4      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c4a0:	2310      	movs	r3, #16
 800c4a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4a6:	e0b0      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c4a8:	2320      	movs	r3, #32
 800c4aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4ae:	e0ac      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c4b0:	2340      	movs	r3, #64	@ 0x40
 800c4b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4b6:	e0a8      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c4b8:	2380      	movs	r3, #128	@ 0x80
 800c4ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4be:	e0a4      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c4c0:	697b      	ldr	r3, [r7, #20]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	4a8f      	ldr	r2, [pc, #572]	@ (800c704 <UART_SetConfig+0x6a0>)
 800c4c6:	4293      	cmp	r3, r2
 800c4c8:	d130      	bne.n	800c52c <UART_SetConfig+0x4c8>
 800c4ca:	4b8d      	ldr	r3, [pc, #564]	@ (800c700 <UART_SetConfig+0x69c>)
 800c4cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c4ce:	f003 0307 	and.w	r3, r3, #7
 800c4d2:	2b05      	cmp	r3, #5
 800c4d4:	d826      	bhi.n	800c524 <UART_SetConfig+0x4c0>
 800c4d6:	a201      	add	r2, pc, #4	@ (adr r2, 800c4dc <UART_SetConfig+0x478>)
 800c4d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4dc:	0800c4f5 	.word	0x0800c4f5
 800c4e0:	0800c4fd 	.word	0x0800c4fd
 800c4e4:	0800c505 	.word	0x0800c505
 800c4e8:	0800c50d 	.word	0x0800c50d
 800c4ec:	0800c515 	.word	0x0800c515
 800c4f0:	0800c51d 	.word	0x0800c51d
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4fa:	e086      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c4fc:	2304      	movs	r3, #4
 800c4fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c502:	e082      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c504:	2308      	movs	r3, #8
 800c506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c50a:	e07e      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c50c:	2310      	movs	r3, #16
 800c50e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c512:	e07a      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c514:	2320      	movs	r3, #32
 800c516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c51a:	e076      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c51c:	2340      	movs	r3, #64	@ 0x40
 800c51e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c522:	e072      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c524:	2380      	movs	r3, #128	@ 0x80
 800c526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c52a:	e06e      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c52c:	697b      	ldr	r3, [r7, #20]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	4a75      	ldr	r2, [pc, #468]	@ (800c708 <UART_SetConfig+0x6a4>)
 800c532:	4293      	cmp	r3, r2
 800c534:	d130      	bne.n	800c598 <UART_SetConfig+0x534>
 800c536:	4b72      	ldr	r3, [pc, #456]	@ (800c700 <UART_SetConfig+0x69c>)
 800c538:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c53a:	f003 0307 	and.w	r3, r3, #7
 800c53e:	2b05      	cmp	r3, #5
 800c540:	d826      	bhi.n	800c590 <UART_SetConfig+0x52c>
 800c542:	a201      	add	r2, pc, #4	@ (adr r2, 800c548 <UART_SetConfig+0x4e4>)
 800c544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c548:	0800c561 	.word	0x0800c561
 800c54c:	0800c569 	.word	0x0800c569
 800c550:	0800c571 	.word	0x0800c571
 800c554:	0800c579 	.word	0x0800c579
 800c558:	0800c581 	.word	0x0800c581
 800c55c:	0800c589 	.word	0x0800c589
 800c560:	2300      	movs	r3, #0
 800c562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c566:	e050      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c568:	2304      	movs	r3, #4
 800c56a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c56e:	e04c      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c570:	2308      	movs	r3, #8
 800c572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c576:	e048      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c578:	2310      	movs	r3, #16
 800c57a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c57e:	e044      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c580:	2320      	movs	r3, #32
 800c582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c586:	e040      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c588:	2340      	movs	r3, #64	@ 0x40
 800c58a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c58e:	e03c      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c590:	2380      	movs	r3, #128	@ 0x80
 800c592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c596:	e038      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c598:	697b      	ldr	r3, [r7, #20]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	4a5b      	ldr	r2, [pc, #364]	@ (800c70c <UART_SetConfig+0x6a8>)
 800c59e:	4293      	cmp	r3, r2
 800c5a0:	d130      	bne.n	800c604 <UART_SetConfig+0x5a0>
 800c5a2:	4b57      	ldr	r3, [pc, #348]	@ (800c700 <UART_SetConfig+0x69c>)
 800c5a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c5a6:	f003 0307 	and.w	r3, r3, #7
 800c5aa:	2b05      	cmp	r3, #5
 800c5ac:	d826      	bhi.n	800c5fc <UART_SetConfig+0x598>
 800c5ae:	a201      	add	r2, pc, #4	@ (adr r2, 800c5b4 <UART_SetConfig+0x550>)
 800c5b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5b4:	0800c5cd 	.word	0x0800c5cd
 800c5b8:	0800c5d5 	.word	0x0800c5d5
 800c5bc:	0800c5dd 	.word	0x0800c5dd
 800c5c0:	0800c5e5 	.word	0x0800c5e5
 800c5c4:	0800c5ed 	.word	0x0800c5ed
 800c5c8:	0800c5f5 	.word	0x0800c5f5
 800c5cc:	2302      	movs	r3, #2
 800c5ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5d2:	e01a      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c5d4:	2304      	movs	r3, #4
 800c5d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5da:	e016      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c5dc:	2308      	movs	r3, #8
 800c5de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5e2:	e012      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c5e4:	2310      	movs	r3, #16
 800c5e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5ea:	e00e      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c5ec:	2320      	movs	r3, #32
 800c5ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5f2:	e00a      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c5f4:	2340      	movs	r3, #64	@ 0x40
 800c5f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5fa:	e006      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c5fc:	2380      	movs	r3, #128	@ 0x80
 800c5fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c602:	e002      	b.n	800c60a <UART_SetConfig+0x5a6>
 800c604:	2380      	movs	r3, #128	@ 0x80
 800c606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c60a:	697b      	ldr	r3, [r7, #20]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	4a3f      	ldr	r2, [pc, #252]	@ (800c70c <UART_SetConfig+0x6a8>)
 800c610:	4293      	cmp	r3, r2
 800c612:	f040 80f8 	bne.w	800c806 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c616:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c61a:	2b20      	cmp	r3, #32
 800c61c:	dc46      	bgt.n	800c6ac <UART_SetConfig+0x648>
 800c61e:	2b02      	cmp	r3, #2
 800c620:	f2c0 8082 	blt.w	800c728 <UART_SetConfig+0x6c4>
 800c624:	3b02      	subs	r3, #2
 800c626:	2b1e      	cmp	r3, #30
 800c628:	d87e      	bhi.n	800c728 <UART_SetConfig+0x6c4>
 800c62a:	a201      	add	r2, pc, #4	@ (adr r2, 800c630 <UART_SetConfig+0x5cc>)
 800c62c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c630:	0800c6b3 	.word	0x0800c6b3
 800c634:	0800c729 	.word	0x0800c729
 800c638:	0800c6bb 	.word	0x0800c6bb
 800c63c:	0800c729 	.word	0x0800c729
 800c640:	0800c729 	.word	0x0800c729
 800c644:	0800c729 	.word	0x0800c729
 800c648:	0800c6cb 	.word	0x0800c6cb
 800c64c:	0800c729 	.word	0x0800c729
 800c650:	0800c729 	.word	0x0800c729
 800c654:	0800c729 	.word	0x0800c729
 800c658:	0800c729 	.word	0x0800c729
 800c65c:	0800c729 	.word	0x0800c729
 800c660:	0800c729 	.word	0x0800c729
 800c664:	0800c729 	.word	0x0800c729
 800c668:	0800c6db 	.word	0x0800c6db
 800c66c:	0800c729 	.word	0x0800c729
 800c670:	0800c729 	.word	0x0800c729
 800c674:	0800c729 	.word	0x0800c729
 800c678:	0800c729 	.word	0x0800c729
 800c67c:	0800c729 	.word	0x0800c729
 800c680:	0800c729 	.word	0x0800c729
 800c684:	0800c729 	.word	0x0800c729
 800c688:	0800c729 	.word	0x0800c729
 800c68c:	0800c729 	.word	0x0800c729
 800c690:	0800c729 	.word	0x0800c729
 800c694:	0800c729 	.word	0x0800c729
 800c698:	0800c729 	.word	0x0800c729
 800c69c:	0800c729 	.word	0x0800c729
 800c6a0:	0800c729 	.word	0x0800c729
 800c6a4:	0800c729 	.word	0x0800c729
 800c6a8:	0800c71b 	.word	0x0800c71b
 800c6ac:	2b40      	cmp	r3, #64	@ 0x40
 800c6ae:	d037      	beq.n	800c720 <UART_SetConfig+0x6bc>
 800c6b0:	e03a      	b.n	800c728 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c6b2:	f7fb fc05 	bl	8007ec0 <HAL_RCCEx_GetD3PCLK1Freq>
 800c6b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c6b8:	e03c      	b.n	800c734 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c6ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c6be:	4618      	mov	r0, r3
 800c6c0:	f7fb fc14 	bl	8007eec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c6c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c6c8:	e034      	b.n	800c734 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c6ca:	f107 0318 	add.w	r3, r7, #24
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	f7fb fd60 	bl	8008194 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c6d4:	69fb      	ldr	r3, [r7, #28]
 800c6d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c6d8:	e02c      	b.n	800c734 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c6da:	4b09      	ldr	r3, [pc, #36]	@ (800c700 <UART_SetConfig+0x69c>)
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	f003 0320 	and.w	r3, r3, #32
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d016      	beq.n	800c714 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c6e6:	4b06      	ldr	r3, [pc, #24]	@ (800c700 <UART_SetConfig+0x69c>)
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	08db      	lsrs	r3, r3, #3
 800c6ec:	f003 0303 	and.w	r3, r3, #3
 800c6f0:	4a07      	ldr	r2, [pc, #28]	@ (800c710 <UART_SetConfig+0x6ac>)
 800c6f2:	fa22 f303 	lsr.w	r3, r2, r3
 800c6f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c6f8:	e01c      	b.n	800c734 <UART_SetConfig+0x6d0>
 800c6fa:	bf00      	nop
 800c6fc:	40011400 	.word	0x40011400
 800c700:	58024400 	.word	0x58024400
 800c704:	40007800 	.word	0x40007800
 800c708:	40007c00 	.word	0x40007c00
 800c70c:	58000c00 	.word	0x58000c00
 800c710:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800c714:	4b9d      	ldr	r3, [pc, #628]	@ (800c98c <UART_SetConfig+0x928>)
 800c716:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c718:	e00c      	b.n	800c734 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c71a:	4b9d      	ldr	r3, [pc, #628]	@ (800c990 <UART_SetConfig+0x92c>)
 800c71c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c71e:	e009      	b.n	800c734 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c720:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c724:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c726:	e005      	b.n	800c734 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800c728:	2300      	movs	r3, #0
 800c72a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c72c:	2301      	movs	r3, #1
 800c72e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c732:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c734:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c736:	2b00      	cmp	r3, #0
 800c738:	f000 81de 	beq.w	800caf8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c73c:	697b      	ldr	r3, [r7, #20]
 800c73e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c740:	4a94      	ldr	r2, [pc, #592]	@ (800c994 <UART_SetConfig+0x930>)
 800c742:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c746:	461a      	mov	r2, r3
 800c748:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c74a:	fbb3 f3f2 	udiv	r3, r3, r2
 800c74e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c750:	697b      	ldr	r3, [r7, #20]
 800c752:	685a      	ldr	r2, [r3, #4]
 800c754:	4613      	mov	r3, r2
 800c756:	005b      	lsls	r3, r3, #1
 800c758:	4413      	add	r3, r2
 800c75a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c75c:	429a      	cmp	r2, r3
 800c75e:	d305      	bcc.n	800c76c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c760:	697b      	ldr	r3, [r7, #20]
 800c762:	685b      	ldr	r3, [r3, #4]
 800c764:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c766:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c768:	429a      	cmp	r2, r3
 800c76a:	d903      	bls.n	800c774 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800c76c:	2301      	movs	r3, #1
 800c76e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c772:	e1c1      	b.n	800caf8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c774:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c776:	2200      	movs	r2, #0
 800c778:	60bb      	str	r3, [r7, #8]
 800c77a:	60fa      	str	r2, [r7, #12]
 800c77c:	697b      	ldr	r3, [r7, #20]
 800c77e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c780:	4a84      	ldr	r2, [pc, #528]	@ (800c994 <UART_SetConfig+0x930>)
 800c782:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c786:	b29b      	uxth	r3, r3
 800c788:	2200      	movs	r2, #0
 800c78a:	603b      	str	r3, [r7, #0]
 800c78c:	607a      	str	r2, [r7, #4]
 800c78e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c792:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c796:	f7f3 fdfb 	bl	8000390 <__aeabi_uldivmod>
 800c79a:	4602      	mov	r2, r0
 800c79c:	460b      	mov	r3, r1
 800c79e:	4610      	mov	r0, r2
 800c7a0:	4619      	mov	r1, r3
 800c7a2:	f04f 0200 	mov.w	r2, #0
 800c7a6:	f04f 0300 	mov.w	r3, #0
 800c7aa:	020b      	lsls	r3, r1, #8
 800c7ac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c7b0:	0202      	lsls	r2, r0, #8
 800c7b2:	6979      	ldr	r1, [r7, #20]
 800c7b4:	6849      	ldr	r1, [r1, #4]
 800c7b6:	0849      	lsrs	r1, r1, #1
 800c7b8:	2000      	movs	r0, #0
 800c7ba:	460c      	mov	r4, r1
 800c7bc:	4605      	mov	r5, r0
 800c7be:	eb12 0804 	adds.w	r8, r2, r4
 800c7c2:	eb43 0905 	adc.w	r9, r3, r5
 800c7c6:	697b      	ldr	r3, [r7, #20]
 800c7c8:	685b      	ldr	r3, [r3, #4]
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	469a      	mov	sl, r3
 800c7ce:	4693      	mov	fp, r2
 800c7d0:	4652      	mov	r2, sl
 800c7d2:	465b      	mov	r3, fp
 800c7d4:	4640      	mov	r0, r8
 800c7d6:	4649      	mov	r1, r9
 800c7d8:	f7f3 fdda 	bl	8000390 <__aeabi_uldivmod>
 800c7dc:	4602      	mov	r2, r0
 800c7de:	460b      	mov	r3, r1
 800c7e0:	4613      	mov	r3, r2
 800c7e2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c7e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c7ea:	d308      	bcc.n	800c7fe <UART_SetConfig+0x79a>
 800c7ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c7f2:	d204      	bcs.n	800c7fe <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800c7f4:	697b      	ldr	r3, [r7, #20]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c7fa:	60da      	str	r2, [r3, #12]
 800c7fc:	e17c      	b.n	800caf8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800c7fe:	2301      	movs	r3, #1
 800c800:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c804:	e178      	b.n	800caf8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c806:	697b      	ldr	r3, [r7, #20]
 800c808:	69db      	ldr	r3, [r3, #28]
 800c80a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c80e:	f040 80c5 	bne.w	800c99c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800c812:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c816:	2b20      	cmp	r3, #32
 800c818:	dc48      	bgt.n	800c8ac <UART_SetConfig+0x848>
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	db7b      	blt.n	800c916 <UART_SetConfig+0x8b2>
 800c81e:	2b20      	cmp	r3, #32
 800c820:	d879      	bhi.n	800c916 <UART_SetConfig+0x8b2>
 800c822:	a201      	add	r2, pc, #4	@ (adr r2, 800c828 <UART_SetConfig+0x7c4>)
 800c824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c828:	0800c8b3 	.word	0x0800c8b3
 800c82c:	0800c8bb 	.word	0x0800c8bb
 800c830:	0800c917 	.word	0x0800c917
 800c834:	0800c917 	.word	0x0800c917
 800c838:	0800c8c3 	.word	0x0800c8c3
 800c83c:	0800c917 	.word	0x0800c917
 800c840:	0800c917 	.word	0x0800c917
 800c844:	0800c917 	.word	0x0800c917
 800c848:	0800c8d3 	.word	0x0800c8d3
 800c84c:	0800c917 	.word	0x0800c917
 800c850:	0800c917 	.word	0x0800c917
 800c854:	0800c917 	.word	0x0800c917
 800c858:	0800c917 	.word	0x0800c917
 800c85c:	0800c917 	.word	0x0800c917
 800c860:	0800c917 	.word	0x0800c917
 800c864:	0800c917 	.word	0x0800c917
 800c868:	0800c8e3 	.word	0x0800c8e3
 800c86c:	0800c917 	.word	0x0800c917
 800c870:	0800c917 	.word	0x0800c917
 800c874:	0800c917 	.word	0x0800c917
 800c878:	0800c917 	.word	0x0800c917
 800c87c:	0800c917 	.word	0x0800c917
 800c880:	0800c917 	.word	0x0800c917
 800c884:	0800c917 	.word	0x0800c917
 800c888:	0800c917 	.word	0x0800c917
 800c88c:	0800c917 	.word	0x0800c917
 800c890:	0800c917 	.word	0x0800c917
 800c894:	0800c917 	.word	0x0800c917
 800c898:	0800c917 	.word	0x0800c917
 800c89c:	0800c917 	.word	0x0800c917
 800c8a0:	0800c917 	.word	0x0800c917
 800c8a4:	0800c917 	.word	0x0800c917
 800c8a8:	0800c909 	.word	0x0800c909
 800c8ac:	2b40      	cmp	r3, #64	@ 0x40
 800c8ae:	d02e      	beq.n	800c90e <UART_SetConfig+0x8aa>
 800c8b0:	e031      	b.n	800c916 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c8b2:	f7f9 fb0d 	bl	8005ed0 <HAL_RCC_GetPCLK1Freq>
 800c8b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c8b8:	e033      	b.n	800c922 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c8ba:	f7f9 fb1f 	bl	8005efc <HAL_RCC_GetPCLK2Freq>
 800c8be:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c8c0:	e02f      	b.n	800c922 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c8c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	f7fb fb10 	bl	8007eec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c8cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c8d0:	e027      	b.n	800c922 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c8d2:	f107 0318 	add.w	r3, r7, #24
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	f7fb fc5c 	bl	8008194 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c8dc:	69fb      	ldr	r3, [r7, #28]
 800c8de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c8e0:	e01f      	b.n	800c922 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c8e2:	4b2d      	ldr	r3, [pc, #180]	@ (800c998 <UART_SetConfig+0x934>)
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	f003 0320 	and.w	r3, r3, #32
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d009      	beq.n	800c902 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c8ee:	4b2a      	ldr	r3, [pc, #168]	@ (800c998 <UART_SetConfig+0x934>)
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	08db      	lsrs	r3, r3, #3
 800c8f4:	f003 0303 	and.w	r3, r3, #3
 800c8f8:	4a24      	ldr	r2, [pc, #144]	@ (800c98c <UART_SetConfig+0x928>)
 800c8fa:	fa22 f303 	lsr.w	r3, r2, r3
 800c8fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c900:	e00f      	b.n	800c922 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c902:	4b22      	ldr	r3, [pc, #136]	@ (800c98c <UART_SetConfig+0x928>)
 800c904:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c906:	e00c      	b.n	800c922 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c908:	4b21      	ldr	r3, [pc, #132]	@ (800c990 <UART_SetConfig+0x92c>)
 800c90a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c90c:	e009      	b.n	800c922 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c90e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c912:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c914:	e005      	b.n	800c922 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c916:	2300      	movs	r3, #0
 800c918:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c91a:	2301      	movs	r3, #1
 800c91c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c920:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c922:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c924:	2b00      	cmp	r3, #0
 800c926:	f000 80e7 	beq.w	800caf8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c92a:	697b      	ldr	r3, [r7, #20]
 800c92c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c92e:	4a19      	ldr	r2, [pc, #100]	@ (800c994 <UART_SetConfig+0x930>)
 800c930:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c934:	461a      	mov	r2, r3
 800c936:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c938:	fbb3 f3f2 	udiv	r3, r3, r2
 800c93c:	005a      	lsls	r2, r3, #1
 800c93e:	697b      	ldr	r3, [r7, #20]
 800c940:	685b      	ldr	r3, [r3, #4]
 800c942:	085b      	lsrs	r3, r3, #1
 800c944:	441a      	add	r2, r3
 800c946:	697b      	ldr	r3, [r7, #20]
 800c948:	685b      	ldr	r3, [r3, #4]
 800c94a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c94e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c952:	2b0f      	cmp	r3, #15
 800c954:	d916      	bls.n	800c984 <UART_SetConfig+0x920>
 800c956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c958:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c95c:	d212      	bcs.n	800c984 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c95e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c960:	b29b      	uxth	r3, r3
 800c962:	f023 030f 	bic.w	r3, r3, #15
 800c966:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c96a:	085b      	lsrs	r3, r3, #1
 800c96c:	b29b      	uxth	r3, r3
 800c96e:	f003 0307 	and.w	r3, r3, #7
 800c972:	b29a      	uxth	r2, r3
 800c974:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c976:	4313      	orrs	r3, r2
 800c978:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800c97a:	697b      	ldr	r3, [r7, #20]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800c980:	60da      	str	r2, [r3, #12]
 800c982:	e0b9      	b.n	800caf8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c984:	2301      	movs	r3, #1
 800c986:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c98a:	e0b5      	b.n	800caf8 <UART_SetConfig+0xa94>
 800c98c:	03d09000 	.word	0x03d09000
 800c990:	003d0900 	.word	0x003d0900
 800c994:	08017cec 	.word	0x08017cec
 800c998:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800c99c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c9a0:	2b20      	cmp	r3, #32
 800c9a2:	dc49      	bgt.n	800ca38 <UART_SetConfig+0x9d4>
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	db7c      	blt.n	800caa2 <UART_SetConfig+0xa3e>
 800c9a8:	2b20      	cmp	r3, #32
 800c9aa:	d87a      	bhi.n	800caa2 <UART_SetConfig+0xa3e>
 800c9ac:	a201      	add	r2, pc, #4	@ (adr r2, 800c9b4 <UART_SetConfig+0x950>)
 800c9ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9b2:	bf00      	nop
 800c9b4:	0800ca3f 	.word	0x0800ca3f
 800c9b8:	0800ca47 	.word	0x0800ca47
 800c9bc:	0800caa3 	.word	0x0800caa3
 800c9c0:	0800caa3 	.word	0x0800caa3
 800c9c4:	0800ca4f 	.word	0x0800ca4f
 800c9c8:	0800caa3 	.word	0x0800caa3
 800c9cc:	0800caa3 	.word	0x0800caa3
 800c9d0:	0800caa3 	.word	0x0800caa3
 800c9d4:	0800ca5f 	.word	0x0800ca5f
 800c9d8:	0800caa3 	.word	0x0800caa3
 800c9dc:	0800caa3 	.word	0x0800caa3
 800c9e0:	0800caa3 	.word	0x0800caa3
 800c9e4:	0800caa3 	.word	0x0800caa3
 800c9e8:	0800caa3 	.word	0x0800caa3
 800c9ec:	0800caa3 	.word	0x0800caa3
 800c9f0:	0800caa3 	.word	0x0800caa3
 800c9f4:	0800ca6f 	.word	0x0800ca6f
 800c9f8:	0800caa3 	.word	0x0800caa3
 800c9fc:	0800caa3 	.word	0x0800caa3
 800ca00:	0800caa3 	.word	0x0800caa3
 800ca04:	0800caa3 	.word	0x0800caa3
 800ca08:	0800caa3 	.word	0x0800caa3
 800ca0c:	0800caa3 	.word	0x0800caa3
 800ca10:	0800caa3 	.word	0x0800caa3
 800ca14:	0800caa3 	.word	0x0800caa3
 800ca18:	0800caa3 	.word	0x0800caa3
 800ca1c:	0800caa3 	.word	0x0800caa3
 800ca20:	0800caa3 	.word	0x0800caa3
 800ca24:	0800caa3 	.word	0x0800caa3
 800ca28:	0800caa3 	.word	0x0800caa3
 800ca2c:	0800caa3 	.word	0x0800caa3
 800ca30:	0800caa3 	.word	0x0800caa3
 800ca34:	0800ca95 	.word	0x0800ca95
 800ca38:	2b40      	cmp	r3, #64	@ 0x40
 800ca3a:	d02e      	beq.n	800ca9a <UART_SetConfig+0xa36>
 800ca3c:	e031      	b.n	800caa2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ca3e:	f7f9 fa47 	bl	8005ed0 <HAL_RCC_GetPCLK1Freq>
 800ca42:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ca44:	e033      	b.n	800caae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ca46:	f7f9 fa59 	bl	8005efc <HAL_RCC_GetPCLK2Freq>
 800ca4a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ca4c:	e02f      	b.n	800caae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ca4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ca52:	4618      	mov	r0, r3
 800ca54:	f7fb fa4a 	bl	8007eec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ca58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca5c:	e027      	b.n	800caae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ca5e:	f107 0318 	add.w	r3, r7, #24
 800ca62:	4618      	mov	r0, r3
 800ca64:	f7fb fb96 	bl	8008194 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ca68:	69fb      	ldr	r3, [r7, #28]
 800ca6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca6c:	e01f      	b.n	800caae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ca6e:	4b2d      	ldr	r3, [pc, #180]	@ (800cb24 <UART_SetConfig+0xac0>)
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	f003 0320 	and.w	r3, r3, #32
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d009      	beq.n	800ca8e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ca7a:	4b2a      	ldr	r3, [pc, #168]	@ (800cb24 <UART_SetConfig+0xac0>)
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	08db      	lsrs	r3, r3, #3
 800ca80:	f003 0303 	and.w	r3, r3, #3
 800ca84:	4a28      	ldr	r2, [pc, #160]	@ (800cb28 <UART_SetConfig+0xac4>)
 800ca86:	fa22 f303 	lsr.w	r3, r2, r3
 800ca8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ca8c:	e00f      	b.n	800caae <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800ca8e:	4b26      	ldr	r3, [pc, #152]	@ (800cb28 <UART_SetConfig+0xac4>)
 800ca90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca92:	e00c      	b.n	800caae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ca94:	4b25      	ldr	r3, [pc, #148]	@ (800cb2c <UART_SetConfig+0xac8>)
 800ca96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca98:	e009      	b.n	800caae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ca9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ca9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800caa0:	e005      	b.n	800caae <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800caa2:	2300      	movs	r3, #0
 800caa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800caa6:	2301      	movs	r3, #1
 800caa8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800caac:	bf00      	nop
    }

    if (pclk != 0U)
 800caae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d021      	beq.n	800caf8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cab4:	697b      	ldr	r3, [r7, #20]
 800cab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cab8:	4a1d      	ldr	r2, [pc, #116]	@ (800cb30 <UART_SetConfig+0xacc>)
 800caba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cabe:	461a      	mov	r2, r3
 800cac0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cac2:	fbb3 f2f2 	udiv	r2, r3, r2
 800cac6:	697b      	ldr	r3, [r7, #20]
 800cac8:	685b      	ldr	r3, [r3, #4]
 800caca:	085b      	lsrs	r3, r3, #1
 800cacc:	441a      	add	r2, r3
 800cace:	697b      	ldr	r3, [r7, #20]
 800cad0:	685b      	ldr	r3, [r3, #4]
 800cad2:	fbb2 f3f3 	udiv	r3, r2, r3
 800cad6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cada:	2b0f      	cmp	r3, #15
 800cadc:	d909      	bls.n	800caf2 <UART_SetConfig+0xa8e>
 800cade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cae0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cae4:	d205      	bcs.n	800caf2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cae8:	b29a      	uxth	r2, r3
 800caea:	697b      	ldr	r3, [r7, #20]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	60da      	str	r2, [r3, #12]
 800caf0:	e002      	b.n	800caf8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800caf2:	2301      	movs	r3, #1
 800caf4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800caf8:	697b      	ldr	r3, [r7, #20]
 800cafa:	2201      	movs	r2, #1
 800cafc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800cb00:	697b      	ldr	r3, [r7, #20]
 800cb02:	2201      	movs	r2, #1
 800cb04:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cb08:	697b      	ldr	r3, [r7, #20]
 800cb0a:	2200      	movs	r2, #0
 800cb0c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800cb0e:	697b      	ldr	r3, [r7, #20]
 800cb10:	2200      	movs	r2, #0
 800cb12:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800cb14:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800cb18:	4618      	mov	r0, r3
 800cb1a:	3748      	adds	r7, #72	@ 0x48
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cb22:	bf00      	nop
 800cb24:	58024400 	.word	0x58024400
 800cb28:	03d09000 	.word	0x03d09000
 800cb2c:	003d0900 	.word	0x003d0900
 800cb30:	08017cec 	.word	0x08017cec

0800cb34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cb34:	b480      	push	{r7}
 800cb36:	b083      	sub	sp, #12
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb40:	f003 0301 	and.w	r3, r3, #1
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d00a      	beq.n	800cb5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	685b      	ldr	r3, [r3, #4]
 800cb4e:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	430a      	orrs	r2, r1
 800cb5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb62:	f003 0302 	and.w	r3, r3, #2
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d00a      	beq.n	800cb80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	685b      	ldr	r3, [r3, #4]
 800cb70:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	430a      	orrs	r2, r1
 800cb7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb84:	f003 0304 	and.w	r3, r3, #4
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d00a      	beq.n	800cba2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	685b      	ldr	r3, [r3, #4]
 800cb92:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	430a      	orrs	r2, r1
 800cba0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cba6:	f003 0308 	and.w	r3, r3, #8
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d00a      	beq.n	800cbc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	685b      	ldr	r3, [r3, #4]
 800cbb4:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	430a      	orrs	r2, r1
 800cbc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbc8:	f003 0310 	and.w	r3, r3, #16
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d00a      	beq.n	800cbe6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	689b      	ldr	r3, [r3, #8]
 800cbd6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	430a      	orrs	r2, r1
 800cbe4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbea:	f003 0320 	and.w	r3, r3, #32
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d00a      	beq.n	800cc08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	689b      	ldr	r3, [r3, #8]
 800cbf8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	430a      	orrs	r2, r1
 800cc06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d01a      	beq.n	800cc4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	685b      	ldr	r3, [r3, #4]
 800cc1a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	430a      	orrs	r2, r1
 800cc28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cc2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cc32:	d10a      	bne.n	800cc4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	685b      	ldr	r3, [r3, #4]
 800cc3a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	430a      	orrs	r2, r1
 800cc48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d00a      	beq.n	800cc6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	685b      	ldr	r3, [r3, #4]
 800cc5c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	430a      	orrs	r2, r1
 800cc6a:	605a      	str	r2, [r3, #4]
  }
}
 800cc6c:	bf00      	nop
 800cc6e:	370c      	adds	r7, #12
 800cc70:	46bd      	mov	sp, r7
 800cc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc76:	4770      	bx	lr

0800cc78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b098      	sub	sp, #96	@ 0x60
 800cc7c:	af02      	add	r7, sp, #8
 800cc7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	2200      	movs	r2, #0
 800cc84:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cc88:	f7f7 f84e 	bl	8003d28 <HAL_GetTick>
 800cc8c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	f003 0308 	and.w	r3, r3, #8
 800cc98:	2b08      	cmp	r3, #8
 800cc9a:	d12f      	bne.n	800ccfc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cc9c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cca0:	9300      	str	r3, [sp, #0]
 800cca2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cca4:	2200      	movs	r2, #0
 800cca6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ccaa:	6878      	ldr	r0, [r7, #4]
 800ccac:	f000 f88e 	bl	800cdcc <UART_WaitOnFlagUntilTimeout>
 800ccb0:	4603      	mov	r3, r0
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d022      	beq.n	800ccfc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccbe:	e853 3f00 	ldrex	r3, [r3]
 800ccc2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ccc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ccc6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ccca:	653b      	str	r3, [r7, #80]	@ 0x50
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	461a      	mov	r2, r3
 800ccd2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ccd4:	647b      	str	r3, [r7, #68]	@ 0x44
 800ccd6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccd8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ccda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ccdc:	e841 2300 	strex	r3, r2, [r1]
 800cce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cce2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d1e6      	bne.n	800ccb6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	2220      	movs	r2, #32
 800ccec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	2200      	movs	r2, #0
 800ccf4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ccf8:	2303      	movs	r3, #3
 800ccfa:	e063      	b.n	800cdc4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	f003 0304 	and.w	r3, r3, #4
 800cd06:	2b04      	cmp	r3, #4
 800cd08:	d149      	bne.n	800cd9e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cd0a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cd0e:	9300      	str	r3, [sp, #0]
 800cd10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd12:	2200      	movs	r2, #0
 800cd14:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800cd18:	6878      	ldr	r0, [r7, #4]
 800cd1a:	f000 f857 	bl	800cdcc <UART_WaitOnFlagUntilTimeout>
 800cd1e:	4603      	mov	r3, r0
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d03c      	beq.n	800cd9e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd2c:	e853 3f00 	ldrex	r3, [r3]
 800cd30:	623b      	str	r3, [r7, #32]
   return(result);
 800cd32:	6a3b      	ldr	r3, [r7, #32]
 800cd34:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cd38:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	461a      	mov	r2, r3
 800cd40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cd42:	633b      	str	r3, [r7, #48]	@ 0x30
 800cd44:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cd48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cd4a:	e841 2300 	strex	r3, r2, [r1]
 800cd4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cd50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d1e6      	bne.n	800cd24 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	3308      	adds	r3, #8
 800cd5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd5e:	693b      	ldr	r3, [r7, #16]
 800cd60:	e853 3f00 	ldrex	r3, [r3]
 800cd64:	60fb      	str	r3, [r7, #12]
   return(result);
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	f023 0301 	bic.w	r3, r3, #1
 800cd6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	3308      	adds	r3, #8
 800cd74:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cd76:	61fa      	str	r2, [r7, #28]
 800cd78:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd7a:	69b9      	ldr	r1, [r7, #24]
 800cd7c:	69fa      	ldr	r2, [r7, #28]
 800cd7e:	e841 2300 	strex	r3, r2, [r1]
 800cd82:	617b      	str	r3, [r7, #20]
   return(result);
 800cd84:	697b      	ldr	r3, [r7, #20]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d1e5      	bne.n	800cd56 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	2220      	movs	r2, #32
 800cd8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	2200      	movs	r2, #0
 800cd96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cd9a:	2303      	movs	r3, #3
 800cd9c:	e012      	b.n	800cdc4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	2220      	movs	r2, #32
 800cda2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	2220      	movs	r2, #32
 800cdaa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	2200      	movs	r2, #0
 800cdb2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	2200      	movs	r2, #0
 800cdb8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	2200      	movs	r2, #0
 800cdbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cdc2:	2300      	movs	r3, #0
}
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	3758      	adds	r7, #88	@ 0x58
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	bd80      	pop	{r7, pc}

0800cdcc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b084      	sub	sp, #16
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	60f8      	str	r0, [r7, #12]
 800cdd4:	60b9      	str	r1, [r7, #8]
 800cdd6:	603b      	str	r3, [r7, #0]
 800cdd8:	4613      	mov	r3, r2
 800cdda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cddc:	e049      	b.n	800ce72 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cdde:	69bb      	ldr	r3, [r7, #24]
 800cde0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cde4:	d045      	beq.n	800ce72 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cde6:	f7f6 ff9f 	bl	8003d28 <HAL_GetTick>
 800cdea:	4602      	mov	r2, r0
 800cdec:	683b      	ldr	r3, [r7, #0]
 800cdee:	1ad3      	subs	r3, r2, r3
 800cdf0:	69ba      	ldr	r2, [r7, #24]
 800cdf2:	429a      	cmp	r2, r3
 800cdf4:	d302      	bcc.n	800cdfc <UART_WaitOnFlagUntilTimeout+0x30>
 800cdf6:	69bb      	ldr	r3, [r7, #24]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d101      	bne.n	800ce00 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800cdfc:	2303      	movs	r3, #3
 800cdfe:	e048      	b.n	800ce92 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	f003 0304 	and.w	r3, r3, #4
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d031      	beq.n	800ce72 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	69db      	ldr	r3, [r3, #28]
 800ce14:	f003 0308 	and.w	r3, r3, #8
 800ce18:	2b08      	cmp	r3, #8
 800ce1a:	d110      	bne.n	800ce3e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	2208      	movs	r2, #8
 800ce22:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800ce24:	68f8      	ldr	r0, [r7, #12]
 800ce26:	f000 f95b 	bl	800d0e0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	2208      	movs	r2, #8
 800ce2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	2200      	movs	r2, #0
 800ce36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

           return HAL_ERROR;
 800ce3a:	2301      	movs	r3, #1
 800ce3c:	e029      	b.n	800ce92 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	69db      	ldr	r3, [r3, #28]
 800ce44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ce48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ce4c:	d111      	bne.n	800ce72 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ce56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ce58:	68f8      	ldr	r0, [r7, #12]
 800ce5a:	f000 f941 	bl	800d0e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	2220      	movs	r2, #32
 800ce62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	2200      	movs	r2, #0
 800ce6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800ce6e:	2303      	movs	r3, #3
 800ce70:	e00f      	b.n	800ce92 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	69da      	ldr	r2, [r3, #28]
 800ce78:	68bb      	ldr	r3, [r7, #8]
 800ce7a:	4013      	ands	r3, r2
 800ce7c:	68ba      	ldr	r2, [r7, #8]
 800ce7e:	429a      	cmp	r2, r3
 800ce80:	bf0c      	ite	eq
 800ce82:	2301      	moveq	r3, #1
 800ce84:	2300      	movne	r3, #0
 800ce86:	b2db      	uxtb	r3, r3
 800ce88:	461a      	mov	r2, r3
 800ce8a:	79fb      	ldrb	r3, [r7, #7]
 800ce8c:	429a      	cmp	r2, r3
 800ce8e:	d0a6      	beq.n	800cdde <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ce90:	2300      	movs	r3, #0
}
 800ce92:	4618      	mov	r0, r3
 800ce94:	3710      	adds	r7, #16
 800ce96:	46bd      	mov	sp, r7
 800ce98:	bd80      	pop	{r7, pc}
	...

0800ce9c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ce9c:	b480      	push	{r7}
 800ce9e:	b0a3      	sub	sp, #140	@ 0x8c
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	60f8      	str	r0, [r7, #12]
 800cea4:	60b9      	str	r1, [r7, #8]
 800cea6:	4613      	mov	r3, r2
 800cea8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	68ba      	ldr	r2, [r7, #8]
 800ceae:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	88fa      	ldrh	r2, [r7, #6]
 800ceb4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	88fa      	ldrh	r2, [r7, #6]
 800cebc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	2200      	movs	r2, #0
 800cec4:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	689b      	ldr	r3, [r3, #8]
 800ceca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cece:	d10e      	bne.n	800ceee <UART_Start_Receive_IT+0x52>
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	691b      	ldr	r3, [r3, #16]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d105      	bne.n	800cee4 <UART_Start_Receive_IT+0x48>
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800cede:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cee2:	e02d      	b.n	800cf40 <UART_Start_Receive_IT+0xa4>
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	22ff      	movs	r2, #255	@ 0xff
 800cee8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ceec:	e028      	b.n	800cf40 <UART_Start_Receive_IT+0xa4>
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	689b      	ldr	r3, [r3, #8]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d10d      	bne.n	800cf12 <UART_Start_Receive_IT+0x76>
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	691b      	ldr	r3, [r3, #16]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d104      	bne.n	800cf08 <UART_Start_Receive_IT+0x6c>
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	22ff      	movs	r2, #255	@ 0xff
 800cf02:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cf06:	e01b      	b.n	800cf40 <UART_Start_Receive_IT+0xa4>
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	227f      	movs	r2, #127	@ 0x7f
 800cf0c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cf10:	e016      	b.n	800cf40 <UART_Start_Receive_IT+0xa4>
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	689b      	ldr	r3, [r3, #8]
 800cf16:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cf1a:	d10d      	bne.n	800cf38 <UART_Start_Receive_IT+0x9c>
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	691b      	ldr	r3, [r3, #16]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d104      	bne.n	800cf2e <UART_Start_Receive_IT+0x92>
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	227f      	movs	r2, #127	@ 0x7f
 800cf28:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cf2c:	e008      	b.n	800cf40 <UART_Start_Receive_IT+0xa4>
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	223f      	movs	r2, #63	@ 0x3f
 800cf32:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800cf36:	e003      	b.n	800cf40 <UART_Start_Receive_IT+0xa4>
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	2200      	movs	r2, #0
 800cf44:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	2222      	movs	r2, #34	@ 0x22
 800cf4c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	3308      	adds	r3, #8
 800cf56:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cf5a:	e853 3f00 	ldrex	r3, [r3]
 800cf5e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800cf60:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cf62:	f043 0301 	orr.w	r3, r3, #1
 800cf66:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	3308      	adds	r3, #8
 800cf70:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800cf74:	673a      	str	r2, [r7, #112]	@ 0x70
 800cf76:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf78:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800cf7a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800cf7c:	e841 2300 	strex	r3, r2, [r1]
 800cf80:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800cf82:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d1e3      	bne.n	800cf50 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cf8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cf90:	d14f      	bne.n	800d032 <UART_Start_Receive_IT+0x196>
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800cf98:	88fa      	ldrh	r2, [r7, #6]
 800cf9a:	429a      	cmp	r2, r3
 800cf9c:	d349      	bcc.n	800d032 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	689b      	ldr	r3, [r3, #8]
 800cfa2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cfa6:	d107      	bne.n	800cfb8 <UART_Start_Receive_IT+0x11c>
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	691b      	ldr	r3, [r3, #16]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d103      	bne.n	800cfb8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	4a47      	ldr	r2, [pc, #284]	@ (800d0d0 <UART_Start_Receive_IT+0x234>)
 800cfb4:	675a      	str	r2, [r3, #116]	@ 0x74
 800cfb6:	e002      	b.n	800cfbe <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	4a46      	ldr	r2, [pc, #280]	@ (800d0d4 <UART_Start_Receive_IT+0x238>)
 800cfbc:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	691b      	ldr	r3, [r3, #16]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d01a      	beq.n	800cffc <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfcc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cfce:	e853 3f00 	ldrex	r3, [r3]
 800cfd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800cfd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cfd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cfda:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	461a      	mov	r2, r3
 800cfe4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800cfe8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cfea:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfec:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800cfee:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800cff0:	e841 2300 	strex	r3, r2, [r1]
 800cff4:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800cff6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d1e4      	bne.n	800cfc6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	3308      	adds	r3, #8
 800d002:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d004:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d006:	e853 3f00 	ldrex	r3, [r3]
 800d00a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d00c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d00e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d012:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	3308      	adds	r3, #8
 800d01a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800d01c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800d01e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d020:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d022:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d024:	e841 2300 	strex	r3, r2, [r1]
 800d028:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800d02a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d1e5      	bne.n	800cffc <UART_Start_Receive_IT+0x160>
 800d030:	e046      	b.n	800d0c0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	689b      	ldr	r3, [r3, #8]
 800d036:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d03a:	d107      	bne.n	800d04c <UART_Start_Receive_IT+0x1b0>
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	691b      	ldr	r3, [r3, #16]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d103      	bne.n	800d04c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	4a24      	ldr	r2, [pc, #144]	@ (800d0d8 <UART_Start_Receive_IT+0x23c>)
 800d048:	675a      	str	r2, [r3, #116]	@ 0x74
 800d04a:	e002      	b.n	800d052 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	4a23      	ldr	r2, [pc, #140]	@ (800d0dc <UART_Start_Receive_IT+0x240>)
 800d050:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	691b      	ldr	r3, [r3, #16]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d019      	beq.n	800d08e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d062:	e853 3f00 	ldrex	r3, [r3]
 800d066:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d06a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800d06e:	677b      	str	r3, [r7, #116]	@ 0x74
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	461a      	mov	r2, r3
 800d076:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d078:	637b      	str	r3, [r7, #52]	@ 0x34
 800d07a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d07c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d07e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d080:	e841 2300 	strex	r3, r2, [r1]
 800d084:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800d086:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d1e6      	bne.n	800d05a <UART_Start_Receive_IT+0x1be>
 800d08c:	e018      	b.n	800d0c0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d094:	697b      	ldr	r3, [r7, #20]
 800d096:	e853 3f00 	ldrex	r3, [r3]
 800d09a:	613b      	str	r3, [r7, #16]
   return(result);
 800d09c:	693b      	ldr	r3, [r7, #16]
 800d09e:	f043 0320 	orr.w	r3, r3, #32
 800d0a2:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	461a      	mov	r2, r3
 800d0aa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d0ac:	623b      	str	r3, [r7, #32]
 800d0ae:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0b0:	69f9      	ldr	r1, [r7, #28]
 800d0b2:	6a3a      	ldr	r2, [r7, #32]
 800d0b4:	e841 2300 	strex	r3, r2, [r1]
 800d0b8:	61bb      	str	r3, [r7, #24]
   return(result);
 800d0ba:	69bb      	ldr	r3, [r7, #24]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d1e6      	bne.n	800d08e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800d0c0:	2300      	movs	r3, #0
}
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	378c      	adds	r7, #140	@ 0x8c
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0cc:	4770      	bx	lr
 800d0ce:	bf00      	nop
 800d0d0:	0800dc8d 	.word	0x0800dc8d
 800d0d4:	0800d92d 	.word	0x0800d92d
 800d0d8:	0800d775 	.word	0x0800d775
 800d0dc:	0800d5bd 	.word	0x0800d5bd

0800d0e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d0e0:	b480      	push	{r7}
 800d0e2:	b095      	sub	sp, #84	@ 0x54
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d0f0:	e853 3f00 	ldrex	r3, [r3]
 800d0f4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d0f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d0fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	461a      	mov	r2, r3
 800d104:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d106:	643b      	str	r3, [r7, #64]	@ 0x40
 800d108:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d10a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d10c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d10e:	e841 2300 	strex	r3, r2, [r1]
 800d112:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d116:	2b00      	cmp	r3, #0
 800d118:	d1e6      	bne.n	800d0e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	3308      	adds	r3, #8
 800d120:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d122:	6a3b      	ldr	r3, [r7, #32]
 800d124:	e853 3f00 	ldrex	r3, [r3]
 800d128:	61fb      	str	r3, [r7, #28]
   return(result);
 800d12a:	69fa      	ldr	r2, [r7, #28]
 800d12c:	4b1e      	ldr	r3, [pc, #120]	@ (800d1a8 <UART_EndRxTransfer+0xc8>)
 800d12e:	4013      	ands	r3, r2
 800d130:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	3308      	adds	r3, #8
 800d138:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d13a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d13c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d13e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d140:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d142:	e841 2300 	strex	r3, r2, [r1]
 800d146:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d1e5      	bne.n	800d11a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d152:	2b01      	cmp	r3, #1
 800d154:	d118      	bne.n	800d188 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	e853 3f00 	ldrex	r3, [r3]
 800d162:	60bb      	str	r3, [r7, #8]
   return(result);
 800d164:	68bb      	ldr	r3, [r7, #8]
 800d166:	f023 0310 	bic.w	r3, r3, #16
 800d16a:	647b      	str	r3, [r7, #68]	@ 0x44
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	461a      	mov	r2, r3
 800d172:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d174:	61bb      	str	r3, [r7, #24]
 800d176:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d178:	6979      	ldr	r1, [r7, #20]
 800d17a:	69ba      	ldr	r2, [r7, #24]
 800d17c:	e841 2300 	strex	r3, r2, [r1]
 800d180:	613b      	str	r3, [r7, #16]
   return(result);
 800d182:	693b      	ldr	r3, [r7, #16]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d1e6      	bne.n	800d156 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	2220      	movs	r2, #32
 800d18c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	2200      	movs	r2, #0
 800d194:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	2200      	movs	r2, #0
 800d19a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d19c:	bf00      	nop
 800d19e:	3754      	adds	r7, #84	@ 0x54
 800d1a0:	46bd      	mov	sp, r7
 800d1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a6:	4770      	bx	lr
 800d1a8:	effffffe 	.word	0xeffffffe

0800d1ac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	b084      	sub	sp, #16
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d1b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	2200      	movs	r2, #0
 800d1be:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	2200      	movs	r2, #0
 800d1c6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d1ca:	68f8      	ldr	r0, [r7, #12]
 800d1cc:	f7fe fe6c 	bl	800bea8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d1d0:	bf00      	nop
 800d1d2:	3710      	adds	r7, #16
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	bd80      	pop	{r7, pc}

0800d1d8 <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800d1d8:	b580      	push	{r7, lr}
 800d1da:	b084      	sub	sp, #16
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d1e4:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	2200      	movs	r2, #0
 800d1ea:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	220f      	movs	r2, #15
 800d1f4:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	699a      	ldr	r2, [r3, #24]
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	f042 0208 	orr.w	r2, r2, #8
 800d204:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	2220      	movs	r2, #32
 800d20a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	2200      	movs	r2, #0
 800d212:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 800d214:	68f8      	ldr	r0, [r7, #12]
 800d216:	f7fe fe51 	bl	800bebc <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d21a:	bf00      	nop
 800d21c:	3710      	adds	r7, #16
 800d21e:	46bd      	mov	sp, r7
 800d220:	bd80      	pop	{r7, pc}

0800d222 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d222:	b480      	push	{r7}
 800d224:	b08f      	sub	sp, #60	@ 0x3c
 800d226:	af00      	add	r7, sp, #0
 800d228:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d230:	2b21      	cmp	r3, #33	@ 0x21
 800d232:	d14c      	bne.n	800d2ce <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d23a:	b29b      	uxth	r3, r3
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d132      	bne.n	800d2a6 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d246:	6a3b      	ldr	r3, [r7, #32]
 800d248:	e853 3f00 	ldrex	r3, [r3]
 800d24c:	61fb      	str	r3, [r7, #28]
   return(result);
 800d24e:	69fb      	ldr	r3, [r7, #28]
 800d250:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d254:	637b      	str	r3, [r7, #52]	@ 0x34
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	461a      	mov	r2, r3
 800d25c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d25e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d260:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d262:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d264:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d266:	e841 2300 	strex	r3, r2, [r1]
 800d26a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d26c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d1e6      	bne.n	800d240 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	e853 3f00 	ldrex	r3, [r3]
 800d27e:	60bb      	str	r3, [r7, #8]
   return(result);
 800d280:	68bb      	ldr	r3, [r7, #8]
 800d282:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d286:	633b      	str	r3, [r7, #48]	@ 0x30
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	461a      	mov	r2, r3
 800d28e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d290:	61bb      	str	r3, [r7, #24]
 800d292:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d294:	6979      	ldr	r1, [r7, #20]
 800d296:	69ba      	ldr	r2, [r7, #24]
 800d298:	e841 2300 	strex	r3, r2, [r1]
 800d29c:	613b      	str	r3, [r7, #16]
   return(result);
 800d29e:	693b      	ldr	r3, [r7, #16]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d1e6      	bne.n	800d272 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800d2a4:	e013      	b.n	800d2ce <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d2aa:	781a      	ldrb	r2, [r3, #0]
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d2b6:	1c5a      	adds	r2, r3, #1
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d2c2:	b29b      	uxth	r3, r3
 800d2c4:	3b01      	subs	r3, #1
 800d2c6:	b29a      	uxth	r2, r3
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800d2ce:	bf00      	nop
 800d2d0:	373c      	adds	r7, #60	@ 0x3c
 800d2d2:	46bd      	mov	sp, r7
 800d2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d8:	4770      	bx	lr

0800d2da <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d2da:	b480      	push	{r7}
 800d2dc:	b091      	sub	sp, #68	@ 0x44
 800d2de:	af00      	add	r7, sp, #0
 800d2e0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d2e8:	2b21      	cmp	r3, #33	@ 0x21
 800d2ea:	d151      	bne.n	800d390 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d2f2:	b29b      	uxth	r3, r3
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d132      	bne.n	800d35e <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d300:	e853 3f00 	ldrex	r3, [r3]
 800d304:	623b      	str	r3, [r7, #32]
   return(result);
 800d306:	6a3b      	ldr	r3, [r7, #32]
 800d308:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d30c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	461a      	mov	r2, r3
 800d314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d316:	633b      	str	r3, [r7, #48]	@ 0x30
 800d318:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d31a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d31c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d31e:	e841 2300 	strex	r3, r2, [r1]
 800d322:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d326:	2b00      	cmp	r3, #0
 800d328:	d1e6      	bne.n	800d2f8 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d330:	693b      	ldr	r3, [r7, #16]
 800d332:	e853 3f00 	ldrex	r3, [r3]
 800d336:	60fb      	str	r3, [r7, #12]
   return(result);
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d33e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	461a      	mov	r2, r3
 800d346:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d348:	61fb      	str	r3, [r7, #28]
 800d34a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d34c:	69b9      	ldr	r1, [r7, #24]
 800d34e:	69fa      	ldr	r2, [r7, #28]
 800d350:	e841 2300 	strex	r3, r2, [r1]
 800d354:	617b      	str	r3, [r7, #20]
   return(result);
 800d356:	697b      	ldr	r3, [r7, #20]
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d1e6      	bne.n	800d32a <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800d35c:	e018      	b.n	800d390 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d362:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800d364:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d366:	881b      	ldrh	r3, [r3, #0]
 800d368:	461a      	mov	r2, r3
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d372:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d378:	1c9a      	adds	r2, r3, #2
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d384:	b29b      	uxth	r3, r3
 800d386:	3b01      	subs	r3, #1
 800d388:	b29a      	uxth	r2, r3
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800d390:	bf00      	nop
 800d392:	3744      	adds	r7, #68	@ 0x44
 800d394:	46bd      	mov	sp, r7
 800d396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d39a:	4770      	bx	lr

0800d39c <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d39c:	b480      	push	{r7}
 800d39e:	b091      	sub	sp, #68	@ 0x44
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d3aa:	2b21      	cmp	r3, #33	@ 0x21
 800d3ac:	d160      	bne.n	800d470 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d3b4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800d3b6:	e057      	b.n	800d468 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d3be:	b29b      	uxth	r3, r3
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d133      	bne.n	800d42c <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	3308      	adds	r3, #8
 800d3ca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3ce:	e853 3f00 	ldrex	r3, [r3]
 800d3d2:	623b      	str	r3, [r7, #32]
   return(result);
 800d3d4:	6a3b      	ldr	r3, [r7, #32]
 800d3d6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800d3da:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	3308      	adds	r3, #8
 800d3e2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d3e4:	633a      	str	r2, [r7, #48]	@ 0x30
 800d3e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d3ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d3ec:	e841 2300 	strex	r3, r2, [r1]
 800d3f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d3f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d1e5      	bne.n	800d3c4 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3fe:	693b      	ldr	r3, [r7, #16]
 800d400:	e853 3f00 	ldrex	r3, [r3]
 800d404:	60fb      	str	r3, [r7, #12]
   return(result);
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d40c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	461a      	mov	r2, r3
 800d414:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d416:	61fb      	str	r3, [r7, #28]
 800d418:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d41a:	69b9      	ldr	r1, [r7, #24]
 800d41c:	69fa      	ldr	r2, [r7, #28]
 800d41e:	e841 2300 	strex	r3, r2, [r1]
 800d422:	617b      	str	r3, [r7, #20]
   return(result);
 800d424:	697b      	ldr	r3, [r7, #20]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d1e6      	bne.n	800d3f8 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800d42a:	e021      	b.n	800d470 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	69db      	ldr	r3, [r3, #28]
 800d432:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d436:	2b00      	cmp	r3, #0
 800d438:	d013      	beq.n	800d462 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d43e:	781a      	ldrb	r2, [r3, #0]
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d44a:	1c5a      	adds	r2, r3, #1
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d456:	b29b      	uxth	r3, r3
 800d458:	3b01      	subs	r3, #1
 800d45a:	b29a      	uxth	r2, r3
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800d462:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d464:	3b01      	subs	r3, #1
 800d466:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800d468:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d1a4      	bne.n	800d3b8 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800d46e:	e7ff      	b.n	800d470 <UART_TxISR_8BIT_FIFOEN+0xd4>
 800d470:	bf00      	nop
 800d472:	3744      	adds	r7, #68	@ 0x44
 800d474:	46bd      	mov	sp, r7
 800d476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47a:	4770      	bx	lr

0800d47c <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d47c:	b480      	push	{r7}
 800d47e:	b091      	sub	sp, #68	@ 0x44
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d48a:	2b21      	cmp	r3, #33	@ 0x21
 800d48c:	d165      	bne.n	800d55a <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d494:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800d496:	e05c      	b.n	800d552 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d49e:	b29b      	uxth	r3, r3
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d133      	bne.n	800d50c <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	3308      	adds	r3, #8
 800d4aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4ac:	6a3b      	ldr	r3, [r7, #32]
 800d4ae:	e853 3f00 	ldrex	r3, [r3]
 800d4b2:	61fb      	str	r3, [r7, #28]
   return(result);
 800d4b4:	69fb      	ldr	r3, [r7, #28]
 800d4b6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800d4ba:	637b      	str	r3, [r7, #52]	@ 0x34
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	3308      	adds	r3, #8
 800d4c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d4c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d4c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d4ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d4cc:	e841 2300 	strex	r3, r2, [r1]
 800d4d0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d4d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d1e5      	bne.n	800d4a4 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	e853 3f00 	ldrex	r3, [r3]
 800d4e4:	60bb      	str	r3, [r7, #8]
   return(result);
 800d4e6:	68bb      	ldr	r3, [r7, #8]
 800d4e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d4ec:	633b      	str	r3, [r7, #48]	@ 0x30
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	461a      	mov	r2, r3
 800d4f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4f6:	61bb      	str	r3, [r7, #24]
 800d4f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4fa:	6979      	ldr	r1, [r7, #20]
 800d4fc:	69ba      	ldr	r2, [r7, #24]
 800d4fe:	e841 2300 	strex	r3, r2, [r1]
 800d502:	613b      	str	r3, [r7, #16]
   return(result);
 800d504:	693b      	ldr	r3, [r7, #16]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d1e6      	bne.n	800d4d8 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800d50a:	e026      	b.n	800d55a <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	69db      	ldr	r3, [r3, #28]
 800d512:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d516:	2b00      	cmp	r3, #0
 800d518:	d018      	beq.n	800d54c <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d51e:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800d520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d522:	881b      	ldrh	r3, [r3, #0]
 800d524:	461a      	mov	r2, r3
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d52e:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d534:	1c9a      	adds	r2, r3, #2
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d540:	b29b      	uxth	r3, r3
 800d542:	3b01      	subs	r3, #1
 800d544:	b29a      	uxth	r2, r3
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800d54c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d54e:	3b01      	subs	r3, #1
 800d550:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800d552:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d554:	2b00      	cmp	r3, #0
 800d556:	d19f      	bne.n	800d498 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800d558:	e7ff      	b.n	800d55a <UART_TxISR_16BIT_FIFOEN+0xde>
 800d55a:	bf00      	nop
 800d55c:	3744      	adds	r7, #68	@ 0x44
 800d55e:	46bd      	mov	sp, r7
 800d560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d564:	4770      	bx	lr

0800d566 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d566:	b580      	push	{r7, lr}
 800d568:	b088      	sub	sp, #32
 800d56a:	af00      	add	r7, sp, #0
 800d56c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	e853 3f00 	ldrex	r3, [r3]
 800d57a:	60bb      	str	r3, [r7, #8]
   return(result);
 800d57c:	68bb      	ldr	r3, [r7, #8]
 800d57e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d582:	61fb      	str	r3, [r7, #28]
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	461a      	mov	r2, r3
 800d58a:	69fb      	ldr	r3, [r7, #28]
 800d58c:	61bb      	str	r3, [r7, #24]
 800d58e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d590:	6979      	ldr	r1, [r7, #20]
 800d592:	69ba      	ldr	r2, [r7, #24]
 800d594:	e841 2300 	strex	r3, r2, [r1]
 800d598:	613b      	str	r3, [r7, #16]
   return(result);
 800d59a:	693b      	ldr	r3, [r7, #16]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d1e6      	bne.n	800d56e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	2220      	movs	r2, #32
 800d5a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	2200      	movs	r2, #0
 800d5ac:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d5ae:	6878      	ldr	r0, [r7, #4]
 800d5b0:	f7f6 fac2 	bl	8003b38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d5b4:	bf00      	nop
 800d5b6:	3720      	adds	r7, #32
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	bd80      	pop	{r7, pc}

0800d5bc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	b09c      	sub	sp, #112	@ 0x70
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d5ca:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d5d4:	2b22      	cmp	r3, #34	@ 0x22
 800d5d6:	f040 80be 	bne.w	800d756 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5e0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d5e4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800d5e8:	b2d9      	uxtb	r1, r3
 800d5ea:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800d5ee:	b2da      	uxtb	r2, r3
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d5f4:	400a      	ands	r2, r1
 800d5f6:	b2d2      	uxtb	r2, r2
 800d5f8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d5fe:	1c5a      	adds	r2, r3, #1
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d60a:	b29b      	uxth	r3, r3
 800d60c:	3b01      	subs	r3, #1
 800d60e:	b29a      	uxth	r2, r3
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d61c:	b29b      	uxth	r3, r3
 800d61e:	2b00      	cmp	r3, #0
 800d620:	f040 80a1 	bne.w	800d766 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d62a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d62c:	e853 3f00 	ldrex	r3, [r3]
 800d630:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d632:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d634:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d638:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	461a      	mov	r2, r3
 800d640:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d642:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d644:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d646:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d648:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d64a:	e841 2300 	strex	r3, r2, [r1]
 800d64e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d650:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d652:	2b00      	cmp	r3, #0
 800d654:	d1e6      	bne.n	800d624 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	3308      	adds	r3, #8
 800d65c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d65e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d660:	e853 3f00 	ldrex	r3, [r3]
 800d664:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d666:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d668:	f023 0301 	bic.w	r3, r3, #1
 800d66c:	667b      	str	r3, [r7, #100]	@ 0x64
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	3308      	adds	r3, #8
 800d674:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d676:	647a      	str	r2, [r7, #68]	@ 0x44
 800d678:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d67a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d67c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d67e:	e841 2300 	strex	r3, r2, [r1]
 800d682:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d684:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d686:	2b00      	cmp	r3, #0
 800d688:	d1e5      	bne.n	800d656 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	2220      	movs	r2, #32
 800d68e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	2200      	movs	r2, #0
 800d696:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	2200      	movs	r2, #0
 800d69c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	4a33      	ldr	r2, [pc, #204]	@ (800d770 <UART_RxISR_8BIT+0x1b4>)
 800d6a4:	4293      	cmp	r3, r2
 800d6a6:	d01f      	beq.n	800d6e8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	685b      	ldr	r3, [r3, #4]
 800d6ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d018      	beq.n	800d6e8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6be:	e853 3f00 	ldrex	r3, [r3]
 800d6c2:	623b      	str	r3, [r7, #32]
   return(result);
 800d6c4:	6a3b      	ldr	r3, [r7, #32]
 800d6c6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d6ca:	663b      	str	r3, [r7, #96]	@ 0x60
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	461a      	mov	r2, r3
 800d6d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d6d4:	633b      	str	r3, [r7, #48]	@ 0x30
 800d6d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6d8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d6da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d6dc:	e841 2300 	strex	r3, r2, [r1]
 800d6e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d6e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d1e6      	bne.n	800d6b6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d6ec:	2b01      	cmp	r3, #1
 800d6ee:	d12e      	bne.n	800d74e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	2200      	movs	r2, #0
 800d6f4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6fc:	693b      	ldr	r3, [r7, #16]
 800d6fe:	e853 3f00 	ldrex	r3, [r3]
 800d702:	60fb      	str	r3, [r7, #12]
   return(result);
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	f023 0310 	bic.w	r3, r3, #16
 800d70a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	461a      	mov	r2, r3
 800d712:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d714:	61fb      	str	r3, [r7, #28]
 800d716:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d718:	69b9      	ldr	r1, [r7, #24]
 800d71a:	69fa      	ldr	r2, [r7, #28]
 800d71c:	e841 2300 	strex	r3, r2, [r1]
 800d720:	617b      	str	r3, [r7, #20]
   return(result);
 800d722:	697b      	ldr	r3, [r7, #20]
 800d724:	2b00      	cmp	r3, #0
 800d726:	d1e6      	bne.n	800d6f6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	69db      	ldr	r3, [r3, #28]
 800d72e:	f003 0310 	and.w	r3, r3, #16
 800d732:	2b10      	cmp	r3, #16
 800d734:	d103      	bne.n	800d73e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	2210      	movs	r2, #16
 800d73c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d744:	4619      	mov	r1, r3
 800d746:	6878      	ldr	r0, [r7, #4]
 800d748:	f7fe fbc2 	bl	800bed0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d74c:	e00b      	b.n	800d766 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800d74e:	6878      	ldr	r0, [r7, #4]
 800d750:	f7f6 fa30 	bl	8003bb4 <HAL_UART_RxCpltCallback>
}
 800d754:	e007      	b.n	800d766 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	699a      	ldr	r2, [r3, #24]
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	f042 0208 	orr.w	r2, r2, #8
 800d764:	619a      	str	r2, [r3, #24]
}
 800d766:	bf00      	nop
 800d768:	3770      	adds	r7, #112	@ 0x70
 800d76a:	46bd      	mov	sp, r7
 800d76c:	bd80      	pop	{r7, pc}
 800d76e:	bf00      	nop
 800d770:	58000c00 	.word	0x58000c00

0800d774 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d774:	b580      	push	{r7, lr}
 800d776:	b09c      	sub	sp, #112	@ 0x70
 800d778:	af00      	add	r7, sp, #0
 800d77a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d782:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d78c:	2b22      	cmp	r3, #34	@ 0x22
 800d78e:	f040 80be 	bne.w	800d90e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d798:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d7a0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800d7a2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800d7a6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800d7aa:	4013      	ands	r3, r2
 800d7ac:	b29a      	uxth	r2, r3
 800d7ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d7b0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d7b6:	1c9a      	adds	r2, r3, #2
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d7c2:	b29b      	uxth	r3, r3
 800d7c4:	3b01      	subs	r3, #1
 800d7c6:	b29a      	uxth	r2, r3
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d7d4:	b29b      	uxth	r3, r3
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	f040 80a1 	bne.w	800d91e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d7e4:	e853 3f00 	ldrex	r3, [r3]
 800d7e8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800d7ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d7ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d7f0:	667b      	str	r3, [r7, #100]	@ 0x64
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	461a      	mov	r2, r3
 800d7f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d7fa:	657b      	str	r3, [r7, #84]	@ 0x54
 800d7fc:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7fe:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d800:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d802:	e841 2300 	strex	r3, r2, [r1]
 800d806:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800d808:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d1e6      	bne.n	800d7dc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	3308      	adds	r3, #8
 800d814:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d816:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d818:	e853 3f00 	ldrex	r3, [r3]
 800d81c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d81e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d820:	f023 0301 	bic.w	r3, r3, #1
 800d824:	663b      	str	r3, [r7, #96]	@ 0x60
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	3308      	adds	r3, #8
 800d82c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d82e:	643a      	str	r2, [r7, #64]	@ 0x40
 800d830:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d832:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d834:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d836:	e841 2300 	strex	r3, r2, [r1]
 800d83a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d83c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d1e5      	bne.n	800d80e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	2220      	movs	r2, #32
 800d846:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	2200      	movs	r2, #0
 800d84e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	2200      	movs	r2, #0
 800d854:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	4a33      	ldr	r2, [pc, #204]	@ (800d928 <UART_RxISR_16BIT+0x1b4>)
 800d85c:	4293      	cmp	r3, r2
 800d85e:	d01f      	beq.n	800d8a0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	685b      	ldr	r3, [r3, #4]
 800d866:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d018      	beq.n	800d8a0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d874:	6a3b      	ldr	r3, [r7, #32]
 800d876:	e853 3f00 	ldrex	r3, [r3]
 800d87a:	61fb      	str	r3, [r7, #28]
   return(result);
 800d87c:	69fb      	ldr	r3, [r7, #28]
 800d87e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d882:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	461a      	mov	r2, r3
 800d88a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d88c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d88e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d890:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d892:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d894:	e841 2300 	strex	r3, r2, [r1]
 800d898:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d89a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d1e6      	bne.n	800d86e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d8a4:	2b01      	cmp	r3, #1
 800d8a6:	d12e      	bne.n	800d906 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	e853 3f00 	ldrex	r3, [r3]
 800d8ba:	60bb      	str	r3, [r7, #8]
   return(result);
 800d8bc:	68bb      	ldr	r3, [r7, #8]
 800d8be:	f023 0310 	bic.w	r3, r3, #16
 800d8c2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	461a      	mov	r2, r3
 800d8ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d8cc:	61bb      	str	r3, [r7, #24]
 800d8ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8d0:	6979      	ldr	r1, [r7, #20]
 800d8d2:	69ba      	ldr	r2, [r7, #24]
 800d8d4:	e841 2300 	strex	r3, r2, [r1]
 800d8d8:	613b      	str	r3, [r7, #16]
   return(result);
 800d8da:	693b      	ldr	r3, [r7, #16]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d1e6      	bne.n	800d8ae <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	69db      	ldr	r3, [r3, #28]
 800d8e6:	f003 0310 	and.w	r3, r3, #16
 800d8ea:	2b10      	cmp	r3, #16
 800d8ec:	d103      	bne.n	800d8f6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	2210      	movs	r2, #16
 800d8f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d8fc:	4619      	mov	r1, r3
 800d8fe:	6878      	ldr	r0, [r7, #4]
 800d900:	f7fe fae6 	bl	800bed0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d904:	e00b      	b.n	800d91e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800d906:	6878      	ldr	r0, [r7, #4]
 800d908:	f7f6 f954 	bl	8003bb4 <HAL_UART_RxCpltCallback>
}
 800d90c:	e007      	b.n	800d91e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	699a      	ldr	r2, [r3, #24]
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	f042 0208 	orr.w	r2, r2, #8
 800d91c:	619a      	str	r2, [r3, #24]
}
 800d91e:	bf00      	nop
 800d920:	3770      	adds	r7, #112	@ 0x70
 800d922:	46bd      	mov	sp, r7
 800d924:	bd80      	pop	{r7, pc}
 800d926:	bf00      	nop
 800d928:	58000c00 	.word	0x58000c00

0800d92c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d92c:	b580      	push	{r7, lr}
 800d92e:	b0ac      	sub	sp, #176	@ 0xb0
 800d930:	af00      	add	r7, sp, #0
 800d932:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d93a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	69db      	ldr	r3, [r3, #28]
 800d944:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	689b      	ldr	r3, [r3, #8]
 800d958:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d962:	2b22      	cmp	r3, #34	@ 0x22
 800d964:	f040 8180 	bne.w	800dc68 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d96e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d972:	e123      	b.n	800dbbc <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d97a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d97e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800d982:	b2d9      	uxtb	r1, r3
 800d984:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800d988:	b2da      	uxtb	r2, r3
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d98e:	400a      	ands	r2, r1
 800d990:	b2d2      	uxtb	r2, r2
 800d992:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d998:	1c5a      	adds	r2, r3, #1
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d9a4:	b29b      	uxth	r3, r3
 800d9a6:	3b01      	subs	r3, #1
 800d9a8:	b29a      	uxth	r2, r3
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	69db      	ldr	r3, [r3, #28]
 800d9b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d9ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d9be:	f003 0307 	and.w	r3, r3, #7
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d053      	beq.n	800da6e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d9c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d9ca:	f003 0301 	and.w	r3, r3, #1
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d011      	beq.n	800d9f6 <UART_RxISR_8BIT_FIFOEN+0xca>
 800d9d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d9d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d00b      	beq.n	800d9f6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	2201      	movs	r2, #1
 800d9e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d9ec:	f043 0201 	orr.w	r2, r3, #1
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d9f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d9fa:	f003 0302 	and.w	r3, r3, #2
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d011      	beq.n	800da26 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800da02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800da06:	f003 0301 	and.w	r3, r3, #1
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d00b      	beq.n	800da26 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	2202      	movs	r2, #2
 800da14:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800da1c:	f043 0204 	orr.w	r2, r3, #4
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800da26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800da2a:	f003 0304 	and.w	r3, r3, #4
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d011      	beq.n	800da56 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800da32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800da36:	f003 0301 	and.w	r3, r3, #1
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d00b      	beq.n	800da56 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	2204      	movs	r2, #4
 800da44:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800da4c:	f043 0202 	orr.w	r2, r3, #2
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d006      	beq.n	800da6e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800da60:	6878      	ldr	r0, [r7, #4]
 800da62:	f7fe fa21 	bl	800bea8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	2200      	movs	r2, #0
 800da6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800da74:	b29b      	uxth	r3, r3
 800da76:	2b00      	cmp	r3, #0
 800da78:	f040 80a0 	bne.w	800dbbc <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da82:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800da84:	e853 3f00 	ldrex	r3, [r3]
 800da88:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800da8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800da8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800da90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	461a      	mov	r2, r3
 800da9a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800da9e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800daa0:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800daa2:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800daa4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800daa6:	e841 2300 	strex	r3, r2, [r1]
 800daaa:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800daac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d1e4      	bne.n	800da7c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	3308      	adds	r3, #8
 800dab8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800daba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dabc:	e853 3f00 	ldrex	r3, [r3]
 800dac0:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800dac2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800dac4:	4b6e      	ldr	r3, [pc, #440]	@ (800dc80 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800dac6:	4013      	ands	r3, r2
 800dac8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	3308      	adds	r3, #8
 800dad2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800dad6:	66ba      	str	r2, [r7, #104]	@ 0x68
 800dad8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dada:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800dadc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800dade:	e841 2300 	strex	r3, r2, [r1]
 800dae2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800dae4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d1e3      	bne.n	800dab2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	2220      	movs	r2, #32
 800daee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	2200      	movs	r2, #0
 800daf6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	2200      	movs	r2, #0
 800dafc:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	4a60      	ldr	r2, [pc, #384]	@ (800dc84 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800db04:	4293      	cmp	r3, r2
 800db06:	d021      	beq.n	800db4c <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	685b      	ldr	r3, [r3, #4]
 800db0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800db12:	2b00      	cmp	r3, #0
 800db14:	d01a      	beq.n	800db4c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800db1e:	e853 3f00 	ldrex	r3, [r3]
 800db22:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800db24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800db26:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800db2a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	461a      	mov	r2, r3
 800db34:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800db38:	657b      	str	r3, [r7, #84]	@ 0x54
 800db3a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db3c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800db3e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800db40:	e841 2300 	strex	r3, r2, [r1]
 800db44:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800db46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d1e4      	bne.n	800db16 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800db50:	2b01      	cmp	r3, #1
 800db52:	d130      	bne.n	800dbb6 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	2200      	movs	r2, #0
 800db58:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db62:	e853 3f00 	ldrex	r3, [r3]
 800db66:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800db68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db6a:	f023 0310 	bic.w	r3, r3, #16
 800db6e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	461a      	mov	r2, r3
 800db78:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800db7c:	643b      	str	r3, [r7, #64]	@ 0x40
 800db7e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db80:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800db82:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800db84:	e841 2300 	strex	r3, r2, [r1]
 800db88:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800db8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d1e4      	bne.n	800db5a <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	69db      	ldr	r3, [r3, #28]
 800db96:	f003 0310 	and.w	r3, r3, #16
 800db9a:	2b10      	cmp	r3, #16
 800db9c:	d103      	bne.n	800dba6 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	2210      	movs	r2, #16
 800dba4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800dbac:	4619      	mov	r1, r3
 800dbae:	6878      	ldr	r0, [r7, #4]
 800dbb0:	f7fe f98e 	bl	800bed0 <HAL_UARTEx_RxEventCallback>
 800dbb4:	e002      	b.n	800dbbc <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800dbb6:	6878      	ldr	r0, [r7, #4]
 800dbb8:	f7f5 fffc 	bl	8003bb4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800dbbc:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d006      	beq.n	800dbd2 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800dbc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dbc8:	f003 0320 	and.w	r3, r3, #32
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	f47f aed1 	bne.w	800d974 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800dbd8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800dbdc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d049      	beq.n	800dc78 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800dbea:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800dbee:	429a      	cmp	r2, r3
 800dbf0:	d242      	bcs.n	800dc78 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	3308      	adds	r3, #8
 800dbf8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbfa:	6a3b      	ldr	r3, [r7, #32]
 800dbfc:	e853 3f00 	ldrex	r3, [r3]
 800dc00:	61fb      	str	r3, [r7, #28]
   return(result);
 800dc02:	69fb      	ldr	r3, [r7, #28]
 800dc04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800dc08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	3308      	adds	r3, #8
 800dc12:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800dc16:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800dc18:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc1a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dc1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dc1e:	e841 2300 	strex	r3, r2, [r1]
 800dc22:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800dc24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d1e3      	bne.n	800dbf2 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	4a16      	ldr	r2, [pc, #88]	@ (800dc88 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800dc2e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	e853 3f00 	ldrex	r3, [r3]
 800dc3c:	60bb      	str	r3, [r7, #8]
   return(result);
 800dc3e:	68bb      	ldr	r3, [r7, #8]
 800dc40:	f043 0320 	orr.w	r3, r3, #32
 800dc44:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	461a      	mov	r2, r3
 800dc4e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800dc52:	61bb      	str	r3, [r7, #24]
 800dc54:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc56:	6979      	ldr	r1, [r7, #20]
 800dc58:	69ba      	ldr	r2, [r7, #24]
 800dc5a:	e841 2300 	strex	r3, r2, [r1]
 800dc5e:	613b      	str	r3, [r7, #16]
   return(result);
 800dc60:	693b      	ldr	r3, [r7, #16]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d1e4      	bne.n	800dc30 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800dc66:	e007      	b.n	800dc78 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	699a      	ldr	r2, [r3, #24]
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	f042 0208 	orr.w	r2, r2, #8
 800dc76:	619a      	str	r2, [r3, #24]
}
 800dc78:	bf00      	nop
 800dc7a:	37b0      	adds	r7, #176	@ 0xb0
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	bd80      	pop	{r7, pc}
 800dc80:	effffffe 	.word	0xeffffffe
 800dc84:	58000c00 	.word	0x58000c00
 800dc88:	0800d5bd 	.word	0x0800d5bd

0800dc8c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800dc8c:	b580      	push	{r7, lr}
 800dc8e:	b0ae      	sub	sp, #184	@ 0xb8
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800dc9a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	69db      	ldr	r3, [r3, #28]
 800dca4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	689b      	ldr	r3, [r3, #8]
 800dcb8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800dcc2:	2b22      	cmp	r3, #34	@ 0x22
 800dcc4:	f040 8184 	bne.w	800dfd0 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800dcce:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800dcd2:	e127      	b.n	800df24 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dcda:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dce2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800dce6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800dcea:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800dcee:	4013      	ands	r3, r2
 800dcf0:	b29a      	uxth	r2, r3
 800dcf2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800dcf6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dcfc:	1c9a      	adds	r2, r3, #2
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800dd08:	b29b      	uxth	r3, r3
 800dd0a:	3b01      	subs	r3, #1
 800dd0c:	b29a      	uxth	r2, r3
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	69db      	ldr	r3, [r3, #28]
 800dd1a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800dd1e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800dd22:	f003 0307 	and.w	r3, r3, #7
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d053      	beq.n	800ddd2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800dd2a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800dd2e:	f003 0301 	and.w	r3, r3, #1
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d011      	beq.n	800dd5a <UART_RxISR_16BIT_FIFOEN+0xce>
 800dd36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dd3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d00b      	beq.n	800dd5a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	2201      	movs	r2, #1
 800dd48:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dd50:	f043 0201 	orr.w	r2, r3, #1
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dd5a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800dd5e:	f003 0302 	and.w	r3, r3, #2
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d011      	beq.n	800dd8a <UART_RxISR_16BIT_FIFOEN+0xfe>
 800dd66:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800dd6a:	f003 0301 	and.w	r3, r3, #1
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d00b      	beq.n	800dd8a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	2202      	movs	r2, #2
 800dd78:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dd80:	f043 0204 	orr.w	r2, r3, #4
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dd8a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800dd8e:	f003 0304 	and.w	r3, r3, #4
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d011      	beq.n	800ddba <UART_RxISR_16BIT_FIFOEN+0x12e>
 800dd96:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800dd9a:	f003 0301 	and.w	r3, r3, #1
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d00b      	beq.n	800ddba <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	2204      	movs	r2, #4
 800dda8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ddb0:	f043 0202 	orr.w	r2, r3, #2
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d006      	beq.n	800ddd2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ddc4:	6878      	ldr	r0, [r7, #4]
 800ddc6:	f7fe f86f 	bl	800bea8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	2200      	movs	r2, #0
 800ddce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ddd8:	b29b      	uxth	r3, r3
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	f040 80a2 	bne.w	800df24 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dde6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800dde8:	e853 3f00 	ldrex	r3, [r3]
 800ddec:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ddee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ddf0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ddf4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	461a      	mov	r2, r3
 800ddfe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800de02:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800de06:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de08:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800de0a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800de0e:	e841 2300 	strex	r3, r2, [r1]
 800de12:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800de14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800de16:	2b00      	cmp	r3, #0
 800de18:	d1e2      	bne.n	800dde0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	3308      	adds	r3, #8
 800de20:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de22:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800de24:	e853 3f00 	ldrex	r3, [r3]
 800de28:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800de2a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800de2c:	4b6e      	ldr	r3, [pc, #440]	@ (800dfe8 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800de2e:	4013      	ands	r3, r2
 800de30:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	3308      	adds	r3, #8
 800de3a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800de3e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800de40:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de42:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800de44:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800de46:	e841 2300 	strex	r3, r2, [r1]
 800de4a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800de4c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d1e3      	bne.n	800de1a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	2220      	movs	r2, #32
 800de56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	2200      	movs	r2, #0
 800de5e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	2200      	movs	r2, #0
 800de64:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	4a60      	ldr	r2, [pc, #384]	@ (800dfec <UART_RxISR_16BIT_FIFOEN+0x360>)
 800de6c:	4293      	cmp	r3, r2
 800de6e:	d021      	beq.n	800deb4 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	685b      	ldr	r3, [r3, #4]
 800de76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d01a      	beq.n	800deb4 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800de86:	e853 3f00 	ldrex	r3, [r3]
 800de8a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800de8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800de8e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800de92:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	461a      	mov	r2, r3
 800de9c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800dea0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800dea2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dea4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800dea6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800dea8:	e841 2300 	strex	r3, r2, [r1]
 800deac:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800deae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d1e4      	bne.n	800de7e <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800deb8:	2b01      	cmp	r3, #1
 800deba:	d130      	bne.n	800df1e <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	2200      	movs	r2, #0
 800dec0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dec8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800deca:	e853 3f00 	ldrex	r3, [r3]
 800dece:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ded0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ded2:	f023 0310 	bic.w	r3, r3, #16
 800ded6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	461a      	mov	r2, r3
 800dee0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800dee4:	647b      	str	r3, [r7, #68]	@ 0x44
 800dee6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dee8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800deea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800deec:	e841 2300 	strex	r3, r2, [r1]
 800def0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800def2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800def4:	2b00      	cmp	r3, #0
 800def6:	d1e4      	bne.n	800dec2 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	69db      	ldr	r3, [r3, #28]
 800defe:	f003 0310 	and.w	r3, r3, #16
 800df02:	2b10      	cmp	r3, #16
 800df04:	d103      	bne.n	800df0e <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	2210      	movs	r2, #16
 800df0c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800df14:	4619      	mov	r1, r3
 800df16:	6878      	ldr	r0, [r7, #4]
 800df18:	f7fd ffda 	bl	800bed0 <HAL_UARTEx_RxEventCallback>
 800df1c:	e002      	b.n	800df24 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800df1e:	6878      	ldr	r0, [r7, #4]
 800df20:	f7f5 fe48 	bl	8003bb4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800df24:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d006      	beq.n	800df3a <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800df2c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800df30:	f003 0320 	and.w	r3, r3, #32
 800df34:	2b00      	cmp	r3, #0
 800df36:	f47f aecd 	bne.w	800dcd4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800df40:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800df44:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d049      	beq.n	800dfe0 <UART_RxISR_16BIT_FIFOEN+0x354>
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800df52:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800df56:	429a      	cmp	r2, r3
 800df58:	d242      	bcs.n	800dfe0 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	3308      	adds	r3, #8
 800df60:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df64:	e853 3f00 	ldrex	r3, [r3]
 800df68:	623b      	str	r3, [r7, #32]
   return(result);
 800df6a:	6a3b      	ldr	r3, [r7, #32]
 800df6c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800df70:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	3308      	adds	r3, #8
 800df7a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800df7e:	633a      	str	r2, [r7, #48]	@ 0x30
 800df80:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800df84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800df86:	e841 2300 	strex	r3, r2, [r1]
 800df8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800df8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d1e3      	bne.n	800df5a <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	4a16      	ldr	r2, [pc, #88]	@ (800dff0 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800df96:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df9e:	693b      	ldr	r3, [r7, #16]
 800dfa0:	e853 3f00 	ldrex	r3, [r3]
 800dfa4:	60fb      	str	r3, [r7, #12]
   return(result);
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	f043 0320 	orr.w	r3, r3, #32
 800dfac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	461a      	mov	r2, r3
 800dfb6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800dfba:	61fb      	str	r3, [r7, #28]
 800dfbc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfbe:	69b9      	ldr	r1, [r7, #24]
 800dfc0:	69fa      	ldr	r2, [r7, #28]
 800dfc2:	e841 2300 	strex	r3, r2, [r1]
 800dfc6:	617b      	str	r3, [r7, #20]
   return(result);
 800dfc8:	697b      	ldr	r3, [r7, #20]
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d1e4      	bne.n	800df98 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800dfce:	e007      	b.n	800dfe0 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	699a      	ldr	r2, [r3, #24]
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	f042 0208 	orr.w	r2, r2, #8
 800dfde:	619a      	str	r2, [r3, #24]
}
 800dfe0:	bf00      	nop
 800dfe2:	37b8      	adds	r7, #184	@ 0xb8
 800dfe4:	46bd      	mov	sp, r7
 800dfe6:	bd80      	pop	{r7, pc}
 800dfe8:	effffffe 	.word	0xeffffffe
 800dfec:	58000c00 	.word	0x58000c00
 800dff0:	0800d775 	.word	0x0800d775

0800dff4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800dff4:	b480      	push	{r7}
 800dff6:	b083      	sub	sp, #12
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800dffc:	bf00      	nop
 800dffe:	370c      	adds	r7, #12
 800e000:	46bd      	mov	sp, r7
 800e002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e006:	4770      	bx	lr

0800e008 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e008:	b480      	push	{r7}
 800e00a:	b083      	sub	sp, #12
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e010:	bf00      	nop
 800e012:	370c      	adds	r7, #12
 800e014:	46bd      	mov	sp, r7
 800e016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e01a:	4770      	bx	lr

0800e01c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e01c:	b480      	push	{r7}
 800e01e:	b083      	sub	sp, #12
 800e020:	af00      	add	r7, sp, #0
 800e022:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e024:	bf00      	nop
 800e026:	370c      	adds	r7, #12
 800e028:	46bd      	mov	sp, r7
 800e02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e02e:	4770      	bx	lr

0800e030 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e030:	b480      	push	{r7}
 800e032:	b085      	sub	sp, #20
 800e034:	af00      	add	r7, sp, #0
 800e036:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e03e:	2b01      	cmp	r3, #1
 800e040:	d101      	bne.n	800e046 <HAL_UARTEx_DisableFifoMode+0x16>
 800e042:	2302      	movs	r3, #2
 800e044:	e027      	b.n	800e096 <HAL_UARTEx_DisableFifoMode+0x66>
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	2201      	movs	r2, #1
 800e04a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	2224      	movs	r2, #36	@ 0x24
 800e052:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	681a      	ldr	r2, [r3, #0]
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	f022 0201 	bic.w	r2, r2, #1
 800e06c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800e074:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	2200      	movs	r2, #0
 800e07a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	68fa      	ldr	r2, [r7, #12]
 800e082:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	2220      	movs	r2, #32
 800e088:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	2200      	movs	r2, #0
 800e090:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e094:	2300      	movs	r3, #0
}
 800e096:	4618      	mov	r0, r3
 800e098:	3714      	adds	r7, #20
 800e09a:	46bd      	mov	sp, r7
 800e09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a0:	4770      	bx	lr

0800e0a2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e0a2:	b580      	push	{r7, lr}
 800e0a4:	b084      	sub	sp, #16
 800e0a6:	af00      	add	r7, sp, #0
 800e0a8:	6078      	str	r0, [r7, #4]
 800e0aa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e0b2:	2b01      	cmp	r3, #1
 800e0b4:	d101      	bne.n	800e0ba <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e0b6:	2302      	movs	r3, #2
 800e0b8:	e02d      	b.n	800e116 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	2201      	movs	r2, #1
 800e0be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	2224      	movs	r2, #36	@ 0x24
 800e0c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	681a      	ldr	r2, [r3, #0]
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	f022 0201 	bic.w	r2, r2, #1
 800e0e0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	689b      	ldr	r3, [r3, #8]
 800e0e8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	683a      	ldr	r2, [r7, #0]
 800e0f2:	430a      	orrs	r2, r1
 800e0f4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e0f6:	6878      	ldr	r0, [r7, #4]
 800e0f8:	f000 f850 	bl	800e19c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	68fa      	ldr	r2, [r7, #12]
 800e102:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	2220      	movs	r2, #32
 800e108:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	2200      	movs	r2, #0
 800e110:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e114:	2300      	movs	r3, #0
}
 800e116:	4618      	mov	r0, r3
 800e118:	3710      	adds	r7, #16
 800e11a:	46bd      	mov	sp, r7
 800e11c:	bd80      	pop	{r7, pc}

0800e11e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e11e:	b580      	push	{r7, lr}
 800e120:	b084      	sub	sp, #16
 800e122:	af00      	add	r7, sp, #0
 800e124:	6078      	str	r0, [r7, #4]
 800e126:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e12e:	2b01      	cmp	r3, #1
 800e130:	d101      	bne.n	800e136 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e132:	2302      	movs	r3, #2
 800e134:	e02d      	b.n	800e192 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	2201      	movs	r2, #1
 800e13a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	2224      	movs	r2, #36	@ 0x24
 800e142:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	681a      	ldr	r2, [r3, #0]
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	f022 0201 	bic.w	r2, r2, #1
 800e15c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	689b      	ldr	r3, [r3, #8]
 800e164:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	683a      	ldr	r2, [r7, #0]
 800e16e:	430a      	orrs	r2, r1
 800e170:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e172:	6878      	ldr	r0, [r7, #4]
 800e174:	f000 f812 	bl	800e19c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	68fa      	ldr	r2, [r7, #12]
 800e17e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	2220      	movs	r2, #32
 800e184:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	2200      	movs	r2, #0
 800e18c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e190:	2300      	movs	r3, #0
}
 800e192:	4618      	mov	r0, r3
 800e194:	3710      	adds	r7, #16
 800e196:	46bd      	mov	sp, r7
 800e198:	bd80      	pop	{r7, pc}
	...

0800e19c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e19c:	b480      	push	{r7}
 800e19e:	b085      	sub	sp, #20
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d108      	bne.n	800e1be <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	2201      	movs	r2, #1
 800e1b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	2201      	movs	r2, #1
 800e1b8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e1bc:	e031      	b.n	800e222 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e1be:	2310      	movs	r3, #16
 800e1c0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e1c2:	2310      	movs	r3, #16
 800e1c4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	689b      	ldr	r3, [r3, #8]
 800e1cc:	0e5b      	lsrs	r3, r3, #25
 800e1ce:	b2db      	uxtb	r3, r3
 800e1d0:	f003 0307 	and.w	r3, r3, #7
 800e1d4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	689b      	ldr	r3, [r3, #8]
 800e1dc:	0f5b      	lsrs	r3, r3, #29
 800e1de:	b2db      	uxtb	r3, r3
 800e1e0:	f003 0307 	and.w	r3, r3, #7
 800e1e4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e1e6:	7bbb      	ldrb	r3, [r7, #14]
 800e1e8:	7b3a      	ldrb	r2, [r7, #12]
 800e1ea:	4911      	ldr	r1, [pc, #68]	@ (800e230 <UARTEx_SetNbDataToProcess+0x94>)
 800e1ec:	5c8a      	ldrb	r2, [r1, r2]
 800e1ee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e1f2:	7b3a      	ldrb	r2, [r7, #12]
 800e1f4:	490f      	ldr	r1, [pc, #60]	@ (800e234 <UARTEx_SetNbDataToProcess+0x98>)
 800e1f6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e1f8:	fb93 f3f2 	sdiv	r3, r3, r2
 800e1fc:	b29a      	uxth	r2, r3
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e204:	7bfb      	ldrb	r3, [r7, #15]
 800e206:	7b7a      	ldrb	r2, [r7, #13]
 800e208:	4909      	ldr	r1, [pc, #36]	@ (800e230 <UARTEx_SetNbDataToProcess+0x94>)
 800e20a:	5c8a      	ldrb	r2, [r1, r2]
 800e20c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e210:	7b7a      	ldrb	r2, [r7, #13]
 800e212:	4908      	ldr	r1, [pc, #32]	@ (800e234 <UARTEx_SetNbDataToProcess+0x98>)
 800e214:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e216:	fb93 f3f2 	sdiv	r3, r3, r2
 800e21a:	b29a      	uxth	r2, r3
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800e222:	bf00      	nop
 800e224:	3714      	adds	r7, #20
 800e226:	46bd      	mov	sp, r7
 800e228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e22c:	4770      	bx	lr
 800e22e:	bf00      	nop
 800e230:	08017d04 	.word	0x08017d04
 800e234:	08017d0c 	.word	0x08017d0c

0800e238 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800e238:	b084      	sub	sp, #16
 800e23a:	b480      	push	{r7}
 800e23c:	b085      	sub	sp, #20
 800e23e:	af00      	add	r7, sp, #0
 800e240:	6078      	str	r0, [r7, #4]
 800e242:	f107 001c 	add.w	r0, r7, #28
 800e246:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800e24a:	2300      	movs	r3, #0
 800e24c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800e24e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800e250:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800e252:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800e254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800e256:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800e258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800e25a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800e25c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800e25e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800e260:	68fa      	ldr	r2, [r7, #12]
 800e262:	4313      	orrs	r3, r2
 800e264:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	685a      	ldr	r2, [r3, #4]
 800e26a:	4b07      	ldr	r3, [pc, #28]	@ (800e288 <SDMMC_Init+0x50>)
 800e26c:	4013      	ands	r3, r2
 800e26e:	68fa      	ldr	r2, [r7, #12]
 800e270:	431a      	orrs	r2, r3
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800e276:	2300      	movs	r3, #0
}
 800e278:	4618      	mov	r0, r3
 800e27a:	3714      	adds	r7, #20
 800e27c:	46bd      	mov	sp, r7
 800e27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e282:	b004      	add	sp, #16
 800e284:	4770      	bx	lr
 800e286:	bf00      	nop
 800e288:	ffc02c00 	.word	0xffc02c00

0800e28c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800e28c:	b480      	push	{r7}
 800e28e:	b083      	sub	sp, #12
 800e290:	af00      	add	r7, sp, #0
 800e292:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800e29a:	4618      	mov	r0, r3
 800e29c:	370c      	adds	r7, #12
 800e29e:	46bd      	mov	sp, r7
 800e2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a4:	4770      	bx	lr

0800e2a6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800e2a6:	b480      	push	{r7}
 800e2a8:	b083      	sub	sp, #12
 800e2aa:	af00      	add	r7, sp, #0
 800e2ac:	6078      	str	r0, [r7, #4]
 800e2ae:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800e2b0:	683b      	ldr	r3, [r7, #0]
 800e2b2:	681a      	ldr	r2, [r3, #0]
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800e2ba:	2300      	movs	r3, #0
}
 800e2bc:	4618      	mov	r0, r3
 800e2be:	370c      	adds	r7, #12
 800e2c0:	46bd      	mov	sp, r7
 800e2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c6:	4770      	bx	lr

0800e2c8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800e2c8:	b480      	push	{r7}
 800e2ca:	b083      	sub	sp, #12
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	f043 0203 	orr.w	r2, r3, #3
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800e2dc:	2300      	movs	r3, #0
}
 800e2de:	4618      	mov	r0, r3
 800e2e0:	370c      	adds	r7, #12
 800e2e2:	46bd      	mov	sp, r7
 800e2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e8:	4770      	bx	lr

0800e2ea <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800e2ea:	b480      	push	{r7}
 800e2ec:	b083      	sub	sp, #12
 800e2ee:	af00      	add	r7, sp, #0
 800e2f0:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	f003 0303 	and.w	r3, r3, #3
}
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	370c      	adds	r7, #12
 800e2fe:	46bd      	mov	sp, r7
 800e300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e304:	4770      	bx	lr
	...

0800e308 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800e308:	b480      	push	{r7}
 800e30a:	b085      	sub	sp, #20
 800e30c:	af00      	add	r7, sp, #0
 800e30e:	6078      	str	r0, [r7, #4]
 800e310:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e312:	2300      	movs	r3, #0
 800e314:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800e316:	683b      	ldr	r3, [r7, #0]
 800e318:	681a      	ldr	r2, [r3, #0]
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800e31e:	683b      	ldr	r3, [r7, #0]
 800e320:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800e322:	683b      	ldr	r3, [r7, #0]
 800e324:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800e326:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800e328:	683b      	ldr	r3, [r7, #0]
 800e32a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800e32c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800e32e:	683b      	ldr	r3, [r7, #0]
 800e330:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800e332:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800e334:	68fa      	ldr	r2, [r7, #12]
 800e336:	4313      	orrs	r3, r2
 800e338:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	68da      	ldr	r2, [r3, #12]
 800e33e:	4b06      	ldr	r3, [pc, #24]	@ (800e358 <SDMMC_SendCommand+0x50>)
 800e340:	4013      	ands	r3, r2
 800e342:	68fa      	ldr	r2, [r7, #12]
 800e344:	431a      	orrs	r2, r3
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800e34a:	2300      	movs	r3, #0
}
 800e34c:	4618      	mov	r0, r3
 800e34e:	3714      	adds	r7, #20
 800e350:	46bd      	mov	sp, r7
 800e352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e356:	4770      	bx	lr
 800e358:	fffee0c0 	.word	0xfffee0c0

0800e35c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800e35c:	b480      	push	{r7}
 800e35e:	b083      	sub	sp, #12
 800e360:	af00      	add	r7, sp, #0
 800e362:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	691b      	ldr	r3, [r3, #16]
 800e368:	b2db      	uxtb	r3, r3
}
 800e36a:	4618      	mov	r0, r3
 800e36c:	370c      	adds	r7, #12
 800e36e:	46bd      	mov	sp, r7
 800e370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e374:	4770      	bx	lr

0800e376 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800e376:	b480      	push	{r7}
 800e378:	b085      	sub	sp, #20
 800e37a:	af00      	add	r7, sp, #0
 800e37c:	6078      	str	r0, [r7, #4]
 800e37e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	3314      	adds	r3, #20
 800e384:	461a      	mov	r2, r3
 800e386:	683b      	ldr	r3, [r7, #0]
 800e388:	4413      	add	r3, r2
 800e38a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	681b      	ldr	r3, [r3, #0]
}
 800e390:	4618      	mov	r0, r3
 800e392:	3714      	adds	r7, #20
 800e394:	46bd      	mov	sp, r7
 800e396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e39a:	4770      	bx	lr

0800e39c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800e39c:	b480      	push	{r7}
 800e39e:	b085      	sub	sp, #20
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	6078      	str	r0, [r7, #4]
 800e3a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800e3aa:	683b      	ldr	r3, [r7, #0]
 800e3ac:	681a      	ldr	r2, [r3, #0]
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800e3b2:	683b      	ldr	r3, [r7, #0]
 800e3b4:	685a      	ldr	r2, [r3, #4]
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800e3ba:	683b      	ldr	r3, [r7, #0]
 800e3bc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800e3be:	683b      	ldr	r3, [r7, #0]
 800e3c0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800e3c2:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800e3c4:	683b      	ldr	r3, [r7, #0]
 800e3c6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800e3c8:	431a      	orrs	r2, r3
                       Data->DPSM);
 800e3ca:	683b      	ldr	r3, [r7, #0]
 800e3cc:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800e3ce:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800e3d0:	68fa      	ldr	r2, [r7, #12]
 800e3d2:	4313      	orrs	r3, r2
 800e3d4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3da:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	431a      	orrs	r2, r3
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800e3e6:	2300      	movs	r3, #0

}
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	3714      	adds	r7, #20
 800e3ec:	46bd      	mov	sp, r7
 800e3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f2:	4770      	bx	lr

0800e3f4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800e3f4:	b580      	push	{r7, lr}
 800e3f6:	b088      	sub	sp, #32
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	6078      	str	r0, [r7, #4]
 800e3fc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800e3fe:	683b      	ldr	r3, [r7, #0]
 800e400:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800e402:	2310      	movs	r3, #16
 800e404:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e406:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e40a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e40c:	2300      	movs	r3, #0
 800e40e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e410:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e414:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e416:	f107 0308 	add.w	r3, r7, #8
 800e41a:	4619      	mov	r1, r3
 800e41c:	6878      	ldr	r0, [r7, #4]
 800e41e:	f7ff ff73 	bl	800e308 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800e422:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e426:	2110      	movs	r1, #16
 800e428:	6878      	ldr	r0, [r7, #4]
 800e42a:	f000 fa5f 	bl	800e8ec <SDMMC_GetCmdResp1>
 800e42e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e430:	69fb      	ldr	r3, [r7, #28]
}
 800e432:	4618      	mov	r0, r3
 800e434:	3720      	adds	r7, #32
 800e436:	46bd      	mov	sp, r7
 800e438:	bd80      	pop	{r7, pc}

0800e43a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800e43a:	b580      	push	{r7, lr}
 800e43c:	b088      	sub	sp, #32
 800e43e:	af00      	add	r7, sp, #0
 800e440:	6078      	str	r0, [r7, #4]
 800e442:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e444:	683b      	ldr	r3, [r7, #0]
 800e446:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800e448:	2311      	movs	r3, #17
 800e44a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e44c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e450:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e452:	2300      	movs	r3, #0
 800e454:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e456:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e45a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e45c:	f107 0308 	add.w	r3, r7, #8
 800e460:	4619      	mov	r1, r3
 800e462:	6878      	ldr	r0, [r7, #4]
 800e464:	f7ff ff50 	bl	800e308 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800e468:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e46c:	2111      	movs	r1, #17
 800e46e:	6878      	ldr	r0, [r7, #4]
 800e470:	f000 fa3c 	bl	800e8ec <SDMMC_GetCmdResp1>
 800e474:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e476:	69fb      	ldr	r3, [r7, #28]
}
 800e478:	4618      	mov	r0, r3
 800e47a:	3720      	adds	r7, #32
 800e47c:	46bd      	mov	sp, r7
 800e47e:	bd80      	pop	{r7, pc}

0800e480 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800e480:	b580      	push	{r7, lr}
 800e482:	b088      	sub	sp, #32
 800e484:	af00      	add	r7, sp, #0
 800e486:	6078      	str	r0, [r7, #4]
 800e488:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e48a:	683b      	ldr	r3, [r7, #0]
 800e48c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800e48e:	2312      	movs	r3, #18
 800e490:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e492:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e496:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e498:	2300      	movs	r3, #0
 800e49a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e49c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e4a0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e4a2:	f107 0308 	add.w	r3, r7, #8
 800e4a6:	4619      	mov	r1, r3
 800e4a8:	6878      	ldr	r0, [r7, #4]
 800e4aa:	f7ff ff2d 	bl	800e308 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800e4ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e4b2:	2112      	movs	r1, #18
 800e4b4:	6878      	ldr	r0, [r7, #4]
 800e4b6:	f000 fa19 	bl	800e8ec <SDMMC_GetCmdResp1>
 800e4ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e4bc:	69fb      	ldr	r3, [r7, #28]
}
 800e4be:	4618      	mov	r0, r3
 800e4c0:	3720      	adds	r7, #32
 800e4c2:	46bd      	mov	sp, r7
 800e4c4:	bd80      	pop	{r7, pc}

0800e4c6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800e4c6:	b580      	push	{r7, lr}
 800e4c8:	b088      	sub	sp, #32
 800e4ca:	af00      	add	r7, sp, #0
 800e4cc:	6078      	str	r0, [r7, #4]
 800e4ce:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e4d0:	683b      	ldr	r3, [r7, #0]
 800e4d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800e4d4:	2318      	movs	r3, #24
 800e4d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e4d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e4dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e4de:	2300      	movs	r3, #0
 800e4e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e4e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e4e6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e4e8:	f107 0308 	add.w	r3, r7, #8
 800e4ec:	4619      	mov	r1, r3
 800e4ee:	6878      	ldr	r0, [r7, #4]
 800e4f0:	f7ff ff0a 	bl	800e308 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800e4f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e4f8:	2118      	movs	r1, #24
 800e4fa:	6878      	ldr	r0, [r7, #4]
 800e4fc:	f000 f9f6 	bl	800e8ec <SDMMC_GetCmdResp1>
 800e500:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e502:	69fb      	ldr	r3, [r7, #28]
}
 800e504:	4618      	mov	r0, r3
 800e506:	3720      	adds	r7, #32
 800e508:	46bd      	mov	sp, r7
 800e50a:	bd80      	pop	{r7, pc}

0800e50c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800e50c:	b580      	push	{r7, lr}
 800e50e:	b088      	sub	sp, #32
 800e510:	af00      	add	r7, sp, #0
 800e512:	6078      	str	r0, [r7, #4]
 800e514:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e516:	683b      	ldr	r3, [r7, #0]
 800e518:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800e51a:	2319      	movs	r3, #25
 800e51c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e51e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e522:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e524:	2300      	movs	r3, #0
 800e526:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e528:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e52c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e52e:	f107 0308 	add.w	r3, r7, #8
 800e532:	4619      	mov	r1, r3
 800e534:	6878      	ldr	r0, [r7, #4]
 800e536:	f7ff fee7 	bl	800e308 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800e53a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e53e:	2119      	movs	r1, #25
 800e540:	6878      	ldr	r0, [r7, #4]
 800e542:	f000 f9d3 	bl	800e8ec <SDMMC_GetCmdResp1>
 800e546:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e548:	69fb      	ldr	r3, [r7, #28]
}
 800e54a:	4618      	mov	r0, r3
 800e54c:	3720      	adds	r7, #32
 800e54e:	46bd      	mov	sp, r7
 800e550:	bd80      	pop	{r7, pc}
	...

0800e554 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800e554:	b580      	push	{r7, lr}
 800e556:	b088      	sub	sp, #32
 800e558:	af00      	add	r7, sp, #0
 800e55a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800e55c:	2300      	movs	r3, #0
 800e55e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800e560:	230c      	movs	r3, #12
 800e562:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e564:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e568:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e56a:	2300      	movs	r3, #0
 800e56c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e56e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e572:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	68db      	ldr	r3, [r3, #12]
 800e578:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	68db      	ldr	r3, [r3, #12]
 800e584:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e58c:	f107 0308 	add.w	r3, r7, #8
 800e590:	4619      	mov	r1, r3
 800e592:	6878      	ldr	r0, [r7, #4]
 800e594:	f7ff feb8 	bl	800e308 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800e598:	4a0b      	ldr	r2, [pc, #44]	@ (800e5c8 <SDMMC_CmdStopTransfer+0x74>)
 800e59a:	210c      	movs	r1, #12
 800e59c:	6878      	ldr	r0, [r7, #4]
 800e59e:	f000 f9a5 	bl	800e8ec <SDMMC_GetCmdResp1>
 800e5a2:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	68db      	ldr	r3, [r3, #12]
 800e5a8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800e5b0:	69fb      	ldr	r3, [r7, #28]
 800e5b2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e5b6:	d101      	bne.n	800e5bc <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800e5b8:	2300      	movs	r3, #0
 800e5ba:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800e5bc:	69fb      	ldr	r3, [r7, #28]
}
 800e5be:	4618      	mov	r0, r3
 800e5c0:	3720      	adds	r7, #32
 800e5c2:	46bd      	mov	sp, r7
 800e5c4:	bd80      	pop	{r7, pc}
 800e5c6:	bf00      	nop
 800e5c8:	05f5e100 	.word	0x05f5e100

0800e5cc <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800e5cc:	b580      	push	{r7, lr}
 800e5ce:	b088      	sub	sp, #32
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	6078      	str	r0, [r7, #4]
 800e5d4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800e5d6:	683b      	ldr	r3, [r7, #0]
 800e5d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800e5da:	2307      	movs	r3, #7
 800e5dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e5de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e5e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e5e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e5ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e5ee:	f107 0308 	add.w	r3, r7, #8
 800e5f2:	4619      	mov	r1, r3
 800e5f4:	6878      	ldr	r0, [r7, #4]
 800e5f6:	f7ff fe87 	bl	800e308 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800e5fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e5fe:	2107      	movs	r1, #7
 800e600:	6878      	ldr	r0, [r7, #4]
 800e602:	f000 f973 	bl	800e8ec <SDMMC_GetCmdResp1>
 800e606:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e608:	69fb      	ldr	r3, [r7, #28]
}
 800e60a:	4618      	mov	r0, r3
 800e60c:	3720      	adds	r7, #32
 800e60e:	46bd      	mov	sp, r7
 800e610:	bd80      	pop	{r7, pc}

0800e612 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800e612:	b580      	push	{r7, lr}
 800e614:	b088      	sub	sp, #32
 800e616:	af00      	add	r7, sp, #0
 800e618:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800e61a:	2300      	movs	r3, #0
 800e61c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800e61e:	2300      	movs	r3, #0
 800e620:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800e622:	2300      	movs	r3, #0
 800e624:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e626:	2300      	movs	r3, #0
 800e628:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e62a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e62e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e630:	f107 0308 	add.w	r3, r7, #8
 800e634:	4619      	mov	r1, r3
 800e636:	6878      	ldr	r0, [r7, #4]
 800e638:	f7ff fe66 	bl	800e308 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800e63c:	6878      	ldr	r0, [r7, #4]
 800e63e:	f000 fb97 	bl	800ed70 <SDMMC_GetCmdError>
 800e642:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e644:	69fb      	ldr	r3, [r7, #28]
}
 800e646:	4618      	mov	r0, r3
 800e648:	3720      	adds	r7, #32
 800e64a:	46bd      	mov	sp, r7
 800e64c:	bd80      	pop	{r7, pc}

0800e64e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800e64e:	b580      	push	{r7, lr}
 800e650:	b088      	sub	sp, #32
 800e652:	af00      	add	r7, sp, #0
 800e654:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800e656:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800e65a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800e65c:	2308      	movs	r3, #8
 800e65e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e660:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e664:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e666:	2300      	movs	r3, #0
 800e668:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e66a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e66e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e670:	f107 0308 	add.w	r3, r7, #8
 800e674:	4619      	mov	r1, r3
 800e676:	6878      	ldr	r0, [r7, #4]
 800e678:	f7ff fe46 	bl	800e308 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800e67c:	6878      	ldr	r0, [r7, #4]
 800e67e:	f000 fb29 	bl	800ecd4 <SDMMC_GetCmdResp7>
 800e682:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e684:	69fb      	ldr	r3, [r7, #28]
}
 800e686:	4618      	mov	r0, r3
 800e688:	3720      	adds	r7, #32
 800e68a:	46bd      	mov	sp, r7
 800e68c:	bd80      	pop	{r7, pc}

0800e68e <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e68e:	b580      	push	{r7, lr}
 800e690:	b088      	sub	sp, #32
 800e692:	af00      	add	r7, sp, #0
 800e694:	6078      	str	r0, [r7, #4]
 800e696:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800e698:	683b      	ldr	r3, [r7, #0]
 800e69a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800e69c:	2337      	movs	r3, #55	@ 0x37
 800e69e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e6a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e6a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e6a6:	2300      	movs	r3, #0
 800e6a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e6aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e6ae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e6b0:	f107 0308 	add.w	r3, r7, #8
 800e6b4:	4619      	mov	r1, r3
 800e6b6:	6878      	ldr	r0, [r7, #4]
 800e6b8:	f7ff fe26 	bl	800e308 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800e6bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e6c0:	2137      	movs	r1, #55	@ 0x37
 800e6c2:	6878      	ldr	r0, [r7, #4]
 800e6c4:	f000 f912 	bl	800e8ec <SDMMC_GetCmdResp1>
 800e6c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e6ca:	69fb      	ldr	r3, [r7, #28]
}
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	3720      	adds	r7, #32
 800e6d0:	46bd      	mov	sp, r7
 800e6d2:	bd80      	pop	{r7, pc}

0800e6d4 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	b088      	sub	sp, #32
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	6078      	str	r0, [r7, #4]
 800e6dc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800e6de:	683b      	ldr	r3, [r7, #0]
 800e6e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800e6e2:	2329      	movs	r3, #41	@ 0x29
 800e6e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e6e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e6ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e6ec:	2300      	movs	r3, #0
 800e6ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e6f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e6f4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e6f6:	f107 0308 	add.w	r3, r7, #8
 800e6fa:	4619      	mov	r1, r3
 800e6fc:	6878      	ldr	r0, [r7, #4]
 800e6fe:	f7ff fe03 	bl	800e308 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800e702:	6878      	ldr	r0, [r7, #4]
 800e704:	f000 fa2e 	bl	800eb64 <SDMMC_GetCmdResp3>
 800e708:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e70a:	69fb      	ldr	r3, [r7, #28]
}
 800e70c:	4618      	mov	r0, r3
 800e70e:	3720      	adds	r7, #32
 800e710:	46bd      	mov	sp, r7
 800e712:	bd80      	pop	{r7, pc}

0800e714 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800e714:	b580      	push	{r7, lr}
 800e716:	b088      	sub	sp, #32
 800e718:	af00      	add	r7, sp, #0
 800e71a:	6078      	str	r0, [r7, #4]
 800e71c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800e71e:	683b      	ldr	r3, [r7, #0]
 800e720:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800e722:	2306      	movs	r3, #6
 800e724:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e726:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e72a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e72c:	2300      	movs	r3, #0
 800e72e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e730:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e734:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e736:	f107 0308 	add.w	r3, r7, #8
 800e73a:	4619      	mov	r1, r3
 800e73c:	6878      	ldr	r0, [r7, #4]
 800e73e:	f7ff fde3 	bl	800e308 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800e742:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e746:	2106      	movs	r1, #6
 800e748:	6878      	ldr	r0, [r7, #4]
 800e74a:	f000 f8cf 	bl	800e8ec <SDMMC_GetCmdResp1>
 800e74e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e750:	69fb      	ldr	r3, [r7, #28]
}
 800e752:	4618      	mov	r0, r3
 800e754:	3720      	adds	r7, #32
 800e756:	46bd      	mov	sp, r7
 800e758:	bd80      	pop	{r7, pc}

0800e75a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800e75a:	b580      	push	{r7, lr}
 800e75c:	b088      	sub	sp, #32
 800e75e:	af00      	add	r7, sp, #0
 800e760:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800e762:	2300      	movs	r3, #0
 800e764:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800e766:	2333      	movs	r3, #51	@ 0x33
 800e768:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e76a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e76e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e770:	2300      	movs	r3, #0
 800e772:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e774:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e778:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e77a:	f107 0308 	add.w	r3, r7, #8
 800e77e:	4619      	mov	r1, r3
 800e780:	6878      	ldr	r0, [r7, #4]
 800e782:	f7ff fdc1 	bl	800e308 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800e786:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e78a:	2133      	movs	r1, #51	@ 0x33
 800e78c:	6878      	ldr	r0, [r7, #4]
 800e78e:	f000 f8ad 	bl	800e8ec <SDMMC_GetCmdResp1>
 800e792:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e794:	69fb      	ldr	r3, [r7, #28]
}
 800e796:	4618      	mov	r0, r3
 800e798:	3720      	adds	r7, #32
 800e79a:	46bd      	mov	sp, r7
 800e79c:	bd80      	pop	{r7, pc}

0800e79e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800e79e:	b580      	push	{r7, lr}
 800e7a0:	b088      	sub	sp, #32
 800e7a2:	af00      	add	r7, sp, #0
 800e7a4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800e7aa:	2302      	movs	r3, #2
 800e7ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800e7ae:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800e7b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e7b4:	2300      	movs	r3, #0
 800e7b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e7b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e7bc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e7be:	f107 0308 	add.w	r3, r7, #8
 800e7c2:	4619      	mov	r1, r3
 800e7c4:	6878      	ldr	r0, [r7, #4]
 800e7c6:	f7ff fd9f 	bl	800e308 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800e7ca:	6878      	ldr	r0, [r7, #4]
 800e7cc:	f000 f980 	bl	800ead0 <SDMMC_GetCmdResp2>
 800e7d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e7d2:	69fb      	ldr	r3, [r7, #28]
}
 800e7d4:	4618      	mov	r0, r3
 800e7d6:	3720      	adds	r7, #32
 800e7d8:	46bd      	mov	sp, r7
 800e7da:	bd80      	pop	{r7, pc}

0800e7dc <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e7dc:	b580      	push	{r7, lr}
 800e7de:	b088      	sub	sp, #32
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	6078      	str	r0, [r7, #4]
 800e7e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800e7e6:	683b      	ldr	r3, [r7, #0]
 800e7e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800e7ea:	2309      	movs	r3, #9
 800e7ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800e7ee:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800e7f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e7f4:	2300      	movs	r3, #0
 800e7f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e7f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e7fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e7fe:	f107 0308 	add.w	r3, r7, #8
 800e802:	4619      	mov	r1, r3
 800e804:	6878      	ldr	r0, [r7, #4]
 800e806:	f7ff fd7f 	bl	800e308 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800e80a:	6878      	ldr	r0, [r7, #4]
 800e80c:	f000 f960 	bl	800ead0 <SDMMC_GetCmdResp2>
 800e810:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e812:	69fb      	ldr	r3, [r7, #28]
}
 800e814:	4618      	mov	r0, r3
 800e816:	3720      	adds	r7, #32
 800e818:	46bd      	mov	sp, r7
 800e81a:	bd80      	pop	{r7, pc}

0800e81c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800e81c:	b580      	push	{r7, lr}
 800e81e:	b088      	sub	sp, #32
 800e820:	af00      	add	r7, sp, #0
 800e822:	6078      	str	r0, [r7, #4]
 800e824:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800e826:	2300      	movs	r3, #0
 800e828:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800e82a:	2303      	movs	r3, #3
 800e82c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e82e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e832:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e834:	2300      	movs	r3, #0
 800e836:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e838:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e83c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e83e:	f107 0308 	add.w	r3, r7, #8
 800e842:	4619      	mov	r1, r3
 800e844:	6878      	ldr	r0, [r7, #4]
 800e846:	f7ff fd5f 	bl	800e308 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800e84a:	683a      	ldr	r2, [r7, #0]
 800e84c:	2103      	movs	r1, #3
 800e84e:	6878      	ldr	r0, [r7, #4]
 800e850:	f000 f9c8 	bl	800ebe4 <SDMMC_GetCmdResp6>
 800e854:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e856:	69fb      	ldr	r3, [r7, #28]
}
 800e858:	4618      	mov	r0, r3
 800e85a:	3720      	adds	r7, #32
 800e85c:	46bd      	mov	sp, r7
 800e85e:	bd80      	pop	{r7, pc}

0800e860 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e860:	b580      	push	{r7, lr}
 800e862:	b088      	sub	sp, #32
 800e864:	af00      	add	r7, sp, #0
 800e866:	6078      	str	r0, [r7, #4]
 800e868:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800e86a:	683b      	ldr	r3, [r7, #0]
 800e86c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800e86e:	230d      	movs	r3, #13
 800e870:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e872:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e876:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e878:	2300      	movs	r3, #0
 800e87a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e87c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e880:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e882:	f107 0308 	add.w	r3, r7, #8
 800e886:	4619      	mov	r1, r3
 800e888:	6878      	ldr	r0, [r7, #4]
 800e88a:	f7ff fd3d 	bl	800e308 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800e88e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e892:	210d      	movs	r1, #13
 800e894:	6878      	ldr	r0, [r7, #4]
 800e896:	f000 f829 	bl	800e8ec <SDMMC_GetCmdResp1>
 800e89a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e89c:	69fb      	ldr	r3, [r7, #28]
}
 800e89e:	4618      	mov	r0, r3
 800e8a0:	3720      	adds	r7, #32
 800e8a2:	46bd      	mov	sp, r7
 800e8a4:	bd80      	pop	{r7, pc}

0800e8a6 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800e8a6:	b580      	push	{r7, lr}
 800e8a8:	b088      	sub	sp, #32
 800e8aa:	af00      	add	r7, sp, #0
 800e8ac:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800e8ae:	2300      	movs	r3, #0
 800e8b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800e8b2:	230d      	movs	r3, #13
 800e8b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e8b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e8ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e8bc:	2300      	movs	r3, #0
 800e8be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e8c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e8c4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e8c6:	f107 0308 	add.w	r3, r7, #8
 800e8ca:	4619      	mov	r1, r3
 800e8cc:	6878      	ldr	r0, [r7, #4]
 800e8ce:	f7ff fd1b 	bl	800e308 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800e8d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e8d6:	210d      	movs	r1, #13
 800e8d8:	6878      	ldr	r0, [r7, #4]
 800e8da:	f000 f807 	bl	800e8ec <SDMMC_GetCmdResp1>
 800e8de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e8e0:	69fb      	ldr	r3, [r7, #28]
}
 800e8e2:	4618      	mov	r0, r3
 800e8e4:	3720      	adds	r7, #32
 800e8e6:	46bd      	mov	sp, r7
 800e8e8:	bd80      	pop	{r7, pc}
	...

0800e8ec <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	b088      	sub	sp, #32
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	60f8      	str	r0, [r7, #12]
 800e8f4:	460b      	mov	r3, r1
 800e8f6:	607a      	str	r2, [r7, #4]
 800e8f8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e8fa:	4b70      	ldr	r3, [pc, #448]	@ (800eabc <SDMMC_GetCmdResp1+0x1d0>)
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	4a70      	ldr	r2, [pc, #448]	@ (800eac0 <SDMMC_GetCmdResp1+0x1d4>)
 800e900:	fba2 2303 	umull	r2, r3, r2, r3
 800e904:	0a5a      	lsrs	r2, r3, #9
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	fb02 f303 	mul.w	r3, r2, r3
 800e90c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800e90e:	69fb      	ldr	r3, [r7, #28]
 800e910:	1e5a      	subs	r2, r3, #1
 800e912:	61fa      	str	r2, [r7, #28]
 800e914:	2b00      	cmp	r3, #0
 800e916:	d102      	bne.n	800e91e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e918:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800e91c:	e0c9      	b.n	800eab2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e922:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800e924:	69ba      	ldr	r2, [r7, #24]
 800e926:	4b67      	ldr	r3, [pc, #412]	@ (800eac4 <SDMMC_GetCmdResp1+0x1d8>)
 800e928:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d0ef      	beq.n	800e90e <SDMMC_GetCmdResp1+0x22>
 800e92e:	69bb      	ldr	r3, [r7, #24]
 800e930:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e934:	2b00      	cmp	r3, #0
 800e936:	d1ea      	bne.n	800e90e <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e93c:	f003 0304 	and.w	r3, r3, #4
 800e940:	2b00      	cmp	r3, #0
 800e942:	d004      	beq.n	800e94e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	2204      	movs	r2, #4
 800e948:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e94a:	2304      	movs	r3, #4
 800e94c:	e0b1      	b.n	800eab2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e952:	f003 0301 	and.w	r3, r3, #1
 800e956:	2b00      	cmp	r3, #0
 800e958:	d004      	beq.n	800e964 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	2201      	movs	r2, #1
 800e95e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e960:	2301      	movs	r3, #1
 800e962:	e0a6      	b.n	800eab2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	4a58      	ldr	r2, [pc, #352]	@ (800eac8 <SDMMC_GetCmdResp1+0x1dc>)
 800e968:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e96a:	68f8      	ldr	r0, [r7, #12]
 800e96c:	f7ff fcf6 	bl	800e35c <SDMMC_GetCommandResponse>
 800e970:	4603      	mov	r3, r0
 800e972:	461a      	mov	r2, r3
 800e974:	7afb      	ldrb	r3, [r7, #11]
 800e976:	4293      	cmp	r3, r2
 800e978:	d001      	beq.n	800e97e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e97a:	2301      	movs	r3, #1
 800e97c:	e099      	b.n	800eab2 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800e97e:	2100      	movs	r1, #0
 800e980:	68f8      	ldr	r0, [r7, #12]
 800e982:	f7ff fcf8 	bl	800e376 <SDMMC_GetResponse>
 800e986:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e988:	697a      	ldr	r2, [r7, #20]
 800e98a:	4b50      	ldr	r3, [pc, #320]	@ (800eacc <SDMMC_GetCmdResp1+0x1e0>)
 800e98c:	4013      	ands	r3, r2
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d101      	bne.n	800e996 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800e992:	2300      	movs	r3, #0
 800e994:	e08d      	b.n	800eab2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e996:	697b      	ldr	r3, [r7, #20]
 800e998:	2b00      	cmp	r3, #0
 800e99a:	da02      	bge.n	800e9a2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e99c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e9a0:	e087      	b.n	800eab2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e9a2:	697b      	ldr	r3, [r7, #20]
 800e9a4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d001      	beq.n	800e9b0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e9ac:	2340      	movs	r3, #64	@ 0x40
 800e9ae:	e080      	b.n	800eab2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e9b0:	697b      	ldr	r3, [r7, #20]
 800e9b2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d001      	beq.n	800e9be <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e9ba:	2380      	movs	r3, #128	@ 0x80
 800e9bc:	e079      	b.n	800eab2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e9be:	697b      	ldr	r3, [r7, #20]
 800e9c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d002      	beq.n	800e9ce <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e9c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e9cc:	e071      	b.n	800eab2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e9ce:	697b      	ldr	r3, [r7, #20]
 800e9d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d002      	beq.n	800e9de <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e9d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e9dc:	e069      	b.n	800eab2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e9de:	697b      	ldr	r3, [r7, #20]
 800e9e0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d002      	beq.n	800e9ee <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e9e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e9ec:	e061      	b.n	800eab2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e9ee:	697b      	ldr	r3, [r7, #20]
 800e9f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d002      	beq.n	800e9fe <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e9f8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e9fc:	e059      	b.n	800eab2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e9fe:	697b      	ldr	r3, [r7, #20]
 800ea00:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d002      	beq.n	800ea0e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ea08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ea0c:	e051      	b.n	800eab2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ea0e:	697b      	ldr	r3, [r7, #20]
 800ea10:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d002      	beq.n	800ea1e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ea18:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ea1c:	e049      	b.n	800eab2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ea1e:	697b      	ldr	r3, [r7, #20]
 800ea20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d002      	beq.n	800ea2e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ea28:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800ea2c:	e041      	b.n	800eab2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ea2e:	697b      	ldr	r3, [r7, #20]
 800ea30:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d002      	beq.n	800ea3e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800ea38:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ea3c:	e039      	b.n	800eab2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ea3e:	697b      	ldr	r3, [r7, #20]
 800ea40:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d002      	beq.n	800ea4e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ea48:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800ea4c:	e031      	b.n	800eab2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ea4e:	697b      	ldr	r3, [r7, #20]
 800ea50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d002      	beq.n	800ea5e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ea58:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800ea5c:	e029      	b.n	800eab2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ea5e:	697b      	ldr	r3, [r7, #20]
 800ea60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d002      	beq.n	800ea6e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ea68:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ea6c:	e021      	b.n	800eab2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ea6e:	697b      	ldr	r3, [r7, #20]
 800ea70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d002      	beq.n	800ea7e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ea78:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800ea7c:	e019      	b.n	800eab2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ea7e:	697b      	ldr	r3, [r7, #20]
 800ea80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d002      	beq.n	800ea8e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ea88:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800ea8c:	e011      	b.n	800eab2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ea8e:	697b      	ldr	r3, [r7, #20]
 800ea90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d002      	beq.n	800ea9e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800ea98:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800ea9c:	e009      	b.n	800eab2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800ea9e:	697b      	ldr	r3, [r7, #20]
 800eaa0:	f003 0308 	and.w	r3, r3, #8
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d002      	beq.n	800eaae <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800eaa8:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800eaac:	e001      	b.n	800eab2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800eaae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800eab2:	4618      	mov	r0, r3
 800eab4:	3720      	adds	r7, #32
 800eab6:	46bd      	mov	sp, r7
 800eab8:	bd80      	pop	{r7, pc}
 800eaba:	bf00      	nop
 800eabc:	24000000 	.word	0x24000000
 800eac0:	10624dd3 	.word	0x10624dd3
 800eac4:	00200045 	.word	0x00200045
 800eac8:	002000c5 	.word	0x002000c5
 800eacc:	fdffe008 	.word	0xfdffe008

0800ead0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800ead0:	b480      	push	{r7}
 800ead2:	b085      	sub	sp, #20
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ead8:	4b1f      	ldr	r3, [pc, #124]	@ (800eb58 <SDMMC_GetCmdResp2+0x88>)
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	4a1f      	ldr	r2, [pc, #124]	@ (800eb5c <SDMMC_GetCmdResp2+0x8c>)
 800eade:	fba2 2303 	umull	r2, r3, r2, r3
 800eae2:	0a5b      	lsrs	r3, r3, #9
 800eae4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800eae8:	fb02 f303 	mul.w	r3, r2, r3
 800eaec:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	1e5a      	subs	r2, r3, #1
 800eaf2:	60fa      	str	r2, [r7, #12]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d102      	bne.n	800eafe <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800eaf8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800eafc:	e026      	b.n	800eb4c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eb02:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800eb04:	68bb      	ldr	r3, [r7, #8]
 800eb06:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d0ef      	beq.n	800eaee <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800eb0e:	68bb      	ldr	r3, [r7, #8]
 800eb10:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d1ea      	bne.n	800eaee <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eb1c:	f003 0304 	and.w	r3, r3, #4
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d004      	beq.n	800eb2e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	2204      	movs	r2, #4
 800eb28:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800eb2a:	2304      	movs	r3, #4
 800eb2c:	e00e      	b.n	800eb4c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eb32:	f003 0301 	and.w	r3, r3, #1
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d004      	beq.n	800eb44 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	2201      	movs	r2, #1
 800eb3e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800eb40:	2301      	movs	r3, #1
 800eb42:	e003      	b.n	800eb4c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	4a06      	ldr	r2, [pc, #24]	@ (800eb60 <SDMMC_GetCmdResp2+0x90>)
 800eb48:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800eb4a:	2300      	movs	r3, #0
}
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	3714      	adds	r7, #20
 800eb50:	46bd      	mov	sp, r7
 800eb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb56:	4770      	bx	lr
 800eb58:	24000000 	.word	0x24000000
 800eb5c:	10624dd3 	.word	0x10624dd3
 800eb60:	002000c5 	.word	0x002000c5

0800eb64 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800eb64:	b480      	push	{r7}
 800eb66:	b085      	sub	sp, #20
 800eb68:	af00      	add	r7, sp, #0
 800eb6a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800eb6c:	4b1a      	ldr	r3, [pc, #104]	@ (800ebd8 <SDMMC_GetCmdResp3+0x74>)
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	4a1a      	ldr	r2, [pc, #104]	@ (800ebdc <SDMMC_GetCmdResp3+0x78>)
 800eb72:	fba2 2303 	umull	r2, r3, r2, r3
 800eb76:	0a5b      	lsrs	r3, r3, #9
 800eb78:	f241 3288 	movw	r2, #5000	@ 0x1388
 800eb7c:	fb02 f303 	mul.w	r3, r2, r3
 800eb80:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	1e5a      	subs	r2, r3, #1
 800eb86:	60fa      	str	r2, [r7, #12]
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d102      	bne.n	800eb92 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800eb8c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800eb90:	e01b      	b.n	800ebca <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eb96:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800eb98:	68bb      	ldr	r3, [r7, #8]
 800eb9a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d0ef      	beq.n	800eb82 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800eba2:	68bb      	ldr	r3, [r7, #8]
 800eba4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d1ea      	bne.n	800eb82 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ebb0:	f003 0304 	and.w	r3, r3, #4
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d004      	beq.n	800ebc2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	2204      	movs	r2, #4
 800ebbc:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ebbe:	2304      	movs	r3, #4
 800ebc0:	e003      	b.n	800ebca <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	4a06      	ldr	r2, [pc, #24]	@ (800ebe0 <SDMMC_GetCmdResp3+0x7c>)
 800ebc6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800ebc8:	2300      	movs	r3, #0
}
 800ebca:	4618      	mov	r0, r3
 800ebcc:	3714      	adds	r7, #20
 800ebce:	46bd      	mov	sp, r7
 800ebd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd4:	4770      	bx	lr
 800ebd6:	bf00      	nop
 800ebd8:	24000000 	.word	0x24000000
 800ebdc:	10624dd3 	.word	0x10624dd3
 800ebe0:	002000c5 	.word	0x002000c5

0800ebe4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800ebe4:	b580      	push	{r7, lr}
 800ebe6:	b088      	sub	sp, #32
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	60f8      	str	r0, [r7, #12]
 800ebec:	460b      	mov	r3, r1
 800ebee:	607a      	str	r2, [r7, #4]
 800ebf0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ebf2:	4b35      	ldr	r3, [pc, #212]	@ (800ecc8 <SDMMC_GetCmdResp6+0xe4>)
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	4a35      	ldr	r2, [pc, #212]	@ (800eccc <SDMMC_GetCmdResp6+0xe8>)
 800ebf8:	fba2 2303 	umull	r2, r3, r2, r3
 800ebfc:	0a5b      	lsrs	r3, r3, #9
 800ebfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ec02:	fb02 f303 	mul.w	r3, r2, r3
 800ec06:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800ec08:	69fb      	ldr	r3, [r7, #28]
 800ec0a:	1e5a      	subs	r2, r3, #1
 800ec0c:	61fa      	str	r2, [r7, #28]
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d102      	bne.n	800ec18 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ec12:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ec16:	e052      	b.n	800ecbe <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ec1c:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ec1e:	69bb      	ldr	r3, [r7, #24]
 800ec20:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d0ef      	beq.n	800ec08 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ec28:	69bb      	ldr	r3, [r7, #24]
 800ec2a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d1ea      	bne.n	800ec08 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ec36:	f003 0304 	and.w	r3, r3, #4
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d004      	beq.n	800ec48 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	2204      	movs	r2, #4
 800ec42:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ec44:	2304      	movs	r3, #4
 800ec46:	e03a      	b.n	800ecbe <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ec4c:	f003 0301 	and.w	r3, r3, #1
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d004      	beq.n	800ec5e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	2201      	movs	r2, #1
 800ec58:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ec5a:	2301      	movs	r3, #1
 800ec5c:	e02f      	b.n	800ecbe <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ec5e:	68f8      	ldr	r0, [r7, #12]
 800ec60:	f7ff fb7c 	bl	800e35c <SDMMC_GetCommandResponse>
 800ec64:	4603      	mov	r3, r0
 800ec66:	461a      	mov	r2, r3
 800ec68:	7afb      	ldrb	r3, [r7, #11]
 800ec6a:	4293      	cmp	r3, r2
 800ec6c:	d001      	beq.n	800ec72 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ec6e:	2301      	movs	r3, #1
 800ec70:	e025      	b.n	800ecbe <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	4a16      	ldr	r2, [pc, #88]	@ (800ecd0 <SDMMC_GetCmdResp6+0xec>)
 800ec76:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ec78:	2100      	movs	r1, #0
 800ec7a:	68f8      	ldr	r0, [r7, #12]
 800ec7c:	f7ff fb7b 	bl	800e376 <SDMMC_GetResponse>
 800ec80:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800ec82:	697b      	ldr	r3, [r7, #20]
 800ec84:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d106      	bne.n	800ec9a <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800ec8c:	697b      	ldr	r3, [r7, #20]
 800ec8e:	0c1b      	lsrs	r3, r3, #16
 800ec90:	b29a      	uxth	r2, r3
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800ec96:	2300      	movs	r3, #0
 800ec98:	e011      	b.n	800ecbe <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ec9a:	697b      	ldr	r3, [r7, #20]
 800ec9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d002      	beq.n	800ecaa <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800eca4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800eca8:	e009      	b.n	800ecbe <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800ecaa:	697b      	ldr	r3, [r7, #20]
 800ecac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d002      	beq.n	800ecba <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ecb4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ecb8:	e001      	b.n	800ecbe <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ecba:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	3720      	adds	r7, #32
 800ecc2:	46bd      	mov	sp, r7
 800ecc4:	bd80      	pop	{r7, pc}
 800ecc6:	bf00      	nop
 800ecc8:	24000000 	.word	0x24000000
 800eccc:	10624dd3 	.word	0x10624dd3
 800ecd0:	002000c5 	.word	0x002000c5

0800ecd4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800ecd4:	b480      	push	{r7}
 800ecd6:	b085      	sub	sp, #20
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ecdc:	4b22      	ldr	r3, [pc, #136]	@ (800ed68 <SDMMC_GetCmdResp7+0x94>)
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	4a22      	ldr	r2, [pc, #136]	@ (800ed6c <SDMMC_GetCmdResp7+0x98>)
 800ece2:	fba2 2303 	umull	r2, r3, r2, r3
 800ece6:	0a5b      	lsrs	r3, r3, #9
 800ece8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ecec:	fb02 f303 	mul.w	r3, r2, r3
 800ecf0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	1e5a      	subs	r2, r3, #1
 800ecf6:	60fa      	str	r2, [r7, #12]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d102      	bne.n	800ed02 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ecfc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ed00:	e02c      	b.n	800ed5c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ed06:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ed08:	68bb      	ldr	r3, [r7, #8]
 800ed0a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d0ef      	beq.n	800ecf2 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ed12:	68bb      	ldr	r3, [r7, #8]
 800ed14:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d1ea      	bne.n	800ecf2 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ed20:	f003 0304 	and.w	r3, r3, #4
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d004      	beq.n	800ed32 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	2204      	movs	r2, #4
 800ed2c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ed2e:	2304      	movs	r3, #4
 800ed30:	e014      	b.n	800ed5c <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ed36:	f003 0301 	and.w	r3, r3, #1
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d004      	beq.n	800ed48 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	2201      	movs	r2, #1
 800ed42:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ed44:	2301      	movs	r3, #1
 800ed46:	e009      	b.n	800ed5c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ed4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d002      	beq.n	800ed5a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	2240      	movs	r2, #64	@ 0x40
 800ed58:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800ed5a:	2300      	movs	r3, #0

}
 800ed5c:	4618      	mov	r0, r3
 800ed5e:	3714      	adds	r7, #20
 800ed60:	46bd      	mov	sp, r7
 800ed62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed66:	4770      	bx	lr
 800ed68:	24000000 	.word	0x24000000
 800ed6c:	10624dd3 	.word	0x10624dd3

0800ed70 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800ed70:	b480      	push	{r7}
 800ed72:	b085      	sub	sp, #20
 800ed74:	af00      	add	r7, sp, #0
 800ed76:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ed78:	4b11      	ldr	r3, [pc, #68]	@ (800edc0 <SDMMC_GetCmdError+0x50>)
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	4a11      	ldr	r2, [pc, #68]	@ (800edc4 <SDMMC_GetCmdError+0x54>)
 800ed7e:	fba2 2303 	umull	r2, r3, r2, r3
 800ed82:	0a5b      	lsrs	r3, r3, #9
 800ed84:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ed88:	fb02 f303 	mul.w	r3, r2, r3
 800ed8c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	1e5a      	subs	r2, r3, #1
 800ed92:	60fa      	str	r2, [r7, #12]
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d102      	bne.n	800ed9e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ed98:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ed9c:	e009      	b.n	800edb2 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eda2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d0f1      	beq.n	800ed8e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	4a06      	ldr	r2, [pc, #24]	@ (800edc8 <SDMMC_GetCmdError+0x58>)
 800edae:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800edb0:	2300      	movs	r3, #0
}
 800edb2:	4618      	mov	r0, r3
 800edb4:	3714      	adds	r7, #20
 800edb6:	46bd      	mov	sp, r7
 800edb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edbc:	4770      	bx	lr
 800edbe:	bf00      	nop
 800edc0:	24000000 	.word	0x24000000
 800edc4:	10624dd3 	.word	0x10624dd3
 800edc8:	002000c5 	.word	0x002000c5

0800edcc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800edcc:	b580      	push	{r7, lr}
 800edce:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800edd0:	4904      	ldr	r1, [pc, #16]	@ (800ede4 <MX_FATFS_Init+0x18>)
 800edd2:	4805      	ldr	r0, [pc, #20]	@ (800ede8 <MX_FATFS_Init+0x1c>)
 800edd4:	f003 f916 	bl	8012004 <FATFS_LinkDriver>
 800edd8:	4603      	mov	r3, r0
 800edda:	461a      	mov	r2, r3
 800eddc:	4b03      	ldr	r3, [pc, #12]	@ (800edec <MX_FATFS_Init+0x20>)
 800edde:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ede0:	bf00      	nop
 800ede2:	bd80      	pop	{r7, pc}
 800ede4:	24000a30 	.word	0x24000a30
 800ede8:	08017d14 	.word	0x08017d14
 800edec:	24000a2c 	.word	0x24000a2c

0800edf0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800edf0:	b480      	push	{r7}
 800edf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800edf4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800edf6:	4618      	mov	r0, r3
 800edf8:	46bd      	mov	sp, r7
 800edfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edfe:	4770      	bx	lr

0800ee00 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800ee00:	b580      	push	{r7, lr}
 800ee02:	b082      	sub	sp, #8
 800ee04:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800ee06:	2300      	movs	r3, #0
 800ee08:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800ee0a:	f000 f885 	bl	800ef18 <BSP_SD_IsDetected>
 800ee0e:	4603      	mov	r3, r0
 800ee10:	2b01      	cmp	r3, #1
 800ee12:	d001      	beq.n	800ee18 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800ee14:	2302      	movs	r3, #2
 800ee16:	e012      	b.n	800ee3e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800ee18:	480b      	ldr	r0, [pc, #44]	@ (800ee48 <BSP_SD_Init+0x48>)
 800ee1a:	f7f9 fdc5 	bl	80089a8 <HAL_SD_Init>
 800ee1e:	4603      	mov	r3, r0
 800ee20:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800ee22:	79fb      	ldrb	r3, [r7, #7]
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d109      	bne.n	800ee3c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800ee28:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800ee2c:	4806      	ldr	r0, [pc, #24]	@ (800ee48 <BSP_SD_Init+0x48>)
 800ee2e:	f7fa fc7b 	bl	8009728 <HAL_SD_ConfigWideBusOperation>
 800ee32:	4603      	mov	r3, r0
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d001      	beq.n	800ee3c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800ee38:	2301      	movs	r3, #1
 800ee3a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800ee3c:	79fb      	ldrb	r3, [r7, #7]
}
 800ee3e:	4618      	mov	r0, r3
 800ee40:	3708      	adds	r7, #8
 800ee42:	46bd      	mov	sp, r7
 800ee44:	bd80      	pop	{r7, pc}
 800ee46:	bf00      	nop
 800ee48:	2400008c 	.word	0x2400008c

0800ee4c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800ee4c:	b580      	push	{r7, lr}
 800ee4e:	b086      	sub	sp, #24
 800ee50:	af00      	add	r7, sp, #0
 800ee52:	60f8      	str	r0, [r7, #12]
 800ee54:	60b9      	str	r1, [r7, #8]
 800ee56:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ee58:	2300      	movs	r3, #0
 800ee5a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	68ba      	ldr	r2, [r7, #8]
 800ee60:	68f9      	ldr	r1, [r7, #12]
 800ee62:	4806      	ldr	r0, [pc, #24]	@ (800ee7c <BSP_SD_ReadBlocks_DMA+0x30>)
 800ee64:	f7f9 fec0 	bl	8008be8 <HAL_SD_ReadBlocks_DMA>
 800ee68:	4603      	mov	r3, r0
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d001      	beq.n	800ee72 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ee6e:	2301      	movs	r3, #1
 800ee70:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ee72:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee74:	4618      	mov	r0, r3
 800ee76:	3718      	adds	r7, #24
 800ee78:	46bd      	mov	sp, r7
 800ee7a:	bd80      	pop	{r7, pc}
 800ee7c:	2400008c 	.word	0x2400008c

0800ee80 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800ee80:	b580      	push	{r7, lr}
 800ee82:	b086      	sub	sp, #24
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	60f8      	str	r0, [r7, #12]
 800ee88:	60b9      	str	r1, [r7, #8]
 800ee8a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ee8c:	2300      	movs	r3, #0
 800ee8e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	68ba      	ldr	r2, [r7, #8]
 800ee94:	68f9      	ldr	r1, [r7, #12]
 800ee96:	4806      	ldr	r0, [pc, #24]	@ (800eeb0 <BSP_SD_WriteBlocks_DMA+0x30>)
 800ee98:	f7f9 ff4e 	bl	8008d38 <HAL_SD_WriteBlocks_DMA>
 800ee9c:	4603      	mov	r3, r0
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d001      	beq.n	800eea6 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800eea2:	2301      	movs	r3, #1
 800eea4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800eea6:	7dfb      	ldrb	r3, [r7, #23]
}
 800eea8:	4618      	mov	r0, r3
 800eeaa:	3718      	adds	r7, #24
 800eeac:	46bd      	mov	sp, r7
 800eeae:	bd80      	pop	{r7, pc}
 800eeb0:	2400008c 	.word	0x2400008c

0800eeb4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800eeb4:	b580      	push	{r7, lr}
 800eeb6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800eeb8:	4805      	ldr	r0, [pc, #20]	@ (800eed0 <BSP_SD_GetCardState+0x1c>)
 800eeba:	f7fa fd47 	bl	800994c <HAL_SD_GetCardState>
 800eebe:	4603      	mov	r3, r0
 800eec0:	2b04      	cmp	r3, #4
 800eec2:	bf14      	ite	ne
 800eec4:	2301      	movne	r3, #1
 800eec6:	2300      	moveq	r3, #0
 800eec8:	b2db      	uxtb	r3, r3
}
 800eeca:	4618      	mov	r0, r3
 800eecc:	bd80      	pop	{r7, pc}
 800eece:	bf00      	nop
 800eed0:	2400008c 	.word	0x2400008c

0800eed4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800eed4:	b580      	push	{r7, lr}
 800eed6:	b082      	sub	sp, #8
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800eedc:	6879      	ldr	r1, [r7, #4]
 800eede:	4803      	ldr	r0, [pc, #12]	@ (800eeec <BSP_SD_GetCardInfo+0x18>)
 800eee0:	f7fa fbf6 	bl	80096d0 <HAL_SD_GetCardInfo>
}
 800eee4:	bf00      	nop
 800eee6:	3708      	adds	r7, #8
 800eee8:	46bd      	mov	sp, r7
 800eeea:	bd80      	pop	{r7, pc}
 800eeec:	2400008c 	.word	0x2400008c

0800eef0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800eef0:	b580      	push	{r7, lr}
 800eef2:	b082      	sub	sp, #8
 800eef4:	af00      	add	r7, sp, #0
 800eef6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800eef8:	f000 f990 	bl	800f21c <BSP_SD_WriteCpltCallback>
}
 800eefc:	bf00      	nop
 800eefe:	3708      	adds	r7, #8
 800ef00:	46bd      	mov	sp, r7
 800ef02:	bd80      	pop	{r7, pc}

0800ef04 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ef04:	b580      	push	{r7, lr}
 800ef06:	b082      	sub	sp, #8
 800ef08:	af00      	add	r7, sp, #0
 800ef0a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800ef0c:	f000 f998 	bl	800f240 <BSP_SD_ReadCpltCallback>
}
 800ef10:	bf00      	nop
 800ef12:	3708      	adds	r7, #8
 800ef14:	46bd      	mov	sp, r7
 800ef16:	bd80      	pop	{r7, pc}

0800ef18 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800ef18:	b480      	push	{r7}
 800ef1a:	b083      	sub	sp, #12
 800ef1c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800ef1e:	2301      	movs	r3, #1
 800ef20:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 800ef22:	79fb      	ldrb	r3, [r7, #7]
 800ef24:	b2db      	uxtb	r3, r3
}
 800ef26:	4618      	mov	r0, r3
 800ef28:	370c      	adds	r7, #12
 800ef2a:	46bd      	mov	sp, r7
 800ef2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef30:	4770      	bx	lr

0800ef32 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800ef32:	b580      	push	{r7, lr}
 800ef34:	b084      	sub	sp, #16
 800ef36:	af00      	add	r7, sp, #0
 800ef38:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 800ef3a:	f003 f969 	bl	8012210 <osKernelGetTickCount>
 800ef3e:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 800ef40:	e006      	b.n	800ef50 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ef42:	f7ff ffb7 	bl	800eeb4 <BSP_SD_GetCardState>
 800ef46:	4603      	mov	r3, r0
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d101      	bne.n	800ef50 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800ef4c:	2300      	movs	r3, #0
 800ef4e:	e009      	b.n	800ef64 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 800ef50:	f003 f95e 	bl	8012210 <osKernelGetTickCount>
 800ef54:	4602      	mov	r2, r0
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	1ad3      	subs	r3, r2, r3
 800ef5a:	687a      	ldr	r2, [r7, #4]
 800ef5c:	429a      	cmp	r2, r3
 800ef5e:	d8f0      	bhi.n	800ef42 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800ef60:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800ef64:	4618      	mov	r0, r3
 800ef66:	3710      	adds	r7, #16
 800ef68:	46bd      	mov	sp, r7
 800ef6a:	bd80      	pop	{r7, pc}

0800ef6c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800ef6c:	b580      	push	{r7, lr}
 800ef6e:	b082      	sub	sp, #8
 800ef70:	af00      	add	r7, sp, #0
 800ef72:	4603      	mov	r3, r0
 800ef74:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800ef76:	4b0b      	ldr	r3, [pc, #44]	@ (800efa4 <SD_CheckStatus+0x38>)
 800ef78:	2201      	movs	r2, #1
 800ef7a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ef7c:	f7ff ff9a 	bl	800eeb4 <BSP_SD_GetCardState>
 800ef80:	4603      	mov	r3, r0
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d107      	bne.n	800ef96 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800ef86:	4b07      	ldr	r3, [pc, #28]	@ (800efa4 <SD_CheckStatus+0x38>)
 800ef88:	781b      	ldrb	r3, [r3, #0]
 800ef8a:	b2db      	uxtb	r3, r3
 800ef8c:	f023 0301 	bic.w	r3, r3, #1
 800ef90:	b2da      	uxtb	r2, r3
 800ef92:	4b04      	ldr	r3, [pc, #16]	@ (800efa4 <SD_CheckStatus+0x38>)
 800ef94:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800ef96:	4b03      	ldr	r3, [pc, #12]	@ (800efa4 <SD_CheckStatus+0x38>)
 800ef98:	781b      	ldrb	r3, [r3, #0]
 800ef9a:	b2db      	uxtb	r3, r3
}
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	3708      	adds	r7, #8
 800efa0:	46bd      	mov	sp, r7
 800efa2:	bd80      	pop	{r7, pc}
 800efa4:	2400000d 	.word	0x2400000d

0800efa8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800efa8:	b580      	push	{r7, lr}
 800efaa:	b082      	sub	sp, #8
 800efac:	af00      	add	r7, sp, #0
 800efae:	4603      	mov	r3, r0
 800efb0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800efb2:	4b1c      	ldr	r3, [pc, #112]	@ (800f024 <SD_initialize+0x7c>)
 800efb4:	2201      	movs	r2, #1
 800efb6:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800efb8:	f003 f8e2 	bl	8012180 <osKernelGetState>
 800efbc:	4603      	mov	r3, r0
 800efbe:	2b02      	cmp	r3, #2
 800efc0:	d129      	bne.n	800f016 <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800efc2:	f7ff ff1d 	bl	800ee00 <BSP_SD_Init>
 800efc6:	4603      	mov	r3, r0
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d107      	bne.n	800efdc <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800efcc:	79fb      	ldrb	r3, [r7, #7]
 800efce:	4618      	mov	r0, r3
 800efd0:	f7ff ffcc 	bl	800ef6c <SD_CheckStatus>
 800efd4:	4603      	mov	r3, r0
 800efd6:	461a      	mov	r2, r3
 800efd8:	4b12      	ldr	r3, [pc, #72]	@ (800f024 <SD_initialize+0x7c>)
 800efda:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800efdc:	4b11      	ldr	r3, [pc, #68]	@ (800f024 <SD_initialize+0x7c>)
 800efde:	781b      	ldrb	r3, [r3, #0]
 800efe0:	b2db      	uxtb	r3, r3
 800efe2:	2b01      	cmp	r3, #1
 800efe4:	d017      	beq.n	800f016 <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800efe6:	4b10      	ldr	r3, [pc, #64]	@ (800f028 <SD_initialize+0x80>)
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	2b00      	cmp	r3, #0
 800efec:	d107      	bne.n	800effe <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800efee:	2200      	movs	r2, #0
 800eff0:	2102      	movs	r1, #2
 800eff2:	200a      	movs	r0, #10
 800eff4:	f003 fb1c 	bl	8012630 <osMessageQueueNew>
 800eff8:	4603      	mov	r3, r0
 800effa:	4a0b      	ldr	r2, [pc, #44]	@ (800f028 <SD_initialize+0x80>)
 800effc:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 800effe:	4b0a      	ldr	r3, [pc, #40]	@ (800f028 <SD_initialize+0x80>)
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	2b00      	cmp	r3, #0
 800f004:	d107      	bne.n	800f016 <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 800f006:	4b07      	ldr	r3, [pc, #28]	@ (800f024 <SD_initialize+0x7c>)
 800f008:	781b      	ldrb	r3, [r3, #0]
 800f00a:	b2db      	uxtb	r3, r3
 800f00c:	f043 0301 	orr.w	r3, r3, #1
 800f010:	b2da      	uxtb	r2, r3
 800f012:	4b04      	ldr	r3, [pc, #16]	@ (800f024 <SD_initialize+0x7c>)
 800f014:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800f016:	4b03      	ldr	r3, [pc, #12]	@ (800f024 <SD_initialize+0x7c>)
 800f018:	781b      	ldrb	r3, [r3, #0]
 800f01a:	b2db      	uxtb	r3, r3
}
 800f01c:	4618      	mov	r0, r3
 800f01e:	3708      	adds	r7, #8
 800f020:	46bd      	mov	sp, r7
 800f022:	bd80      	pop	{r7, pc}
 800f024:	2400000d 	.word	0x2400000d
 800f028:	24000a34 	.word	0x24000a34

0800f02c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800f02c:	b580      	push	{r7, lr}
 800f02e:	b082      	sub	sp, #8
 800f030:	af00      	add	r7, sp, #0
 800f032:	4603      	mov	r3, r0
 800f034:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800f036:	79fb      	ldrb	r3, [r7, #7]
 800f038:	4618      	mov	r0, r3
 800f03a:	f7ff ff97 	bl	800ef6c <SD_CheckStatus>
 800f03e:	4603      	mov	r3, r0
}
 800f040:	4618      	mov	r0, r3
 800f042:	3708      	adds	r7, #8
 800f044:	46bd      	mov	sp, r7
 800f046:	bd80      	pop	{r7, pc}

0800f048 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800f048:	b580      	push	{r7, lr}
 800f04a:	b088      	sub	sp, #32
 800f04c:	af00      	add	r7, sp, #0
 800f04e:	60b9      	str	r1, [r7, #8]
 800f050:	607a      	str	r2, [r7, #4]
 800f052:	603b      	str	r3, [r7, #0]
 800f054:	4603      	mov	r3, r0
 800f056:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800f058:	2301      	movs	r3, #1
 800f05a:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800f05c:	f247 5030 	movw	r0, #30000	@ 0x7530
 800f060:	f7ff ff67 	bl	800ef32 <SD_CheckStatusWithTimeout>
 800f064:	4603      	mov	r3, r0
 800f066:	2b00      	cmp	r3, #0
 800f068:	da01      	bge.n	800f06e <SD_read+0x26>
  {
    return res;
 800f06a:	7ffb      	ldrb	r3, [r7, #31]
 800f06c:	e02f      	b.n	800f0ce <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800f06e:	683a      	ldr	r2, [r7, #0]
 800f070:	6879      	ldr	r1, [r7, #4]
 800f072:	68b8      	ldr	r0, [r7, #8]
 800f074:	f7ff feea 	bl	800ee4c <BSP_SD_ReadBlocks_DMA>
 800f078:	4603      	mov	r3, r0
 800f07a:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 800f07c:	7fbb      	ldrb	r3, [r7, #30]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d124      	bne.n	800f0cc <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800f082:	4b15      	ldr	r3, [pc, #84]	@ (800f0d8 <SD_read+0x90>)
 800f084:	6818      	ldr	r0, [r3, #0]
 800f086:	f107 0112 	add.w	r1, r7, #18
 800f08a:	f247 5330 	movw	r3, #30000	@ 0x7530
 800f08e:	2200      	movs	r2, #0
 800f090:	f003 fba2 	bl	80127d8 <osMessageQueueGet>
 800f094:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800f096:	69bb      	ldr	r3, [r7, #24]
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d117      	bne.n	800f0cc <SD_read+0x84>
 800f09c:	8a7b      	ldrh	r3, [r7, #18]
 800f09e:	2b01      	cmp	r3, #1
 800f0a0:	d114      	bne.n	800f0cc <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800f0a2:	f003 f8b5 	bl	8012210 <osKernelGetTickCount>
 800f0a6:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800f0a8:	e007      	b.n	800f0ba <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f0aa:	f7ff ff03 	bl	800eeb4 <BSP_SD_GetCardState>
 800f0ae:	4603      	mov	r3, r0
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d102      	bne.n	800f0ba <SD_read+0x72>
              {
                res = RES_OK;
 800f0b4:	2300      	movs	r3, #0
 800f0b6:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800f0b8:	e008      	b.n	800f0cc <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800f0ba:	f003 f8a9 	bl	8012210 <osKernelGetTickCount>
 800f0be:	4602      	mov	r2, r0
 800f0c0:	697b      	ldr	r3, [r7, #20]
 800f0c2:	1ad3      	subs	r3, r2, r3
 800f0c4:	f247 522f 	movw	r2, #29999	@ 0x752f
 800f0c8:	4293      	cmp	r3, r2
 800f0ca:	d9ee      	bls.n	800f0aa <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800f0cc:	7ffb      	ldrb	r3, [r7, #31]
}
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	3720      	adds	r7, #32
 800f0d2:	46bd      	mov	sp, r7
 800f0d4:	bd80      	pop	{r7, pc}
 800f0d6:	bf00      	nop
 800f0d8:	24000a34 	.word	0x24000a34

0800f0dc <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800f0dc:	b580      	push	{r7, lr}
 800f0de:	b088      	sub	sp, #32
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	60b9      	str	r1, [r7, #8]
 800f0e4:	607a      	str	r2, [r7, #4]
 800f0e6:	603b      	str	r3, [r7, #0]
 800f0e8:	4603      	mov	r3, r0
 800f0ea:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f0ec:	2301      	movs	r3, #1
 800f0ee:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800f0f0:	f247 5030 	movw	r0, #30000	@ 0x7530
 800f0f4:	f7ff ff1d 	bl	800ef32 <SD_CheckStatusWithTimeout>
 800f0f8:	4603      	mov	r3, r0
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	da01      	bge.n	800f102 <SD_write+0x26>
  {
    return res;
 800f0fe:	7ffb      	ldrb	r3, [r7, #31]
 800f100:	e02d      	b.n	800f15e <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800f102:	683a      	ldr	r2, [r7, #0]
 800f104:	6879      	ldr	r1, [r7, #4]
 800f106:	68b8      	ldr	r0, [r7, #8]
 800f108:	f7ff feba 	bl	800ee80 <BSP_SD_WriteBlocks_DMA>
 800f10c:	4603      	mov	r3, r0
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d124      	bne.n	800f15c <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800f112:	4b15      	ldr	r3, [pc, #84]	@ (800f168 <SD_write+0x8c>)
 800f114:	6818      	ldr	r0, [r3, #0]
 800f116:	f107 0112 	add.w	r1, r7, #18
 800f11a:	f247 5330 	movw	r3, #30000	@ 0x7530
 800f11e:	2200      	movs	r2, #0
 800f120:	f003 fb5a 	bl	80127d8 <osMessageQueueGet>
 800f124:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800f126:	69bb      	ldr	r3, [r7, #24]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d117      	bne.n	800f15c <SD_write+0x80>
 800f12c:	8a7b      	ldrh	r3, [r7, #18]
 800f12e:	2b02      	cmp	r3, #2
 800f130:	d114      	bne.n	800f15c <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 800f132:	f003 f86d 	bl	8012210 <osKernelGetTickCount>
 800f136:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800f138:	e007      	b.n	800f14a <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f13a:	f7ff febb 	bl	800eeb4 <BSP_SD_GetCardState>
 800f13e:	4603      	mov	r3, r0
 800f140:	2b00      	cmp	r3, #0
 800f142:	d102      	bne.n	800f14a <SD_write+0x6e>
          {
            res = RES_OK;
 800f144:	2300      	movs	r3, #0
 800f146:	77fb      	strb	r3, [r7, #31]
            break;
 800f148:	e008      	b.n	800f15c <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800f14a:	f003 f861 	bl	8012210 <osKernelGetTickCount>
 800f14e:	4602      	mov	r2, r0
 800f150:	697b      	ldr	r3, [r7, #20]
 800f152:	1ad3      	subs	r3, r2, r3
 800f154:	f247 522f 	movw	r2, #29999	@ 0x752f
 800f158:	4293      	cmp	r3, r2
 800f15a:	d9ee      	bls.n	800f13a <SD_write+0x5e>
    }

  }
#endif

  return res;
 800f15c:	7ffb      	ldrb	r3, [r7, #31]
}
 800f15e:	4618      	mov	r0, r3
 800f160:	3720      	adds	r7, #32
 800f162:	46bd      	mov	sp, r7
 800f164:	bd80      	pop	{r7, pc}
 800f166:	bf00      	nop
 800f168:	24000a34 	.word	0x24000a34

0800f16c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800f16c:	b580      	push	{r7, lr}
 800f16e:	b08c      	sub	sp, #48	@ 0x30
 800f170:	af00      	add	r7, sp, #0
 800f172:	4603      	mov	r3, r0
 800f174:	603a      	str	r2, [r7, #0]
 800f176:	71fb      	strb	r3, [r7, #7]
 800f178:	460b      	mov	r3, r1
 800f17a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800f17c:	2301      	movs	r3, #1
 800f17e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800f182:	4b25      	ldr	r3, [pc, #148]	@ (800f218 <SD_ioctl+0xac>)
 800f184:	781b      	ldrb	r3, [r3, #0]
 800f186:	b2db      	uxtb	r3, r3
 800f188:	f003 0301 	and.w	r3, r3, #1
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d001      	beq.n	800f194 <SD_ioctl+0x28>
 800f190:	2303      	movs	r3, #3
 800f192:	e03c      	b.n	800f20e <SD_ioctl+0xa2>

  switch (cmd)
 800f194:	79bb      	ldrb	r3, [r7, #6]
 800f196:	2b03      	cmp	r3, #3
 800f198:	d834      	bhi.n	800f204 <SD_ioctl+0x98>
 800f19a:	a201      	add	r2, pc, #4	@ (adr r2, 800f1a0 <SD_ioctl+0x34>)
 800f19c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1a0:	0800f1b1 	.word	0x0800f1b1
 800f1a4:	0800f1b9 	.word	0x0800f1b9
 800f1a8:	0800f1d1 	.word	0x0800f1d1
 800f1ac:	0800f1eb 	.word	0x0800f1eb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800f1b0:	2300      	movs	r3, #0
 800f1b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f1b6:	e028      	b.n	800f20a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800f1b8:	f107 0308 	add.w	r3, r7, #8
 800f1bc:	4618      	mov	r0, r3
 800f1be:	f7ff fe89 	bl	800eed4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800f1c2:	6a3a      	ldr	r2, [r7, #32]
 800f1c4:	683b      	ldr	r3, [r7, #0]
 800f1c6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f1c8:	2300      	movs	r3, #0
 800f1ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f1ce:	e01c      	b.n	800f20a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f1d0:	f107 0308 	add.w	r3, r7, #8
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	f7ff fe7d 	bl	800eed4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800f1da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1dc:	b29a      	uxth	r2, r3
 800f1de:	683b      	ldr	r3, [r7, #0]
 800f1e0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800f1e2:	2300      	movs	r3, #0
 800f1e4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f1e8:	e00f      	b.n	800f20a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f1ea:	f107 0308 	add.w	r3, r7, #8
 800f1ee:	4618      	mov	r0, r3
 800f1f0:	f7ff fe70 	bl	800eed4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800f1f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1f6:	0a5a      	lsrs	r2, r3, #9
 800f1f8:	683b      	ldr	r3, [r7, #0]
 800f1fa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f1fc:	2300      	movs	r3, #0
 800f1fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f202:	e002      	b.n	800f20a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800f204:	2304      	movs	r3, #4
 800f206:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800f20a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800f20e:	4618      	mov	r0, r3
 800f210:	3730      	adds	r7, #48	@ 0x30
 800f212:	46bd      	mov	sp, r7
 800f214:	bd80      	pop	{r7, pc}
 800f216:	bf00      	nop
 800f218:	2400000d 	.word	0x2400000d

0800f21c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800f21c:	b580      	push	{r7, lr}
 800f21e:	b082      	sub	sp, #8
 800f220:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 800f222:	2302      	movs	r3, #2
 800f224:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800f226:	4b05      	ldr	r3, [pc, #20]	@ (800f23c <BSP_SD_WriteCpltCallback+0x20>)
 800f228:	6818      	ldr	r0, [r3, #0]
 800f22a:	1db9      	adds	r1, r7, #6
 800f22c:	2300      	movs	r3, #0
 800f22e:	2200      	movs	r2, #0
 800f230:	f003 fa72 	bl	8012718 <osMessageQueuePut>
#endif
}
 800f234:	bf00      	nop
 800f236:	3708      	adds	r7, #8
 800f238:	46bd      	mov	sp, r7
 800f23a:	bd80      	pop	{r7, pc}
 800f23c:	24000a34 	.word	0x24000a34

0800f240 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800f240:	b580      	push	{r7, lr}
 800f242:	b082      	sub	sp, #8
 800f244:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 800f246:	2301      	movs	r3, #1
 800f248:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800f24a:	4b05      	ldr	r3, [pc, #20]	@ (800f260 <BSP_SD_ReadCpltCallback+0x20>)
 800f24c:	6818      	ldr	r0, [r3, #0]
 800f24e:	1db9      	adds	r1, r7, #6
 800f250:	2300      	movs	r3, #0
 800f252:	2200      	movs	r2, #0
 800f254:	f003 fa60 	bl	8012718 <osMessageQueuePut>
#endif
}
 800f258:	bf00      	nop
 800f25a:	3708      	adds	r7, #8
 800f25c:	46bd      	mov	sp, r7
 800f25e:	bd80      	pop	{r7, pc}
 800f260:	24000a34 	.word	0x24000a34

0800f264 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800f264:	b580      	push	{r7, lr}
 800f266:	b084      	sub	sp, #16
 800f268:	af00      	add	r7, sp, #0
 800f26a:	4603      	mov	r3, r0
 800f26c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800f26e:	79fb      	ldrb	r3, [r7, #7]
 800f270:	4a08      	ldr	r2, [pc, #32]	@ (800f294 <disk_status+0x30>)
 800f272:	009b      	lsls	r3, r3, #2
 800f274:	4413      	add	r3, r2
 800f276:	685b      	ldr	r3, [r3, #4]
 800f278:	685b      	ldr	r3, [r3, #4]
 800f27a:	79fa      	ldrb	r2, [r7, #7]
 800f27c:	4905      	ldr	r1, [pc, #20]	@ (800f294 <disk_status+0x30>)
 800f27e:	440a      	add	r2, r1
 800f280:	7a12      	ldrb	r2, [r2, #8]
 800f282:	4610      	mov	r0, r2
 800f284:	4798      	blx	r3
 800f286:	4603      	mov	r3, r0
 800f288:	73fb      	strb	r3, [r7, #15]
  return stat;
 800f28a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f28c:	4618      	mov	r0, r3
 800f28e:	3710      	adds	r7, #16
 800f290:	46bd      	mov	sp, r7
 800f292:	bd80      	pop	{r7, pc}
 800f294:	24000a60 	.word	0x24000a60

0800f298 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800f298:	b580      	push	{r7, lr}
 800f29a:	b084      	sub	sp, #16
 800f29c:	af00      	add	r7, sp, #0
 800f29e:	4603      	mov	r3, r0
 800f2a0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800f2a2:	2300      	movs	r3, #0
 800f2a4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800f2a6:	79fb      	ldrb	r3, [r7, #7]
 800f2a8:	4a0d      	ldr	r2, [pc, #52]	@ (800f2e0 <disk_initialize+0x48>)
 800f2aa:	5cd3      	ldrb	r3, [r2, r3]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d111      	bne.n	800f2d4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800f2b0:	79fb      	ldrb	r3, [r7, #7]
 800f2b2:	4a0b      	ldr	r2, [pc, #44]	@ (800f2e0 <disk_initialize+0x48>)
 800f2b4:	2101      	movs	r1, #1
 800f2b6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800f2b8:	79fb      	ldrb	r3, [r7, #7]
 800f2ba:	4a09      	ldr	r2, [pc, #36]	@ (800f2e0 <disk_initialize+0x48>)
 800f2bc:	009b      	lsls	r3, r3, #2
 800f2be:	4413      	add	r3, r2
 800f2c0:	685b      	ldr	r3, [r3, #4]
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	79fa      	ldrb	r2, [r7, #7]
 800f2c6:	4906      	ldr	r1, [pc, #24]	@ (800f2e0 <disk_initialize+0x48>)
 800f2c8:	440a      	add	r2, r1
 800f2ca:	7a12      	ldrb	r2, [r2, #8]
 800f2cc:	4610      	mov	r0, r2
 800f2ce:	4798      	blx	r3
 800f2d0:	4603      	mov	r3, r0
 800f2d2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800f2d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	3710      	adds	r7, #16
 800f2da:	46bd      	mov	sp, r7
 800f2dc:	bd80      	pop	{r7, pc}
 800f2de:	bf00      	nop
 800f2e0:	24000a60 	.word	0x24000a60

0800f2e4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800f2e4:	b590      	push	{r4, r7, lr}
 800f2e6:	b087      	sub	sp, #28
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	60b9      	str	r1, [r7, #8]
 800f2ec:	607a      	str	r2, [r7, #4]
 800f2ee:	603b      	str	r3, [r7, #0]
 800f2f0:	4603      	mov	r3, r0
 800f2f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800f2f4:	7bfb      	ldrb	r3, [r7, #15]
 800f2f6:	4a0a      	ldr	r2, [pc, #40]	@ (800f320 <disk_read+0x3c>)
 800f2f8:	009b      	lsls	r3, r3, #2
 800f2fa:	4413      	add	r3, r2
 800f2fc:	685b      	ldr	r3, [r3, #4]
 800f2fe:	689c      	ldr	r4, [r3, #8]
 800f300:	7bfb      	ldrb	r3, [r7, #15]
 800f302:	4a07      	ldr	r2, [pc, #28]	@ (800f320 <disk_read+0x3c>)
 800f304:	4413      	add	r3, r2
 800f306:	7a18      	ldrb	r0, [r3, #8]
 800f308:	683b      	ldr	r3, [r7, #0]
 800f30a:	687a      	ldr	r2, [r7, #4]
 800f30c:	68b9      	ldr	r1, [r7, #8]
 800f30e:	47a0      	blx	r4
 800f310:	4603      	mov	r3, r0
 800f312:	75fb      	strb	r3, [r7, #23]
  return res;
 800f314:	7dfb      	ldrb	r3, [r7, #23]
}
 800f316:	4618      	mov	r0, r3
 800f318:	371c      	adds	r7, #28
 800f31a:	46bd      	mov	sp, r7
 800f31c:	bd90      	pop	{r4, r7, pc}
 800f31e:	bf00      	nop
 800f320:	24000a60 	.word	0x24000a60

0800f324 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800f324:	b590      	push	{r4, r7, lr}
 800f326:	b087      	sub	sp, #28
 800f328:	af00      	add	r7, sp, #0
 800f32a:	60b9      	str	r1, [r7, #8]
 800f32c:	607a      	str	r2, [r7, #4]
 800f32e:	603b      	str	r3, [r7, #0]
 800f330:	4603      	mov	r3, r0
 800f332:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800f334:	7bfb      	ldrb	r3, [r7, #15]
 800f336:	4a0a      	ldr	r2, [pc, #40]	@ (800f360 <disk_write+0x3c>)
 800f338:	009b      	lsls	r3, r3, #2
 800f33a:	4413      	add	r3, r2
 800f33c:	685b      	ldr	r3, [r3, #4]
 800f33e:	68dc      	ldr	r4, [r3, #12]
 800f340:	7bfb      	ldrb	r3, [r7, #15]
 800f342:	4a07      	ldr	r2, [pc, #28]	@ (800f360 <disk_write+0x3c>)
 800f344:	4413      	add	r3, r2
 800f346:	7a18      	ldrb	r0, [r3, #8]
 800f348:	683b      	ldr	r3, [r7, #0]
 800f34a:	687a      	ldr	r2, [r7, #4]
 800f34c:	68b9      	ldr	r1, [r7, #8]
 800f34e:	47a0      	blx	r4
 800f350:	4603      	mov	r3, r0
 800f352:	75fb      	strb	r3, [r7, #23]
  return res;
 800f354:	7dfb      	ldrb	r3, [r7, #23]
}
 800f356:	4618      	mov	r0, r3
 800f358:	371c      	adds	r7, #28
 800f35a:	46bd      	mov	sp, r7
 800f35c:	bd90      	pop	{r4, r7, pc}
 800f35e:	bf00      	nop
 800f360:	24000a60 	.word	0x24000a60

0800f364 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800f364:	b580      	push	{r7, lr}
 800f366:	b084      	sub	sp, #16
 800f368:	af00      	add	r7, sp, #0
 800f36a:	4603      	mov	r3, r0
 800f36c:	603a      	str	r2, [r7, #0]
 800f36e:	71fb      	strb	r3, [r7, #7]
 800f370:	460b      	mov	r3, r1
 800f372:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800f374:	79fb      	ldrb	r3, [r7, #7]
 800f376:	4a09      	ldr	r2, [pc, #36]	@ (800f39c <disk_ioctl+0x38>)
 800f378:	009b      	lsls	r3, r3, #2
 800f37a:	4413      	add	r3, r2
 800f37c:	685b      	ldr	r3, [r3, #4]
 800f37e:	691b      	ldr	r3, [r3, #16]
 800f380:	79fa      	ldrb	r2, [r7, #7]
 800f382:	4906      	ldr	r1, [pc, #24]	@ (800f39c <disk_ioctl+0x38>)
 800f384:	440a      	add	r2, r1
 800f386:	7a10      	ldrb	r0, [r2, #8]
 800f388:	79b9      	ldrb	r1, [r7, #6]
 800f38a:	683a      	ldr	r2, [r7, #0]
 800f38c:	4798      	blx	r3
 800f38e:	4603      	mov	r3, r0
 800f390:	73fb      	strb	r3, [r7, #15]
  return res;
 800f392:	7bfb      	ldrb	r3, [r7, #15]
}
 800f394:	4618      	mov	r0, r3
 800f396:	3710      	adds	r7, #16
 800f398:	46bd      	mov	sp, r7
 800f39a:	bd80      	pop	{r7, pc}
 800f39c:	24000a60 	.word	0x24000a60

0800f3a0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800f3a0:	b480      	push	{r7}
 800f3a2:	b085      	sub	sp, #20
 800f3a4:	af00      	add	r7, sp, #0
 800f3a6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	3301      	adds	r3, #1
 800f3ac:	781b      	ldrb	r3, [r3, #0]
 800f3ae:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800f3b0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f3b4:	021b      	lsls	r3, r3, #8
 800f3b6:	b21a      	sxth	r2, r3
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	781b      	ldrb	r3, [r3, #0]
 800f3bc:	b21b      	sxth	r3, r3
 800f3be:	4313      	orrs	r3, r2
 800f3c0:	b21b      	sxth	r3, r3
 800f3c2:	81fb      	strh	r3, [r7, #14]
	return rv;
 800f3c4:	89fb      	ldrh	r3, [r7, #14]
}
 800f3c6:	4618      	mov	r0, r3
 800f3c8:	3714      	adds	r7, #20
 800f3ca:	46bd      	mov	sp, r7
 800f3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d0:	4770      	bx	lr

0800f3d2 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800f3d2:	b480      	push	{r7}
 800f3d4:	b085      	sub	sp, #20
 800f3d6:	af00      	add	r7, sp, #0
 800f3d8:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	3303      	adds	r3, #3
 800f3de:	781b      	ldrb	r3, [r3, #0]
 800f3e0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	021b      	lsls	r3, r3, #8
 800f3e6:	687a      	ldr	r2, [r7, #4]
 800f3e8:	3202      	adds	r2, #2
 800f3ea:	7812      	ldrb	r2, [r2, #0]
 800f3ec:	4313      	orrs	r3, r2
 800f3ee:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	021b      	lsls	r3, r3, #8
 800f3f4:	687a      	ldr	r2, [r7, #4]
 800f3f6:	3201      	adds	r2, #1
 800f3f8:	7812      	ldrb	r2, [r2, #0]
 800f3fa:	4313      	orrs	r3, r2
 800f3fc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	021b      	lsls	r3, r3, #8
 800f402:	687a      	ldr	r2, [r7, #4]
 800f404:	7812      	ldrb	r2, [r2, #0]
 800f406:	4313      	orrs	r3, r2
 800f408:	60fb      	str	r3, [r7, #12]
	return rv;
 800f40a:	68fb      	ldr	r3, [r7, #12]
}
 800f40c:	4618      	mov	r0, r3
 800f40e:	3714      	adds	r7, #20
 800f410:	46bd      	mov	sp, r7
 800f412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f416:	4770      	bx	lr

0800f418 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800f418:	b480      	push	{r7}
 800f41a:	b083      	sub	sp, #12
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	6078      	str	r0, [r7, #4]
 800f420:	460b      	mov	r3, r1
 800f422:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	1c5a      	adds	r2, r3, #1
 800f428:	607a      	str	r2, [r7, #4]
 800f42a:	887a      	ldrh	r2, [r7, #2]
 800f42c:	b2d2      	uxtb	r2, r2
 800f42e:	701a      	strb	r2, [r3, #0]
 800f430:	887b      	ldrh	r3, [r7, #2]
 800f432:	0a1b      	lsrs	r3, r3, #8
 800f434:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	1c5a      	adds	r2, r3, #1
 800f43a:	607a      	str	r2, [r7, #4]
 800f43c:	887a      	ldrh	r2, [r7, #2]
 800f43e:	b2d2      	uxtb	r2, r2
 800f440:	701a      	strb	r2, [r3, #0]
}
 800f442:	bf00      	nop
 800f444:	370c      	adds	r7, #12
 800f446:	46bd      	mov	sp, r7
 800f448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f44c:	4770      	bx	lr

0800f44e <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800f44e:	b480      	push	{r7}
 800f450:	b083      	sub	sp, #12
 800f452:	af00      	add	r7, sp, #0
 800f454:	6078      	str	r0, [r7, #4]
 800f456:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	1c5a      	adds	r2, r3, #1
 800f45c:	607a      	str	r2, [r7, #4]
 800f45e:	683a      	ldr	r2, [r7, #0]
 800f460:	b2d2      	uxtb	r2, r2
 800f462:	701a      	strb	r2, [r3, #0]
 800f464:	683b      	ldr	r3, [r7, #0]
 800f466:	0a1b      	lsrs	r3, r3, #8
 800f468:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	1c5a      	adds	r2, r3, #1
 800f46e:	607a      	str	r2, [r7, #4]
 800f470:	683a      	ldr	r2, [r7, #0]
 800f472:	b2d2      	uxtb	r2, r2
 800f474:	701a      	strb	r2, [r3, #0]
 800f476:	683b      	ldr	r3, [r7, #0]
 800f478:	0a1b      	lsrs	r3, r3, #8
 800f47a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	1c5a      	adds	r2, r3, #1
 800f480:	607a      	str	r2, [r7, #4]
 800f482:	683a      	ldr	r2, [r7, #0]
 800f484:	b2d2      	uxtb	r2, r2
 800f486:	701a      	strb	r2, [r3, #0]
 800f488:	683b      	ldr	r3, [r7, #0]
 800f48a:	0a1b      	lsrs	r3, r3, #8
 800f48c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	1c5a      	adds	r2, r3, #1
 800f492:	607a      	str	r2, [r7, #4]
 800f494:	683a      	ldr	r2, [r7, #0]
 800f496:	b2d2      	uxtb	r2, r2
 800f498:	701a      	strb	r2, [r3, #0]
}
 800f49a:	bf00      	nop
 800f49c:	370c      	adds	r7, #12
 800f49e:	46bd      	mov	sp, r7
 800f4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a4:	4770      	bx	lr

0800f4a6 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800f4a6:	b480      	push	{r7}
 800f4a8:	b087      	sub	sp, #28
 800f4aa:	af00      	add	r7, sp, #0
 800f4ac:	60f8      	str	r0, [r7, #12]
 800f4ae:	60b9      	str	r1, [r7, #8]
 800f4b0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800f4b6:	68bb      	ldr	r3, [r7, #8]
 800f4b8:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d00d      	beq.n	800f4dc <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800f4c0:	693a      	ldr	r2, [r7, #16]
 800f4c2:	1c53      	adds	r3, r2, #1
 800f4c4:	613b      	str	r3, [r7, #16]
 800f4c6:	697b      	ldr	r3, [r7, #20]
 800f4c8:	1c59      	adds	r1, r3, #1
 800f4ca:	6179      	str	r1, [r7, #20]
 800f4cc:	7812      	ldrb	r2, [r2, #0]
 800f4ce:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	3b01      	subs	r3, #1
 800f4d4:	607b      	str	r3, [r7, #4]
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d1f1      	bne.n	800f4c0 <mem_cpy+0x1a>
	}
}
 800f4dc:	bf00      	nop
 800f4de:	371c      	adds	r7, #28
 800f4e0:	46bd      	mov	sp, r7
 800f4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e6:	4770      	bx	lr

0800f4e8 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800f4e8:	b480      	push	{r7}
 800f4ea:	b087      	sub	sp, #28
 800f4ec:	af00      	add	r7, sp, #0
 800f4ee:	60f8      	str	r0, [r7, #12]
 800f4f0:	60b9      	str	r1, [r7, #8]
 800f4f2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800f4f8:	697b      	ldr	r3, [r7, #20]
 800f4fa:	1c5a      	adds	r2, r3, #1
 800f4fc:	617a      	str	r2, [r7, #20]
 800f4fe:	68ba      	ldr	r2, [r7, #8]
 800f500:	b2d2      	uxtb	r2, r2
 800f502:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	3b01      	subs	r3, #1
 800f508:	607b      	str	r3, [r7, #4]
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d1f3      	bne.n	800f4f8 <mem_set+0x10>
}
 800f510:	bf00      	nop
 800f512:	bf00      	nop
 800f514:	371c      	adds	r7, #28
 800f516:	46bd      	mov	sp, r7
 800f518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f51c:	4770      	bx	lr

0800f51e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800f51e:	b480      	push	{r7}
 800f520:	b089      	sub	sp, #36	@ 0x24
 800f522:	af00      	add	r7, sp, #0
 800f524:	60f8      	str	r0, [r7, #12]
 800f526:	60b9      	str	r1, [r7, #8]
 800f528:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	61fb      	str	r3, [r7, #28]
 800f52e:	68bb      	ldr	r3, [r7, #8]
 800f530:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800f532:	2300      	movs	r3, #0
 800f534:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800f536:	69fb      	ldr	r3, [r7, #28]
 800f538:	1c5a      	adds	r2, r3, #1
 800f53a:	61fa      	str	r2, [r7, #28]
 800f53c:	781b      	ldrb	r3, [r3, #0]
 800f53e:	4619      	mov	r1, r3
 800f540:	69bb      	ldr	r3, [r7, #24]
 800f542:	1c5a      	adds	r2, r3, #1
 800f544:	61ba      	str	r2, [r7, #24]
 800f546:	781b      	ldrb	r3, [r3, #0]
 800f548:	1acb      	subs	r3, r1, r3
 800f54a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	3b01      	subs	r3, #1
 800f550:	607b      	str	r3, [r7, #4]
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	2b00      	cmp	r3, #0
 800f556:	d002      	beq.n	800f55e <mem_cmp+0x40>
 800f558:	697b      	ldr	r3, [r7, #20]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d0eb      	beq.n	800f536 <mem_cmp+0x18>

	return r;
 800f55e:	697b      	ldr	r3, [r7, #20]
}
 800f560:	4618      	mov	r0, r3
 800f562:	3724      	adds	r7, #36	@ 0x24
 800f564:	46bd      	mov	sp, r7
 800f566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f56a:	4770      	bx	lr

0800f56c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800f56c:	b480      	push	{r7}
 800f56e:	b083      	sub	sp, #12
 800f570:	af00      	add	r7, sp, #0
 800f572:	6078      	str	r0, [r7, #4]
 800f574:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800f576:	e002      	b.n	800f57e <chk_chr+0x12>
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	3301      	adds	r3, #1
 800f57c:	607b      	str	r3, [r7, #4]
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	781b      	ldrb	r3, [r3, #0]
 800f582:	2b00      	cmp	r3, #0
 800f584:	d005      	beq.n	800f592 <chk_chr+0x26>
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	781b      	ldrb	r3, [r3, #0]
 800f58a:	461a      	mov	r2, r3
 800f58c:	683b      	ldr	r3, [r7, #0]
 800f58e:	4293      	cmp	r3, r2
 800f590:	d1f2      	bne.n	800f578 <chk_chr+0xc>
	return *str;
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	781b      	ldrb	r3, [r3, #0]
}
 800f596:	4618      	mov	r0, r3
 800f598:	370c      	adds	r7, #12
 800f59a:	46bd      	mov	sp, r7
 800f59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a0:	4770      	bx	lr

0800f5a2 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800f5a2:	b580      	push	{r7, lr}
 800f5a4:	b082      	sub	sp, #8
 800f5a6:	af00      	add	r7, sp, #0
 800f5a8:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d009      	beq.n	800f5c4 <lock_fs+0x22>
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	68db      	ldr	r3, [r3, #12]
 800f5b4:	4618      	mov	r0, r3
 800f5b6:	f002 fd5b 	bl	8012070 <ff_req_grant>
 800f5ba:	4603      	mov	r3, r0
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d001      	beq.n	800f5c4 <lock_fs+0x22>
 800f5c0:	2301      	movs	r3, #1
 800f5c2:	e000      	b.n	800f5c6 <lock_fs+0x24>
 800f5c4:	2300      	movs	r3, #0
}
 800f5c6:	4618      	mov	r0, r3
 800f5c8:	3708      	adds	r7, #8
 800f5ca:	46bd      	mov	sp, r7
 800f5cc:	bd80      	pop	{r7, pc}

0800f5ce <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800f5ce:	b580      	push	{r7, lr}
 800f5d0:	b082      	sub	sp, #8
 800f5d2:	af00      	add	r7, sp, #0
 800f5d4:	6078      	str	r0, [r7, #4]
 800f5d6:	460b      	mov	r3, r1
 800f5d8:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d00d      	beq.n	800f5fc <unlock_fs+0x2e>
 800f5e0:	78fb      	ldrb	r3, [r7, #3]
 800f5e2:	2b0c      	cmp	r3, #12
 800f5e4:	d00a      	beq.n	800f5fc <unlock_fs+0x2e>
 800f5e6:	78fb      	ldrb	r3, [r7, #3]
 800f5e8:	2b0b      	cmp	r3, #11
 800f5ea:	d007      	beq.n	800f5fc <unlock_fs+0x2e>
 800f5ec:	78fb      	ldrb	r3, [r7, #3]
 800f5ee:	2b0f      	cmp	r3, #15
 800f5f0:	d004      	beq.n	800f5fc <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	68db      	ldr	r3, [r3, #12]
 800f5f6:	4618      	mov	r0, r3
 800f5f8:	f002 fd4f 	bl	801209a <ff_rel_grant>
	}
}
 800f5fc:	bf00      	nop
 800f5fe:	3708      	adds	r7, #8
 800f600:	46bd      	mov	sp, r7
 800f602:	bd80      	pop	{r7, pc}

0800f604 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f604:	b480      	push	{r7}
 800f606:	b085      	sub	sp, #20
 800f608:	af00      	add	r7, sp, #0
 800f60a:	6078      	str	r0, [r7, #4]
 800f60c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f60e:	2300      	movs	r3, #0
 800f610:	60bb      	str	r3, [r7, #8]
 800f612:	68bb      	ldr	r3, [r7, #8]
 800f614:	60fb      	str	r3, [r7, #12]
 800f616:	e029      	b.n	800f66c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800f618:	4a27      	ldr	r2, [pc, #156]	@ (800f6b8 <chk_lock+0xb4>)
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	011b      	lsls	r3, r3, #4
 800f61e:	4413      	add	r3, r2
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	2b00      	cmp	r3, #0
 800f624:	d01d      	beq.n	800f662 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f626:	4a24      	ldr	r2, [pc, #144]	@ (800f6b8 <chk_lock+0xb4>)
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	011b      	lsls	r3, r3, #4
 800f62c:	4413      	add	r3, r2
 800f62e:	681a      	ldr	r2, [r3, #0]
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	429a      	cmp	r2, r3
 800f636:	d116      	bne.n	800f666 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800f638:	4a1f      	ldr	r2, [pc, #124]	@ (800f6b8 <chk_lock+0xb4>)
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	011b      	lsls	r3, r3, #4
 800f63e:	4413      	add	r3, r2
 800f640:	3304      	adds	r3, #4
 800f642:	681a      	ldr	r2, [r3, #0]
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f648:	429a      	cmp	r2, r3
 800f64a:	d10c      	bne.n	800f666 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f64c:	4a1a      	ldr	r2, [pc, #104]	@ (800f6b8 <chk_lock+0xb4>)
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	011b      	lsls	r3, r3, #4
 800f652:	4413      	add	r3, r2
 800f654:	3308      	adds	r3, #8
 800f656:	681a      	ldr	r2, [r3, #0]
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800f65c:	429a      	cmp	r2, r3
 800f65e:	d102      	bne.n	800f666 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f660:	e007      	b.n	800f672 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800f662:	2301      	movs	r3, #1
 800f664:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	3301      	adds	r3, #1
 800f66a:	60fb      	str	r3, [r7, #12]
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	2b01      	cmp	r3, #1
 800f670:	d9d2      	bls.n	800f618 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	2b02      	cmp	r3, #2
 800f676:	d109      	bne.n	800f68c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800f678:	68bb      	ldr	r3, [r7, #8]
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d102      	bne.n	800f684 <chk_lock+0x80>
 800f67e:	683b      	ldr	r3, [r7, #0]
 800f680:	2b02      	cmp	r3, #2
 800f682:	d101      	bne.n	800f688 <chk_lock+0x84>
 800f684:	2300      	movs	r3, #0
 800f686:	e010      	b.n	800f6aa <chk_lock+0xa6>
 800f688:	2312      	movs	r3, #18
 800f68a:	e00e      	b.n	800f6aa <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800f68c:	683b      	ldr	r3, [r7, #0]
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d108      	bne.n	800f6a4 <chk_lock+0xa0>
 800f692:	4a09      	ldr	r2, [pc, #36]	@ (800f6b8 <chk_lock+0xb4>)
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	011b      	lsls	r3, r3, #4
 800f698:	4413      	add	r3, r2
 800f69a:	330c      	adds	r3, #12
 800f69c:	881b      	ldrh	r3, [r3, #0]
 800f69e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f6a2:	d101      	bne.n	800f6a8 <chk_lock+0xa4>
 800f6a4:	2310      	movs	r3, #16
 800f6a6:	e000      	b.n	800f6aa <chk_lock+0xa6>
 800f6a8:	2300      	movs	r3, #0
}
 800f6aa:	4618      	mov	r0, r3
 800f6ac:	3714      	adds	r7, #20
 800f6ae:	46bd      	mov	sp, r7
 800f6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b4:	4770      	bx	lr
 800f6b6:	bf00      	nop
 800f6b8:	24000a40 	.word	0x24000a40

0800f6bc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800f6bc:	b480      	push	{r7}
 800f6be:	b083      	sub	sp, #12
 800f6c0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f6c2:	2300      	movs	r3, #0
 800f6c4:	607b      	str	r3, [r7, #4]
 800f6c6:	e002      	b.n	800f6ce <enq_lock+0x12>
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	3301      	adds	r3, #1
 800f6cc:	607b      	str	r3, [r7, #4]
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	2b01      	cmp	r3, #1
 800f6d2:	d806      	bhi.n	800f6e2 <enq_lock+0x26>
 800f6d4:	4a09      	ldr	r2, [pc, #36]	@ (800f6fc <enq_lock+0x40>)
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	011b      	lsls	r3, r3, #4
 800f6da:	4413      	add	r3, r2
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d1f2      	bne.n	800f6c8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	2b02      	cmp	r3, #2
 800f6e6:	bf14      	ite	ne
 800f6e8:	2301      	movne	r3, #1
 800f6ea:	2300      	moveq	r3, #0
 800f6ec:	b2db      	uxtb	r3, r3
}
 800f6ee:	4618      	mov	r0, r3
 800f6f0:	370c      	adds	r7, #12
 800f6f2:	46bd      	mov	sp, r7
 800f6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f8:	4770      	bx	lr
 800f6fa:	bf00      	nop
 800f6fc:	24000a40 	.word	0x24000a40

0800f700 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f700:	b480      	push	{r7}
 800f702:	b085      	sub	sp, #20
 800f704:	af00      	add	r7, sp, #0
 800f706:	6078      	str	r0, [r7, #4]
 800f708:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f70a:	2300      	movs	r3, #0
 800f70c:	60fb      	str	r3, [r7, #12]
 800f70e:	e01f      	b.n	800f750 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800f710:	4a41      	ldr	r2, [pc, #260]	@ (800f818 <inc_lock+0x118>)
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	011b      	lsls	r3, r3, #4
 800f716:	4413      	add	r3, r2
 800f718:	681a      	ldr	r2, [r3, #0]
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	429a      	cmp	r2, r3
 800f720:	d113      	bne.n	800f74a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800f722:	4a3d      	ldr	r2, [pc, #244]	@ (800f818 <inc_lock+0x118>)
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	011b      	lsls	r3, r3, #4
 800f728:	4413      	add	r3, r2
 800f72a:	3304      	adds	r3, #4
 800f72c:	681a      	ldr	r2, [r3, #0]
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800f732:	429a      	cmp	r2, r3
 800f734:	d109      	bne.n	800f74a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800f736:	4a38      	ldr	r2, [pc, #224]	@ (800f818 <inc_lock+0x118>)
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	011b      	lsls	r3, r3, #4
 800f73c:	4413      	add	r3, r2
 800f73e:	3308      	adds	r3, #8
 800f740:	681a      	ldr	r2, [r3, #0]
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800f746:	429a      	cmp	r2, r3
 800f748:	d006      	beq.n	800f758 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	3301      	adds	r3, #1
 800f74e:	60fb      	str	r3, [r7, #12]
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	2b01      	cmp	r3, #1
 800f754:	d9dc      	bls.n	800f710 <inc_lock+0x10>
 800f756:	e000      	b.n	800f75a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800f758:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	2b02      	cmp	r3, #2
 800f75e:	d132      	bne.n	800f7c6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f760:	2300      	movs	r3, #0
 800f762:	60fb      	str	r3, [r7, #12]
 800f764:	e002      	b.n	800f76c <inc_lock+0x6c>
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	3301      	adds	r3, #1
 800f76a:	60fb      	str	r3, [r7, #12]
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	2b01      	cmp	r3, #1
 800f770:	d806      	bhi.n	800f780 <inc_lock+0x80>
 800f772:	4a29      	ldr	r2, [pc, #164]	@ (800f818 <inc_lock+0x118>)
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	011b      	lsls	r3, r3, #4
 800f778:	4413      	add	r3, r2
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d1f2      	bne.n	800f766 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	2b02      	cmp	r3, #2
 800f784:	d101      	bne.n	800f78a <inc_lock+0x8a>
 800f786:	2300      	movs	r3, #0
 800f788:	e040      	b.n	800f80c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	681a      	ldr	r2, [r3, #0]
 800f78e:	4922      	ldr	r1, [pc, #136]	@ (800f818 <inc_lock+0x118>)
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	011b      	lsls	r3, r3, #4
 800f794:	440b      	add	r3, r1
 800f796:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	689a      	ldr	r2, [r3, #8]
 800f79c:	491e      	ldr	r1, [pc, #120]	@ (800f818 <inc_lock+0x118>)
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	011b      	lsls	r3, r3, #4
 800f7a2:	440b      	add	r3, r1
 800f7a4:	3304      	adds	r3, #4
 800f7a6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	695a      	ldr	r2, [r3, #20]
 800f7ac:	491a      	ldr	r1, [pc, #104]	@ (800f818 <inc_lock+0x118>)
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	011b      	lsls	r3, r3, #4
 800f7b2:	440b      	add	r3, r1
 800f7b4:	3308      	adds	r3, #8
 800f7b6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800f7b8:	4a17      	ldr	r2, [pc, #92]	@ (800f818 <inc_lock+0x118>)
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	011b      	lsls	r3, r3, #4
 800f7be:	4413      	add	r3, r2
 800f7c0:	330c      	adds	r3, #12
 800f7c2:	2200      	movs	r2, #0
 800f7c4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800f7c6:	683b      	ldr	r3, [r7, #0]
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d009      	beq.n	800f7e0 <inc_lock+0xe0>
 800f7cc:	4a12      	ldr	r2, [pc, #72]	@ (800f818 <inc_lock+0x118>)
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	011b      	lsls	r3, r3, #4
 800f7d2:	4413      	add	r3, r2
 800f7d4:	330c      	adds	r3, #12
 800f7d6:	881b      	ldrh	r3, [r3, #0]
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d001      	beq.n	800f7e0 <inc_lock+0xe0>
 800f7dc:	2300      	movs	r3, #0
 800f7de:	e015      	b.n	800f80c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800f7e0:	683b      	ldr	r3, [r7, #0]
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d108      	bne.n	800f7f8 <inc_lock+0xf8>
 800f7e6:	4a0c      	ldr	r2, [pc, #48]	@ (800f818 <inc_lock+0x118>)
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	011b      	lsls	r3, r3, #4
 800f7ec:	4413      	add	r3, r2
 800f7ee:	330c      	adds	r3, #12
 800f7f0:	881b      	ldrh	r3, [r3, #0]
 800f7f2:	3301      	adds	r3, #1
 800f7f4:	b29a      	uxth	r2, r3
 800f7f6:	e001      	b.n	800f7fc <inc_lock+0xfc>
 800f7f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800f7fc:	4906      	ldr	r1, [pc, #24]	@ (800f818 <inc_lock+0x118>)
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	011b      	lsls	r3, r3, #4
 800f802:	440b      	add	r3, r1
 800f804:	330c      	adds	r3, #12
 800f806:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	3301      	adds	r3, #1
}
 800f80c:	4618      	mov	r0, r3
 800f80e:	3714      	adds	r7, #20
 800f810:	46bd      	mov	sp, r7
 800f812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f816:	4770      	bx	lr
 800f818:	24000a40 	.word	0x24000a40

0800f81c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800f81c:	b480      	push	{r7}
 800f81e:	b085      	sub	sp, #20
 800f820:	af00      	add	r7, sp, #0
 800f822:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800f824:	2300      	movs	r3, #0
 800f826:	60fb      	str	r3, [r7, #12]
 800f828:	e010      	b.n	800f84c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800f82a:	4a0d      	ldr	r2, [pc, #52]	@ (800f860 <clear_lock+0x44>)
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	011b      	lsls	r3, r3, #4
 800f830:	4413      	add	r3, r2
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	687a      	ldr	r2, [r7, #4]
 800f836:	429a      	cmp	r2, r3
 800f838:	d105      	bne.n	800f846 <clear_lock+0x2a>
 800f83a:	4a09      	ldr	r2, [pc, #36]	@ (800f860 <clear_lock+0x44>)
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	011b      	lsls	r3, r3, #4
 800f840:	4413      	add	r3, r2
 800f842:	2200      	movs	r2, #0
 800f844:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	3301      	adds	r3, #1
 800f84a:	60fb      	str	r3, [r7, #12]
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	2b01      	cmp	r3, #1
 800f850:	d9eb      	bls.n	800f82a <clear_lock+0xe>
	}
}
 800f852:	bf00      	nop
 800f854:	bf00      	nop
 800f856:	3714      	adds	r7, #20
 800f858:	46bd      	mov	sp, r7
 800f85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f85e:	4770      	bx	lr
 800f860:	24000a40 	.word	0x24000a40

0800f864 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800f864:	b580      	push	{r7, lr}
 800f866:	b086      	sub	sp, #24
 800f868:	af00      	add	r7, sp, #0
 800f86a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800f86c:	2300      	movs	r3, #0
 800f86e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	78db      	ldrb	r3, [r3, #3]
 800f874:	2b00      	cmp	r3, #0
 800f876:	d034      	beq.n	800f8e2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f87c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	7858      	ldrb	r0, [r3, #1]
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800f888:	2301      	movs	r3, #1
 800f88a:	697a      	ldr	r2, [r7, #20]
 800f88c:	f7ff fd4a 	bl	800f324 <disk_write>
 800f890:	4603      	mov	r3, r0
 800f892:	2b00      	cmp	r3, #0
 800f894:	d002      	beq.n	800f89c <sync_window+0x38>
			res = FR_DISK_ERR;
 800f896:	2301      	movs	r3, #1
 800f898:	73fb      	strb	r3, [r7, #15]
 800f89a:	e022      	b.n	800f8e2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	2200      	movs	r2, #0
 800f8a0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f8a6:	697a      	ldr	r2, [r7, #20]
 800f8a8:	1ad2      	subs	r2, r2, r3
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	69db      	ldr	r3, [r3, #28]
 800f8ae:	429a      	cmp	r2, r3
 800f8b0:	d217      	bcs.n	800f8e2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	789b      	ldrb	r3, [r3, #2]
 800f8b6:	613b      	str	r3, [r7, #16]
 800f8b8:	e010      	b.n	800f8dc <sync_window+0x78>
					wsect += fs->fsize;
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	69db      	ldr	r3, [r3, #28]
 800f8be:	697a      	ldr	r2, [r7, #20]
 800f8c0:	4413      	add	r3, r2
 800f8c2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	7858      	ldrb	r0, [r3, #1]
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800f8ce:	2301      	movs	r3, #1
 800f8d0:	697a      	ldr	r2, [r7, #20]
 800f8d2:	f7ff fd27 	bl	800f324 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f8d6:	693b      	ldr	r3, [r7, #16]
 800f8d8:	3b01      	subs	r3, #1
 800f8da:	613b      	str	r3, [r7, #16]
 800f8dc:	693b      	ldr	r3, [r7, #16]
 800f8de:	2b01      	cmp	r3, #1
 800f8e0:	d8eb      	bhi.n	800f8ba <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800f8e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8e4:	4618      	mov	r0, r3
 800f8e6:	3718      	adds	r7, #24
 800f8e8:	46bd      	mov	sp, r7
 800f8ea:	bd80      	pop	{r7, pc}

0800f8ec <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800f8ec:	b580      	push	{r7, lr}
 800f8ee:	b084      	sub	sp, #16
 800f8f0:	af00      	add	r7, sp, #0
 800f8f2:	6078      	str	r0, [r7, #4]
 800f8f4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800f8f6:	2300      	movs	r3, #0
 800f8f8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f8fe:	683a      	ldr	r2, [r7, #0]
 800f900:	429a      	cmp	r2, r3
 800f902:	d01b      	beq.n	800f93c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800f904:	6878      	ldr	r0, [r7, #4]
 800f906:	f7ff ffad 	bl	800f864 <sync_window>
 800f90a:	4603      	mov	r3, r0
 800f90c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800f90e:	7bfb      	ldrb	r3, [r7, #15]
 800f910:	2b00      	cmp	r3, #0
 800f912:	d113      	bne.n	800f93c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	7858      	ldrb	r0, [r3, #1]
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800f91e:	2301      	movs	r3, #1
 800f920:	683a      	ldr	r2, [r7, #0]
 800f922:	f7ff fcdf 	bl	800f2e4 <disk_read>
 800f926:	4603      	mov	r3, r0
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d004      	beq.n	800f936 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800f92c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f930:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800f932:	2301      	movs	r3, #1
 800f934:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	683a      	ldr	r2, [r7, #0]
 800f93a:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 800f93c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f93e:	4618      	mov	r0, r3
 800f940:	3710      	adds	r7, #16
 800f942:	46bd      	mov	sp, r7
 800f944:	bd80      	pop	{r7, pc}
	...

0800f948 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800f948:	b580      	push	{r7, lr}
 800f94a:	b084      	sub	sp, #16
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800f950:	6878      	ldr	r0, [r7, #4]
 800f952:	f7ff ff87 	bl	800f864 <sync_window>
 800f956:	4603      	mov	r3, r0
 800f958:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f95a:	7bfb      	ldrb	r3, [r7, #15]
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d158      	bne.n	800fa12 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	781b      	ldrb	r3, [r3, #0]
 800f964:	2b03      	cmp	r3, #3
 800f966:	d148      	bne.n	800f9fa <sync_fs+0xb2>
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	791b      	ldrb	r3, [r3, #4]
 800f96c:	2b01      	cmp	r3, #1
 800f96e:	d144      	bne.n	800f9fa <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	3334      	adds	r3, #52	@ 0x34
 800f974:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f978:	2100      	movs	r1, #0
 800f97a:	4618      	mov	r0, r3
 800f97c:	f7ff fdb4 	bl	800f4e8 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	3334      	adds	r3, #52	@ 0x34
 800f984:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800f988:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800f98c:	4618      	mov	r0, r3
 800f98e:	f7ff fd43 	bl	800f418 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	3334      	adds	r3, #52	@ 0x34
 800f996:	4921      	ldr	r1, [pc, #132]	@ (800fa1c <sync_fs+0xd4>)
 800f998:	4618      	mov	r0, r3
 800f99a:	f7ff fd58 	bl	800f44e <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	3334      	adds	r3, #52	@ 0x34
 800f9a2:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800f9a6:	491e      	ldr	r1, [pc, #120]	@ (800fa20 <sync_fs+0xd8>)
 800f9a8:	4618      	mov	r0, r3
 800f9aa:	f7ff fd50 	bl	800f44e <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	3334      	adds	r3, #52	@ 0x34
 800f9b2:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	695b      	ldr	r3, [r3, #20]
 800f9ba:	4619      	mov	r1, r3
 800f9bc:	4610      	mov	r0, r2
 800f9be:	f7ff fd46 	bl	800f44e <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	3334      	adds	r3, #52	@ 0x34
 800f9c6:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	691b      	ldr	r3, [r3, #16]
 800f9ce:	4619      	mov	r1, r3
 800f9d0:	4610      	mov	r0, r2
 800f9d2:	f7ff fd3c 	bl	800f44e <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	6a1b      	ldr	r3, [r3, #32]
 800f9da:	1c5a      	adds	r2, r3, #1
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	7858      	ldrb	r0, [r3, #1]
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f9ee:	2301      	movs	r3, #1
 800f9f0:	f7ff fc98 	bl	800f324 <disk_write>
			fs->fsi_flag = 0;
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	2200      	movs	r2, #0
 800f9f8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	785b      	ldrb	r3, [r3, #1]
 800f9fe:	2200      	movs	r2, #0
 800fa00:	2100      	movs	r1, #0
 800fa02:	4618      	mov	r0, r3
 800fa04:	f7ff fcae 	bl	800f364 <disk_ioctl>
 800fa08:	4603      	mov	r3, r0
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d001      	beq.n	800fa12 <sync_fs+0xca>
 800fa0e:	2301      	movs	r3, #1
 800fa10:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800fa12:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa14:	4618      	mov	r0, r3
 800fa16:	3710      	adds	r7, #16
 800fa18:	46bd      	mov	sp, r7
 800fa1a:	bd80      	pop	{r7, pc}
 800fa1c:	41615252 	.word	0x41615252
 800fa20:	61417272 	.word	0x61417272

0800fa24 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800fa24:	b480      	push	{r7}
 800fa26:	b083      	sub	sp, #12
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	6078      	str	r0, [r7, #4]
 800fa2c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800fa2e:	683b      	ldr	r3, [r7, #0]
 800fa30:	3b02      	subs	r3, #2
 800fa32:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	699b      	ldr	r3, [r3, #24]
 800fa38:	3b02      	subs	r3, #2
 800fa3a:	683a      	ldr	r2, [r7, #0]
 800fa3c:	429a      	cmp	r2, r3
 800fa3e:	d301      	bcc.n	800fa44 <clust2sect+0x20>
 800fa40:	2300      	movs	r3, #0
 800fa42:	e008      	b.n	800fa56 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	895b      	ldrh	r3, [r3, #10]
 800fa48:	461a      	mov	r2, r3
 800fa4a:	683b      	ldr	r3, [r7, #0]
 800fa4c:	fb03 f202 	mul.w	r2, r3, r2
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa54:	4413      	add	r3, r2
}
 800fa56:	4618      	mov	r0, r3
 800fa58:	370c      	adds	r7, #12
 800fa5a:	46bd      	mov	sp, r7
 800fa5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa60:	4770      	bx	lr

0800fa62 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800fa62:	b580      	push	{r7, lr}
 800fa64:	b086      	sub	sp, #24
 800fa66:	af00      	add	r7, sp, #0
 800fa68:	6078      	str	r0, [r7, #4]
 800fa6a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800fa72:	683b      	ldr	r3, [r7, #0]
 800fa74:	2b01      	cmp	r3, #1
 800fa76:	d904      	bls.n	800fa82 <get_fat+0x20>
 800fa78:	693b      	ldr	r3, [r7, #16]
 800fa7a:	699b      	ldr	r3, [r3, #24]
 800fa7c:	683a      	ldr	r2, [r7, #0]
 800fa7e:	429a      	cmp	r2, r3
 800fa80:	d302      	bcc.n	800fa88 <get_fat+0x26>
		val = 1;	/* Internal error */
 800fa82:	2301      	movs	r3, #1
 800fa84:	617b      	str	r3, [r7, #20]
 800fa86:	e08e      	b.n	800fba6 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800fa88:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fa8c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800fa8e:	693b      	ldr	r3, [r7, #16]
 800fa90:	781b      	ldrb	r3, [r3, #0]
 800fa92:	2b03      	cmp	r3, #3
 800fa94:	d061      	beq.n	800fb5a <get_fat+0xf8>
 800fa96:	2b03      	cmp	r3, #3
 800fa98:	dc7b      	bgt.n	800fb92 <get_fat+0x130>
 800fa9a:	2b01      	cmp	r3, #1
 800fa9c:	d002      	beq.n	800faa4 <get_fat+0x42>
 800fa9e:	2b02      	cmp	r3, #2
 800faa0:	d041      	beq.n	800fb26 <get_fat+0xc4>
 800faa2:	e076      	b.n	800fb92 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800faa4:	683b      	ldr	r3, [r7, #0]
 800faa6:	60fb      	str	r3, [r7, #12]
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	085b      	lsrs	r3, r3, #1
 800faac:	68fa      	ldr	r2, [r7, #12]
 800faae:	4413      	add	r3, r2
 800fab0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fab2:	693b      	ldr	r3, [r7, #16]
 800fab4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	0a5b      	lsrs	r3, r3, #9
 800faba:	4413      	add	r3, r2
 800fabc:	4619      	mov	r1, r3
 800fabe:	6938      	ldr	r0, [r7, #16]
 800fac0:	f7ff ff14 	bl	800f8ec <move_window>
 800fac4:	4603      	mov	r3, r0
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d166      	bne.n	800fb98 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	1c5a      	adds	r2, r3, #1
 800face:	60fa      	str	r2, [r7, #12]
 800fad0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fad4:	693a      	ldr	r2, [r7, #16]
 800fad6:	4413      	add	r3, r2
 800fad8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800fadc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fade:	693b      	ldr	r3, [r7, #16]
 800fae0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	0a5b      	lsrs	r3, r3, #9
 800fae6:	4413      	add	r3, r2
 800fae8:	4619      	mov	r1, r3
 800faea:	6938      	ldr	r0, [r7, #16]
 800faec:	f7ff fefe 	bl	800f8ec <move_window>
 800faf0:	4603      	mov	r3, r0
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d152      	bne.n	800fb9c <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fafc:	693a      	ldr	r2, [r7, #16]
 800fafe:	4413      	add	r3, r2
 800fb00:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800fb04:	021b      	lsls	r3, r3, #8
 800fb06:	68ba      	ldr	r2, [r7, #8]
 800fb08:	4313      	orrs	r3, r2
 800fb0a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800fb0c:	683b      	ldr	r3, [r7, #0]
 800fb0e:	f003 0301 	and.w	r3, r3, #1
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d002      	beq.n	800fb1c <get_fat+0xba>
 800fb16:	68bb      	ldr	r3, [r7, #8]
 800fb18:	091b      	lsrs	r3, r3, #4
 800fb1a:	e002      	b.n	800fb22 <get_fat+0xc0>
 800fb1c:	68bb      	ldr	r3, [r7, #8]
 800fb1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800fb22:	617b      	str	r3, [r7, #20]
			break;
 800fb24:	e03f      	b.n	800fba6 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800fb26:	693b      	ldr	r3, [r7, #16]
 800fb28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fb2a:	683b      	ldr	r3, [r7, #0]
 800fb2c:	0a1b      	lsrs	r3, r3, #8
 800fb2e:	4413      	add	r3, r2
 800fb30:	4619      	mov	r1, r3
 800fb32:	6938      	ldr	r0, [r7, #16]
 800fb34:	f7ff feda 	bl	800f8ec <move_window>
 800fb38:	4603      	mov	r3, r0
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d130      	bne.n	800fba0 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800fb3e:	693b      	ldr	r3, [r7, #16]
 800fb40:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800fb44:	683b      	ldr	r3, [r7, #0]
 800fb46:	005b      	lsls	r3, r3, #1
 800fb48:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800fb4c:	4413      	add	r3, r2
 800fb4e:	4618      	mov	r0, r3
 800fb50:	f7ff fc26 	bl	800f3a0 <ld_word>
 800fb54:	4603      	mov	r3, r0
 800fb56:	617b      	str	r3, [r7, #20]
			break;
 800fb58:	e025      	b.n	800fba6 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800fb5a:	693b      	ldr	r3, [r7, #16]
 800fb5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fb5e:	683b      	ldr	r3, [r7, #0]
 800fb60:	09db      	lsrs	r3, r3, #7
 800fb62:	4413      	add	r3, r2
 800fb64:	4619      	mov	r1, r3
 800fb66:	6938      	ldr	r0, [r7, #16]
 800fb68:	f7ff fec0 	bl	800f8ec <move_window>
 800fb6c:	4603      	mov	r3, r0
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d118      	bne.n	800fba4 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800fb72:	693b      	ldr	r3, [r7, #16]
 800fb74:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800fb78:	683b      	ldr	r3, [r7, #0]
 800fb7a:	009b      	lsls	r3, r3, #2
 800fb7c:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800fb80:	4413      	add	r3, r2
 800fb82:	4618      	mov	r0, r3
 800fb84:	f7ff fc25 	bl	800f3d2 <ld_dword>
 800fb88:	4603      	mov	r3, r0
 800fb8a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800fb8e:	617b      	str	r3, [r7, #20]
			break;
 800fb90:	e009      	b.n	800fba6 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800fb92:	2301      	movs	r3, #1
 800fb94:	617b      	str	r3, [r7, #20]
 800fb96:	e006      	b.n	800fba6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fb98:	bf00      	nop
 800fb9a:	e004      	b.n	800fba6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fb9c:	bf00      	nop
 800fb9e:	e002      	b.n	800fba6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800fba0:	bf00      	nop
 800fba2:	e000      	b.n	800fba6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800fba4:	bf00      	nop
		}
	}

	return val;
 800fba6:	697b      	ldr	r3, [r7, #20]
}
 800fba8:	4618      	mov	r0, r3
 800fbaa:	3718      	adds	r7, #24
 800fbac:	46bd      	mov	sp, r7
 800fbae:	bd80      	pop	{r7, pc}

0800fbb0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800fbb0:	b590      	push	{r4, r7, lr}
 800fbb2:	b089      	sub	sp, #36	@ 0x24
 800fbb4:	af00      	add	r7, sp, #0
 800fbb6:	60f8      	str	r0, [r7, #12]
 800fbb8:	60b9      	str	r1, [r7, #8]
 800fbba:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800fbbc:	2302      	movs	r3, #2
 800fbbe:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800fbc0:	68bb      	ldr	r3, [r7, #8]
 800fbc2:	2b01      	cmp	r3, #1
 800fbc4:	f240 80d9 	bls.w	800fd7a <put_fat+0x1ca>
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	699b      	ldr	r3, [r3, #24]
 800fbcc:	68ba      	ldr	r2, [r7, #8]
 800fbce:	429a      	cmp	r2, r3
 800fbd0:	f080 80d3 	bcs.w	800fd7a <put_fat+0x1ca>
		switch (fs->fs_type) {
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	781b      	ldrb	r3, [r3, #0]
 800fbd8:	2b03      	cmp	r3, #3
 800fbda:	f000 8096 	beq.w	800fd0a <put_fat+0x15a>
 800fbde:	2b03      	cmp	r3, #3
 800fbe0:	f300 80cb 	bgt.w	800fd7a <put_fat+0x1ca>
 800fbe4:	2b01      	cmp	r3, #1
 800fbe6:	d002      	beq.n	800fbee <put_fat+0x3e>
 800fbe8:	2b02      	cmp	r3, #2
 800fbea:	d06e      	beq.n	800fcca <put_fat+0x11a>
 800fbec:	e0c5      	b.n	800fd7a <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800fbee:	68bb      	ldr	r3, [r7, #8]
 800fbf0:	61bb      	str	r3, [r7, #24]
 800fbf2:	69bb      	ldr	r3, [r7, #24]
 800fbf4:	085b      	lsrs	r3, r3, #1
 800fbf6:	69ba      	ldr	r2, [r7, #24]
 800fbf8:	4413      	add	r3, r2
 800fbfa:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fc00:	69bb      	ldr	r3, [r7, #24]
 800fc02:	0a5b      	lsrs	r3, r3, #9
 800fc04:	4413      	add	r3, r2
 800fc06:	4619      	mov	r1, r3
 800fc08:	68f8      	ldr	r0, [r7, #12]
 800fc0a:	f7ff fe6f 	bl	800f8ec <move_window>
 800fc0e:	4603      	mov	r3, r0
 800fc10:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fc12:	7ffb      	ldrb	r3, [r7, #31]
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	f040 80a9 	bne.w	800fd6c <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800fc20:	69bb      	ldr	r3, [r7, #24]
 800fc22:	1c59      	adds	r1, r3, #1
 800fc24:	61b9      	str	r1, [r7, #24]
 800fc26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fc2a:	4413      	add	r3, r2
 800fc2c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800fc2e:	68bb      	ldr	r3, [r7, #8]
 800fc30:	f003 0301 	and.w	r3, r3, #1
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d00d      	beq.n	800fc54 <put_fat+0xa4>
 800fc38:	697b      	ldr	r3, [r7, #20]
 800fc3a:	781b      	ldrb	r3, [r3, #0]
 800fc3c:	b25b      	sxtb	r3, r3
 800fc3e:	f003 030f 	and.w	r3, r3, #15
 800fc42:	b25a      	sxtb	r2, r3
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	b25b      	sxtb	r3, r3
 800fc48:	011b      	lsls	r3, r3, #4
 800fc4a:	b25b      	sxtb	r3, r3
 800fc4c:	4313      	orrs	r3, r2
 800fc4e:	b25b      	sxtb	r3, r3
 800fc50:	b2db      	uxtb	r3, r3
 800fc52:	e001      	b.n	800fc58 <put_fat+0xa8>
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	b2db      	uxtb	r3, r3
 800fc58:	697a      	ldr	r2, [r7, #20]
 800fc5a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	2201      	movs	r2, #1
 800fc60:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fc66:	69bb      	ldr	r3, [r7, #24]
 800fc68:	0a5b      	lsrs	r3, r3, #9
 800fc6a:	4413      	add	r3, r2
 800fc6c:	4619      	mov	r1, r3
 800fc6e:	68f8      	ldr	r0, [r7, #12]
 800fc70:	f7ff fe3c 	bl	800f8ec <move_window>
 800fc74:	4603      	mov	r3, r0
 800fc76:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fc78:	7ffb      	ldrb	r3, [r7, #31]
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d178      	bne.n	800fd70 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800fc84:	69bb      	ldr	r3, [r7, #24]
 800fc86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fc8a:	4413      	add	r3, r2
 800fc8c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800fc8e:	68bb      	ldr	r3, [r7, #8]
 800fc90:	f003 0301 	and.w	r3, r3, #1
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d003      	beq.n	800fca0 <put_fat+0xf0>
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	091b      	lsrs	r3, r3, #4
 800fc9c:	b2db      	uxtb	r3, r3
 800fc9e:	e00e      	b.n	800fcbe <put_fat+0x10e>
 800fca0:	697b      	ldr	r3, [r7, #20]
 800fca2:	781b      	ldrb	r3, [r3, #0]
 800fca4:	b25b      	sxtb	r3, r3
 800fca6:	f023 030f 	bic.w	r3, r3, #15
 800fcaa:	b25a      	sxtb	r2, r3
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	0a1b      	lsrs	r3, r3, #8
 800fcb0:	b25b      	sxtb	r3, r3
 800fcb2:	f003 030f 	and.w	r3, r3, #15
 800fcb6:	b25b      	sxtb	r3, r3
 800fcb8:	4313      	orrs	r3, r2
 800fcba:	b25b      	sxtb	r3, r3
 800fcbc:	b2db      	uxtb	r3, r3
 800fcbe:	697a      	ldr	r2, [r7, #20]
 800fcc0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	2201      	movs	r2, #1
 800fcc6:	70da      	strb	r2, [r3, #3]
			break;
 800fcc8:	e057      	b.n	800fd7a <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fcce:	68bb      	ldr	r3, [r7, #8]
 800fcd0:	0a1b      	lsrs	r3, r3, #8
 800fcd2:	4413      	add	r3, r2
 800fcd4:	4619      	mov	r1, r3
 800fcd6:	68f8      	ldr	r0, [r7, #12]
 800fcd8:	f7ff fe08 	bl	800f8ec <move_window>
 800fcdc:	4603      	mov	r3, r0
 800fcde:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fce0:	7ffb      	ldrb	r3, [r7, #31]
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d146      	bne.n	800fd74 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800fcec:	68bb      	ldr	r3, [r7, #8]
 800fcee:	005b      	lsls	r3, r3, #1
 800fcf0:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800fcf4:	4413      	add	r3, r2
 800fcf6:	687a      	ldr	r2, [r7, #4]
 800fcf8:	b292      	uxth	r2, r2
 800fcfa:	4611      	mov	r1, r2
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	f7ff fb8b 	bl	800f418 <st_word>
			fs->wflag = 1;
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	2201      	movs	r2, #1
 800fd06:	70da      	strb	r2, [r3, #3]
			break;
 800fd08:	e037      	b.n	800fd7a <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fd0e:	68bb      	ldr	r3, [r7, #8]
 800fd10:	09db      	lsrs	r3, r3, #7
 800fd12:	4413      	add	r3, r2
 800fd14:	4619      	mov	r1, r3
 800fd16:	68f8      	ldr	r0, [r7, #12]
 800fd18:	f7ff fde8 	bl	800f8ec <move_window>
 800fd1c:	4603      	mov	r3, r0
 800fd1e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fd20:	7ffb      	ldrb	r3, [r7, #31]
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d128      	bne.n	800fd78 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800fd32:	68bb      	ldr	r3, [r7, #8]
 800fd34:	009b      	lsls	r3, r3, #2
 800fd36:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800fd3a:	4413      	add	r3, r2
 800fd3c:	4618      	mov	r0, r3
 800fd3e:	f7ff fb48 	bl	800f3d2 <ld_dword>
 800fd42:	4603      	mov	r3, r0
 800fd44:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800fd48:	4323      	orrs	r3, r4
 800fd4a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800fd52:	68bb      	ldr	r3, [r7, #8]
 800fd54:	009b      	lsls	r3, r3, #2
 800fd56:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800fd5a:	4413      	add	r3, r2
 800fd5c:	6879      	ldr	r1, [r7, #4]
 800fd5e:	4618      	mov	r0, r3
 800fd60:	f7ff fb75 	bl	800f44e <st_dword>
			fs->wflag = 1;
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	2201      	movs	r2, #1
 800fd68:	70da      	strb	r2, [r3, #3]
			break;
 800fd6a:	e006      	b.n	800fd7a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800fd6c:	bf00      	nop
 800fd6e:	e004      	b.n	800fd7a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800fd70:	bf00      	nop
 800fd72:	e002      	b.n	800fd7a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800fd74:	bf00      	nop
 800fd76:	e000      	b.n	800fd7a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800fd78:	bf00      	nop
		}
	}
	return res;
 800fd7a:	7ffb      	ldrb	r3, [r7, #31]
}
 800fd7c:	4618      	mov	r0, r3
 800fd7e:	3724      	adds	r7, #36	@ 0x24
 800fd80:	46bd      	mov	sp, r7
 800fd82:	bd90      	pop	{r4, r7, pc}

0800fd84 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800fd84:	b580      	push	{r7, lr}
 800fd86:	b088      	sub	sp, #32
 800fd88:	af00      	add	r7, sp, #0
 800fd8a:	60f8      	str	r0, [r7, #12]
 800fd8c:	60b9      	str	r1, [r7, #8]
 800fd8e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800fd90:	2300      	movs	r3, #0
 800fd92:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800fd9a:	68bb      	ldr	r3, [r7, #8]
 800fd9c:	2b01      	cmp	r3, #1
 800fd9e:	d904      	bls.n	800fdaa <remove_chain+0x26>
 800fda0:	69bb      	ldr	r3, [r7, #24]
 800fda2:	699b      	ldr	r3, [r3, #24]
 800fda4:	68ba      	ldr	r2, [r7, #8]
 800fda6:	429a      	cmp	r2, r3
 800fda8:	d301      	bcc.n	800fdae <remove_chain+0x2a>
 800fdaa:	2302      	movs	r3, #2
 800fdac:	e04b      	b.n	800fe46 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d00c      	beq.n	800fdce <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800fdb4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800fdb8:	6879      	ldr	r1, [r7, #4]
 800fdba:	69b8      	ldr	r0, [r7, #24]
 800fdbc:	f7ff fef8 	bl	800fbb0 <put_fat>
 800fdc0:	4603      	mov	r3, r0
 800fdc2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800fdc4:	7ffb      	ldrb	r3, [r7, #31]
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d001      	beq.n	800fdce <remove_chain+0x4a>
 800fdca:	7ffb      	ldrb	r3, [r7, #31]
 800fdcc:	e03b      	b.n	800fe46 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800fdce:	68b9      	ldr	r1, [r7, #8]
 800fdd0:	68f8      	ldr	r0, [r7, #12]
 800fdd2:	f7ff fe46 	bl	800fa62 <get_fat>
 800fdd6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800fdd8:	697b      	ldr	r3, [r7, #20]
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d031      	beq.n	800fe42 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800fdde:	697b      	ldr	r3, [r7, #20]
 800fde0:	2b01      	cmp	r3, #1
 800fde2:	d101      	bne.n	800fde8 <remove_chain+0x64>
 800fde4:	2302      	movs	r3, #2
 800fde6:	e02e      	b.n	800fe46 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800fde8:	697b      	ldr	r3, [r7, #20]
 800fdea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fdee:	d101      	bne.n	800fdf4 <remove_chain+0x70>
 800fdf0:	2301      	movs	r3, #1
 800fdf2:	e028      	b.n	800fe46 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800fdf4:	2200      	movs	r2, #0
 800fdf6:	68b9      	ldr	r1, [r7, #8]
 800fdf8:	69b8      	ldr	r0, [r7, #24]
 800fdfa:	f7ff fed9 	bl	800fbb0 <put_fat>
 800fdfe:	4603      	mov	r3, r0
 800fe00:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800fe02:	7ffb      	ldrb	r3, [r7, #31]
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d001      	beq.n	800fe0c <remove_chain+0x88>
 800fe08:	7ffb      	ldrb	r3, [r7, #31]
 800fe0a:	e01c      	b.n	800fe46 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800fe0c:	69bb      	ldr	r3, [r7, #24]
 800fe0e:	695a      	ldr	r2, [r3, #20]
 800fe10:	69bb      	ldr	r3, [r7, #24]
 800fe12:	699b      	ldr	r3, [r3, #24]
 800fe14:	3b02      	subs	r3, #2
 800fe16:	429a      	cmp	r2, r3
 800fe18:	d20b      	bcs.n	800fe32 <remove_chain+0xae>
			fs->free_clst++;
 800fe1a:	69bb      	ldr	r3, [r7, #24]
 800fe1c:	695b      	ldr	r3, [r3, #20]
 800fe1e:	1c5a      	adds	r2, r3, #1
 800fe20:	69bb      	ldr	r3, [r7, #24]
 800fe22:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800fe24:	69bb      	ldr	r3, [r7, #24]
 800fe26:	791b      	ldrb	r3, [r3, #4]
 800fe28:	f043 0301 	orr.w	r3, r3, #1
 800fe2c:	b2da      	uxtb	r2, r3
 800fe2e:	69bb      	ldr	r3, [r7, #24]
 800fe30:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800fe32:	697b      	ldr	r3, [r7, #20]
 800fe34:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800fe36:	69bb      	ldr	r3, [r7, #24]
 800fe38:	699b      	ldr	r3, [r3, #24]
 800fe3a:	68ba      	ldr	r2, [r7, #8]
 800fe3c:	429a      	cmp	r2, r3
 800fe3e:	d3c6      	bcc.n	800fdce <remove_chain+0x4a>
 800fe40:	e000      	b.n	800fe44 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800fe42:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800fe44:	2300      	movs	r3, #0
}
 800fe46:	4618      	mov	r0, r3
 800fe48:	3720      	adds	r7, #32
 800fe4a:	46bd      	mov	sp, r7
 800fe4c:	bd80      	pop	{r7, pc}

0800fe4e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800fe4e:	b580      	push	{r7, lr}
 800fe50:	b088      	sub	sp, #32
 800fe52:	af00      	add	r7, sp, #0
 800fe54:	6078      	str	r0, [r7, #4]
 800fe56:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800fe5e:	683b      	ldr	r3, [r7, #0]
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d10d      	bne.n	800fe80 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800fe64:	693b      	ldr	r3, [r7, #16]
 800fe66:	691b      	ldr	r3, [r3, #16]
 800fe68:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800fe6a:	69bb      	ldr	r3, [r7, #24]
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d004      	beq.n	800fe7a <create_chain+0x2c>
 800fe70:	693b      	ldr	r3, [r7, #16]
 800fe72:	699b      	ldr	r3, [r3, #24]
 800fe74:	69ba      	ldr	r2, [r7, #24]
 800fe76:	429a      	cmp	r2, r3
 800fe78:	d31b      	bcc.n	800feb2 <create_chain+0x64>
 800fe7a:	2301      	movs	r3, #1
 800fe7c:	61bb      	str	r3, [r7, #24]
 800fe7e:	e018      	b.n	800feb2 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800fe80:	6839      	ldr	r1, [r7, #0]
 800fe82:	6878      	ldr	r0, [r7, #4]
 800fe84:	f7ff fded 	bl	800fa62 <get_fat>
 800fe88:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	2b01      	cmp	r3, #1
 800fe8e:	d801      	bhi.n	800fe94 <create_chain+0x46>
 800fe90:	2301      	movs	r3, #1
 800fe92:	e070      	b.n	800ff76 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fe9a:	d101      	bne.n	800fea0 <create_chain+0x52>
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	e06a      	b.n	800ff76 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800fea0:	693b      	ldr	r3, [r7, #16]
 800fea2:	699b      	ldr	r3, [r3, #24]
 800fea4:	68fa      	ldr	r2, [r7, #12]
 800fea6:	429a      	cmp	r2, r3
 800fea8:	d201      	bcs.n	800feae <create_chain+0x60>
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	e063      	b.n	800ff76 <create_chain+0x128>
		scl = clst;
 800feae:	683b      	ldr	r3, [r7, #0]
 800feb0:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800feb2:	69bb      	ldr	r3, [r7, #24]
 800feb4:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800feb6:	69fb      	ldr	r3, [r7, #28]
 800feb8:	3301      	adds	r3, #1
 800feba:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800febc:	693b      	ldr	r3, [r7, #16]
 800febe:	699b      	ldr	r3, [r3, #24]
 800fec0:	69fa      	ldr	r2, [r7, #28]
 800fec2:	429a      	cmp	r2, r3
 800fec4:	d307      	bcc.n	800fed6 <create_chain+0x88>
				ncl = 2;
 800fec6:	2302      	movs	r3, #2
 800fec8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800feca:	69fa      	ldr	r2, [r7, #28]
 800fecc:	69bb      	ldr	r3, [r7, #24]
 800fece:	429a      	cmp	r2, r3
 800fed0:	d901      	bls.n	800fed6 <create_chain+0x88>
 800fed2:	2300      	movs	r3, #0
 800fed4:	e04f      	b.n	800ff76 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800fed6:	69f9      	ldr	r1, [r7, #28]
 800fed8:	6878      	ldr	r0, [r7, #4]
 800feda:	f7ff fdc2 	bl	800fa62 <get_fat>
 800fede:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d00e      	beq.n	800ff04 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800fee6:	68fb      	ldr	r3, [r7, #12]
 800fee8:	2b01      	cmp	r3, #1
 800feea:	d003      	beq.n	800fef4 <create_chain+0xa6>
 800feec:	68fb      	ldr	r3, [r7, #12]
 800feee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fef2:	d101      	bne.n	800fef8 <create_chain+0xaa>
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	e03e      	b.n	800ff76 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800fef8:	69fa      	ldr	r2, [r7, #28]
 800fefa:	69bb      	ldr	r3, [r7, #24]
 800fefc:	429a      	cmp	r2, r3
 800fefe:	d1da      	bne.n	800feb6 <create_chain+0x68>
 800ff00:	2300      	movs	r3, #0
 800ff02:	e038      	b.n	800ff76 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800ff04:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800ff06:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ff0a:	69f9      	ldr	r1, [r7, #28]
 800ff0c:	6938      	ldr	r0, [r7, #16]
 800ff0e:	f7ff fe4f 	bl	800fbb0 <put_fat>
 800ff12:	4603      	mov	r3, r0
 800ff14:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800ff16:	7dfb      	ldrb	r3, [r7, #23]
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d109      	bne.n	800ff30 <create_chain+0xe2>
 800ff1c:	683b      	ldr	r3, [r7, #0]
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d006      	beq.n	800ff30 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800ff22:	69fa      	ldr	r2, [r7, #28]
 800ff24:	6839      	ldr	r1, [r7, #0]
 800ff26:	6938      	ldr	r0, [r7, #16]
 800ff28:	f7ff fe42 	bl	800fbb0 <put_fat>
 800ff2c:	4603      	mov	r3, r0
 800ff2e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800ff30:	7dfb      	ldrb	r3, [r7, #23]
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d116      	bne.n	800ff64 <create_chain+0x116>
		fs->last_clst = ncl;
 800ff36:	693b      	ldr	r3, [r7, #16]
 800ff38:	69fa      	ldr	r2, [r7, #28]
 800ff3a:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ff3c:	693b      	ldr	r3, [r7, #16]
 800ff3e:	695a      	ldr	r2, [r3, #20]
 800ff40:	693b      	ldr	r3, [r7, #16]
 800ff42:	699b      	ldr	r3, [r3, #24]
 800ff44:	3b02      	subs	r3, #2
 800ff46:	429a      	cmp	r2, r3
 800ff48:	d804      	bhi.n	800ff54 <create_chain+0x106>
 800ff4a:	693b      	ldr	r3, [r7, #16]
 800ff4c:	695b      	ldr	r3, [r3, #20]
 800ff4e:	1e5a      	subs	r2, r3, #1
 800ff50:	693b      	ldr	r3, [r7, #16]
 800ff52:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800ff54:	693b      	ldr	r3, [r7, #16]
 800ff56:	791b      	ldrb	r3, [r3, #4]
 800ff58:	f043 0301 	orr.w	r3, r3, #1
 800ff5c:	b2da      	uxtb	r2, r3
 800ff5e:	693b      	ldr	r3, [r7, #16]
 800ff60:	711a      	strb	r2, [r3, #4]
 800ff62:	e007      	b.n	800ff74 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ff64:	7dfb      	ldrb	r3, [r7, #23]
 800ff66:	2b01      	cmp	r3, #1
 800ff68:	d102      	bne.n	800ff70 <create_chain+0x122>
 800ff6a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ff6e:	e000      	b.n	800ff72 <create_chain+0x124>
 800ff70:	2301      	movs	r3, #1
 800ff72:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800ff74:	69fb      	ldr	r3, [r7, #28]
}
 800ff76:	4618      	mov	r0, r3
 800ff78:	3720      	adds	r7, #32
 800ff7a:	46bd      	mov	sp, r7
 800ff7c:	bd80      	pop	{r7, pc}

0800ff7e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800ff7e:	b480      	push	{r7}
 800ff80:	b087      	sub	sp, #28
 800ff82:	af00      	add	r7, sp, #0
 800ff84:	6078      	str	r0, [r7, #4]
 800ff86:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff92:	3304      	adds	r3, #4
 800ff94:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ff96:	683b      	ldr	r3, [r7, #0]
 800ff98:	0a5b      	lsrs	r3, r3, #9
 800ff9a:	68fa      	ldr	r2, [r7, #12]
 800ff9c:	8952      	ldrh	r2, [r2, #10]
 800ff9e:	fbb3 f3f2 	udiv	r3, r3, r2
 800ffa2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ffa4:	693b      	ldr	r3, [r7, #16]
 800ffa6:	1d1a      	adds	r2, r3, #4
 800ffa8:	613a      	str	r2, [r7, #16]
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ffae:	68bb      	ldr	r3, [r7, #8]
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d101      	bne.n	800ffb8 <clmt_clust+0x3a>
 800ffb4:	2300      	movs	r3, #0
 800ffb6:	e010      	b.n	800ffda <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800ffb8:	697a      	ldr	r2, [r7, #20]
 800ffba:	68bb      	ldr	r3, [r7, #8]
 800ffbc:	429a      	cmp	r2, r3
 800ffbe:	d307      	bcc.n	800ffd0 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800ffc0:	697a      	ldr	r2, [r7, #20]
 800ffc2:	68bb      	ldr	r3, [r7, #8]
 800ffc4:	1ad3      	subs	r3, r2, r3
 800ffc6:	617b      	str	r3, [r7, #20]
 800ffc8:	693b      	ldr	r3, [r7, #16]
 800ffca:	3304      	adds	r3, #4
 800ffcc:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ffce:	e7e9      	b.n	800ffa4 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800ffd0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800ffd2:	693b      	ldr	r3, [r7, #16]
 800ffd4:	681a      	ldr	r2, [r3, #0]
 800ffd6:	697b      	ldr	r3, [r7, #20]
 800ffd8:	4413      	add	r3, r2
}
 800ffda:	4618      	mov	r0, r3
 800ffdc:	371c      	adds	r7, #28
 800ffde:	46bd      	mov	sp, r7
 800ffe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffe4:	4770      	bx	lr

0800ffe6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800ffe6:	b580      	push	{r7, lr}
 800ffe8:	b086      	sub	sp, #24
 800ffea:	af00      	add	r7, sp, #0
 800ffec:	6078      	str	r0, [r7, #4]
 800ffee:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800fff6:	683b      	ldr	r3, [r7, #0]
 800fff8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800fffc:	d204      	bcs.n	8010008 <dir_sdi+0x22>
 800fffe:	683b      	ldr	r3, [r7, #0]
 8010000:	f003 031f 	and.w	r3, r3, #31
 8010004:	2b00      	cmp	r3, #0
 8010006:	d001      	beq.n	801000c <dir_sdi+0x26>
		return FR_INT_ERR;
 8010008:	2302      	movs	r3, #2
 801000a:	e063      	b.n	80100d4 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	683a      	ldr	r2, [r7, #0]
 8010010:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	689b      	ldr	r3, [r3, #8]
 8010016:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8010018:	697b      	ldr	r3, [r7, #20]
 801001a:	2b00      	cmp	r3, #0
 801001c:	d106      	bne.n	801002c <dir_sdi+0x46>
 801001e:	693b      	ldr	r3, [r7, #16]
 8010020:	781b      	ldrb	r3, [r3, #0]
 8010022:	2b02      	cmp	r3, #2
 8010024:	d902      	bls.n	801002c <dir_sdi+0x46>
		clst = fs->dirbase;
 8010026:	693b      	ldr	r3, [r7, #16]
 8010028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801002a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801002c:	697b      	ldr	r3, [r7, #20]
 801002e:	2b00      	cmp	r3, #0
 8010030:	d10c      	bne.n	801004c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8010032:	683b      	ldr	r3, [r7, #0]
 8010034:	095b      	lsrs	r3, r3, #5
 8010036:	693a      	ldr	r2, [r7, #16]
 8010038:	8912      	ldrh	r2, [r2, #8]
 801003a:	4293      	cmp	r3, r2
 801003c:	d301      	bcc.n	8010042 <dir_sdi+0x5c>
 801003e:	2302      	movs	r3, #2
 8010040:	e048      	b.n	80100d4 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8010042:	693b      	ldr	r3, [r7, #16]
 8010044:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	61da      	str	r2, [r3, #28]
 801004a:	e029      	b.n	80100a0 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801004c:	693b      	ldr	r3, [r7, #16]
 801004e:	895b      	ldrh	r3, [r3, #10]
 8010050:	025b      	lsls	r3, r3, #9
 8010052:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8010054:	e019      	b.n	801008a <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	6979      	ldr	r1, [r7, #20]
 801005a:	4618      	mov	r0, r3
 801005c:	f7ff fd01 	bl	800fa62 <get_fat>
 8010060:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010062:	697b      	ldr	r3, [r7, #20]
 8010064:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010068:	d101      	bne.n	801006e <dir_sdi+0x88>
 801006a:	2301      	movs	r3, #1
 801006c:	e032      	b.n	80100d4 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801006e:	697b      	ldr	r3, [r7, #20]
 8010070:	2b01      	cmp	r3, #1
 8010072:	d904      	bls.n	801007e <dir_sdi+0x98>
 8010074:	693b      	ldr	r3, [r7, #16]
 8010076:	699b      	ldr	r3, [r3, #24]
 8010078:	697a      	ldr	r2, [r7, #20]
 801007a:	429a      	cmp	r2, r3
 801007c:	d301      	bcc.n	8010082 <dir_sdi+0x9c>
 801007e:	2302      	movs	r3, #2
 8010080:	e028      	b.n	80100d4 <dir_sdi+0xee>
			ofs -= csz;
 8010082:	683a      	ldr	r2, [r7, #0]
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	1ad3      	subs	r3, r2, r3
 8010088:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801008a:	683a      	ldr	r2, [r7, #0]
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	429a      	cmp	r2, r3
 8010090:	d2e1      	bcs.n	8010056 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8010092:	6979      	ldr	r1, [r7, #20]
 8010094:	6938      	ldr	r0, [r7, #16]
 8010096:	f7ff fcc5 	bl	800fa24 <clust2sect>
 801009a:	4602      	mov	r2, r0
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	697a      	ldr	r2, [r7, #20]
 80100a4:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	69db      	ldr	r3, [r3, #28]
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d101      	bne.n	80100b2 <dir_sdi+0xcc>
 80100ae:	2302      	movs	r3, #2
 80100b0:	e010      	b.n	80100d4 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	69da      	ldr	r2, [r3, #28]
 80100b6:	683b      	ldr	r3, [r7, #0]
 80100b8:	0a5b      	lsrs	r3, r3, #9
 80100ba:	441a      	add	r2, r3
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80100c0:	693b      	ldr	r3, [r7, #16]
 80100c2:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80100c6:	683b      	ldr	r3, [r7, #0]
 80100c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80100cc:	441a      	add	r2, r3
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80100d2:	2300      	movs	r3, #0
}
 80100d4:	4618      	mov	r0, r3
 80100d6:	3718      	adds	r7, #24
 80100d8:	46bd      	mov	sp, r7
 80100da:	bd80      	pop	{r7, pc}

080100dc <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80100dc:	b580      	push	{r7, lr}
 80100de:	b086      	sub	sp, #24
 80100e0:	af00      	add	r7, sp, #0
 80100e2:	6078      	str	r0, [r7, #4]
 80100e4:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	695b      	ldr	r3, [r3, #20]
 80100f0:	3320      	adds	r3, #32
 80100f2:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	69db      	ldr	r3, [r3, #28]
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d003      	beq.n	8010104 <dir_next+0x28>
 80100fc:	68bb      	ldr	r3, [r7, #8]
 80100fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8010102:	d301      	bcc.n	8010108 <dir_next+0x2c>
 8010104:	2304      	movs	r3, #4
 8010106:	e0aa      	b.n	801025e <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8010108:	68bb      	ldr	r3, [r7, #8]
 801010a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801010e:	2b00      	cmp	r3, #0
 8010110:	f040 8098 	bne.w	8010244 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	69db      	ldr	r3, [r3, #28]
 8010118:	1c5a      	adds	r2, r3, #1
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	699b      	ldr	r3, [r3, #24]
 8010122:	2b00      	cmp	r3, #0
 8010124:	d10b      	bne.n	801013e <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8010126:	68bb      	ldr	r3, [r7, #8]
 8010128:	095b      	lsrs	r3, r3, #5
 801012a:	68fa      	ldr	r2, [r7, #12]
 801012c:	8912      	ldrh	r2, [r2, #8]
 801012e:	4293      	cmp	r3, r2
 8010130:	f0c0 8088 	bcc.w	8010244 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	2200      	movs	r2, #0
 8010138:	61da      	str	r2, [r3, #28]
 801013a:	2304      	movs	r3, #4
 801013c:	e08f      	b.n	801025e <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801013e:	68bb      	ldr	r3, [r7, #8]
 8010140:	0a5b      	lsrs	r3, r3, #9
 8010142:	68fa      	ldr	r2, [r7, #12]
 8010144:	8952      	ldrh	r2, [r2, #10]
 8010146:	3a01      	subs	r2, #1
 8010148:	4013      	ands	r3, r2
 801014a:	2b00      	cmp	r3, #0
 801014c:	d17a      	bne.n	8010244 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801014e:	687a      	ldr	r2, [r7, #4]
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	699b      	ldr	r3, [r3, #24]
 8010154:	4619      	mov	r1, r3
 8010156:	4610      	mov	r0, r2
 8010158:	f7ff fc83 	bl	800fa62 <get_fat>
 801015c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801015e:	697b      	ldr	r3, [r7, #20]
 8010160:	2b01      	cmp	r3, #1
 8010162:	d801      	bhi.n	8010168 <dir_next+0x8c>
 8010164:	2302      	movs	r3, #2
 8010166:	e07a      	b.n	801025e <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8010168:	697b      	ldr	r3, [r7, #20]
 801016a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801016e:	d101      	bne.n	8010174 <dir_next+0x98>
 8010170:	2301      	movs	r3, #1
 8010172:	e074      	b.n	801025e <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	699b      	ldr	r3, [r3, #24]
 8010178:	697a      	ldr	r2, [r7, #20]
 801017a:	429a      	cmp	r2, r3
 801017c:	d358      	bcc.n	8010230 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801017e:	683b      	ldr	r3, [r7, #0]
 8010180:	2b00      	cmp	r3, #0
 8010182:	d104      	bne.n	801018e <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	2200      	movs	r2, #0
 8010188:	61da      	str	r2, [r3, #28]
 801018a:	2304      	movs	r3, #4
 801018c:	e067      	b.n	801025e <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801018e:	687a      	ldr	r2, [r7, #4]
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	699b      	ldr	r3, [r3, #24]
 8010194:	4619      	mov	r1, r3
 8010196:	4610      	mov	r0, r2
 8010198:	f7ff fe59 	bl	800fe4e <create_chain>
 801019c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801019e:	697b      	ldr	r3, [r7, #20]
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d101      	bne.n	80101a8 <dir_next+0xcc>
 80101a4:	2307      	movs	r3, #7
 80101a6:	e05a      	b.n	801025e <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80101a8:	697b      	ldr	r3, [r7, #20]
 80101aa:	2b01      	cmp	r3, #1
 80101ac:	d101      	bne.n	80101b2 <dir_next+0xd6>
 80101ae:	2302      	movs	r3, #2
 80101b0:	e055      	b.n	801025e <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80101b2:	697b      	ldr	r3, [r7, #20]
 80101b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80101b8:	d101      	bne.n	80101be <dir_next+0xe2>
 80101ba:	2301      	movs	r3, #1
 80101bc:	e04f      	b.n	801025e <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80101be:	68f8      	ldr	r0, [r7, #12]
 80101c0:	f7ff fb50 	bl	800f864 <sync_window>
 80101c4:	4603      	mov	r3, r0
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d001      	beq.n	80101ce <dir_next+0xf2>
 80101ca:	2301      	movs	r3, #1
 80101cc:	e047      	b.n	801025e <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	3334      	adds	r3, #52	@ 0x34
 80101d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80101d6:	2100      	movs	r1, #0
 80101d8:	4618      	mov	r0, r3
 80101da:	f7ff f985 	bl	800f4e8 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80101de:	2300      	movs	r3, #0
 80101e0:	613b      	str	r3, [r7, #16]
 80101e2:	6979      	ldr	r1, [r7, #20]
 80101e4:	68f8      	ldr	r0, [r7, #12]
 80101e6:	f7ff fc1d 	bl	800fa24 <clust2sect>
 80101ea:	4602      	mov	r2, r0
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	631a      	str	r2, [r3, #48]	@ 0x30
 80101f0:	e012      	b.n	8010218 <dir_next+0x13c>
						fs->wflag = 1;
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	2201      	movs	r2, #1
 80101f6:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80101f8:	68f8      	ldr	r0, [r7, #12]
 80101fa:	f7ff fb33 	bl	800f864 <sync_window>
 80101fe:	4603      	mov	r3, r0
 8010200:	2b00      	cmp	r3, #0
 8010202:	d001      	beq.n	8010208 <dir_next+0x12c>
 8010204:	2301      	movs	r3, #1
 8010206:	e02a      	b.n	801025e <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010208:	693b      	ldr	r3, [r7, #16]
 801020a:	3301      	adds	r3, #1
 801020c:	613b      	str	r3, [r7, #16]
 801020e:	68fb      	ldr	r3, [r7, #12]
 8010210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010212:	1c5a      	adds	r2, r3, #1
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	631a      	str	r2, [r3, #48]	@ 0x30
 8010218:	68fb      	ldr	r3, [r7, #12]
 801021a:	895b      	ldrh	r3, [r3, #10]
 801021c:	461a      	mov	r2, r3
 801021e:	693b      	ldr	r3, [r7, #16]
 8010220:	4293      	cmp	r3, r2
 8010222:	d3e6      	bcc.n	80101f2 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010228:	693b      	ldr	r3, [r7, #16]
 801022a:	1ad2      	subs	r2, r2, r3
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	697a      	ldr	r2, [r7, #20]
 8010234:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8010236:	6979      	ldr	r1, [r7, #20]
 8010238:	68f8      	ldr	r0, [r7, #12]
 801023a:	f7ff fbf3 	bl	800fa24 <clust2sect>
 801023e:	4602      	mov	r2, r0
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	68ba      	ldr	r2, [r7, #8]
 8010248:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8010250:	68bb      	ldr	r3, [r7, #8]
 8010252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010256:	441a      	add	r2, r3
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801025c:	2300      	movs	r3, #0
}
 801025e:	4618      	mov	r0, r3
 8010260:	3718      	adds	r7, #24
 8010262:	46bd      	mov	sp, r7
 8010264:	bd80      	pop	{r7, pc}

08010266 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8010266:	b580      	push	{r7, lr}
 8010268:	b086      	sub	sp, #24
 801026a:	af00      	add	r7, sp, #0
 801026c:	6078      	str	r0, [r7, #4]
 801026e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8010276:	2100      	movs	r1, #0
 8010278:	6878      	ldr	r0, [r7, #4]
 801027a:	f7ff feb4 	bl	800ffe6 <dir_sdi>
 801027e:	4603      	mov	r3, r0
 8010280:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010282:	7dfb      	ldrb	r3, [r7, #23]
 8010284:	2b00      	cmp	r3, #0
 8010286:	d12b      	bne.n	80102e0 <dir_alloc+0x7a>
		n = 0;
 8010288:	2300      	movs	r3, #0
 801028a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	69db      	ldr	r3, [r3, #28]
 8010290:	4619      	mov	r1, r3
 8010292:	68f8      	ldr	r0, [r7, #12]
 8010294:	f7ff fb2a 	bl	800f8ec <move_window>
 8010298:	4603      	mov	r3, r0
 801029a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801029c:	7dfb      	ldrb	r3, [r7, #23]
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d11d      	bne.n	80102de <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	6a1b      	ldr	r3, [r3, #32]
 80102a6:	781b      	ldrb	r3, [r3, #0]
 80102a8:	2be5      	cmp	r3, #229	@ 0xe5
 80102aa:	d004      	beq.n	80102b6 <dir_alloc+0x50>
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	6a1b      	ldr	r3, [r3, #32]
 80102b0:	781b      	ldrb	r3, [r3, #0]
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d107      	bne.n	80102c6 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80102b6:	693b      	ldr	r3, [r7, #16]
 80102b8:	3301      	adds	r3, #1
 80102ba:	613b      	str	r3, [r7, #16]
 80102bc:	693a      	ldr	r2, [r7, #16]
 80102be:	683b      	ldr	r3, [r7, #0]
 80102c0:	429a      	cmp	r2, r3
 80102c2:	d102      	bne.n	80102ca <dir_alloc+0x64>
 80102c4:	e00c      	b.n	80102e0 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80102c6:	2300      	movs	r3, #0
 80102c8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80102ca:	2101      	movs	r1, #1
 80102cc:	6878      	ldr	r0, [r7, #4]
 80102ce:	f7ff ff05 	bl	80100dc <dir_next>
 80102d2:	4603      	mov	r3, r0
 80102d4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80102d6:	7dfb      	ldrb	r3, [r7, #23]
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d0d7      	beq.n	801028c <dir_alloc+0x26>
 80102dc:	e000      	b.n	80102e0 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80102de:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80102e0:	7dfb      	ldrb	r3, [r7, #23]
 80102e2:	2b04      	cmp	r3, #4
 80102e4:	d101      	bne.n	80102ea <dir_alloc+0x84>
 80102e6:	2307      	movs	r3, #7
 80102e8:	75fb      	strb	r3, [r7, #23]
	return res;
 80102ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80102ec:	4618      	mov	r0, r3
 80102ee:	3718      	adds	r7, #24
 80102f0:	46bd      	mov	sp, r7
 80102f2:	bd80      	pop	{r7, pc}

080102f4 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80102f4:	b580      	push	{r7, lr}
 80102f6:	b084      	sub	sp, #16
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	6078      	str	r0, [r7, #4]
 80102fc:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80102fe:	683b      	ldr	r3, [r7, #0]
 8010300:	331a      	adds	r3, #26
 8010302:	4618      	mov	r0, r3
 8010304:	f7ff f84c 	bl	800f3a0 <ld_word>
 8010308:	4603      	mov	r3, r0
 801030a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	781b      	ldrb	r3, [r3, #0]
 8010310:	2b03      	cmp	r3, #3
 8010312:	d109      	bne.n	8010328 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8010314:	683b      	ldr	r3, [r7, #0]
 8010316:	3314      	adds	r3, #20
 8010318:	4618      	mov	r0, r3
 801031a:	f7ff f841 	bl	800f3a0 <ld_word>
 801031e:	4603      	mov	r3, r0
 8010320:	041b      	lsls	r3, r3, #16
 8010322:	68fa      	ldr	r2, [r7, #12]
 8010324:	4313      	orrs	r3, r2
 8010326:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8010328:	68fb      	ldr	r3, [r7, #12]
}
 801032a:	4618      	mov	r0, r3
 801032c:	3710      	adds	r7, #16
 801032e:	46bd      	mov	sp, r7
 8010330:	bd80      	pop	{r7, pc}

08010332 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8010332:	b580      	push	{r7, lr}
 8010334:	b084      	sub	sp, #16
 8010336:	af00      	add	r7, sp, #0
 8010338:	60f8      	str	r0, [r7, #12]
 801033a:	60b9      	str	r1, [r7, #8]
 801033c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801033e:	68bb      	ldr	r3, [r7, #8]
 8010340:	331a      	adds	r3, #26
 8010342:	687a      	ldr	r2, [r7, #4]
 8010344:	b292      	uxth	r2, r2
 8010346:	4611      	mov	r1, r2
 8010348:	4618      	mov	r0, r3
 801034a:	f7ff f865 	bl	800f418 <st_word>
	if (fs->fs_type == FS_FAT32) {
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	781b      	ldrb	r3, [r3, #0]
 8010352:	2b03      	cmp	r3, #3
 8010354:	d109      	bne.n	801036a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8010356:	68bb      	ldr	r3, [r7, #8]
 8010358:	f103 0214 	add.w	r2, r3, #20
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	0c1b      	lsrs	r3, r3, #16
 8010360:	b29b      	uxth	r3, r3
 8010362:	4619      	mov	r1, r3
 8010364:	4610      	mov	r0, r2
 8010366:	f7ff f857 	bl	800f418 <st_word>
	}
}
 801036a:	bf00      	nop
 801036c:	3710      	adds	r7, #16
 801036e:	46bd      	mov	sp, r7
 8010370:	bd80      	pop	{r7, pc}

08010372 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8010372:	b580      	push	{r7, lr}
 8010374:	b086      	sub	sp, #24
 8010376:	af00      	add	r7, sp, #0
 8010378:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8010380:	2100      	movs	r1, #0
 8010382:	6878      	ldr	r0, [r7, #4]
 8010384:	f7ff fe2f 	bl	800ffe6 <dir_sdi>
 8010388:	4603      	mov	r3, r0
 801038a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801038c:	7dfb      	ldrb	r3, [r7, #23]
 801038e:	2b00      	cmp	r3, #0
 8010390:	d001      	beq.n	8010396 <dir_find+0x24>
 8010392:	7dfb      	ldrb	r3, [r7, #23]
 8010394:	e03e      	b.n	8010414 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	69db      	ldr	r3, [r3, #28]
 801039a:	4619      	mov	r1, r3
 801039c:	6938      	ldr	r0, [r7, #16]
 801039e:	f7ff faa5 	bl	800f8ec <move_window>
 80103a2:	4603      	mov	r3, r0
 80103a4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80103a6:	7dfb      	ldrb	r3, [r7, #23]
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d12f      	bne.n	801040c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	6a1b      	ldr	r3, [r3, #32]
 80103b0:	781b      	ldrb	r3, [r3, #0]
 80103b2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80103b4:	7bfb      	ldrb	r3, [r7, #15]
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d102      	bne.n	80103c0 <dir_find+0x4e>
 80103ba:	2304      	movs	r3, #4
 80103bc:	75fb      	strb	r3, [r7, #23]
 80103be:	e028      	b.n	8010412 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	6a1b      	ldr	r3, [r3, #32]
 80103c4:	330b      	adds	r3, #11
 80103c6:	781b      	ldrb	r3, [r3, #0]
 80103c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80103cc:	b2da      	uxtb	r2, r3
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	6a1b      	ldr	r3, [r3, #32]
 80103d6:	330b      	adds	r3, #11
 80103d8:	781b      	ldrb	r3, [r3, #0]
 80103da:	f003 0308 	and.w	r3, r3, #8
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d10a      	bne.n	80103f8 <dir_find+0x86>
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	6a18      	ldr	r0, [r3, #32]
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	3324      	adds	r3, #36	@ 0x24
 80103ea:	220b      	movs	r2, #11
 80103ec:	4619      	mov	r1, r3
 80103ee:	f7ff f896 	bl	800f51e <mem_cmp>
 80103f2:	4603      	mov	r3, r0
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d00b      	beq.n	8010410 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80103f8:	2100      	movs	r1, #0
 80103fa:	6878      	ldr	r0, [r7, #4]
 80103fc:	f7ff fe6e 	bl	80100dc <dir_next>
 8010400:	4603      	mov	r3, r0
 8010402:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8010404:	7dfb      	ldrb	r3, [r7, #23]
 8010406:	2b00      	cmp	r3, #0
 8010408:	d0c5      	beq.n	8010396 <dir_find+0x24>
 801040a:	e002      	b.n	8010412 <dir_find+0xa0>
		if (res != FR_OK) break;
 801040c:	bf00      	nop
 801040e:	e000      	b.n	8010412 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8010410:	bf00      	nop

	return res;
 8010412:	7dfb      	ldrb	r3, [r7, #23]
}
 8010414:	4618      	mov	r0, r3
 8010416:	3718      	adds	r7, #24
 8010418:	46bd      	mov	sp, r7
 801041a:	bd80      	pop	{r7, pc}

0801041c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801041c:	b580      	push	{r7, lr}
 801041e:	b084      	sub	sp, #16
 8010420:	af00      	add	r7, sp, #0
 8010422:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 801042a:	2101      	movs	r1, #1
 801042c:	6878      	ldr	r0, [r7, #4]
 801042e:	f7ff ff1a 	bl	8010266 <dir_alloc>
 8010432:	4603      	mov	r3, r0
 8010434:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8010436:	7bfb      	ldrb	r3, [r7, #15]
 8010438:	2b00      	cmp	r3, #0
 801043a:	d11c      	bne.n	8010476 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	69db      	ldr	r3, [r3, #28]
 8010440:	4619      	mov	r1, r3
 8010442:	68b8      	ldr	r0, [r7, #8]
 8010444:	f7ff fa52 	bl	800f8ec <move_window>
 8010448:	4603      	mov	r3, r0
 801044a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801044c:	7bfb      	ldrb	r3, [r7, #15]
 801044e:	2b00      	cmp	r3, #0
 8010450:	d111      	bne.n	8010476 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	6a1b      	ldr	r3, [r3, #32]
 8010456:	2220      	movs	r2, #32
 8010458:	2100      	movs	r1, #0
 801045a:	4618      	mov	r0, r3
 801045c:	f7ff f844 	bl	800f4e8 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	6a18      	ldr	r0, [r3, #32]
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	3324      	adds	r3, #36	@ 0x24
 8010468:	220b      	movs	r2, #11
 801046a:	4619      	mov	r1, r3
 801046c:	f7ff f81b 	bl	800f4a6 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8010470:	68bb      	ldr	r3, [r7, #8]
 8010472:	2201      	movs	r2, #1
 8010474:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8010476:	7bfb      	ldrb	r3, [r7, #15]
}
 8010478:	4618      	mov	r0, r3
 801047a:	3710      	adds	r7, #16
 801047c:	46bd      	mov	sp, r7
 801047e:	bd80      	pop	{r7, pc}

08010480 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8010480:	b580      	push	{r7, lr}
 8010482:	b088      	sub	sp, #32
 8010484:	af00      	add	r7, sp, #0
 8010486:	6078      	str	r0, [r7, #4]
 8010488:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 801048a:	683b      	ldr	r3, [r7, #0]
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	60fb      	str	r3, [r7, #12]
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	3324      	adds	r3, #36	@ 0x24
 8010494:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8010496:	220b      	movs	r2, #11
 8010498:	2120      	movs	r1, #32
 801049a:	68b8      	ldr	r0, [r7, #8]
 801049c:	f7ff f824 	bl	800f4e8 <mem_set>
	si = i = 0; ni = 8;
 80104a0:	2300      	movs	r3, #0
 80104a2:	613b      	str	r3, [r7, #16]
 80104a4:	693b      	ldr	r3, [r7, #16]
 80104a6:	61fb      	str	r3, [r7, #28]
 80104a8:	2308      	movs	r3, #8
 80104aa:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80104ac:	69fb      	ldr	r3, [r7, #28]
 80104ae:	1c5a      	adds	r2, r3, #1
 80104b0:	61fa      	str	r2, [r7, #28]
 80104b2:	68fa      	ldr	r2, [r7, #12]
 80104b4:	4413      	add	r3, r2
 80104b6:	781b      	ldrb	r3, [r3, #0]
 80104b8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80104ba:	7efb      	ldrb	r3, [r7, #27]
 80104bc:	2b20      	cmp	r3, #32
 80104be:	d94e      	bls.n	801055e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80104c0:	7efb      	ldrb	r3, [r7, #27]
 80104c2:	2b2f      	cmp	r3, #47	@ 0x2f
 80104c4:	d006      	beq.n	80104d4 <create_name+0x54>
 80104c6:	7efb      	ldrb	r3, [r7, #27]
 80104c8:	2b5c      	cmp	r3, #92	@ 0x5c
 80104ca:	d110      	bne.n	80104ee <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80104cc:	e002      	b.n	80104d4 <create_name+0x54>
 80104ce:	69fb      	ldr	r3, [r7, #28]
 80104d0:	3301      	adds	r3, #1
 80104d2:	61fb      	str	r3, [r7, #28]
 80104d4:	68fa      	ldr	r2, [r7, #12]
 80104d6:	69fb      	ldr	r3, [r7, #28]
 80104d8:	4413      	add	r3, r2
 80104da:	781b      	ldrb	r3, [r3, #0]
 80104dc:	2b2f      	cmp	r3, #47	@ 0x2f
 80104de:	d0f6      	beq.n	80104ce <create_name+0x4e>
 80104e0:	68fa      	ldr	r2, [r7, #12]
 80104e2:	69fb      	ldr	r3, [r7, #28]
 80104e4:	4413      	add	r3, r2
 80104e6:	781b      	ldrb	r3, [r3, #0]
 80104e8:	2b5c      	cmp	r3, #92	@ 0x5c
 80104ea:	d0f0      	beq.n	80104ce <create_name+0x4e>
			break;
 80104ec:	e038      	b.n	8010560 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80104ee:	7efb      	ldrb	r3, [r7, #27]
 80104f0:	2b2e      	cmp	r3, #46	@ 0x2e
 80104f2:	d003      	beq.n	80104fc <create_name+0x7c>
 80104f4:	693a      	ldr	r2, [r7, #16]
 80104f6:	697b      	ldr	r3, [r7, #20]
 80104f8:	429a      	cmp	r2, r3
 80104fa:	d30c      	bcc.n	8010516 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80104fc:	697b      	ldr	r3, [r7, #20]
 80104fe:	2b0b      	cmp	r3, #11
 8010500:	d002      	beq.n	8010508 <create_name+0x88>
 8010502:	7efb      	ldrb	r3, [r7, #27]
 8010504:	2b2e      	cmp	r3, #46	@ 0x2e
 8010506:	d001      	beq.n	801050c <create_name+0x8c>
 8010508:	2306      	movs	r3, #6
 801050a:	e044      	b.n	8010596 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 801050c:	2308      	movs	r3, #8
 801050e:	613b      	str	r3, [r7, #16]
 8010510:	230b      	movs	r3, #11
 8010512:	617b      	str	r3, [r7, #20]
			continue;
 8010514:	e022      	b.n	801055c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8010516:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801051a:	2b00      	cmp	r3, #0
 801051c:	da04      	bge.n	8010528 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 801051e:	7efb      	ldrb	r3, [r7, #27]
 8010520:	3b80      	subs	r3, #128	@ 0x80
 8010522:	4a1f      	ldr	r2, [pc, #124]	@ (80105a0 <create_name+0x120>)
 8010524:	5cd3      	ldrb	r3, [r2, r3]
 8010526:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8010528:	7efb      	ldrb	r3, [r7, #27]
 801052a:	4619      	mov	r1, r3
 801052c:	481d      	ldr	r0, [pc, #116]	@ (80105a4 <create_name+0x124>)
 801052e:	f7ff f81d 	bl	800f56c <chk_chr>
 8010532:	4603      	mov	r3, r0
 8010534:	2b00      	cmp	r3, #0
 8010536:	d001      	beq.n	801053c <create_name+0xbc>
 8010538:	2306      	movs	r3, #6
 801053a:	e02c      	b.n	8010596 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 801053c:	7efb      	ldrb	r3, [r7, #27]
 801053e:	2b60      	cmp	r3, #96	@ 0x60
 8010540:	d905      	bls.n	801054e <create_name+0xce>
 8010542:	7efb      	ldrb	r3, [r7, #27]
 8010544:	2b7a      	cmp	r3, #122	@ 0x7a
 8010546:	d802      	bhi.n	801054e <create_name+0xce>
 8010548:	7efb      	ldrb	r3, [r7, #27]
 801054a:	3b20      	subs	r3, #32
 801054c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 801054e:	693b      	ldr	r3, [r7, #16]
 8010550:	1c5a      	adds	r2, r3, #1
 8010552:	613a      	str	r2, [r7, #16]
 8010554:	68ba      	ldr	r2, [r7, #8]
 8010556:	4413      	add	r3, r2
 8010558:	7efa      	ldrb	r2, [r7, #27]
 801055a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 801055c:	e7a6      	b.n	80104ac <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 801055e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8010560:	68fa      	ldr	r2, [r7, #12]
 8010562:	69fb      	ldr	r3, [r7, #28]
 8010564:	441a      	add	r2, r3
 8010566:	683b      	ldr	r3, [r7, #0]
 8010568:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 801056a:	693b      	ldr	r3, [r7, #16]
 801056c:	2b00      	cmp	r3, #0
 801056e:	d101      	bne.n	8010574 <create_name+0xf4>
 8010570:	2306      	movs	r3, #6
 8010572:	e010      	b.n	8010596 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8010574:	68bb      	ldr	r3, [r7, #8]
 8010576:	781b      	ldrb	r3, [r3, #0]
 8010578:	2be5      	cmp	r3, #229	@ 0xe5
 801057a:	d102      	bne.n	8010582 <create_name+0x102>
 801057c:	68bb      	ldr	r3, [r7, #8]
 801057e:	2205      	movs	r2, #5
 8010580:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8010582:	7efb      	ldrb	r3, [r7, #27]
 8010584:	2b20      	cmp	r3, #32
 8010586:	d801      	bhi.n	801058c <create_name+0x10c>
 8010588:	2204      	movs	r2, #4
 801058a:	e000      	b.n	801058e <create_name+0x10e>
 801058c:	2200      	movs	r2, #0
 801058e:	68bb      	ldr	r3, [r7, #8]
 8010590:	330b      	adds	r3, #11
 8010592:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8010594:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8010596:	4618      	mov	r0, r3
 8010598:	3720      	adds	r7, #32
 801059a:	46bd      	mov	sp, r7
 801059c:	bd80      	pop	{r7, pc}
 801059e:	bf00      	nop
 80105a0:	08017d28 	.word	0x08017d28
 80105a4:	08017b48 	.word	0x08017b48

080105a8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80105a8:	b580      	push	{r7, lr}
 80105aa:	b086      	sub	sp, #24
 80105ac:	af00      	add	r7, sp, #0
 80105ae:	6078      	str	r0, [r7, #4]
 80105b0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80105b6:	693b      	ldr	r3, [r7, #16]
 80105b8:	681b      	ldr	r3, [r3, #0]
 80105ba:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80105bc:	e002      	b.n	80105c4 <follow_path+0x1c>
 80105be:	683b      	ldr	r3, [r7, #0]
 80105c0:	3301      	adds	r3, #1
 80105c2:	603b      	str	r3, [r7, #0]
 80105c4:	683b      	ldr	r3, [r7, #0]
 80105c6:	781b      	ldrb	r3, [r3, #0]
 80105c8:	2b2f      	cmp	r3, #47	@ 0x2f
 80105ca:	d0f8      	beq.n	80105be <follow_path+0x16>
 80105cc:	683b      	ldr	r3, [r7, #0]
 80105ce:	781b      	ldrb	r3, [r3, #0]
 80105d0:	2b5c      	cmp	r3, #92	@ 0x5c
 80105d2:	d0f4      	beq.n	80105be <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80105d4:	693b      	ldr	r3, [r7, #16]
 80105d6:	2200      	movs	r2, #0
 80105d8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80105da:	683b      	ldr	r3, [r7, #0]
 80105dc:	781b      	ldrb	r3, [r3, #0]
 80105de:	2b1f      	cmp	r3, #31
 80105e0:	d80a      	bhi.n	80105f8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	2280      	movs	r2, #128	@ 0x80
 80105e6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80105ea:	2100      	movs	r1, #0
 80105ec:	6878      	ldr	r0, [r7, #4]
 80105ee:	f7ff fcfa 	bl	800ffe6 <dir_sdi>
 80105f2:	4603      	mov	r3, r0
 80105f4:	75fb      	strb	r3, [r7, #23]
 80105f6:	e043      	b.n	8010680 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80105f8:	463b      	mov	r3, r7
 80105fa:	4619      	mov	r1, r3
 80105fc:	6878      	ldr	r0, [r7, #4]
 80105fe:	f7ff ff3f 	bl	8010480 <create_name>
 8010602:	4603      	mov	r3, r0
 8010604:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8010606:	7dfb      	ldrb	r3, [r7, #23]
 8010608:	2b00      	cmp	r3, #0
 801060a:	d134      	bne.n	8010676 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 801060c:	6878      	ldr	r0, [r7, #4]
 801060e:	f7ff feb0 	bl	8010372 <dir_find>
 8010612:	4603      	mov	r3, r0
 8010614:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801061c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801061e:	7dfb      	ldrb	r3, [r7, #23]
 8010620:	2b00      	cmp	r3, #0
 8010622:	d00a      	beq.n	801063a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8010624:	7dfb      	ldrb	r3, [r7, #23]
 8010626:	2b04      	cmp	r3, #4
 8010628:	d127      	bne.n	801067a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801062a:	7afb      	ldrb	r3, [r7, #11]
 801062c:	f003 0304 	and.w	r3, r3, #4
 8010630:	2b00      	cmp	r3, #0
 8010632:	d122      	bne.n	801067a <follow_path+0xd2>
 8010634:	2305      	movs	r3, #5
 8010636:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8010638:	e01f      	b.n	801067a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801063a:	7afb      	ldrb	r3, [r7, #11]
 801063c:	f003 0304 	and.w	r3, r3, #4
 8010640:	2b00      	cmp	r3, #0
 8010642:	d11c      	bne.n	801067e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8010644:	693b      	ldr	r3, [r7, #16]
 8010646:	799b      	ldrb	r3, [r3, #6]
 8010648:	f003 0310 	and.w	r3, r3, #16
 801064c:	2b00      	cmp	r3, #0
 801064e:	d102      	bne.n	8010656 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8010650:	2305      	movs	r3, #5
 8010652:	75fb      	strb	r3, [r7, #23]
 8010654:	e014      	b.n	8010680 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	695b      	ldr	r3, [r3, #20]
 8010660:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010664:	4413      	add	r3, r2
 8010666:	4619      	mov	r1, r3
 8010668:	68f8      	ldr	r0, [r7, #12]
 801066a:	f7ff fe43 	bl	80102f4 <ld_clust>
 801066e:	4602      	mov	r2, r0
 8010670:	693b      	ldr	r3, [r7, #16]
 8010672:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010674:	e7c0      	b.n	80105f8 <follow_path+0x50>
			if (res != FR_OK) break;
 8010676:	bf00      	nop
 8010678:	e002      	b.n	8010680 <follow_path+0xd8>
				break;
 801067a:	bf00      	nop
 801067c:	e000      	b.n	8010680 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801067e:	bf00      	nop
			}
		}
	}

	return res;
 8010680:	7dfb      	ldrb	r3, [r7, #23]
}
 8010682:	4618      	mov	r0, r3
 8010684:	3718      	adds	r7, #24
 8010686:	46bd      	mov	sp, r7
 8010688:	bd80      	pop	{r7, pc}

0801068a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801068a:	b480      	push	{r7}
 801068c:	b087      	sub	sp, #28
 801068e:	af00      	add	r7, sp, #0
 8010690:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8010692:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010696:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	2b00      	cmp	r3, #0
 801069e:	d031      	beq.n	8010704 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	617b      	str	r3, [r7, #20]
 80106a6:	e002      	b.n	80106ae <get_ldnumber+0x24>
 80106a8:	697b      	ldr	r3, [r7, #20]
 80106aa:	3301      	adds	r3, #1
 80106ac:	617b      	str	r3, [r7, #20]
 80106ae:	697b      	ldr	r3, [r7, #20]
 80106b0:	781b      	ldrb	r3, [r3, #0]
 80106b2:	2b20      	cmp	r3, #32
 80106b4:	d903      	bls.n	80106be <get_ldnumber+0x34>
 80106b6:	697b      	ldr	r3, [r7, #20]
 80106b8:	781b      	ldrb	r3, [r3, #0]
 80106ba:	2b3a      	cmp	r3, #58	@ 0x3a
 80106bc:	d1f4      	bne.n	80106a8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80106be:	697b      	ldr	r3, [r7, #20]
 80106c0:	781b      	ldrb	r3, [r3, #0]
 80106c2:	2b3a      	cmp	r3, #58	@ 0x3a
 80106c4:	d11c      	bne.n	8010700 <get_ldnumber+0x76>
			tp = *path;
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	681b      	ldr	r3, [r3, #0]
 80106ca:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	1c5a      	adds	r2, r3, #1
 80106d0:	60fa      	str	r2, [r7, #12]
 80106d2:	781b      	ldrb	r3, [r3, #0]
 80106d4:	3b30      	subs	r3, #48	@ 0x30
 80106d6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80106d8:	68bb      	ldr	r3, [r7, #8]
 80106da:	2b09      	cmp	r3, #9
 80106dc:	d80e      	bhi.n	80106fc <get_ldnumber+0x72>
 80106de:	68fa      	ldr	r2, [r7, #12]
 80106e0:	697b      	ldr	r3, [r7, #20]
 80106e2:	429a      	cmp	r2, r3
 80106e4:	d10a      	bne.n	80106fc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80106e6:	68bb      	ldr	r3, [r7, #8]
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d107      	bne.n	80106fc <get_ldnumber+0x72>
					vol = (int)i;
 80106ec:	68bb      	ldr	r3, [r7, #8]
 80106ee:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80106f0:	697b      	ldr	r3, [r7, #20]
 80106f2:	3301      	adds	r3, #1
 80106f4:	617b      	str	r3, [r7, #20]
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	697a      	ldr	r2, [r7, #20]
 80106fa:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80106fc:	693b      	ldr	r3, [r7, #16]
 80106fe:	e002      	b.n	8010706 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8010700:	2300      	movs	r3, #0
 8010702:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8010704:	693b      	ldr	r3, [r7, #16]
}
 8010706:	4618      	mov	r0, r3
 8010708:	371c      	adds	r7, #28
 801070a:	46bd      	mov	sp, r7
 801070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010710:	4770      	bx	lr
	...

08010714 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8010714:	b580      	push	{r7, lr}
 8010716:	b082      	sub	sp, #8
 8010718:	af00      	add	r7, sp, #0
 801071a:	6078      	str	r0, [r7, #4]
 801071c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	2200      	movs	r2, #0
 8010722:	70da      	strb	r2, [r3, #3]
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801072a:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801072c:	6839      	ldr	r1, [r7, #0]
 801072e:	6878      	ldr	r0, [r7, #4]
 8010730:	f7ff f8dc 	bl	800f8ec <move_window>
 8010734:	4603      	mov	r3, r0
 8010736:	2b00      	cmp	r3, #0
 8010738:	d001      	beq.n	801073e <check_fs+0x2a>
 801073a:	2304      	movs	r3, #4
 801073c:	e038      	b.n	80107b0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	3334      	adds	r3, #52	@ 0x34
 8010742:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8010746:	4618      	mov	r0, r3
 8010748:	f7fe fe2a 	bl	800f3a0 <ld_word>
 801074c:	4603      	mov	r3, r0
 801074e:	461a      	mov	r2, r3
 8010750:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8010754:	429a      	cmp	r2, r3
 8010756:	d001      	beq.n	801075c <check_fs+0x48>
 8010758:	2303      	movs	r3, #3
 801075a:	e029      	b.n	80107b0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8010762:	2be9      	cmp	r3, #233	@ 0xe9
 8010764:	d009      	beq.n	801077a <check_fs+0x66>
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801076c:	2beb      	cmp	r3, #235	@ 0xeb
 801076e:	d11e      	bne.n	80107ae <check_fs+0x9a>
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8010776:	2b90      	cmp	r3, #144	@ 0x90
 8010778:	d119      	bne.n	80107ae <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	3334      	adds	r3, #52	@ 0x34
 801077e:	3336      	adds	r3, #54	@ 0x36
 8010780:	4618      	mov	r0, r3
 8010782:	f7fe fe26 	bl	800f3d2 <ld_dword>
 8010786:	4603      	mov	r3, r0
 8010788:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 801078c:	4a0a      	ldr	r2, [pc, #40]	@ (80107b8 <check_fs+0xa4>)
 801078e:	4293      	cmp	r3, r2
 8010790:	d101      	bne.n	8010796 <check_fs+0x82>
 8010792:	2300      	movs	r3, #0
 8010794:	e00c      	b.n	80107b0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	3334      	adds	r3, #52	@ 0x34
 801079a:	3352      	adds	r3, #82	@ 0x52
 801079c:	4618      	mov	r0, r3
 801079e:	f7fe fe18 	bl	800f3d2 <ld_dword>
 80107a2:	4603      	mov	r3, r0
 80107a4:	4a05      	ldr	r2, [pc, #20]	@ (80107bc <check_fs+0xa8>)
 80107a6:	4293      	cmp	r3, r2
 80107a8:	d101      	bne.n	80107ae <check_fs+0x9a>
 80107aa:	2300      	movs	r3, #0
 80107ac:	e000      	b.n	80107b0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80107ae:	2302      	movs	r3, #2
}
 80107b0:	4618      	mov	r0, r3
 80107b2:	3708      	adds	r7, #8
 80107b4:	46bd      	mov	sp, r7
 80107b6:	bd80      	pop	{r7, pc}
 80107b8:	00544146 	.word	0x00544146
 80107bc:	33544146 	.word	0x33544146

080107c0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80107c0:	b580      	push	{r7, lr}
 80107c2:	b096      	sub	sp, #88	@ 0x58
 80107c4:	af00      	add	r7, sp, #0
 80107c6:	60f8      	str	r0, [r7, #12]
 80107c8:	60b9      	str	r1, [r7, #8]
 80107ca:	4613      	mov	r3, r2
 80107cc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80107ce:	68bb      	ldr	r3, [r7, #8]
 80107d0:	2200      	movs	r2, #0
 80107d2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80107d4:	68f8      	ldr	r0, [r7, #12]
 80107d6:	f7ff ff58 	bl	801068a <get_ldnumber>
 80107da:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80107dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80107de:	2b00      	cmp	r3, #0
 80107e0:	da01      	bge.n	80107e6 <find_volume+0x26>
 80107e2:	230b      	movs	r3, #11
 80107e4:	e235      	b.n	8010c52 <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80107e6:	4aa5      	ldr	r2, [pc, #660]	@ (8010a7c <find_volume+0x2bc>)
 80107e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80107ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80107ee:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80107f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d101      	bne.n	80107fa <find_volume+0x3a>
 80107f6:	230c      	movs	r3, #12
 80107f8:	e22b      	b.n	8010c52 <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 80107fa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80107fc:	f7fe fed1 	bl	800f5a2 <lock_fs>
 8010800:	4603      	mov	r3, r0
 8010802:	2b00      	cmp	r3, #0
 8010804:	d101      	bne.n	801080a <find_volume+0x4a>
 8010806:	230f      	movs	r3, #15
 8010808:	e223      	b.n	8010c52 <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 801080a:	68bb      	ldr	r3, [r7, #8]
 801080c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801080e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8010810:	79fb      	ldrb	r3, [r7, #7]
 8010812:	f023 0301 	bic.w	r3, r3, #1
 8010816:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8010818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801081a:	781b      	ldrb	r3, [r3, #0]
 801081c:	2b00      	cmp	r3, #0
 801081e:	d01a      	beq.n	8010856 <find_volume+0x96>
		stat = disk_status(fs->drv);
 8010820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010822:	785b      	ldrb	r3, [r3, #1]
 8010824:	4618      	mov	r0, r3
 8010826:	f7fe fd1d 	bl	800f264 <disk_status>
 801082a:	4603      	mov	r3, r0
 801082c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8010830:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010834:	f003 0301 	and.w	r3, r3, #1
 8010838:	2b00      	cmp	r3, #0
 801083a:	d10c      	bne.n	8010856 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801083c:	79fb      	ldrb	r3, [r7, #7]
 801083e:	2b00      	cmp	r3, #0
 8010840:	d007      	beq.n	8010852 <find_volume+0x92>
 8010842:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010846:	f003 0304 	and.w	r3, r3, #4
 801084a:	2b00      	cmp	r3, #0
 801084c:	d001      	beq.n	8010852 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 801084e:	230a      	movs	r3, #10
 8010850:	e1ff      	b.n	8010c52 <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 8010852:	2300      	movs	r3, #0
 8010854:	e1fd      	b.n	8010c52 <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8010856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010858:	2200      	movs	r2, #0
 801085a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801085c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801085e:	b2da      	uxtb	r2, r3
 8010860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010862:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8010864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010866:	785b      	ldrb	r3, [r3, #1]
 8010868:	4618      	mov	r0, r3
 801086a:	f7fe fd15 	bl	800f298 <disk_initialize>
 801086e:	4603      	mov	r3, r0
 8010870:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8010874:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010878:	f003 0301 	and.w	r3, r3, #1
 801087c:	2b00      	cmp	r3, #0
 801087e:	d001      	beq.n	8010884 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8010880:	2303      	movs	r3, #3
 8010882:	e1e6      	b.n	8010c52 <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8010884:	79fb      	ldrb	r3, [r7, #7]
 8010886:	2b00      	cmp	r3, #0
 8010888:	d007      	beq.n	801089a <find_volume+0xda>
 801088a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801088e:	f003 0304 	and.w	r3, r3, #4
 8010892:	2b00      	cmp	r3, #0
 8010894:	d001      	beq.n	801089a <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8010896:	230a      	movs	r3, #10
 8010898:	e1db      	b.n	8010c52 <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801089a:	2300      	movs	r3, #0
 801089c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801089e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80108a0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80108a2:	f7ff ff37 	bl	8010714 <check_fs>
 80108a6:	4603      	mov	r3, r0
 80108a8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80108ac:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80108b0:	2b02      	cmp	r3, #2
 80108b2:	d149      	bne.n	8010948 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80108b4:	2300      	movs	r3, #0
 80108b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80108b8:	e01e      	b.n	80108f8 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80108ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108bc:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80108c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80108c2:	011b      	lsls	r3, r3, #4
 80108c4:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80108c8:	4413      	add	r3, r2
 80108ca:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80108cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108ce:	3304      	adds	r3, #4
 80108d0:	781b      	ldrb	r3, [r3, #0]
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d006      	beq.n	80108e4 <find_volume+0x124>
 80108d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108d8:	3308      	adds	r3, #8
 80108da:	4618      	mov	r0, r3
 80108dc:	f7fe fd79 	bl	800f3d2 <ld_dword>
 80108e0:	4602      	mov	r2, r0
 80108e2:	e000      	b.n	80108e6 <find_volume+0x126>
 80108e4:	2200      	movs	r2, #0
 80108e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80108e8:	009b      	lsls	r3, r3, #2
 80108ea:	3358      	adds	r3, #88	@ 0x58
 80108ec:	443b      	add	r3, r7
 80108ee:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80108f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80108f4:	3301      	adds	r3, #1
 80108f6:	643b      	str	r3, [r7, #64]	@ 0x40
 80108f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80108fa:	2b03      	cmp	r3, #3
 80108fc:	d9dd      	bls.n	80108ba <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80108fe:	2300      	movs	r3, #0
 8010900:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8010902:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010904:	2b00      	cmp	r3, #0
 8010906:	d002      	beq.n	801090e <find_volume+0x14e>
 8010908:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801090a:	3b01      	subs	r3, #1
 801090c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801090e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010910:	009b      	lsls	r3, r3, #2
 8010912:	3358      	adds	r3, #88	@ 0x58
 8010914:	443b      	add	r3, r7
 8010916:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801091a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801091c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801091e:	2b00      	cmp	r3, #0
 8010920:	d005      	beq.n	801092e <find_volume+0x16e>
 8010922:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010924:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010926:	f7ff fef5 	bl	8010714 <check_fs>
 801092a:	4603      	mov	r3, r0
 801092c:	e000      	b.n	8010930 <find_volume+0x170>
 801092e:	2303      	movs	r3, #3
 8010930:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8010934:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010938:	2b01      	cmp	r3, #1
 801093a:	d905      	bls.n	8010948 <find_volume+0x188>
 801093c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801093e:	3301      	adds	r3, #1
 8010940:	643b      	str	r3, [r7, #64]	@ 0x40
 8010942:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010944:	2b03      	cmp	r3, #3
 8010946:	d9e2      	bls.n	801090e <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8010948:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801094c:	2b04      	cmp	r3, #4
 801094e:	d101      	bne.n	8010954 <find_volume+0x194>
 8010950:	2301      	movs	r3, #1
 8010952:	e17e      	b.n	8010c52 <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8010954:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010958:	2b01      	cmp	r3, #1
 801095a:	d901      	bls.n	8010960 <find_volume+0x1a0>
 801095c:	230d      	movs	r3, #13
 801095e:	e178      	b.n	8010c52 <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8010960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010962:	3334      	adds	r3, #52	@ 0x34
 8010964:	330b      	adds	r3, #11
 8010966:	4618      	mov	r0, r3
 8010968:	f7fe fd1a 	bl	800f3a0 <ld_word>
 801096c:	4603      	mov	r3, r0
 801096e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010972:	d001      	beq.n	8010978 <find_volume+0x1b8>
 8010974:	230d      	movs	r3, #13
 8010976:	e16c      	b.n	8010c52 <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8010978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801097a:	3334      	adds	r3, #52	@ 0x34
 801097c:	3316      	adds	r3, #22
 801097e:	4618      	mov	r0, r3
 8010980:	f7fe fd0e 	bl	800f3a0 <ld_word>
 8010984:	4603      	mov	r3, r0
 8010986:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8010988:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801098a:	2b00      	cmp	r3, #0
 801098c:	d106      	bne.n	801099c <find_volume+0x1dc>
 801098e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010990:	3334      	adds	r3, #52	@ 0x34
 8010992:	3324      	adds	r3, #36	@ 0x24
 8010994:	4618      	mov	r0, r3
 8010996:	f7fe fd1c 	bl	800f3d2 <ld_dword>
 801099a:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 801099c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801099e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80109a0:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80109a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109a4:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80109a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109aa:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80109ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109ae:	789b      	ldrb	r3, [r3, #2]
 80109b0:	2b01      	cmp	r3, #1
 80109b2:	d005      	beq.n	80109c0 <find_volume+0x200>
 80109b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109b6:	789b      	ldrb	r3, [r3, #2]
 80109b8:	2b02      	cmp	r3, #2
 80109ba:	d001      	beq.n	80109c0 <find_volume+0x200>
 80109bc:	230d      	movs	r3, #13
 80109be:	e148      	b.n	8010c52 <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80109c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109c2:	789b      	ldrb	r3, [r3, #2]
 80109c4:	461a      	mov	r2, r3
 80109c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80109c8:	fb02 f303 	mul.w	r3, r2, r3
 80109cc:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80109ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80109d4:	461a      	mov	r2, r3
 80109d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109d8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80109da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109dc:	895b      	ldrh	r3, [r3, #10]
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d008      	beq.n	80109f4 <find_volume+0x234>
 80109e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109e4:	895b      	ldrh	r3, [r3, #10]
 80109e6:	461a      	mov	r2, r3
 80109e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109ea:	895b      	ldrh	r3, [r3, #10]
 80109ec:	3b01      	subs	r3, #1
 80109ee:	4013      	ands	r3, r2
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d001      	beq.n	80109f8 <find_volume+0x238>
 80109f4:	230d      	movs	r3, #13
 80109f6:	e12c      	b.n	8010c52 <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80109f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109fa:	3334      	adds	r3, #52	@ 0x34
 80109fc:	3311      	adds	r3, #17
 80109fe:	4618      	mov	r0, r3
 8010a00:	f7fe fcce 	bl	800f3a0 <ld_word>
 8010a04:	4603      	mov	r3, r0
 8010a06:	461a      	mov	r2, r3
 8010a08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a0a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8010a0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a0e:	891b      	ldrh	r3, [r3, #8]
 8010a10:	f003 030f 	and.w	r3, r3, #15
 8010a14:	b29b      	uxth	r3, r3
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d001      	beq.n	8010a1e <find_volume+0x25e>
 8010a1a:	230d      	movs	r3, #13
 8010a1c:	e119      	b.n	8010c52 <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8010a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a20:	3334      	adds	r3, #52	@ 0x34
 8010a22:	3313      	adds	r3, #19
 8010a24:	4618      	mov	r0, r3
 8010a26:	f7fe fcbb 	bl	800f3a0 <ld_word>
 8010a2a:	4603      	mov	r3, r0
 8010a2c:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8010a2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d106      	bne.n	8010a42 <find_volume+0x282>
 8010a34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a36:	3334      	adds	r3, #52	@ 0x34
 8010a38:	3320      	adds	r3, #32
 8010a3a:	4618      	mov	r0, r3
 8010a3c:	f7fe fcc9 	bl	800f3d2 <ld_dword>
 8010a40:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8010a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a44:	3334      	adds	r3, #52	@ 0x34
 8010a46:	330e      	adds	r3, #14
 8010a48:	4618      	mov	r0, r3
 8010a4a:	f7fe fca9 	bl	800f3a0 <ld_word>
 8010a4e:	4603      	mov	r3, r0
 8010a50:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8010a52:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d101      	bne.n	8010a5c <find_volume+0x29c>
 8010a58:	230d      	movs	r3, #13
 8010a5a:	e0fa      	b.n	8010c52 <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8010a5c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8010a5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010a60:	4413      	add	r3, r2
 8010a62:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010a64:	8912      	ldrh	r2, [r2, #8]
 8010a66:	0912      	lsrs	r2, r2, #4
 8010a68:	b292      	uxth	r2, r2
 8010a6a:	4413      	add	r3, r2
 8010a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8010a6e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a72:	429a      	cmp	r2, r3
 8010a74:	d204      	bcs.n	8010a80 <find_volume+0x2c0>
 8010a76:	230d      	movs	r3, #13
 8010a78:	e0eb      	b.n	8010c52 <find_volume+0x492>
 8010a7a:	bf00      	nop
 8010a7c:	24000a38 	.word	0x24000a38
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8010a80:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a84:	1ad3      	subs	r3, r2, r3
 8010a86:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010a88:	8952      	ldrh	r2, [r2, #10]
 8010a8a:	fbb3 f3f2 	udiv	r3, r3, r2
 8010a8e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8010a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d101      	bne.n	8010a9a <find_volume+0x2da>
 8010a96:	230d      	movs	r3, #13
 8010a98:	e0db      	b.n	8010c52 <find_volume+0x492>
		fmt = FS_FAT32;
 8010a9a:	2303      	movs	r3, #3
 8010a9c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8010aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010aa2:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8010aa6:	4293      	cmp	r3, r2
 8010aa8:	d802      	bhi.n	8010ab0 <find_volume+0x2f0>
 8010aaa:	2302      	movs	r3, #2
 8010aac:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8010ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ab2:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8010ab6:	4293      	cmp	r3, r2
 8010ab8:	d802      	bhi.n	8010ac0 <find_volume+0x300>
 8010aba:	2301      	movs	r3, #1
 8010abc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8010ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ac2:	1c9a      	adds	r2, r3, #2
 8010ac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ac6:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8010ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010aca:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010acc:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8010ace:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8010ad0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010ad2:	441a      	add	r2, r3
 8010ad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ad6:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8010ad8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010adc:	441a      	add	r2, r3
 8010ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ae0:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 8010ae2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010ae6:	2b03      	cmp	r3, #3
 8010ae8:	d11e      	bne.n	8010b28 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8010aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010aec:	3334      	adds	r3, #52	@ 0x34
 8010aee:	332a      	adds	r3, #42	@ 0x2a
 8010af0:	4618      	mov	r0, r3
 8010af2:	f7fe fc55 	bl	800f3a0 <ld_word>
 8010af6:	4603      	mov	r3, r0
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d001      	beq.n	8010b00 <find_volume+0x340>
 8010afc:	230d      	movs	r3, #13
 8010afe:	e0a8      	b.n	8010c52 <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8010b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b02:	891b      	ldrh	r3, [r3, #8]
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d001      	beq.n	8010b0c <find_volume+0x34c>
 8010b08:	230d      	movs	r3, #13
 8010b0a:	e0a2      	b.n	8010c52 <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8010b0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b0e:	3334      	adds	r3, #52	@ 0x34
 8010b10:	332c      	adds	r3, #44	@ 0x2c
 8010b12:	4618      	mov	r0, r3
 8010b14:	f7fe fc5d 	bl	800f3d2 <ld_dword>
 8010b18:	4602      	mov	r2, r0
 8010b1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b1c:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8010b1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b20:	699b      	ldr	r3, [r3, #24]
 8010b22:	009b      	lsls	r3, r3, #2
 8010b24:	647b      	str	r3, [r7, #68]	@ 0x44
 8010b26:	e01f      	b.n	8010b68 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8010b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b2a:	891b      	ldrh	r3, [r3, #8]
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d101      	bne.n	8010b34 <find_volume+0x374>
 8010b30:	230d      	movs	r3, #13
 8010b32:	e08e      	b.n	8010c52 <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8010b34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b36:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010b38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010b3a:	441a      	add	r2, r3
 8010b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b3e:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8010b40:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010b44:	2b02      	cmp	r3, #2
 8010b46:	d103      	bne.n	8010b50 <find_volume+0x390>
 8010b48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b4a:	699b      	ldr	r3, [r3, #24]
 8010b4c:	005b      	lsls	r3, r3, #1
 8010b4e:	e00a      	b.n	8010b66 <find_volume+0x3a6>
 8010b50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b52:	699a      	ldr	r2, [r3, #24]
 8010b54:	4613      	mov	r3, r2
 8010b56:	005b      	lsls	r3, r3, #1
 8010b58:	4413      	add	r3, r2
 8010b5a:	085a      	lsrs	r2, r3, #1
 8010b5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b5e:	699b      	ldr	r3, [r3, #24]
 8010b60:	f003 0301 	and.w	r3, r3, #1
 8010b64:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8010b66:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8010b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b6a:	69da      	ldr	r2, [r3, #28]
 8010b6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010b6e:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8010b72:	0a5b      	lsrs	r3, r3, #9
 8010b74:	429a      	cmp	r2, r3
 8010b76:	d201      	bcs.n	8010b7c <find_volume+0x3bc>
 8010b78:	230d      	movs	r3, #13
 8010b7a:	e06a      	b.n	8010c52 <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8010b7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b7e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010b82:	615a      	str	r2, [r3, #20]
 8010b84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b86:	695a      	ldr	r2, [r3, #20]
 8010b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b8a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8010b8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b8e:	2280      	movs	r2, #128	@ 0x80
 8010b90:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8010b92:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010b96:	2b03      	cmp	r3, #3
 8010b98:	d149      	bne.n	8010c2e <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8010b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b9c:	3334      	adds	r3, #52	@ 0x34
 8010b9e:	3330      	adds	r3, #48	@ 0x30
 8010ba0:	4618      	mov	r0, r3
 8010ba2:	f7fe fbfd 	bl	800f3a0 <ld_word>
 8010ba6:	4603      	mov	r3, r0
 8010ba8:	2b01      	cmp	r3, #1
 8010baa:	d140      	bne.n	8010c2e <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8010bac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010bae:	3301      	adds	r3, #1
 8010bb0:	4619      	mov	r1, r3
 8010bb2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010bb4:	f7fe fe9a 	bl	800f8ec <move_window>
 8010bb8:	4603      	mov	r3, r0
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d137      	bne.n	8010c2e <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 8010bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bc0:	2200      	movs	r2, #0
 8010bc2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8010bc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bc6:	3334      	adds	r3, #52	@ 0x34
 8010bc8:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8010bcc:	4618      	mov	r0, r3
 8010bce:	f7fe fbe7 	bl	800f3a0 <ld_word>
 8010bd2:	4603      	mov	r3, r0
 8010bd4:	461a      	mov	r2, r3
 8010bd6:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8010bda:	429a      	cmp	r2, r3
 8010bdc:	d127      	bne.n	8010c2e <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8010bde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010be0:	3334      	adds	r3, #52	@ 0x34
 8010be2:	4618      	mov	r0, r3
 8010be4:	f7fe fbf5 	bl	800f3d2 <ld_dword>
 8010be8:	4603      	mov	r3, r0
 8010bea:	4a1c      	ldr	r2, [pc, #112]	@ (8010c5c <find_volume+0x49c>)
 8010bec:	4293      	cmp	r3, r2
 8010bee:	d11e      	bne.n	8010c2e <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8010bf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bf2:	3334      	adds	r3, #52	@ 0x34
 8010bf4:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8010bf8:	4618      	mov	r0, r3
 8010bfa:	f7fe fbea 	bl	800f3d2 <ld_dword>
 8010bfe:	4603      	mov	r3, r0
 8010c00:	4a17      	ldr	r2, [pc, #92]	@ (8010c60 <find_volume+0x4a0>)
 8010c02:	4293      	cmp	r3, r2
 8010c04:	d113      	bne.n	8010c2e <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8010c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c08:	3334      	adds	r3, #52	@ 0x34
 8010c0a:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8010c0e:	4618      	mov	r0, r3
 8010c10:	f7fe fbdf 	bl	800f3d2 <ld_dword>
 8010c14:	4602      	mov	r2, r0
 8010c16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c18:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8010c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c1c:	3334      	adds	r3, #52	@ 0x34
 8010c1e:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8010c22:	4618      	mov	r0, r3
 8010c24:	f7fe fbd5 	bl	800f3d2 <ld_dword>
 8010c28:	4602      	mov	r2, r0
 8010c2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c2c:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8010c2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c30:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8010c34:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8010c36:	4b0b      	ldr	r3, [pc, #44]	@ (8010c64 <find_volume+0x4a4>)
 8010c38:	881b      	ldrh	r3, [r3, #0]
 8010c3a:	3301      	adds	r3, #1
 8010c3c:	b29a      	uxth	r2, r3
 8010c3e:	4b09      	ldr	r3, [pc, #36]	@ (8010c64 <find_volume+0x4a4>)
 8010c40:	801a      	strh	r2, [r3, #0]
 8010c42:	4b08      	ldr	r3, [pc, #32]	@ (8010c64 <find_volume+0x4a4>)
 8010c44:	881a      	ldrh	r2, [r3, #0]
 8010c46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c48:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8010c4a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010c4c:	f7fe fde6 	bl	800f81c <clear_lock>
#endif
	return FR_OK;
 8010c50:	2300      	movs	r3, #0
}
 8010c52:	4618      	mov	r0, r3
 8010c54:	3758      	adds	r7, #88	@ 0x58
 8010c56:	46bd      	mov	sp, r7
 8010c58:	bd80      	pop	{r7, pc}
 8010c5a:	bf00      	nop
 8010c5c:	41615252 	.word	0x41615252
 8010c60:	61417272 	.word	0x61417272
 8010c64:	24000a3c 	.word	0x24000a3c

08010c68 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8010c68:	b580      	push	{r7, lr}
 8010c6a:	b084      	sub	sp, #16
 8010c6c:	af00      	add	r7, sp, #0
 8010c6e:	6078      	str	r0, [r7, #4]
 8010c70:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8010c72:	2309      	movs	r3, #9
 8010c74:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d02e      	beq.n	8010cda <validate+0x72>
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d02a      	beq.n	8010cda <validate+0x72>
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	781b      	ldrb	r3, [r3, #0]
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d025      	beq.n	8010cda <validate+0x72>
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	889a      	ldrh	r2, [r3, #4]
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	88db      	ldrh	r3, [r3, #6]
 8010c98:	429a      	cmp	r2, r3
 8010c9a:	d11e      	bne.n	8010cda <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	681b      	ldr	r3, [r3, #0]
 8010ca0:	4618      	mov	r0, r3
 8010ca2:	f7fe fc7e 	bl	800f5a2 <lock_fs>
 8010ca6:	4603      	mov	r3, r0
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d014      	beq.n	8010cd6 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	785b      	ldrb	r3, [r3, #1]
 8010cb2:	4618      	mov	r0, r3
 8010cb4:	f7fe fad6 	bl	800f264 <disk_status>
 8010cb8:	4603      	mov	r3, r0
 8010cba:	f003 0301 	and.w	r3, r3, #1
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d102      	bne.n	8010cc8 <validate+0x60>
				res = FR_OK;
 8010cc2:	2300      	movs	r3, #0
 8010cc4:	73fb      	strb	r3, [r7, #15]
 8010cc6:	e008      	b.n	8010cda <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	2100      	movs	r1, #0
 8010cce:	4618      	mov	r0, r3
 8010cd0:	f7fe fc7d 	bl	800f5ce <unlock_fs>
 8010cd4:	e001      	b.n	8010cda <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8010cd6:	230f      	movs	r3, #15
 8010cd8:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8010cda:	7bfb      	ldrb	r3, [r7, #15]
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d102      	bne.n	8010ce6 <validate+0x7e>
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	681b      	ldr	r3, [r3, #0]
 8010ce4:	e000      	b.n	8010ce8 <validate+0x80>
 8010ce6:	2300      	movs	r3, #0
 8010ce8:	683a      	ldr	r2, [r7, #0]
 8010cea:	6013      	str	r3, [r2, #0]
	return res;
 8010cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8010cee:	4618      	mov	r0, r3
 8010cf0:	3710      	adds	r7, #16
 8010cf2:	46bd      	mov	sp, r7
 8010cf4:	bd80      	pop	{r7, pc}
	...

08010cf8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8010cf8:	b580      	push	{r7, lr}
 8010cfa:	b088      	sub	sp, #32
 8010cfc:	af00      	add	r7, sp, #0
 8010cfe:	60f8      	str	r0, [r7, #12]
 8010d00:	60b9      	str	r1, [r7, #8]
 8010d02:	4613      	mov	r3, r2
 8010d04:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8010d06:	68bb      	ldr	r3, [r7, #8]
 8010d08:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8010d0a:	f107 0310 	add.w	r3, r7, #16
 8010d0e:	4618      	mov	r0, r3
 8010d10:	f7ff fcbb 	bl	801068a <get_ldnumber>
 8010d14:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8010d16:	69fb      	ldr	r3, [r7, #28]
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	da01      	bge.n	8010d20 <f_mount+0x28>
 8010d1c:	230b      	movs	r3, #11
 8010d1e:	e048      	b.n	8010db2 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8010d20:	4a26      	ldr	r2, [pc, #152]	@ (8010dbc <f_mount+0xc4>)
 8010d22:	69fb      	ldr	r3, [r7, #28]
 8010d24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010d28:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8010d2a:	69bb      	ldr	r3, [r7, #24]
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d00f      	beq.n	8010d50 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8010d30:	69b8      	ldr	r0, [r7, #24]
 8010d32:	f7fe fd73 	bl	800f81c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8010d36:	69bb      	ldr	r3, [r7, #24]
 8010d38:	68db      	ldr	r3, [r3, #12]
 8010d3a:	4618      	mov	r0, r3
 8010d3c:	f001 f98c 	bl	8012058 <ff_del_syncobj>
 8010d40:	4603      	mov	r3, r0
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d101      	bne.n	8010d4a <f_mount+0x52>
 8010d46:	2302      	movs	r3, #2
 8010d48:	e033      	b.n	8010db2 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8010d4a:	69bb      	ldr	r3, [r7, #24]
 8010d4c:	2200      	movs	r2, #0
 8010d4e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8010d50:	68fb      	ldr	r3, [r7, #12]
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d00f      	beq.n	8010d76 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8010d56:	68fb      	ldr	r3, [r7, #12]
 8010d58:	2200      	movs	r2, #0
 8010d5a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8010d5c:	69fb      	ldr	r3, [r7, #28]
 8010d5e:	b2da      	uxtb	r2, r3
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	330c      	adds	r3, #12
 8010d64:	4619      	mov	r1, r3
 8010d66:	4610      	mov	r0, r2
 8010d68:	f001 f95b 	bl	8012022 <ff_cre_syncobj>
 8010d6c:	4603      	mov	r3, r0
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d101      	bne.n	8010d76 <f_mount+0x7e>
 8010d72:	2302      	movs	r3, #2
 8010d74:	e01d      	b.n	8010db2 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8010d76:	68fa      	ldr	r2, [r7, #12]
 8010d78:	4910      	ldr	r1, [pc, #64]	@ (8010dbc <f_mount+0xc4>)
 8010d7a:	69fb      	ldr	r3, [r7, #28]
 8010d7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d002      	beq.n	8010d8c <f_mount+0x94>
 8010d86:	79fb      	ldrb	r3, [r7, #7]
 8010d88:	2b01      	cmp	r3, #1
 8010d8a:	d001      	beq.n	8010d90 <f_mount+0x98>
 8010d8c:	2300      	movs	r3, #0
 8010d8e:	e010      	b.n	8010db2 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8010d90:	f107 010c 	add.w	r1, r7, #12
 8010d94:	f107 0308 	add.w	r3, r7, #8
 8010d98:	2200      	movs	r2, #0
 8010d9a:	4618      	mov	r0, r3
 8010d9c:	f7ff fd10 	bl	80107c0 <find_volume>
 8010da0:	4603      	mov	r3, r0
 8010da2:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8010da4:	68fb      	ldr	r3, [r7, #12]
 8010da6:	7dfa      	ldrb	r2, [r7, #23]
 8010da8:	4611      	mov	r1, r2
 8010daa:	4618      	mov	r0, r3
 8010dac:	f7fe fc0f 	bl	800f5ce <unlock_fs>
 8010db0:	7dfb      	ldrb	r3, [r7, #23]
}
 8010db2:	4618      	mov	r0, r3
 8010db4:	3720      	adds	r7, #32
 8010db6:	46bd      	mov	sp, r7
 8010db8:	bd80      	pop	{r7, pc}
 8010dba:	bf00      	nop
 8010dbc:	24000a38 	.word	0x24000a38

08010dc0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8010dc0:	b580      	push	{r7, lr}
 8010dc2:	b098      	sub	sp, #96	@ 0x60
 8010dc4:	af00      	add	r7, sp, #0
 8010dc6:	60f8      	str	r0, [r7, #12]
 8010dc8:	60b9      	str	r1, [r7, #8]
 8010dca:	4613      	mov	r3, r2
 8010dcc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8010dce:	68fb      	ldr	r3, [r7, #12]
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d101      	bne.n	8010dd8 <f_open+0x18>
 8010dd4:	2309      	movs	r3, #9
 8010dd6:	e1b0      	b.n	801113a <f_open+0x37a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8010dd8:	79fb      	ldrb	r3, [r7, #7]
 8010dda:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010dde:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8010de0:	79fa      	ldrb	r2, [r7, #7]
 8010de2:	f107 0110 	add.w	r1, r7, #16
 8010de6:	f107 0308 	add.w	r3, r7, #8
 8010dea:	4618      	mov	r0, r3
 8010dec:	f7ff fce8 	bl	80107c0 <find_volume>
 8010df0:	4603      	mov	r3, r0
 8010df2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8010df6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	f040 818d 	bne.w	801111a <f_open+0x35a>
		dj.obj.fs = fs;
 8010e00:	693b      	ldr	r3, [r7, #16]
 8010e02:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8010e04:	68ba      	ldr	r2, [r7, #8]
 8010e06:	f107 0314 	add.w	r3, r7, #20
 8010e0a:	4611      	mov	r1, r2
 8010e0c:	4618      	mov	r0, r3
 8010e0e:	f7ff fbcb 	bl	80105a8 <follow_path>
 8010e12:	4603      	mov	r3, r0
 8010e14:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8010e18:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d118      	bne.n	8010e52 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8010e20:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8010e24:	b25b      	sxtb	r3, r3
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	da03      	bge.n	8010e32 <f_open+0x72>
				res = FR_INVALID_NAME;
 8010e2a:	2306      	movs	r3, #6
 8010e2c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8010e30:	e00f      	b.n	8010e52 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010e32:	79fb      	ldrb	r3, [r7, #7]
 8010e34:	2b01      	cmp	r3, #1
 8010e36:	bf8c      	ite	hi
 8010e38:	2301      	movhi	r3, #1
 8010e3a:	2300      	movls	r3, #0
 8010e3c:	b2db      	uxtb	r3, r3
 8010e3e:	461a      	mov	r2, r3
 8010e40:	f107 0314 	add.w	r3, r7, #20
 8010e44:	4611      	mov	r1, r2
 8010e46:	4618      	mov	r0, r3
 8010e48:	f7fe fbdc 	bl	800f604 <chk_lock>
 8010e4c:	4603      	mov	r3, r0
 8010e4e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8010e52:	79fb      	ldrb	r3, [r7, #7]
 8010e54:	f003 031c 	and.w	r3, r3, #28
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d07f      	beq.n	8010f5c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8010e5c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d017      	beq.n	8010e94 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8010e64:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010e68:	2b04      	cmp	r3, #4
 8010e6a:	d10e      	bne.n	8010e8a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8010e6c:	f7fe fc26 	bl	800f6bc <enq_lock>
 8010e70:	4603      	mov	r3, r0
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d006      	beq.n	8010e84 <f_open+0xc4>
 8010e76:	f107 0314 	add.w	r3, r7, #20
 8010e7a:	4618      	mov	r0, r3
 8010e7c:	f7ff face 	bl	801041c <dir_register>
 8010e80:	4603      	mov	r3, r0
 8010e82:	e000      	b.n	8010e86 <f_open+0xc6>
 8010e84:	2312      	movs	r3, #18
 8010e86:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8010e8a:	79fb      	ldrb	r3, [r7, #7]
 8010e8c:	f043 0308 	orr.w	r3, r3, #8
 8010e90:	71fb      	strb	r3, [r7, #7]
 8010e92:	e010      	b.n	8010eb6 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8010e94:	7ebb      	ldrb	r3, [r7, #26]
 8010e96:	f003 0311 	and.w	r3, r3, #17
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d003      	beq.n	8010ea6 <f_open+0xe6>
					res = FR_DENIED;
 8010e9e:	2307      	movs	r3, #7
 8010ea0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8010ea4:	e007      	b.n	8010eb6 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8010ea6:	79fb      	ldrb	r3, [r7, #7]
 8010ea8:	f003 0304 	and.w	r3, r3, #4
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d002      	beq.n	8010eb6 <f_open+0xf6>
 8010eb0:	2308      	movs	r3, #8
 8010eb2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8010eb6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d168      	bne.n	8010f90 <f_open+0x1d0>
 8010ebe:	79fb      	ldrb	r3, [r7, #7]
 8010ec0:	f003 0308 	and.w	r3, r3, #8
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d063      	beq.n	8010f90 <f_open+0x1d0>
				dw = GET_FATTIME();
 8010ec8:	f7fd ff92 	bl	800edf0 <get_fattime>
 8010ecc:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8010ece:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010ed0:	330e      	adds	r3, #14
 8010ed2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010ed4:	4618      	mov	r0, r3
 8010ed6:	f7fe faba 	bl	800f44e <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8010eda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010edc:	3316      	adds	r3, #22
 8010ede:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010ee0:	4618      	mov	r0, r3
 8010ee2:	f7fe fab4 	bl	800f44e <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8010ee6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010ee8:	330b      	adds	r3, #11
 8010eea:	2220      	movs	r2, #32
 8010eec:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8010eee:	693b      	ldr	r3, [r7, #16]
 8010ef0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010ef2:	4611      	mov	r1, r2
 8010ef4:	4618      	mov	r0, r3
 8010ef6:	f7ff f9fd 	bl	80102f4 <ld_clust>
 8010efa:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8010efc:	693b      	ldr	r3, [r7, #16]
 8010efe:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8010f00:	2200      	movs	r2, #0
 8010f02:	4618      	mov	r0, r3
 8010f04:	f7ff fa15 	bl	8010332 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8010f08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010f0a:	331c      	adds	r3, #28
 8010f0c:	2100      	movs	r1, #0
 8010f0e:	4618      	mov	r0, r3
 8010f10:	f7fe fa9d 	bl	800f44e <st_dword>
					fs->wflag = 1;
 8010f14:	693b      	ldr	r3, [r7, #16]
 8010f16:	2201      	movs	r2, #1
 8010f18:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8010f1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d037      	beq.n	8010f90 <f_open+0x1d0>
						dw = fs->winsect;
 8010f20:	693b      	ldr	r3, [r7, #16]
 8010f22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010f24:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8010f26:	f107 0314 	add.w	r3, r7, #20
 8010f2a:	2200      	movs	r2, #0
 8010f2c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8010f2e:	4618      	mov	r0, r3
 8010f30:	f7fe ff28 	bl	800fd84 <remove_chain>
 8010f34:	4603      	mov	r3, r0
 8010f36:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8010f3a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d126      	bne.n	8010f90 <f_open+0x1d0>
							res = move_window(fs, dw);
 8010f42:	693b      	ldr	r3, [r7, #16]
 8010f44:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010f46:	4618      	mov	r0, r3
 8010f48:	f7fe fcd0 	bl	800f8ec <move_window>
 8010f4c:	4603      	mov	r3, r0
 8010f4e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8010f52:	693b      	ldr	r3, [r7, #16]
 8010f54:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010f56:	3a01      	subs	r2, #1
 8010f58:	611a      	str	r2, [r3, #16]
 8010f5a:	e019      	b.n	8010f90 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8010f5c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d115      	bne.n	8010f90 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8010f64:	7ebb      	ldrb	r3, [r7, #26]
 8010f66:	f003 0310 	and.w	r3, r3, #16
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d003      	beq.n	8010f76 <f_open+0x1b6>
					res = FR_NO_FILE;
 8010f6e:	2304      	movs	r3, #4
 8010f70:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8010f74:	e00c      	b.n	8010f90 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8010f76:	79fb      	ldrb	r3, [r7, #7]
 8010f78:	f003 0302 	and.w	r3, r3, #2
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d007      	beq.n	8010f90 <f_open+0x1d0>
 8010f80:	7ebb      	ldrb	r3, [r7, #26]
 8010f82:	f003 0301 	and.w	r3, r3, #1
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d002      	beq.n	8010f90 <f_open+0x1d0>
						res = FR_DENIED;
 8010f8a:	2307      	movs	r3, #7
 8010f8c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8010f90:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d126      	bne.n	8010fe6 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8010f98:	79fb      	ldrb	r3, [r7, #7]
 8010f9a:	f003 0308 	and.w	r3, r3, #8
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	d003      	beq.n	8010faa <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8010fa2:	79fb      	ldrb	r3, [r7, #7]
 8010fa4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010fa8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8010faa:	693b      	ldr	r3, [r7, #16]
 8010fac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8010fb2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010fb8:	79fb      	ldrb	r3, [r7, #7]
 8010fba:	2b01      	cmp	r3, #1
 8010fbc:	bf8c      	ite	hi
 8010fbe:	2301      	movhi	r3, #1
 8010fc0:	2300      	movls	r3, #0
 8010fc2:	b2db      	uxtb	r3, r3
 8010fc4:	461a      	mov	r2, r3
 8010fc6:	f107 0314 	add.w	r3, r7, #20
 8010fca:	4611      	mov	r1, r2
 8010fcc:	4618      	mov	r0, r3
 8010fce:	f7fe fb97 	bl	800f700 <inc_lock>
 8010fd2:	4602      	mov	r2, r0
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8010fd8:	68fb      	ldr	r3, [r7, #12]
 8010fda:	691b      	ldr	r3, [r3, #16]
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d102      	bne.n	8010fe6 <f_open+0x226>
 8010fe0:	2302      	movs	r3, #2
 8010fe2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8010fe6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	f040 8095 	bne.w	801111a <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8010ff0:	693b      	ldr	r3, [r7, #16]
 8010ff2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010ff4:	4611      	mov	r1, r2
 8010ff6:	4618      	mov	r0, r3
 8010ff8:	f7ff f97c 	bl	80102f4 <ld_clust>
 8010ffc:	4602      	mov	r2, r0
 8010ffe:	68fb      	ldr	r3, [r7, #12]
 8011000:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8011002:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011004:	331c      	adds	r3, #28
 8011006:	4618      	mov	r0, r3
 8011008:	f7fe f9e3 	bl	800f3d2 <ld_dword>
 801100c:	4602      	mov	r2, r0
 801100e:	68fb      	ldr	r3, [r7, #12]
 8011010:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	2200      	movs	r2, #0
 8011016:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8011018:	693a      	ldr	r2, [r7, #16]
 801101a:	68fb      	ldr	r3, [r7, #12]
 801101c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801101e:	693b      	ldr	r3, [r7, #16]
 8011020:	88da      	ldrh	r2, [r3, #6]
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8011026:	68fb      	ldr	r3, [r7, #12]
 8011028:	79fa      	ldrb	r2, [r7, #7]
 801102a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801102c:	68fb      	ldr	r3, [r7, #12]
 801102e:	2200      	movs	r2, #0
 8011030:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	2200      	movs	r2, #0
 8011036:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8011038:	68fb      	ldr	r3, [r7, #12]
 801103a:	2200      	movs	r2, #0
 801103c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801103e:	68fb      	ldr	r3, [r7, #12]
 8011040:	3330      	adds	r3, #48	@ 0x30
 8011042:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011046:	2100      	movs	r1, #0
 8011048:	4618      	mov	r0, r3
 801104a:	f7fe fa4d 	bl	800f4e8 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801104e:	79fb      	ldrb	r3, [r7, #7]
 8011050:	f003 0320 	and.w	r3, r3, #32
 8011054:	2b00      	cmp	r3, #0
 8011056:	d060      	beq.n	801111a <f_open+0x35a>
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	68db      	ldr	r3, [r3, #12]
 801105c:	2b00      	cmp	r3, #0
 801105e:	d05c      	beq.n	801111a <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8011060:	68fb      	ldr	r3, [r7, #12]
 8011062:	68da      	ldr	r2, [r3, #12]
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8011068:	693b      	ldr	r3, [r7, #16]
 801106a:	895b      	ldrh	r3, [r3, #10]
 801106c:	025b      	lsls	r3, r3, #9
 801106e:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8011070:	68fb      	ldr	r3, [r7, #12]
 8011072:	689b      	ldr	r3, [r3, #8]
 8011074:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011076:	68fb      	ldr	r3, [r7, #12]
 8011078:	68db      	ldr	r3, [r3, #12]
 801107a:	657b      	str	r3, [r7, #84]	@ 0x54
 801107c:	e016      	b.n	80110ac <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 801107e:	68fb      	ldr	r3, [r7, #12]
 8011080:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8011082:	4618      	mov	r0, r3
 8011084:	f7fe fced 	bl	800fa62 <get_fat>
 8011088:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 801108a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801108c:	2b01      	cmp	r3, #1
 801108e:	d802      	bhi.n	8011096 <f_open+0x2d6>
 8011090:	2302      	movs	r3, #2
 8011092:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8011096:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011098:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801109c:	d102      	bne.n	80110a4 <f_open+0x2e4>
 801109e:	2301      	movs	r3, #1
 80110a0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80110a4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80110a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80110a8:	1ad3      	subs	r3, r2, r3
 80110aa:	657b      	str	r3, [r7, #84]	@ 0x54
 80110ac:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d103      	bne.n	80110bc <f_open+0x2fc>
 80110b4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80110b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80110b8:	429a      	cmp	r2, r3
 80110ba:	d8e0      	bhi.n	801107e <f_open+0x2be>
				}
				fp->clust = clst;
 80110bc:	68fb      	ldr	r3, [r7, #12]
 80110be:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80110c0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80110c2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d127      	bne.n	801111a <f_open+0x35a>
 80110ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80110cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d022      	beq.n	801111a <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80110d4:	693b      	ldr	r3, [r7, #16]
 80110d6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80110d8:	4618      	mov	r0, r3
 80110da:	f7fe fca3 	bl	800fa24 <clust2sect>
 80110de:	6478      	str	r0, [r7, #68]	@ 0x44
 80110e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d103      	bne.n	80110ee <f_open+0x32e>
						res = FR_INT_ERR;
 80110e6:	2302      	movs	r3, #2
 80110e8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80110ec:	e015      	b.n	801111a <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80110ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80110f0:	0a5a      	lsrs	r2, r3, #9
 80110f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80110f4:	441a      	add	r2, r3
 80110f6:	68fb      	ldr	r3, [r7, #12]
 80110f8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80110fa:	693b      	ldr	r3, [r7, #16]
 80110fc:	7858      	ldrb	r0, [r3, #1]
 80110fe:	68fb      	ldr	r3, [r7, #12]
 8011100:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011104:	68fb      	ldr	r3, [r7, #12]
 8011106:	6a1a      	ldr	r2, [r3, #32]
 8011108:	2301      	movs	r3, #1
 801110a:	f7fe f8eb 	bl	800f2e4 <disk_read>
 801110e:	4603      	mov	r3, r0
 8011110:	2b00      	cmp	r3, #0
 8011112:	d002      	beq.n	801111a <f_open+0x35a>
 8011114:	2301      	movs	r3, #1
 8011116:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801111a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801111e:	2b00      	cmp	r3, #0
 8011120:	d002      	beq.n	8011128 <f_open+0x368>
 8011122:	68fb      	ldr	r3, [r7, #12]
 8011124:	2200      	movs	r2, #0
 8011126:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8011128:	693b      	ldr	r3, [r7, #16]
 801112a:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 801112e:	4611      	mov	r1, r2
 8011130:	4618      	mov	r0, r3
 8011132:	f7fe fa4c 	bl	800f5ce <unlock_fs>
 8011136:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 801113a:	4618      	mov	r0, r3
 801113c:	3760      	adds	r7, #96	@ 0x60
 801113e:	46bd      	mov	sp, r7
 8011140:	bd80      	pop	{r7, pc}

08011142 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8011142:	b580      	push	{r7, lr}
 8011144:	b08c      	sub	sp, #48	@ 0x30
 8011146:	af00      	add	r7, sp, #0
 8011148:	60f8      	str	r0, [r7, #12]
 801114a:	60b9      	str	r1, [r7, #8]
 801114c:	607a      	str	r2, [r7, #4]
 801114e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8011150:	68bb      	ldr	r3, [r7, #8]
 8011152:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8011154:	683b      	ldr	r3, [r7, #0]
 8011156:	2200      	movs	r2, #0
 8011158:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	f107 0210 	add.w	r2, r7, #16
 8011160:	4611      	mov	r1, r2
 8011162:	4618      	mov	r0, r3
 8011164:	f7ff fd80 	bl	8010c68 <validate>
 8011168:	4603      	mov	r3, r0
 801116a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801116e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011172:	2b00      	cmp	r3, #0
 8011174:	d107      	bne.n	8011186 <f_write+0x44>
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	7d5b      	ldrb	r3, [r3, #21]
 801117a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 801117e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011182:	2b00      	cmp	r3, #0
 8011184:	d009      	beq.n	801119a <f_write+0x58>
 8011186:	693b      	ldr	r3, [r7, #16]
 8011188:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 801118c:	4611      	mov	r1, r2
 801118e:	4618      	mov	r0, r3
 8011190:	f7fe fa1d 	bl	800f5ce <unlock_fs>
 8011194:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011198:	e173      	b.n	8011482 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801119a:	68fb      	ldr	r3, [r7, #12]
 801119c:	7d1b      	ldrb	r3, [r3, #20]
 801119e:	f003 0302 	and.w	r3, r3, #2
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d106      	bne.n	80111b4 <f_write+0x72>
 80111a6:	693b      	ldr	r3, [r7, #16]
 80111a8:	2107      	movs	r1, #7
 80111aa:	4618      	mov	r0, r3
 80111ac:	f7fe fa0f 	bl	800f5ce <unlock_fs>
 80111b0:	2307      	movs	r3, #7
 80111b2:	e166      	b.n	8011482 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	699a      	ldr	r2, [r3, #24]
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	441a      	add	r2, r3
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	699b      	ldr	r3, [r3, #24]
 80111c0:	429a      	cmp	r2, r3
 80111c2:	f080 814b 	bcs.w	801145c <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	699b      	ldr	r3, [r3, #24]
 80111ca:	43db      	mvns	r3, r3
 80111cc:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80111ce:	e145      	b.n	801145c <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80111d0:	68fb      	ldr	r3, [r7, #12]
 80111d2:	699b      	ldr	r3, [r3, #24]
 80111d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80111d8:	2b00      	cmp	r3, #0
 80111da:	f040 8101 	bne.w	80113e0 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	699b      	ldr	r3, [r3, #24]
 80111e2:	0a5b      	lsrs	r3, r3, #9
 80111e4:	693a      	ldr	r2, [r7, #16]
 80111e6:	8952      	ldrh	r2, [r2, #10]
 80111e8:	3a01      	subs	r2, #1
 80111ea:	4013      	ands	r3, r2
 80111ec:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80111ee:	69bb      	ldr	r3, [r7, #24]
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d14d      	bne.n	8011290 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	699b      	ldr	r3, [r3, #24]
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	d10c      	bne.n	8011216 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80111fc:	68fb      	ldr	r3, [r7, #12]
 80111fe:	689b      	ldr	r3, [r3, #8]
 8011200:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8011202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011204:	2b00      	cmp	r3, #0
 8011206:	d11a      	bne.n	801123e <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8011208:	68fb      	ldr	r3, [r7, #12]
 801120a:	2100      	movs	r1, #0
 801120c:	4618      	mov	r0, r3
 801120e:	f7fe fe1e 	bl	800fe4e <create_chain>
 8011212:	62b8      	str	r0, [r7, #40]	@ 0x28
 8011214:	e013      	b.n	801123e <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8011216:	68fb      	ldr	r3, [r7, #12]
 8011218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801121a:	2b00      	cmp	r3, #0
 801121c:	d007      	beq.n	801122e <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801121e:	68fb      	ldr	r3, [r7, #12]
 8011220:	699b      	ldr	r3, [r3, #24]
 8011222:	4619      	mov	r1, r3
 8011224:	68f8      	ldr	r0, [r7, #12]
 8011226:	f7fe feaa 	bl	800ff7e <clmt_clust>
 801122a:	62b8      	str	r0, [r7, #40]	@ 0x28
 801122c:	e007      	b.n	801123e <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801122e:	68fa      	ldr	r2, [r7, #12]
 8011230:	68fb      	ldr	r3, [r7, #12]
 8011232:	69db      	ldr	r3, [r3, #28]
 8011234:	4619      	mov	r1, r3
 8011236:	4610      	mov	r0, r2
 8011238:	f7fe fe09 	bl	800fe4e <create_chain>
 801123c:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801123e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011240:	2b00      	cmp	r3, #0
 8011242:	f000 8110 	beq.w	8011466 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011248:	2b01      	cmp	r3, #1
 801124a:	d109      	bne.n	8011260 <f_write+0x11e>
 801124c:	68fb      	ldr	r3, [r7, #12]
 801124e:	2202      	movs	r2, #2
 8011250:	755a      	strb	r2, [r3, #21]
 8011252:	693b      	ldr	r3, [r7, #16]
 8011254:	2102      	movs	r1, #2
 8011256:	4618      	mov	r0, r3
 8011258:	f7fe f9b9 	bl	800f5ce <unlock_fs>
 801125c:	2302      	movs	r3, #2
 801125e:	e110      	b.n	8011482 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011262:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011266:	d109      	bne.n	801127c <f_write+0x13a>
 8011268:	68fb      	ldr	r3, [r7, #12]
 801126a:	2201      	movs	r2, #1
 801126c:	755a      	strb	r2, [r3, #21]
 801126e:	693b      	ldr	r3, [r7, #16]
 8011270:	2101      	movs	r1, #1
 8011272:	4618      	mov	r0, r3
 8011274:	f7fe f9ab 	bl	800f5ce <unlock_fs>
 8011278:	2301      	movs	r3, #1
 801127a:	e102      	b.n	8011482 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 801127c:	68fb      	ldr	r3, [r7, #12]
 801127e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011280:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8011282:	68fb      	ldr	r3, [r7, #12]
 8011284:	689b      	ldr	r3, [r3, #8]
 8011286:	2b00      	cmp	r3, #0
 8011288:	d102      	bne.n	8011290 <f_write+0x14e>
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801128e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8011290:	68fb      	ldr	r3, [r7, #12]
 8011292:	7d1b      	ldrb	r3, [r3, #20]
 8011294:	b25b      	sxtb	r3, r3
 8011296:	2b00      	cmp	r3, #0
 8011298:	da1d      	bge.n	80112d6 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801129a:	693b      	ldr	r3, [r7, #16]
 801129c:	7858      	ldrb	r0, [r3, #1]
 801129e:	68fb      	ldr	r3, [r7, #12]
 80112a0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80112a4:	68fb      	ldr	r3, [r7, #12]
 80112a6:	6a1a      	ldr	r2, [r3, #32]
 80112a8:	2301      	movs	r3, #1
 80112aa:	f7fe f83b 	bl	800f324 <disk_write>
 80112ae:	4603      	mov	r3, r0
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d009      	beq.n	80112c8 <f_write+0x186>
 80112b4:	68fb      	ldr	r3, [r7, #12]
 80112b6:	2201      	movs	r2, #1
 80112b8:	755a      	strb	r2, [r3, #21]
 80112ba:	693b      	ldr	r3, [r7, #16]
 80112bc:	2101      	movs	r1, #1
 80112be:	4618      	mov	r0, r3
 80112c0:	f7fe f985 	bl	800f5ce <unlock_fs>
 80112c4:	2301      	movs	r3, #1
 80112c6:	e0dc      	b.n	8011482 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 80112c8:	68fb      	ldr	r3, [r7, #12]
 80112ca:	7d1b      	ldrb	r3, [r3, #20]
 80112cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80112d0:	b2da      	uxtb	r2, r3
 80112d2:	68fb      	ldr	r3, [r7, #12]
 80112d4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80112d6:	693a      	ldr	r2, [r7, #16]
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	69db      	ldr	r3, [r3, #28]
 80112dc:	4619      	mov	r1, r3
 80112de:	4610      	mov	r0, r2
 80112e0:	f7fe fba0 	bl	800fa24 <clust2sect>
 80112e4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80112e6:	697b      	ldr	r3, [r7, #20]
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d109      	bne.n	8011300 <f_write+0x1be>
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	2202      	movs	r2, #2
 80112f0:	755a      	strb	r2, [r3, #21]
 80112f2:	693b      	ldr	r3, [r7, #16]
 80112f4:	2102      	movs	r1, #2
 80112f6:	4618      	mov	r0, r3
 80112f8:	f7fe f969 	bl	800f5ce <unlock_fs>
 80112fc:	2302      	movs	r3, #2
 80112fe:	e0c0      	b.n	8011482 <f_write+0x340>
			sect += csect;
 8011300:	697a      	ldr	r2, [r7, #20]
 8011302:	69bb      	ldr	r3, [r7, #24]
 8011304:	4413      	add	r3, r2
 8011306:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	0a5b      	lsrs	r3, r3, #9
 801130c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801130e:	6a3b      	ldr	r3, [r7, #32]
 8011310:	2b00      	cmp	r3, #0
 8011312:	d041      	beq.n	8011398 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8011314:	69ba      	ldr	r2, [r7, #24]
 8011316:	6a3b      	ldr	r3, [r7, #32]
 8011318:	4413      	add	r3, r2
 801131a:	693a      	ldr	r2, [r7, #16]
 801131c:	8952      	ldrh	r2, [r2, #10]
 801131e:	4293      	cmp	r3, r2
 8011320:	d905      	bls.n	801132e <f_write+0x1ec>
					cc = fs->csize - csect;
 8011322:	693b      	ldr	r3, [r7, #16]
 8011324:	895b      	ldrh	r3, [r3, #10]
 8011326:	461a      	mov	r2, r3
 8011328:	69bb      	ldr	r3, [r7, #24]
 801132a:	1ad3      	subs	r3, r2, r3
 801132c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801132e:	693b      	ldr	r3, [r7, #16]
 8011330:	7858      	ldrb	r0, [r3, #1]
 8011332:	6a3b      	ldr	r3, [r7, #32]
 8011334:	697a      	ldr	r2, [r7, #20]
 8011336:	69f9      	ldr	r1, [r7, #28]
 8011338:	f7fd fff4 	bl	800f324 <disk_write>
 801133c:	4603      	mov	r3, r0
 801133e:	2b00      	cmp	r3, #0
 8011340:	d009      	beq.n	8011356 <f_write+0x214>
 8011342:	68fb      	ldr	r3, [r7, #12]
 8011344:	2201      	movs	r2, #1
 8011346:	755a      	strb	r2, [r3, #21]
 8011348:	693b      	ldr	r3, [r7, #16]
 801134a:	2101      	movs	r1, #1
 801134c:	4618      	mov	r0, r3
 801134e:	f7fe f93e 	bl	800f5ce <unlock_fs>
 8011352:	2301      	movs	r3, #1
 8011354:	e095      	b.n	8011482 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8011356:	68fb      	ldr	r3, [r7, #12]
 8011358:	6a1a      	ldr	r2, [r3, #32]
 801135a:	697b      	ldr	r3, [r7, #20]
 801135c:	1ad3      	subs	r3, r2, r3
 801135e:	6a3a      	ldr	r2, [r7, #32]
 8011360:	429a      	cmp	r2, r3
 8011362:	d915      	bls.n	8011390 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8011364:	68fb      	ldr	r3, [r7, #12]
 8011366:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 801136a:	68fb      	ldr	r3, [r7, #12]
 801136c:	6a1a      	ldr	r2, [r3, #32]
 801136e:	697b      	ldr	r3, [r7, #20]
 8011370:	1ad3      	subs	r3, r2, r3
 8011372:	025b      	lsls	r3, r3, #9
 8011374:	69fa      	ldr	r2, [r7, #28]
 8011376:	4413      	add	r3, r2
 8011378:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801137c:	4619      	mov	r1, r3
 801137e:	f7fe f892 	bl	800f4a6 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8011382:	68fb      	ldr	r3, [r7, #12]
 8011384:	7d1b      	ldrb	r3, [r3, #20]
 8011386:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801138a:	b2da      	uxtb	r2, r3
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8011390:	6a3b      	ldr	r3, [r7, #32]
 8011392:	025b      	lsls	r3, r3, #9
 8011394:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8011396:	e044      	b.n	8011422 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011398:	68fb      	ldr	r3, [r7, #12]
 801139a:	6a1b      	ldr	r3, [r3, #32]
 801139c:	697a      	ldr	r2, [r7, #20]
 801139e:	429a      	cmp	r2, r3
 80113a0:	d01b      	beq.n	80113da <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 80113a2:	68fb      	ldr	r3, [r7, #12]
 80113a4:	699a      	ldr	r2, [r3, #24]
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80113aa:	429a      	cmp	r2, r3
 80113ac:	d215      	bcs.n	80113da <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80113ae:	693b      	ldr	r3, [r7, #16]
 80113b0:	7858      	ldrb	r0, [r3, #1]
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80113b8:	2301      	movs	r3, #1
 80113ba:	697a      	ldr	r2, [r7, #20]
 80113bc:	f7fd ff92 	bl	800f2e4 <disk_read>
 80113c0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d009      	beq.n	80113da <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	2201      	movs	r2, #1
 80113ca:	755a      	strb	r2, [r3, #21]
 80113cc:	693b      	ldr	r3, [r7, #16]
 80113ce:	2101      	movs	r1, #1
 80113d0:	4618      	mov	r0, r3
 80113d2:	f7fe f8fc 	bl	800f5ce <unlock_fs>
 80113d6:	2301      	movs	r3, #1
 80113d8:	e053      	b.n	8011482 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 80113da:	68fb      	ldr	r3, [r7, #12]
 80113dc:	697a      	ldr	r2, [r7, #20]
 80113de:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80113e0:	68fb      	ldr	r3, [r7, #12]
 80113e2:	699b      	ldr	r3, [r3, #24]
 80113e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80113e8:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80113ec:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80113ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	429a      	cmp	r2, r3
 80113f4:	d901      	bls.n	80113fa <f_write+0x2b8>
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80113fa:	68fb      	ldr	r3, [r7, #12]
 80113fc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	699b      	ldr	r3, [r3, #24]
 8011404:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011408:	4413      	add	r3, r2
 801140a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801140c:	69f9      	ldr	r1, [r7, #28]
 801140e:	4618      	mov	r0, r3
 8011410:	f7fe f849 	bl	800f4a6 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8011414:	68fb      	ldr	r3, [r7, #12]
 8011416:	7d1b      	ldrb	r3, [r3, #20]
 8011418:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801141c:	b2da      	uxtb	r2, r3
 801141e:	68fb      	ldr	r3, [r7, #12]
 8011420:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8011422:	69fa      	ldr	r2, [r7, #28]
 8011424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011426:	4413      	add	r3, r2
 8011428:	61fb      	str	r3, [r7, #28]
 801142a:	68fb      	ldr	r3, [r7, #12]
 801142c:	699a      	ldr	r2, [r3, #24]
 801142e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011430:	441a      	add	r2, r3
 8011432:	68fb      	ldr	r3, [r7, #12]
 8011434:	619a      	str	r2, [r3, #24]
 8011436:	68fb      	ldr	r3, [r7, #12]
 8011438:	68da      	ldr	r2, [r3, #12]
 801143a:	68fb      	ldr	r3, [r7, #12]
 801143c:	699b      	ldr	r3, [r3, #24]
 801143e:	429a      	cmp	r2, r3
 8011440:	bf38      	it	cc
 8011442:	461a      	movcc	r2, r3
 8011444:	68fb      	ldr	r3, [r7, #12]
 8011446:	60da      	str	r2, [r3, #12]
 8011448:	683b      	ldr	r3, [r7, #0]
 801144a:	681a      	ldr	r2, [r3, #0]
 801144c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801144e:	441a      	add	r2, r3
 8011450:	683b      	ldr	r3, [r7, #0]
 8011452:	601a      	str	r2, [r3, #0]
 8011454:	687a      	ldr	r2, [r7, #4]
 8011456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011458:	1ad3      	subs	r3, r2, r3
 801145a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	2b00      	cmp	r3, #0
 8011460:	f47f aeb6 	bne.w	80111d0 <f_write+0x8e>
 8011464:	e000      	b.n	8011468 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011466:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8011468:	68fb      	ldr	r3, [r7, #12]
 801146a:	7d1b      	ldrb	r3, [r3, #20]
 801146c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011470:	b2da      	uxtb	r2, r3
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8011476:	693b      	ldr	r3, [r7, #16]
 8011478:	2100      	movs	r1, #0
 801147a:	4618      	mov	r0, r3
 801147c:	f7fe f8a7 	bl	800f5ce <unlock_fs>
 8011480:	2300      	movs	r3, #0
}
 8011482:	4618      	mov	r0, r3
 8011484:	3730      	adds	r7, #48	@ 0x30
 8011486:	46bd      	mov	sp, r7
 8011488:	bd80      	pop	{r7, pc}

0801148a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801148a:	b580      	push	{r7, lr}
 801148c:	b086      	sub	sp, #24
 801148e:	af00      	add	r7, sp, #0
 8011490:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	f107 0208 	add.w	r2, r7, #8
 8011498:	4611      	mov	r1, r2
 801149a:	4618      	mov	r0, r3
 801149c:	f7ff fbe4 	bl	8010c68 <validate>
 80114a0:	4603      	mov	r3, r0
 80114a2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80114a4:	7dfb      	ldrb	r3, [r7, #23]
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d16d      	bne.n	8011586 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	7d1b      	ldrb	r3, [r3, #20]
 80114ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d067      	beq.n	8011586 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	7d1b      	ldrb	r3, [r3, #20]
 80114ba:	b25b      	sxtb	r3, r3
 80114bc:	2b00      	cmp	r3, #0
 80114be:	da1a      	bge.n	80114f6 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80114c0:	68bb      	ldr	r3, [r7, #8]
 80114c2:	7858      	ldrb	r0, [r3, #1]
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	6a1a      	ldr	r2, [r3, #32]
 80114ce:	2301      	movs	r3, #1
 80114d0:	f7fd ff28 	bl	800f324 <disk_write>
 80114d4:	4603      	mov	r3, r0
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d006      	beq.n	80114e8 <f_sync+0x5e>
 80114da:	68bb      	ldr	r3, [r7, #8]
 80114dc:	2101      	movs	r1, #1
 80114de:	4618      	mov	r0, r3
 80114e0:	f7fe f875 	bl	800f5ce <unlock_fs>
 80114e4:	2301      	movs	r3, #1
 80114e6:	e055      	b.n	8011594 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	7d1b      	ldrb	r3, [r3, #20]
 80114ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80114f0:	b2da      	uxtb	r2, r3
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80114f6:	f7fd fc7b 	bl	800edf0 <get_fattime>
 80114fa:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80114fc:	68ba      	ldr	r2, [r7, #8]
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011502:	4619      	mov	r1, r3
 8011504:	4610      	mov	r0, r2
 8011506:	f7fe f9f1 	bl	800f8ec <move_window>
 801150a:	4603      	mov	r3, r0
 801150c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801150e:	7dfb      	ldrb	r3, [r7, #23]
 8011510:	2b00      	cmp	r3, #0
 8011512:	d138      	bne.n	8011586 <f_sync+0xfc>
					dir = fp->dir_ptr;
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011518:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	330b      	adds	r3, #11
 801151e:	781a      	ldrb	r2, [r3, #0]
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	330b      	adds	r3, #11
 8011524:	f042 0220 	orr.w	r2, r2, #32
 8011528:	b2d2      	uxtb	r2, r2
 801152a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	6818      	ldr	r0, [r3, #0]
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	689b      	ldr	r3, [r3, #8]
 8011534:	461a      	mov	r2, r3
 8011536:	68f9      	ldr	r1, [r7, #12]
 8011538:	f7fe fefb 	bl	8010332 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801153c:	68fb      	ldr	r3, [r7, #12]
 801153e:	f103 021c 	add.w	r2, r3, #28
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	68db      	ldr	r3, [r3, #12]
 8011546:	4619      	mov	r1, r3
 8011548:	4610      	mov	r0, r2
 801154a:	f7fd ff80 	bl	800f44e <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801154e:	68fb      	ldr	r3, [r7, #12]
 8011550:	3316      	adds	r3, #22
 8011552:	6939      	ldr	r1, [r7, #16]
 8011554:	4618      	mov	r0, r3
 8011556:	f7fd ff7a 	bl	800f44e <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	3312      	adds	r3, #18
 801155e:	2100      	movs	r1, #0
 8011560:	4618      	mov	r0, r3
 8011562:	f7fd ff59 	bl	800f418 <st_word>
					fs->wflag = 1;
 8011566:	68bb      	ldr	r3, [r7, #8]
 8011568:	2201      	movs	r2, #1
 801156a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801156c:	68bb      	ldr	r3, [r7, #8]
 801156e:	4618      	mov	r0, r3
 8011570:	f7fe f9ea 	bl	800f948 <sync_fs>
 8011574:	4603      	mov	r3, r0
 8011576:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	7d1b      	ldrb	r3, [r3, #20]
 801157c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011580:	b2da      	uxtb	r2, r3
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8011586:	68bb      	ldr	r3, [r7, #8]
 8011588:	7dfa      	ldrb	r2, [r7, #23]
 801158a:	4611      	mov	r1, r2
 801158c:	4618      	mov	r0, r3
 801158e:	f7fe f81e 	bl	800f5ce <unlock_fs>
 8011592:	7dfb      	ldrb	r3, [r7, #23]
}
 8011594:	4618      	mov	r0, r3
 8011596:	3718      	adds	r7, #24
 8011598:	46bd      	mov	sp, r7
 801159a:	bd80      	pop	{r7, pc}

0801159c <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 801159c:	b580      	push	{r7, lr}
 801159e:	b090      	sub	sp, #64	@ 0x40
 80115a0:	af00      	add	r7, sp, #0
 80115a2:	6078      	str	r0, [r7, #4]
 80115a4:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	f107 0208 	add.w	r2, r7, #8
 80115ac:	4611      	mov	r1, r2
 80115ae:	4618      	mov	r0, r3
 80115b0:	f7ff fb5a 	bl	8010c68 <validate>
 80115b4:	4603      	mov	r3, r0
 80115b6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80115ba:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d103      	bne.n	80115ca <f_lseek+0x2e>
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	7d5b      	ldrb	r3, [r3, #21]
 80115c6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80115ca:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d009      	beq.n	80115e6 <f_lseek+0x4a>
 80115d2:	68bb      	ldr	r3, [r7, #8]
 80115d4:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 80115d8:	4611      	mov	r1, r2
 80115da:	4618      	mov	r0, r3
 80115dc:	f7fd fff7 	bl	800f5ce <unlock_fs>
 80115e0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80115e4:	e229      	b.n	8011a3a <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	f000 80ea 	beq.w	80117c4 <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80115f0:	683b      	ldr	r3, [r7, #0]
 80115f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80115f6:	d164      	bne.n	80116c2 <f_lseek+0x126>
			tbl = fp->cltbl;
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80115fc:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80115fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011600:	1d1a      	adds	r2, r3, #4
 8011602:	627a      	str	r2, [r7, #36]	@ 0x24
 8011604:	681b      	ldr	r3, [r3, #0]
 8011606:	617b      	str	r3, [r7, #20]
 8011608:	2302      	movs	r3, #2
 801160a:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	689b      	ldr	r3, [r3, #8]
 8011610:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8011612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011614:	2b00      	cmp	r3, #0
 8011616:	d044      	beq.n	80116a2 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8011618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801161a:	613b      	str	r3, [r7, #16]
 801161c:	2300      	movs	r3, #0
 801161e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011622:	3302      	adds	r3, #2
 8011624:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8011626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011628:	60fb      	str	r3, [r7, #12]
 801162a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801162c:	3301      	adds	r3, #1
 801162e:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8011634:	4618      	mov	r0, r3
 8011636:	f7fe fa14 	bl	800fa62 <get_fat>
 801163a:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 801163c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801163e:	2b01      	cmp	r3, #1
 8011640:	d809      	bhi.n	8011656 <f_lseek+0xba>
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	2202      	movs	r2, #2
 8011646:	755a      	strb	r2, [r3, #21]
 8011648:	68bb      	ldr	r3, [r7, #8]
 801164a:	2102      	movs	r1, #2
 801164c:	4618      	mov	r0, r3
 801164e:	f7fd ffbe 	bl	800f5ce <unlock_fs>
 8011652:	2302      	movs	r3, #2
 8011654:	e1f1      	b.n	8011a3a <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011658:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801165c:	d109      	bne.n	8011672 <f_lseek+0xd6>
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	2201      	movs	r2, #1
 8011662:	755a      	strb	r2, [r3, #21]
 8011664:	68bb      	ldr	r3, [r7, #8]
 8011666:	2101      	movs	r1, #1
 8011668:	4618      	mov	r0, r3
 801166a:	f7fd ffb0 	bl	800f5ce <unlock_fs>
 801166e:	2301      	movs	r3, #1
 8011670:	e1e3      	b.n	8011a3a <f_lseek+0x49e>
					} while (cl == pcl + 1);
 8011672:	68fb      	ldr	r3, [r7, #12]
 8011674:	3301      	adds	r3, #1
 8011676:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011678:	429a      	cmp	r2, r3
 801167a:	d0d4      	beq.n	8011626 <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 801167c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801167e:	697b      	ldr	r3, [r7, #20]
 8011680:	429a      	cmp	r2, r3
 8011682:	d809      	bhi.n	8011698 <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 8011684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011686:	1d1a      	adds	r2, r3, #4
 8011688:	627a      	str	r2, [r7, #36]	@ 0x24
 801168a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801168c:	601a      	str	r2, [r3, #0]
 801168e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011690:	1d1a      	adds	r2, r3, #4
 8011692:	627a      	str	r2, [r7, #36]	@ 0x24
 8011694:	693a      	ldr	r2, [r7, #16]
 8011696:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8011698:	68bb      	ldr	r3, [r7, #8]
 801169a:	699b      	ldr	r3, [r3, #24]
 801169c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801169e:	429a      	cmp	r2, r3
 80116a0:	d3ba      	bcc.n	8011618 <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80116a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80116a8:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80116aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80116ac:	697b      	ldr	r3, [r7, #20]
 80116ae:	429a      	cmp	r2, r3
 80116b0:	d803      	bhi.n	80116ba <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 80116b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116b4:	2200      	movs	r2, #0
 80116b6:	601a      	str	r2, [r3, #0]
 80116b8:	e1b6      	b.n	8011a28 <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80116ba:	2311      	movs	r3, #17
 80116bc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80116c0:	e1b2      	b.n	8011a28 <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	68db      	ldr	r3, [r3, #12]
 80116c6:	683a      	ldr	r2, [r7, #0]
 80116c8:	429a      	cmp	r2, r3
 80116ca:	d902      	bls.n	80116d2 <f_lseek+0x136>
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	68db      	ldr	r3, [r3, #12]
 80116d0:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	683a      	ldr	r2, [r7, #0]
 80116d6:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80116d8:	683b      	ldr	r3, [r7, #0]
 80116da:	2b00      	cmp	r3, #0
 80116dc:	f000 81a4 	beq.w	8011a28 <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 80116e0:	683b      	ldr	r3, [r7, #0]
 80116e2:	3b01      	subs	r3, #1
 80116e4:	4619      	mov	r1, r3
 80116e6:	6878      	ldr	r0, [r7, #4]
 80116e8:	f7fe fc49 	bl	800ff7e <clmt_clust>
 80116ec:	4602      	mov	r2, r0
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80116f2:	68ba      	ldr	r2, [r7, #8]
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	69db      	ldr	r3, [r3, #28]
 80116f8:	4619      	mov	r1, r3
 80116fa:	4610      	mov	r0, r2
 80116fc:	f7fe f992 	bl	800fa24 <clust2sect>
 8011700:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8011702:	69bb      	ldr	r3, [r7, #24]
 8011704:	2b00      	cmp	r3, #0
 8011706:	d109      	bne.n	801171c <f_lseek+0x180>
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	2202      	movs	r2, #2
 801170c:	755a      	strb	r2, [r3, #21]
 801170e:	68bb      	ldr	r3, [r7, #8]
 8011710:	2102      	movs	r1, #2
 8011712:	4618      	mov	r0, r3
 8011714:	f7fd ff5b 	bl	800f5ce <unlock_fs>
 8011718:	2302      	movs	r3, #2
 801171a:	e18e      	b.n	8011a3a <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 801171c:	683b      	ldr	r3, [r7, #0]
 801171e:	3b01      	subs	r3, #1
 8011720:	0a5b      	lsrs	r3, r3, #9
 8011722:	68ba      	ldr	r2, [r7, #8]
 8011724:	8952      	ldrh	r2, [r2, #10]
 8011726:	3a01      	subs	r2, #1
 8011728:	4013      	ands	r3, r2
 801172a:	69ba      	ldr	r2, [r7, #24]
 801172c:	4413      	add	r3, r2
 801172e:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	699b      	ldr	r3, [r3, #24]
 8011734:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011738:	2b00      	cmp	r3, #0
 801173a:	f000 8175 	beq.w	8011a28 <f_lseek+0x48c>
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	6a1b      	ldr	r3, [r3, #32]
 8011742:	69ba      	ldr	r2, [r7, #24]
 8011744:	429a      	cmp	r2, r3
 8011746:	f000 816f 	beq.w	8011a28 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	7d1b      	ldrb	r3, [r3, #20]
 801174e:	b25b      	sxtb	r3, r3
 8011750:	2b00      	cmp	r3, #0
 8011752:	da1d      	bge.n	8011790 <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011754:	68bb      	ldr	r3, [r7, #8]
 8011756:	7858      	ldrb	r0, [r3, #1]
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	6a1a      	ldr	r2, [r3, #32]
 8011762:	2301      	movs	r3, #1
 8011764:	f7fd fdde 	bl	800f324 <disk_write>
 8011768:	4603      	mov	r3, r0
 801176a:	2b00      	cmp	r3, #0
 801176c:	d009      	beq.n	8011782 <f_lseek+0x1e6>
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	2201      	movs	r2, #1
 8011772:	755a      	strb	r2, [r3, #21]
 8011774:	68bb      	ldr	r3, [r7, #8]
 8011776:	2101      	movs	r1, #1
 8011778:	4618      	mov	r0, r3
 801177a:	f7fd ff28 	bl	800f5ce <unlock_fs>
 801177e:	2301      	movs	r3, #1
 8011780:	e15b      	b.n	8011a3a <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	7d1b      	ldrb	r3, [r3, #20]
 8011786:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801178a:	b2da      	uxtb	r2, r3
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8011790:	68bb      	ldr	r3, [r7, #8]
 8011792:	7858      	ldrb	r0, [r3, #1]
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801179a:	2301      	movs	r3, #1
 801179c:	69ba      	ldr	r2, [r7, #24]
 801179e:	f7fd fda1 	bl	800f2e4 <disk_read>
 80117a2:	4603      	mov	r3, r0
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d009      	beq.n	80117bc <f_lseek+0x220>
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	2201      	movs	r2, #1
 80117ac:	755a      	strb	r2, [r3, #21]
 80117ae:	68bb      	ldr	r3, [r7, #8]
 80117b0:	2101      	movs	r1, #1
 80117b2:	4618      	mov	r0, r3
 80117b4:	f7fd ff0b 	bl	800f5ce <unlock_fs>
 80117b8:	2301      	movs	r3, #1
 80117ba:	e13e      	b.n	8011a3a <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	69ba      	ldr	r2, [r7, #24]
 80117c0:	621a      	str	r2, [r3, #32]
 80117c2:	e131      	b.n	8011a28 <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	68db      	ldr	r3, [r3, #12]
 80117c8:	683a      	ldr	r2, [r7, #0]
 80117ca:	429a      	cmp	r2, r3
 80117cc:	d908      	bls.n	80117e0 <f_lseek+0x244>
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	7d1b      	ldrb	r3, [r3, #20]
 80117d2:	f003 0302 	and.w	r3, r3, #2
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d102      	bne.n	80117e0 <f_lseek+0x244>
			ofs = fp->obj.objsize;
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	68db      	ldr	r3, [r3, #12]
 80117de:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	699b      	ldr	r3, [r3, #24]
 80117e4:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80117e6:	2300      	movs	r3, #0
 80117e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80117ee:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80117f0:	683b      	ldr	r3, [r7, #0]
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	f000 80c0 	beq.w	8011978 <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80117f8:	68bb      	ldr	r3, [r7, #8]
 80117fa:	895b      	ldrh	r3, [r3, #10]
 80117fc:	025b      	lsls	r3, r3, #9
 80117fe:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8011800:	6a3b      	ldr	r3, [r7, #32]
 8011802:	2b00      	cmp	r3, #0
 8011804:	d01b      	beq.n	801183e <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8011806:	683b      	ldr	r3, [r7, #0]
 8011808:	1e5a      	subs	r2, r3, #1
 801180a:	69fb      	ldr	r3, [r7, #28]
 801180c:	fbb2 f2f3 	udiv	r2, r2, r3
 8011810:	6a3b      	ldr	r3, [r7, #32]
 8011812:	1e59      	subs	r1, r3, #1
 8011814:	69fb      	ldr	r3, [r7, #28]
 8011816:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 801181a:	429a      	cmp	r2, r3
 801181c:	d30f      	bcc.n	801183e <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 801181e:	6a3b      	ldr	r3, [r7, #32]
 8011820:	1e5a      	subs	r2, r3, #1
 8011822:	69fb      	ldr	r3, [r7, #28]
 8011824:	425b      	negs	r3, r3
 8011826:	401a      	ands	r2, r3
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	699b      	ldr	r3, [r3, #24]
 8011830:	683a      	ldr	r2, [r7, #0]
 8011832:	1ad3      	subs	r3, r2, r3
 8011834:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	69db      	ldr	r3, [r3, #28]
 801183a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801183c:	e02c      	b.n	8011898 <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	689b      	ldr	r3, [r3, #8]
 8011842:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8011844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011846:	2b00      	cmp	r3, #0
 8011848:	d123      	bne.n	8011892 <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	2100      	movs	r1, #0
 801184e:	4618      	mov	r0, r3
 8011850:	f7fe fafd 	bl	800fe4e <create_chain>
 8011854:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011858:	2b01      	cmp	r3, #1
 801185a:	d109      	bne.n	8011870 <f_lseek+0x2d4>
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	2202      	movs	r2, #2
 8011860:	755a      	strb	r2, [r3, #21]
 8011862:	68bb      	ldr	r3, [r7, #8]
 8011864:	2102      	movs	r1, #2
 8011866:	4618      	mov	r0, r3
 8011868:	f7fd feb1 	bl	800f5ce <unlock_fs>
 801186c:	2302      	movs	r3, #2
 801186e:	e0e4      	b.n	8011a3a <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011872:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011876:	d109      	bne.n	801188c <f_lseek+0x2f0>
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	2201      	movs	r2, #1
 801187c:	755a      	strb	r2, [r3, #21]
 801187e:	68bb      	ldr	r3, [r7, #8]
 8011880:	2101      	movs	r1, #1
 8011882:	4618      	mov	r0, r3
 8011884:	f7fd fea3 	bl	800f5ce <unlock_fs>
 8011888:	2301      	movs	r3, #1
 801188a:	e0d6      	b.n	8011a3a <f_lseek+0x49e>
					fp->obj.sclust = clst;
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011890:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011896:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8011898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801189a:	2b00      	cmp	r3, #0
 801189c:	d06c      	beq.n	8011978 <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 801189e:	e044      	b.n	801192a <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 80118a0:	683a      	ldr	r2, [r7, #0]
 80118a2:	69fb      	ldr	r3, [r7, #28]
 80118a4:	1ad3      	subs	r3, r2, r3
 80118a6:	603b      	str	r3, [r7, #0]
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	699a      	ldr	r2, [r3, #24]
 80118ac:	69fb      	ldr	r3, [r7, #28]
 80118ae:	441a      	add	r2, r3
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	7d1b      	ldrb	r3, [r3, #20]
 80118b8:	f003 0302 	and.w	r3, r3, #2
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d00b      	beq.n	80118d8 <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80118c4:	4618      	mov	r0, r3
 80118c6:	f7fe fac2 	bl	800fe4e <create_chain>
 80118ca:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80118cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d108      	bne.n	80118e4 <f_lseek+0x348>
							ofs = 0; break;
 80118d2:	2300      	movs	r3, #0
 80118d4:	603b      	str	r3, [r7, #0]
 80118d6:	e02c      	b.n	8011932 <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80118dc:	4618      	mov	r0, r3
 80118de:	f7fe f8c0 	bl	800fa62 <get_fat>
 80118e2:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80118e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80118ea:	d109      	bne.n	8011900 <f_lseek+0x364>
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	2201      	movs	r2, #1
 80118f0:	755a      	strb	r2, [r3, #21]
 80118f2:	68bb      	ldr	r3, [r7, #8]
 80118f4:	2101      	movs	r1, #1
 80118f6:	4618      	mov	r0, r3
 80118f8:	f7fd fe69 	bl	800f5ce <unlock_fs>
 80118fc:	2301      	movs	r3, #1
 80118fe:	e09c      	b.n	8011a3a <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8011900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011902:	2b01      	cmp	r3, #1
 8011904:	d904      	bls.n	8011910 <f_lseek+0x374>
 8011906:	68bb      	ldr	r3, [r7, #8]
 8011908:	699b      	ldr	r3, [r3, #24]
 801190a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801190c:	429a      	cmp	r2, r3
 801190e:	d309      	bcc.n	8011924 <f_lseek+0x388>
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	2202      	movs	r2, #2
 8011914:	755a      	strb	r2, [r3, #21]
 8011916:	68bb      	ldr	r3, [r7, #8]
 8011918:	2102      	movs	r1, #2
 801191a:	4618      	mov	r0, r3
 801191c:	f7fd fe57 	bl	800f5ce <unlock_fs>
 8011920:	2302      	movs	r3, #2
 8011922:	e08a      	b.n	8011a3a <f_lseek+0x49e>
					fp->clust = clst;
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011928:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 801192a:	683a      	ldr	r2, [r7, #0]
 801192c:	69fb      	ldr	r3, [r7, #28]
 801192e:	429a      	cmp	r2, r3
 8011930:	d8b6      	bhi.n	80118a0 <f_lseek+0x304>
				}
				fp->fptr += ofs;
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	699a      	ldr	r2, [r3, #24]
 8011936:	683b      	ldr	r3, [r7, #0]
 8011938:	441a      	add	r2, r3
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 801193e:	683b      	ldr	r3, [r7, #0]
 8011940:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011944:	2b00      	cmp	r3, #0
 8011946:	d017      	beq.n	8011978 <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8011948:	68bb      	ldr	r3, [r7, #8]
 801194a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801194c:	4618      	mov	r0, r3
 801194e:	f7fe f869 	bl	800fa24 <clust2sect>
 8011952:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8011954:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011956:	2b00      	cmp	r3, #0
 8011958:	d109      	bne.n	801196e <f_lseek+0x3d2>
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	2202      	movs	r2, #2
 801195e:	755a      	strb	r2, [r3, #21]
 8011960:	68bb      	ldr	r3, [r7, #8]
 8011962:	2102      	movs	r1, #2
 8011964:	4618      	mov	r0, r3
 8011966:	f7fd fe32 	bl	800f5ce <unlock_fs>
 801196a:	2302      	movs	r3, #2
 801196c:	e065      	b.n	8011a3a <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 801196e:	683b      	ldr	r3, [r7, #0]
 8011970:	0a5b      	lsrs	r3, r3, #9
 8011972:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011974:	4413      	add	r3, r2
 8011976:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	699a      	ldr	r2, [r3, #24]
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	68db      	ldr	r3, [r3, #12]
 8011980:	429a      	cmp	r2, r3
 8011982:	d90a      	bls.n	801199a <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	699a      	ldr	r2, [r3, #24]
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	7d1b      	ldrb	r3, [r3, #20]
 8011990:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011994:	b2da      	uxtb	r2, r3
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	699b      	ldr	r3, [r3, #24]
 801199e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d040      	beq.n	8011a28 <f_lseek+0x48c>
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	6a1b      	ldr	r3, [r3, #32]
 80119aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80119ac:	429a      	cmp	r2, r3
 80119ae:	d03b      	beq.n	8011a28 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	7d1b      	ldrb	r3, [r3, #20]
 80119b4:	b25b      	sxtb	r3, r3
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	da1d      	bge.n	80119f6 <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80119ba:	68bb      	ldr	r3, [r7, #8]
 80119bc:	7858      	ldrb	r0, [r3, #1]
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	6a1a      	ldr	r2, [r3, #32]
 80119c8:	2301      	movs	r3, #1
 80119ca:	f7fd fcab 	bl	800f324 <disk_write>
 80119ce:	4603      	mov	r3, r0
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	d009      	beq.n	80119e8 <f_lseek+0x44c>
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	2201      	movs	r2, #1
 80119d8:	755a      	strb	r2, [r3, #21]
 80119da:	68bb      	ldr	r3, [r7, #8]
 80119dc:	2101      	movs	r1, #1
 80119de:	4618      	mov	r0, r3
 80119e0:	f7fd fdf5 	bl	800f5ce <unlock_fs>
 80119e4:	2301      	movs	r3, #1
 80119e6:	e028      	b.n	8011a3a <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	7d1b      	ldrb	r3, [r3, #20]
 80119ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80119f0:	b2da      	uxtb	r2, r3
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80119f6:	68bb      	ldr	r3, [r7, #8]
 80119f8:	7858      	ldrb	r0, [r3, #1]
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011a00:	2301      	movs	r3, #1
 8011a02:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011a04:	f7fd fc6e 	bl	800f2e4 <disk_read>
 8011a08:	4603      	mov	r3, r0
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d009      	beq.n	8011a22 <f_lseek+0x486>
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	2201      	movs	r2, #1
 8011a12:	755a      	strb	r2, [r3, #21]
 8011a14:	68bb      	ldr	r3, [r7, #8]
 8011a16:	2101      	movs	r1, #1
 8011a18:	4618      	mov	r0, r3
 8011a1a:	f7fd fdd8 	bl	800f5ce <unlock_fs>
 8011a1e:	2301      	movs	r3, #1
 8011a20:	e00b      	b.n	8011a3a <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011a26:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8011a28:	68bb      	ldr	r3, [r7, #8]
 8011a2a:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8011a2e:	4611      	mov	r1, r2
 8011a30:	4618      	mov	r0, r3
 8011a32:	f7fd fdcc 	bl	800f5ce <unlock_fs>
 8011a36:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8011a3a:	4618      	mov	r0, r3
 8011a3c:	3740      	adds	r7, #64	@ 0x40
 8011a3e:	46bd      	mov	sp, r7
 8011a40:	bd80      	pop	{r7, pc}

08011a42 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8011a42:	b580      	push	{r7, lr}
 8011a44:	b084      	sub	sp, #16
 8011a46:	af00      	add	r7, sp, #0
 8011a48:	6078      	str	r0, [r7, #4]
 8011a4a:	460b      	mov	r3, r1
 8011a4c:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8011a4e:	78fb      	ldrb	r3, [r7, #3]
 8011a50:	2b0a      	cmp	r3, #10
 8011a52:	d103      	bne.n	8011a5c <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8011a54:	210d      	movs	r1, #13
 8011a56:	6878      	ldr	r0, [r7, #4]
 8011a58:	f7ff fff3 	bl	8011a42 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	685b      	ldr	r3, [r3, #4]
 8011a60:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8011a62:	68fb      	ldr	r3, [r7, #12]
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	db25      	blt.n	8011ab4 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8011a68:	68fb      	ldr	r3, [r7, #12]
 8011a6a:	1c5a      	adds	r2, r3, #1
 8011a6c:	60fa      	str	r2, [r7, #12]
 8011a6e:	687a      	ldr	r2, [r7, #4]
 8011a70:	4413      	add	r3, r2
 8011a72:	78fa      	ldrb	r2, [r7, #3]
 8011a74:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8011a76:	68fb      	ldr	r3, [r7, #12]
 8011a78:	2b3c      	cmp	r3, #60	@ 0x3c
 8011a7a:	dd12      	ble.n	8011aa2 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	6818      	ldr	r0, [r3, #0]
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	f103 010c 	add.w	r1, r3, #12
 8011a86:	68fa      	ldr	r2, [r7, #12]
 8011a88:	f107 0308 	add.w	r3, r7, #8
 8011a8c:	f7ff fb59 	bl	8011142 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8011a90:	68ba      	ldr	r2, [r7, #8]
 8011a92:	68fb      	ldr	r3, [r7, #12]
 8011a94:	429a      	cmp	r2, r3
 8011a96:	d101      	bne.n	8011a9c <putc_bfd+0x5a>
 8011a98:	2300      	movs	r3, #0
 8011a9a:	e001      	b.n	8011aa0 <putc_bfd+0x5e>
 8011a9c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011aa0:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	68fa      	ldr	r2, [r7, #12]
 8011aa6:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	689b      	ldr	r3, [r3, #8]
 8011aac:	1c5a      	adds	r2, r3, #1
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	609a      	str	r2, [r3, #8]
 8011ab2:	e000      	b.n	8011ab6 <putc_bfd+0x74>
	if (i < 0) return;
 8011ab4:	bf00      	nop
}
 8011ab6:	3710      	adds	r7, #16
 8011ab8:	46bd      	mov	sp, r7
 8011aba:	bd80      	pop	{r7, pc}

08011abc <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8011abc:	b580      	push	{r7, lr}
 8011abe:	b084      	sub	sp, #16
 8011ac0:	af00      	add	r7, sp, #0
 8011ac2:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	685b      	ldr	r3, [r3, #4]
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	db16      	blt.n	8011afa <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	6818      	ldr	r0, [r3, #0]
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	f103 010c 	add.w	r1, r3, #12
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	685b      	ldr	r3, [r3, #4]
 8011ada:	461a      	mov	r2, r3
 8011adc:	f107 030c 	add.w	r3, r7, #12
 8011ae0:	f7ff fb2f 	bl	8011142 <f_write>
 8011ae4:	4603      	mov	r3, r0
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d107      	bne.n	8011afa <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	685b      	ldr	r3, [r3, #4]
 8011aee:	68fa      	ldr	r2, [r7, #12]
 8011af0:	4293      	cmp	r3, r2
 8011af2:	d102      	bne.n	8011afa <putc_flush+0x3e>
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	689b      	ldr	r3, [r3, #8]
 8011af8:	e001      	b.n	8011afe <putc_flush+0x42>
	return EOF;
 8011afa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8011afe:	4618      	mov	r0, r3
 8011b00:	3710      	adds	r7, #16
 8011b02:	46bd      	mov	sp, r7
 8011b04:	bd80      	pop	{r7, pc}

08011b06 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8011b06:	b480      	push	{r7}
 8011b08:	b083      	sub	sp, #12
 8011b0a:	af00      	add	r7, sp, #0
 8011b0c:	6078      	str	r0, [r7, #4]
 8011b0e:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	683a      	ldr	r2, [r7, #0]
 8011b14:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	2200      	movs	r2, #0
 8011b1a:	605a      	str	r2, [r3, #4]
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	685a      	ldr	r2, [r3, #4]
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	609a      	str	r2, [r3, #8]
}
 8011b24:	bf00      	nop
 8011b26:	370c      	adds	r7, #12
 8011b28:	46bd      	mov	sp, r7
 8011b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b2e:	4770      	bx	lr

08011b30 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 8011b30:	b40e      	push	{r1, r2, r3}
 8011b32:	b580      	push	{r7, lr}
 8011b34:	b0a7      	sub	sp, #156	@ 0x9c
 8011b36:	af00      	add	r7, sp, #0
 8011b38:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 8011b3a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011b3e:	6879      	ldr	r1, [r7, #4]
 8011b40:	4618      	mov	r0, r3
 8011b42:	f7ff ffe0 	bl	8011b06 <putc_init>

	va_start(arp, fmt);
 8011b46:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8011b4a:	67bb      	str	r3, [r7, #120]	@ 0x78

	for (;;) {
		c = *fmt++;
 8011b4c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011b50:	1c5a      	adds	r2, r3, #1
 8011b52:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8011b56:	781b      	ldrb	r3, [r3, #0]
 8011b58:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == 0) break;			/* End of string */
 8011b5c:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	f000 81f2 	beq.w	8011f4a <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 8011b66:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011b6a:	2b25      	cmp	r3, #37	@ 0x25
 8011b6c:	d008      	beq.n	8011b80 <f_printf+0x50>
			putc_bfd(&pb, c);
 8011b6e:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 8011b72:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011b76:	4611      	mov	r1, r2
 8011b78:	4618      	mov	r0, r3
 8011b7a:	f7ff ff62 	bl	8011a42 <putc_bfd>
			continue;
 8011b7e:	e1e3      	b.n	8011f48 <f_printf+0x418>
		}
		w = f = 0;
 8011b80:	2300      	movs	r3, #0
 8011b82:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8011b86:	2300      	movs	r3, #0
 8011b88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
		c = *fmt++;
 8011b8c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011b90:	1c5a      	adds	r2, r3, #1
 8011b92:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8011b96:	781b      	ldrb	r3, [r3, #0]
 8011b98:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == '0') {				/* Flag: '0' padding */
 8011b9c:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011ba0:	2b30      	cmp	r3, #48	@ 0x30
 8011ba2:	d10b      	bne.n	8011bbc <f_printf+0x8c>
			f = 1; c = *fmt++;
 8011ba4:	2301      	movs	r3, #1
 8011ba6:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8011baa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011bae:	1c5a      	adds	r2, r3, #1
 8011bb0:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8011bb4:	781b      	ldrb	r3, [r3, #0]
 8011bb6:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 8011bba:	e024      	b.n	8011c06 <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 8011bbc:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011bc0:	2b2d      	cmp	r3, #45	@ 0x2d
 8011bc2:	d120      	bne.n	8011c06 <f_printf+0xd6>
				f = 2; c = *fmt++;
 8011bc4:	2302      	movs	r3, #2
 8011bc6:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8011bca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011bce:	1c5a      	adds	r2, r3, #1
 8011bd0:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8011bd4:	781b      	ldrb	r3, [r3, #0]
 8011bd6:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 8011bda:	e014      	b.n	8011c06 <f_printf+0xd6>
			w = w * 10 + c - '0';
 8011bdc:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8011be0:	4613      	mov	r3, r2
 8011be2:	009b      	lsls	r3, r3, #2
 8011be4:	4413      	add	r3, r2
 8011be6:	005b      	lsls	r3, r3, #1
 8011be8:	461a      	mov	r2, r3
 8011bea:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011bee:	4413      	add	r3, r2
 8011bf0:	3b30      	subs	r3, #48	@ 0x30
 8011bf2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			c = *fmt++;
 8011bf6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011bfa:	1c5a      	adds	r2, r3, #1
 8011bfc:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8011c00:	781b      	ldrb	r3, [r3, #0]
 8011c02:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		while (IsDigit(c)) {		/* Precision */
 8011c06:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011c0a:	2b2f      	cmp	r3, #47	@ 0x2f
 8011c0c:	d903      	bls.n	8011c16 <f_printf+0xe6>
 8011c0e:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011c12:	2b39      	cmp	r3, #57	@ 0x39
 8011c14:	d9e2      	bls.n	8011bdc <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 8011c16:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011c1a:	2b6c      	cmp	r3, #108	@ 0x6c
 8011c1c:	d003      	beq.n	8011c26 <f_printf+0xf6>
 8011c1e:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011c22:	2b4c      	cmp	r3, #76	@ 0x4c
 8011c24:	d10d      	bne.n	8011c42 <f_printf+0x112>
			f |= 4; c = *fmt++;
 8011c26:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8011c2a:	f043 0304 	orr.w	r3, r3, #4
 8011c2e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8011c32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011c36:	1c5a      	adds	r2, r3, #1
 8011c38:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8011c3c:	781b      	ldrb	r3, [r3, #0]
 8011c3e:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		}
		if (!c) break;
 8011c42:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	f000 8181 	beq.w	8011f4e <f_printf+0x41e>
		d = c;
 8011c4c:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011c50:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		if (IsLower(d)) d -= 0x20;
 8011c54:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8011c58:	2b60      	cmp	r3, #96	@ 0x60
 8011c5a:	d908      	bls.n	8011c6e <f_printf+0x13e>
 8011c5c:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8011c60:	2b7a      	cmp	r3, #122	@ 0x7a
 8011c62:	d804      	bhi.n	8011c6e <f_printf+0x13e>
 8011c64:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8011c68:	3b20      	subs	r3, #32
 8011c6a:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		switch (d) {				/* Type is... */
 8011c6e:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8011c72:	3b42      	subs	r3, #66	@ 0x42
 8011c74:	2b16      	cmp	r3, #22
 8011c76:	f200 8098 	bhi.w	8011daa <f_printf+0x27a>
 8011c7a:	a201      	add	r2, pc, #4	@ (adr r2, 8011c80 <f_printf+0x150>)
 8011c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c80:	08011d8b 	.word	0x08011d8b
 8011c84:	08011d73 	.word	0x08011d73
 8011c88:	08011d9b 	.word	0x08011d9b
 8011c8c:	08011dab 	.word	0x08011dab
 8011c90:	08011dab 	.word	0x08011dab
 8011c94:	08011dab 	.word	0x08011dab
 8011c98:	08011dab 	.word	0x08011dab
 8011c9c:	08011dab 	.word	0x08011dab
 8011ca0:	08011dab 	.word	0x08011dab
 8011ca4:	08011dab 	.word	0x08011dab
 8011ca8:	08011dab 	.word	0x08011dab
 8011cac:	08011dab 	.word	0x08011dab
 8011cb0:	08011dab 	.word	0x08011dab
 8011cb4:	08011d93 	.word	0x08011d93
 8011cb8:	08011dab 	.word	0x08011dab
 8011cbc:	08011dab 	.word	0x08011dab
 8011cc0:	08011dab 	.word	0x08011dab
 8011cc4:	08011cdd 	.word	0x08011cdd
 8011cc8:	08011dab 	.word	0x08011dab
 8011ccc:	08011d9b 	.word	0x08011d9b
 8011cd0:	08011dab 	.word	0x08011dab
 8011cd4:	08011dab 	.word	0x08011dab
 8011cd8:	08011da3 	.word	0x08011da3
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 8011cdc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011cde:	1d1a      	adds	r2, r3, #4
 8011ce0:	67ba      	str	r2, [r7, #120]	@ 0x78
 8011ce2:	681b      	ldr	r3, [r3, #0]
 8011ce4:	67fb      	str	r3, [r7, #124]	@ 0x7c
			for (j = 0; p[j]; j++) ;
 8011ce6:	2300      	movs	r3, #0
 8011ce8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8011cec:	e004      	b.n	8011cf8 <f_printf+0x1c8>
 8011cee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011cf2:	3301      	adds	r3, #1
 8011cf4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8011cf8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8011cfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011cfe:	4413      	add	r3, r2
 8011d00:	781b      	ldrb	r3, [r3, #0]
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d1f3      	bne.n	8011cee <f_printf+0x1be>
			if (!(f & 2)) {
 8011d06:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8011d0a:	f003 0302 	and.w	r3, r3, #2
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d11a      	bne.n	8011d48 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 8011d12:	e005      	b.n	8011d20 <f_printf+0x1f0>
 8011d14:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011d18:	2120      	movs	r1, #32
 8011d1a:	4618      	mov	r0, r3
 8011d1c:	f7ff fe91 	bl	8011a42 <putc_bfd>
 8011d20:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011d24:	1c5a      	adds	r2, r3, #1
 8011d26:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8011d2a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8011d2e:	429a      	cmp	r2, r3
 8011d30:	d8f0      	bhi.n	8011d14 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 8011d32:	e009      	b.n	8011d48 <f_printf+0x218>
 8011d34:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011d36:	1c5a      	adds	r2, r3, #1
 8011d38:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8011d3a:	781a      	ldrb	r2, [r3, #0]
 8011d3c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011d40:	4611      	mov	r1, r2
 8011d42:	4618      	mov	r0, r3
 8011d44:	f7ff fe7d 	bl	8011a42 <putc_bfd>
 8011d48:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011d4a:	781b      	ldrb	r3, [r3, #0]
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d1f1      	bne.n	8011d34 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 8011d50:	e005      	b.n	8011d5e <f_printf+0x22e>
 8011d52:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011d56:	2120      	movs	r1, #32
 8011d58:	4618      	mov	r0, r3
 8011d5a:	f7ff fe72 	bl	8011a42 <putc_bfd>
 8011d5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011d62:	1c5a      	adds	r2, r3, #1
 8011d64:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8011d68:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8011d6c:	429a      	cmp	r2, r3
 8011d6e:	d8f0      	bhi.n	8011d52 <f_printf+0x222>
			continue;
 8011d70:	e0ea      	b.n	8011f48 <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 8011d72:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011d74:	1d1a      	adds	r2, r3, #4
 8011d76:	67ba      	str	r2, [r7, #120]	@ 0x78
 8011d78:	681b      	ldr	r3, [r3, #0]
 8011d7a:	b2da      	uxtb	r2, r3
 8011d7c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011d80:	4611      	mov	r1, r2
 8011d82:	4618      	mov	r0, r3
 8011d84:	f7ff fe5d 	bl	8011a42 <putc_bfd>
 8011d88:	e0de      	b.n	8011f48 <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 8011d8a:	2302      	movs	r3, #2
 8011d8c:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8011d90:	e014      	b.n	8011dbc <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 8011d92:	2308      	movs	r3, #8
 8011d94:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8011d98:	e010      	b.n	8011dbc <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 8011d9a:	230a      	movs	r3, #10
 8011d9c:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8011da0:	e00c      	b.n	8011dbc <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 8011da2:	2310      	movs	r3, #16
 8011da4:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8011da8:	e008      	b.n	8011dbc <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 8011daa:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 8011dae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011db2:	4611      	mov	r1, r2
 8011db4:	4618      	mov	r0, r3
 8011db6:	f7ff fe44 	bl	8011a42 <putc_bfd>
 8011dba:	e0c5      	b.n	8011f48 <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8011dbc:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8011dc0:	f003 0304 	and.w	r3, r3, #4
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d004      	beq.n	8011dd2 <f_printf+0x2a2>
 8011dc8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011dca:	1d1a      	adds	r2, r3, #4
 8011dcc:	67ba      	str	r2, [r7, #120]	@ 0x78
 8011dce:	681b      	ldr	r3, [r3, #0]
 8011dd0:	e00c      	b.n	8011dec <f_printf+0x2bc>
 8011dd2:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8011dd6:	2b44      	cmp	r3, #68	@ 0x44
 8011dd8:	d104      	bne.n	8011de4 <f_printf+0x2b4>
 8011dda:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011ddc:	1d1a      	adds	r2, r3, #4
 8011dde:	67ba      	str	r2, [r7, #120]	@ 0x78
 8011de0:	681b      	ldr	r3, [r3, #0]
 8011de2:	e003      	b.n	8011dec <f_printf+0x2bc>
 8011de4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011de6:	1d1a      	adds	r2, r3, #4
 8011de8:	67ba      	str	r2, [r7, #120]	@ 0x78
 8011dea:	681b      	ldr	r3, [r3, #0]
 8011dec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		if (d == 'D' && (v & 0x80000000)) {
 8011df0:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8011df4:	2b44      	cmp	r3, #68	@ 0x44
 8011df6:	d10e      	bne.n	8011e16 <f_printf+0x2e6>
 8011df8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	da0a      	bge.n	8011e16 <f_printf+0x2e6>
			v = 0 - v;
 8011e00:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011e04:	425b      	negs	r3, r3
 8011e06:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			f |= 8;
 8011e0a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8011e0e:	f043 0308 	orr.w	r3, r3, #8
 8011e12:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		}
		i = 0;
 8011e16:	2300      	movs	r3, #0
 8011e18:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 8011e1c:	f897 2096 	ldrb.w	r2, [r7, #150]	@ 0x96
 8011e20:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011e24:	fbb3 f1f2 	udiv	r1, r3, r2
 8011e28:	fb01 f202 	mul.w	r2, r1, r2
 8011e2c:	1a9b      	subs	r3, r3, r2
 8011e2e:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
 8011e32:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8011e36:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8011e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8011e3e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8011e42:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8011e46:	2b09      	cmp	r3, #9
 8011e48:	d90b      	bls.n	8011e62 <f_printf+0x332>
 8011e4a:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011e4e:	2b78      	cmp	r3, #120	@ 0x78
 8011e50:	d101      	bne.n	8011e56 <f_printf+0x326>
 8011e52:	2227      	movs	r2, #39	@ 0x27
 8011e54:	e000      	b.n	8011e58 <f_printf+0x328>
 8011e56:	2207      	movs	r2, #7
 8011e58:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8011e5c:	4413      	add	r3, r2
 8011e5e:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
			str[i++] = d + '0';
 8011e62:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011e66:	1c5a      	adds	r2, r3, #1
 8011e68:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8011e6c:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 8011e70:	3230      	adds	r2, #48	@ 0x30
 8011e72:	b2d2      	uxtb	r2, r2
 8011e74:	3398      	adds	r3, #152	@ 0x98
 8011e76:	443b      	add	r3, r7
 8011e78:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 8011e7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	d003      	beq.n	8011e8c <f_printf+0x35c>
 8011e84:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011e88:	2b1f      	cmp	r3, #31
 8011e8a:	d9c7      	bls.n	8011e1c <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 8011e8c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8011e90:	f003 0308 	and.w	r3, r3, #8
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	d009      	beq.n	8011eac <f_printf+0x37c>
 8011e98:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011e9c:	1c5a      	adds	r2, r3, #1
 8011e9e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8011ea2:	3398      	adds	r3, #152	@ 0x98
 8011ea4:	443b      	add	r3, r7
 8011ea6:	222d      	movs	r2, #45	@ 0x2d
 8011ea8:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 8011eac:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011eb0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8011eb4:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8011eb8:	f003 0301 	and.w	r3, r3, #1
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d001      	beq.n	8011ec4 <f_printf+0x394>
 8011ec0:	2330      	movs	r3, #48	@ 0x30
 8011ec2:	e000      	b.n	8011ec6 <f_printf+0x396>
 8011ec4:	2320      	movs	r3, #32
 8011ec6:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8011eca:	e007      	b.n	8011edc <f_printf+0x3ac>
 8011ecc:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 8011ed0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011ed4:	4611      	mov	r1, r2
 8011ed6:	4618      	mov	r0, r3
 8011ed8:	f7ff fdb3 	bl	8011a42 <putc_bfd>
 8011edc:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8011ee0:	f003 0302 	and.w	r3, r3, #2
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	d108      	bne.n	8011efa <f_printf+0x3ca>
 8011ee8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011eec:	1c5a      	adds	r2, r3, #1
 8011eee:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8011ef2:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8011ef6:	429a      	cmp	r2, r3
 8011ef8:	d8e8      	bhi.n	8011ecc <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 8011efa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011efe:	3b01      	subs	r3, #1
 8011f00:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8011f04:	f107 020c 	add.w	r2, r7, #12
 8011f08:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011f0c:	4413      	add	r3, r2
 8011f0e:	781a      	ldrb	r2, [r3, #0]
 8011f10:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011f14:	4611      	mov	r1, r2
 8011f16:	4618      	mov	r0, r3
 8011f18:	f7ff fd93 	bl	8011a42 <putc_bfd>
		} while (i);
 8011f1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d1ea      	bne.n	8011efa <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 8011f24:	e007      	b.n	8011f36 <f_printf+0x406>
 8011f26:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 8011f2a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011f2e:	4611      	mov	r1, r2
 8011f30:	4618      	mov	r0, r3
 8011f32:	f7ff fd86 	bl	8011a42 <putc_bfd>
 8011f36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011f3a:	1c5a      	adds	r2, r3, #1
 8011f3c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8011f40:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8011f44:	429a      	cmp	r2, r3
 8011f46:	d8ee      	bhi.n	8011f26 <f_printf+0x3f6>
		c = *fmt++;
 8011f48:	e600      	b.n	8011b4c <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 8011f4a:	bf00      	nop
 8011f4c:	e000      	b.n	8011f50 <f_printf+0x420>
		if (!c) break;
 8011f4e:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 8011f50:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011f54:	4618      	mov	r0, r3
 8011f56:	f7ff fdb1 	bl	8011abc <putc_flush>
 8011f5a:	4603      	mov	r3, r0
}
 8011f5c:	4618      	mov	r0, r3
 8011f5e:	379c      	adds	r7, #156	@ 0x9c
 8011f60:	46bd      	mov	sp, r7
 8011f62:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011f66:	b003      	add	sp, #12
 8011f68:	4770      	bx	lr
 8011f6a:	bf00      	nop

08011f6c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011f6c:	b480      	push	{r7}
 8011f6e:	b087      	sub	sp, #28
 8011f70:	af00      	add	r7, sp, #0
 8011f72:	60f8      	str	r0, [r7, #12]
 8011f74:	60b9      	str	r1, [r7, #8]
 8011f76:	4613      	mov	r3, r2
 8011f78:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011f7a:	2301      	movs	r3, #1
 8011f7c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011f7e:	2300      	movs	r3, #0
 8011f80:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8011f82:	4b1f      	ldr	r3, [pc, #124]	@ (8012000 <FATFS_LinkDriverEx+0x94>)
 8011f84:	7a5b      	ldrb	r3, [r3, #9]
 8011f86:	b2db      	uxtb	r3, r3
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d131      	bne.n	8011ff0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011f8c:	4b1c      	ldr	r3, [pc, #112]	@ (8012000 <FATFS_LinkDriverEx+0x94>)
 8011f8e:	7a5b      	ldrb	r3, [r3, #9]
 8011f90:	b2db      	uxtb	r3, r3
 8011f92:	461a      	mov	r2, r3
 8011f94:	4b1a      	ldr	r3, [pc, #104]	@ (8012000 <FATFS_LinkDriverEx+0x94>)
 8011f96:	2100      	movs	r1, #0
 8011f98:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011f9a:	4b19      	ldr	r3, [pc, #100]	@ (8012000 <FATFS_LinkDriverEx+0x94>)
 8011f9c:	7a5b      	ldrb	r3, [r3, #9]
 8011f9e:	b2db      	uxtb	r3, r3
 8011fa0:	4a17      	ldr	r2, [pc, #92]	@ (8012000 <FATFS_LinkDriverEx+0x94>)
 8011fa2:	009b      	lsls	r3, r3, #2
 8011fa4:	4413      	add	r3, r2
 8011fa6:	68fa      	ldr	r2, [r7, #12]
 8011fa8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8011faa:	4b15      	ldr	r3, [pc, #84]	@ (8012000 <FATFS_LinkDriverEx+0x94>)
 8011fac:	7a5b      	ldrb	r3, [r3, #9]
 8011fae:	b2db      	uxtb	r3, r3
 8011fb0:	461a      	mov	r2, r3
 8011fb2:	4b13      	ldr	r3, [pc, #76]	@ (8012000 <FATFS_LinkDriverEx+0x94>)
 8011fb4:	4413      	add	r3, r2
 8011fb6:	79fa      	ldrb	r2, [r7, #7]
 8011fb8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8011fba:	4b11      	ldr	r3, [pc, #68]	@ (8012000 <FATFS_LinkDriverEx+0x94>)
 8011fbc:	7a5b      	ldrb	r3, [r3, #9]
 8011fbe:	b2db      	uxtb	r3, r3
 8011fc0:	1c5a      	adds	r2, r3, #1
 8011fc2:	b2d1      	uxtb	r1, r2
 8011fc4:	4a0e      	ldr	r2, [pc, #56]	@ (8012000 <FATFS_LinkDriverEx+0x94>)
 8011fc6:	7251      	strb	r1, [r2, #9]
 8011fc8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8011fca:	7dbb      	ldrb	r3, [r7, #22]
 8011fcc:	3330      	adds	r3, #48	@ 0x30
 8011fce:	b2da      	uxtb	r2, r3
 8011fd0:	68bb      	ldr	r3, [r7, #8]
 8011fd2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011fd4:	68bb      	ldr	r3, [r7, #8]
 8011fd6:	3301      	adds	r3, #1
 8011fd8:	223a      	movs	r2, #58	@ 0x3a
 8011fda:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011fdc:	68bb      	ldr	r3, [r7, #8]
 8011fde:	3302      	adds	r3, #2
 8011fe0:	222f      	movs	r2, #47	@ 0x2f
 8011fe2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011fe4:	68bb      	ldr	r3, [r7, #8]
 8011fe6:	3303      	adds	r3, #3
 8011fe8:	2200      	movs	r2, #0
 8011fea:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011fec:	2300      	movs	r3, #0
 8011fee:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011ff0:	7dfb      	ldrb	r3, [r7, #23]
}
 8011ff2:	4618      	mov	r0, r3
 8011ff4:	371c      	adds	r7, #28
 8011ff6:	46bd      	mov	sp, r7
 8011ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ffc:	4770      	bx	lr
 8011ffe:	bf00      	nop
 8012000:	24000a60 	.word	0x24000a60

08012004 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8012004:	b580      	push	{r7, lr}
 8012006:	b082      	sub	sp, #8
 8012008:	af00      	add	r7, sp, #0
 801200a:	6078      	str	r0, [r7, #4]
 801200c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801200e:	2200      	movs	r2, #0
 8012010:	6839      	ldr	r1, [r7, #0]
 8012012:	6878      	ldr	r0, [r7, #4]
 8012014:	f7ff ffaa 	bl	8011f6c <FATFS_LinkDriverEx>
 8012018:	4603      	mov	r3, r0
}
 801201a:	4618      	mov	r0, r3
 801201c:	3708      	adds	r7, #8
 801201e:	46bd      	mov	sp, r7
 8012020:	bd80      	pop	{r7, pc}

08012022 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8012022:	b580      	push	{r7, lr}
 8012024:	b084      	sub	sp, #16
 8012026:	af00      	add	r7, sp, #0
 8012028:	4603      	mov	r3, r0
 801202a:	6039      	str	r1, [r7, #0]
 801202c:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 801202e:	2200      	movs	r2, #0
 8012030:	2101      	movs	r1, #1
 8012032:	2001      	movs	r0, #1
 8012034:	f000 f9b9 	bl	80123aa <osSemaphoreNew>
 8012038:	4602      	mov	r2, r0
 801203a:	683b      	ldr	r3, [r7, #0]
 801203c:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 801203e:	683b      	ldr	r3, [r7, #0]
 8012040:	681b      	ldr	r3, [r3, #0]
 8012042:	2b00      	cmp	r3, #0
 8012044:	bf14      	ite	ne
 8012046:	2301      	movne	r3, #1
 8012048:	2300      	moveq	r3, #0
 801204a:	b2db      	uxtb	r3, r3
 801204c:	60fb      	str	r3, [r7, #12]

    return ret;
 801204e:	68fb      	ldr	r3, [r7, #12]
}
 8012050:	4618      	mov	r0, r3
 8012052:	3710      	adds	r7, #16
 8012054:	46bd      	mov	sp, r7
 8012056:	bd80      	pop	{r7, pc}

08012058 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8012058:	b580      	push	{r7, lr}
 801205a:	b082      	sub	sp, #8
 801205c:	af00      	add	r7, sp, #0
 801205e:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8012060:	6878      	ldr	r0, [r7, #4]
 8012062:	f000 fac1 	bl	80125e8 <osSemaphoreDelete>
#endif
    return 1;
 8012066:	2301      	movs	r3, #1
}
 8012068:	4618      	mov	r0, r3
 801206a:	3708      	adds	r7, #8
 801206c:	46bd      	mov	sp, r7
 801206e:	bd80      	pop	{r7, pc}

08012070 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8012070:	b580      	push	{r7, lr}
 8012072:	b084      	sub	sp, #16
 8012074:	af00      	add	r7, sp, #0
 8012076:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8012078:	2300      	movs	r3, #0
 801207a:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 801207c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8012080:	6878      	ldr	r0, [r7, #4]
 8012082:	f000 fa1b 	bl	80124bc <osSemaphoreAcquire>
 8012086:	4603      	mov	r3, r0
 8012088:	2b00      	cmp	r3, #0
 801208a:	d101      	bne.n	8012090 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 801208c:	2301      	movs	r3, #1
 801208e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8012090:	68fb      	ldr	r3, [r7, #12]
}
 8012092:	4618      	mov	r0, r3
 8012094:	3710      	adds	r7, #16
 8012096:	46bd      	mov	sp, r7
 8012098:	bd80      	pop	{r7, pc}

0801209a <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 801209a:	b580      	push	{r7, lr}
 801209c:	b082      	sub	sp, #8
 801209e:	af00      	add	r7, sp, #0
 80120a0:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 80120a2:	6878      	ldr	r0, [r7, #4]
 80120a4:	f000 fa5c 	bl	8012560 <osSemaphoreRelease>
#endif
}
 80120a8:	bf00      	nop
 80120aa:	3708      	adds	r7, #8
 80120ac:	46bd      	mov	sp, r7
 80120ae:	bd80      	pop	{r7, pc}

080120b0 <__NVIC_SetPriority>:
{
 80120b0:	b480      	push	{r7}
 80120b2:	b083      	sub	sp, #12
 80120b4:	af00      	add	r7, sp, #0
 80120b6:	4603      	mov	r3, r0
 80120b8:	6039      	str	r1, [r7, #0]
 80120ba:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80120bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	db0a      	blt.n	80120da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80120c4:	683b      	ldr	r3, [r7, #0]
 80120c6:	b2da      	uxtb	r2, r3
 80120c8:	490c      	ldr	r1, [pc, #48]	@ (80120fc <__NVIC_SetPriority+0x4c>)
 80120ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80120ce:	0112      	lsls	r2, r2, #4
 80120d0:	b2d2      	uxtb	r2, r2
 80120d2:	440b      	add	r3, r1
 80120d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80120d8:	e00a      	b.n	80120f0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80120da:	683b      	ldr	r3, [r7, #0]
 80120dc:	b2da      	uxtb	r2, r3
 80120de:	4908      	ldr	r1, [pc, #32]	@ (8012100 <__NVIC_SetPriority+0x50>)
 80120e0:	88fb      	ldrh	r3, [r7, #6]
 80120e2:	f003 030f 	and.w	r3, r3, #15
 80120e6:	3b04      	subs	r3, #4
 80120e8:	0112      	lsls	r2, r2, #4
 80120ea:	b2d2      	uxtb	r2, r2
 80120ec:	440b      	add	r3, r1
 80120ee:	761a      	strb	r2, [r3, #24]
}
 80120f0:	bf00      	nop
 80120f2:	370c      	adds	r7, #12
 80120f4:	46bd      	mov	sp, r7
 80120f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120fa:	4770      	bx	lr
 80120fc:	e000e100 	.word	0xe000e100
 8012100:	e000ed00 	.word	0xe000ed00

08012104 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8012104:	b580      	push	{r7, lr}
 8012106:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8012108:	4b05      	ldr	r3, [pc, #20]	@ (8012120 <SysTick_Handler+0x1c>)
 801210a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 801210c:	f002 fdae 	bl	8014c6c <xTaskGetSchedulerState>
 8012110:	4603      	mov	r3, r0
 8012112:	2b01      	cmp	r3, #1
 8012114:	d001      	beq.n	801211a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8012116:	f003 ff2f 	bl	8015f78 <xPortSysTickHandler>
  }
}
 801211a:	bf00      	nop
 801211c:	bd80      	pop	{r7, pc}
 801211e:	bf00      	nop
 8012120:	e000e010 	.word	0xe000e010

08012124 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8012124:	b580      	push	{r7, lr}
 8012126:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8012128:	2100      	movs	r1, #0
 801212a:	f06f 0004 	mvn.w	r0, #4
 801212e:	f7ff ffbf 	bl	80120b0 <__NVIC_SetPriority>
#endif
}
 8012132:	bf00      	nop
 8012134:	bd80      	pop	{r7, pc}
	...

08012138 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8012138:	b480      	push	{r7}
 801213a:	b083      	sub	sp, #12
 801213c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801213e:	f3ef 8305 	mrs	r3, IPSR
 8012142:	603b      	str	r3, [r7, #0]
  return(result);
 8012144:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012146:	2b00      	cmp	r3, #0
 8012148:	d003      	beq.n	8012152 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 801214a:	f06f 0305 	mvn.w	r3, #5
 801214e:	607b      	str	r3, [r7, #4]
 8012150:	e00c      	b.n	801216c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8012152:	4b0a      	ldr	r3, [pc, #40]	@ (801217c <osKernelInitialize+0x44>)
 8012154:	681b      	ldr	r3, [r3, #0]
 8012156:	2b00      	cmp	r3, #0
 8012158:	d105      	bne.n	8012166 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801215a:	4b08      	ldr	r3, [pc, #32]	@ (801217c <osKernelInitialize+0x44>)
 801215c:	2201      	movs	r2, #1
 801215e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8012160:	2300      	movs	r3, #0
 8012162:	607b      	str	r3, [r7, #4]
 8012164:	e002      	b.n	801216c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8012166:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801216a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801216c:	687b      	ldr	r3, [r7, #4]
}
 801216e:	4618      	mov	r0, r3
 8012170:	370c      	adds	r7, #12
 8012172:	46bd      	mov	sp, r7
 8012174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012178:	4770      	bx	lr
 801217a:	bf00      	nop
 801217c:	24000a6c 	.word	0x24000a6c

08012180 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 8012180:	b580      	push	{r7, lr}
 8012182:	b082      	sub	sp, #8
 8012184:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 8012186:	f002 fd71 	bl	8014c6c <xTaskGetSchedulerState>
 801218a:	4603      	mov	r3, r0
 801218c:	2b00      	cmp	r3, #0
 801218e:	d004      	beq.n	801219a <osKernelGetState+0x1a>
 8012190:	2b02      	cmp	r3, #2
 8012192:	d105      	bne.n	80121a0 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 8012194:	2302      	movs	r3, #2
 8012196:	607b      	str	r3, [r7, #4]
      break;
 8012198:	e00c      	b.n	80121b4 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 801219a:	2303      	movs	r3, #3
 801219c:	607b      	str	r3, [r7, #4]
      break;
 801219e:	e009      	b.n	80121b4 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 80121a0:	4b07      	ldr	r3, [pc, #28]	@ (80121c0 <osKernelGetState+0x40>)
 80121a2:	681b      	ldr	r3, [r3, #0]
 80121a4:	2b01      	cmp	r3, #1
 80121a6:	d102      	bne.n	80121ae <osKernelGetState+0x2e>
        state = osKernelReady;
 80121a8:	2301      	movs	r3, #1
 80121aa:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 80121ac:	e001      	b.n	80121b2 <osKernelGetState+0x32>
        state = osKernelInactive;
 80121ae:	2300      	movs	r3, #0
 80121b0:	607b      	str	r3, [r7, #4]
      break;
 80121b2:	bf00      	nop
  }

  return (state);
 80121b4:	687b      	ldr	r3, [r7, #4]
}
 80121b6:	4618      	mov	r0, r3
 80121b8:	3708      	adds	r7, #8
 80121ba:	46bd      	mov	sp, r7
 80121bc:	bd80      	pop	{r7, pc}
 80121be:	bf00      	nop
 80121c0:	24000a6c 	.word	0x24000a6c

080121c4 <osKernelStart>:

osStatus_t osKernelStart (void) {
 80121c4:	b580      	push	{r7, lr}
 80121c6:	b082      	sub	sp, #8
 80121c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80121ca:	f3ef 8305 	mrs	r3, IPSR
 80121ce:	603b      	str	r3, [r7, #0]
  return(result);
 80121d0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d003      	beq.n	80121de <osKernelStart+0x1a>
    stat = osErrorISR;
 80121d6:	f06f 0305 	mvn.w	r3, #5
 80121da:	607b      	str	r3, [r7, #4]
 80121dc:	e010      	b.n	8012200 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80121de:	4b0b      	ldr	r3, [pc, #44]	@ (801220c <osKernelStart+0x48>)
 80121e0:	681b      	ldr	r3, [r3, #0]
 80121e2:	2b01      	cmp	r3, #1
 80121e4:	d109      	bne.n	80121fa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80121e6:	f7ff ff9d 	bl	8012124 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80121ea:	4b08      	ldr	r3, [pc, #32]	@ (801220c <osKernelStart+0x48>)
 80121ec:	2202      	movs	r2, #2
 80121ee:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80121f0:	f002 f814 	bl	801421c <vTaskStartScheduler>
      stat = osOK;
 80121f4:	2300      	movs	r3, #0
 80121f6:	607b      	str	r3, [r7, #4]
 80121f8:	e002      	b.n	8012200 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80121fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80121fe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8012200:	687b      	ldr	r3, [r7, #4]
}
 8012202:	4618      	mov	r0, r3
 8012204:	3708      	adds	r7, #8
 8012206:	46bd      	mov	sp, r7
 8012208:	bd80      	pop	{r7, pc}
 801220a:	bf00      	nop
 801220c:	24000a6c 	.word	0x24000a6c

08012210 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8012210:	b580      	push	{r7, lr}
 8012212:	b082      	sub	sp, #8
 8012214:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012216:	f3ef 8305 	mrs	r3, IPSR
 801221a:	603b      	str	r3, [r7, #0]
  return(result);
 801221c:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 801221e:	2b00      	cmp	r3, #0
 8012220:	d003      	beq.n	801222a <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8012222:	f002 f927 	bl	8014474 <xTaskGetTickCountFromISR>
 8012226:	6078      	str	r0, [r7, #4]
 8012228:	e002      	b.n	8012230 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 801222a:	f002 f913 	bl	8014454 <xTaskGetTickCount>
 801222e:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8012230:	687b      	ldr	r3, [r7, #4]
}
 8012232:	4618      	mov	r0, r3
 8012234:	3708      	adds	r7, #8
 8012236:	46bd      	mov	sp, r7
 8012238:	bd80      	pop	{r7, pc}

0801223a <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 801223a:	b580      	push	{r7, lr}
 801223c:	b08e      	sub	sp, #56	@ 0x38
 801223e:	af04      	add	r7, sp, #16
 8012240:	60f8      	str	r0, [r7, #12]
 8012242:	60b9      	str	r1, [r7, #8]
 8012244:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8012246:	2300      	movs	r3, #0
 8012248:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801224a:	f3ef 8305 	mrs	r3, IPSR
 801224e:	617b      	str	r3, [r7, #20]
  return(result);
 8012250:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8012252:	2b00      	cmp	r3, #0
 8012254:	d17e      	bne.n	8012354 <osThreadNew+0x11a>
 8012256:	68fb      	ldr	r3, [r7, #12]
 8012258:	2b00      	cmp	r3, #0
 801225a:	d07b      	beq.n	8012354 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 801225c:	2380      	movs	r3, #128	@ 0x80
 801225e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8012260:	2318      	movs	r3, #24
 8012262:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8012264:	2300      	movs	r3, #0
 8012266:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8012268:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801226c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	2b00      	cmp	r3, #0
 8012272:	d045      	beq.n	8012300 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	2b00      	cmp	r3, #0
 801227a:	d002      	beq.n	8012282 <osThreadNew+0x48>
        name = attr->name;
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	681b      	ldr	r3, [r3, #0]
 8012280:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	699b      	ldr	r3, [r3, #24]
 8012286:	2b00      	cmp	r3, #0
 8012288:	d002      	beq.n	8012290 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	699b      	ldr	r3, [r3, #24]
 801228e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8012290:	69fb      	ldr	r3, [r7, #28]
 8012292:	2b00      	cmp	r3, #0
 8012294:	d008      	beq.n	80122a8 <osThreadNew+0x6e>
 8012296:	69fb      	ldr	r3, [r7, #28]
 8012298:	2b38      	cmp	r3, #56	@ 0x38
 801229a:	d805      	bhi.n	80122a8 <osThreadNew+0x6e>
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	685b      	ldr	r3, [r3, #4]
 80122a0:	f003 0301 	and.w	r3, r3, #1
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d001      	beq.n	80122ac <osThreadNew+0x72>
        return (NULL);
 80122a8:	2300      	movs	r3, #0
 80122aa:	e054      	b.n	8012356 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	695b      	ldr	r3, [r3, #20]
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d003      	beq.n	80122bc <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	695b      	ldr	r3, [r3, #20]
 80122b8:	089b      	lsrs	r3, r3, #2
 80122ba:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	689b      	ldr	r3, [r3, #8]
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d00e      	beq.n	80122e2 <osThreadNew+0xa8>
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	68db      	ldr	r3, [r3, #12]
 80122c8:	2ba7      	cmp	r3, #167	@ 0xa7
 80122ca:	d90a      	bls.n	80122e2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d006      	beq.n	80122e2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	695b      	ldr	r3, [r3, #20]
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d002      	beq.n	80122e2 <osThreadNew+0xa8>
        mem = 1;
 80122dc:	2301      	movs	r3, #1
 80122de:	61bb      	str	r3, [r7, #24]
 80122e0:	e010      	b.n	8012304 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	689b      	ldr	r3, [r3, #8]
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	d10c      	bne.n	8012304 <osThreadNew+0xca>
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	68db      	ldr	r3, [r3, #12]
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	d108      	bne.n	8012304 <osThreadNew+0xca>
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	691b      	ldr	r3, [r3, #16]
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	d104      	bne.n	8012304 <osThreadNew+0xca>
          mem = 0;
 80122fa:	2300      	movs	r3, #0
 80122fc:	61bb      	str	r3, [r7, #24]
 80122fe:	e001      	b.n	8012304 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8012300:	2300      	movs	r3, #0
 8012302:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8012304:	69bb      	ldr	r3, [r7, #24]
 8012306:	2b01      	cmp	r3, #1
 8012308:	d110      	bne.n	801232c <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 801230e:	687a      	ldr	r2, [r7, #4]
 8012310:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8012312:	9202      	str	r2, [sp, #8]
 8012314:	9301      	str	r3, [sp, #4]
 8012316:	69fb      	ldr	r3, [r7, #28]
 8012318:	9300      	str	r3, [sp, #0]
 801231a:	68bb      	ldr	r3, [r7, #8]
 801231c:	6a3a      	ldr	r2, [r7, #32]
 801231e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012320:	68f8      	ldr	r0, [r7, #12]
 8012322:	f001 fd87 	bl	8013e34 <xTaskCreateStatic>
 8012326:	4603      	mov	r3, r0
 8012328:	613b      	str	r3, [r7, #16]
 801232a:	e013      	b.n	8012354 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 801232c:	69bb      	ldr	r3, [r7, #24]
 801232e:	2b00      	cmp	r3, #0
 8012330:	d110      	bne.n	8012354 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8012332:	6a3b      	ldr	r3, [r7, #32]
 8012334:	b29a      	uxth	r2, r3
 8012336:	f107 0310 	add.w	r3, r7, #16
 801233a:	9301      	str	r3, [sp, #4]
 801233c:	69fb      	ldr	r3, [r7, #28]
 801233e:	9300      	str	r3, [sp, #0]
 8012340:	68bb      	ldr	r3, [r7, #8]
 8012342:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012344:	68f8      	ldr	r0, [r7, #12]
 8012346:	f001 fdd5 	bl	8013ef4 <xTaskCreate>
 801234a:	4603      	mov	r3, r0
 801234c:	2b01      	cmp	r3, #1
 801234e:	d001      	beq.n	8012354 <osThreadNew+0x11a>
            hTask = NULL;
 8012350:	2300      	movs	r3, #0
 8012352:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8012354:	693b      	ldr	r3, [r7, #16]
}
 8012356:	4618      	mov	r0, r3
 8012358:	3728      	adds	r7, #40	@ 0x28
 801235a:	46bd      	mov	sp, r7
 801235c:	bd80      	pop	{r7, pc}

0801235e <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 801235e:	b580      	push	{r7, lr}
 8012360:	b082      	sub	sp, #8
 8012362:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 8012364:	f002 fc72 	bl	8014c4c <xTaskGetCurrentTaskHandle>
 8012368:	6078      	str	r0, [r7, #4]

  return (id);
 801236a:	687b      	ldr	r3, [r7, #4]
}
 801236c:	4618      	mov	r0, r3
 801236e:	3708      	adds	r7, #8
 8012370:	46bd      	mov	sp, r7
 8012372:	bd80      	pop	{r7, pc}

08012374 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8012374:	b580      	push	{r7, lr}
 8012376:	b084      	sub	sp, #16
 8012378:	af00      	add	r7, sp, #0
 801237a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801237c:	f3ef 8305 	mrs	r3, IPSR
 8012380:	60bb      	str	r3, [r7, #8]
  return(result);
 8012382:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012384:	2b00      	cmp	r3, #0
 8012386:	d003      	beq.n	8012390 <osDelay+0x1c>
    stat = osErrorISR;
 8012388:	f06f 0305 	mvn.w	r3, #5
 801238c:	60fb      	str	r3, [r7, #12]
 801238e:	e007      	b.n	80123a0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8012390:	2300      	movs	r3, #0
 8012392:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	2b00      	cmp	r3, #0
 8012398:	d002      	beq.n	80123a0 <osDelay+0x2c>
      vTaskDelay(ticks);
 801239a:	6878      	ldr	r0, [r7, #4]
 801239c:	f001 ff08 	bl	80141b0 <vTaskDelay>
    }
  }

  return (stat);
 80123a0:	68fb      	ldr	r3, [r7, #12]
}
 80123a2:	4618      	mov	r0, r3
 80123a4:	3710      	adds	r7, #16
 80123a6:	46bd      	mov	sp, r7
 80123a8:	bd80      	pop	{r7, pc}

080123aa <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80123aa:	b580      	push	{r7, lr}
 80123ac:	b08a      	sub	sp, #40	@ 0x28
 80123ae:	af02      	add	r7, sp, #8
 80123b0:	60f8      	str	r0, [r7, #12]
 80123b2:	60b9      	str	r1, [r7, #8]
 80123b4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80123b6:	2300      	movs	r3, #0
 80123b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80123ba:	f3ef 8305 	mrs	r3, IPSR
 80123be:	613b      	str	r3, [r7, #16]
  return(result);
 80123c0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d175      	bne.n	80124b2 <osSemaphoreNew+0x108>
 80123c6:	68fb      	ldr	r3, [r7, #12]
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d072      	beq.n	80124b2 <osSemaphoreNew+0x108>
 80123cc:	68ba      	ldr	r2, [r7, #8]
 80123ce:	68fb      	ldr	r3, [r7, #12]
 80123d0:	429a      	cmp	r2, r3
 80123d2:	d86e      	bhi.n	80124b2 <osSemaphoreNew+0x108>
    mem = -1;
 80123d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80123d8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d015      	beq.n	801240c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	689b      	ldr	r3, [r3, #8]
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d006      	beq.n	80123f6 <osSemaphoreNew+0x4c>
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	68db      	ldr	r3, [r3, #12]
 80123ec:	2b4f      	cmp	r3, #79	@ 0x4f
 80123ee:	d902      	bls.n	80123f6 <osSemaphoreNew+0x4c>
        mem = 1;
 80123f0:	2301      	movs	r3, #1
 80123f2:	61bb      	str	r3, [r7, #24]
 80123f4:	e00c      	b.n	8012410 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	689b      	ldr	r3, [r3, #8]
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	d108      	bne.n	8012410 <osSemaphoreNew+0x66>
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	68db      	ldr	r3, [r3, #12]
 8012402:	2b00      	cmp	r3, #0
 8012404:	d104      	bne.n	8012410 <osSemaphoreNew+0x66>
          mem = 0;
 8012406:	2300      	movs	r3, #0
 8012408:	61bb      	str	r3, [r7, #24]
 801240a:	e001      	b.n	8012410 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 801240c:	2300      	movs	r3, #0
 801240e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8012410:	69bb      	ldr	r3, [r7, #24]
 8012412:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012416:	d04c      	beq.n	80124b2 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8012418:	68fb      	ldr	r3, [r7, #12]
 801241a:	2b01      	cmp	r3, #1
 801241c:	d128      	bne.n	8012470 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 801241e:	69bb      	ldr	r3, [r7, #24]
 8012420:	2b01      	cmp	r3, #1
 8012422:	d10a      	bne.n	801243a <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	689b      	ldr	r3, [r3, #8]
 8012428:	2203      	movs	r2, #3
 801242a:	9200      	str	r2, [sp, #0]
 801242c:	2200      	movs	r2, #0
 801242e:	2100      	movs	r1, #0
 8012430:	2001      	movs	r0, #1
 8012432:	f000 fd3d 	bl	8012eb0 <xQueueGenericCreateStatic>
 8012436:	61f8      	str	r0, [r7, #28]
 8012438:	e005      	b.n	8012446 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 801243a:	2203      	movs	r2, #3
 801243c:	2100      	movs	r1, #0
 801243e:	2001      	movs	r0, #1
 8012440:	f000 fdb3 	bl	8012faa <xQueueGenericCreate>
 8012444:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8012446:	69fb      	ldr	r3, [r7, #28]
 8012448:	2b00      	cmp	r3, #0
 801244a:	d022      	beq.n	8012492 <osSemaphoreNew+0xe8>
 801244c:	68bb      	ldr	r3, [r7, #8]
 801244e:	2b00      	cmp	r3, #0
 8012450:	d01f      	beq.n	8012492 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8012452:	2300      	movs	r3, #0
 8012454:	2200      	movs	r2, #0
 8012456:	2100      	movs	r1, #0
 8012458:	69f8      	ldr	r0, [r7, #28]
 801245a:	f000 fe73 	bl	8013144 <xQueueGenericSend>
 801245e:	4603      	mov	r3, r0
 8012460:	2b01      	cmp	r3, #1
 8012462:	d016      	beq.n	8012492 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8012464:	69f8      	ldr	r0, [r7, #28]
 8012466:	f001 fb11 	bl	8013a8c <vQueueDelete>
            hSemaphore = NULL;
 801246a:	2300      	movs	r3, #0
 801246c:	61fb      	str	r3, [r7, #28]
 801246e:	e010      	b.n	8012492 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8012470:	69bb      	ldr	r3, [r7, #24]
 8012472:	2b01      	cmp	r3, #1
 8012474:	d108      	bne.n	8012488 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	689b      	ldr	r3, [r3, #8]
 801247a:	461a      	mov	r2, r3
 801247c:	68b9      	ldr	r1, [r7, #8]
 801247e:	68f8      	ldr	r0, [r7, #12]
 8012480:	f000 fdf1 	bl	8013066 <xQueueCreateCountingSemaphoreStatic>
 8012484:	61f8      	str	r0, [r7, #28]
 8012486:	e004      	b.n	8012492 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8012488:	68b9      	ldr	r1, [r7, #8]
 801248a:	68f8      	ldr	r0, [r7, #12]
 801248c:	f000 fe24 	bl	80130d8 <xQueueCreateCountingSemaphore>
 8012490:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8012492:	69fb      	ldr	r3, [r7, #28]
 8012494:	2b00      	cmp	r3, #0
 8012496:	d00c      	beq.n	80124b2 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	2b00      	cmp	r3, #0
 801249c:	d003      	beq.n	80124a6 <osSemaphoreNew+0xfc>
          name = attr->name;
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	681b      	ldr	r3, [r3, #0]
 80124a2:	617b      	str	r3, [r7, #20]
 80124a4:	e001      	b.n	80124aa <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80124a6:	2300      	movs	r3, #0
 80124a8:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80124aa:	6979      	ldr	r1, [r7, #20]
 80124ac:	69f8      	ldr	r0, [r7, #28]
 80124ae:	f001 fc39 	bl	8013d24 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80124b2:	69fb      	ldr	r3, [r7, #28]
}
 80124b4:	4618      	mov	r0, r3
 80124b6:	3720      	adds	r7, #32
 80124b8:	46bd      	mov	sp, r7
 80124ba:	bd80      	pop	{r7, pc}

080124bc <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80124bc:	b580      	push	{r7, lr}
 80124be:	b086      	sub	sp, #24
 80124c0:	af00      	add	r7, sp, #0
 80124c2:	6078      	str	r0, [r7, #4]
 80124c4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80124ca:	2300      	movs	r3, #0
 80124cc:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80124ce:	693b      	ldr	r3, [r7, #16]
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d103      	bne.n	80124dc <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80124d4:	f06f 0303 	mvn.w	r3, #3
 80124d8:	617b      	str	r3, [r7, #20]
 80124da:	e039      	b.n	8012550 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80124dc:	f3ef 8305 	mrs	r3, IPSR
 80124e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80124e2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	d022      	beq.n	801252e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80124e8:	683b      	ldr	r3, [r7, #0]
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	d003      	beq.n	80124f6 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80124ee:	f06f 0303 	mvn.w	r3, #3
 80124f2:	617b      	str	r3, [r7, #20]
 80124f4:	e02c      	b.n	8012550 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80124f6:	2300      	movs	r3, #0
 80124f8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80124fa:	f107 0308 	add.w	r3, r7, #8
 80124fe:	461a      	mov	r2, r3
 8012500:	2100      	movs	r1, #0
 8012502:	6938      	ldr	r0, [r7, #16]
 8012504:	f001 fa40 	bl	8013988 <xQueueReceiveFromISR>
 8012508:	4603      	mov	r3, r0
 801250a:	2b01      	cmp	r3, #1
 801250c:	d003      	beq.n	8012516 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 801250e:	f06f 0302 	mvn.w	r3, #2
 8012512:	617b      	str	r3, [r7, #20]
 8012514:	e01c      	b.n	8012550 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8012516:	68bb      	ldr	r3, [r7, #8]
 8012518:	2b00      	cmp	r3, #0
 801251a:	d019      	beq.n	8012550 <osSemaphoreAcquire+0x94>
 801251c:	4b0f      	ldr	r3, [pc, #60]	@ (801255c <osSemaphoreAcquire+0xa0>)
 801251e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012522:	601a      	str	r2, [r3, #0]
 8012524:	f3bf 8f4f 	dsb	sy
 8012528:	f3bf 8f6f 	isb	sy
 801252c:	e010      	b.n	8012550 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 801252e:	6839      	ldr	r1, [r7, #0]
 8012530:	6938      	ldr	r0, [r7, #16]
 8012532:	f001 f919 	bl	8013768 <xQueueSemaphoreTake>
 8012536:	4603      	mov	r3, r0
 8012538:	2b01      	cmp	r3, #1
 801253a:	d009      	beq.n	8012550 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 801253c:	683b      	ldr	r3, [r7, #0]
 801253e:	2b00      	cmp	r3, #0
 8012540:	d003      	beq.n	801254a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8012542:	f06f 0301 	mvn.w	r3, #1
 8012546:	617b      	str	r3, [r7, #20]
 8012548:	e002      	b.n	8012550 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 801254a:	f06f 0302 	mvn.w	r3, #2
 801254e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8012550:	697b      	ldr	r3, [r7, #20]
}
 8012552:	4618      	mov	r0, r3
 8012554:	3718      	adds	r7, #24
 8012556:	46bd      	mov	sp, r7
 8012558:	bd80      	pop	{r7, pc}
 801255a:	bf00      	nop
 801255c:	e000ed04 	.word	0xe000ed04

08012560 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8012560:	b580      	push	{r7, lr}
 8012562:	b086      	sub	sp, #24
 8012564:	af00      	add	r7, sp, #0
 8012566:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 801256c:	2300      	movs	r3, #0
 801256e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8012570:	693b      	ldr	r3, [r7, #16]
 8012572:	2b00      	cmp	r3, #0
 8012574:	d103      	bne.n	801257e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8012576:	f06f 0303 	mvn.w	r3, #3
 801257a:	617b      	str	r3, [r7, #20]
 801257c:	e02c      	b.n	80125d8 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801257e:	f3ef 8305 	mrs	r3, IPSR
 8012582:	60fb      	str	r3, [r7, #12]
  return(result);
 8012584:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8012586:	2b00      	cmp	r3, #0
 8012588:	d01a      	beq.n	80125c0 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 801258a:	2300      	movs	r3, #0
 801258c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801258e:	f107 0308 	add.w	r3, r7, #8
 8012592:	4619      	mov	r1, r3
 8012594:	6938      	ldr	r0, [r7, #16]
 8012596:	f000 ff75 	bl	8013484 <xQueueGiveFromISR>
 801259a:	4603      	mov	r3, r0
 801259c:	2b01      	cmp	r3, #1
 801259e:	d003      	beq.n	80125a8 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80125a0:	f06f 0302 	mvn.w	r3, #2
 80125a4:	617b      	str	r3, [r7, #20]
 80125a6:	e017      	b.n	80125d8 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80125a8:	68bb      	ldr	r3, [r7, #8]
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	d014      	beq.n	80125d8 <osSemaphoreRelease+0x78>
 80125ae:	4b0d      	ldr	r3, [pc, #52]	@ (80125e4 <osSemaphoreRelease+0x84>)
 80125b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80125b4:	601a      	str	r2, [r3, #0]
 80125b6:	f3bf 8f4f 	dsb	sy
 80125ba:	f3bf 8f6f 	isb	sy
 80125be:	e00b      	b.n	80125d8 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80125c0:	2300      	movs	r3, #0
 80125c2:	2200      	movs	r2, #0
 80125c4:	2100      	movs	r1, #0
 80125c6:	6938      	ldr	r0, [r7, #16]
 80125c8:	f000 fdbc 	bl	8013144 <xQueueGenericSend>
 80125cc:	4603      	mov	r3, r0
 80125ce:	2b01      	cmp	r3, #1
 80125d0:	d002      	beq.n	80125d8 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80125d2:	f06f 0302 	mvn.w	r3, #2
 80125d6:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80125d8:	697b      	ldr	r3, [r7, #20]
}
 80125da:	4618      	mov	r0, r3
 80125dc:	3718      	adds	r7, #24
 80125de:	46bd      	mov	sp, r7
 80125e0:	bd80      	pop	{r7, pc}
 80125e2:	bf00      	nop
 80125e4:	e000ed04 	.word	0xe000ed04

080125e8 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 80125e8:	b580      	push	{r7, lr}
 80125ea:	b086      	sub	sp, #24
 80125ec:	af00      	add	r7, sp, #0
 80125ee:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80125f4:	f3ef 8305 	mrs	r3, IPSR
 80125f8:	60fb      	str	r3, [r7, #12]
  return(result);
 80125fa:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d003      	beq.n	8012608 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8012600:	f06f 0305 	mvn.w	r3, #5
 8012604:	617b      	str	r3, [r7, #20]
 8012606:	e00e      	b.n	8012626 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8012608:	693b      	ldr	r3, [r7, #16]
 801260a:	2b00      	cmp	r3, #0
 801260c:	d103      	bne.n	8012616 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 801260e:	f06f 0303 	mvn.w	r3, #3
 8012612:	617b      	str	r3, [r7, #20]
 8012614:	e007      	b.n	8012626 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8012616:	6938      	ldr	r0, [r7, #16]
 8012618:	f001 fbae 	bl	8013d78 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 801261c:	2300      	movs	r3, #0
 801261e:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8012620:	6938      	ldr	r0, [r7, #16]
 8012622:	f001 fa33 	bl	8013a8c <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8012626:	697b      	ldr	r3, [r7, #20]
}
 8012628:	4618      	mov	r0, r3
 801262a:	3718      	adds	r7, #24
 801262c:	46bd      	mov	sp, r7
 801262e:	bd80      	pop	{r7, pc}

08012630 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8012630:	b580      	push	{r7, lr}
 8012632:	b08a      	sub	sp, #40	@ 0x28
 8012634:	af02      	add	r7, sp, #8
 8012636:	60f8      	str	r0, [r7, #12]
 8012638:	60b9      	str	r1, [r7, #8]
 801263a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 801263c:	2300      	movs	r3, #0
 801263e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012640:	f3ef 8305 	mrs	r3, IPSR
 8012644:	613b      	str	r3, [r7, #16]
  return(result);
 8012646:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8012648:	2b00      	cmp	r3, #0
 801264a:	d15f      	bne.n	801270c <osMessageQueueNew+0xdc>
 801264c:	68fb      	ldr	r3, [r7, #12]
 801264e:	2b00      	cmp	r3, #0
 8012650:	d05c      	beq.n	801270c <osMessageQueueNew+0xdc>
 8012652:	68bb      	ldr	r3, [r7, #8]
 8012654:	2b00      	cmp	r3, #0
 8012656:	d059      	beq.n	801270c <osMessageQueueNew+0xdc>
    mem = -1;
 8012658:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801265c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	2b00      	cmp	r3, #0
 8012662:	d029      	beq.n	80126b8 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	689b      	ldr	r3, [r3, #8]
 8012668:	2b00      	cmp	r3, #0
 801266a:	d012      	beq.n	8012692 <osMessageQueueNew+0x62>
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	68db      	ldr	r3, [r3, #12]
 8012670:	2b4f      	cmp	r3, #79	@ 0x4f
 8012672:	d90e      	bls.n	8012692 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8012678:	2b00      	cmp	r3, #0
 801267a:	d00a      	beq.n	8012692 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	695a      	ldr	r2, [r3, #20]
 8012680:	68fb      	ldr	r3, [r7, #12]
 8012682:	68b9      	ldr	r1, [r7, #8]
 8012684:	fb01 f303 	mul.w	r3, r1, r3
 8012688:	429a      	cmp	r2, r3
 801268a:	d302      	bcc.n	8012692 <osMessageQueueNew+0x62>
        mem = 1;
 801268c:	2301      	movs	r3, #1
 801268e:	61bb      	str	r3, [r7, #24]
 8012690:	e014      	b.n	80126bc <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	689b      	ldr	r3, [r3, #8]
 8012696:	2b00      	cmp	r3, #0
 8012698:	d110      	bne.n	80126bc <osMessageQueueNew+0x8c>
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	68db      	ldr	r3, [r3, #12]
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d10c      	bne.n	80126bc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	d108      	bne.n	80126bc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	695b      	ldr	r3, [r3, #20]
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	d104      	bne.n	80126bc <osMessageQueueNew+0x8c>
          mem = 0;
 80126b2:	2300      	movs	r3, #0
 80126b4:	61bb      	str	r3, [r7, #24]
 80126b6:	e001      	b.n	80126bc <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80126b8:	2300      	movs	r3, #0
 80126ba:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80126bc:	69bb      	ldr	r3, [r7, #24]
 80126be:	2b01      	cmp	r3, #1
 80126c0:	d10b      	bne.n	80126da <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	691a      	ldr	r2, [r3, #16]
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	689b      	ldr	r3, [r3, #8]
 80126ca:	2100      	movs	r1, #0
 80126cc:	9100      	str	r1, [sp, #0]
 80126ce:	68b9      	ldr	r1, [r7, #8]
 80126d0:	68f8      	ldr	r0, [r7, #12]
 80126d2:	f000 fbed 	bl	8012eb0 <xQueueGenericCreateStatic>
 80126d6:	61f8      	str	r0, [r7, #28]
 80126d8:	e008      	b.n	80126ec <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80126da:	69bb      	ldr	r3, [r7, #24]
 80126dc:	2b00      	cmp	r3, #0
 80126de:	d105      	bne.n	80126ec <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80126e0:	2200      	movs	r2, #0
 80126e2:	68b9      	ldr	r1, [r7, #8]
 80126e4:	68f8      	ldr	r0, [r7, #12]
 80126e6:	f000 fc60 	bl	8012faa <xQueueGenericCreate>
 80126ea:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80126ec:	69fb      	ldr	r3, [r7, #28]
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d00c      	beq.n	801270c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	d003      	beq.n	8012700 <osMessageQueueNew+0xd0>
        name = attr->name;
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	681b      	ldr	r3, [r3, #0]
 80126fc:	617b      	str	r3, [r7, #20]
 80126fe:	e001      	b.n	8012704 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8012700:	2300      	movs	r3, #0
 8012702:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8012704:	6979      	ldr	r1, [r7, #20]
 8012706:	69f8      	ldr	r0, [r7, #28]
 8012708:	f001 fb0c 	bl	8013d24 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 801270c:	69fb      	ldr	r3, [r7, #28]
}
 801270e:	4618      	mov	r0, r3
 8012710:	3720      	adds	r7, #32
 8012712:	46bd      	mov	sp, r7
 8012714:	bd80      	pop	{r7, pc}
	...

08012718 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8012718:	b580      	push	{r7, lr}
 801271a:	b088      	sub	sp, #32
 801271c:	af00      	add	r7, sp, #0
 801271e:	60f8      	str	r0, [r7, #12]
 8012720:	60b9      	str	r1, [r7, #8]
 8012722:	603b      	str	r3, [r7, #0]
 8012724:	4613      	mov	r3, r2
 8012726:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8012728:	68fb      	ldr	r3, [r7, #12]
 801272a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801272c:	2300      	movs	r3, #0
 801272e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012730:	f3ef 8305 	mrs	r3, IPSR
 8012734:	617b      	str	r3, [r7, #20]
  return(result);
 8012736:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8012738:	2b00      	cmp	r3, #0
 801273a:	d028      	beq.n	801278e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801273c:	69bb      	ldr	r3, [r7, #24]
 801273e:	2b00      	cmp	r3, #0
 8012740:	d005      	beq.n	801274e <osMessageQueuePut+0x36>
 8012742:	68bb      	ldr	r3, [r7, #8]
 8012744:	2b00      	cmp	r3, #0
 8012746:	d002      	beq.n	801274e <osMessageQueuePut+0x36>
 8012748:	683b      	ldr	r3, [r7, #0]
 801274a:	2b00      	cmp	r3, #0
 801274c:	d003      	beq.n	8012756 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 801274e:	f06f 0303 	mvn.w	r3, #3
 8012752:	61fb      	str	r3, [r7, #28]
 8012754:	e038      	b.n	80127c8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8012756:	2300      	movs	r3, #0
 8012758:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 801275a:	f107 0210 	add.w	r2, r7, #16
 801275e:	2300      	movs	r3, #0
 8012760:	68b9      	ldr	r1, [r7, #8]
 8012762:	69b8      	ldr	r0, [r7, #24]
 8012764:	f000 fdf0 	bl	8013348 <xQueueGenericSendFromISR>
 8012768:	4603      	mov	r3, r0
 801276a:	2b01      	cmp	r3, #1
 801276c:	d003      	beq.n	8012776 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 801276e:	f06f 0302 	mvn.w	r3, #2
 8012772:	61fb      	str	r3, [r7, #28]
 8012774:	e028      	b.n	80127c8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8012776:	693b      	ldr	r3, [r7, #16]
 8012778:	2b00      	cmp	r3, #0
 801277a:	d025      	beq.n	80127c8 <osMessageQueuePut+0xb0>
 801277c:	4b15      	ldr	r3, [pc, #84]	@ (80127d4 <osMessageQueuePut+0xbc>)
 801277e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012782:	601a      	str	r2, [r3, #0]
 8012784:	f3bf 8f4f 	dsb	sy
 8012788:	f3bf 8f6f 	isb	sy
 801278c:	e01c      	b.n	80127c8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801278e:	69bb      	ldr	r3, [r7, #24]
 8012790:	2b00      	cmp	r3, #0
 8012792:	d002      	beq.n	801279a <osMessageQueuePut+0x82>
 8012794:	68bb      	ldr	r3, [r7, #8]
 8012796:	2b00      	cmp	r3, #0
 8012798:	d103      	bne.n	80127a2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 801279a:	f06f 0303 	mvn.w	r3, #3
 801279e:	61fb      	str	r3, [r7, #28]
 80127a0:	e012      	b.n	80127c8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80127a2:	2300      	movs	r3, #0
 80127a4:	683a      	ldr	r2, [r7, #0]
 80127a6:	68b9      	ldr	r1, [r7, #8]
 80127a8:	69b8      	ldr	r0, [r7, #24]
 80127aa:	f000 fccb 	bl	8013144 <xQueueGenericSend>
 80127ae:	4603      	mov	r3, r0
 80127b0:	2b01      	cmp	r3, #1
 80127b2:	d009      	beq.n	80127c8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80127b4:	683b      	ldr	r3, [r7, #0]
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d003      	beq.n	80127c2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80127ba:	f06f 0301 	mvn.w	r3, #1
 80127be:	61fb      	str	r3, [r7, #28]
 80127c0:	e002      	b.n	80127c8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80127c2:	f06f 0302 	mvn.w	r3, #2
 80127c6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80127c8:	69fb      	ldr	r3, [r7, #28]
}
 80127ca:	4618      	mov	r0, r3
 80127cc:	3720      	adds	r7, #32
 80127ce:	46bd      	mov	sp, r7
 80127d0:	bd80      	pop	{r7, pc}
 80127d2:	bf00      	nop
 80127d4:	e000ed04 	.word	0xe000ed04

080127d8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80127d8:	b580      	push	{r7, lr}
 80127da:	b088      	sub	sp, #32
 80127dc:	af00      	add	r7, sp, #0
 80127de:	60f8      	str	r0, [r7, #12]
 80127e0:	60b9      	str	r1, [r7, #8]
 80127e2:	607a      	str	r2, [r7, #4]
 80127e4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80127e6:	68fb      	ldr	r3, [r7, #12]
 80127e8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80127ea:	2300      	movs	r3, #0
 80127ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80127ee:	f3ef 8305 	mrs	r3, IPSR
 80127f2:	617b      	str	r3, [r7, #20]
  return(result);
 80127f4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d028      	beq.n	801284c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80127fa:	69bb      	ldr	r3, [r7, #24]
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d005      	beq.n	801280c <osMessageQueueGet+0x34>
 8012800:	68bb      	ldr	r3, [r7, #8]
 8012802:	2b00      	cmp	r3, #0
 8012804:	d002      	beq.n	801280c <osMessageQueueGet+0x34>
 8012806:	683b      	ldr	r3, [r7, #0]
 8012808:	2b00      	cmp	r3, #0
 801280a:	d003      	beq.n	8012814 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 801280c:	f06f 0303 	mvn.w	r3, #3
 8012810:	61fb      	str	r3, [r7, #28]
 8012812:	e037      	b.n	8012884 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8012814:	2300      	movs	r3, #0
 8012816:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8012818:	f107 0310 	add.w	r3, r7, #16
 801281c:	461a      	mov	r2, r3
 801281e:	68b9      	ldr	r1, [r7, #8]
 8012820:	69b8      	ldr	r0, [r7, #24]
 8012822:	f001 f8b1 	bl	8013988 <xQueueReceiveFromISR>
 8012826:	4603      	mov	r3, r0
 8012828:	2b01      	cmp	r3, #1
 801282a:	d003      	beq.n	8012834 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 801282c:	f06f 0302 	mvn.w	r3, #2
 8012830:	61fb      	str	r3, [r7, #28]
 8012832:	e027      	b.n	8012884 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8012834:	693b      	ldr	r3, [r7, #16]
 8012836:	2b00      	cmp	r3, #0
 8012838:	d024      	beq.n	8012884 <osMessageQueueGet+0xac>
 801283a:	4b15      	ldr	r3, [pc, #84]	@ (8012890 <osMessageQueueGet+0xb8>)
 801283c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012840:	601a      	str	r2, [r3, #0]
 8012842:	f3bf 8f4f 	dsb	sy
 8012846:	f3bf 8f6f 	isb	sy
 801284a:	e01b      	b.n	8012884 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801284c:	69bb      	ldr	r3, [r7, #24]
 801284e:	2b00      	cmp	r3, #0
 8012850:	d002      	beq.n	8012858 <osMessageQueueGet+0x80>
 8012852:	68bb      	ldr	r3, [r7, #8]
 8012854:	2b00      	cmp	r3, #0
 8012856:	d103      	bne.n	8012860 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8012858:	f06f 0303 	mvn.w	r3, #3
 801285c:	61fb      	str	r3, [r7, #28]
 801285e:	e011      	b.n	8012884 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8012860:	683a      	ldr	r2, [r7, #0]
 8012862:	68b9      	ldr	r1, [r7, #8]
 8012864:	69b8      	ldr	r0, [r7, #24]
 8012866:	f000 fe9d 	bl	80135a4 <xQueueReceive>
 801286a:	4603      	mov	r3, r0
 801286c:	2b01      	cmp	r3, #1
 801286e:	d009      	beq.n	8012884 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8012870:	683b      	ldr	r3, [r7, #0]
 8012872:	2b00      	cmp	r3, #0
 8012874:	d003      	beq.n	801287e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8012876:	f06f 0301 	mvn.w	r3, #1
 801287a:	61fb      	str	r3, [r7, #28]
 801287c:	e002      	b.n	8012884 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 801287e:	f06f 0302 	mvn.w	r3, #2
 8012882:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8012884:	69fb      	ldr	r3, [r7, #28]
}
 8012886:	4618      	mov	r0, r3
 8012888:	3720      	adds	r7, #32
 801288a:	46bd      	mov	sp, r7
 801288c:	bd80      	pop	{r7, pc}
 801288e:	bf00      	nop
 8012890:	e000ed04 	.word	0xe000ed04

08012894 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8012894:	b480      	push	{r7}
 8012896:	b085      	sub	sp, #20
 8012898:	af00      	add	r7, sp, #0
 801289a:	60f8      	str	r0, [r7, #12]
 801289c:	60b9      	str	r1, [r7, #8]
 801289e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80128a0:	68fb      	ldr	r3, [r7, #12]
 80128a2:	4a07      	ldr	r2, [pc, #28]	@ (80128c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80128a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80128a6:	68bb      	ldr	r3, [r7, #8]
 80128a8:	4a06      	ldr	r2, [pc, #24]	@ (80128c4 <vApplicationGetIdleTaskMemory+0x30>)
 80128aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	2280      	movs	r2, #128	@ 0x80
 80128b0:	601a      	str	r2, [r3, #0]
}
 80128b2:	bf00      	nop
 80128b4:	3714      	adds	r7, #20
 80128b6:	46bd      	mov	sp, r7
 80128b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128bc:	4770      	bx	lr
 80128be:	bf00      	nop
 80128c0:	24000a70 	.word	0x24000a70
 80128c4:	24000b18 	.word	0x24000b18

080128c8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80128c8:	b480      	push	{r7}
 80128ca:	b085      	sub	sp, #20
 80128cc:	af00      	add	r7, sp, #0
 80128ce:	60f8      	str	r0, [r7, #12]
 80128d0:	60b9      	str	r1, [r7, #8]
 80128d2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80128d4:	68fb      	ldr	r3, [r7, #12]
 80128d6:	4a07      	ldr	r2, [pc, #28]	@ (80128f4 <vApplicationGetTimerTaskMemory+0x2c>)
 80128d8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80128da:	68bb      	ldr	r3, [r7, #8]
 80128dc:	4a06      	ldr	r2, [pc, #24]	@ (80128f8 <vApplicationGetTimerTaskMemory+0x30>)
 80128de:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80128e6:	601a      	str	r2, [r3, #0]
}
 80128e8:	bf00      	nop
 80128ea:	3714      	adds	r7, #20
 80128ec:	46bd      	mov	sp, r7
 80128ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128f2:	4770      	bx	lr
 80128f4:	24000d18 	.word	0x24000d18
 80128f8:	24000dc0 	.word	0x24000dc0

080128fc <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80128fc:	b580      	push	{r7, lr}
 80128fe:	b082      	sub	sp, #8
 8012900:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8012902:	2020      	movs	r0, #32
 8012904:	f003 fbca 	bl	801609c <pvPortMalloc>
 8012908:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	2b00      	cmp	r3, #0
 801290e:	d00a      	beq.n	8012926 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	2200      	movs	r2, #0
 8012914:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	3304      	adds	r3, #4
 801291a:	4618      	mov	r0, r3
 801291c:	f000 f9aa 	bl	8012c74 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	2200      	movs	r2, #0
 8012924:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8012926:	687b      	ldr	r3, [r7, #4]
	}
 8012928:	4618      	mov	r0, r3
 801292a:	3708      	adds	r7, #8
 801292c:	46bd      	mov	sp, r7
 801292e:	bd80      	pop	{r7, pc}

08012930 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8012930:	b580      	push	{r7, lr}
 8012932:	b090      	sub	sp, #64	@ 0x40
 8012934:	af00      	add	r7, sp, #0
 8012936:	60f8      	str	r0, [r7, #12]
 8012938:	60b9      	str	r1, [r7, #8]
 801293a:	607a      	str	r2, [r7, #4]
 801293c:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 801293e:	68fb      	ldr	r3, [r7, #12]
 8012940:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8012942:	2300      	movs	r3, #0
 8012944:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8012946:	2300      	movs	r3, #0
 8012948:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 801294a:	68fb      	ldr	r3, [r7, #12]
 801294c:	2b00      	cmp	r3, #0
 801294e:	d10b      	bne.n	8012968 <xEventGroupWaitBits+0x38>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8012950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012954:	f383 8811 	msr	BASEPRI, r3
 8012958:	f3bf 8f6f 	isb	sy
 801295c:	f3bf 8f4f 	dsb	sy
 8012960:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8012962:	bf00      	nop
 8012964:	bf00      	nop
 8012966:	e7fd      	b.n	8012964 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8012968:	68bb      	ldr	r3, [r7, #8]
 801296a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801296e:	d30b      	bcc.n	8012988 <xEventGroupWaitBits+0x58>
	__asm volatile
 8012970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012974:	f383 8811 	msr	BASEPRI, r3
 8012978:	f3bf 8f6f 	isb	sy
 801297c:	f3bf 8f4f 	dsb	sy
 8012980:	61fb      	str	r3, [r7, #28]
}
 8012982:	bf00      	nop
 8012984:	bf00      	nop
 8012986:	e7fd      	b.n	8012984 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8012988:	68bb      	ldr	r3, [r7, #8]
 801298a:	2b00      	cmp	r3, #0
 801298c:	d10b      	bne.n	80129a6 <xEventGroupWaitBits+0x76>
	__asm volatile
 801298e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012992:	f383 8811 	msr	BASEPRI, r3
 8012996:	f3bf 8f6f 	isb	sy
 801299a:	f3bf 8f4f 	dsb	sy
 801299e:	61bb      	str	r3, [r7, #24]
}
 80129a0:	bf00      	nop
 80129a2:	bf00      	nop
 80129a4:	e7fd      	b.n	80129a2 <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80129a6:	f002 f961 	bl	8014c6c <xTaskGetSchedulerState>
 80129aa:	4603      	mov	r3, r0
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	d102      	bne.n	80129b6 <xEventGroupWaitBits+0x86>
 80129b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	d101      	bne.n	80129ba <xEventGroupWaitBits+0x8a>
 80129b6:	2301      	movs	r3, #1
 80129b8:	e000      	b.n	80129bc <xEventGroupWaitBits+0x8c>
 80129ba:	2300      	movs	r3, #0
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d10b      	bne.n	80129d8 <xEventGroupWaitBits+0xa8>
	__asm volatile
 80129c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80129c4:	f383 8811 	msr	BASEPRI, r3
 80129c8:	f3bf 8f6f 	isb	sy
 80129cc:	f3bf 8f4f 	dsb	sy
 80129d0:	617b      	str	r3, [r7, #20]
}
 80129d2:	bf00      	nop
 80129d4:	bf00      	nop
 80129d6:	e7fd      	b.n	80129d4 <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 80129d8:	f001 fc90 	bl	80142fc <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80129dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80129de:	681b      	ldr	r3, [r3, #0]
 80129e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80129e2:	683a      	ldr	r2, [r7, #0]
 80129e4:	68b9      	ldr	r1, [r7, #8]
 80129e6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80129e8:	f000 f90d 	bl	8012c06 <prvTestWaitCondition>
 80129ec:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 80129ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d00e      	beq.n	8012a12 <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80129f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80129f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80129f8:	2300      	movs	r3, #0
 80129fa:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	d028      	beq.n	8012a54 <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8012a02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012a04:	681a      	ldr	r2, [r3, #0]
 8012a06:	68bb      	ldr	r3, [r7, #8]
 8012a08:	43db      	mvns	r3, r3
 8012a0a:	401a      	ands	r2, r3
 8012a0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012a0e:	601a      	str	r2, [r3, #0]
 8012a10:	e020      	b.n	8012a54 <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8012a12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	d104      	bne.n	8012a22 <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8012a18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 8012a1c:	2301      	movs	r3, #1
 8012a1e:	633b      	str	r3, [r7, #48]	@ 0x30
 8012a20:	e018      	b.n	8012a54 <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	d003      	beq.n	8012a30 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8012a28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8012a2e:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8012a30:	683b      	ldr	r3, [r7, #0]
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d003      	beq.n	8012a3e <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8012a36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a38:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8012a3c:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8012a3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012a40:	1d18      	adds	r0, r3, #4
 8012a42:	68ba      	ldr	r2, [r7, #8]
 8012a44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a46:	4313      	orrs	r3, r2
 8012a48:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8012a4a:	4619      	mov	r1, r3
 8012a4c:	f001 fe6a 	bl	8014724 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8012a50:	2300      	movs	r3, #0
 8012a52:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8012a54:	f001 fc60 	bl	8014318 <xTaskResumeAll>
 8012a58:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8012a5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	d031      	beq.n	8012ac4 <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 8012a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	d107      	bne.n	8012a76 <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 8012a66:	4b1a      	ldr	r3, [pc, #104]	@ (8012ad0 <xEventGroupWaitBits+0x1a0>)
 8012a68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012a6c:	601a      	str	r2, [r3, #0]
 8012a6e:	f3bf 8f4f 	dsb	sy
 8012a72:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8012a76:	f002 fa73 	bl	8014f60 <uxTaskResetEventItemValue>
 8012a7a:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8012a7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012a7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	d11a      	bne.n	8012abc <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 8012a86:	f003 f9e7 	bl	8015e58 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8012a8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012a8c:	681b      	ldr	r3, [r3, #0]
 8012a8e:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8012a90:	683a      	ldr	r2, [r7, #0]
 8012a92:	68b9      	ldr	r1, [r7, #8]
 8012a94:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8012a96:	f000 f8b6 	bl	8012c06 <prvTestWaitCondition>
 8012a9a:	4603      	mov	r3, r0
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	d009      	beq.n	8012ab4 <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	d006      	beq.n	8012ab4 <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8012aa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012aa8:	681a      	ldr	r2, [r3, #0]
 8012aaa:	68bb      	ldr	r3, [r7, #8]
 8012aac:	43db      	mvns	r3, r3
 8012aae:	401a      	ands	r2, r3
 8012ab0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012ab2:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8012ab4:	2301      	movs	r3, #1
 8012ab6:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 8012ab8:	f003 fa00 	bl	8015ebc <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8012abc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012abe:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8012ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8012ac4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8012ac6:	4618      	mov	r0, r3
 8012ac8:	3740      	adds	r7, #64	@ 0x40
 8012aca:	46bd      	mov	sp, r7
 8012acc:	bd80      	pop	{r7, pc}
 8012ace:	bf00      	nop
 8012ad0:	e000ed04 	.word	0xe000ed04

08012ad4 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8012ad4:	b580      	push	{r7, lr}
 8012ad6:	b08e      	sub	sp, #56	@ 0x38
 8012ad8:	af00      	add	r7, sp, #0
 8012ada:	6078      	str	r0, [r7, #4]
 8012adc:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8012ade:	2300      	movs	r3, #0
 8012ae0:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 8012ae6:	2300      	movs	r3, #0
 8012ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	d10b      	bne.n	8012b08 <xEventGroupSetBits+0x34>
	__asm volatile
 8012af0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012af4:	f383 8811 	msr	BASEPRI, r3
 8012af8:	f3bf 8f6f 	isb	sy
 8012afc:	f3bf 8f4f 	dsb	sy
 8012b00:	613b      	str	r3, [r7, #16]
}
 8012b02:	bf00      	nop
 8012b04:	bf00      	nop
 8012b06:	e7fd      	b.n	8012b04 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8012b08:	683b      	ldr	r3, [r7, #0]
 8012b0a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012b0e:	d30b      	bcc.n	8012b28 <xEventGroupSetBits+0x54>
	__asm volatile
 8012b10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012b14:	f383 8811 	msr	BASEPRI, r3
 8012b18:	f3bf 8f6f 	isb	sy
 8012b1c:	f3bf 8f4f 	dsb	sy
 8012b20:	60fb      	str	r3, [r7, #12]
}
 8012b22:	bf00      	nop
 8012b24:	bf00      	nop
 8012b26:	e7fd      	b.n	8012b24 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8012b28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b2a:	3304      	adds	r3, #4
 8012b2c:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b30:	3308      	adds	r3, #8
 8012b32:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8012b34:	f001 fbe2 	bl	80142fc <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8012b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b3a:	68db      	ldr	r3, [r3, #12]
 8012b3c:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8012b3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b40:	681a      	ldr	r2, [r3, #0]
 8012b42:	683b      	ldr	r3, [r7, #0]
 8012b44:	431a      	orrs	r2, r3
 8012b46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b48:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8012b4a:	e03c      	b.n	8012bc6 <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 8012b4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012b4e:	685b      	ldr	r3, [r3, #4]
 8012b50:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8012b52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012b54:	681b      	ldr	r3, [r3, #0]
 8012b56:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8012b58:	2300      	movs	r3, #0
 8012b5a:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8012b5c:	69bb      	ldr	r3, [r7, #24]
 8012b5e:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8012b62:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8012b64:	69bb      	ldr	r3, [r7, #24]
 8012b66:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8012b6a:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8012b6c:	697b      	ldr	r3, [r7, #20]
 8012b6e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d108      	bne.n	8012b88 <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8012b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b78:	681a      	ldr	r2, [r3, #0]
 8012b7a:	69bb      	ldr	r3, [r7, #24]
 8012b7c:	4013      	ands	r3, r2
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	d00b      	beq.n	8012b9a <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 8012b82:	2301      	movs	r3, #1
 8012b84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012b86:	e008      	b.n	8012b9a <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8012b88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b8a:	681a      	ldr	r2, [r3, #0]
 8012b8c:	69bb      	ldr	r3, [r7, #24]
 8012b8e:	4013      	ands	r3, r2
 8012b90:	69ba      	ldr	r2, [r7, #24]
 8012b92:	429a      	cmp	r2, r3
 8012b94:	d101      	bne.n	8012b9a <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8012b96:	2301      	movs	r3, #1
 8012b98:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8012b9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	d010      	beq.n	8012bc2 <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8012ba0:	697b      	ldr	r3, [r7, #20]
 8012ba2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	d003      	beq.n	8012bb2 <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8012baa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012bac:	69bb      	ldr	r3, [r7, #24]
 8012bae:	4313      	orrs	r3, r2
 8012bb0:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8012bb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012bb4:	681b      	ldr	r3, [r3, #0]
 8012bb6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8012bba:	4619      	mov	r1, r3
 8012bbc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8012bbe:	f001 fe7f 	bl	80148c0 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8012bc2:	69fb      	ldr	r3, [r7, #28]
 8012bc4:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 8012bc6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012bc8:	6a3b      	ldr	r3, [r7, #32]
 8012bca:	429a      	cmp	r2, r3
 8012bcc:	d1be      	bne.n	8012b4c <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8012bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012bd0:	681a      	ldr	r2, [r3, #0]
 8012bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012bd4:	43db      	mvns	r3, r3
 8012bd6:	401a      	ands	r2, r3
 8012bd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012bda:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8012bdc:	f001 fb9c 	bl	8014318 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8012be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012be2:	681b      	ldr	r3, [r3, #0]
}
 8012be4:	4618      	mov	r0, r3
 8012be6:	3738      	adds	r7, #56	@ 0x38
 8012be8:	46bd      	mov	sp, r7
 8012bea:	bd80      	pop	{r7, pc}

08012bec <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8012bec:	b580      	push	{r7, lr}
 8012bee:	b082      	sub	sp, #8
 8012bf0:	af00      	add	r7, sp, #0
 8012bf2:	6078      	str	r0, [r7, #4]
 8012bf4:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8012bf6:	6839      	ldr	r1, [r7, #0]
 8012bf8:	6878      	ldr	r0, [r7, #4]
 8012bfa:	f7ff ff6b 	bl	8012ad4 <xEventGroupSetBits>
}
 8012bfe:	bf00      	nop
 8012c00:	3708      	adds	r7, #8
 8012c02:	46bd      	mov	sp, r7
 8012c04:	bd80      	pop	{r7, pc}

08012c06 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8012c06:	b480      	push	{r7}
 8012c08:	b087      	sub	sp, #28
 8012c0a:	af00      	add	r7, sp, #0
 8012c0c:	60f8      	str	r0, [r7, #12]
 8012c0e:	60b9      	str	r1, [r7, #8]
 8012c10:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8012c12:	2300      	movs	r3, #0
 8012c14:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d107      	bne.n	8012c2c <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8012c1c:	68fa      	ldr	r2, [r7, #12]
 8012c1e:	68bb      	ldr	r3, [r7, #8]
 8012c20:	4013      	ands	r3, r2
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	d00a      	beq.n	8012c3c <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8012c26:	2301      	movs	r3, #1
 8012c28:	617b      	str	r3, [r7, #20]
 8012c2a:	e007      	b.n	8012c3c <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8012c2c:	68fa      	ldr	r2, [r7, #12]
 8012c2e:	68bb      	ldr	r3, [r7, #8]
 8012c30:	4013      	ands	r3, r2
 8012c32:	68ba      	ldr	r2, [r7, #8]
 8012c34:	429a      	cmp	r2, r3
 8012c36:	d101      	bne.n	8012c3c <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8012c38:	2301      	movs	r3, #1
 8012c3a:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8012c3c:	697b      	ldr	r3, [r7, #20]
}
 8012c3e:	4618      	mov	r0, r3
 8012c40:	371c      	adds	r7, #28
 8012c42:	46bd      	mov	sp, r7
 8012c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c48:	4770      	bx	lr
	...

08012c4c <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8012c4c:	b580      	push	{r7, lr}
 8012c4e:	b086      	sub	sp, #24
 8012c50:	af00      	add	r7, sp, #0
 8012c52:	60f8      	str	r0, [r7, #12]
 8012c54:	60b9      	str	r1, [r7, #8]
 8012c56:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	68ba      	ldr	r2, [r7, #8]
 8012c5c:	68f9      	ldr	r1, [r7, #12]
 8012c5e:	4804      	ldr	r0, [pc, #16]	@ (8012c70 <xEventGroupSetBitsFromISR+0x24>)
 8012c60:	f002 ffaa 	bl	8015bb8 <xTimerPendFunctionCallFromISR>
 8012c64:	6178      	str	r0, [r7, #20]

		return xReturn;
 8012c66:	697b      	ldr	r3, [r7, #20]
	}
 8012c68:	4618      	mov	r0, r3
 8012c6a:	3718      	adds	r7, #24
 8012c6c:	46bd      	mov	sp, r7
 8012c6e:	bd80      	pop	{r7, pc}
 8012c70:	08012bed 	.word	0x08012bed

08012c74 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012c74:	b480      	push	{r7}
 8012c76:	b083      	sub	sp, #12
 8012c78:	af00      	add	r7, sp, #0
 8012c7a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	f103 0208 	add.w	r2, r3, #8
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012c8c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	f103 0208 	add.w	r2, r3, #8
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	f103 0208 	add.w	r2, r3, #8
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	2200      	movs	r2, #0
 8012ca6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012ca8:	bf00      	nop
 8012caa:	370c      	adds	r7, #12
 8012cac:	46bd      	mov	sp, r7
 8012cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cb2:	4770      	bx	lr

08012cb4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012cb4:	b480      	push	{r7}
 8012cb6:	b083      	sub	sp, #12
 8012cb8:	af00      	add	r7, sp, #0
 8012cba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	2200      	movs	r2, #0
 8012cc0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8012cc2:	bf00      	nop
 8012cc4:	370c      	adds	r7, #12
 8012cc6:	46bd      	mov	sp, r7
 8012cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ccc:	4770      	bx	lr

08012cce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012cce:	b480      	push	{r7}
 8012cd0:	b085      	sub	sp, #20
 8012cd2:	af00      	add	r7, sp, #0
 8012cd4:	6078      	str	r0, [r7, #4]
 8012cd6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	685b      	ldr	r3, [r3, #4]
 8012cdc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8012cde:	683b      	ldr	r3, [r7, #0]
 8012ce0:	68fa      	ldr	r2, [r7, #12]
 8012ce2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012ce4:	68fb      	ldr	r3, [r7, #12]
 8012ce6:	689a      	ldr	r2, [r3, #8]
 8012ce8:	683b      	ldr	r3, [r7, #0]
 8012cea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012cec:	68fb      	ldr	r3, [r7, #12]
 8012cee:	689b      	ldr	r3, [r3, #8]
 8012cf0:	683a      	ldr	r2, [r7, #0]
 8012cf2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012cf4:	68fb      	ldr	r3, [r7, #12]
 8012cf6:	683a      	ldr	r2, [r7, #0]
 8012cf8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8012cfa:	683b      	ldr	r3, [r7, #0]
 8012cfc:	687a      	ldr	r2, [r7, #4]
 8012cfe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	681b      	ldr	r3, [r3, #0]
 8012d04:	1c5a      	adds	r2, r3, #1
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	601a      	str	r2, [r3, #0]
}
 8012d0a:	bf00      	nop
 8012d0c:	3714      	adds	r7, #20
 8012d0e:	46bd      	mov	sp, r7
 8012d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d14:	4770      	bx	lr

08012d16 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012d16:	b480      	push	{r7}
 8012d18:	b085      	sub	sp, #20
 8012d1a:	af00      	add	r7, sp, #0
 8012d1c:	6078      	str	r0, [r7, #4]
 8012d1e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012d20:	683b      	ldr	r3, [r7, #0]
 8012d22:	681b      	ldr	r3, [r3, #0]
 8012d24:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012d26:	68bb      	ldr	r3, [r7, #8]
 8012d28:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012d2c:	d103      	bne.n	8012d36 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	691b      	ldr	r3, [r3, #16]
 8012d32:	60fb      	str	r3, [r7, #12]
 8012d34:	e00c      	b.n	8012d50 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	3308      	adds	r3, #8
 8012d3a:	60fb      	str	r3, [r7, #12]
 8012d3c:	e002      	b.n	8012d44 <vListInsert+0x2e>
 8012d3e:	68fb      	ldr	r3, [r7, #12]
 8012d40:	685b      	ldr	r3, [r3, #4]
 8012d42:	60fb      	str	r3, [r7, #12]
 8012d44:	68fb      	ldr	r3, [r7, #12]
 8012d46:	685b      	ldr	r3, [r3, #4]
 8012d48:	681b      	ldr	r3, [r3, #0]
 8012d4a:	68ba      	ldr	r2, [r7, #8]
 8012d4c:	429a      	cmp	r2, r3
 8012d4e:	d2f6      	bcs.n	8012d3e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012d50:	68fb      	ldr	r3, [r7, #12]
 8012d52:	685a      	ldr	r2, [r3, #4]
 8012d54:	683b      	ldr	r3, [r7, #0]
 8012d56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012d58:	683b      	ldr	r3, [r7, #0]
 8012d5a:	685b      	ldr	r3, [r3, #4]
 8012d5c:	683a      	ldr	r2, [r7, #0]
 8012d5e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012d60:	683b      	ldr	r3, [r7, #0]
 8012d62:	68fa      	ldr	r2, [r7, #12]
 8012d64:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8012d66:	68fb      	ldr	r3, [r7, #12]
 8012d68:	683a      	ldr	r2, [r7, #0]
 8012d6a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8012d6c:	683b      	ldr	r3, [r7, #0]
 8012d6e:	687a      	ldr	r2, [r7, #4]
 8012d70:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	681b      	ldr	r3, [r3, #0]
 8012d76:	1c5a      	adds	r2, r3, #1
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	601a      	str	r2, [r3, #0]
}
 8012d7c:	bf00      	nop
 8012d7e:	3714      	adds	r7, #20
 8012d80:	46bd      	mov	sp, r7
 8012d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d86:	4770      	bx	lr

08012d88 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012d88:	b480      	push	{r7}
 8012d8a:	b085      	sub	sp, #20
 8012d8c:	af00      	add	r7, sp, #0
 8012d8e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	691b      	ldr	r3, [r3, #16]
 8012d94:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	685b      	ldr	r3, [r3, #4]
 8012d9a:	687a      	ldr	r2, [r7, #4]
 8012d9c:	6892      	ldr	r2, [r2, #8]
 8012d9e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	689b      	ldr	r3, [r3, #8]
 8012da4:	687a      	ldr	r2, [r7, #4]
 8012da6:	6852      	ldr	r2, [r2, #4]
 8012da8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012daa:	68fb      	ldr	r3, [r7, #12]
 8012dac:	685b      	ldr	r3, [r3, #4]
 8012dae:	687a      	ldr	r2, [r7, #4]
 8012db0:	429a      	cmp	r2, r3
 8012db2:	d103      	bne.n	8012dbc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	689a      	ldr	r2, [r3, #8]
 8012db8:	68fb      	ldr	r3, [r7, #12]
 8012dba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	2200      	movs	r2, #0
 8012dc0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8012dc2:	68fb      	ldr	r3, [r7, #12]
 8012dc4:	681b      	ldr	r3, [r3, #0]
 8012dc6:	1e5a      	subs	r2, r3, #1
 8012dc8:	68fb      	ldr	r3, [r7, #12]
 8012dca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8012dcc:	68fb      	ldr	r3, [r7, #12]
 8012dce:	681b      	ldr	r3, [r3, #0]
}
 8012dd0:	4618      	mov	r0, r3
 8012dd2:	3714      	adds	r7, #20
 8012dd4:	46bd      	mov	sp, r7
 8012dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dda:	4770      	bx	lr

08012ddc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8012ddc:	b580      	push	{r7, lr}
 8012dde:	b084      	sub	sp, #16
 8012de0:	af00      	add	r7, sp, #0
 8012de2:	6078      	str	r0, [r7, #4]
 8012de4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012dea:	68fb      	ldr	r3, [r7, #12]
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d10b      	bne.n	8012e08 <xQueueGenericReset+0x2c>
	__asm volatile
 8012df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012df4:	f383 8811 	msr	BASEPRI, r3
 8012df8:	f3bf 8f6f 	isb	sy
 8012dfc:	f3bf 8f4f 	dsb	sy
 8012e00:	60bb      	str	r3, [r7, #8]
}
 8012e02:	bf00      	nop
 8012e04:	bf00      	nop
 8012e06:	e7fd      	b.n	8012e04 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8012e08:	f003 f826 	bl	8015e58 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012e0c:	68fb      	ldr	r3, [r7, #12]
 8012e0e:	681a      	ldr	r2, [r3, #0]
 8012e10:	68fb      	ldr	r3, [r7, #12]
 8012e12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012e14:	68f9      	ldr	r1, [r7, #12]
 8012e16:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8012e18:	fb01 f303 	mul.w	r3, r1, r3
 8012e1c:	441a      	add	r2, r3
 8012e1e:	68fb      	ldr	r3, [r7, #12]
 8012e20:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8012e22:	68fb      	ldr	r3, [r7, #12]
 8012e24:	2200      	movs	r2, #0
 8012e26:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8012e28:	68fb      	ldr	r3, [r7, #12]
 8012e2a:	681a      	ldr	r2, [r3, #0]
 8012e2c:	68fb      	ldr	r3, [r7, #12]
 8012e2e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012e30:	68fb      	ldr	r3, [r7, #12]
 8012e32:	681a      	ldr	r2, [r3, #0]
 8012e34:	68fb      	ldr	r3, [r7, #12]
 8012e36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012e38:	3b01      	subs	r3, #1
 8012e3a:	68f9      	ldr	r1, [r7, #12]
 8012e3c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8012e3e:	fb01 f303 	mul.w	r3, r1, r3
 8012e42:	441a      	add	r2, r3
 8012e44:	68fb      	ldr	r3, [r7, #12]
 8012e46:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8012e48:	68fb      	ldr	r3, [r7, #12]
 8012e4a:	22ff      	movs	r2, #255	@ 0xff
 8012e4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8012e50:	68fb      	ldr	r3, [r7, #12]
 8012e52:	22ff      	movs	r2, #255	@ 0xff
 8012e54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8012e58:	683b      	ldr	r3, [r7, #0]
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d114      	bne.n	8012e88 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012e5e:	68fb      	ldr	r3, [r7, #12]
 8012e60:	691b      	ldr	r3, [r3, #16]
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	d01a      	beq.n	8012e9c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012e66:	68fb      	ldr	r3, [r7, #12]
 8012e68:	3310      	adds	r3, #16
 8012e6a:	4618      	mov	r0, r3
 8012e6c:	f001 fcc4 	bl	80147f8 <xTaskRemoveFromEventList>
 8012e70:	4603      	mov	r3, r0
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	d012      	beq.n	8012e9c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8012e76:	4b0d      	ldr	r3, [pc, #52]	@ (8012eac <xQueueGenericReset+0xd0>)
 8012e78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012e7c:	601a      	str	r2, [r3, #0]
 8012e7e:	f3bf 8f4f 	dsb	sy
 8012e82:	f3bf 8f6f 	isb	sy
 8012e86:	e009      	b.n	8012e9c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8012e88:	68fb      	ldr	r3, [r7, #12]
 8012e8a:	3310      	adds	r3, #16
 8012e8c:	4618      	mov	r0, r3
 8012e8e:	f7ff fef1 	bl	8012c74 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8012e92:	68fb      	ldr	r3, [r7, #12]
 8012e94:	3324      	adds	r3, #36	@ 0x24
 8012e96:	4618      	mov	r0, r3
 8012e98:	f7ff feec 	bl	8012c74 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8012e9c:	f003 f80e 	bl	8015ebc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8012ea0:	2301      	movs	r3, #1
}
 8012ea2:	4618      	mov	r0, r3
 8012ea4:	3710      	adds	r7, #16
 8012ea6:	46bd      	mov	sp, r7
 8012ea8:	bd80      	pop	{r7, pc}
 8012eaa:	bf00      	nop
 8012eac:	e000ed04 	.word	0xe000ed04

08012eb0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8012eb0:	b580      	push	{r7, lr}
 8012eb2:	b08e      	sub	sp, #56	@ 0x38
 8012eb4:	af02      	add	r7, sp, #8
 8012eb6:	60f8      	str	r0, [r7, #12]
 8012eb8:	60b9      	str	r1, [r7, #8]
 8012eba:	607a      	str	r2, [r7, #4]
 8012ebc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012ebe:	68fb      	ldr	r3, [r7, #12]
 8012ec0:	2b00      	cmp	r3, #0
 8012ec2:	d10b      	bne.n	8012edc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8012ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012ec8:	f383 8811 	msr	BASEPRI, r3
 8012ecc:	f3bf 8f6f 	isb	sy
 8012ed0:	f3bf 8f4f 	dsb	sy
 8012ed4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8012ed6:	bf00      	nop
 8012ed8:	bf00      	nop
 8012eda:	e7fd      	b.n	8012ed8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8012edc:	683b      	ldr	r3, [r7, #0]
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	d10b      	bne.n	8012efa <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8012ee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012ee6:	f383 8811 	msr	BASEPRI, r3
 8012eea:	f3bf 8f6f 	isb	sy
 8012eee:	f3bf 8f4f 	dsb	sy
 8012ef2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8012ef4:	bf00      	nop
 8012ef6:	bf00      	nop
 8012ef8:	e7fd      	b.n	8012ef6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	d002      	beq.n	8012f06 <xQueueGenericCreateStatic+0x56>
 8012f00:	68bb      	ldr	r3, [r7, #8]
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	d001      	beq.n	8012f0a <xQueueGenericCreateStatic+0x5a>
 8012f06:	2301      	movs	r3, #1
 8012f08:	e000      	b.n	8012f0c <xQueueGenericCreateStatic+0x5c>
 8012f0a:	2300      	movs	r3, #0
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d10b      	bne.n	8012f28 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8012f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012f14:	f383 8811 	msr	BASEPRI, r3
 8012f18:	f3bf 8f6f 	isb	sy
 8012f1c:	f3bf 8f4f 	dsb	sy
 8012f20:	623b      	str	r3, [r7, #32]
}
 8012f22:	bf00      	nop
 8012f24:	bf00      	nop
 8012f26:	e7fd      	b.n	8012f24 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d102      	bne.n	8012f34 <xQueueGenericCreateStatic+0x84>
 8012f2e:	68bb      	ldr	r3, [r7, #8]
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	d101      	bne.n	8012f38 <xQueueGenericCreateStatic+0x88>
 8012f34:	2301      	movs	r3, #1
 8012f36:	e000      	b.n	8012f3a <xQueueGenericCreateStatic+0x8a>
 8012f38:	2300      	movs	r3, #0
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	d10b      	bne.n	8012f56 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8012f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012f42:	f383 8811 	msr	BASEPRI, r3
 8012f46:	f3bf 8f6f 	isb	sy
 8012f4a:	f3bf 8f4f 	dsb	sy
 8012f4e:	61fb      	str	r3, [r7, #28]
}
 8012f50:	bf00      	nop
 8012f52:	bf00      	nop
 8012f54:	e7fd      	b.n	8012f52 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8012f56:	2350      	movs	r3, #80	@ 0x50
 8012f58:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8012f5a:	697b      	ldr	r3, [r7, #20]
 8012f5c:	2b50      	cmp	r3, #80	@ 0x50
 8012f5e:	d00b      	beq.n	8012f78 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8012f60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012f64:	f383 8811 	msr	BASEPRI, r3
 8012f68:	f3bf 8f6f 	isb	sy
 8012f6c:	f3bf 8f4f 	dsb	sy
 8012f70:	61bb      	str	r3, [r7, #24]
}
 8012f72:	bf00      	nop
 8012f74:	bf00      	nop
 8012f76:	e7fd      	b.n	8012f74 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8012f78:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012f7a:	683b      	ldr	r3, [r7, #0]
 8012f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8012f7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	d00d      	beq.n	8012fa0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8012f84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f86:	2201      	movs	r2, #1
 8012f88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012f8c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8012f90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f92:	9300      	str	r3, [sp, #0]
 8012f94:	4613      	mov	r3, r2
 8012f96:	687a      	ldr	r2, [r7, #4]
 8012f98:	68b9      	ldr	r1, [r7, #8]
 8012f9a:	68f8      	ldr	r0, [r7, #12]
 8012f9c:	f000 f840 	bl	8013020 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012fa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8012fa2:	4618      	mov	r0, r3
 8012fa4:	3730      	adds	r7, #48	@ 0x30
 8012fa6:	46bd      	mov	sp, r7
 8012fa8:	bd80      	pop	{r7, pc}

08012faa <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8012faa:	b580      	push	{r7, lr}
 8012fac:	b08a      	sub	sp, #40	@ 0x28
 8012fae:	af02      	add	r7, sp, #8
 8012fb0:	60f8      	str	r0, [r7, #12]
 8012fb2:	60b9      	str	r1, [r7, #8]
 8012fb4:	4613      	mov	r3, r2
 8012fb6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012fb8:	68fb      	ldr	r3, [r7, #12]
 8012fba:	2b00      	cmp	r3, #0
 8012fbc:	d10b      	bne.n	8012fd6 <xQueueGenericCreate+0x2c>
	__asm volatile
 8012fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012fc2:	f383 8811 	msr	BASEPRI, r3
 8012fc6:	f3bf 8f6f 	isb	sy
 8012fca:	f3bf 8f4f 	dsb	sy
 8012fce:	613b      	str	r3, [r7, #16]
}
 8012fd0:	bf00      	nop
 8012fd2:	bf00      	nop
 8012fd4:	e7fd      	b.n	8012fd2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012fd6:	68fb      	ldr	r3, [r7, #12]
 8012fd8:	68ba      	ldr	r2, [r7, #8]
 8012fda:	fb02 f303 	mul.w	r3, r2, r3
 8012fde:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8012fe0:	69fb      	ldr	r3, [r7, #28]
 8012fe2:	3350      	adds	r3, #80	@ 0x50
 8012fe4:	4618      	mov	r0, r3
 8012fe6:	f003 f859 	bl	801609c <pvPortMalloc>
 8012fea:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8012fec:	69bb      	ldr	r3, [r7, #24]
 8012fee:	2b00      	cmp	r3, #0
 8012ff0:	d011      	beq.n	8013016 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8012ff2:	69bb      	ldr	r3, [r7, #24]
 8012ff4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012ff6:	697b      	ldr	r3, [r7, #20]
 8012ff8:	3350      	adds	r3, #80	@ 0x50
 8012ffa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8012ffc:	69bb      	ldr	r3, [r7, #24]
 8012ffe:	2200      	movs	r2, #0
 8013000:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013004:	79fa      	ldrb	r2, [r7, #7]
 8013006:	69bb      	ldr	r3, [r7, #24]
 8013008:	9300      	str	r3, [sp, #0]
 801300a:	4613      	mov	r3, r2
 801300c:	697a      	ldr	r2, [r7, #20]
 801300e:	68b9      	ldr	r1, [r7, #8]
 8013010:	68f8      	ldr	r0, [r7, #12]
 8013012:	f000 f805 	bl	8013020 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8013016:	69bb      	ldr	r3, [r7, #24]
	}
 8013018:	4618      	mov	r0, r3
 801301a:	3720      	adds	r7, #32
 801301c:	46bd      	mov	sp, r7
 801301e:	bd80      	pop	{r7, pc}

08013020 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8013020:	b580      	push	{r7, lr}
 8013022:	b084      	sub	sp, #16
 8013024:	af00      	add	r7, sp, #0
 8013026:	60f8      	str	r0, [r7, #12]
 8013028:	60b9      	str	r1, [r7, #8]
 801302a:	607a      	str	r2, [r7, #4]
 801302c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801302e:	68bb      	ldr	r3, [r7, #8]
 8013030:	2b00      	cmp	r3, #0
 8013032:	d103      	bne.n	801303c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8013034:	69bb      	ldr	r3, [r7, #24]
 8013036:	69ba      	ldr	r2, [r7, #24]
 8013038:	601a      	str	r2, [r3, #0]
 801303a:	e002      	b.n	8013042 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801303c:	69bb      	ldr	r3, [r7, #24]
 801303e:	687a      	ldr	r2, [r7, #4]
 8013040:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8013042:	69bb      	ldr	r3, [r7, #24]
 8013044:	68fa      	ldr	r2, [r7, #12]
 8013046:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8013048:	69bb      	ldr	r3, [r7, #24]
 801304a:	68ba      	ldr	r2, [r7, #8]
 801304c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801304e:	2101      	movs	r1, #1
 8013050:	69b8      	ldr	r0, [r7, #24]
 8013052:	f7ff fec3 	bl	8012ddc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8013056:	69bb      	ldr	r3, [r7, #24]
 8013058:	78fa      	ldrb	r2, [r7, #3]
 801305a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801305e:	bf00      	nop
 8013060:	3710      	adds	r7, #16
 8013062:	46bd      	mov	sp, r7
 8013064:	bd80      	pop	{r7, pc}

08013066 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8013066:	b580      	push	{r7, lr}
 8013068:	b08a      	sub	sp, #40	@ 0x28
 801306a:	af02      	add	r7, sp, #8
 801306c:	60f8      	str	r0, [r7, #12]
 801306e:	60b9      	str	r1, [r7, #8]
 8013070:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8013072:	68fb      	ldr	r3, [r7, #12]
 8013074:	2b00      	cmp	r3, #0
 8013076:	d10b      	bne.n	8013090 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8013078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801307c:	f383 8811 	msr	BASEPRI, r3
 8013080:	f3bf 8f6f 	isb	sy
 8013084:	f3bf 8f4f 	dsb	sy
 8013088:	61bb      	str	r3, [r7, #24]
}
 801308a:	bf00      	nop
 801308c:	bf00      	nop
 801308e:	e7fd      	b.n	801308c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8013090:	68ba      	ldr	r2, [r7, #8]
 8013092:	68fb      	ldr	r3, [r7, #12]
 8013094:	429a      	cmp	r2, r3
 8013096:	d90b      	bls.n	80130b0 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8013098:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801309c:	f383 8811 	msr	BASEPRI, r3
 80130a0:	f3bf 8f6f 	isb	sy
 80130a4:	f3bf 8f4f 	dsb	sy
 80130a8:	617b      	str	r3, [r7, #20]
}
 80130aa:	bf00      	nop
 80130ac:	bf00      	nop
 80130ae:	e7fd      	b.n	80130ac <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80130b0:	2302      	movs	r3, #2
 80130b2:	9300      	str	r3, [sp, #0]
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	2200      	movs	r2, #0
 80130b8:	2100      	movs	r1, #0
 80130ba:	68f8      	ldr	r0, [r7, #12]
 80130bc:	f7ff fef8 	bl	8012eb0 <xQueueGenericCreateStatic>
 80130c0:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80130c2:	69fb      	ldr	r3, [r7, #28]
 80130c4:	2b00      	cmp	r3, #0
 80130c6:	d002      	beq.n	80130ce <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80130c8:	69fb      	ldr	r3, [r7, #28]
 80130ca:	68ba      	ldr	r2, [r7, #8]
 80130cc:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80130ce:	69fb      	ldr	r3, [r7, #28]
	}
 80130d0:	4618      	mov	r0, r3
 80130d2:	3720      	adds	r7, #32
 80130d4:	46bd      	mov	sp, r7
 80130d6:	bd80      	pop	{r7, pc}

080130d8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80130d8:	b580      	push	{r7, lr}
 80130da:	b086      	sub	sp, #24
 80130dc:	af00      	add	r7, sp, #0
 80130de:	6078      	str	r0, [r7, #4]
 80130e0:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	d10b      	bne.n	8013100 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 80130e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80130ec:	f383 8811 	msr	BASEPRI, r3
 80130f0:	f3bf 8f6f 	isb	sy
 80130f4:	f3bf 8f4f 	dsb	sy
 80130f8:	613b      	str	r3, [r7, #16]
}
 80130fa:	bf00      	nop
 80130fc:	bf00      	nop
 80130fe:	e7fd      	b.n	80130fc <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8013100:	683a      	ldr	r2, [r7, #0]
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	429a      	cmp	r2, r3
 8013106:	d90b      	bls.n	8013120 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8013108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801310c:	f383 8811 	msr	BASEPRI, r3
 8013110:	f3bf 8f6f 	isb	sy
 8013114:	f3bf 8f4f 	dsb	sy
 8013118:	60fb      	str	r3, [r7, #12]
}
 801311a:	bf00      	nop
 801311c:	bf00      	nop
 801311e:	e7fd      	b.n	801311c <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8013120:	2202      	movs	r2, #2
 8013122:	2100      	movs	r1, #0
 8013124:	6878      	ldr	r0, [r7, #4]
 8013126:	f7ff ff40 	bl	8012faa <xQueueGenericCreate>
 801312a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 801312c:	697b      	ldr	r3, [r7, #20]
 801312e:	2b00      	cmp	r3, #0
 8013130:	d002      	beq.n	8013138 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8013132:	697b      	ldr	r3, [r7, #20]
 8013134:	683a      	ldr	r2, [r7, #0]
 8013136:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8013138:	697b      	ldr	r3, [r7, #20]
	}
 801313a:	4618      	mov	r0, r3
 801313c:	3718      	adds	r7, #24
 801313e:	46bd      	mov	sp, r7
 8013140:	bd80      	pop	{r7, pc}
	...

08013144 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8013144:	b580      	push	{r7, lr}
 8013146:	b08e      	sub	sp, #56	@ 0x38
 8013148:	af00      	add	r7, sp, #0
 801314a:	60f8      	str	r0, [r7, #12]
 801314c:	60b9      	str	r1, [r7, #8]
 801314e:	607a      	str	r2, [r7, #4]
 8013150:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8013152:	2300      	movs	r3, #0
 8013154:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013156:	68fb      	ldr	r3, [r7, #12]
 8013158:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 801315a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801315c:	2b00      	cmp	r3, #0
 801315e:	d10b      	bne.n	8013178 <xQueueGenericSend+0x34>
	__asm volatile
 8013160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013164:	f383 8811 	msr	BASEPRI, r3
 8013168:	f3bf 8f6f 	isb	sy
 801316c:	f3bf 8f4f 	dsb	sy
 8013170:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8013172:	bf00      	nop
 8013174:	bf00      	nop
 8013176:	e7fd      	b.n	8013174 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013178:	68bb      	ldr	r3, [r7, #8]
 801317a:	2b00      	cmp	r3, #0
 801317c:	d103      	bne.n	8013186 <xQueueGenericSend+0x42>
 801317e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013182:	2b00      	cmp	r3, #0
 8013184:	d101      	bne.n	801318a <xQueueGenericSend+0x46>
 8013186:	2301      	movs	r3, #1
 8013188:	e000      	b.n	801318c <xQueueGenericSend+0x48>
 801318a:	2300      	movs	r3, #0
 801318c:	2b00      	cmp	r3, #0
 801318e:	d10b      	bne.n	80131a8 <xQueueGenericSend+0x64>
	__asm volatile
 8013190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013194:	f383 8811 	msr	BASEPRI, r3
 8013198:	f3bf 8f6f 	isb	sy
 801319c:	f3bf 8f4f 	dsb	sy
 80131a0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80131a2:	bf00      	nop
 80131a4:	bf00      	nop
 80131a6:	e7fd      	b.n	80131a4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80131a8:	683b      	ldr	r3, [r7, #0]
 80131aa:	2b02      	cmp	r3, #2
 80131ac:	d103      	bne.n	80131b6 <xQueueGenericSend+0x72>
 80131ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80131b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80131b2:	2b01      	cmp	r3, #1
 80131b4:	d101      	bne.n	80131ba <xQueueGenericSend+0x76>
 80131b6:	2301      	movs	r3, #1
 80131b8:	e000      	b.n	80131bc <xQueueGenericSend+0x78>
 80131ba:	2300      	movs	r3, #0
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d10b      	bne.n	80131d8 <xQueueGenericSend+0x94>
	__asm volatile
 80131c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80131c4:	f383 8811 	msr	BASEPRI, r3
 80131c8:	f3bf 8f6f 	isb	sy
 80131cc:	f3bf 8f4f 	dsb	sy
 80131d0:	623b      	str	r3, [r7, #32]
}
 80131d2:	bf00      	nop
 80131d4:	bf00      	nop
 80131d6:	e7fd      	b.n	80131d4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80131d8:	f001 fd48 	bl	8014c6c <xTaskGetSchedulerState>
 80131dc:	4603      	mov	r3, r0
 80131de:	2b00      	cmp	r3, #0
 80131e0:	d102      	bne.n	80131e8 <xQueueGenericSend+0xa4>
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	d101      	bne.n	80131ec <xQueueGenericSend+0xa8>
 80131e8:	2301      	movs	r3, #1
 80131ea:	e000      	b.n	80131ee <xQueueGenericSend+0xaa>
 80131ec:	2300      	movs	r3, #0
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d10b      	bne.n	801320a <xQueueGenericSend+0xc6>
	__asm volatile
 80131f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80131f6:	f383 8811 	msr	BASEPRI, r3
 80131fa:	f3bf 8f6f 	isb	sy
 80131fe:	f3bf 8f4f 	dsb	sy
 8013202:	61fb      	str	r3, [r7, #28]
}
 8013204:	bf00      	nop
 8013206:	bf00      	nop
 8013208:	e7fd      	b.n	8013206 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801320a:	f002 fe25 	bl	8015e58 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801320e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013210:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013214:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013216:	429a      	cmp	r2, r3
 8013218:	d302      	bcc.n	8013220 <xQueueGenericSend+0xdc>
 801321a:	683b      	ldr	r3, [r7, #0]
 801321c:	2b02      	cmp	r3, #2
 801321e:	d129      	bne.n	8013274 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013220:	683a      	ldr	r2, [r7, #0]
 8013222:	68b9      	ldr	r1, [r7, #8]
 8013224:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013226:	f000 fc6d 	bl	8013b04 <prvCopyDataToQueue>
 801322a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801322c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801322e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013230:	2b00      	cmp	r3, #0
 8013232:	d010      	beq.n	8013256 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013236:	3324      	adds	r3, #36	@ 0x24
 8013238:	4618      	mov	r0, r3
 801323a:	f001 fadd 	bl	80147f8 <xTaskRemoveFromEventList>
 801323e:	4603      	mov	r3, r0
 8013240:	2b00      	cmp	r3, #0
 8013242:	d013      	beq.n	801326c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8013244:	4b3f      	ldr	r3, [pc, #252]	@ (8013344 <xQueueGenericSend+0x200>)
 8013246:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801324a:	601a      	str	r2, [r3, #0]
 801324c:	f3bf 8f4f 	dsb	sy
 8013250:	f3bf 8f6f 	isb	sy
 8013254:	e00a      	b.n	801326c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8013256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013258:	2b00      	cmp	r3, #0
 801325a:	d007      	beq.n	801326c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801325c:	4b39      	ldr	r3, [pc, #228]	@ (8013344 <xQueueGenericSend+0x200>)
 801325e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013262:	601a      	str	r2, [r3, #0]
 8013264:	f3bf 8f4f 	dsb	sy
 8013268:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801326c:	f002 fe26 	bl	8015ebc <vPortExitCritical>
				return pdPASS;
 8013270:	2301      	movs	r3, #1
 8013272:	e063      	b.n	801333c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	2b00      	cmp	r3, #0
 8013278:	d103      	bne.n	8013282 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801327a:	f002 fe1f 	bl	8015ebc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801327e:	2300      	movs	r3, #0
 8013280:	e05c      	b.n	801333c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013282:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013284:	2b00      	cmp	r3, #0
 8013286:	d106      	bne.n	8013296 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013288:	f107 0314 	add.w	r3, r7, #20
 801328c:	4618      	mov	r0, r3
 801328e:	f001 fb7b 	bl	8014988 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013292:	2301      	movs	r3, #1
 8013294:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013296:	f002 fe11 	bl	8015ebc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801329a:	f001 f82f 	bl	80142fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801329e:	f002 fddb 	bl	8015e58 <vPortEnterCritical>
 80132a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80132a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80132a8:	b25b      	sxtb	r3, r3
 80132aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80132ae:	d103      	bne.n	80132b8 <xQueueGenericSend+0x174>
 80132b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80132b2:	2200      	movs	r2, #0
 80132b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80132b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80132ba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80132be:	b25b      	sxtb	r3, r3
 80132c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80132c4:	d103      	bne.n	80132ce <xQueueGenericSend+0x18a>
 80132c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80132c8:	2200      	movs	r2, #0
 80132ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80132ce:	f002 fdf5 	bl	8015ebc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80132d2:	1d3a      	adds	r2, r7, #4
 80132d4:	f107 0314 	add.w	r3, r7, #20
 80132d8:	4611      	mov	r1, r2
 80132da:	4618      	mov	r0, r3
 80132dc:	f001 fb6a 	bl	80149b4 <xTaskCheckForTimeOut>
 80132e0:	4603      	mov	r3, r0
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	d124      	bne.n	8013330 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80132e6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80132e8:	f000 fd04 	bl	8013cf4 <prvIsQueueFull>
 80132ec:	4603      	mov	r3, r0
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	d018      	beq.n	8013324 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80132f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80132f4:	3310      	adds	r3, #16
 80132f6:	687a      	ldr	r2, [r7, #4]
 80132f8:	4611      	mov	r1, r2
 80132fa:	4618      	mov	r0, r3
 80132fc:	f001 f9ec 	bl	80146d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8013300:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013302:	f000 fc8f 	bl	8013c24 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8013306:	f001 f807 	bl	8014318 <xTaskResumeAll>
 801330a:	4603      	mov	r3, r0
 801330c:	2b00      	cmp	r3, #0
 801330e:	f47f af7c 	bne.w	801320a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8013312:	4b0c      	ldr	r3, [pc, #48]	@ (8013344 <xQueueGenericSend+0x200>)
 8013314:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013318:	601a      	str	r2, [r3, #0]
 801331a:	f3bf 8f4f 	dsb	sy
 801331e:	f3bf 8f6f 	isb	sy
 8013322:	e772      	b.n	801320a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8013324:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013326:	f000 fc7d 	bl	8013c24 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801332a:	f000 fff5 	bl	8014318 <xTaskResumeAll>
 801332e:	e76c      	b.n	801320a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8013330:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013332:	f000 fc77 	bl	8013c24 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013336:	f000 ffef 	bl	8014318 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801333a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801333c:	4618      	mov	r0, r3
 801333e:	3738      	adds	r7, #56	@ 0x38
 8013340:	46bd      	mov	sp, r7
 8013342:	bd80      	pop	{r7, pc}
 8013344:	e000ed04 	.word	0xe000ed04

08013348 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8013348:	b580      	push	{r7, lr}
 801334a:	b090      	sub	sp, #64	@ 0x40
 801334c:	af00      	add	r7, sp, #0
 801334e:	60f8      	str	r0, [r7, #12]
 8013350:	60b9      	str	r1, [r7, #8]
 8013352:	607a      	str	r2, [r7, #4]
 8013354:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013356:	68fb      	ldr	r3, [r7, #12]
 8013358:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 801335a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801335c:	2b00      	cmp	r3, #0
 801335e:	d10b      	bne.n	8013378 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8013360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013364:	f383 8811 	msr	BASEPRI, r3
 8013368:	f3bf 8f6f 	isb	sy
 801336c:	f3bf 8f4f 	dsb	sy
 8013370:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8013372:	bf00      	nop
 8013374:	bf00      	nop
 8013376:	e7fd      	b.n	8013374 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013378:	68bb      	ldr	r3, [r7, #8]
 801337a:	2b00      	cmp	r3, #0
 801337c:	d103      	bne.n	8013386 <xQueueGenericSendFromISR+0x3e>
 801337e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013382:	2b00      	cmp	r3, #0
 8013384:	d101      	bne.n	801338a <xQueueGenericSendFromISR+0x42>
 8013386:	2301      	movs	r3, #1
 8013388:	e000      	b.n	801338c <xQueueGenericSendFromISR+0x44>
 801338a:	2300      	movs	r3, #0
 801338c:	2b00      	cmp	r3, #0
 801338e:	d10b      	bne.n	80133a8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8013390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013394:	f383 8811 	msr	BASEPRI, r3
 8013398:	f3bf 8f6f 	isb	sy
 801339c:	f3bf 8f4f 	dsb	sy
 80133a0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80133a2:	bf00      	nop
 80133a4:	bf00      	nop
 80133a6:	e7fd      	b.n	80133a4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80133a8:	683b      	ldr	r3, [r7, #0]
 80133aa:	2b02      	cmp	r3, #2
 80133ac:	d103      	bne.n	80133b6 <xQueueGenericSendFromISR+0x6e>
 80133ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80133b2:	2b01      	cmp	r3, #1
 80133b4:	d101      	bne.n	80133ba <xQueueGenericSendFromISR+0x72>
 80133b6:	2301      	movs	r3, #1
 80133b8:	e000      	b.n	80133bc <xQueueGenericSendFromISR+0x74>
 80133ba:	2300      	movs	r3, #0
 80133bc:	2b00      	cmp	r3, #0
 80133be:	d10b      	bne.n	80133d8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80133c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80133c4:	f383 8811 	msr	BASEPRI, r3
 80133c8:	f3bf 8f6f 	isb	sy
 80133cc:	f3bf 8f4f 	dsb	sy
 80133d0:	623b      	str	r3, [r7, #32]
}
 80133d2:	bf00      	nop
 80133d4:	bf00      	nop
 80133d6:	e7fd      	b.n	80133d4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80133d8:	f002 fe1e 	bl	8016018 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80133dc:	f3ef 8211 	mrs	r2, BASEPRI
 80133e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80133e4:	f383 8811 	msr	BASEPRI, r3
 80133e8:	f3bf 8f6f 	isb	sy
 80133ec:	f3bf 8f4f 	dsb	sy
 80133f0:	61fa      	str	r2, [r7, #28]
 80133f2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80133f4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80133f6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80133f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80133fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013400:	429a      	cmp	r2, r3
 8013402:	d302      	bcc.n	801340a <xQueueGenericSendFromISR+0xc2>
 8013404:	683b      	ldr	r3, [r7, #0]
 8013406:	2b02      	cmp	r3, #2
 8013408:	d12f      	bne.n	801346a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801340a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801340c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013410:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013418:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801341a:	683a      	ldr	r2, [r7, #0]
 801341c:	68b9      	ldr	r1, [r7, #8]
 801341e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8013420:	f000 fb70 	bl	8013b04 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013424:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8013428:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801342c:	d112      	bne.n	8013454 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801342e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013432:	2b00      	cmp	r3, #0
 8013434:	d016      	beq.n	8013464 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013438:	3324      	adds	r3, #36	@ 0x24
 801343a:	4618      	mov	r0, r3
 801343c:	f001 f9dc 	bl	80147f8 <xTaskRemoveFromEventList>
 8013440:	4603      	mov	r3, r0
 8013442:	2b00      	cmp	r3, #0
 8013444:	d00e      	beq.n	8013464 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	2b00      	cmp	r3, #0
 801344a:	d00b      	beq.n	8013464 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	2201      	movs	r2, #1
 8013450:	601a      	str	r2, [r3, #0]
 8013452:	e007      	b.n	8013464 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013454:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8013458:	3301      	adds	r3, #1
 801345a:	b2db      	uxtb	r3, r3
 801345c:	b25a      	sxtb	r2, r3
 801345e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013460:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8013464:	2301      	movs	r3, #1
 8013466:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8013468:	e001      	b.n	801346e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801346a:	2300      	movs	r3, #0
 801346c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801346e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013470:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8013472:	697b      	ldr	r3, [r7, #20]
 8013474:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8013478:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801347a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 801347c:	4618      	mov	r0, r3
 801347e:	3740      	adds	r7, #64	@ 0x40
 8013480:	46bd      	mov	sp, r7
 8013482:	bd80      	pop	{r7, pc}

08013484 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013484:	b580      	push	{r7, lr}
 8013486:	b08e      	sub	sp, #56	@ 0x38
 8013488:	af00      	add	r7, sp, #0
 801348a:	6078      	str	r0, [r7, #4]
 801348c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8013492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013494:	2b00      	cmp	r3, #0
 8013496:	d10b      	bne.n	80134b0 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8013498:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801349c:	f383 8811 	msr	BASEPRI, r3
 80134a0:	f3bf 8f6f 	isb	sy
 80134a4:	f3bf 8f4f 	dsb	sy
 80134a8:	623b      	str	r3, [r7, #32]
}
 80134aa:	bf00      	nop
 80134ac:	bf00      	nop
 80134ae:	e7fd      	b.n	80134ac <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80134b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80134b4:	2b00      	cmp	r3, #0
 80134b6:	d00b      	beq.n	80134d0 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80134b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80134bc:	f383 8811 	msr	BASEPRI, r3
 80134c0:	f3bf 8f6f 	isb	sy
 80134c4:	f3bf 8f4f 	dsb	sy
 80134c8:	61fb      	str	r3, [r7, #28]
}
 80134ca:	bf00      	nop
 80134cc:	bf00      	nop
 80134ce:	e7fd      	b.n	80134cc <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80134d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134d2:	681b      	ldr	r3, [r3, #0]
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d103      	bne.n	80134e0 <xQueueGiveFromISR+0x5c>
 80134d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134da:	689b      	ldr	r3, [r3, #8]
 80134dc:	2b00      	cmp	r3, #0
 80134de:	d101      	bne.n	80134e4 <xQueueGiveFromISR+0x60>
 80134e0:	2301      	movs	r3, #1
 80134e2:	e000      	b.n	80134e6 <xQueueGiveFromISR+0x62>
 80134e4:	2300      	movs	r3, #0
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	d10b      	bne.n	8013502 <xQueueGiveFromISR+0x7e>
	__asm volatile
 80134ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80134ee:	f383 8811 	msr	BASEPRI, r3
 80134f2:	f3bf 8f6f 	isb	sy
 80134f6:	f3bf 8f4f 	dsb	sy
 80134fa:	61bb      	str	r3, [r7, #24]
}
 80134fc:	bf00      	nop
 80134fe:	bf00      	nop
 8013500:	e7fd      	b.n	80134fe <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013502:	f002 fd89 	bl	8016018 <vPortValidateInterruptPriority>
	__asm volatile
 8013506:	f3ef 8211 	mrs	r2, BASEPRI
 801350a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801350e:	f383 8811 	msr	BASEPRI, r3
 8013512:	f3bf 8f6f 	isb	sy
 8013516:	f3bf 8f4f 	dsb	sy
 801351a:	617a      	str	r2, [r7, #20]
 801351c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801351e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013520:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013524:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013526:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8013528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801352a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801352c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801352e:	429a      	cmp	r2, r3
 8013530:	d22b      	bcs.n	801358a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013534:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013538:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801353c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801353e:	1c5a      	adds	r2, r3, #1
 8013540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013542:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013544:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8013548:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801354c:	d112      	bne.n	8013574 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801354e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013552:	2b00      	cmp	r3, #0
 8013554:	d016      	beq.n	8013584 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013558:	3324      	adds	r3, #36	@ 0x24
 801355a:	4618      	mov	r0, r3
 801355c:	f001 f94c 	bl	80147f8 <xTaskRemoveFromEventList>
 8013560:	4603      	mov	r3, r0
 8013562:	2b00      	cmp	r3, #0
 8013564:	d00e      	beq.n	8013584 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013566:	683b      	ldr	r3, [r7, #0]
 8013568:	2b00      	cmp	r3, #0
 801356a:	d00b      	beq.n	8013584 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801356c:	683b      	ldr	r3, [r7, #0]
 801356e:	2201      	movs	r2, #1
 8013570:	601a      	str	r2, [r3, #0]
 8013572:	e007      	b.n	8013584 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013574:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013578:	3301      	adds	r3, #1
 801357a:	b2db      	uxtb	r3, r3
 801357c:	b25a      	sxtb	r2, r3
 801357e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013580:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8013584:	2301      	movs	r3, #1
 8013586:	637b      	str	r3, [r7, #52]	@ 0x34
 8013588:	e001      	b.n	801358e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801358a:	2300      	movs	r3, #0
 801358c:	637b      	str	r3, [r7, #52]	@ 0x34
 801358e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013590:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8013592:	68fb      	ldr	r3, [r7, #12]
 8013594:	f383 8811 	msr	BASEPRI, r3
}
 8013598:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801359a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 801359c:	4618      	mov	r0, r3
 801359e:	3738      	adds	r7, #56	@ 0x38
 80135a0:	46bd      	mov	sp, r7
 80135a2:	bd80      	pop	{r7, pc}

080135a4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80135a4:	b580      	push	{r7, lr}
 80135a6:	b08c      	sub	sp, #48	@ 0x30
 80135a8:	af00      	add	r7, sp, #0
 80135aa:	60f8      	str	r0, [r7, #12]
 80135ac:	60b9      	str	r1, [r7, #8]
 80135ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80135b0:	2300      	movs	r3, #0
 80135b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80135b4:	68fb      	ldr	r3, [r7, #12]
 80135b6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80135b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80135ba:	2b00      	cmp	r3, #0
 80135bc:	d10b      	bne.n	80135d6 <xQueueReceive+0x32>
	__asm volatile
 80135be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80135c2:	f383 8811 	msr	BASEPRI, r3
 80135c6:	f3bf 8f6f 	isb	sy
 80135ca:	f3bf 8f4f 	dsb	sy
 80135ce:	623b      	str	r3, [r7, #32]
}
 80135d0:	bf00      	nop
 80135d2:	bf00      	nop
 80135d4:	e7fd      	b.n	80135d2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80135d6:	68bb      	ldr	r3, [r7, #8]
 80135d8:	2b00      	cmp	r3, #0
 80135da:	d103      	bne.n	80135e4 <xQueueReceive+0x40>
 80135dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80135de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80135e0:	2b00      	cmp	r3, #0
 80135e2:	d101      	bne.n	80135e8 <xQueueReceive+0x44>
 80135e4:	2301      	movs	r3, #1
 80135e6:	e000      	b.n	80135ea <xQueueReceive+0x46>
 80135e8:	2300      	movs	r3, #0
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	d10b      	bne.n	8013606 <xQueueReceive+0x62>
	__asm volatile
 80135ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80135f2:	f383 8811 	msr	BASEPRI, r3
 80135f6:	f3bf 8f6f 	isb	sy
 80135fa:	f3bf 8f4f 	dsb	sy
 80135fe:	61fb      	str	r3, [r7, #28]
}
 8013600:	bf00      	nop
 8013602:	bf00      	nop
 8013604:	e7fd      	b.n	8013602 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013606:	f001 fb31 	bl	8014c6c <xTaskGetSchedulerState>
 801360a:	4603      	mov	r3, r0
 801360c:	2b00      	cmp	r3, #0
 801360e:	d102      	bne.n	8013616 <xQueueReceive+0x72>
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	2b00      	cmp	r3, #0
 8013614:	d101      	bne.n	801361a <xQueueReceive+0x76>
 8013616:	2301      	movs	r3, #1
 8013618:	e000      	b.n	801361c <xQueueReceive+0x78>
 801361a:	2300      	movs	r3, #0
 801361c:	2b00      	cmp	r3, #0
 801361e:	d10b      	bne.n	8013638 <xQueueReceive+0x94>
	__asm volatile
 8013620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013624:	f383 8811 	msr	BASEPRI, r3
 8013628:	f3bf 8f6f 	isb	sy
 801362c:	f3bf 8f4f 	dsb	sy
 8013630:	61bb      	str	r3, [r7, #24]
}
 8013632:	bf00      	nop
 8013634:	bf00      	nop
 8013636:	e7fd      	b.n	8013634 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013638:	f002 fc0e 	bl	8015e58 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801363c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801363e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013640:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013644:	2b00      	cmp	r3, #0
 8013646:	d01f      	beq.n	8013688 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013648:	68b9      	ldr	r1, [r7, #8]
 801364a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801364c:	f000 fac4 	bl	8013bd8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013652:	1e5a      	subs	r2, r3, #1
 8013654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013656:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801365a:	691b      	ldr	r3, [r3, #16]
 801365c:	2b00      	cmp	r3, #0
 801365e:	d00f      	beq.n	8013680 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013662:	3310      	adds	r3, #16
 8013664:	4618      	mov	r0, r3
 8013666:	f001 f8c7 	bl	80147f8 <xTaskRemoveFromEventList>
 801366a:	4603      	mov	r3, r0
 801366c:	2b00      	cmp	r3, #0
 801366e:	d007      	beq.n	8013680 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013670:	4b3c      	ldr	r3, [pc, #240]	@ (8013764 <xQueueReceive+0x1c0>)
 8013672:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013676:	601a      	str	r2, [r3, #0]
 8013678:	f3bf 8f4f 	dsb	sy
 801367c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013680:	f002 fc1c 	bl	8015ebc <vPortExitCritical>
				return pdPASS;
 8013684:	2301      	movs	r3, #1
 8013686:	e069      	b.n	801375c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	2b00      	cmp	r3, #0
 801368c:	d103      	bne.n	8013696 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801368e:	f002 fc15 	bl	8015ebc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013692:	2300      	movs	r3, #0
 8013694:	e062      	b.n	801375c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013698:	2b00      	cmp	r3, #0
 801369a:	d106      	bne.n	80136aa <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801369c:	f107 0310 	add.w	r3, r7, #16
 80136a0:	4618      	mov	r0, r3
 80136a2:	f001 f971 	bl	8014988 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80136a6:	2301      	movs	r3, #1
 80136a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80136aa:	f002 fc07 	bl	8015ebc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80136ae:	f000 fe25 	bl	80142fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80136b2:	f002 fbd1 	bl	8015e58 <vPortEnterCritical>
 80136b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80136b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80136bc:	b25b      	sxtb	r3, r3
 80136be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80136c2:	d103      	bne.n	80136cc <xQueueReceive+0x128>
 80136c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80136c6:	2200      	movs	r2, #0
 80136c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80136cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80136ce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80136d2:	b25b      	sxtb	r3, r3
 80136d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80136d8:	d103      	bne.n	80136e2 <xQueueReceive+0x13e>
 80136da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80136dc:	2200      	movs	r2, #0
 80136de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80136e2:	f002 fbeb 	bl	8015ebc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80136e6:	1d3a      	adds	r2, r7, #4
 80136e8:	f107 0310 	add.w	r3, r7, #16
 80136ec:	4611      	mov	r1, r2
 80136ee:	4618      	mov	r0, r3
 80136f0:	f001 f960 	bl	80149b4 <xTaskCheckForTimeOut>
 80136f4:	4603      	mov	r3, r0
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	d123      	bne.n	8013742 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80136fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80136fc:	f000 fae4 	bl	8013cc8 <prvIsQueueEmpty>
 8013700:	4603      	mov	r3, r0
 8013702:	2b00      	cmp	r3, #0
 8013704:	d017      	beq.n	8013736 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013708:	3324      	adds	r3, #36	@ 0x24
 801370a:	687a      	ldr	r2, [r7, #4]
 801370c:	4611      	mov	r1, r2
 801370e:	4618      	mov	r0, r3
 8013710:	f000 ffe2 	bl	80146d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013714:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013716:	f000 fa85 	bl	8013c24 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801371a:	f000 fdfd 	bl	8014318 <xTaskResumeAll>
 801371e:	4603      	mov	r3, r0
 8013720:	2b00      	cmp	r3, #0
 8013722:	d189      	bne.n	8013638 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8013724:	4b0f      	ldr	r3, [pc, #60]	@ (8013764 <xQueueReceive+0x1c0>)
 8013726:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801372a:	601a      	str	r2, [r3, #0]
 801372c:	f3bf 8f4f 	dsb	sy
 8013730:	f3bf 8f6f 	isb	sy
 8013734:	e780      	b.n	8013638 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8013736:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013738:	f000 fa74 	bl	8013c24 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801373c:	f000 fdec 	bl	8014318 <xTaskResumeAll>
 8013740:	e77a      	b.n	8013638 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8013742:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013744:	f000 fa6e 	bl	8013c24 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013748:	f000 fde6 	bl	8014318 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801374c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801374e:	f000 fabb 	bl	8013cc8 <prvIsQueueEmpty>
 8013752:	4603      	mov	r3, r0
 8013754:	2b00      	cmp	r3, #0
 8013756:	f43f af6f 	beq.w	8013638 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801375a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801375c:	4618      	mov	r0, r3
 801375e:	3730      	adds	r7, #48	@ 0x30
 8013760:	46bd      	mov	sp, r7
 8013762:	bd80      	pop	{r7, pc}
 8013764:	e000ed04 	.word	0xe000ed04

08013768 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8013768:	b580      	push	{r7, lr}
 801376a:	b08e      	sub	sp, #56	@ 0x38
 801376c:	af00      	add	r7, sp, #0
 801376e:	6078      	str	r0, [r7, #4]
 8013770:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8013772:	2300      	movs	r3, #0
 8013774:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801377a:	2300      	movs	r3, #0
 801377c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801377e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013780:	2b00      	cmp	r3, #0
 8013782:	d10b      	bne.n	801379c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8013784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013788:	f383 8811 	msr	BASEPRI, r3
 801378c:	f3bf 8f6f 	isb	sy
 8013790:	f3bf 8f4f 	dsb	sy
 8013794:	623b      	str	r3, [r7, #32]
}
 8013796:	bf00      	nop
 8013798:	bf00      	nop
 801379a:	e7fd      	b.n	8013798 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801379c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801379e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	d00b      	beq.n	80137bc <xQueueSemaphoreTake+0x54>
	__asm volatile
 80137a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80137a8:	f383 8811 	msr	BASEPRI, r3
 80137ac:	f3bf 8f6f 	isb	sy
 80137b0:	f3bf 8f4f 	dsb	sy
 80137b4:	61fb      	str	r3, [r7, #28]
}
 80137b6:	bf00      	nop
 80137b8:	bf00      	nop
 80137ba:	e7fd      	b.n	80137b8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80137bc:	f001 fa56 	bl	8014c6c <xTaskGetSchedulerState>
 80137c0:	4603      	mov	r3, r0
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	d102      	bne.n	80137cc <xQueueSemaphoreTake+0x64>
 80137c6:	683b      	ldr	r3, [r7, #0]
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d101      	bne.n	80137d0 <xQueueSemaphoreTake+0x68>
 80137cc:	2301      	movs	r3, #1
 80137ce:	e000      	b.n	80137d2 <xQueueSemaphoreTake+0x6a>
 80137d0:	2300      	movs	r3, #0
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	d10b      	bne.n	80137ee <xQueueSemaphoreTake+0x86>
	__asm volatile
 80137d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80137da:	f383 8811 	msr	BASEPRI, r3
 80137de:	f3bf 8f6f 	isb	sy
 80137e2:	f3bf 8f4f 	dsb	sy
 80137e6:	61bb      	str	r3, [r7, #24]
}
 80137e8:	bf00      	nop
 80137ea:	bf00      	nop
 80137ec:	e7fd      	b.n	80137ea <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80137ee:	f002 fb33 	bl	8015e58 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80137f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80137f6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80137f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d024      	beq.n	8013848 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80137fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013800:	1e5a      	subs	r2, r3, #1
 8013802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013804:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013808:	681b      	ldr	r3, [r3, #0]
 801380a:	2b00      	cmp	r3, #0
 801380c:	d104      	bne.n	8013818 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801380e:	f001 fbbf 	bl	8014f90 <pvTaskIncrementMutexHeldCount>
 8013812:	4602      	mov	r2, r0
 8013814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013816:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801381a:	691b      	ldr	r3, [r3, #16]
 801381c:	2b00      	cmp	r3, #0
 801381e:	d00f      	beq.n	8013840 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013822:	3310      	adds	r3, #16
 8013824:	4618      	mov	r0, r3
 8013826:	f000 ffe7 	bl	80147f8 <xTaskRemoveFromEventList>
 801382a:	4603      	mov	r3, r0
 801382c:	2b00      	cmp	r3, #0
 801382e:	d007      	beq.n	8013840 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013830:	4b54      	ldr	r3, [pc, #336]	@ (8013984 <xQueueSemaphoreTake+0x21c>)
 8013832:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013836:	601a      	str	r2, [r3, #0]
 8013838:	f3bf 8f4f 	dsb	sy
 801383c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013840:	f002 fb3c 	bl	8015ebc <vPortExitCritical>
				return pdPASS;
 8013844:	2301      	movs	r3, #1
 8013846:	e098      	b.n	801397a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013848:	683b      	ldr	r3, [r7, #0]
 801384a:	2b00      	cmp	r3, #0
 801384c:	d112      	bne.n	8013874 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801384e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013850:	2b00      	cmp	r3, #0
 8013852:	d00b      	beq.n	801386c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8013854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013858:	f383 8811 	msr	BASEPRI, r3
 801385c:	f3bf 8f6f 	isb	sy
 8013860:	f3bf 8f4f 	dsb	sy
 8013864:	617b      	str	r3, [r7, #20]
}
 8013866:	bf00      	nop
 8013868:	bf00      	nop
 801386a:	e7fd      	b.n	8013868 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801386c:	f002 fb26 	bl	8015ebc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013870:	2300      	movs	r3, #0
 8013872:	e082      	b.n	801397a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013874:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013876:	2b00      	cmp	r3, #0
 8013878:	d106      	bne.n	8013888 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801387a:	f107 030c 	add.w	r3, r7, #12
 801387e:	4618      	mov	r0, r3
 8013880:	f001 f882 	bl	8014988 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013884:	2301      	movs	r3, #1
 8013886:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013888:	f002 fb18 	bl	8015ebc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801388c:	f000 fd36 	bl	80142fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013890:	f002 fae2 	bl	8015e58 <vPortEnterCritical>
 8013894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013896:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801389a:	b25b      	sxtb	r3, r3
 801389c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80138a0:	d103      	bne.n	80138aa <xQueueSemaphoreTake+0x142>
 80138a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138a4:	2200      	movs	r2, #0
 80138a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80138aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138ac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80138b0:	b25b      	sxtb	r3, r3
 80138b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80138b6:	d103      	bne.n	80138c0 <xQueueSemaphoreTake+0x158>
 80138b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138ba:	2200      	movs	r2, #0
 80138bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80138c0:	f002 fafc 	bl	8015ebc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80138c4:	463a      	mov	r2, r7
 80138c6:	f107 030c 	add.w	r3, r7, #12
 80138ca:	4611      	mov	r1, r2
 80138cc:	4618      	mov	r0, r3
 80138ce:	f001 f871 	bl	80149b4 <xTaskCheckForTimeOut>
 80138d2:	4603      	mov	r3, r0
 80138d4:	2b00      	cmp	r3, #0
 80138d6:	d132      	bne.n	801393e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80138d8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80138da:	f000 f9f5 	bl	8013cc8 <prvIsQueueEmpty>
 80138de:	4603      	mov	r3, r0
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d026      	beq.n	8013932 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80138e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138e6:	681b      	ldr	r3, [r3, #0]
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	d109      	bne.n	8013900 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80138ec:	f002 fab4 	bl	8015e58 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80138f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138f2:	689b      	ldr	r3, [r3, #8]
 80138f4:	4618      	mov	r0, r3
 80138f6:	f001 f9d7 	bl	8014ca8 <xTaskPriorityInherit>
 80138fa:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80138fc:	f002 fade 	bl	8015ebc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013902:	3324      	adds	r3, #36	@ 0x24
 8013904:	683a      	ldr	r2, [r7, #0]
 8013906:	4611      	mov	r1, r2
 8013908:	4618      	mov	r0, r3
 801390a:	f000 fee5 	bl	80146d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801390e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013910:	f000 f988 	bl	8013c24 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013914:	f000 fd00 	bl	8014318 <xTaskResumeAll>
 8013918:	4603      	mov	r3, r0
 801391a:	2b00      	cmp	r3, #0
 801391c:	f47f af67 	bne.w	80137ee <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8013920:	4b18      	ldr	r3, [pc, #96]	@ (8013984 <xQueueSemaphoreTake+0x21c>)
 8013922:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013926:	601a      	str	r2, [r3, #0]
 8013928:	f3bf 8f4f 	dsb	sy
 801392c:	f3bf 8f6f 	isb	sy
 8013930:	e75d      	b.n	80137ee <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8013932:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013934:	f000 f976 	bl	8013c24 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013938:	f000 fcee 	bl	8014318 <xTaskResumeAll>
 801393c:	e757      	b.n	80137ee <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801393e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013940:	f000 f970 	bl	8013c24 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013944:	f000 fce8 	bl	8014318 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013948:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801394a:	f000 f9bd 	bl	8013cc8 <prvIsQueueEmpty>
 801394e:	4603      	mov	r3, r0
 8013950:	2b00      	cmp	r3, #0
 8013952:	f43f af4c 	beq.w	80137ee <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8013956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013958:	2b00      	cmp	r3, #0
 801395a:	d00d      	beq.n	8013978 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 801395c:	f002 fa7c 	bl	8015e58 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8013960:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013962:	f000 f8b7 	bl	8013ad4 <prvGetDisinheritPriorityAfterTimeout>
 8013966:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8013968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801396a:	689b      	ldr	r3, [r3, #8]
 801396c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801396e:	4618      	mov	r0, r3
 8013970:	f001 fa72 	bl	8014e58 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8013974:	f002 faa2 	bl	8015ebc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013978:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801397a:	4618      	mov	r0, r3
 801397c:	3738      	adds	r7, #56	@ 0x38
 801397e:	46bd      	mov	sp, r7
 8013980:	bd80      	pop	{r7, pc}
 8013982:	bf00      	nop
 8013984:	e000ed04 	.word	0xe000ed04

08013988 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013988:	b580      	push	{r7, lr}
 801398a:	b08e      	sub	sp, #56	@ 0x38
 801398c:	af00      	add	r7, sp, #0
 801398e:	60f8      	str	r0, [r7, #12]
 8013990:	60b9      	str	r1, [r7, #8]
 8013992:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013994:	68fb      	ldr	r3, [r7, #12]
 8013996:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8013998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801399a:	2b00      	cmp	r3, #0
 801399c:	d10b      	bne.n	80139b6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 801399e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80139a2:	f383 8811 	msr	BASEPRI, r3
 80139a6:	f3bf 8f6f 	isb	sy
 80139aa:	f3bf 8f4f 	dsb	sy
 80139ae:	623b      	str	r3, [r7, #32]
}
 80139b0:	bf00      	nop
 80139b2:	bf00      	nop
 80139b4:	e7fd      	b.n	80139b2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80139b6:	68bb      	ldr	r3, [r7, #8]
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	d103      	bne.n	80139c4 <xQueueReceiveFromISR+0x3c>
 80139bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80139be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d101      	bne.n	80139c8 <xQueueReceiveFromISR+0x40>
 80139c4:	2301      	movs	r3, #1
 80139c6:	e000      	b.n	80139ca <xQueueReceiveFromISR+0x42>
 80139c8:	2300      	movs	r3, #0
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d10b      	bne.n	80139e6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80139ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80139d2:	f383 8811 	msr	BASEPRI, r3
 80139d6:	f3bf 8f6f 	isb	sy
 80139da:	f3bf 8f4f 	dsb	sy
 80139de:	61fb      	str	r3, [r7, #28]
}
 80139e0:	bf00      	nop
 80139e2:	bf00      	nop
 80139e4:	e7fd      	b.n	80139e2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80139e6:	f002 fb17 	bl	8016018 <vPortValidateInterruptPriority>
	__asm volatile
 80139ea:	f3ef 8211 	mrs	r2, BASEPRI
 80139ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80139f2:	f383 8811 	msr	BASEPRI, r3
 80139f6:	f3bf 8f6f 	isb	sy
 80139fa:	f3bf 8f4f 	dsb	sy
 80139fe:	61ba      	str	r2, [r7, #24]
 8013a00:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8013a02:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013a04:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013a0a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	d02f      	beq.n	8013a72 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8013a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a14:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013a18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013a1c:	68b9      	ldr	r1, [r7, #8]
 8013a1e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013a20:	f000 f8da 	bl	8013bd8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a26:	1e5a      	subs	r2, r3, #1
 8013a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a2a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8013a2c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8013a30:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8013a34:	d112      	bne.n	8013a5c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a38:	691b      	ldr	r3, [r3, #16]
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	d016      	beq.n	8013a6c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a40:	3310      	adds	r3, #16
 8013a42:	4618      	mov	r0, r3
 8013a44:	f000 fed8 	bl	80147f8 <xTaskRemoveFromEventList>
 8013a48:	4603      	mov	r3, r0
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d00e      	beq.n	8013a6c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	d00b      	beq.n	8013a6c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	2201      	movs	r2, #1
 8013a58:	601a      	str	r2, [r3, #0]
 8013a5a:	e007      	b.n	8013a6c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8013a5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013a60:	3301      	adds	r3, #1
 8013a62:	b2db      	uxtb	r3, r3
 8013a64:	b25a      	sxtb	r2, r3
 8013a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8013a6c:	2301      	movs	r3, #1
 8013a6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8013a70:	e001      	b.n	8013a76 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8013a72:	2300      	movs	r3, #0
 8013a74:	637b      	str	r3, [r7, #52]	@ 0x34
 8013a76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a78:	613b      	str	r3, [r7, #16]
	__asm volatile
 8013a7a:	693b      	ldr	r3, [r7, #16]
 8013a7c:	f383 8811 	msr	BASEPRI, r3
}
 8013a80:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013a82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8013a84:	4618      	mov	r0, r3
 8013a86:	3738      	adds	r7, #56	@ 0x38
 8013a88:	46bd      	mov	sp, r7
 8013a8a:	bd80      	pop	{r7, pc}

08013a8c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8013a8c:	b580      	push	{r7, lr}
 8013a8e:	b084      	sub	sp, #16
 8013a90:	af00      	add	r7, sp, #0
 8013a92:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013a98:	68fb      	ldr	r3, [r7, #12]
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	d10b      	bne.n	8013ab6 <vQueueDelete+0x2a>
	__asm volatile
 8013a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013aa2:	f383 8811 	msr	BASEPRI, r3
 8013aa6:	f3bf 8f6f 	isb	sy
 8013aaa:	f3bf 8f4f 	dsb	sy
 8013aae:	60bb      	str	r3, [r7, #8]
}
 8013ab0:	bf00      	nop
 8013ab2:	bf00      	nop
 8013ab4:	e7fd      	b.n	8013ab2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8013ab6:	68f8      	ldr	r0, [r7, #12]
 8013ab8:	f000 f95e 	bl	8013d78 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8013abc:	68fb      	ldr	r3, [r7, #12]
 8013abe:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	d102      	bne.n	8013acc <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8013ac6:	68f8      	ldr	r0, [r7, #12]
 8013ac8:	f002 fbb6 	bl	8016238 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8013acc:	bf00      	nop
 8013ace:	3710      	adds	r7, #16
 8013ad0:	46bd      	mov	sp, r7
 8013ad2:	bd80      	pop	{r7, pc}

08013ad4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8013ad4:	b480      	push	{r7}
 8013ad6:	b085      	sub	sp, #20
 8013ad8:	af00      	add	r7, sp, #0
 8013ada:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	d006      	beq.n	8013af2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013ae8:	681b      	ldr	r3, [r3, #0]
 8013aea:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8013aee:	60fb      	str	r3, [r7, #12]
 8013af0:	e001      	b.n	8013af6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8013af2:	2300      	movs	r3, #0
 8013af4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8013af6:	68fb      	ldr	r3, [r7, #12]
	}
 8013af8:	4618      	mov	r0, r3
 8013afa:	3714      	adds	r7, #20
 8013afc:	46bd      	mov	sp, r7
 8013afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b02:	4770      	bx	lr

08013b04 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8013b04:	b580      	push	{r7, lr}
 8013b06:	b086      	sub	sp, #24
 8013b08:	af00      	add	r7, sp, #0
 8013b0a:	60f8      	str	r0, [r7, #12]
 8013b0c:	60b9      	str	r1, [r7, #8]
 8013b0e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8013b10:	2300      	movs	r3, #0
 8013b12:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013b14:	68fb      	ldr	r3, [r7, #12]
 8013b16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013b18:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8013b1a:	68fb      	ldr	r3, [r7, #12]
 8013b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	d10d      	bne.n	8013b3e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013b22:	68fb      	ldr	r3, [r7, #12]
 8013b24:	681b      	ldr	r3, [r3, #0]
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	d14d      	bne.n	8013bc6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013b2a:	68fb      	ldr	r3, [r7, #12]
 8013b2c:	689b      	ldr	r3, [r3, #8]
 8013b2e:	4618      	mov	r0, r3
 8013b30:	f001 f922 	bl	8014d78 <xTaskPriorityDisinherit>
 8013b34:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8013b36:	68fb      	ldr	r3, [r7, #12]
 8013b38:	2200      	movs	r2, #0
 8013b3a:	609a      	str	r2, [r3, #8]
 8013b3c:	e043      	b.n	8013bc6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	d119      	bne.n	8013b78 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013b44:	68fb      	ldr	r3, [r7, #12]
 8013b46:	6858      	ldr	r0, [r3, #4]
 8013b48:	68fb      	ldr	r3, [r7, #12]
 8013b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013b4c:	461a      	mov	r2, r3
 8013b4e:	68b9      	ldr	r1, [r7, #8]
 8013b50:	f003 f91d 	bl	8016d8e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013b54:	68fb      	ldr	r3, [r7, #12]
 8013b56:	685a      	ldr	r2, [r3, #4]
 8013b58:	68fb      	ldr	r3, [r7, #12]
 8013b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013b5c:	441a      	add	r2, r3
 8013b5e:	68fb      	ldr	r3, [r7, #12]
 8013b60:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013b62:	68fb      	ldr	r3, [r7, #12]
 8013b64:	685a      	ldr	r2, [r3, #4]
 8013b66:	68fb      	ldr	r3, [r7, #12]
 8013b68:	689b      	ldr	r3, [r3, #8]
 8013b6a:	429a      	cmp	r2, r3
 8013b6c:	d32b      	bcc.n	8013bc6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013b6e:	68fb      	ldr	r3, [r7, #12]
 8013b70:	681a      	ldr	r2, [r3, #0]
 8013b72:	68fb      	ldr	r3, [r7, #12]
 8013b74:	605a      	str	r2, [r3, #4]
 8013b76:	e026      	b.n	8013bc6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8013b78:	68fb      	ldr	r3, [r7, #12]
 8013b7a:	68d8      	ldr	r0, [r3, #12]
 8013b7c:	68fb      	ldr	r3, [r7, #12]
 8013b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013b80:	461a      	mov	r2, r3
 8013b82:	68b9      	ldr	r1, [r7, #8]
 8013b84:	f003 f903 	bl	8016d8e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8013b88:	68fb      	ldr	r3, [r7, #12]
 8013b8a:	68da      	ldr	r2, [r3, #12]
 8013b8c:	68fb      	ldr	r3, [r7, #12]
 8013b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013b90:	425b      	negs	r3, r3
 8013b92:	441a      	add	r2, r3
 8013b94:	68fb      	ldr	r3, [r7, #12]
 8013b96:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013b98:	68fb      	ldr	r3, [r7, #12]
 8013b9a:	68da      	ldr	r2, [r3, #12]
 8013b9c:	68fb      	ldr	r3, [r7, #12]
 8013b9e:	681b      	ldr	r3, [r3, #0]
 8013ba0:	429a      	cmp	r2, r3
 8013ba2:	d207      	bcs.n	8013bb4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8013ba4:	68fb      	ldr	r3, [r7, #12]
 8013ba6:	689a      	ldr	r2, [r3, #8]
 8013ba8:	68fb      	ldr	r3, [r7, #12]
 8013baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013bac:	425b      	negs	r3, r3
 8013bae:	441a      	add	r2, r3
 8013bb0:	68fb      	ldr	r3, [r7, #12]
 8013bb2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	2b02      	cmp	r3, #2
 8013bb8:	d105      	bne.n	8013bc6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013bba:	693b      	ldr	r3, [r7, #16]
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	d002      	beq.n	8013bc6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8013bc0:	693b      	ldr	r3, [r7, #16]
 8013bc2:	3b01      	subs	r3, #1
 8013bc4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013bc6:	693b      	ldr	r3, [r7, #16]
 8013bc8:	1c5a      	adds	r2, r3, #1
 8013bca:	68fb      	ldr	r3, [r7, #12]
 8013bcc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8013bce:	697b      	ldr	r3, [r7, #20]
}
 8013bd0:	4618      	mov	r0, r3
 8013bd2:	3718      	adds	r7, #24
 8013bd4:	46bd      	mov	sp, r7
 8013bd6:	bd80      	pop	{r7, pc}

08013bd8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8013bd8:	b580      	push	{r7, lr}
 8013bda:	b082      	sub	sp, #8
 8013bdc:	af00      	add	r7, sp, #0
 8013bde:	6078      	str	r0, [r7, #4]
 8013be0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	d018      	beq.n	8013c1c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	68da      	ldr	r2, [r3, #12]
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013bf2:	441a      	add	r2, r3
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	68da      	ldr	r2, [r3, #12]
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	689b      	ldr	r3, [r3, #8]
 8013c00:	429a      	cmp	r2, r3
 8013c02:	d303      	bcc.n	8013c0c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	681a      	ldr	r2, [r3, #0]
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	68d9      	ldr	r1, [r3, #12]
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013c14:	461a      	mov	r2, r3
 8013c16:	6838      	ldr	r0, [r7, #0]
 8013c18:	f003 f8b9 	bl	8016d8e <memcpy>
	}
}
 8013c1c:	bf00      	nop
 8013c1e:	3708      	adds	r7, #8
 8013c20:	46bd      	mov	sp, r7
 8013c22:	bd80      	pop	{r7, pc}

08013c24 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8013c24:	b580      	push	{r7, lr}
 8013c26:	b084      	sub	sp, #16
 8013c28:	af00      	add	r7, sp, #0
 8013c2a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8013c2c:	f002 f914 	bl	8015e58 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013c36:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013c38:	e011      	b.n	8013c5e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013c3e:	2b00      	cmp	r3, #0
 8013c40:	d012      	beq.n	8013c68 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	3324      	adds	r3, #36	@ 0x24
 8013c46:	4618      	mov	r0, r3
 8013c48:	f000 fdd6 	bl	80147f8 <xTaskRemoveFromEventList>
 8013c4c:	4603      	mov	r3, r0
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	d001      	beq.n	8013c56 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8013c52:	f000 ff13 	bl	8014a7c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8013c56:	7bfb      	ldrb	r3, [r7, #15]
 8013c58:	3b01      	subs	r3, #1
 8013c5a:	b2db      	uxtb	r3, r3
 8013c5c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013c5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	dce9      	bgt.n	8013c3a <prvUnlockQueue+0x16>
 8013c66:	e000      	b.n	8013c6a <prvUnlockQueue+0x46>
					break;
 8013c68:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	22ff      	movs	r2, #255	@ 0xff
 8013c6e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8013c72:	f002 f923 	bl	8015ebc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8013c76:	f002 f8ef 	bl	8015e58 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013c80:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013c82:	e011      	b.n	8013ca8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	691b      	ldr	r3, [r3, #16]
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	d012      	beq.n	8013cb2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	3310      	adds	r3, #16
 8013c90:	4618      	mov	r0, r3
 8013c92:	f000 fdb1 	bl	80147f8 <xTaskRemoveFromEventList>
 8013c96:	4603      	mov	r3, r0
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	d001      	beq.n	8013ca0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8013c9c:	f000 feee 	bl	8014a7c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013ca0:	7bbb      	ldrb	r3, [r7, #14]
 8013ca2:	3b01      	subs	r3, #1
 8013ca4:	b2db      	uxtb	r3, r3
 8013ca6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013ca8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	dce9      	bgt.n	8013c84 <prvUnlockQueue+0x60>
 8013cb0:	e000      	b.n	8013cb4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8013cb2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	22ff      	movs	r2, #255	@ 0xff
 8013cb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8013cbc:	f002 f8fe 	bl	8015ebc <vPortExitCritical>
}
 8013cc0:	bf00      	nop
 8013cc2:	3710      	adds	r7, #16
 8013cc4:	46bd      	mov	sp, r7
 8013cc6:	bd80      	pop	{r7, pc}

08013cc8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8013cc8:	b580      	push	{r7, lr}
 8013cca:	b084      	sub	sp, #16
 8013ccc:	af00      	add	r7, sp, #0
 8013cce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013cd0:	f002 f8c2 	bl	8015e58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	d102      	bne.n	8013ce2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8013cdc:	2301      	movs	r3, #1
 8013cde:	60fb      	str	r3, [r7, #12]
 8013ce0:	e001      	b.n	8013ce6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8013ce2:	2300      	movs	r3, #0
 8013ce4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013ce6:	f002 f8e9 	bl	8015ebc <vPortExitCritical>

	return xReturn;
 8013cea:	68fb      	ldr	r3, [r7, #12]
}
 8013cec:	4618      	mov	r0, r3
 8013cee:	3710      	adds	r7, #16
 8013cf0:	46bd      	mov	sp, r7
 8013cf2:	bd80      	pop	{r7, pc}

08013cf4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8013cf4:	b580      	push	{r7, lr}
 8013cf6:	b084      	sub	sp, #16
 8013cf8:	af00      	add	r7, sp, #0
 8013cfa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013cfc:	f002 f8ac 	bl	8015e58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013d08:	429a      	cmp	r2, r3
 8013d0a:	d102      	bne.n	8013d12 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8013d0c:	2301      	movs	r3, #1
 8013d0e:	60fb      	str	r3, [r7, #12]
 8013d10:	e001      	b.n	8013d16 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8013d12:	2300      	movs	r3, #0
 8013d14:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013d16:	f002 f8d1 	bl	8015ebc <vPortExitCritical>

	return xReturn;
 8013d1a:	68fb      	ldr	r3, [r7, #12]
}
 8013d1c:	4618      	mov	r0, r3
 8013d1e:	3710      	adds	r7, #16
 8013d20:	46bd      	mov	sp, r7
 8013d22:	bd80      	pop	{r7, pc}

08013d24 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8013d24:	b480      	push	{r7}
 8013d26:	b085      	sub	sp, #20
 8013d28:	af00      	add	r7, sp, #0
 8013d2a:	6078      	str	r0, [r7, #4]
 8013d2c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013d2e:	2300      	movs	r3, #0
 8013d30:	60fb      	str	r3, [r7, #12]
 8013d32:	e014      	b.n	8013d5e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8013d34:	4a0f      	ldr	r2, [pc, #60]	@ (8013d74 <vQueueAddToRegistry+0x50>)
 8013d36:	68fb      	ldr	r3, [r7, #12]
 8013d38:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8013d3c:	2b00      	cmp	r3, #0
 8013d3e:	d10b      	bne.n	8013d58 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8013d40:	490c      	ldr	r1, [pc, #48]	@ (8013d74 <vQueueAddToRegistry+0x50>)
 8013d42:	68fb      	ldr	r3, [r7, #12]
 8013d44:	683a      	ldr	r2, [r7, #0]
 8013d46:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8013d4a:	4a0a      	ldr	r2, [pc, #40]	@ (8013d74 <vQueueAddToRegistry+0x50>)
 8013d4c:	68fb      	ldr	r3, [r7, #12]
 8013d4e:	00db      	lsls	r3, r3, #3
 8013d50:	4413      	add	r3, r2
 8013d52:	687a      	ldr	r2, [r7, #4]
 8013d54:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8013d56:	e006      	b.n	8013d66 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013d58:	68fb      	ldr	r3, [r7, #12]
 8013d5a:	3301      	adds	r3, #1
 8013d5c:	60fb      	str	r3, [r7, #12]
 8013d5e:	68fb      	ldr	r3, [r7, #12]
 8013d60:	2b07      	cmp	r3, #7
 8013d62:	d9e7      	bls.n	8013d34 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8013d64:	bf00      	nop
 8013d66:	bf00      	nop
 8013d68:	3714      	adds	r7, #20
 8013d6a:	46bd      	mov	sp, r7
 8013d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d70:	4770      	bx	lr
 8013d72:	bf00      	nop
 8013d74:	240011c0 	.word	0x240011c0

08013d78 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8013d78:	b480      	push	{r7}
 8013d7a:	b085      	sub	sp, #20
 8013d7c:	af00      	add	r7, sp, #0
 8013d7e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013d80:	2300      	movs	r3, #0
 8013d82:	60fb      	str	r3, [r7, #12]
 8013d84:	e016      	b.n	8013db4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8013d86:	4a10      	ldr	r2, [pc, #64]	@ (8013dc8 <vQueueUnregisterQueue+0x50>)
 8013d88:	68fb      	ldr	r3, [r7, #12]
 8013d8a:	00db      	lsls	r3, r3, #3
 8013d8c:	4413      	add	r3, r2
 8013d8e:	685b      	ldr	r3, [r3, #4]
 8013d90:	687a      	ldr	r2, [r7, #4]
 8013d92:	429a      	cmp	r2, r3
 8013d94:	d10b      	bne.n	8013dae <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8013d96:	4a0c      	ldr	r2, [pc, #48]	@ (8013dc8 <vQueueUnregisterQueue+0x50>)
 8013d98:	68fb      	ldr	r3, [r7, #12]
 8013d9a:	2100      	movs	r1, #0
 8013d9c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8013da0:	4a09      	ldr	r2, [pc, #36]	@ (8013dc8 <vQueueUnregisterQueue+0x50>)
 8013da2:	68fb      	ldr	r3, [r7, #12]
 8013da4:	00db      	lsls	r3, r3, #3
 8013da6:	4413      	add	r3, r2
 8013da8:	2200      	movs	r2, #0
 8013daa:	605a      	str	r2, [r3, #4]
				break;
 8013dac:	e006      	b.n	8013dbc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013dae:	68fb      	ldr	r3, [r7, #12]
 8013db0:	3301      	adds	r3, #1
 8013db2:	60fb      	str	r3, [r7, #12]
 8013db4:	68fb      	ldr	r3, [r7, #12]
 8013db6:	2b07      	cmp	r3, #7
 8013db8:	d9e5      	bls.n	8013d86 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8013dba:	bf00      	nop
 8013dbc:	bf00      	nop
 8013dbe:	3714      	adds	r7, #20
 8013dc0:	46bd      	mov	sp, r7
 8013dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dc6:	4770      	bx	lr
 8013dc8:	240011c0 	.word	0x240011c0

08013dcc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013dcc:	b580      	push	{r7, lr}
 8013dce:	b086      	sub	sp, #24
 8013dd0:	af00      	add	r7, sp, #0
 8013dd2:	60f8      	str	r0, [r7, #12]
 8013dd4:	60b9      	str	r1, [r7, #8]
 8013dd6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8013dd8:	68fb      	ldr	r3, [r7, #12]
 8013dda:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8013ddc:	f002 f83c 	bl	8015e58 <vPortEnterCritical>
 8013de0:	697b      	ldr	r3, [r7, #20]
 8013de2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013de6:	b25b      	sxtb	r3, r3
 8013de8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8013dec:	d103      	bne.n	8013df6 <vQueueWaitForMessageRestricted+0x2a>
 8013dee:	697b      	ldr	r3, [r7, #20]
 8013df0:	2200      	movs	r2, #0
 8013df2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013df6:	697b      	ldr	r3, [r7, #20]
 8013df8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013dfc:	b25b      	sxtb	r3, r3
 8013dfe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8013e02:	d103      	bne.n	8013e0c <vQueueWaitForMessageRestricted+0x40>
 8013e04:	697b      	ldr	r3, [r7, #20]
 8013e06:	2200      	movs	r2, #0
 8013e08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013e0c:	f002 f856 	bl	8015ebc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8013e10:	697b      	ldr	r3, [r7, #20]
 8013e12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	d106      	bne.n	8013e26 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8013e18:	697b      	ldr	r3, [r7, #20]
 8013e1a:	3324      	adds	r3, #36	@ 0x24
 8013e1c:	687a      	ldr	r2, [r7, #4]
 8013e1e:	68b9      	ldr	r1, [r7, #8]
 8013e20:	4618      	mov	r0, r3
 8013e22:	f000 fcbd 	bl	80147a0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8013e26:	6978      	ldr	r0, [r7, #20]
 8013e28:	f7ff fefc 	bl	8013c24 <prvUnlockQueue>
	}
 8013e2c:	bf00      	nop
 8013e2e:	3718      	adds	r7, #24
 8013e30:	46bd      	mov	sp, r7
 8013e32:	bd80      	pop	{r7, pc}

08013e34 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8013e34:	b580      	push	{r7, lr}
 8013e36:	b08e      	sub	sp, #56	@ 0x38
 8013e38:	af04      	add	r7, sp, #16
 8013e3a:	60f8      	str	r0, [r7, #12]
 8013e3c:	60b9      	str	r1, [r7, #8]
 8013e3e:	607a      	str	r2, [r7, #4]
 8013e40:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8013e42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	d10b      	bne.n	8013e60 <xTaskCreateStatic+0x2c>
	__asm volatile
 8013e48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013e4c:	f383 8811 	msr	BASEPRI, r3
 8013e50:	f3bf 8f6f 	isb	sy
 8013e54:	f3bf 8f4f 	dsb	sy
 8013e58:	623b      	str	r3, [r7, #32]
}
 8013e5a:	bf00      	nop
 8013e5c:	bf00      	nop
 8013e5e:	e7fd      	b.n	8013e5c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8013e60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	d10b      	bne.n	8013e7e <xTaskCreateStatic+0x4a>
	__asm volatile
 8013e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013e6a:	f383 8811 	msr	BASEPRI, r3
 8013e6e:	f3bf 8f6f 	isb	sy
 8013e72:	f3bf 8f4f 	dsb	sy
 8013e76:	61fb      	str	r3, [r7, #28]
}
 8013e78:	bf00      	nop
 8013e7a:	bf00      	nop
 8013e7c:	e7fd      	b.n	8013e7a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8013e7e:	23a8      	movs	r3, #168	@ 0xa8
 8013e80:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8013e82:	693b      	ldr	r3, [r7, #16]
 8013e84:	2ba8      	cmp	r3, #168	@ 0xa8
 8013e86:	d00b      	beq.n	8013ea0 <xTaskCreateStatic+0x6c>
	__asm volatile
 8013e88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013e8c:	f383 8811 	msr	BASEPRI, r3
 8013e90:	f3bf 8f6f 	isb	sy
 8013e94:	f3bf 8f4f 	dsb	sy
 8013e98:	61bb      	str	r3, [r7, #24]
}
 8013e9a:	bf00      	nop
 8013e9c:	bf00      	nop
 8013e9e:	e7fd      	b.n	8013e9c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8013ea0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013ea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	d01e      	beq.n	8013ee6 <xTaskCreateStatic+0xb2>
 8013ea8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013eaa:	2b00      	cmp	r3, #0
 8013eac:	d01b      	beq.n	8013ee6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013eae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013eb0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8013eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013eb4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013eb6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8013eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013eba:	2202      	movs	r2, #2
 8013ebc:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8013ec0:	2300      	movs	r3, #0
 8013ec2:	9303      	str	r3, [sp, #12]
 8013ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ec6:	9302      	str	r3, [sp, #8]
 8013ec8:	f107 0314 	add.w	r3, r7, #20
 8013ecc:	9301      	str	r3, [sp, #4]
 8013ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ed0:	9300      	str	r3, [sp, #0]
 8013ed2:	683b      	ldr	r3, [r7, #0]
 8013ed4:	687a      	ldr	r2, [r7, #4]
 8013ed6:	68b9      	ldr	r1, [r7, #8]
 8013ed8:	68f8      	ldr	r0, [r7, #12]
 8013eda:	f000 f851 	bl	8013f80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013ede:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013ee0:	f000 f8f6 	bl	80140d0 <prvAddNewTaskToReadyList>
 8013ee4:	e001      	b.n	8013eea <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8013ee6:	2300      	movs	r3, #0
 8013ee8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8013eea:	697b      	ldr	r3, [r7, #20]
	}
 8013eec:	4618      	mov	r0, r3
 8013eee:	3728      	adds	r7, #40	@ 0x28
 8013ef0:	46bd      	mov	sp, r7
 8013ef2:	bd80      	pop	{r7, pc}

08013ef4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8013ef4:	b580      	push	{r7, lr}
 8013ef6:	b08c      	sub	sp, #48	@ 0x30
 8013ef8:	af04      	add	r7, sp, #16
 8013efa:	60f8      	str	r0, [r7, #12]
 8013efc:	60b9      	str	r1, [r7, #8]
 8013efe:	603b      	str	r3, [r7, #0]
 8013f00:	4613      	mov	r3, r2
 8013f02:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8013f04:	88fb      	ldrh	r3, [r7, #6]
 8013f06:	009b      	lsls	r3, r3, #2
 8013f08:	4618      	mov	r0, r3
 8013f0a:	f002 f8c7 	bl	801609c <pvPortMalloc>
 8013f0e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8013f10:	697b      	ldr	r3, [r7, #20]
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	d00e      	beq.n	8013f34 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8013f16:	20a8      	movs	r0, #168	@ 0xa8
 8013f18:	f002 f8c0 	bl	801609c <pvPortMalloc>
 8013f1c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8013f1e:	69fb      	ldr	r3, [r7, #28]
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	d003      	beq.n	8013f2c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8013f24:	69fb      	ldr	r3, [r7, #28]
 8013f26:	697a      	ldr	r2, [r7, #20]
 8013f28:	631a      	str	r2, [r3, #48]	@ 0x30
 8013f2a:	e005      	b.n	8013f38 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8013f2c:	6978      	ldr	r0, [r7, #20]
 8013f2e:	f002 f983 	bl	8016238 <vPortFree>
 8013f32:	e001      	b.n	8013f38 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8013f34:	2300      	movs	r3, #0
 8013f36:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8013f38:	69fb      	ldr	r3, [r7, #28]
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	d017      	beq.n	8013f6e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8013f3e:	69fb      	ldr	r3, [r7, #28]
 8013f40:	2200      	movs	r2, #0
 8013f42:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8013f46:	88fa      	ldrh	r2, [r7, #6]
 8013f48:	2300      	movs	r3, #0
 8013f4a:	9303      	str	r3, [sp, #12]
 8013f4c:	69fb      	ldr	r3, [r7, #28]
 8013f4e:	9302      	str	r3, [sp, #8]
 8013f50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f52:	9301      	str	r3, [sp, #4]
 8013f54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f56:	9300      	str	r3, [sp, #0]
 8013f58:	683b      	ldr	r3, [r7, #0]
 8013f5a:	68b9      	ldr	r1, [r7, #8]
 8013f5c:	68f8      	ldr	r0, [r7, #12]
 8013f5e:	f000 f80f 	bl	8013f80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013f62:	69f8      	ldr	r0, [r7, #28]
 8013f64:	f000 f8b4 	bl	80140d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8013f68:	2301      	movs	r3, #1
 8013f6a:	61bb      	str	r3, [r7, #24]
 8013f6c:	e002      	b.n	8013f74 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013f6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013f72:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8013f74:	69bb      	ldr	r3, [r7, #24]
	}
 8013f76:	4618      	mov	r0, r3
 8013f78:	3720      	adds	r7, #32
 8013f7a:	46bd      	mov	sp, r7
 8013f7c:	bd80      	pop	{r7, pc}
	...

08013f80 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8013f80:	b580      	push	{r7, lr}
 8013f82:	b088      	sub	sp, #32
 8013f84:	af00      	add	r7, sp, #0
 8013f86:	60f8      	str	r0, [r7, #12]
 8013f88:	60b9      	str	r1, [r7, #8]
 8013f8a:	607a      	str	r2, [r7, #4]
 8013f8c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8013f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f90:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	009b      	lsls	r3, r3, #2
 8013f96:	461a      	mov	r2, r3
 8013f98:	21a5      	movs	r1, #165	@ 0xa5
 8013f9a:	f002 fe0f 	bl	8016bbc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8013f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013fa0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8013fa2:	6879      	ldr	r1, [r7, #4]
 8013fa4:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8013fa8:	440b      	add	r3, r1
 8013faa:	009b      	lsls	r3, r3, #2
 8013fac:	4413      	add	r3, r2
 8013fae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8013fb0:	69bb      	ldr	r3, [r7, #24]
 8013fb2:	f023 0307 	bic.w	r3, r3, #7
 8013fb6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8013fb8:	69bb      	ldr	r3, [r7, #24]
 8013fba:	f003 0307 	and.w	r3, r3, #7
 8013fbe:	2b00      	cmp	r3, #0
 8013fc0:	d00b      	beq.n	8013fda <prvInitialiseNewTask+0x5a>
	__asm volatile
 8013fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013fc6:	f383 8811 	msr	BASEPRI, r3
 8013fca:	f3bf 8f6f 	isb	sy
 8013fce:	f3bf 8f4f 	dsb	sy
 8013fd2:	617b      	str	r3, [r7, #20]
}
 8013fd4:	bf00      	nop
 8013fd6:	bf00      	nop
 8013fd8:	e7fd      	b.n	8013fd6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8013fda:	68bb      	ldr	r3, [r7, #8]
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	d01f      	beq.n	8014020 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013fe0:	2300      	movs	r3, #0
 8013fe2:	61fb      	str	r3, [r7, #28]
 8013fe4:	e012      	b.n	801400c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013fe6:	68ba      	ldr	r2, [r7, #8]
 8013fe8:	69fb      	ldr	r3, [r7, #28]
 8013fea:	4413      	add	r3, r2
 8013fec:	7819      	ldrb	r1, [r3, #0]
 8013fee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013ff0:	69fb      	ldr	r3, [r7, #28]
 8013ff2:	4413      	add	r3, r2
 8013ff4:	3334      	adds	r3, #52	@ 0x34
 8013ff6:	460a      	mov	r2, r1
 8013ff8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8013ffa:	68ba      	ldr	r2, [r7, #8]
 8013ffc:	69fb      	ldr	r3, [r7, #28]
 8013ffe:	4413      	add	r3, r2
 8014000:	781b      	ldrb	r3, [r3, #0]
 8014002:	2b00      	cmp	r3, #0
 8014004:	d006      	beq.n	8014014 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014006:	69fb      	ldr	r3, [r7, #28]
 8014008:	3301      	adds	r3, #1
 801400a:	61fb      	str	r3, [r7, #28]
 801400c:	69fb      	ldr	r3, [r7, #28]
 801400e:	2b0f      	cmp	r3, #15
 8014010:	d9e9      	bls.n	8013fe6 <prvInitialiseNewTask+0x66>
 8014012:	e000      	b.n	8014016 <prvInitialiseNewTask+0x96>
			{
				break;
 8014014:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8014016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014018:	2200      	movs	r2, #0
 801401a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801401e:	e003      	b.n	8014028 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8014020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014022:	2200      	movs	r2, #0
 8014024:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8014028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801402a:	2b37      	cmp	r3, #55	@ 0x37
 801402c:	d901      	bls.n	8014032 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801402e:	2337      	movs	r3, #55	@ 0x37
 8014030:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8014032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014034:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014036:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8014038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801403a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801403c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801403e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014040:	2200      	movs	r2, #0
 8014042:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8014044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014046:	3304      	adds	r3, #4
 8014048:	4618      	mov	r0, r3
 801404a:	f7fe fe33 	bl	8012cb4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801404e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014050:	3318      	adds	r3, #24
 8014052:	4618      	mov	r0, r3
 8014054:	f7fe fe2e 	bl	8012cb4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8014058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801405a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801405c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801405e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014060:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8014064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014066:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8014068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801406a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801406c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801406e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014070:	2200      	movs	r2, #0
 8014072:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014078:	2200      	movs	r2, #0
 801407a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801407e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014080:	3354      	adds	r3, #84	@ 0x54
 8014082:	224c      	movs	r2, #76	@ 0x4c
 8014084:	2100      	movs	r1, #0
 8014086:	4618      	mov	r0, r3
 8014088:	f002 fd98 	bl	8016bbc <memset>
 801408c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801408e:	4a0d      	ldr	r2, [pc, #52]	@ (80140c4 <prvInitialiseNewTask+0x144>)
 8014090:	659a      	str	r2, [r3, #88]	@ 0x58
 8014092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014094:	4a0c      	ldr	r2, [pc, #48]	@ (80140c8 <prvInitialiseNewTask+0x148>)
 8014096:	65da      	str	r2, [r3, #92]	@ 0x5c
 8014098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801409a:	4a0c      	ldr	r2, [pc, #48]	@ (80140cc <prvInitialiseNewTask+0x14c>)
 801409c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801409e:	683a      	ldr	r2, [r7, #0]
 80140a0:	68f9      	ldr	r1, [r7, #12]
 80140a2:	69b8      	ldr	r0, [r7, #24]
 80140a4:	f001 fda8 	bl	8015bf8 <pxPortInitialiseStack>
 80140a8:	4602      	mov	r2, r0
 80140aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80140ac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80140ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80140b0:	2b00      	cmp	r3, #0
 80140b2:	d002      	beq.n	80140ba <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80140b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80140b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80140b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80140ba:	bf00      	nop
 80140bc:	3720      	adds	r7, #32
 80140be:	46bd      	mov	sp, r7
 80140c0:	bd80      	pop	{r7, pc}
 80140c2:	bf00      	nop
 80140c4:	2400545c 	.word	0x2400545c
 80140c8:	240054c4 	.word	0x240054c4
 80140cc:	2400552c 	.word	0x2400552c

080140d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80140d0:	b580      	push	{r7, lr}
 80140d2:	b082      	sub	sp, #8
 80140d4:	af00      	add	r7, sp, #0
 80140d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80140d8:	f001 febe 	bl	8015e58 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80140dc:	4b2d      	ldr	r3, [pc, #180]	@ (8014194 <prvAddNewTaskToReadyList+0xc4>)
 80140de:	681b      	ldr	r3, [r3, #0]
 80140e0:	3301      	adds	r3, #1
 80140e2:	4a2c      	ldr	r2, [pc, #176]	@ (8014194 <prvAddNewTaskToReadyList+0xc4>)
 80140e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80140e6:	4b2c      	ldr	r3, [pc, #176]	@ (8014198 <prvAddNewTaskToReadyList+0xc8>)
 80140e8:	681b      	ldr	r3, [r3, #0]
 80140ea:	2b00      	cmp	r3, #0
 80140ec:	d109      	bne.n	8014102 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80140ee:	4a2a      	ldr	r2, [pc, #168]	@ (8014198 <prvAddNewTaskToReadyList+0xc8>)
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80140f4:	4b27      	ldr	r3, [pc, #156]	@ (8014194 <prvAddNewTaskToReadyList+0xc4>)
 80140f6:	681b      	ldr	r3, [r3, #0]
 80140f8:	2b01      	cmp	r3, #1
 80140fa:	d110      	bne.n	801411e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80140fc:	f000 fce2 	bl	8014ac4 <prvInitialiseTaskLists>
 8014100:	e00d      	b.n	801411e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8014102:	4b26      	ldr	r3, [pc, #152]	@ (801419c <prvAddNewTaskToReadyList+0xcc>)
 8014104:	681b      	ldr	r3, [r3, #0]
 8014106:	2b00      	cmp	r3, #0
 8014108:	d109      	bne.n	801411e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801410a:	4b23      	ldr	r3, [pc, #140]	@ (8014198 <prvAddNewTaskToReadyList+0xc8>)
 801410c:	681b      	ldr	r3, [r3, #0]
 801410e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014114:	429a      	cmp	r2, r3
 8014116:	d802      	bhi.n	801411e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8014118:	4a1f      	ldr	r2, [pc, #124]	@ (8014198 <prvAddNewTaskToReadyList+0xc8>)
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801411e:	4b20      	ldr	r3, [pc, #128]	@ (80141a0 <prvAddNewTaskToReadyList+0xd0>)
 8014120:	681b      	ldr	r3, [r3, #0]
 8014122:	3301      	adds	r3, #1
 8014124:	4a1e      	ldr	r2, [pc, #120]	@ (80141a0 <prvAddNewTaskToReadyList+0xd0>)
 8014126:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8014128:	4b1d      	ldr	r3, [pc, #116]	@ (80141a0 <prvAddNewTaskToReadyList+0xd0>)
 801412a:	681a      	ldr	r2, [r3, #0]
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014134:	4b1b      	ldr	r3, [pc, #108]	@ (80141a4 <prvAddNewTaskToReadyList+0xd4>)
 8014136:	681b      	ldr	r3, [r3, #0]
 8014138:	429a      	cmp	r2, r3
 801413a:	d903      	bls.n	8014144 <prvAddNewTaskToReadyList+0x74>
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014140:	4a18      	ldr	r2, [pc, #96]	@ (80141a4 <prvAddNewTaskToReadyList+0xd4>)
 8014142:	6013      	str	r3, [r2, #0]
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014148:	4613      	mov	r3, r2
 801414a:	009b      	lsls	r3, r3, #2
 801414c:	4413      	add	r3, r2
 801414e:	009b      	lsls	r3, r3, #2
 8014150:	4a15      	ldr	r2, [pc, #84]	@ (80141a8 <prvAddNewTaskToReadyList+0xd8>)
 8014152:	441a      	add	r2, r3
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	3304      	adds	r3, #4
 8014158:	4619      	mov	r1, r3
 801415a:	4610      	mov	r0, r2
 801415c:	f7fe fdb7 	bl	8012cce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8014160:	f001 feac 	bl	8015ebc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8014164:	4b0d      	ldr	r3, [pc, #52]	@ (801419c <prvAddNewTaskToReadyList+0xcc>)
 8014166:	681b      	ldr	r3, [r3, #0]
 8014168:	2b00      	cmp	r3, #0
 801416a:	d00e      	beq.n	801418a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801416c:	4b0a      	ldr	r3, [pc, #40]	@ (8014198 <prvAddNewTaskToReadyList+0xc8>)
 801416e:	681b      	ldr	r3, [r3, #0]
 8014170:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014176:	429a      	cmp	r2, r3
 8014178:	d207      	bcs.n	801418a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801417a:	4b0c      	ldr	r3, [pc, #48]	@ (80141ac <prvAddNewTaskToReadyList+0xdc>)
 801417c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014180:	601a      	str	r2, [r3, #0]
 8014182:	f3bf 8f4f 	dsb	sy
 8014186:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801418a:	bf00      	nop
 801418c:	3708      	adds	r7, #8
 801418e:	46bd      	mov	sp, r7
 8014190:	bd80      	pop	{r7, pc}
 8014192:	bf00      	nop
 8014194:	240016d4 	.word	0x240016d4
 8014198:	24001200 	.word	0x24001200
 801419c:	240016e0 	.word	0x240016e0
 80141a0:	240016f0 	.word	0x240016f0
 80141a4:	240016dc 	.word	0x240016dc
 80141a8:	24001204 	.word	0x24001204
 80141ac:	e000ed04 	.word	0xe000ed04

080141b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80141b0:	b580      	push	{r7, lr}
 80141b2:	b084      	sub	sp, #16
 80141b4:	af00      	add	r7, sp, #0
 80141b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80141b8:	2300      	movs	r3, #0
 80141ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	2b00      	cmp	r3, #0
 80141c0:	d018      	beq.n	80141f4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80141c2:	4b14      	ldr	r3, [pc, #80]	@ (8014214 <vTaskDelay+0x64>)
 80141c4:	681b      	ldr	r3, [r3, #0]
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	d00b      	beq.n	80141e2 <vTaskDelay+0x32>
	__asm volatile
 80141ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80141ce:	f383 8811 	msr	BASEPRI, r3
 80141d2:	f3bf 8f6f 	isb	sy
 80141d6:	f3bf 8f4f 	dsb	sy
 80141da:	60bb      	str	r3, [r7, #8]
}
 80141dc:	bf00      	nop
 80141de:	bf00      	nop
 80141e0:	e7fd      	b.n	80141de <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80141e2:	f000 f88b 	bl	80142fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80141e6:	2100      	movs	r1, #0
 80141e8:	6878      	ldr	r0, [r7, #4]
 80141ea:	f001 f8d9 	bl	80153a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80141ee:	f000 f893 	bl	8014318 <xTaskResumeAll>
 80141f2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80141f4:	68fb      	ldr	r3, [r7, #12]
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	d107      	bne.n	801420a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80141fa:	4b07      	ldr	r3, [pc, #28]	@ (8014218 <vTaskDelay+0x68>)
 80141fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014200:	601a      	str	r2, [r3, #0]
 8014202:	f3bf 8f4f 	dsb	sy
 8014206:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801420a:	bf00      	nop
 801420c:	3710      	adds	r7, #16
 801420e:	46bd      	mov	sp, r7
 8014210:	bd80      	pop	{r7, pc}
 8014212:	bf00      	nop
 8014214:	240016fc 	.word	0x240016fc
 8014218:	e000ed04 	.word	0xe000ed04

0801421c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801421c:	b580      	push	{r7, lr}
 801421e:	b08a      	sub	sp, #40	@ 0x28
 8014220:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8014222:	2300      	movs	r3, #0
 8014224:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8014226:	2300      	movs	r3, #0
 8014228:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801422a:	463a      	mov	r2, r7
 801422c:	1d39      	adds	r1, r7, #4
 801422e:	f107 0308 	add.w	r3, r7, #8
 8014232:	4618      	mov	r0, r3
 8014234:	f7fe fb2e 	bl	8012894 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8014238:	6839      	ldr	r1, [r7, #0]
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	68ba      	ldr	r2, [r7, #8]
 801423e:	9202      	str	r2, [sp, #8]
 8014240:	9301      	str	r3, [sp, #4]
 8014242:	2300      	movs	r3, #0
 8014244:	9300      	str	r3, [sp, #0]
 8014246:	2300      	movs	r3, #0
 8014248:	460a      	mov	r2, r1
 801424a:	4924      	ldr	r1, [pc, #144]	@ (80142dc <vTaskStartScheduler+0xc0>)
 801424c:	4824      	ldr	r0, [pc, #144]	@ (80142e0 <vTaskStartScheduler+0xc4>)
 801424e:	f7ff fdf1 	bl	8013e34 <xTaskCreateStatic>
 8014252:	4603      	mov	r3, r0
 8014254:	4a23      	ldr	r2, [pc, #140]	@ (80142e4 <vTaskStartScheduler+0xc8>)
 8014256:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8014258:	4b22      	ldr	r3, [pc, #136]	@ (80142e4 <vTaskStartScheduler+0xc8>)
 801425a:	681b      	ldr	r3, [r3, #0]
 801425c:	2b00      	cmp	r3, #0
 801425e:	d002      	beq.n	8014266 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8014260:	2301      	movs	r3, #1
 8014262:	617b      	str	r3, [r7, #20]
 8014264:	e001      	b.n	801426a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8014266:	2300      	movs	r3, #0
 8014268:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801426a:	697b      	ldr	r3, [r7, #20]
 801426c:	2b01      	cmp	r3, #1
 801426e:	d102      	bne.n	8014276 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8014270:	f001 f8ea 	bl	8015448 <xTimerCreateTimerTask>
 8014274:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8014276:	697b      	ldr	r3, [r7, #20]
 8014278:	2b01      	cmp	r3, #1
 801427a:	d11b      	bne.n	80142b4 <vTaskStartScheduler+0x98>
	__asm volatile
 801427c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014280:	f383 8811 	msr	BASEPRI, r3
 8014284:	f3bf 8f6f 	isb	sy
 8014288:	f3bf 8f4f 	dsb	sy
 801428c:	613b      	str	r3, [r7, #16]
}
 801428e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8014290:	4b15      	ldr	r3, [pc, #84]	@ (80142e8 <vTaskStartScheduler+0xcc>)
 8014292:	681b      	ldr	r3, [r3, #0]
 8014294:	3354      	adds	r3, #84	@ 0x54
 8014296:	4a15      	ldr	r2, [pc, #84]	@ (80142ec <vTaskStartScheduler+0xd0>)
 8014298:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801429a:	4b15      	ldr	r3, [pc, #84]	@ (80142f0 <vTaskStartScheduler+0xd4>)
 801429c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80142a0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80142a2:	4b14      	ldr	r3, [pc, #80]	@ (80142f4 <vTaskStartScheduler+0xd8>)
 80142a4:	2201      	movs	r2, #1
 80142a6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80142a8:	4b13      	ldr	r3, [pc, #76]	@ (80142f8 <vTaskStartScheduler+0xdc>)
 80142aa:	2200      	movs	r2, #0
 80142ac:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80142ae:	f001 fd2f 	bl	8015d10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80142b2:	e00f      	b.n	80142d4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80142b4:	697b      	ldr	r3, [r7, #20]
 80142b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80142ba:	d10b      	bne.n	80142d4 <vTaskStartScheduler+0xb8>
	__asm volatile
 80142bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80142c0:	f383 8811 	msr	BASEPRI, r3
 80142c4:	f3bf 8f6f 	isb	sy
 80142c8:	f3bf 8f4f 	dsb	sy
 80142cc:	60fb      	str	r3, [r7, #12]
}
 80142ce:	bf00      	nop
 80142d0:	bf00      	nop
 80142d2:	e7fd      	b.n	80142d0 <vTaskStartScheduler+0xb4>
}
 80142d4:	bf00      	nop
 80142d6:	3718      	adds	r7, #24
 80142d8:	46bd      	mov	sp, r7
 80142da:	bd80      	pop	{r7, pc}
 80142dc:	08017b8c 	.word	0x08017b8c
 80142e0:	08014a95 	.word	0x08014a95
 80142e4:	240016f8 	.word	0x240016f8
 80142e8:	24001200 	.word	0x24001200
 80142ec:	24000020 	.word	0x24000020
 80142f0:	240016f4 	.word	0x240016f4
 80142f4:	240016e0 	.word	0x240016e0
 80142f8:	240016d8 	.word	0x240016d8

080142fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80142fc:	b480      	push	{r7}
 80142fe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8014300:	4b04      	ldr	r3, [pc, #16]	@ (8014314 <vTaskSuspendAll+0x18>)
 8014302:	681b      	ldr	r3, [r3, #0]
 8014304:	3301      	adds	r3, #1
 8014306:	4a03      	ldr	r2, [pc, #12]	@ (8014314 <vTaskSuspendAll+0x18>)
 8014308:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801430a:	bf00      	nop
 801430c:	46bd      	mov	sp, r7
 801430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014312:	4770      	bx	lr
 8014314:	240016fc 	.word	0x240016fc

08014318 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8014318:	b580      	push	{r7, lr}
 801431a:	b084      	sub	sp, #16
 801431c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801431e:	2300      	movs	r3, #0
 8014320:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8014322:	2300      	movs	r3, #0
 8014324:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8014326:	4b42      	ldr	r3, [pc, #264]	@ (8014430 <xTaskResumeAll+0x118>)
 8014328:	681b      	ldr	r3, [r3, #0]
 801432a:	2b00      	cmp	r3, #0
 801432c:	d10b      	bne.n	8014346 <xTaskResumeAll+0x2e>
	__asm volatile
 801432e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014332:	f383 8811 	msr	BASEPRI, r3
 8014336:	f3bf 8f6f 	isb	sy
 801433a:	f3bf 8f4f 	dsb	sy
 801433e:	603b      	str	r3, [r7, #0]
}
 8014340:	bf00      	nop
 8014342:	bf00      	nop
 8014344:	e7fd      	b.n	8014342 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8014346:	f001 fd87 	bl	8015e58 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801434a:	4b39      	ldr	r3, [pc, #228]	@ (8014430 <xTaskResumeAll+0x118>)
 801434c:	681b      	ldr	r3, [r3, #0]
 801434e:	3b01      	subs	r3, #1
 8014350:	4a37      	ldr	r2, [pc, #220]	@ (8014430 <xTaskResumeAll+0x118>)
 8014352:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014354:	4b36      	ldr	r3, [pc, #216]	@ (8014430 <xTaskResumeAll+0x118>)
 8014356:	681b      	ldr	r3, [r3, #0]
 8014358:	2b00      	cmp	r3, #0
 801435a:	d162      	bne.n	8014422 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801435c:	4b35      	ldr	r3, [pc, #212]	@ (8014434 <xTaskResumeAll+0x11c>)
 801435e:	681b      	ldr	r3, [r3, #0]
 8014360:	2b00      	cmp	r3, #0
 8014362:	d05e      	beq.n	8014422 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014364:	e02f      	b.n	80143c6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014366:	4b34      	ldr	r3, [pc, #208]	@ (8014438 <xTaskResumeAll+0x120>)
 8014368:	68db      	ldr	r3, [r3, #12]
 801436a:	68db      	ldr	r3, [r3, #12]
 801436c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801436e:	68fb      	ldr	r3, [r7, #12]
 8014370:	3318      	adds	r3, #24
 8014372:	4618      	mov	r0, r3
 8014374:	f7fe fd08 	bl	8012d88 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014378:	68fb      	ldr	r3, [r7, #12]
 801437a:	3304      	adds	r3, #4
 801437c:	4618      	mov	r0, r3
 801437e:	f7fe fd03 	bl	8012d88 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014382:	68fb      	ldr	r3, [r7, #12]
 8014384:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014386:	4b2d      	ldr	r3, [pc, #180]	@ (801443c <xTaskResumeAll+0x124>)
 8014388:	681b      	ldr	r3, [r3, #0]
 801438a:	429a      	cmp	r2, r3
 801438c:	d903      	bls.n	8014396 <xTaskResumeAll+0x7e>
 801438e:	68fb      	ldr	r3, [r7, #12]
 8014390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014392:	4a2a      	ldr	r2, [pc, #168]	@ (801443c <xTaskResumeAll+0x124>)
 8014394:	6013      	str	r3, [r2, #0]
 8014396:	68fb      	ldr	r3, [r7, #12]
 8014398:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801439a:	4613      	mov	r3, r2
 801439c:	009b      	lsls	r3, r3, #2
 801439e:	4413      	add	r3, r2
 80143a0:	009b      	lsls	r3, r3, #2
 80143a2:	4a27      	ldr	r2, [pc, #156]	@ (8014440 <xTaskResumeAll+0x128>)
 80143a4:	441a      	add	r2, r3
 80143a6:	68fb      	ldr	r3, [r7, #12]
 80143a8:	3304      	adds	r3, #4
 80143aa:	4619      	mov	r1, r3
 80143ac:	4610      	mov	r0, r2
 80143ae:	f7fe fc8e 	bl	8012cce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80143b2:	68fb      	ldr	r3, [r7, #12]
 80143b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80143b6:	4b23      	ldr	r3, [pc, #140]	@ (8014444 <xTaskResumeAll+0x12c>)
 80143b8:	681b      	ldr	r3, [r3, #0]
 80143ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80143bc:	429a      	cmp	r2, r3
 80143be:	d302      	bcc.n	80143c6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80143c0:	4b21      	ldr	r3, [pc, #132]	@ (8014448 <xTaskResumeAll+0x130>)
 80143c2:	2201      	movs	r2, #1
 80143c4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80143c6:	4b1c      	ldr	r3, [pc, #112]	@ (8014438 <xTaskResumeAll+0x120>)
 80143c8:	681b      	ldr	r3, [r3, #0]
 80143ca:	2b00      	cmp	r3, #0
 80143cc:	d1cb      	bne.n	8014366 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80143ce:	68fb      	ldr	r3, [r7, #12]
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	d001      	beq.n	80143d8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80143d4:	f000 fc1a 	bl	8014c0c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80143d8:	4b1c      	ldr	r3, [pc, #112]	@ (801444c <xTaskResumeAll+0x134>)
 80143da:	681b      	ldr	r3, [r3, #0]
 80143dc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d010      	beq.n	8014406 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80143e4:	f000 f858 	bl	8014498 <xTaskIncrementTick>
 80143e8:	4603      	mov	r3, r0
 80143ea:	2b00      	cmp	r3, #0
 80143ec:	d002      	beq.n	80143f4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80143ee:	4b16      	ldr	r3, [pc, #88]	@ (8014448 <xTaskResumeAll+0x130>)
 80143f0:	2201      	movs	r2, #1
 80143f2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	3b01      	subs	r3, #1
 80143f8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	d1f1      	bne.n	80143e4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8014400:	4b12      	ldr	r3, [pc, #72]	@ (801444c <xTaskResumeAll+0x134>)
 8014402:	2200      	movs	r2, #0
 8014404:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8014406:	4b10      	ldr	r3, [pc, #64]	@ (8014448 <xTaskResumeAll+0x130>)
 8014408:	681b      	ldr	r3, [r3, #0]
 801440a:	2b00      	cmp	r3, #0
 801440c:	d009      	beq.n	8014422 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801440e:	2301      	movs	r3, #1
 8014410:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8014412:	4b0f      	ldr	r3, [pc, #60]	@ (8014450 <xTaskResumeAll+0x138>)
 8014414:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014418:	601a      	str	r2, [r3, #0]
 801441a:	f3bf 8f4f 	dsb	sy
 801441e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014422:	f001 fd4b 	bl	8015ebc <vPortExitCritical>

	return xAlreadyYielded;
 8014426:	68bb      	ldr	r3, [r7, #8]
}
 8014428:	4618      	mov	r0, r3
 801442a:	3710      	adds	r7, #16
 801442c:	46bd      	mov	sp, r7
 801442e:	bd80      	pop	{r7, pc}
 8014430:	240016fc 	.word	0x240016fc
 8014434:	240016d4 	.word	0x240016d4
 8014438:	24001694 	.word	0x24001694
 801443c:	240016dc 	.word	0x240016dc
 8014440:	24001204 	.word	0x24001204
 8014444:	24001200 	.word	0x24001200
 8014448:	240016e8 	.word	0x240016e8
 801444c:	240016e4 	.word	0x240016e4
 8014450:	e000ed04 	.word	0xe000ed04

08014454 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8014454:	b480      	push	{r7}
 8014456:	b083      	sub	sp, #12
 8014458:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801445a:	4b05      	ldr	r3, [pc, #20]	@ (8014470 <xTaskGetTickCount+0x1c>)
 801445c:	681b      	ldr	r3, [r3, #0]
 801445e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8014460:	687b      	ldr	r3, [r7, #4]
}
 8014462:	4618      	mov	r0, r3
 8014464:	370c      	adds	r7, #12
 8014466:	46bd      	mov	sp, r7
 8014468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801446c:	4770      	bx	lr
 801446e:	bf00      	nop
 8014470:	240016d8 	.word	0x240016d8

08014474 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8014474:	b580      	push	{r7, lr}
 8014476:	b082      	sub	sp, #8
 8014478:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801447a:	f001 fdcd 	bl	8016018 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 801447e:	2300      	movs	r3, #0
 8014480:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8014482:	4b04      	ldr	r3, [pc, #16]	@ (8014494 <xTaskGetTickCountFromISR+0x20>)
 8014484:	681b      	ldr	r3, [r3, #0]
 8014486:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014488:	683b      	ldr	r3, [r7, #0]
}
 801448a:	4618      	mov	r0, r3
 801448c:	3708      	adds	r7, #8
 801448e:	46bd      	mov	sp, r7
 8014490:	bd80      	pop	{r7, pc}
 8014492:	bf00      	nop
 8014494:	240016d8 	.word	0x240016d8

08014498 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8014498:	b580      	push	{r7, lr}
 801449a:	b086      	sub	sp, #24
 801449c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801449e:	2300      	movs	r3, #0
 80144a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80144a2:	4b4f      	ldr	r3, [pc, #316]	@ (80145e0 <xTaskIncrementTick+0x148>)
 80144a4:	681b      	ldr	r3, [r3, #0]
 80144a6:	2b00      	cmp	r3, #0
 80144a8:	f040 8090 	bne.w	80145cc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80144ac:	4b4d      	ldr	r3, [pc, #308]	@ (80145e4 <xTaskIncrementTick+0x14c>)
 80144ae:	681b      	ldr	r3, [r3, #0]
 80144b0:	3301      	adds	r3, #1
 80144b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80144b4:	4a4b      	ldr	r2, [pc, #300]	@ (80145e4 <xTaskIncrementTick+0x14c>)
 80144b6:	693b      	ldr	r3, [r7, #16]
 80144b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80144ba:	693b      	ldr	r3, [r7, #16]
 80144bc:	2b00      	cmp	r3, #0
 80144be:	d121      	bne.n	8014504 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80144c0:	4b49      	ldr	r3, [pc, #292]	@ (80145e8 <xTaskIncrementTick+0x150>)
 80144c2:	681b      	ldr	r3, [r3, #0]
 80144c4:	681b      	ldr	r3, [r3, #0]
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	d00b      	beq.n	80144e2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80144ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80144ce:	f383 8811 	msr	BASEPRI, r3
 80144d2:	f3bf 8f6f 	isb	sy
 80144d6:	f3bf 8f4f 	dsb	sy
 80144da:	603b      	str	r3, [r7, #0]
}
 80144dc:	bf00      	nop
 80144de:	bf00      	nop
 80144e0:	e7fd      	b.n	80144de <xTaskIncrementTick+0x46>
 80144e2:	4b41      	ldr	r3, [pc, #260]	@ (80145e8 <xTaskIncrementTick+0x150>)
 80144e4:	681b      	ldr	r3, [r3, #0]
 80144e6:	60fb      	str	r3, [r7, #12]
 80144e8:	4b40      	ldr	r3, [pc, #256]	@ (80145ec <xTaskIncrementTick+0x154>)
 80144ea:	681b      	ldr	r3, [r3, #0]
 80144ec:	4a3e      	ldr	r2, [pc, #248]	@ (80145e8 <xTaskIncrementTick+0x150>)
 80144ee:	6013      	str	r3, [r2, #0]
 80144f0:	4a3e      	ldr	r2, [pc, #248]	@ (80145ec <xTaskIncrementTick+0x154>)
 80144f2:	68fb      	ldr	r3, [r7, #12]
 80144f4:	6013      	str	r3, [r2, #0]
 80144f6:	4b3e      	ldr	r3, [pc, #248]	@ (80145f0 <xTaskIncrementTick+0x158>)
 80144f8:	681b      	ldr	r3, [r3, #0]
 80144fa:	3301      	adds	r3, #1
 80144fc:	4a3c      	ldr	r2, [pc, #240]	@ (80145f0 <xTaskIncrementTick+0x158>)
 80144fe:	6013      	str	r3, [r2, #0]
 8014500:	f000 fb84 	bl	8014c0c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8014504:	4b3b      	ldr	r3, [pc, #236]	@ (80145f4 <xTaskIncrementTick+0x15c>)
 8014506:	681b      	ldr	r3, [r3, #0]
 8014508:	693a      	ldr	r2, [r7, #16]
 801450a:	429a      	cmp	r2, r3
 801450c:	d349      	bcc.n	80145a2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801450e:	4b36      	ldr	r3, [pc, #216]	@ (80145e8 <xTaskIncrementTick+0x150>)
 8014510:	681b      	ldr	r3, [r3, #0]
 8014512:	681b      	ldr	r3, [r3, #0]
 8014514:	2b00      	cmp	r3, #0
 8014516:	d104      	bne.n	8014522 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014518:	4b36      	ldr	r3, [pc, #216]	@ (80145f4 <xTaskIncrementTick+0x15c>)
 801451a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801451e:	601a      	str	r2, [r3, #0]
					break;
 8014520:	e03f      	b.n	80145a2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014522:	4b31      	ldr	r3, [pc, #196]	@ (80145e8 <xTaskIncrementTick+0x150>)
 8014524:	681b      	ldr	r3, [r3, #0]
 8014526:	68db      	ldr	r3, [r3, #12]
 8014528:	68db      	ldr	r3, [r3, #12]
 801452a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801452c:	68bb      	ldr	r3, [r7, #8]
 801452e:	685b      	ldr	r3, [r3, #4]
 8014530:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8014532:	693a      	ldr	r2, [r7, #16]
 8014534:	687b      	ldr	r3, [r7, #4]
 8014536:	429a      	cmp	r2, r3
 8014538:	d203      	bcs.n	8014542 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801453a:	4a2e      	ldr	r2, [pc, #184]	@ (80145f4 <xTaskIncrementTick+0x15c>)
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8014540:	e02f      	b.n	80145a2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014542:	68bb      	ldr	r3, [r7, #8]
 8014544:	3304      	adds	r3, #4
 8014546:	4618      	mov	r0, r3
 8014548:	f7fe fc1e 	bl	8012d88 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801454c:	68bb      	ldr	r3, [r7, #8]
 801454e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014550:	2b00      	cmp	r3, #0
 8014552:	d004      	beq.n	801455e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014554:	68bb      	ldr	r3, [r7, #8]
 8014556:	3318      	adds	r3, #24
 8014558:	4618      	mov	r0, r3
 801455a:	f7fe fc15 	bl	8012d88 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801455e:	68bb      	ldr	r3, [r7, #8]
 8014560:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014562:	4b25      	ldr	r3, [pc, #148]	@ (80145f8 <xTaskIncrementTick+0x160>)
 8014564:	681b      	ldr	r3, [r3, #0]
 8014566:	429a      	cmp	r2, r3
 8014568:	d903      	bls.n	8014572 <xTaskIncrementTick+0xda>
 801456a:	68bb      	ldr	r3, [r7, #8]
 801456c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801456e:	4a22      	ldr	r2, [pc, #136]	@ (80145f8 <xTaskIncrementTick+0x160>)
 8014570:	6013      	str	r3, [r2, #0]
 8014572:	68bb      	ldr	r3, [r7, #8]
 8014574:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014576:	4613      	mov	r3, r2
 8014578:	009b      	lsls	r3, r3, #2
 801457a:	4413      	add	r3, r2
 801457c:	009b      	lsls	r3, r3, #2
 801457e:	4a1f      	ldr	r2, [pc, #124]	@ (80145fc <xTaskIncrementTick+0x164>)
 8014580:	441a      	add	r2, r3
 8014582:	68bb      	ldr	r3, [r7, #8]
 8014584:	3304      	adds	r3, #4
 8014586:	4619      	mov	r1, r3
 8014588:	4610      	mov	r0, r2
 801458a:	f7fe fba0 	bl	8012cce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801458e:	68bb      	ldr	r3, [r7, #8]
 8014590:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014592:	4b1b      	ldr	r3, [pc, #108]	@ (8014600 <xTaskIncrementTick+0x168>)
 8014594:	681b      	ldr	r3, [r3, #0]
 8014596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014598:	429a      	cmp	r2, r3
 801459a:	d3b8      	bcc.n	801450e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 801459c:	2301      	movs	r3, #1
 801459e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80145a0:	e7b5      	b.n	801450e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80145a2:	4b17      	ldr	r3, [pc, #92]	@ (8014600 <xTaskIncrementTick+0x168>)
 80145a4:	681b      	ldr	r3, [r3, #0]
 80145a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80145a8:	4914      	ldr	r1, [pc, #80]	@ (80145fc <xTaskIncrementTick+0x164>)
 80145aa:	4613      	mov	r3, r2
 80145ac:	009b      	lsls	r3, r3, #2
 80145ae:	4413      	add	r3, r2
 80145b0:	009b      	lsls	r3, r3, #2
 80145b2:	440b      	add	r3, r1
 80145b4:	681b      	ldr	r3, [r3, #0]
 80145b6:	2b01      	cmp	r3, #1
 80145b8:	d901      	bls.n	80145be <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80145ba:	2301      	movs	r3, #1
 80145bc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80145be:	4b11      	ldr	r3, [pc, #68]	@ (8014604 <xTaskIncrementTick+0x16c>)
 80145c0:	681b      	ldr	r3, [r3, #0]
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	d007      	beq.n	80145d6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80145c6:	2301      	movs	r3, #1
 80145c8:	617b      	str	r3, [r7, #20]
 80145ca:	e004      	b.n	80145d6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80145cc:	4b0e      	ldr	r3, [pc, #56]	@ (8014608 <xTaskIncrementTick+0x170>)
 80145ce:	681b      	ldr	r3, [r3, #0]
 80145d0:	3301      	adds	r3, #1
 80145d2:	4a0d      	ldr	r2, [pc, #52]	@ (8014608 <xTaskIncrementTick+0x170>)
 80145d4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80145d6:	697b      	ldr	r3, [r7, #20]
}
 80145d8:	4618      	mov	r0, r3
 80145da:	3718      	adds	r7, #24
 80145dc:	46bd      	mov	sp, r7
 80145de:	bd80      	pop	{r7, pc}
 80145e0:	240016fc 	.word	0x240016fc
 80145e4:	240016d8 	.word	0x240016d8
 80145e8:	2400168c 	.word	0x2400168c
 80145ec:	24001690 	.word	0x24001690
 80145f0:	240016ec 	.word	0x240016ec
 80145f4:	240016f4 	.word	0x240016f4
 80145f8:	240016dc 	.word	0x240016dc
 80145fc:	24001204 	.word	0x24001204
 8014600:	24001200 	.word	0x24001200
 8014604:	240016e8 	.word	0x240016e8
 8014608:	240016e4 	.word	0x240016e4

0801460c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801460c:	b480      	push	{r7}
 801460e:	b085      	sub	sp, #20
 8014610:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8014612:	4b2b      	ldr	r3, [pc, #172]	@ (80146c0 <vTaskSwitchContext+0xb4>)
 8014614:	681b      	ldr	r3, [r3, #0]
 8014616:	2b00      	cmp	r3, #0
 8014618:	d003      	beq.n	8014622 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801461a:	4b2a      	ldr	r3, [pc, #168]	@ (80146c4 <vTaskSwitchContext+0xb8>)
 801461c:	2201      	movs	r2, #1
 801461e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8014620:	e047      	b.n	80146b2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8014622:	4b28      	ldr	r3, [pc, #160]	@ (80146c4 <vTaskSwitchContext+0xb8>)
 8014624:	2200      	movs	r2, #0
 8014626:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014628:	4b27      	ldr	r3, [pc, #156]	@ (80146c8 <vTaskSwitchContext+0xbc>)
 801462a:	681b      	ldr	r3, [r3, #0]
 801462c:	60fb      	str	r3, [r7, #12]
 801462e:	e011      	b.n	8014654 <vTaskSwitchContext+0x48>
 8014630:	68fb      	ldr	r3, [r7, #12]
 8014632:	2b00      	cmp	r3, #0
 8014634:	d10b      	bne.n	801464e <vTaskSwitchContext+0x42>
	__asm volatile
 8014636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801463a:	f383 8811 	msr	BASEPRI, r3
 801463e:	f3bf 8f6f 	isb	sy
 8014642:	f3bf 8f4f 	dsb	sy
 8014646:	607b      	str	r3, [r7, #4]
}
 8014648:	bf00      	nop
 801464a:	bf00      	nop
 801464c:	e7fd      	b.n	801464a <vTaskSwitchContext+0x3e>
 801464e:	68fb      	ldr	r3, [r7, #12]
 8014650:	3b01      	subs	r3, #1
 8014652:	60fb      	str	r3, [r7, #12]
 8014654:	491d      	ldr	r1, [pc, #116]	@ (80146cc <vTaskSwitchContext+0xc0>)
 8014656:	68fa      	ldr	r2, [r7, #12]
 8014658:	4613      	mov	r3, r2
 801465a:	009b      	lsls	r3, r3, #2
 801465c:	4413      	add	r3, r2
 801465e:	009b      	lsls	r3, r3, #2
 8014660:	440b      	add	r3, r1
 8014662:	681b      	ldr	r3, [r3, #0]
 8014664:	2b00      	cmp	r3, #0
 8014666:	d0e3      	beq.n	8014630 <vTaskSwitchContext+0x24>
 8014668:	68fa      	ldr	r2, [r7, #12]
 801466a:	4613      	mov	r3, r2
 801466c:	009b      	lsls	r3, r3, #2
 801466e:	4413      	add	r3, r2
 8014670:	009b      	lsls	r3, r3, #2
 8014672:	4a16      	ldr	r2, [pc, #88]	@ (80146cc <vTaskSwitchContext+0xc0>)
 8014674:	4413      	add	r3, r2
 8014676:	60bb      	str	r3, [r7, #8]
 8014678:	68bb      	ldr	r3, [r7, #8]
 801467a:	685b      	ldr	r3, [r3, #4]
 801467c:	685a      	ldr	r2, [r3, #4]
 801467e:	68bb      	ldr	r3, [r7, #8]
 8014680:	605a      	str	r2, [r3, #4]
 8014682:	68bb      	ldr	r3, [r7, #8]
 8014684:	685a      	ldr	r2, [r3, #4]
 8014686:	68bb      	ldr	r3, [r7, #8]
 8014688:	3308      	adds	r3, #8
 801468a:	429a      	cmp	r2, r3
 801468c:	d104      	bne.n	8014698 <vTaskSwitchContext+0x8c>
 801468e:	68bb      	ldr	r3, [r7, #8]
 8014690:	685b      	ldr	r3, [r3, #4]
 8014692:	685a      	ldr	r2, [r3, #4]
 8014694:	68bb      	ldr	r3, [r7, #8]
 8014696:	605a      	str	r2, [r3, #4]
 8014698:	68bb      	ldr	r3, [r7, #8]
 801469a:	685b      	ldr	r3, [r3, #4]
 801469c:	68db      	ldr	r3, [r3, #12]
 801469e:	4a0c      	ldr	r2, [pc, #48]	@ (80146d0 <vTaskSwitchContext+0xc4>)
 80146a0:	6013      	str	r3, [r2, #0]
 80146a2:	4a09      	ldr	r2, [pc, #36]	@ (80146c8 <vTaskSwitchContext+0xbc>)
 80146a4:	68fb      	ldr	r3, [r7, #12]
 80146a6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80146a8:	4b09      	ldr	r3, [pc, #36]	@ (80146d0 <vTaskSwitchContext+0xc4>)
 80146aa:	681b      	ldr	r3, [r3, #0]
 80146ac:	3354      	adds	r3, #84	@ 0x54
 80146ae:	4a09      	ldr	r2, [pc, #36]	@ (80146d4 <vTaskSwitchContext+0xc8>)
 80146b0:	6013      	str	r3, [r2, #0]
}
 80146b2:	bf00      	nop
 80146b4:	3714      	adds	r7, #20
 80146b6:	46bd      	mov	sp, r7
 80146b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146bc:	4770      	bx	lr
 80146be:	bf00      	nop
 80146c0:	240016fc 	.word	0x240016fc
 80146c4:	240016e8 	.word	0x240016e8
 80146c8:	240016dc 	.word	0x240016dc
 80146cc:	24001204 	.word	0x24001204
 80146d0:	24001200 	.word	0x24001200
 80146d4:	24000020 	.word	0x24000020

080146d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80146d8:	b580      	push	{r7, lr}
 80146da:	b084      	sub	sp, #16
 80146dc:	af00      	add	r7, sp, #0
 80146de:	6078      	str	r0, [r7, #4]
 80146e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	d10b      	bne.n	8014700 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80146e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80146ec:	f383 8811 	msr	BASEPRI, r3
 80146f0:	f3bf 8f6f 	isb	sy
 80146f4:	f3bf 8f4f 	dsb	sy
 80146f8:	60fb      	str	r3, [r7, #12]
}
 80146fa:	bf00      	nop
 80146fc:	bf00      	nop
 80146fe:	e7fd      	b.n	80146fc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014700:	4b07      	ldr	r3, [pc, #28]	@ (8014720 <vTaskPlaceOnEventList+0x48>)
 8014702:	681b      	ldr	r3, [r3, #0]
 8014704:	3318      	adds	r3, #24
 8014706:	4619      	mov	r1, r3
 8014708:	6878      	ldr	r0, [r7, #4]
 801470a:	f7fe fb04 	bl	8012d16 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801470e:	2101      	movs	r1, #1
 8014710:	6838      	ldr	r0, [r7, #0]
 8014712:	f000 fe45 	bl	80153a0 <prvAddCurrentTaskToDelayedList>
}
 8014716:	bf00      	nop
 8014718:	3710      	adds	r7, #16
 801471a:	46bd      	mov	sp, r7
 801471c:	bd80      	pop	{r7, pc}
 801471e:	bf00      	nop
 8014720:	24001200 	.word	0x24001200

08014724 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8014724:	b580      	push	{r7, lr}
 8014726:	b086      	sub	sp, #24
 8014728:	af00      	add	r7, sp, #0
 801472a:	60f8      	str	r0, [r7, #12]
 801472c:	60b9      	str	r1, [r7, #8]
 801472e:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8014730:	68fb      	ldr	r3, [r7, #12]
 8014732:	2b00      	cmp	r3, #0
 8014734:	d10b      	bne.n	801474e <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 8014736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801473a:	f383 8811 	msr	BASEPRI, r3
 801473e:	f3bf 8f6f 	isb	sy
 8014742:	f3bf 8f4f 	dsb	sy
 8014746:	617b      	str	r3, [r7, #20]
}
 8014748:	bf00      	nop
 801474a:	bf00      	nop
 801474c:	e7fd      	b.n	801474a <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 801474e:	4b12      	ldr	r3, [pc, #72]	@ (8014798 <vTaskPlaceOnUnorderedEventList+0x74>)
 8014750:	681b      	ldr	r3, [r3, #0]
 8014752:	2b00      	cmp	r3, #0
 8014754:	d10b      	bne.n	801476e <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 8014756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801475a:	f383 8811 	msr	BASEPRI, r3
 801475e:	f3bf 8f6f 	isb	sy
 8014762:	f3bf 8f4f 	dsb	sy
 8014766:	613b      	str	r3, [r7, #16]
}
 8014768:	bf00      	nop
 801476a:	bf00      	nop
 801476c:	e7fd      	b.n	801476a <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 801476e:	4b0b      	ldr	r3, [pc, #44]	@ (801479c <vTaskPlaceOnUnorderedEventList+0x78>)
 8014770:	681b      	ldr	r3, [r3, #0]
 8014772:	68ba      	ldr	r2, [r7, #8]
 8014774:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8014778:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801477a:	4b08      	ldr	r3, [pc, #32]	@ (801479c <vTaskPlaceOnUnorderedEventList+0x78>)
 801477c:	681b      	ldr	r3, [r3, #0]
 801477e:	3318      	adds	r3, #24
 8014780:	4619      	mov	r1, r3
 8014782:	68f8      	ldr	r0, [r7, #12]
 8014784:	f7fe faa3 	bl	8012cce <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014788:	2101      	movs	r1, #1
 801478a:	6878      	ldr	r0, [r7, #4]
 801478c:	f000 fe08 	bl	80153a0 <prvAddCurrentTaskToDelayedList>
}
 8014790:	bf00      	nop
 8014792:	3718      	adds	r7, #24
 8014794:	46bd      	mov	sp, r7
 8014796:	bd80      	pop	{r7, pc}
 8014798:	240016fc 	.word	0x240016fc
 801479c:	24001200 	.word	0x24001200

080147a0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80147a0:	b580      	push	{r7, lr}
 80147a2:	b086      	sub	sp, #24
 80147a4:	af00      	add	r7, sp, #0
 80147a6:	60f8      	str	r0, [r7, #12]
 80147a8:	60b9      	str	r1, [r7, #8]
 80147aa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80147ac:	68fb      	ldr	r3, [r7, #12]
 80147ae:	2b00      	cmp	r3, #0
 80147b0:	d10b      	bne.n	80147ca <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80147b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80147b6:	f383 8811 	msr	BASEPRI, r3
 80147ba:	f3bf 8f6f 	isb	sy
 80147be:	f3bf 8f4f 	dsb	sy
 80147c2:	617b      	str	r3, [r7, #20]
}
 80147c4:	bf00      	nop
 80147c6:	bf00      	nop
 80147c8:	e7fd      	b.n	80147c6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80147ca:	4b0a      	ldr	r3, [pc, #40]	@ (80147f4 <vTaskPlaceOnEventListRestricted+0x54>)
 80147cc:	681b      	ldr	r3, [r3, #0]
 80147ce:	3318      	adds	r3, #24
 80147d0:	4619      	mov	r1, r3
 80147d2:	68f8      	ldr	r0, [r7, #12]
 80147d4:	f7fe fa7b 	bl	8012cce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	2b00      	cmp	r3, #0
 80147dc:	d002      	beq.n	80147e4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80147de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80147e2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80147e4:	6879      	ldr	r1, [r7, #4]
 80147e6:	68b8      	ldr	r0, [r7, #8]
 80147e8:	f000 fdda 	bl	80153a0 <prvAddCurrentTaskToDelayedList>
	}
 80147ec:	bf00      	nop
 80147ee:	3718      	adds	r7, #24
 80147f0:	46bd      	mov	sp, r7
 80147f2:	bd80      	pop	{r7, pc}
 80147f4:	24001200 	.word	0x24001200

080147f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80147f8:	b580      	push	{r7, lr}
 80147fa:	b086      	sub	sp, #24
 80147fc:	af00      	add	r7, sp, #0
 80147fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	68db      	ldr	r3, [r3, #12]
 8014804:	68db      	ldr	r3, [r3, #12]
 8014806:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8014808:	693b      	ldr	r3, [r7, #16]
 801480a:	2b00      	cmp	r3, #0
 801480c:	d10b      	bne.n	8014826 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 801480e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014812:	f383 8811 	msr	BASEPRI, r3
 8014816:	f3bf 8f6f 	isb	sy
 801481a:	f3bf 8f4f 	dsb	sy
 801481e:	60fb      	str	r3, [r7, #12]
}
 8014820:	bf00      	nop
 8014822:	bf00      	nop
 8014824:	e7fd      	b.n	8014822 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8014826:	693b      	ldr	r3, [r7, #16]
 8014828:	3318      	adds	r3, #24
 801482a:	4618      	mov	r0, r3
 801482c:	f7fe faac 	bl	8012d88 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014830:	4b1d      	ldr	r3, [pc, #116]	@ (80148a8 <xTaskRemoveFromEventList+0xb0>)
 8014832:	681b      	ldr	r3, [r3, #0]
 8014834:	2b00      	cmp	r3, #0
 8014836:	d11d      	bne.n	8014874 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014838:	693b      	ldr	r3, [r7, #16]
 801483a:	3304      	adds	r3, #4
 801483c:	4618      	mov	r0, r3
 801483e:	f7fe faa3 	bl	8012d88 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8014842:	693b      	ldr	r3, [r7, #16]
 8014844:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014846:	4b19      	ldr	r3, [pc, #100]	@ (80148ac <xTaskRemoveFromEventList+0xb4>)
 8014848:	681b      	ldr	r3, [r3, #0]
 801484a:	429a      	cmp	r2, r3
 801484c:	d903      	bls.n	8014856 <xTaskRemoveFromEventList+0x5e>
 801484e:	693b      	ldr	r3, [r7, #16]
 8014850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014852:	4a16      	ldr	r2, [pc, #88]	@ (80148ac <xTaskRemoveFromEventList+0xb4>)
 8014854:	6013      	str	r3, [r2, #0]
 8014856:	693b      	ldr	r3, [r7, #16]
 8014858:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801485a:	4613      	mov	r3, r2
 801485c:	009b      	lsls	r3, r3, #2
 801485e:	4413      	add	r3, r2
 8014860:	009b      	lsls	r3, r3, #2
 8014862:	4a13      	ldr	r2, [pc, #76]	@ (80148b0 <xTaskRemoveFromEventList+0xb8>)
 8014864:	441a      	add	r2, r3
 8014866:	693b      	ldr	r3, [r7, #16]
 8014868:	3304      	adds	r3, #4
 801486a:	4619      	mov	r1, r3
 801486c:	4610      	mov	r0, r2
 801486e:	f7fe fa2e 	bl	8012cce <vListInsertEnd>
 8014872:	e005      	b.n	8014880 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8014874:	693b      	ldr	r3, [r7, #16]
 8014876:	3318      	adds	r3, #24
 8014878:	4619      	mov	r1, r3
 801487a:	480e      	ldr	r0, [pc, #56]	@ (80148b4 <xTaskRemoveFromEventList+0xbc>)
 801487c:	f7fe fa27 	bl	8012cce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014880:	693b      	ldr	r3, [r7, #16]
 8014882:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014884:	4b0c      	ldr	r3, [pc, #48]	@ (80148b8 <xTaskRemoveFromEventList+0xc0>)
 8014886:	681b      	ldr	r3, [r3, #0]
 8014888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801488a:	429a      	cmp	r2, r3
 801488c:	d905      	bls.n	801489a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801488e:	2301      	movs	r3, #1
 8014890:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8014892:	4b0a      	ldr	r3, [pc, #40]	@ (80148bc <xTaskRemoveFromEventList+0xc4>)
 8014894:	2201      	movs	r2, #1
 8014896:	601a      	str	r2, [r3, #0]
 8014898:	e001      	b.n	801489e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 801489a:	2300      	movs	r3, #0
 801489c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801489e:	697b      	ldr	r3, [r7, #20]
}
 80148a0:	4618      	mov	r0, r3
 80148a2:	3718      	adds	r7, #24
 80148a4:	46bd      	mov	sp, r7
 80148a6:	bd80      	pop	{r7, pc}
 80148a8:	240016fc 	.word	0x240016fc
 80148ac:	240016dc 	.word	0x240016dc
 80148b0:	24001204 	.word	0x24001204
 80148b4:	24001694 	.word	0x24001694
 80148b8:	24001200 	.word	0x24001200
 80148bc:	240016e8 	.word	0x240016e8

080148c0 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80148c0:	b580      	push	{r7, lr}
 80148c2:	b086      	sub	sp, #24
 80148c4:	af00      	add	r7, sp, #0
 80148c6:	6078      	str	r0, [r7, #4]
 80148c8:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80148ca:	4b2a      	ldr	r3, [pc, #168]	@ (8014974 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80148cc:	681b      	ldr	r3, [r3, #0]
 80148ce:	2b00      	cmp	r3, #0
 80148d0:	d10b      	bne.n	80148ea <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 80148d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80148d6:	f383 8811 	msr	BASEPRI, r3
 80148da:	f3bf 8f6f 	isb	sy
 80148de:	f3bf 8f4f 	dsb	sy
 80148e2:	613b      	str	r3, [r7, #16]
}
 80148e4:	bf00      	nop
 80148e6:	bf00      	nop
 80148e8:	e7fd      	b.n	80148e6 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80148ea:	683b      	ldr	r3, [r7, #0]
 80148ec:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	68db      	ldr	r3, [r3, #12]
 80148f8:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 80148fa:	697b      	ldr	r3, [r7, #20]
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	d10b      	bne.n	8014918 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 8014900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014904:	f383 8811 	msr	BASEPRI, r3
 8014908:	f3bf 8f6f 	isb	sy
 801490c:	f3bf 8f4f 	dsb	sy
 8014910:	60fb      	str	r3, [r7, #12]
}
 8014912:	bf00      	nop
 8014914:	bf00      	nop
 8014916:	e7fd      	b.n	8014914 <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 8014918:	6878      	ldr	r0, [r7, #4]
 801491a:	f7fe fa35 	bl	8012d88 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801491e:	697b      	ldr	r3, [r7, #20]
 8014920:	3304      	adds	r3, #4
 8014922:	4618      	mov	r0, r3
 8014924:	f7fe fa30 	bl	8012d88 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8014928:	697b      	ldr	r3, [r7, #20]
 801492a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801492c:	4b12      	ldr	r3, [pc, #72]	@ (8014978 <vTaskRemoveFromUnorderedEventList+0xb8>)
 801492e:	681b      	ldr	r3, [r3, #0]
 8014930:	429a      	cmp	r2, r3
 8014932:	d903      	bls.n	801493c <vTaskRemoveFromUnorderedEventList+0x7c>
 8014934:	697b      	ldr	r3, [r7, #20]
 8014936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014938:	4a0f      	ldr	r2, [pc, #60]	@ (8014978 <vTaskRemoveFromUnorderedEventList+0xb8>)
 801493a:	6013      	str	r3, [r2, #0]
 801493c:	697b      	ldr	r3, [r7, #20]
 801493e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014940:	4613      	mov	r3, r2
 8014942:	009b      	lsls	r3, r3, #2
 8014944:	4413      	add	r3, r2
 8014946:	009b      	lsls	r3, r3, #2
 8014948:	4a0c      	ldr	r2, [pc, #48]	@ (801497c <vTaskRemoveFromUnorderedEventList+0xbc>)
 801494a:	441a      	add	r2, r3
 801494c:	697b      	ldr	r3, [r7, #20]
 801494e:	3304      	adds	r3, #4
 8014950:	4619      	mov	r1, r3
 8014952:	4610      	mov	r0, r2
 8014954:	f7fe f9bb 	bl	8012cce <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014958:	697b      	ldr	r3, [r7, #20]
 801495a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801495c:	4b08      	ldr	r3, [pc, #32]	@ (8014980 <vTaskRemoveFromUnorderedEventList+0xc0>)
 801495e:	681b      	ldr	r3, [r3, #0]
 8014960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014962:	429a      	cmp	r2, r3
 8014964:	d902      	bls.n	801496c <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8014966:	4b07      	ldr	r3, [pc, #28]	@ (8014984 <vTaskRemoveFromUnorderedEventList+0xc4>)
 8014968:	2201      	movs	r2, #1
 801496a:	601a      	str	r2, [r3, #0]
	}
}
 801496c:	bf00      	nop
 801496e:	3718      	adds	r7, #24
 8014970:	46bd      	mov	sp, r7
 8014972:	bd80      	pop	{r7, pc}
 8014974:	240016fc 	.word	0x240016fc
 8014978:	240016dc 	.word	0x240016dc
 801497c:	24001204 	.word	0x24001204
 8014980:	24001200 	.word	0x24001200
 8014984:	240016e8 	.word	0x240016e8

08014988 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8014988:	b480      	push	{r7}
 801498a:	b083      	sub	sp, #12
 801498c:	af00      	add	r7, sp, #0
 801498e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014990:	4b06      	ldr	r3, [pc, #24]	@ (80149ac <vTaskInternalSetTimeOutState+0x24>)
 8014992:	681a      	ldr	r2, [r3, #0]
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8014998:	4b05      	ldr	r3, [pc, #20]	@ (80149b0 <vTaskInternalSetTimeOutState+0x28>)
 801499a:	681a      	ldr	r2, [r3, #0]
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	605a      	str	r2, [r3, #4]
}
 80149a0:	bf00      	nop
 80149a2:	370c      	adds	r7, #12
 80149a4:	46bd      	mov	sp, r7
 80149a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149aa:	4770      	bx	lr
 80149ac:	240016ec 	.word	0x240016ec
 80149b0:	240016d8 	.word	0x240016d8

080149b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80149b4:	b580      	push	{r7, lr}
 80149b6:	b088      	sub	sp, #32
 80149b8:	af00      	add	r7, sp, #0
 80149ba:	6078      	str	r0, [r7, #4]
 80149bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80149be:	687b      	ldr	r3, [r7, #4]
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	d10b      	bne.n	80149dc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80149c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80149c8:	f383 8811 	msr	BASEPRI, r3
 80149cc:	f3bf 8f6f 	isb	sy
 80149d0:	f3bf 8f4f 	dsb	sy
 80149d4:	613b      	str	r3, [r7, #16]
}
 80149d6:	bf00      	nop
 80149d8:	bf00      	nop
 80149da:	e7fd      	b.n	80149d8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80149dc:	683b      	ldr	r3, [r7, #0]
 80149de:	2b00      	cmp	r3, #0
 80149e0:	d10b      	bne.n	80149fa <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80149e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80149e6:	f383 8811 	msr	BASEPRI, r3
 80149ea:	f3bf 8f6f 	isb	sy
 80149ee:	f3bf 8f4f 	dsb	sy
 80149f2:	60fb      	str	r3, [r7, #12]
}
 80149f4:	bf00      	nop
 80149f6:	bf00      	nop
 80149f8:	e7fd      	b.n	80149f6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80149fa:	f001 fa2d 	bl	8015e58 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80149fe:	4b1d      	ldr	r3, [pc, #116]	@ (8014a74 <xTaskCheckForTimeOut+0xc0>)
 8014a00:	681b      	ldr	r3, [r3, #0]
 8014a02:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	685b      	ldr	r3, [r3, #4]
 8014a08:	69ba      	ldr	r2, [r7, #24]
 8014a0a:	1ad3      	subs	r3, r2, r3
 8014a0c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8014a0e:	683b      	ldr	r3, [r7, #0]
 8014a10:	681b      	ldr	r3, [r3, #0]
 8014a12:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8014a16:	d102      	bne.n	8014a1e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014a18:	2300      	movs	r3, #0
 8014a1a:	61fb      	str	r3, [r7, #28]
 8014a1c:	e023      	b.n	8014a66 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8014a1e:	687b      	ldr	r3, [r7, #4]
 8014a20:	681a      	ldr	r2, [r3, #0]
 8014a22:	4b15      	ldr	r3, [pc, #84]	@ (8014a78 <xTaskCheckForTimeOut+0xc4>)
 8014a24:	681b      	ldr	r3, [r3, #0]
 8014a26:	429a      	cmp	r2, r3
 8014a28:	d007      	beq.n	8014a3a <xTaskCheckForTimeOut+0x86>
 8014a2a:	687b      	ldr	r3, [r7, #4]
 8014a2c:	685b      	ldr	r3, [r3, #4]
 8014a2e:	69ba      	ldr	r2, [r7, #24]
 8014a30:	429a      	cmp	r2, r3
 8014a32:	d302      	bcc.n	8014a3a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8014a34:	2301      	movs	r3, #1
 8014a36:	61fb      	str	r3, [r7, #28]
 8014a38:	e015      	b.n	8014a66 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8014a3a:	683b      	ldr	r3, [r7, #0]
 8014a3c:	681b      	ldr	r3, [r3, #0]
 8014a3e:	697a      	ldr	r2, [r7, #20]
 8014a40:	429a      	cmp	r2, r3
 8014a42:	d20b      	bcs.n	8014a5c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8014a44:	683b      	ldr	r3, [r7, #0]
 8014a46:	681a      	ldr	r2, [r3, #0]
 8014a48:	697b      	ldr	r3, [r7, #20]
 8014a4a:	1ad2      	subs	r2, r2, r3
 8014a4c:	683b      	ldr	r3, [r7, #0]
 8014a4e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8014a50:	6878      	ldr	r0, [r7, #4]
 8014a52:	f7ff ff99 	bl	8014988 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8014a56:	2300      	movs	r3, #0
 8014a58:	61fb      	str	r3, [r7, #28]
 8014a5a:	e004      	b.n	8014a66 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8014a5c:	683b      	ldr	r3, [r7, #0]
 8014a5e:	2200      	movs	r2, #0
 8014a60:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8014a62:	2301      	movs	r3, #1
 8014a64:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8014a66:	f001 fa29 	bl	8015ebc <vPortExitCritical>

	return xReturn;
 8014a6a:	69fb      	ldr	r3, [r7, #28]
}
 8014a6c:	4618      	mov	r0, r3
 8014a6e:	3720      	adds	r7, #32
 8014a70:	46bd      	mov	sp, r7
 8014a72:	bd80      	pop	{r7, pc}
 8014a74:	240016d8 	.word	0x240016d8
 8014a78:	240016ec 	.word	0x240016ec

08014a7c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014a7c:	b480      	push	{r7}
 8014a7e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8014a80:	4b03      	ldr	r3, [pc, #12]	@ (8014a90 <vTaskMissedYield+0x14>)
 8014a82:	2201      	movs	r2, #1
 8014a84:	601a      	str	r2, [r3, #0]
}
 8014a86:	bf00      	nop
 8014a88:	46bd      	mov	sp, r7
 8014a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a8e:	4770      	bx	lr
 8014a90:	240016e8 	.word	0x240016e8

08014a94 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8014a94:	b580      	push	{r7, lr}
 8014a96:	b082      	sub	sp, #8
 8014a98:	af00      	add	r7, sp, #0
 8014a9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8014a9c:	f000 f852 	bl	8014b44 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8014aa0:	4b06      	ldr	r3, [pc, #24]	@ (8014abc <prvIdleTask+0x28>)
 8014aa2:	681b      	ldr	r3, [r3, #0]
 8014aa4:	2b01      	cmp	r3, #1
 8014aa6:	d9f9      	bls.n	8014a9c <prvIdleTask+0x8>
			{
				taskYIELD();
 8014aa8:	4b05      	ldr	r3, [pc, #20]	@ (8014ac0 <prvIdleTask+0x2c>)
 8014aaa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014aae:	601a      	str	r2, [r3, #0]
 8014ab0:	f3bf 8f4f 	dsb	sy
 8014ab4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8014ab8:	e7f0      	b.n	8014a9c <prvIdleTask+0x8>
 8014aba:	bf00      	nop
 8014abc:	24001204 	.word	0x24001204
 8014ac0:	e000ed04 	.word	0xe000ed04

08014ac4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014ac4:	b580      	push	{r7, lr}
 8014ac6:	b082      	sub	sp, #8
 8014ac8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014aca:	2300      	movs	r3, #0
 8014acc:	607b      	str	r3, [r7, #4]
 8014ace:	e00c      	b.n	8014aea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014ad0:	687a      	ldr	r2, [r7, #4]
 8014ad2:	4613      	mov	r3, r2
 8014ad4:	009b      	lsls	r3, r3, #2
 8014ad6:	4413      	add	r3, r2
 8014ad8:	009b      	lsls	r3, r3, #2
 8014ada:	4a12      	ldr	r2, [pc, #72]	@ (8014b24 <prvInitialiseTaskLists+0x60>)
 8014adc:	4413      	add	r3, r2
 8014ade:	4618      	mov	r0, r3
 8014ae0:	f7fe f8c8 	bl	8012c74 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	3301      	adds	r3, #1
 8014ae8:	607b      	str	r3, [r7, #4]
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	2b37      	cmp	r3, #55	@ 0x37
 8014aee:	d9ef      	bls.n	8014ad0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014af0:	480d      	ldr	r0, [pc, #52]	@ (8014b28 <prvInitialiseTaskLists+0x64>)
 8014af2:	f7fe f8bf 	bl	8012c74 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8014af6:	480d      	ldr	r0, [pc, #52]	@ (8014b2c <prvInitialiseTaskLists+0x68>)
 8014af8:	f7fe f8bc 	bl	8012c74 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014afc:	480c      	ldr	r0, [pc, #48]	@ (8014b30 <prvInitialiseTaskLists+0x6c>)
 8014afe:	f7fe f8b9 	bl	8012c74 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8014b02:	480c      	ldr	r0, [pc, #48]	@ (8014b34 <prvInitialiseTaskLists+0x70>)
 8014b04:	f7fe f8b6 	bl	8012c74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014b08:	480b      	ldr	r0, [pc, #44]	@ (8014b38 <prvInitialiseTaskLists+0x74>)
 8014b0a:	f7fe f8b3 	bl	8012c74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8014b0e:	4b0b      	ldr	r3, [pc, #44]	@ (8014b3c <prvInitialiseTaskLists+0x78>)
 8014b10:	4a05      	ldr	r2, [pc, #20]	@ (8014b28 <prvInitialiseTaskLists+0x64>)
 8014b12:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014b14:	4b0a      	ldr	r3, [pc, #40]	@ (8014b40 <prvInitialiseTaskLists+0x7c>)
 8014b16:	4a05      	ldr	r2, [pc, #20]	@ (8014b2c <prvInitialiseTaskLists+0x68>)
 8014b18:	601a      	str	r2, [r3, #0]
}
 8014b1a:	bf00      	nop
 8014b1c:	3708      	adds	r7, #8
 8014b1e:	46bd      	mov	sp, r7
 8014b20:	bd80      	pop	{r7, pc}
 8014b22:	bf00      	nop
 8014b24:	24001204 	.word	0x24001204
 8014b28:	24001664 	.word	0x24001664
 8014b2c:	24001678 	.word	0x24001678
 8014b30:	24001694 	.word	0x24001694
 8014b34:	240016a8 	.word	0x240016a8
 8014b38:	240016c0 	.word	0x240016c0
 8014b3c:	2400168c 	.word	0x2400168c
 8014b40:	24001690 	.word	0x24001690

08014b44 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014b44:	b580      	push	{r7, lr}
 8014b46:	b082      	sub	sp, #8
 8014b48:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014b4a:	e019      	b.n	8014b80 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014b4c:	f001 f984 	bl	8015e58 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014b50:	4b10      	ldr	r3, [pc, #64]	@ (8014b94 <prvCheckTasksWaitingTermination+0x50>)
 8014b52:	68db      	ldr	r3, [r3, #12]
 8014b54:	68db      	ldr	r3, [r3, #12]
 8014b56:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014b58:	687b      	ldr	r3, [r7, #4]
 8014b5a:	3304      	adds	r3, #4
 8014b5c:	4618      	mov	r0, r3
 8014b5e:	f7fe f913 	bl	8012d88 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8014b62:	4b0d      	ldr	r3, [pc, #52]	@ (8014b98 <prvCheckTasksWaitingTermination+0x54>)
 8014b64:	681b      	ldr	r3, [r3, #0]
 8014b66:	3b01      	subs	r3, #1
 8014b68:	4a0b      	ldr	r2, [pc, #44]	@ (8014b98 <prvCheckTasksWaitingTermination+0x54>)
 8014b6a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8014b9c <prvCheckTasksWaitingTermination+0x58>)
 8014b6e:	681b      	ldr	r3, [r3, #0]
 8014b70:	3b01      	subs	r3, #1
 8014b72:	4a0a      	ldr	r2, [pc, #40]	@ (8014b9c <prvCheckTasksWaitingTermination+0x58>)
 8014b74:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8014b76:	f001 f9a1 	bl	8015ebc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8014b7a:	6878      	ldr	r0, [r7, #4]
 8014b7c:	f000 f810 	bl	8014ba0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014b80:	4b06      	ldr	r3, [pc, #24]	@ (8014b9c <prvCheckTasksWaitingTermination+0x58>)
 8014b82:	681b      	ldr	r3, [r3, #0]
 8014b84:	2b00      	cmp	r3, #0
 8014b86:	d1e1      	bne.n	8014b4c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014b88:	bf00      	nop
 8014b8a:	bf00      	nop
 8014b8c:	3708      	adds	r7, #8
 8014b8e:	46bd      	mov	sp, r7
 8014b90:	bd80      	pop	{r7, pc}
 8014b92:	bf00      	nop
 8014b94:	240016a8 	.word	0x240016a8
 8014b98:	240016d4 	.word	0x240016d4
 8014b9c:	240016bc 	.word	0x240016bc

08014ba0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8014ba0:	b580      	push	{r7, lr}
 8014ba2:	b084      	sub	sp, #16
 8014ba4:	af00      	add	r7, sp, #0
 8014ba6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8014ba8:	687b      	ldr	r3, [r7, #4]
 8014baa:	3354      	adds	r3, #84	@ 0x54
 8014bac:	4618      	mov	r0, r3
 8014bae:	f002 f81d 	bl	8016bec <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8014bb8:	2b00      	cmp	r3, #0
 8014bba:	d108      	bne.n	8014bce <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014bc0:	4618      	mov	r0, r3
 8014bc2:	f001 fb39 	bl	8016238 <vPortFree>
				vPortFree( pxTCB );
 8014bc6:	6878      	ldr	r0, [r7, #4]
 8014bc8:	f001 fb36 	bl	8016238 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8014bcc:	e019      	b.n	8014c02 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8014bd4:	2b01      	cmp	r3, #1
 8014bd6:	d103      	bne.n	8014be0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8014bd8:	6878      	ldr	r0, [r7, #4]
 8014bda:	f001 fb2d 	bl	8016238 <vPortFree>
	}
 8014bde:	e010      	b.n	8014c02 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8014be6:	2b02      	cmp	r3, #2
 8014be8:	d00b      	beq.n	8014c02 <prvDeleteTCB+0x62>
	__asm volatile
 8014bea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014bee:	f383 8811 	msr	BASEPRI, r3
 8014bf2:	f3bf 8f6f 	isb	sy
 8014bf6:	f3bf 8f4f 	dsb	sy
 8014bfa:	60fb      	str	r3, [r7, #12]
}
 8014bfc:	bf00      	nop
 8014bfe:	bf00      	nop
 8014c00:	e7fd      	b.n	8014bfe <prvDeleteTCB+0x5e>
	}
 8014c02:	bf00      	nop
 8014c04:	3710      	adds	r7, #16
 8014c06:	46bd      	mov	sp, r7
 8014c08:	bd80      	pop	{r7, pc}
	...

08014c0c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014c0c:	b480      	push	{r7}
 8014c0e:	b083      	sub	sp, #12
 8014c10:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014c12:	4b0c      	ldr	r3, [pc, #48]	@ (8014c44 <prvResetNextTaskUnblockTime+0x38>)
 8014c14:	681b      	ldr	r3, [r3, #0]
 8014c16:	681b      	ldr	r3, [r3, #0]
 8014c18:	2b00      	cmp	r3, #0
 8014c1a:	d104      	bne.n	8014c26 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8014c1c:	4b0a      	ldr	r3, [pc, #40]	@ (8014c48 <prvResetNextTaskUnblockTime+0x3c>)
 8014c1e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014c22:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8014c24:	e008      	b.n	8014c38 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014c26:	4b07      	ldr	r3, [pc, #28]	@ (8014c44 <prvResetNextTaskUnblockTime+0x38>)
 8014c28:	681b      	ldr	r3, [r3, #0]
 8014c2a:	68db      	ldr	r3, [r3, #12]
 8014c2c:	68db      	ldr	r3, [r3, #12]
 8014c2e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	685b      	ldr	r3, [r3, #4]
 8014c34:	4a04      	ldr	r2, [pc, #16]	@ (8014c48 <prvResetNextTaskUnblockTime+0x3c>)
 8014c36:	6013      	str	r3, [r2, #0]
}
 8014c38:	bf00      	nop
 8014c3a:	370c      	adds	r7, #12
 8014c3c:	46bd      	mov	sp, r7
 8014c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c42:	4770      	bx	lr
 8014c44:	2400168c 	.word	0x2400168c
 8014c48:	240016f4 	.word	0x240016f4

08014c4c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8014c4c:	b480      	push	{r7}
 8014c4e:	b083      	sub	sp, #12
 8014c50:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8014c52:	4b05      	ldr	r3, [pc, #20]	@ (8014c68 <xTaskGetCurrentTaskHandle+0x1c>)
 8014c54:	681b      	ldr	r3, [r3, #0]
 8014c56:	607b      	str	r3, [r7, #4]

		return xReturn;
 8014c58:	687b      	ldr	r3, [r7, #4]
	}
 8014c5a:	4618      	mov	r0, r3
 8014c5c:	370c      	adds	r7, #12
 8014c5e:	46bd      	mov	sp, r7
 8014c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c64:	4770      	bx	lr
 8014c66:	bf00      	nop
 8014c68:	24001200 	.word	0x24001200

08014c6c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8014c6c:	b480      	push	{r7}
 8014c6e:	b083      	sub	sp, #12
 8014c70:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8014c72:	4b0b      	ldr	r3, [pc, #44]	@ (8014ca0 <xTaskGetSchedulerState+0x34>)
 8014c74:	681b      	ldr	r3, [r3, #0]
 8014c76:	2b00      	cmp	r3, #0
 8014c78:	d102      	bne.n	8014c80 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8014c7a:	2301      	movs	r3, #1
 8014c7c:	607b      	str	r3, [r7, #4]
 8014c7e:	e008      	b.n	8014c92 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014c80:	4b08      	ldr	r3, [pc, #32]	@ (8014ca4 <xTaskGetSchedulerState+0x38>)
 8014c82:	681b      	ldr	r3, [r3, #0]
 8014c84:	2b00      	cmp	r3, #0
 8014c86:	d102      	bne.n	8014c8e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8014c88:	2302      	movs	r3, #2
 8014c8a:	607b      	str	r3, [r7, #4]
 8014c8c:	e001      	b.n	8014c92 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8014c8e:	2300      	movs	r3, #0
 8014c90:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8014c92:	687b      	ldr	r3, [r7, #4]
	}
 8014c94:	4618      	mov	r0, r3
 8014c96:	370c      	adds	r7, #12
 8014c98:	46bd      	mov	sp, r7
 8014c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c9e:	4770      	bx	lr
 8014ca0:	240016e0 	.word	0x240016e0
 8014ca4:	240016fc 	.word	0x240016fc

08014ca8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8014ca8:	b580      	push	{r7, lr}
 8014caa:	b084      	sub	sp, #16
 8014cac:	af00      	add	r7, sp, #0
 8014cae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8014cb4:	2300      	movs	r3, #0
 8014cb6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	d051      	beq.n	8014d62 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8014cbe:	68bb      	ldr	r3, [r7, #8]
 8014cc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014cc2:	4b2a      	ldr	r3, [pc, #168]	@ (8014d6c <xTaskPriorityInherit+0xc4>)
 8014cc4:	681b      	ldr	r3, [r3, #0]
 8014cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014cc8:	429a      	cmp	r2, r3
 8014cca:	d241      	bcs.n	8014d50 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014ccc:	68bb      	ldr	r3, [r7, #8]
 8014cce:	699b      	ldr	r3, [r3, #24]
 8014cd0:	2b00      	cmp	r3, #0
 8014cd2:	db06      	blt.n	8014ce2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014cd4:	4b25      	ldr	r3, [pc, #148]	@ (8014d6c <xTaskPriorityInherit+0xc4>)
 8014cd6:	681b      	ldr	r3, [r3, #0]
 8014cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014cda:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8014cde:	68bb      	ldr	r3, [r7, #8]
 8014ce0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8014ce2:	68bb      	ldr	r3, [r7, #8]
 8014ce4:	6959      	ldr	r1, [r3, #20]
 8014ce6:	68bb      	ldr	r3, [r7, #8]
 8014ce8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014cea:	4613      	mov	r3, r2
 8014cec:	009b      	lsls	r3, r3, #2
 8014cee:	4413      	add	r3, r2
 8014cf0:	009b      	lsls	r3, r3, #2
 8014cf2:	4a1f      	ldr	r2, [pc, #124]	@ (8014d70 <xTaskPriorityInherit+0xc8>)
 8014cf4:	4413      	add	r3, r2
 8014cf6:	4299      	cmp	r1, r3
 8014cf8:	d122      	bne.n	8014d40 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014cfa:	68bb      	ldr	r3, [r7, #8]
 8014cfc:	3304      	adds	r3, #4
 8014cfe:	4618      	mov	r0, r3
 8014d00:	f7fe f842 	bl	8012d88 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014d04:	4b19      	ldr	r3, [pc, #100]	@ (8014d6c <xTaskPriorityInherit+0xc4>)
 8014d06:	681b      	ldr	r3, [r3, #0]
 8014d08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014d0a:	68bb      	ldr	r3, [r7, #8]
 8014d0c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8014d0e:	68bb      	ldr	r3, [r7, #8]
 8014d10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014d12:	4b18      	ldr	r3, [pc, #96]	@ (8014d74 <xTaskPriorityInherit+0xcc>)
 8014d14:	681b      	ldr	r3, [r3, #0]
 8014d16:	429a      	cmp	r2, r3
 8014d18:	d903      	bls.n	8014d22 <xTaskPriorityInherit+0x7a>
 8014d1a:	68bb      	ldr	r3, [r7, #8]
 8014d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014d1e:	4a15      	ldr	r2, [pc, #84]	@ (8014d74 <xTaskPriorityInherit+0xcc>)
 8014d20:	6013      	str	r3, [r2, #0]
 8014d22:	68bb      	ldr	r3, [r7, #8]
 8014d24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014d26:	4613      	mov	r3, r2
 8014d28:	009b      	lsls	r3, r3, #2
 8014d2a:	4413      	add	r3, r2
 8014d2c:	009b      	lsls	r3, r3, #2
 8014d2e:	4a10      	ldr	r2, [pc, #64]	@ (8014d70 <xTaskPriorityInherit+0xc8>)
 8014d30:	441a      	add	r2, r3
 8014d32:	68bb      	ldr	r3, [r7, #8]
 8014d34:	3304      	adds	r3, #4
 8014d36:	4619      	mov	r1, r3
 8014d38:	4610      	mov	r0, r2
 8014d3a:	f7fd ffc8 	bl	8012cce <vListInsertEnd>
 8014d3e:	e004      	b.n	8014d4a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014d40:	4b0a      	ldr	r3, [pc, #40]	@ (8014d6c <xTaskPriorityInherit+0xc4>)
 8014d42:	681b      	ldr	r3, [r3, #0]
 8014d44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014d46:	68bb      	ldr	r3, [r7, #8]
 8014d48:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8014d4a:	2301      	movs	r3, #1
 8014d4c:	60fb      	str	r3, [r7, #12]
 8014d4e:	e008      	b.n	8014d62 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8014d50:	68bb      	ldr	r3, [r7, #8]
 8014d52:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8014d54:	4b05      	ldr	r3, [pc, #20]	@ (8014d6c <xTaskPriorityInherit+0xc4>)
 8014d56:	681b      	ldr	r3, [r3, #0]
 8014d58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014d5a:	429a      	cmp	r2, r3
 8014d5c:	d201      	bcs.n	8014d62 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8014d5e:	2301      	movs	r3, #1
 8014d60:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014d62:	68fb      	ldr	r3, [r7, #12]
	}
 8014d64:	4618      	mov	r0, r3
 8014d66:	3710      	adds	r7, #16
 8014d68:	46bd      	mov	sp, r7
 8014d6a:	bd80      	pop	{r7, pc}
 8014d6c:	24001200 	.word	0x24001200
 8014d70:	24001204 	.word	0x24001204
 8014d74:	240016dc 	.word	0x240016dc

08014d78 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8014d78:	b580      	push	{r7, lr}
 8014d7a:	b086      	sub	sp, #24
 8014d7c:	af00      	add	r7, sp, #0
 8014d7e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8014d84:	2300      	movs	r3, #0
 8014d86:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	2b00      	cmp	r3, #0
 8014d8c:	d058      	beq.n	8014e40 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8014d8e:	4b2f      	ldr	r3, [pc, #188]	@ (8014e4c <xTaskPriorityDisinherit+0xd4>)
 8014d90:	681b      	ldr	r3, [r3, #0]
 8014d92:	693a      	ldr	r2, [r7, #16]
 8014d94:	429a      	cmp	r2, r3
 8014d96:	d00b      	beq.n	8014db0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8014d98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014d9c:	f383 8811 	msr	BASEPRI, r3
 8014da0:	f3bf 8f6f 	isb	sy
 8014da4:	f3bf 8f4f 	dsb	sy
 8014da8:	60fb      	str	r3, [r7, #12]
}
 8014daa:	bf00      	nop
 8014dac:	bf00      	nop
 8014dae:	e7fd      	b.n	8014dac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8014db0:	693b      	ldr	r3, [r7, #16]
 8014db2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014db4:	2b00      	cmp	r3, #0
 8014db6:	d10b      	bne.n	8014dd0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8014db8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014dbc:	f383 8811 	msr	BASEPRI, r3
 8014dc0:	f3bf 8f6f 	isb	sy
 8014dc4:	f3bf 8f4f 	dsb	sy
 8014dc8:	60bb      	str	r3, [r7, #8]
}
 8014dca:	bf00      	nop
 8014dcc:	bf00      	nop
 8014dce:	e7fd      	b.n	8014dcc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8014dd0:	693b      	ldr	r3, [r7, #16]
 8014dd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014dd4:	1e5a      	subs	r2, r3, #1
 8014dd6:	693b      	ldr	r3, [r7, #16]
 8014dd8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8014dda:	693b      	ldr	r3, [r7, #16]
 8014ddc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014dde:	693b      	ldr	r3, [r7, #16]
 8014de0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014de2:	429a      	cmp	r2, r3
 8014de4:	d02c      	beq.n	8014e40 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8014de6:	693b      	ldr	r3, [r7, #16]
 8014de8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014dea:	2b00      	cmp	r3, #0
 8014dec:	d128      	bne.n	8014e40 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014dee:	693b      	ldr	r3, [r7, #16]
 8014df0:	3304      	adds	r3, #4
 8014df2:	4618      	mov	r0, r3
 8014df4:	f7fd ffc8 	bl	8012d88 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8014df8:	693b      	ldr	r3, [r7, #16]
 8014dfa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8014dfc:	693b      	ldr	r3, [r7, #16]
 8014dfe:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014e00:	693b      	ldr	r3, [r7, #16]
 8014e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014e04:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8014e08:	693b      	ldr	r3, [r7, #16]
 8014e0a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8014e0c:	693b      	ldr	r3, [r7, #16]
 8014e0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014e10:	4b0f      	ldr	r3, [pc, #60]	@ (8014e50 <xTaskPriorityDisinherit+0xd8>)
 8014e12:	681b      	ldr	r3, [r3, #0]
 8014e14:	429a      	cmp	r2, r3
 8014e16:	d903      	bls.n	8014e20 <xTaskPriorityDisinherit+0xa8>
 8014e18:	693b      	ldr	r3, [r7, #16]
 8014e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014e1c:	4a0c      	ldr	r2, [pc, #48]	@ (8014e50 <xTaskPriorityDisinherit+0xd8>)
 8014e1e:	6013      	str	r3, [r2, #0]
 8014e20:	693b      	ldr	r3, [r7, #16]
 8014e22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014e24:	4613      	mov	r3, r2
 8014e26:	009b      	lsls	r3, r3, #2
 8014e28:	4413      	add	r3, r2
 8014e2a:	009b      	lsls	r3, r3, #2
 8014e2c:	4a09      	ldr	r2, [pc, #36]	@ (8014e54 <xTaskPriorityDisinherit+0xdc>)
 8014e2e:	441a      	add	r2, r3
 8014e30:	693b      	ldr	r3, [r7, #16]
 8014e32:	3304      	adds	r3, #4
 8014e34:	4619      	mov	r1, r3
 8014e36:	4610      	mov	r0, r2
 8014e38:	f7fd ff49 	bl	8012cce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8014e3c:	2301      	movs	r3, #1
 8014e3e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014e40:	697b      	ldr	r3, [r7, #20]
	}
 8014e42:	4618      	mov	r0, r3
 8014e44:	3718      	adds	r7, #24
 8014e46:	46bd      	mov	sp, r7
 8014e48:	bd80      	pop	{r7, pc}
 8014e4a:	bf00      	nop
 8014e4c:	24001200 	.word	0x24001200
 8014e50:	240016dc 	.word	0x240016dc
 8014e54:	24001204 	.word	0x24001204

08014e58 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8014e58:	b580      	push	{r7, lr}
 8014e5a:	b088      	sub	sp, #32
 8014e5c:	af00      	add	r7, sp, #0
 8014e5e:	6078      	str	r0, [r7, #4]
 8014e60:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8014e66:	2301      	movs	r3, #1
 8014e68:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	2b00      	cmp	r3, #0
 8014e6e:	d06c      	beq.n	8014f4a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8014e70:	69bb      	ldr	r3, [r7, #24]
 8014e72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	d10b      	bne.n	8014e90 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8014e78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014e7c:	f383 8811 	msr	BASEPRI, r3
 8014e80:	f3bf 8f6f 	isb	sy
 8014e84:	f3bf 8f4f 	dsb	sy
 8014e88:	60fb      	str	r3, [r7, #12]
}
 8014e8a:	bf00      	nop
 8014e8c:	bf00      	nop
 8014e8e:	e7fd      	b.n	8014e8c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8014e90:	69bb      	ldr	r3, [r7, #24]
 8014e92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014e94:	683a      	ldr	r2, [r7, #0]
 8014e96:	429a      	cmp	r2, r3
 8014e98:	d902      	bls.n	8014ea0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8014e9a:	683b      	ldr	r3, [r7, #0]
 8014e9c:	61fb      	str	r3, [r7, #28]
 8014e9e:	e002      	b.n	8014ea6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8014ea0:	69bb      	ldr	r3, [r7, #24]
 8014ea2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014ea4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8014ea6:	69bb      	ldr	r3, [r7, #24]
 8014ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014eaa:	69fa      	ldr	r2, [r7, #28]
 8014eac:	429a      	cmp	r2, r3
 8014eae:	d04c      	beq.n	8014f4a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8014eb0:	69bb      	ldr	r3, [r7, #24]
 8014eb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014eb4:	697a      	ldr	r2, [r7, #20]
 8014eb6:	429a      	cmp	r2, r3
 8014eb8:	d147      	bne.n	8014f4a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8014eba:	4b26      	ldr	r3, [pc, #152]	@ (8014f54 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8014ebc:	681b      	ldr	r3, [r3, #0]
 8014ebe:	69ba      	ldr	r2, [r7, #24]
 8014ec0:	429a      	cmp	r2, r3
 8014ec2:	d10b      	bne.n	8014edc <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8014ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014ec8:	f383 8811 	msr	BASEPRI, r3
 8014ecc:	f3bf 8f6f 	isb	sy
 8014ed0:	f3bf 8f4f 	dsb	sy
 8014ed4:	60bb      	str	r3, [r7, #8]
}
 8014ed6:	bf00      	nop
 8014ed8:	bf00      	nop
 8014eda:	e7fd      	b.n	8014ed8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8014edc:	69bb      	ldr	r3, [r7, #24]
 8014ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014ee0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8014ee2:	69bb      	ldr	r3, [r7, #24]
 8014ee4:	69fa      	ldr	r2, [r7, #28]
 8014ee6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014ee8:	69bb      	ldr	r3, [r7, #24]
 8014eea:	699b      	ldr	r3, [r3, #24]
 8014eec:	2b00      	cmp	r3, #0
 8014eee:	db04      	blt.n	8014efa <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014ef0:	69fb      	ldr	r3, [r7, #28]
 8014ef2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8014ef6:	69bb      	ldr	r3, [r7, #24]
 8014ef8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8014efa:	69bb      	ldr	r3, [r7, #24]
 8014efc:	6959      	ldr	r1, [r3, #20]
 8014efe:	693a      	ldr	r2, [r7, #16]
 8014f00:	4613      	mov	r3, r2
 8014f02:	009b      	lsls	r3, r3, #2
 8014f04:	4413      	add	r3, r2
 8014f06:	009b      	lsls	r3, r3, #2
 8014f08:	4a13      	ldr	r2, [pc, #76]	@ (8014f58 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8014f0a:	4413      	add	r3, r2
 8014f0c:	4299      	cmp	r1, r3
 8014f0e:	d11c      	bne.n	8014f4a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014f10:	69bb      	ldr	r3, [r7, #24]
 8014f12:	3304      	adds	r3, #4
 8014f14:	4618      	mov	r0, r3
 8014f16:	f7fd ff37 	bl	8012d88 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8014f1a:	69bb      	ldr	r3, [r7, #24]
 8014f1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014f1e:	4b0f      	ldr	r3, [pc, #60]	@ (8014f5c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8014f20:	681b      	ldr	r3, [r3, #0]
 8014f22:	429a      	cmp	r2, r3
 8014f24:	d903      	bls.n	8014f2e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8014f26:	69bb      	ldr	r3, [r7, #24]
 8014f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014f2a:	4a0c      	ldr	r2, [pc, #48]	@ (8014f5c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8014f2c:	6013      	str	r3, [r2, #0]
 8014f2e:	69bb      	ldr	r3, [r7, #24]
 8014f30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014f32:	4613      	mov	r3, r2
 8014f34:	009b      	lsls	r3, r3, #2
 8014f36:	4413      	add	r3, r2
 8014f38:	009b      	lsls	r3, r3, #2
 8014f3a:	4a07      	ldr	r2, [pc, #28]	@ (8014f58 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8014f3c:	441a      	add	r2, r3
 8014f3e:	69bb      	ldr	r3, [r7, #24]
 8014f40:	3304      	adds	r3, #4
 8014f42:	4619      	mov	r1, r3
 8014f44:	4610      	mov	r0, r2
 8014f46:	f7fd fec2 	bl	8012cce <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014f4a:	bf00      	nop
 8014f4c:	3720      	adds	r7, #32
 8014f4e:	46bd      	mov	sp, r7
 8014f50:	bd80      	pop	{r7, pc}
 8014f52:	bf00      	nop
 8014f54:	24001200 	.word	0x24001200
 8014f58:	24001204 	.word	0x24001204
 8014f5c:	240016dc 	.word	0x240016dc

08014f60 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8014f60:	b480      	push	{r7}
 8014f62:	b083      	sub	sp, #12
 8014f64:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8014f66:	4b09      	ldr	r3, [pc, #36]	@ (8014f8c <uxTaskResetEventItemValue+0x2c>)
 8014f68:	681b      	ldr	r3, [r3, #0]
 8014f6a:	699b      	ldr	r3, [r3, #24]
 8014f6c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014f6e:	4b07      	ldr	r3, [pc, #28]	@ (8014f8c <uxTaskResetEventItemValue+0x2c>)
 8014f70:	681b      	ldr	r3, [r3, #0]
 8014f72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014f74:	4b05      	ldr	r3, [pc, #20]	@ (8014f8c <uxTaskResetEventItemValue+0x2c>)
 8014f76:	681b      	ldr	r3, [r3, #0]
 8014f78:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 8014f7c:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8014f7e:	687b      	ldr	r3, [r7, #4]
}
 8014f80:	4618      	mov	r0, r3
 8014f82:	370c      	adds	r7, #12
 8014f84:	46bd      	mov	sp, r7
 8014f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f8a:	4770      	bx	lr
 8014f8c:	24001200 	.word	0x24001200

08014f90 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8014f90:	b480      	push	{r7}
 8014f92:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8014f94:	4b07      	ldr	r3, [pc, #28]	@ (8014fb4 <pvTaskIncrementMutexHeldCount+0x24>)
 8014f96:	681b      	ldr	r3, [r3, #0]
 8014f98:	2b00      	cmp	r3, #0
 8014f9a:	d004      	beq.n	8014fa6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8014f9c:	4b05      	ldr	r3, [pc, #20]	@ (8014fb4 <pvTaskIncrementMutexHeldCount+0x24>)
 8014f9e:	681b      	ldr	r3, [r3, #0]
 8014fa0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014fa2:	3201      	adds	r2, #1
 8014fa4:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8014fa6:	4b03      	ldr	r3, [pc, #12]	@ (8014fb4 <pvTaskIncrementMutexHeldCount+0x24>)
 8014fa8:	681b      	ldr	r3, [r3, #0]
	}
 8014faa:	4618      	mov	r0, r3
 8014fac:	46bd      	mov	sp, r7
 8014fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fb2:	4770      	bx	lr
 8014fb4:	24001200 	.word	0x24001200

08014fb8 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8014fb8:	b580      	push	{r7, lr}
 8014fba:	b084      	sub	sp, #16
 8014fbc:	af00      	add	r7, sp, #0
 8014fbe:	6078      	str	r0, [r7, #4]
 8014fc0:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8014fc2:	f000 ff49 	bl	8015e58 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8014fc6:	4b20      	ldr	r3, [pc, #128]	@ (8015048 <ulTaskNotifyTake+0x90>)
 8014fc8:	681b      	ldr	r3, [r3, #0]
 8014fca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8014fce:	2b00      	cmp	r3, #0
 8014fd0:	d113      	bne.n	8014ffa <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8014fd2:	4b1d      	ldr	r3, [pc, #116]	@ (8015048 <ulTaskNotifyTake+0x90>)
 8014fd4:	681b      	ldr	r3, [r3, #0]
 8014fd6:	2201      	movs	r2, #1
 8014fd8:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 8014fdc:	683b      	ldr	r3, [r7, #0]
 8014fde:	2b00      	cmp	r3, #0
 8014fe0:	d00b      	beq.n	8014ffa <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014fe2:	2101      	movs	r1, #1
 8014fe4:	6838      	ldr	r0, [r7, #0]
 8014fe6:	f000 f9db 	bl	80153a0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8014fea:	4b18      	ldr	r3, [pc, #96]	@ (801504c <ulTaskNotifyTake+0x94>)
 8014fec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014ff0:	601a      	str	r2, [r3, #0]
 8014ff2:	f3bf 8f4f 	dsb	sy
 8014ff6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8014ffa:	f000 ff5f 	bl	8015ebc <vPortExitCritical>

		taskENTER_CRITICAL();
 8014ffe:	f000 ff2b 	bl	8015e58 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8015002:	4b11      	ldr	r3, [pc, #68]	@ (8015048 <ulTaskNotifyTake+0x90>)
 8015004:	681b      	ldr	r3, [r3, #0]
 8015006:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801500a:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 801500c:	68fb      	ldr	r3, [r7, #12]
 801500e:	2b00      	cmp	r3, #0
 8015010:	d00e      	beq.n	8015030 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	2b00      	cmp	r3, #0
 8015016:	d005      	beq.n	8015024 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8015018:	4b0b      	ldr	r3, [pc, #44]	@ (8015048 <ulTaskNotifyTake+0x90>)
 801501a:	681b      	ldr	r3, [r3, #0]
 801501c:	2200      	movs	r2, #0
 801501e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 8015022:	e005      	b.n	8015030 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8015024:	4b08      	ldr	r3, [pc, #32]	@ (8015048 <ulTaskNotifyTake+0x90>)
 8015026:	681b      	ldr	r3, [r3, #0]
 8015028:	68fa      	ldr	r2, [r7, #12]
 801502a:	3a01      	subs	r2, #1
 801502c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8015030:	4b05      	ldr	r3, [pc, #20]	@ (8015048 <ulTaskNotifyTake+0x90>)
 8015032:	681b      	ldr	r3, [r3, #0]
 8015034:	2200      	movs	r2, #0
 8015036:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 801503a:	f000 ff3f 	bl	8015ebc <vPortExitCritical>

		return ulReturn;
 801503e:	68fb      	ldr	r3, [r7, #12]
	}
 8015040:	4618      	mov	r0, r3
 8015042:	3710      	adds	r7, #16
 8015044:	46bd      	mov	sp, r7
 8015046:	bd80      	pop	{r7, pc}
 8015048:	24001200 	.word	0x24001200
 801504c:	e000ed04 	.word	0xe000ed04

08015050 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8015050:	b580      	push	{r7, lr}
 8015052:	b08a      	sub	sp, #40	@ 0x28
 8015054:	af00      	add	r7, sp, #0
 8015056:	60f8      	str	r0, [r7, #12]
 8015058:	60b9      	str	r1, [r7, #8]
 801505a:	603b      	str	r3, [r7, #0]
 801505c:	4613      	mov	r3, r2
 801505e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8015060:	2301      	movs	r3, #1
 8015062:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8015064:	68fb      	ldr	r3, [r7, #12]
 8015066:	2b00      	cmp	r3, #0
 8015068:	d10b      	bne.n	8015082 <xTaskGenericNotify+0x32>
	__asm volatile
 801506a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801506e:	f383 8811 	msr	BASEPRI, r3
 8015072:	f3bf 8f6f 	isb	sy
 8015076:	f3bf 8f4f 	dsb	sy
 801507a:	61bb      	str	r3, [r7, #24]
}
 801507c:	bf00      	nop
 801507e:	bf00      	nop
 8015080:	e7fd      	b.n	801507e <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8015082:	68fb      	ldr	r3, [r7, #12]
 8015084:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8015086:	f000 fee7 	bl	8015e58 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 801508a:	683b      	ldr	r3, [r7, #0]
 801508c:	2b00      	cmp	r3, #0
 801508e:	d004      	beq.n	801509a <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8015090:	6a3b      	ldr	r3, [r7, #32]
 8015092:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8015096:	683b      	ldr	r3, [r7, #0]
 8015098:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 801509a:	6a3b      	ldr	r3, [r7, #32]
 801509c:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80150a0:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80150a2:	6a3b      	ldr	r3, [r7, #32]
 80150a4:	2202      	movs	r2, #2
 80150a6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 80150aa:	79fb      	ldrb	r3, [r7, #7]
 80150ac:	2b04      	cmp	r3, #4
 80150ae:	d82e      	bhi.n	801510e <xTaskGenericNotify+0xbe>
 80150b0:	a201      	add	r2, pc, #4	@ (adr r2, 80150b8 <xTaskGenericNotify+0x68>)
 80150b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80150b6:	bf00      	nop
 80150b8:	08015133 	.word	0x08015133
 80150bc:	080150cd 	.word	0x080150cd
 80150c0:	080150df 	.word	0x080150df
 80150c4:	080150ef 	.word	0x080150ef
 80150c8:	080150f9 	.word	0x080150f9
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80150cc:	6a3b      	ldr	r3, [r7, #32]
 80150ce:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80150d2:	68bb      	ldr	r3, [r7, #8]
 80150d4:	431a      	orrs	r2, r3
 80150d6:	6a3b      	ldr	r3, [r7, #32]
 80150d8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80150dc:	e02c      	b.n	8015138 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80150de:	6a3b      	ldr	r3, [r7, #32]
 80150e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80150e4:	1c5a      	adds	r2, r3, #1
 80150e6:	6a3b      	ldr	r3, [r7, #32]
 80150e8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80150ec:	e024      	b.n	8015138 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80150ee:	6a3b      	ldr	r3, [r7, #32]
 80150f0:	68ba      	ldr	r2, [r7, #8]
 80150f2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80150f6:	e01f      	b.n	8015138 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80150f8:	7ffb      	ldrb	r3, [r7, #31]
 80150fa:	2b02      	cmp	r3, #2
 80150fc:	d004      	beq.n	8015108 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80150fe:	6a3b      	ldr	r3, [r7, #32]
 8015100:	68ba      	ldr	r2, [r7, #8]
 8015102:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8015106:	e017      	b.n	8015138 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 8015108:	2300      	movs	r3, #0
 801510a:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 801510c:	e014      	b.n	8015138 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 801510e:	6a3b      	ldr	r3, [r7, #32]
 8015110:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8015114:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8015118:	d00d      	beq.n	8015136 <xTaskGenericNotify+0xe6>
	__asm volatile
 801511a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801511e:	f383 8811 	msr	BASEPRI, r3
 8015122:	f3bf 8f6f 	isb	sy
 8015126:	f3bf 8f4f 	dsb	sy
 801512a:	617b      	str	r3, [r7, #20]
}
 801512c:	bf00      	nop
 801512e:	bf00      	nop
 8015130:	e7fd      	b.n	801512e <xTaskGenericNotify+0xde>
					break;
 8015132:	bf00      	nop
 8015134:	e000      	b.n	8015138 <xTaskGenericNotify+0xe8>

					break;
 8015136:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8015138:	7ffb      	ldrb	r3, [r7, #31]
 801513a:	2b01      	cmp	r3, #1
 801513c:	d13b      	bne.n	80151b6 <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801513e:	6a3b      	ldr	r3, [r7, #32]
 8015140:	3304      	adds	r3, #4
 8015142:	4618      	mov	r0, r3
 8015144:	f7fd fe20 	bl	8012d88 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8015148:	6a3b      	ldr	r3, [r7, #32]
 801514a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801514c:	4b1d      	ldr	r3, [pc, #116]	@ (80151c4 <xTaskGenericNotify+0x174>)
 801514e:	681b      	ldr	r3, [r3, #0]
 8015150:	429a      	cmp	r2, r3
 8015152:	d903      	bls.n	801515c <xTaskGenericNotify+0x10c>
 8015154:	6a3b      	ldr	r3, [r7, #32]
 8015156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015158:	4a1a      	ldr	r2, [pc, #104]	@ (80151c4 <xTaskGenericNotify+0x174>)
 801515a:	6013      	str	r3, [r2, #0]
 801515c:	6a3b      	ldr	r3, [r7, #32]
 801515e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015160:	4613      	mov	r3, r2
 8015162:	009b      	lsls	r3, r3, #2
 8015164:	4413      	add	r3, r2
 8015166:	009b      	lsls	r3, r3, #2
 8015168:	4a17      	ldr	r2, [pc, #92]	@ (80151c8 <xTaskGenericNotify+0x178>)
 801516a:	441a      	add	r2, r3
 801516c:	6a3b      	ldr	r3, [r7, #32]
 801516e:	3304      	adds	r3, #4
 8015170:	4619      	mov	r1, r3
 8015172:	4610      	mov	r0, r2
 8015174:	f7fd fdab 	bl	8012cce <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8015178:	6a3b      	ldr	r3, [r7, #32]
 801517a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801517c:	2b00      	cmp	r3, #0
 801517e:	d00b      	beq.n	8015198 <xTaskGenericNotify+0x148>
	__asm volatile
 8015180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015184:	f383 8811 	msr	BASEPRI, r3
 8015188:	f3bf 8f6f 	isb	sy
 801518c:	f3bf 8f4f 	dsb	sy
 8015190:	613b      	str	r3, [r7, #16]
}
 8015192:	bf00      	nop
 8015194:	bf00      	nop
 8015196:	e7fd      	b.n	8015194 <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8015198:	6a3b      	ldr	r3, [r7, #32]
 801519a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801519c:	4b0b      	ldr	r3, [pc, #44]	@ (80151cc <xTaskGenericNotify+0x17c>)
 801519e:	681b      	ldr	r3, [r3, #0]
 80151a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80151a2:	429a      	cmp	r2, r3
 80151a4:	d907      	bls.n	80151b6 <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80151a6:	4b0a      	ldr	r3, [pc, #40]	@ (80151d0 <xTaskGenericNotify+0x180>)
 80151a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80151ac:	601a      	str	r2, [r3, #0]
 80151ae:	f3bf 8f4f 	dsb	sy
 80151b2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80151b6:	f000 fe81 	bl	8015ebc <vPortExitCritical>

		return xReturn;
 80151ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 80151bc:	4618      	mov	r0, r3
 80151be:	3728      	adds	r7, #40	@ 0x28
 80151c0:	46bd      	mov	sp, r7
 80151c2:	bd80      	pop	{r7, pc}
 80151c4:	240016dc 	.word	0x240016dc
 80151c8:	24001204 	.word	0x24001204
 80151cc:	24001200 	.word	0x24001200
 80151d0:	e000ed04 	.word	0xe000ed04

080151d4 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80151d4:	b580      	push	{r7, lr}
 80151d6:	b08e      	sub	sp, #56	@ 0x38
 80151d8:	af00      	add	r7, sp, #0
 80151da:	60f8      	str	r0, [r7, #12]
 80151dc:	60b9      	str	r1, [r7, #8]
 80151de:	603b      	str	r3, [r7, #0]
 80151e0:	4613      	mov	r3, r2
 80151e2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80151e4:	2301      	movs	r3, #1
 80151e6:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80151e8:	68fb      	ldr	r3, [r7, #12]
 80151ea:	2b00      	cmp	r3, #0
 80151ec:	d10b      	bne.n	8015206 <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 80151ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80151f2:	f383 8811 	msr	BASEPRI, r3
 80151f6:	f3bf 8f6f 	isb	sy
 80151fa:	f3bf 8f4f 	dsb	sy
 80151fe:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8015200:	bf00      	nop
 8015202:	bf00      	nop
 8015204:	e7fd      	b.n	8015202 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015206:	f000 ff07 	bl	8016018 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 801520a:	68fb      	ldr	r3, [r7, #12]
 801520c:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 801520e:	f3ef 8211 	mrs	r2, BASEPRI
 8015212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015216:	f383 8811 	msr	BASEPRI, r3
 801521a:	f3bf 8f6f 	isb	sy
 801521e:	f3bf 8f4f 	dsb	sy
 8015222:	623a      	str	r2, [r7, #32]
 8015224:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8015226:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015228:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 801522a:	683b      	ldr	r3, [r7, #0]
 801522c:	2b00      	cmp	r3, #0
 801522e:	d004      	beq.n	801523a <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8015230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015232:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8015236:	683b      	ldr	r3, [r7, #0]
 8015238:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 801523a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801523c:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8015240:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8015244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015246:	2202      	movs	r2, #2
 8015248:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 801524c:	79fb      	ldrb	r3, [r7, #7]
 801524e:	2b04      	cmp	r3, #4
 8015250:	d82e      	bhi.n	80152b0 <xTaskGenericNotifyFromISR+0xdc>
 8015252:	a201      	add	r2, pc, #4	@ (adr r2, 8015258 <xTaskGenericNotifyFromISR+0x84>)
 8015254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015258:	080152d5 	.word	0x080152d5
 801525c:	0801526d 	.word	0x0801526d
 8015260:	0801527f 	.word	0x0801527f
 8015264:	0801528f 	.word	0x0801528f
 8015268:	08015299 	.word	0x08015299
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 801526c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801526e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8015272:	68bb      	ldr	r3, [r7, #8]
 8015274:	431a      	orrs	r2, r3
 8015276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015278:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 801527c:	e02d      	b.n	80152da <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 801527e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015280:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8015284:	1c5a      	adds	r2, r3, #1
 8015286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015288:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 801528c:	e025      	b.n	80152da <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801528e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015290:	68ba      	ldr	r2, [r7, #8]
 8015292:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8015296:	e020      	b.n	80152da <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8015298:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801529c:	2b02      	cmp	r3, #2
 801529e:	d004      	beq.n	80152aa <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80152a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80152a2:	68ba      	ldr	r2, [r7, #8]
 80152a4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80152a8:	e017      	b.n	80152da <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 80152aa:	2300      	movs	r3, #0
 80152ac:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 80152ae:	e014      	b.n	80152da <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80152b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80152b2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80152b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80152ba:	d00d      	beq.n	80152d8 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 80152bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80152c0:	f383 8811 	msr	BASEPRI, r3
 80152c4:	f3bf 8f6f 	isb	sy
 80152c8:	f3bf 8f4f 	dsb	sy
 80152cc:	61bb      	str	r3, [r7, #24]
}
 80152ce:	bf00      	nop
 80152d0:	bf00      	nop
 80152d2:	e7fd      	b.n	80152d0 <xTaskGenericNotifyFromISR+0xfc>
					break;
 80152d4:	bf00      	nop
 80152d6:	e000      	b.n	80152da <xTaskGenericNotifyFromISR+0x106>
					break;
 80152d8:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80152da:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80152de:	2b01      	cmp	r3, #1
 80152e0:	d147      	bne.n	8015372 <xTaskGenericNotifyFromISR+0x19e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80152e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80152e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80152e6:	2b00      	cmp	r3, #0
 80152e8:	d00b      	beq.n	8015302 <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 80152ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80152ee:	f383 8811 	msr	BASEPRI, r3
 80152f2:	f3bf 8f6f 	isb	sy
 80152f6:	f3bf 8f4f 	dsb	sy
 80152fa:	617b      	str	r3, [r7, #20]
}
 80152fc:	bf00      	nop
 80152fe:	bf00      	nop
 8015300:	e7fd      	b.n	80152fe <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015302:	4b21      	ldr	r3, [pc, #132]	@ (8015388 <xTaskGenericNotifyFromISR+0x1b4>)
 8015304:	681b      	ldr	r3, [r3, #0]
 8015306:	2b00      	cmp	r3, #0
 8015308:	d11d      	bne.n	8015346 <xTaskGenericNotifyFromISR+0x172>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801530a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801530c:	3304      	adds	r3, #4
 801530e:	4618      	mov	r0, r3
 8015310:	f7fd fd3a 	bl	8012d88 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8015314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015316:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015318:	4b1c      	ldr	r3, [pc, #112]	@ (801538c <xTaskGenericNotifyFromISR+0x1b8>)
 801531a:	681b      	ldr	r3, [r3, #0]
 801531c:	429a      	cmp	r2, r3
 801531e:	d903      	bls.n	8015328 <xTaskGenericNotifyFromISR+0x154>
 8015320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015324:	4a19      	ldr	r2, [pc, #100]	@ (801538c <xTaskGenericNotifyFromISR+0x1b8>)
 8015326:	6013      	str	r3, [r2, #0]
 8015328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801532a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801532c:	4613      	mov	r3, r2
 801532e:	009b      	lsls	r3, r3, #2
 8015330:	4413      	add	r3, r2
 8015332:	009b      	lsls	r3, r3, #2
 8015334:	4a16      	ldr	r2, [pc, #88]	@ (8015390 <xTaskGenericNotifyFromISR+0x1bc>)
 8015336:	441a      	add	r2, r3
 8015338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801533a:	3304      	adds	r3, #4
 801533c:	4619      	mov	r1, r3
 801533e:	4610      	mov	r0, r2
 8015340:	f7fd fcc5 	bl	8012cce <vListInsertEnd>
 8015344:	e005      	b.n	8015352 <xTaskGenericNotifyFromISR+0x17e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8015346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015348:	3318      	adds	r3, #24
 801534a:	4619      	mov	r1, r3
 801534c:	4811      	ldr	r0, [pc, #68]	@ (8015394 <xTaskGenericNotifyFromISR+0x1c0>)
 801534e:	f7fd fcbe 	bl	8012cce <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8015352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015354:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015356:	4b10      	ldr	r3, [pc, #64]	@ (8015398 <xTaskGenericNotifyFromISR+0x1c4>)
 8015358:	681b      	ldr	r3, [r3, #0]
 801535a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801535c:	429a      	cmp	r2, r3
 801535e:	d908      	bls.n	8015372 <xTaskGenericNotifyFromISR+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8015360:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015362:	2b00      	cmp	r3, #0
 8015364:	d002      	beq.n	801536c <xTaskGenericNotifyFromISR+0x198>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8015366:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015368:	2201      	movs	r2, #1
 801536a:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 801536c:	4b0b      	ldr	r3, [pc, #44]	@ (801539c <xTaskGenericNotifyFromISR+0x1c8>)
 801536e:	2201      	movs	r2, #1
 8015370:	601a      	str	r2, [r3, #0]
 8015372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015374:	613b      	str	r3, [r7, #16]
	__asm volatile
 8015376:	693b      	ldr	r3, [r7, #16]
 8015378:	f383 8811 	msr	BASEPRI, r3
}
 801537c:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 801537e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8015380:	4618      	mov	r0, r3
 8015382:	3738      	adds	r7, #56	@ 0x38
 8015384:	46bd      	mov	sp, r7
 8015386:	bd80      	pop	{r7, pc}
 8015388:	240016fc 	.word	0x240016fc
 801538c:	240016dc 	.word	0x240016dc
 8015390:	24001204 	.word	0x24001204
 8015394:	24001694 	.word	0x24001694
 8015398:	24001200 	.word	0x24001200
 801539c:	240016e8 	.word	0x240016e8

080153a0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80153a0:	b580      	push	{r7, lr}
 80153a2:	b084      	sub	sp, #16
 80153a4:	af00      	add	r7, sp, #0
 80153a6:	6078      	str	r0, [r7, #4]
 80153a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80153aa:	4b21      	ldr	r3, [pc, #132]	@ (8015430 <prvAddCurrentTaskToDelayedList+0x90>)
 80153ac:	681b      	ldr	r3, [r3, #0]
 80153ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80153b0:	4b20      	ldr	r3, [pc, #128]	@ (8015434 <prvAddCurrentTaskToDelayedList+0x94>)
 80153b2:	681b      	ldr	r3, [r3, #0]
 80153b4:	3304      	adds	r3, #4
 80153b6:	4618      	mov	r0, r3
 80153b8:	f7fd fce6 	bl	8012d88 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80153c2:	d10a      	bne.n	80153da <prvAddCurrentTaskToDelayedList+0x3a>
 80153c4:	683b      	ldr	r3, [r7, #0]
 80153c6:	2b00      	cmp	r3, #0
 80153c8:	d007      	beq.n	80153da <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80153ca:	4b1a      	ldr	r3, [pc, #104]	@ (8015434 <prvAddCurrentTaskToDelayedList+0x94>)
 80153cc:	681b      	ldr	r3, [r3, #0]
 80153ce:	3304      	adds	r3, #4
 80153d0:	4619      	mov	r1, r3
 80153d2:	4819      	ldr	r0, [pc, #100]	@ (8015438 <prvAddCurrentTaskToDelayedList+0x98>)
 80153d4:	f7fd fc7b 	bl	8012cce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80153d8:	e026      	b.n	8015428 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80153da:	68fa      	ldr	r2, [r7, #12]
 80153dc:	687b      	ldr	r3, [r7, #4]
 80153de:	4413      	add	r3, r2
 80153e0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80153e2:	4b14      	ldr	r3, [pc, #80]	@ (8015434 <prvAddCurrentTaskToDelayedList+0x94>)
 80153e4:	681b      	ldr	r3, [r3, #0]
 80153e6:	68ba      	ldr	r2, [r7, #8]
 80153e8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80153ea:	68ba      	ldr	r2, [r7, #8]
 80153ec:	68fb      	ldr	r3, [r7, #12]
 80153ee:	429a      	cmp	r2, r3
 80153f0:	d209      	bcs.n	8015406 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80153f2:	4b12      	ldr	r3, [pc, #72]	@ (801543c <prvAddCurrentTaskToDelayedList+0x9c>)
 80153f4:	681a      	ldr	r2, [r3, #0]
 80153f6:	4b0f      	ldr	r3, [pc, #60]	@ (8015434 <prvAddCurrentTaskToDelayedList+0x94>)
 80153f8:	681b      	ldr	r3, [r3, #0]
 80153fa:	3304      	adds	r3, #4
 80153fc:	4619      	mov	r1, r3
 80153fe:	4610      	mov	r0, r2
 8015400:	f7fd fc89 	bl	8012d16 <vListInsert>
}
 8015404:	e010      	b.n	8015428 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015406:	4b0e      	ldr	r3, [pc, #56]	@ (8015440 <prvAddCurrentTaskToDelayedList+0xa0>)
 8015408:	681a      	ldr	r2, [r3, #0]
 801540a:	4b0a      	ldr	r3, [pc, #40]	@ (8015434 <prvAddCurrentTaskToDelayedList+0x94>)
 801540c:	681b      	ldr	r3, [r3, #0]
 801540e:	3304      	adds	r3, #4
 8015410:	4619      	mov	r1, r3
 8015412:	4610      	mov	r0, r2
 8015414:	f7fd fc7f 	bl	8012d16 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8015418:	4b0a      	ldr	r3, [pc, #40]	@ (8015444 <prvAddCurrentTaskToDelayedList+0xa4>)
 801541a:	681b      	ldr	r3, [r3, #0]
 801541c:	68ba      	ldr	r2, [r7, #8]
 801541e:	429a      	cmp	r2, r3
 8015420:	d202      	bcs.n	8015428 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8015422:	4a08      	ldr	r2, [pc, #32]	@ (8015444 <prvAddCurrentTaskToDelayedList+0xa4>)
 8015424:	68bb      	ldr	r3, [r7, #8]
 8015426:	6013      	str	r3, [r2, #0]
}
 8015428:	bf00      	nop
 801542a:	3710      	adds	r7, #16
 801542c:	46bd      	mov	sp, r7
 801542e:	bd80      	pop	{r7, pc}
 8015430:	240016d8 	.word	0x240016d8
 8015434:	24001200 	.word	0x24001200
 8015438:	240016c0 	.word	0x240016c0
 801543c:	24001690 	.word	0x24001690
 8015440:	2400168c 	.word	0x2400168c
 8015444:	240016f4 	.word	0x240016f4

08015448 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8015448:	b580      	push	{r7, lr}
 801544a:	b08a      	sub	sp, #40	@ 0x28
 801544c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801544e:	2300      	movs	r3, #0
 8015450:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8015452:	f000 fb71 	bl	8015b38 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8015456:	4b1d      	ldr	r3, [pc, #116]	@ (80154cc <xTimerCreateTimerTask+0x84>)
 8015458:	681b      	ldr	r3, [r3, #0]
 801545a:	2b00      	cmp	r3, #0
 801545c:	d021      	beq.n	80154a2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801545e:	2300      	movs	r3, #0
 8015460:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8015462:	2300      	movs	r3, #0
 8015464:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8015466:	1d3a      	adds	r2, r7, #4
 8015468:	f107 0108 	add.w	r1, r7, #8
 801546c:	f107 030c 	add.w	r3, r7, #12
 8015470:	4618      	mov	r0, r3
 8015472:	f7fd fa29 	bl	80128c8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8015476:	6879      	ldr	r1, [r7, #4]
 8015478:	68bb      	ldr	r3, [r7, #8]
 801547a:	68fa      	ldr	r2, [r7, #12]
 801547c:	9202      	str	r2, [sp, #8]
 801547e:	9301      	str	r3, [sp, #4]
 8015480:	2302      	movs	r3, #2
 8015482:	9300      	str	r3, [sp, #0]
 8015484:	2300      	movs	r3, #0
 8015486:	460a      	mov	r2, r1
 8015488:	4911      	ldr	r1, [pc, #68]	@ (80154d0 <xTimerCreateTimerTask+0x88>)
 801548a:	4812      	ldr	r0, [pc, #72]	@ (80154d4 <xTimerCreateTimerTask+0x8c>)
 801548c:	f7fe fcd2 	bl	8013e34 <xTaskCreateStatic>
 8015490:	4603      	mov	r3, r0
 8015492:	4a11      	ldr	r2, [pc, #68]	@ (80154d8 <xTimerCreateTimerTask+0x90>)
 8015494:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8015496:	4b10      	ldr	r3, [pc, #64]	@ (80154d8 <xTimerCreateTimerTask+0x90>)
 8015498:	681b      	ldr	r3, [r3, #0]
 801549a:	2b00      	cmp	r3, #0
 801549c:	d001      	beq.n	80154a2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801549e:	2301      	movs	r3, #1
 80154a0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80154a2:	697b      	ldr	r3, [r7, #20]
 80154a4:	2b00      	cmp	r3, #0
 80154a6:	d10b      	bne.n	80154c0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80154a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80154ac:	f383 8811 	msr	BASEPRI, r3
 80154b0:	f3bf 8f6f 	isb	sy
 80154b4:	f3bf 8f4f 	dsb	sy
 80154b8:	613b      	str	r3, [r7, #16]
}
 80154ba:	bf00      	nop
 80154bc:	bf00      	nop
 80154be:	e7fd      	b.n	80154bc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80154c0:	697b      	ldr	r3, [r7, #20]
}
 80154c2:	4618      	mov	r0, r3
 80154c4:	3718      	adds	r7, #24
 80154c6:	46bd      	mov	sp, r7
 80154c8:	bd80      	pop	{r7, pc}
 80154ca:	bf00      	nop
 80154cc:	24001730 	.word	0x24001730
 80154d0:	08017b94 	.word	0x08017b94
 80154d4:	080156d1 	.word	0x080156d1
 80154d8:	24001734 	.word	0x24001734

080154dc <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80154dc:	b580      	push	{r7, lr}
 80154de:	b088      	sub	sp, #32
 80154e0:	af02      	add	r7, sp, #8
 80154e2:	60f8      	str	r0, [r7, #12]
 80154e4:	60b9      	str	r1, [r7, #8]
 80154e6:	607a      	str	r2, [r7, #4]
 80154e8:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80154ea:	202c      	movs	r0, #44	@ 0x2c
 80154ec:	f000 fdd6 	bl	801609c <pvPortMalloc>
 80154f0:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80154f2:	697b      	ldr	r3, [r7, #20]
 80154f4:	2b00      	cmp	r3, #0
 80154f6:	d00d      	beq.n	8015514 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 80154f8:	697b      	ldr	r3, [r7, #20]
 80154fa:	2200      	movs	r2, #0
 80154fc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8015500:	697b      	ldr	r3, [r7, #20]
 8015502:	9301      	str	r3, [sp, #4]
 8015504:	6a3b      	ldr	r3, [r7, #32]
 8015506:	9300      	str	r3, [sp, #0]
 8015508:	683b      	ldr	r3, [r7, #0]
 801550a:	687a      	ldr	r2, [r7, #4]
 801550c:	68b9      	ldr	r1, [r7, #8]
 801550e:	68f8      	ldr	r0, [r7, #12]
 8015510:	f000 f805 	bl	801551e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8015514:	697b      	ldr	r3, [r7, #20]
	}
 8015516:	4618      	mov	r0, r3
 8015518:	3718      	adds	r7, #24
 801551a:	46bd      	mov	sp, r7
 801551c:	bd80      	pop	{r7, pc}

0801551e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 801551e:	b580      	push	{r7, lr}
 8015520:	b086      	sub	sp, #24
 8015522:	af00      	add	r7, sp, #0
 8015524:	60f8      	str	r0, [r7, #12]
 8015526:	60b9      	str	r1, [r7, #8]
 8015528:	607a      	str	r2, [r7, #4]
 801552a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 801552c:	68bb      	ldr	r3, [r7, #8]
 801552e:	2b00      	cmp	r3, #0
 8015530:	d10b      	bne.n	801554a <prvInitialiseNewTimer+0x2c>
	__asm volatile
 8015532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015536:	f383 8811 	msr	BASEPRI, r3
 801553a:	f3bf 8f6f 	isb	sy
 801553e:	f3bf 8f4f 	dsb	sy
 8015542:	617b      	str	r3, [r7, #20]
}
 8015544:	bf00      	nop
 8015546:	bf00      	nop
 8015548:	e7fd      	b.n	8015546 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 801554a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801554c:	2b00      	cmp	r3, #0
 801554e:	d01e      	beq.n	801558e <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8015550:	f000 faf2 	bl	8015b38 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8015554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015556:	68fa      	ldr	r2, [r7, #12]
 8015558:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 801555a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801555c:	68ba      	ldr	r2, [r7, #8]
 801555e:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8015560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015562:	683a      	ldr	r2, [r7, #0]
 8015564:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8015566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015568:	6a3a      	ldr	r2, [r7, #32]
 801556a:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 801556c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801556e:	3304      	adds	r3, #4
 8015570:	4618      	mov	r0, r3
 8015572:	f7fd fb9f 	bl	8012cb4 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8015576:	687b      	ldr	r3, [r7, #4]
 8015578:	2b00      	cmp	r3, #0
 801557a:	d008      	beq.n	801558e <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 801557c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801557e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015582:	f043 0304 	orr.w	r3, r3, #4
 8015586:	b2da      	uxtb	r2, r3
 8015588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801558a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 801558e:	bf00      	nop
 8015590:	3718      	adds	r7, #24
 8015592:	46bd      	mov	sp, r7
 8015594:	bd80      	pop	{r7, pc}
	...

08015598 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8015598:	b580      	push	{r7, lr}
 801559a:	b08a      	sub	sp, #40	@ 0x28
 801559c:	af00      	add	r7, sp, #0
 801559e:	60f8      	str	r0, [r7, #12]
 80155a0:	60b9      	str	r1, [r7, #8]
 80155a2:	607a      	str	r2, [r7, #4]
 80155a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80155a6:	2300      	movs	r3, #0
 80155a8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80155aa:	68fb      	ldr	r3, [r7, #12]
 80155ac:	2b00      	cmp	r3, #0
 80155ae:	d10b      	bne.n	80155c8 <xTimerGenericCommand+0x30>
	__asm volatile
 80155b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80155b4:	f383 8811 	msr	BASEPRI, r3
 80155b8:	f3bf 8f6f 	isb	sy
 80155bc:	f3bf 8f4f 	dsb	sy
 80155c0:	623b      	str	r3, [r7, #32]
}
 80155c2:	bf00      	nop
 80155c4:	bf00      	nop
 80155c6:	e7fd      	b.n	80155c4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80155c8:	4b19      	ldr	r3, [pc, #100]	@ (8015630 <xTimerGenericCommand+0x98>)
 80155ca:	681b      	ldr	r3, [r3, #0]
 80155cc:	2b00      	cmp	r3, #0
 80155ce:	d02a      	beq.n	8015626 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80155d0:	68bb      	ldr	r3, [r7, #8]
 80155d2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80155d8:	68fb      	ldr	r3, [r7, #12]
 80155da:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80155dc:	68bb      	ldr	r3, [r7, #8]
 80155de:	2b05      	cmp	r3, #5
 80155e0:	dc18      	bgt.n	8015614 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80155e2:	f7ff fb43 	bl	8014c6c <xTaskGetSchedulerState>
 80155e6:	4603      	mov	r3, r0
 80155e8:	2b02      	cmp	r3, #2
 80155ea:	d109      	bne.n	8015600 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80155ec:	4b10      	ldr	r3, [pc, #64]	@ (8015630 <xTimerGenericCommand+0x98>)
 80155ee:	6818      	ldr	r0, [r3, #0]
 80155f0:	f107 0110 	add.w	r1, r7, #16
 80155f4:	2300      	movs	r3, #0
 80155f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80155f8:	f7fd fda4 	bl	8013144 <xQueueGenericSend>
 80155fc:	6278      	str	r0, [r7, #36]	@ 0x24
 80155fe:	e012      	b.n	8015626 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8015600:	4b0b      	ldr	r3, [pc, #44]	@ (8015630 <xTimerGenericCommand+0x98>)
 8015602:	6818      	ldr	r0, [r3, #0]
 8015604:	f107 0110 	add.w	r1, r7, #16
 8015608:	2300      	movs	r3, #0
 801560a:	2200      	movs	r2, #0
 801560c:	f7fd fd9a 	bl	8013144 <xQueueGenericSend>
 8015610:	6278      	str	r0, [r7, #36]	@ 0x24
 8015612:	e008      	b.n	8015626 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8015614:	4b06      	ldr	r3, [pc, #24]	@ (8015630 <xTimerGenericCommand+0x98>)
 8015616:	6818      	ldr	r0, [r3, #0]
 8015618:	f107 0110 	add.w	r1, r7, #16
 801561c:	2300      	movs	r3, #0
 801561e:	683a      	ldr	r2, [r7, #0]
 8015620:	f7fd fe92 	bl	8013348 <xQueueGenericSendFromISR>
 8015624:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8015626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8015628:	4618      	mov	r0, r3
 801562a:	3728      	adds	r7, #40	@ 0x28
 801562c:	46bd      	mov	sp, r7
 801562e:	bd80      	pop	{r7, pc}
 8015630:	24001730 	.word	0x24001730

08015634 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8015634:	b580      	push	{r7, lr}
 8015636:	b088      	sub	sp, #32
 8015638:	af02      	add	r7, sp, #8
 801563a:	6078      	str	r0, [r7, #4]
 801563c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801563e:	4b23      	ldr	r3, [pc, #140]	@ (80156cc <prvProcessExpiredTimer+0x98>)
 8015640:	681b      	ldr	r3, [r3, #0]
 8015642:	68db      	ldr	r3, [r3, #12]
 8015644:	68db      	ldr	r3, [r3, #12]
 8015646:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015648:	697b      	ldr	r3, [r7, #20]
 801564a:	3304      	adds	r3, #4
 801564c:	4618      	mov	r0, r3
 801564e:	f7fd fb9b 	bl	8012d88 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015652:	697b      	ldr	r3, [r7, #20]
 8015654:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015658:	f003 0304 	and.w	r3, r3, #4
 801565c:	2b00      	cmp	r3, #0
 801565e:	d023      	beq.n	80156a8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8015660:	697b      	ldr	r3, [r7, #20]
 8015662:	699a      	ldr	r2, [r3, #24]
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	18d1      	adds	r1, r2, r3
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	683a      	ldr	r2, [r7, #0]
 801566c:	6978      	ldr	r0, [r7, #20]
 801566e:	f000 f8d5 	bl	801581c <prvInsertTimerInActiveList>
 8015672:	4603      	mov	r3, r0
 8015674:	2b00      	cmp	r3, #0
 8015676:	d020      	beq.n	80156ba <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015678:	2300      	movs	r3, #0
 801567a:	9300      	str	r3, [sp, #0]
 801567c:	2300      	movs	r3, #0
 801567e:	687a      	ldr	r2, [r7, #4]
 8015680:	2100      	movs	r1, #0
 8015682:	6978      	ldr	r0, [r7, #20]
 8015684:	f7ff ff88 	bl	8015598 <xTimerGenericCommand>
 8015688:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801568a:	693b      	ldr	r3, [r7, #16]
 801568c:	2b00      	cmp	r3, #0
 801568e:	d114      	bne.n	80156ba <prvProcessExpiredTimer+0x86>
	__asm volatile
 8015690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015694:	f383 8811 	msr	BASEPRI, r3
 8015698:	f3bf 8f6f 	isb	sy
 801569c:	f3bf 8f4f 	dsb	sy
 80156a0:	60fb      	str	r3, [r7, #12]
}
 80156a2:	bf00      	nop
 80156a4:	bf00      	nop
 80156a6:	e7fd      	b.n	80156a4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80156a8:	697b      	ldr	r3, [r7, #20]
 80156aa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80156ae:	f023 0301 	bic.w	r3, r3, #1
 80156b2:	b2da      	uxtb	r2, r3
 80156b4:	697b      	ldr	r3, [r7, #20]
 80156b6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80156ba:	697b      	ldr	r3, [r7, #20]
 80156bc:	6a1b      	ldr	r3, [r3, #32]
 80156be:	6978      	ldr	r0, [r7, #20]
 80156c0:	4798      	blx	r3
}
 80156c2:	bf00      	nop
 80156c4:	3718      	adds	r7, #24
 80156c6:	46bd      	mov	sp, r7
 80156c8:	bd80      	pop	{r7, pc}
 80156ca:	bf00      	nop
 80156cc:	24001728 	.word	0x24001728

080156d0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80156d0:	b580      	push	{r7, lr}
 80156d2:	b084      	sub	sp, #16
 80156d4:	af00      	add	r7, sp, #0
 80156d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80156d8:	f107 0308 	add.w	r3, r7, #8
 80156dc:	4618      	mov	r0, r3
 80156de:	f000 f859 	bl	8015794 <prvGetNextExpireTime>
 80156e2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80156e4:	68bb      	ldr	r3, [r7, #8]
 80156e6:	4619      	mov	r1, r3
 80156e8:	68f8      	ldr	r0, [r7, #12]
 80156ea:	f000 f805 	bl	80156f8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80156ee:	f000 f8d7 	bl	80158a0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80156f2:	bf00      	nop
 80156f4:	e7f0      	b.n	80156d8 <prvTimerTask+0x8>
	...

080156f8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80156f8:	b580      	push	{r7, lr}
 80156fa:	b084      	sub	sp, #16
 80156fc:	af00      	add	r7, sp, #0
 80156fe:	6078      	str	r0, [r7, #4]
 8015700:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8015702:	f7fe fdfb 	bl	80142fc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015706:	f107 0308 	add.w	r3, r7, #8
 801570a:	4618      	mov	r0, r3
 801570c:	f000 f866 	bl	80157dc <prvSampleTimeNow>
 8015710:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8015712:	68bb      	ldr	r3, [r7, #8]
 8015714:	2b00      	cmp	r3, #0
 8015716:	d130      	bne.n	801577a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8015718:	683b      	ldr	r3, [r7, #0]
 801571a:	2b00      	cmp	r3, #0
 801571c:	d10a      	bne.n	8015734 <prvProcessTimerOrBlockTask+0x3c>
 801571e:	687a      	ldr	r2, [r7, #4]
 8015720:	68fb      	ldr	r3, [r7, #12]
 8015722:	429a      	cmp	r2, r3
 8015724:	d806      	bhi.n	8015734 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8015726:	f7fe fdf7 	bl	8014318 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801572a:	68f9      	ldr	r1, [r7, #12]
 801572c:	6878      	ldr	r0, [r7, #4]
 801572e:	f7ff ff81 	bl	8015634 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8015732:	e024      	b.n	801577e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8015734:	683b      	ldr	r3, [r7, #0]
 8015736:	2b00      	cmp	r3, #0
 8015738:	d008      	beq.n	801574c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801573a:	4b13      	ldr	r3, [pc, #76]	@ (8015788 <prvProcessTimerOrBlockTask+0x90>)
 801573c:	681b      	ldr	r3, [r3, #0]
 801573e:	681b      	ldr	r3, [r3, #0]
 8015740:	2b00      	cmp	r3, #0
 8015742:	d101      	bne.n	8015748 <prvProcessTimerOrBlockTask+0x50>
 8015744:	2301      	movs	r3, #1
 8015746:	e000      	b.n	801574a <prvProcessTimerOrBlockTask+0x52>
 8015748:	2300      	movs	r3, #0
 801574a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801574c:	4b0f      	ldr	r3, [pc, #60]	@ (801578c <prvProcessTimerOrBlockTask+0x94>)
 801574e:	6818      	ldr	r0, [r3, #0]
 8015750:	687a      	ldr	r2, [r7, #4]
 8015752:	68fb      	ldr	r3, [r7, #12]
 8015754:	1ad3      	subs	r3, r2, r3
 8015756:	683a      	ldr	r2, [r7, #0]
 8015758:	4619      	mov	r1, r3
 801575a:	f7fe fb37 	bl	8013dcc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801575e:	f7fe fddb 	bl	8014318 <xTaskResumeAll>
 8015762:	4603      	mov	r3, r0
 8015764:	2b00      	cmp	r3, #0
 8015766:	d10a      	bne.n	801577e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8015768:	4b09      	ldr	r3, [pc, #36]	@ (8015790 <prvProcessTimerOrBlockTask+0x98>)
 801576a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801576e:	601a      	str	r2, [r3, #0]
 8015770:	f3bf 8f4f 	dsb	sy
 8015774:	f3bf 8f6f 	isb	sy
}
 8015778:	e001      	b.n	801577e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801577a:	f7fe fdcd 	bl	8014318 <xTaskResumeAll>
}
 801577e:	bf00      	nop
 8015780:	3710      	adds	r7, #16
 8015782:	46bd      	mov	sp, r7
 8015784:	bd80      	pop	{r7, pc}
 8015786:	bf00      	nop
 8015788:	2400172c 	.word	0x2400172c
 801578c:	24001730 	.word	0x24001730
 8015790:	e000ed04 	.word	0xe000ed04

08015794 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8015794:	b480      	push	{r7}
 8015796:	b085      	sub	sp, #20
 8015798:	af00      	add	r7, sp, #0
 801579a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801579c:	4b0e      	ldr	r3, [pc, #56]	@ (80157d8 <prvGetNextExpireTime+0x44>)
 801579e:	681b      	ldr	r3, [r3, #0]
 80157a0:	681b      	ldr	r3, [r3, #0]
 80157a2:	2b00      	cmp	r3, #0
 80157a4:	d101      	bne.n	80157aa <prvGetNextExpireTime+0x16>
 80157a6:	2201      	movs	r2, #1
 80157a8:	e000      	b.n	80157ac <prvGetNextExpireTime+0x18>
 80157aa:	2200      	movs	r2, #0
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80157b0:	687b      	ldr	r3, [r7, #4]
 80157b2:	681b      	ldr	r3, [r3, #0]
 80157b4:	2b00      	cmp	r3, #0
 80157b6:	d105      	bne.n	80157c4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80157b8:	4b07      	ldr	r3, [pc, #28]	@ (80157d8 <prvGetNextExpireTime+0x44>)
 80157ba:	681b      	ldr	r3, [r3, #0]
 80157bc:	68db      	ldr	r3, [r3, #12]
 80157be:	681b      	ldr	r3, [r3, #0]
 80157c0:	60fb      	str	r3, [r7, #12]
 80157c2:	e001      	b.n	80157c8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80157c4:	2300      	movs	r3, #0
 80157c6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80157c8:	68fb      	ldr	r3, [r7, #12]
}
 80157ca:	4618      	mov	r0, r3
 80157cc:	3714      	adds	r7, #20
 80157ce:	46bd      	mov	sp, r7
 80157d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157d4:	4770      	bx	lr
 80157d6:	bf00      	nop
 80157d8:	24001728 	.word	0x24001728

080157dc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80157dc:	b580      	push	{r7, lr}
 80157de:	b084      	sub	sp, #16
 80157e0:	af00      	add	r7, sp, #0
 80157e2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80157e4:	f7fe fe36 	bl	8014454 <xTaskGetTickCount>
 80157e8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80157ea:	4b0b      	ldr	r3, [pc, #44]	@ (8015818 <prvSampleTimeNow+0x3c>)
 80157ec:	681b      	ldr	r3, [r3, #0]
 80157ee:	68fa      	ldr	r2, [r7, #12]
 80157f0:	429a      	cmp	r2, r3
 80157f2:	d205      	bcs.n	8015800 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80157f4:	f000 f93a 	bl	8015a6c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80157f8:	687b      	ldr	r3, [r7, #4]
 80157fa:	2201      	movs	r2, #1
 80157fc:	601a      	str	r2, [r3, #0]
 80157fe:	e002      	b.n	8015806 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8015800:	687b      	ldr	r3, [r7, #4]
 8015802:	2200      	movs	r2, #0
 8015804:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8015806:	4a04      	ldr	r2, [pc, #16]	@ (8015818 <prvSampleTimeNow+0x3c>)
 8015808:	68fb      	ldr	r3, [r7, #12]
 801580a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801580c:	68fb      	ldr	r3, [r7, #12]
}
 801580e:	4618      	mov	r0, r3
 8015810:	3710      	adds	r7, #16
 8015812:	46bd      	mov	sp, r7
 8015814:	bd80      	pop	{r7, pc}
 8015816:	bf00      	nop
 8015818:	24001738 	.word	0x24001738

0801581c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801581c:	b580      	push	{r7, lr}
 801581e:	b086      	sub	sp, #24
 8015820:	af00      	add	r7, sp, #0
 8015822:	60f8      	str	r0, [r7, #12]
 8015824:	60b9      	str	r1, [r7, #8]
 8015826:	607a      	str	r2, [r7, #4]
 8015828:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801582a:	2300      	movs	r3, #0
 801582c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801582e:	68fb      	ldr	r3, [r7, #12]
 8015830:	68ba      	ldr	r2, [r7, #8]
 8015832:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015834:	68fb      	ldr	r3, [r7, #12]
 8015836:	68fa      	ldr	r2, [r7, #12]
 8015838:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801583a:	68ba      	ldr	r2, [r7, #8]
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	429a      	cmp	r2, r3
 8015840:	d812      	bhi.n	8015868 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015842:	687a      	ldr	r2, [r7, #4]
 8015844:	683b      	ldr	r3, [r7, #0]
 8015846:	1ad2      	subs	r2, r2, r3
 8015848:	68fb      	ldr	r3, [r7, #12]
 801584a:	699b      	ldr	r3, [r3, #24]
 801584c:	429a      	cmp	r2, r3
 801584e:	d302      	bcc.n	8015856 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8015850:	2301      	movs	r3, #1
 8015852:	617b      	str	r3, [r7, #20]
 8015854:	e01b      	b.n	801588e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8015856:	4b10      	ldr	r3, [pc, #64]	@ (8015898 <prvInsertTimerInActiveList+0x7c>)
 8015858:	681a      	ldr	r2, [r3, #0]
 801585a:	68fb      	ldr	r3, [r7, #12]
 801585c:	3304      	adds	r3, #4
 801585e:	4619      	mov	r1, r3
 8015860:	4610      	mov	r0, r2
 8015862:	f7fd fa58 	bl	8012d16 <vListInsert>
 8015866:	e012      	b.n	801588e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8015868:	687a      	ldr	r2, [r7, #4]
 801586a:	683b      	ldr	r3, [r7, #0]
 801586c:	429a      	cmp	r2, r3
 801586e:	d206      	bcs.n	801587e <prvInsertTimerInActiveList+0x62>
 8015870:	68ba      	ldr	r2, [r7, #8]
 8015872:	683b      	ldr	r3, [r7, #0]
 8015874:	429a      	cmp	r2, r3
 8015876:	d302      	bcc.n	801587e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8015878:	2301      	movs	r3, #1
 801587a:	617b      	str	r3, [r7, #20]
 801587c:	e007      	b.n	801588e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801587e:	4b07      	ldr	r3, [pc, #28]	@ (801589c <prvInsertTimerInActiveList+0x80>)
 8015880:	681a      	ldr	r2, [r3, #0]
 8015882:	68fb      	ldr	r3, [r7, #12]
 8015884:	3304      	adds	r3, #4
 8015886:	4619      	mov	r1, r3
 8015888:	4610      	mov	r0, r2
 801588a:	f7fd fa44 	bl	8012d16 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801588e:	697b      	ldr	r3, [r7, #20]
}
 8015890:	4618      	mov	r0, r3
 8015892:	3718      	adds	r7, #24
 8015894:	46bd      	mov	sp, r7
 8015896:	bd80      	pop	{r7, pc}
 8015898:	2400172c 	.word	0x2400172c
 801589c:	24001728 	.word	0x24001728

080158a0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80158a0:	b580      	push	{r7, lr}
 80158a2:	b08e      	sub	sp, #56	@ 0x38
 80158a4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80158a6:	e0ce      	b.n	8015a46 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80158a8:	687b      	ldr	r3, [r7, #4]
 80158aa:	2b00      	cmp	r3, #0
 80158ac:	da19      	bge.n	80158e2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80158ae:	1d3b      	adds	r3, r7, #4
 80158b0:	3304      	adds	r3, #4
 80158b2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80158b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80158b6:	2b00      	cmp	r3, #0
 80158b8:	d10b      	bne.n	80158d2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80158ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80158be:	f383 8811 	msr	BASEPRI, r3
 80158c2:	f3bf 8f6f 	isb	sy
 80158c6:	f3bf 8f4f 	dsb	sy
 80158ca:	61fb      	str	r3, [r7, #28]
}
 80158cc:	bf00      	nop
 80158ce:	bf00      	nop
 80158d0:	e7fd      	b.n	80158ce <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80158d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80158d4:	681b      	ldr	r3, [r3, #0]
 80158d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80158d8:	6850      	ldr	r0, [r2, #4]
 80158da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80158dc:	6892      	ldr	r2, [r2, #8]
 80158de:	4611      	mov	r1, r2
 80158e0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80158e2:	687b      	ldr	r3, [r7, #4]
 80158e4:	2b00      	cmp	r3, #0
 80158e6:	f2c0 80ae 	blt.w	8015a46 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80158ea:	68fb      	ldr	r3, [r7, #12]
 80158ec:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80158ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80158f0:	695b      	ldr	r3, [r3, #20]
 80158f2:	2b00      	cmp	r3, #0
 80158f4:	d004      	beq.n	8015900 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80158f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80158f8:	3304      	adds	r3, #4
 80158fa:	4618      	mov	r0, r3
 80158fc:	f7fd fa44 	bl	8012d88 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015900:	463b      	mov	r3, r7
 8015902:	4618      	mov	r0, r3
 8015904:	f7ff ff6a 	bl	80157dc <prvSampleTimeNow>
 8015908:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 801590a:	687b      	ldr	r3, [r7, #4]
 801590c:	2b09      	cmp	r3, #9
 801590e:	f200 8097 	bhi.w	8015a40 <prvProcessReceivedCommands+0x1a0>
 8015912:	a201      	add	r2, pc, #4	@ (adr r2, 8015918 <prvProcessReceivedCommands+0x78>)
 8015914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015918:	08015941 	.word	0x08015941
 801591c:	08015941 	.word	0x08015941
 8015920:	08015941 	.word	0x08015941
 8015924:	080159b7 	.word	0x080159b7
 8015928:	080159cb 	.word	0x080159cb
 801592c:	08015a17 	.word	0x08015a17
 8015930:	08015941 	.word	0x08015941
 8015934:	08015941 	.word	0x08015941
 8015938:	080159b7 	.word	0x080159b7
 801593c:	080159cb 	.word	0x080159cb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015942:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015946:	f043 0301 	orr.w	r3, r3, #1
 801594a:	b2da      	uxtb	r2, r3
 801594c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801594e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8015952:	68ba      	ldr	r2, [r7, #8]
 8015954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015956:	699b      	ldr	r3, [r3, #24]
 8015958:	18d1      	adds	r1, r2, r3
 801595a:	68bb      	ldr	r3, [r7, #8]
 801595c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801595e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015960:	f7ff ff5c 	bl	801581c <prvInsertTimerInActiveList>
 8015964:	4603      	mov	r3, r0
 8015966:	2b00      	cmp	r3, #0
 8015968:	d06c      	beq.n	8015a44 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801596a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801596c:	6a1b      	ldr	r3, [r3, #32]
 801596e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015970:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015974:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015978:	f003 0304 	and.w	r3, r3, #4
 801597c:	2b00      	cmp	r3, #0
 801597e:	d061      	beq.n	8015a44 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8015980:	68ba      	ldr	r2, [r7, #8]
 8015982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015984:	699b      	ldr	r3, [r3, #24]
 8015986:	441a      	add	r2, r3
 8015988:	2300      	movs	r3, #0
 801598a:	9300      	str	r3, [sp, #0]
 801598c:	2300      	movs	r3, #0
 801598e:	2100      	movs	r1, #0
 8015990:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015992:	f7ff fe01 	bl	8015598 <xTimerGenericCommand>
 8015996:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8015998:	6a3b      	ldr	r3, [r7, #32]
 801599a:	2b00      	cmp	r3, #0
 801599c:	d152      	bne.n	8015a44 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 801599e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80159a2:	f383 8811 	msr	BASEPRI, r3
 80159a6:	f3bf 8f6f 	isb	sy
 80159aa:	f3bf 8f4f 	dsb	sy
 80159ae:	61bb      	str	r3, [r7, #24]
}
 80159b0:	bf00      	nop
 80159b2:	bf00      	nop
 80159b4:	e7fd      	b.n	80159b2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80159b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80159b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80159bc:	f023 0301 	bic.w	r3, r3, #1
 80159c0:	b2da      	uxtb	r2, r3
 80159c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80159c4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80159c8:	e03d      	b.n	8015a46 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80159ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80159cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80159d0:	f043 0301 	orr.w	r3, r3, #1
 80159d4:	b2da      	uxtb	r2, r3
 80159d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80159d8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80159dc:	68ba      	ldr	r2, [r7, #8]
 80159de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80159e0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80159e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80159e4:	699b      	ldr	r3, [r3, #24]
 80159e6:	2b00      	cmp	r3, #0
 80159e8:	d10b      	bne.n	8015a02 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80159ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80159ee:	f383 8811 	msr	BASEPRI, r3
 80159f2:	f3bf 8f6f 	isb	sy
 80159f6:	f3bf 8f4f 	dsb	sy
 80159fa:	617b      	str	r3, [r7, #20]
}
 80159fc:	bf00      	nop
 80159fe:	bf00      	nop
 8015a00:	e7fd      	b.n	80159fe <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8015a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a04:	699a      	ldr	r2, [r3, #24]
 8015a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a08:	18d1      	adds	r1, r2, r3
 8015a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015a0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015a10:	f7ff ff04 	bl	801581c <prvInsertTimerInActiveList>
					break;
 8015a14:	e017      	b.n	8015a46 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8015a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a18:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015a1c:	f003 0302 	and.w	r3, r3, #2
 8015a20:	2b00      	cmp	r3, #0
 8015a22:	d103      	bne.n	8015a2c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8015a24:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015a26:	f000 fc07 	bl	8016238 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8015a2a:	e00c      	b.n	8015a46 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a2e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015a32:	f023 0301 	bic.w	r3, r3, #1
 8015a36:	b2da      	uxtb	r2, r3
 8015a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a3a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8015a3e:	e002      	b.n	8015a46 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8015a40:	bf00      	nop
 8015a42:	e000      	b.n	8015a46 <prvProcessReceivedCommands+0x1a6>
					break;
 8015a44:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8015a46:	4b08      	ldr	r3, [pc, #32]	@ (8015a68 <prvProcessReceivedCommands+0x1c8>)
 8015a48:	681b      	ldr	r3, [r3, #0]
 8015a4a:	1d39      	adds	r1, r7, #4
 8015a4c:	2200      	movs	r2, #0
 8015a4e:	4618      	mov	r0, r3
 8015a50:	f7fd fda8 	bl	80135a4 <xQueueReceive>
 8015a54:	4603      	mov	r3, r0
 8015a56:	2b00      	cmp	r3, #0
 8015a58:	f47f af26 	bne.w	80158a8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8015a5c:	bf00      	nop
 8015a5e:	bf00      	nop
 8015a60:	3730      	adds	r7, #48	@ 0x30
 8015a62:	46bd      	mov	sp, r7
 8015a64:	bd80      	pop	{r7, pc}
 8015a66:	bf00      	nop
 8015a68:	24001730 	.word	0x24001730

08015a6c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8015a6c:	b580      	push	{r7, lr}
 8015a6e:	b088      	sub	sp, #32
 8015a70:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8015a72:	e049      	b.n	8015b08 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015a74:	4b2e      	ldr	r3, [pc, #184]	@ (8015b30 <prvSwitchTimerLists+0xc4>)
 8015a76:	681b      	ldr	r3, [r3, #0]
 8015a78:	68db      	ldr	r3, [r3, #12]
 8015a7a:	681b      	ldr	r3, [r3, #0]
 8015a7c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015a7e:	4b2c      	ldr	r3, [pc, #176]	@ (8015b30 <prvSwitchTimerLists+0xc4>)
 8015a80:	681b      	ldr	r3, [r3, #0]
 8015a82:	68db      	ldr	r3, [r3, #12]
 8015a84:	68db      	ldr	r3, [r3, #12]
 8015a86:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015a88:	68fb      	ldr	r3, [r7, #12]
 8015a8a:	3304      	adds	r3, #4
 8015a8c:	4618      	mov	r0, r3
 8015a8e:	f7fd f97b 	bl	8012d88 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015a92:	68fb      	ldr	r3, [r7, #12]
 8015a94:	6a1b      	ldr	r3, [r3, #32]
 8015a96:	68f8      	ldr	r0, [r7, #12]
 8015a98:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015a9a:	68fb      	ldr	r3, [r7, #12]
 8015a9c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015aa0:	f003 0304 	and.w	r3, r3, #4
 8015aa4:	2b00      	cmp	r3, #0
 8015aa6:	d02f      	beq.n	8015b08 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8015aa8:	68fb      	ldr	r3, [r7, #12]
 8015aaa:	699b      	ldr	r3, [r3, #24]
 8015aac:	693a      	ldr	r2, [r7, #16]
 8015aae:	4413      	add	r3, r2
 8015ab0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8015ab2:	68ba      	ldr	r2, [r7, #8]
 8015ab4:	693b      	ldr	r3, [r7, #16]
 8015ab6:	429a      	cmp	r2, r3
 8015ab8:	d90e      	bls.n	8015ad8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8015aba:	68fb      	ldr	r3, [r7, #12]
 8015abc:	68ba      	ldr	r2, [r7, #8]
 8015abe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015ac0:	68fb      	ldr	r3, [r7, #12]
 8015ac2:	68fa      	ldr	r2, [r7, #12]
 8015ac4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8015ac6:	4b1a      	ldr	r3, [pc, #104]	@ (8015b30 <prvSwitchTimerLists+0xc4>)
 8015ac8:	681a      	ldr	r2, [r3, #0]
 8015aca:	68fb      	ldr	r3, [r7, #12]
 8015acc:	3304      	adds	r3, #4
 8015ace:	4619      	mov	r1, r3
 8015ad0:	4610      	mov	r0, r2
 8015ad2:	f7fd f920 	bl	8012d16 <vListInsert>
 8015ad6:	e017      	b.n	8015b08 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015ad8:	2300      	movs	r3, #0
 8015ada:	9300      	str	r3, [sp, #0]
 8015adc:	2300      	movs	r3, #0
 8015ade:	693a      	ldr	r2, [r7, #16]
 8015ae0:	2100      	movs	r1, #0
 8015ae2:	68f8      	ldr	r0, [r7, #12]
 8015ae4:	f7ff fd58 	bl	8015598 <xTimerGenericCommand>
 8015ae8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8015aea:	687b      	ldr	r3, [r7, #4]
 8015aec:	2b00      	cmp	r3, #0
 8015aee:	d10b      	bne.n	8015b08 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8015af0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015af4:	f383 8811 	msr	BASEPRI, r3
 8015af8:	f3bf 8f6f 	isb	sy
 8015afc:	f3bf 8f4f 	dsb	sy
 8015b00:	603b      	str	r3, [r7, #0]
}
 8015b02:	bf00      	nop
 8015b04:	bf00      	nop
 8015b06:	e7fd      	b.n	8015b04 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8015b08:	4b09      	ldr	r3, [pc, #36]	@ (8015b30 <prvSwitchTimerLists+0xc4>)
 8015b0a:	681b      	ldr	r3, [r3, #0]
 8015b0c:	681b      	ldr	r3, [r3, #0]
 8015b0e:	2b00      	cmp	r3, #0
 8015b10:	d1b0      	bne.n	8015a74 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8015b12:	4b07      	ldr	r3, [pc, #28]	@ (8015b30 <prvSwitchTimerLists+0xc4>)
 8015b14:	681b      	ldr	r3, [r3, #0]
 8015b16:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8015b18:	4b06      	ldr	r3, [pc, #24]	@ (8015b34 <prvSwitchTimerLists+0xc8>)
 8015b1a:	681b      	ldr	r3, [r3, #0]
 8015b1c:	4a04      	ldr	r2, [pc, #16]	@ (8015b30 <prvSwitchTimerLists+0xc4>)
 8015b1e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8015b20:	4a04      	ldr	r2, [pc, #16]	@ (8015b34 <prvSwitchTimerLists+0xc8>)
 8015b22:	697b      	ldr	r3, [r7, #20]
 8015b24:	6013      	str	r3, [r2, #0]
}
 8015b26:	bf00      	nop
 8015b28:	3718      	adds	r7, #24
 8015b2a:	46bd      	mov	sp, r7
 8015b2c:	bd80      	pop	{r7, pc}
 8015b2e:	bf00      	nop
 8015b30:	24001728 	.word	0x24001728
 8015b34:	2400172c 	.word	0x2400172c

08015b38 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8015b38:	b580      	push	{r7, lr}
 8015b3a:	b082      	sub	sp, #8
 8015b3c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8015b3e:	f000 f98b 	bl	8015e58 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8015b42:	4b15      	ldr	r3, [pc, #84]	@ (8015b98 <prvCheckForValidListAndQueue+0x60>)
 8015b44:	681b      	ldr	r3, [r3, #0]
 8015b46:	2b00      	cmp	r3, #0
 8015b48:	d120      	bne.n	8015b8c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8015b4a:	4814      	ldr	r0, [pc, #80]	@ (8015b9c <prvCheckForValidListAndQueue+0x64>)
 8015b4c:	f7fd f892 	bl	8012c74 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8015b50:	4813      	ldr	r0, [pc, #76]	@ (8015ba0 <prvCheckForValidListAndQueue+0x68>)
 8015b52:	f7fd f88f 	bl	8012c74 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8015b56:	4b13      	ldr	r3, [pc, #76]	@ (8015ba4 <prvCheckForValidListAndQueue+0x6c>)
 8015b58:	4a10      	ldr	r2, [pc, #64]	@ (8015b9c <prvCheckForValidListAndQueue+0x64>)
 8015b5a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8015b5c:	4b12      	ldr	r3, [pc, #72]	@ (8015ba8 <prvCheckForValidListAndQueue+0x70>)
 8015b5e:	4a10      	ldr	r2, [pc, #64]	@ (8015ba0 <prvCheckForValidListAndQueue+0x68>)
 8015b60:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8015b62:	2300      	movs	r3, #0
 8015b64:	9300      	str	r3, [sp, #0]
 8015b66:	4b11      	ldr	r3, [pc, #68]	@ (8015bac <prvCheckForValidListAndQueue+0x74>)
 8015b68:	4a11      	ldr	r2, [pc, #68]	@ (8015bb0 <prvCheckForValidListAndQueue+0x78>)
 8015b6a:	2110      	movs	r1, #16
 8015b6c:	200a      	movs	r0, #10
 8015b6e:	f7fd f99f 	bl	8012eb0 <xQueueGenericCreateStatic>
 8015b72:	4603      	mov	r3, r0
 8015b74:	4a08      	ldr	r2, [pc, #32]	@ (8015b98 <prvCheckForValidListAndQueue+0x60>)
 8015b76:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8015b78:	4b07      	ldr	r3, [pc, #28]	@ (8015b98 <prvCheckForValidListAndQueue+0x60>)
 8015b7a:	681b      	ldr	r3, [r3, #0]
 8015b7c:	2b00      	cmp	r3, #0
 8015b7e:	d005      	beq.n	8015b8c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8015b80:	4b05      	ldr	r3, [pc, #20]	@ (8015b98 <prvCheckForValidListAndQueue+0x60>)
 8015b82:	681b      	ldr	r3, [r3, #0]
 8015b84:	490b      	ldr	r1, [pc, #44]	@ (8015bb4 <prvCheckForValidListAndQueue+0x7c>)
 8015b86:	4618      	mov	r0, r3
 8015b88:	f7fe f8cc 	bl	8013d24 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015b8c:	f000 f996 	bl	8015ebc <vPortExitCritical>
}
 8015b90:	bf00      	nop
 8015b92:	46bd      	mov	sp, r7
 8015b94:	bd80      	pop	{r7, pc}
 8015b96:	bf00      	nop
 8015b98:	24001730 	.word	0x24001730
 8015b9c:	24001700 	.word	0x24001700
 8015ba0:	24001714 	.word	0x24001714
 8015ba4:	24001728 	.word	0x24001728
 8015ba8:	2400172c 	.word	0x2400172c
 8015bac:	240017dc 	.word	0x240017dc
 8015bb0:	2400173c 	.word	0x2400173c
 8015bb4:	08017b9c 	.word	0x08017b9c

08015bb8 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8015bb8:	b580      	push	{r7, lr}
 8015bba:	b08a      	sub	sp, #40	@ 0x28
 8015bbc:	af00      	add	r7, sp, #0
 8015bbe:	60f8      	str	r0, [r7, #12]
 8015bc0:	60b9      	str	r1, [r7, #8]
 8015bc2:	607a      	str	r2, [r7, #4]
 8015bc4:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8015bc6:	f06f 0301 	mvn.w	r3, #1
 8015bca:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8015bcc:	68fb      	ldr	r3, [r7, #12]
 8015bce:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8015bd0:	68bb      	ldr	r3, [r7, #8]
 8015bd2:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8015bd4:	687b      	ldr	r3, [r7, #4]
 8015bd6:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8015bd8:	4b06      	ldr	r3, [pc, #24]	@ (8015bf4 <xTimerPendFunctionCallFromISR+0x3c>)
 8015bda:	6818      	ldr	r0, [r3, #0]
 8015bdc:	f107 0114 	add.w	r1, r7, #20
 8015be0:	2300      	movs	r3, #0
 8015be2:	683a      	ldr	r2, [r7, #0]
 8015be4:	f7fd fbb0 	bl	8013348 <xQueueGenericSendFromISR>
 8015be8:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8015bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8015bec:	4618      	mov	r0, r3
 8015bee:	3728      	adds	r7, #40	@ 0x28
 8015bf0:	46bd      	mov	sp, r7
 8015bf2:	bd80      	pop	{r7, pc}
 8015bf4:	24001730 	.word	0x24001730

08015bf8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8015bf8:	b480      	push	{r7}
 8015bfa:	b085      	sub	sp, #20
 8015bfc:	af00      	add	r7, sp, #0
 8015bfe:	60f8      	str	r0, [r7, #12]
 8015c00:	60b9      	str	r1, [r7, #8]
 8015c02:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8015c04:	68fb      	ldr	r3, [r7, #12]
 8015c06:	3b04      	subs	r3, #4
 8015c08:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8015c0a:	68fb      	ldr	r3, [r7, #12]
 8015c0c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8015c10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015c12:	68fb      	ldr	r3, [r7, #12]
 8015c14:	3b04      	subs	r3, #4
 8015c16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8015c18:	68bb      	ldr	r3, [r7, #8]
 8015c1a:	f023 0201 	bic.w	r2, r3, #1
 8015c1e:	68fb      	ldr	r3, [r7, #12]
 8015c20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015c22:	68fb      	ldr	r3, [r7, #12]
 8015c24:	3b04      	subs	r3, #4
 8015c26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8015c28:	4a0c      	ldr	r2, [pc, #48]	@ (8015c5c <pxPortInitialiseStack+0x64>)
 8015c2a:	68fb      	ldr	r3, [r7, #12]
 8015c2c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8015c2e:	68fb      	ldr	r3, [r7, #12]
 8015c30:	3b14      	subs	r3, #20
 8015c32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8015c34:	687a      	ldr	r2, [r7, #4]
 8015c36:	68fb      	ldr	r3, [r7, #12]
 8015c38:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8015c3a:	68fb      	ldr	r3, [r7, #12]
 8015c3c:	3b04      	subs	r3, #4
 8015c3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8015c40:	68fb      	ldr	r3, [r7, #12]
 8015c42:	f06f 0202 	mvn.w	r2, #2
 8015c46:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8015c48:	68fb      	ldr	r3, [r7, #12]
 8015c4a:	3b20      	subs	r3, #32
 8015c4c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8015c4e:	68fb      	ldr	r3, [r7, #12]
}
 8015c50:	4618      	mov	r0, r3
 8015c52:	3714      	adds	r7, #20
 8015c54:	46bd      	mov	sp, r7
 8015c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c5a:	4770      	bx	lr
 8015c5c:	08015c61 	.word	0x08015c61

08015c60 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8015c60:	b480      	push	{r7}
 8015c62:	b085      	sub	sp, #20
 8015c64:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8015c66:	2300      	movs	r3, #0
 8015c68:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8015c6a:	4b13      	ldr	r3, [pc, #76]	@ (8015cb8 <prvTaskExitError+0x58>)
 8015c6c:	681b      	ldr	r3, [r3, #0]
 8015c6e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8015c72:	d00b      	beq.n	8015c8c <prvTaskExitError+0x2c>
	__asm volatile
 8015c74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015c78:	f383 8811 	msr	BASEPRI, r3
 8015c7c:	f3bf 8f6f 	isb	sy
 8015c80:	f3bf 8f4f 	dsb	sy
 8015c84:	60fb      	str	r3, [r7, #12]
}
 8015c86:	bf00      	nop
 8015c88:	bf00      	nop
 8015c8a:	e7fd      	b.n	8015c88 <prvTaskExitError+0x28>
	__asm volatile
 8015c8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015c90:	f383 8811 	msr	BASEPRI, r3
 8015c94:	f3bf 8f6f 	isb	sy
 8015c98:	f3bf 8f4f 	dsb	sy
 8015c9c:	60bb      	str	r3, [r7, #8]
}
 8015c9e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8015ca0:	bf00      	nop
 8015ca2:	687b      	ldr	r3, [r7, #4]
 8015ca4:	2b00      	cmp	r3, #0
 8015ca6:	d0fc      	beq.n	8015ca2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8015ca8:	bf00      	nop
 8015caa:	bf00      	nop
 8015cac:	3714      	adds	r7, #20
 8015cae:	46bd      	mov	sp, r7
 8015cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cb4:	4770      	bx	lr
 8015cb6:	bf00      	nop
 8015cb8:	24000010 	.word	0x24000010
 8015cbc:	00000000 	.word	0x00000000

08015cc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8015cc0:	4b07      	ldr	r3, [pc, #28]	@ (8015ce0 <pxCurrentTCBConst2>)
 8015cc2:	6819      	ldr	r1, [r3, #0]
 8015cc4:	6808      	ldr	r0, [r1, #0]
 8015cc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015cca:	f380 8809 	msr	PSP, r0
 8015cce:	f3bf 8f6f 	isb	sy
 8015cd2:	f04f 0000 	mov.w	r0, #0
 8015cd6:	f380 8811 	msr	BASEPRI, r0
 8015cda:	4770      	bx	lr
 8015cdc:	f3af 8000 	nop.w

08015ce0 <pxCurrentTCBConst2>:
 8015ce0:	24001200 	.word	0x24001200
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8015ce4:	bf00      	nop
 8015ce6:	bf00      	nop

08015ce8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8015ce8:	4808      	ldr	r0, [pc, #32]	@ (8015d0c <prvPortStartFirstTask+0x24>)
 8015cea:	6800      	ldr	r0, [r0, #0]
 8015cec:	6800      	ldr	r0, [r0, #0]
 8015cee:	f380 8808 	msr	MSP, r0
 8015cf2:	f04f 0000 	mov.w	r0, #0
 8015cf6:	f380 8814 	msr	CONTROL, r0
 8015cfa:	b662      	cpsie	i
 8015cfc:	b661      	cpsie	f
 8015cfe:	f3bf 8f4f 	dsb	sy
 8015d02:	f3bf 8f6f 	isb	sy
 8015d06:	df00      	svc	0
 8015d08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8015d0a:	bf00      	nop
 8015d0c:	e000ed08 	.word	0xe000ed08

08015d10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8015d10:	b580      	push	{r7, lr}
 8015d12:	b086      	sub	sp, #24
 8015d14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8015d16:	4b47      	ldr	r3, [pc, #284]	@ (8015e34 <xPortStartScheduler+0x124>)
 8015d18:	681b      	ldr	r3, [r3, #0]
 8015d1a:	4a47      	ldr	r2, [pc, #284]	@ (8015e38 <xPortStartScheduler+0x128>)
 8015d1c:	4293      	cmp	r3, r2
 8015d1e:	d10b      	bne.n	8015d38 <xPortStartScheduler+0x28>
	__asm volatile
 8015d20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015d24:	f383 8811 	msr	BASEPRI, r3
 8015d28:	f3bf 8f6f 	isb	sy
 8015d2c:	f3bf 8f4f 	dsb	sy
 8015d30:	60fb      	str	r3, [r7, #12]
}
 8015d32:	bf00      	nop
 8015d34:	bf00      	nop
 8015d36:	e7fd      	b.n	8015d34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8015d38:	4b3e      	ldr	r3, [pc, #248]	@ (8015e34 <xPortStartScheduler+0x124>)
 8015d3a:	681b      	ldr	r3, [r3, #0]
 8015d3c:	4a3f      	ldr	r2, [pc, #252]	@ (8015e3c <xPortStartScheduler+0x12c>)
 8015d3e:	4293      	cmp	r3, r2
 8015d40:	d10b      	bne.n	8015d5a <xPortStartScheduler+0x4a>
	__asm volatile
 8015d42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015d46:	f383 8811 	msr	BASEPRI, r3
 8015d4a:	f3bf 8f6f 	isb	sy
 8015d4e:	f3bf 8f4f 	dsb	sy
 8015d52:	613b      	str	r3, [r7, #16]
}
 8015d54:	bf00      	nop
 8015d56:	bf00      	nop
 8015d58:	e7fd      	b.n	8015d56 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8015d5a:	4b39      	ldr	r3, [pc, #228]	@ (8015e40 <xPortStartScheduler+0x130>)
 8015d5c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8015d5e:	697b      	ldr	r3, [r7, #20]
 8015d60:	781b      	ldrb	r3, [r3, #0]
 8015d62:	b2db      	uxtb	r3, r3
 8015d64:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8015d66:	697b      	ldr	r3, [r7, #20]
 8015d68:	22ff      	movs	r2, #255	@ 0xff
 8015d6a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8015d6c:	697b      	ldr	r3, [r7, #20]
 8015d6e:	781b      	ldrb	r3, [r3, #0]
 8015d70:	b2db      	uxtb	r3, r3
 8015d72:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8015d74:	78fb      	ldrb	r3, [r7, #3]
 8015d76:	b2db      	uxtb	r3, r3
 8015d78:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8015d7c:	b2da      	uxtb	r2, r3
 8015d7e:	4b31      	ldr	r3, [pc, #196]	@ (8015e44 <xPortStartScheduler+0x134>)
 8015d80:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8015d82:	4b31      	ldr	r3, [pc, #196]	@ (8015e48 <xPortStartScheduler+0x138>)
 8015d84:	2207      	movs	r2, #7
 8015d86:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015d88:	e009      	b.n	8015d9e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8015d8a:	4b2f      	ldr	r3, [pc, #188]	@ (8015e48 <xPortStartScheduler+0x138>)
 8015d8c:	681b      	ldr	r3, [r3, #0]
 8015d8e:	3b01      	subs	r3, #1
 8015d90:	4a2d      	ldr	r2, [pc, #180]	@ (8015e48 <xPortStartScheduler+0x138>)
 8015d92:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8015d94:	78fb      	ldrb	r3, [r7, #3]
 8015d96:	b2db      	uxtb	r3, r3
 8015d98:	005b      	lsls	r3, r3, #1
 8015d9a:	b2db      	uxtb	r3, r3
 8015d9c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015d9e:	78fb      	ldrb	r3, [r7, #3]
 8015da0:	b2db      	uxtb	r3, r3
 8015da2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8015da6:	2b80      	cmp	r3, #128	@ 0x80
 8015da8:	d0ef      	beq.n	8015d8a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8015daa:	4b27      	ldr	r3, [pc, #156]	@ (8015e48 <xPortStartScheduler+0x138>)
 8015dac:	681b      	ldr	r3, [r3, #0]
 8015dae:	f1c3 0307 	rsb	r3, r3, #7
 8015db2:	2b04      	cmp	r3, #4
 8015db4:	d00b      	beq.n	8015dce <xPortStartScheduler+0xbe>
	__asm volatile
 8015db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015dba:	f383 8811 	msr	BASEPRI, r3
 8015dbe:	f3bf 8f6f 	isb	sy
 8015dc2:	f3bf 8f4f 	dsb	sy
 8015dc6:	60bb      	str	r3, [r7, #8]
}
 8015dc8:	bf00      	nop
 8015dca:	bf00      	nop
 8015dcc:	e7fd      	b.n	8015dca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8015dce:	4b1e      	ldr	r3, [pc, #120]	@ (8015e48 <xPortStartScheduler+0x138>)
 8015dd0:	681b      	ldr	r3, [r3, #0]
 8015dd2:	021b      	lsls	r3, r3, #8
 8015dd4:	4a1c      	ldr	r2, [pc, #112]	@ (8015e48 <xPortStartScheduler+0x138>)
 8015dd6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8015dd8:	4b1b      	ldr	r3, [pc, #108]	@ (8015e48 <xPortStartScheduler+0x138>)
 8015dda:	681b      	ldr	r3, [r3, #0]
 8015ddc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8015de0:	4a19      	ldr	r2, [pc, #100]	@ (8015e48 <xPortStartScheduler+0x138>)
 8015de2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8015de4:	687b      	ldr	r3, [r7, #4]
 8015de6:	b2da      	uxtb	r2, r3
 8015de8:	697b      	ldr	r3, [r7, #20]
 8015dea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8015dec:	4b17      	ldr	r3, [pc, #92]	@ (8015e4c <xPortStartScheduler+0x13c>)
 8015dee:	681b      	ldr	r3, [r3, #0]
 8015df0:	4a16      	ldr	r2, [pc, #88]	@ (8015e4c <xPortStartScheduler+0x13c>)
 8015df2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8015df6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8015df8:	4b14      	ldr	r3, [pc, #80]	@ (8015e4c <xPortStartScheduler+0x13c>)
 8015dfa:	681b      	ldr	r3, [r3, #0]
 8015dfc:	4a13      	ldr	r2, [pc, #76]	@ (8015e4c <xPortStartScheduler+0x13c>)
 8015dfe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8015e02:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8015e04:	f000 f8da 	bl	8015fbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8015e08:	4b11      	ldr	r3, [pc, #68]	@ (8015e50 <xPortStartScheduler+0x140>)
 8015e0a:	2200      	movs	r2, #0
 8015e0c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8015e0e:	f000 f8f9 	bl	8016004 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8015e12:	4b10      	ldr	r3, [pc, #64]	@ (8015e54 <xPortStartScheduler+0x144>)
 8015e14:	681b      	ldr	r3, [r3, #0]
 8015e16:	4a0f      	ldr	r2, [pc, #60]	@ (8015e54 <xPortStartScheduler+0x144>)
 8015e18:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8015e1c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8015e1e:	f7ff ff63 	bl	8015ce8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8015e22:	f7fe fbf3 	bl	801460c <vTaskSwitchContext>
	prvTaskExitError();
 8015e26:	f7ff ff1b 	bl	8015c60 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8015e2a:	2300      	movs	r3, #0
}
 8015e2c:	4618      	mov	r0, r3
 8015e2e:	3718      	adds	r7, #24
 8015e30:	46bd      	mov	sp, r7
 8015e32:	bd80      	pop	{r7, pc}
 8015e34:	e000ed00 	.word	0xe000ed00
 8015e38:	410fc271 	.word	0x410fc271
 8015e3c:	410fc270 	.word	0x410fc270
 8015e40:	e000e400 	.word	0xe000e400
 8015e44:	2400182c 	.word	0x2400182c
 8015e48:	24001830 	.word	0x24001830
 8015e4c:	e000ed20 	.word	0xe000ed20
 8015e50:	24000010 	.word	0x24000010
 8015e54:	e000ef34 	.word	0xe000ef34

08015e58 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8015e58:	b480      	push	{r7}
 8015e5a:	b083      	sub	sp, #12
 8015e5c:	af00      	add	r7, sp, #0
	__asm volatile
 8015e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015e62:	f383 8811 	msr	BASEPRI, r3
 8015e66:	f3bf 8f6f 	isb	sy
 8015e6a:	f3bf 8f4f 	dsb	sy
 8015e6e:	607b      	str	r3, [r7, #4]
}
 8015e70:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8015e72:	4b10      	ldr	r3, [pc, #64]	@ (8015eb4 <vPortEnterCritical+0x5c>)
 8015e74:	681b      	ldr	r3, [r3, #0]
 8015e76:	3301      	adds	r3, #1
 8015e78:	4a0e      	ldr	r2, [pc, #56]	@ (8015eb4 <vPortEnterCritical+0x5c>)
 8015e7a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8015e7c:	4b0d      	ldr	r3, [pc, #52]	@ (8015eb4 <vPortEnterCritical+0x5c>)
 8015e7e:	681b      	ldr	r3, [r3, #0]
 8015e80:	2b01      	cmp	r3, #1
 8015e82:	d110      	bne.n	8015ea6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8015e84:	4b0c      	ldr	r3, [pc, #48]	@ (8015eb8 <vPortEnterCritical+0x60>)
 8015e86:	681b      	ldr	r3, [r3, #0]
 8015e88:	b2db      	uxtb	r3, r3
 8015e8a:	2b00      	cmp	r3, #0
 8015e8c:	d00b      	beq.n	8015ea6 <vPortEnterCritical+0x4e>
	__asm volatile
 8015e8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015e92:	f383 8811 	msr	BASEPRI, r3
 8015e96:	f3bf 8f6f 	isb	sy
 8015e9a:	f3bf 8f4f 	dsb	sy
 8015e9e:	603b      	str	r3, [r7, #0]
}
 8015ea0:	bf00      	nop
 8015ea2:	bf00      	nop
 8015ea4:	e7fd      	b.n	8015ea2 <vPortEnterCritical+0x4a>
	}
}
 8015ea6:	bf00      	nop
 8015ea8:	370c      	adds	r7, #12
 8015eaa:	46bd      	mov	sp, r7
 8015eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015eb0:	4770      	bx	lr
 8015eb2:	bf00      	nop
 8015eb4:	24000010 	.word	0x24000010
 8015eb8:	e000ed04 	.word	0xe000ed04

08015ebc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8015ebc:	b480      	push	{r7}
 8015ebe:	b083      	sub	sp, #12
 8015ec0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8015ec2:	4b12      	ldr	r3, [pc, #72]	@ (8015f0c <vPortExitCritical+0x50>)
 8015ec4:	681b      	ldr	r3, [r3, #0]
 8015ec6:	2b00      	cmp	r3, #0
 8015ec8:	d10b      	bne.n	8015ee2 <vPortExitCritical+0x26>
	__asm volatile
 8015eca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015ece:	f383 8811 	msr	BASEPRI, r3
 8015ed2:	f3bf 8f6f 	isb	sy
 8015ed6:	f3bf 8f4f 	dsb	sy
 8015eda:	607b      	str	r3, [r7, #4]
}
 8015edc:	bf00      	nop
 8015ede:	bf00      	nop
 8015ee0:	e7fd      	b.n	8015ede <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8015ee2:	4b0a      	ldr	r3, [pc, #40]	@ (8015f0c <vPortExitCritical+0x50>)
 8015ee4:	681b      	ldr	r3, [r3, #0]
 8015ee6:	3b01      	subs	r3, #1
 8015ee8:	4a08      	ldr	r2, [pc, #32]	@ (8015f0c <vPortExitCritical+0x50>)
 8015eea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8015eec:	4b07      	ldr	r3, [pc, #28]	@ (8015f0c <vPortExitCritical+0x50>)
 8015eee:	681b      	ldr	r3, [r3, #0]
 8015ef0:	2b00      	cmp	r3, #0
 8015ef2:	d105      	bne.n	8015f00 <vPortExitCritical+0x44>
 8015ef4:	2300      	movs	r3, #0
 8015ef6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015ef8:	683b      	ldr	r3, [r7, #0]
 8015efa:	f383 8811 	msr	BASEPRI, r3
}
 8015efe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8015f00:	bf00      	nop
 8015f02:	370c      	adds	r7, #12
 8015f04:	46bd      	mov	sp, r7
 8015f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f0a:	4770      	bx	lr
 8015f0c:	24000010 	.word	0x24000010

08015f10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8015f10:	f3ef 8009 	mrs	r0, PSP
 8015f14:	f3bf 8f6f 	isb	sy
 8015f18:	4b15      	ldr	r3, [pc, #84]	@ (8015f70 <pxCurrentTCBConst>)
 8015f1a:	681a      	ldr	r2, [r3, #0]
 8015f1c:	f01e 0f10 	tst.w	lr, #16
 8015f20:	bf08      	it	eq
 8015f22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8015f26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f2a:	6010      	str	r0, [r2, #0]
 8015f2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8015f30:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8015f34:	f380 8811 	msr	BASEPRI, r0
 8015f38:	f3bf 8f4f 	dsb	sy
 8015f3c:	f3bf 8f6f 	isb	sy
 8015f40:	f7fe fb64 	bl	801460c <vTaskSwitchContext>
 8015f44:	f04f 0000 	mov.w	r0, #0
 8015f48:	f380 8811 	msr	BASEPRI, r0
 8015f4c:	bc09      	pop	{r0, r3}
 8015f4e:	6819      	ldr	r1, [r3, #0]
 8015f50:	6808      	ldr	r0, [r1, #0]
 8015f52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f56:	f01e 0f10 	tst.w	lr, #16
 8015f5a:	bf08      	it	eq
 8015f5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8015f60:	f380 8809 	msr	PSP, r0
 8015f64:	f3bf 8f6f 	isb	sy
 8015f68:	4770      	bx	lr
 8015f6a:	bf00      	nop
 8015f6c:	f3af 8000 	nop.w

08015f70 <pxCurrentTCBConst>:
 8015f70:	24001200 	.word	0x24001200
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8015f74:	bf00      	nop
 8015f76:	bf00      	nop

08015f78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8015f78:	b580      	push	{r7, lr}
 8015f7a:	b082      	sub	sp, #8
 8015f7c:	af00      	add	r7, sp, #0
	__asm volatile
 8015f7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015f82:	f383 8811 	msr	BASEPRI, r3
 8015f86:	f3bf 8f6f 	isb	sy
 8015f8a:	f3bf 8f4f 	dsb	sy
 8015f8e:	607b      	str	r3, [r7, #4]
}
 8015f90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8015f92:	f7fe fa81 	bl	8014498 <xTaskIncrementTick>
 8015f96:	4603      	mov	r3, r0
 8015f98:	2b00      	cmp	r3, #0
 8015f9a:	d003      	beq.n	8015fa4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8015f9c:	4b06      	ldr	r3, [pc, #24]	@ (8015fb8 <xPortSysTickHandler+0x40>)
 8015f9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015fa2:	601a      	str	r2, [r3, #0]
 8015fa4:	2300      	movs	r3, #0
 8015fa6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015fa8:	683b      	ldr	r3, [r7, #0]
 8015faa:	f383 8811 	msr	BASEPRI, r3
}
 8015fae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8015fb0:	bf00      	nop
 8015fb2:	3708      	adds	r7, #8
 8015fb4:	46bd      	mov	sp, r7
 8015fb6:	bd80      	pop	{r7, pc}
 8015fb8:	e000ed04 	.word	0xe000ed04

08015fbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8015fbc:	b480      	push	{r7}
 8015fbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8015fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8015ff0 <vPortSetupTimerInterrupt+0x34>)
 8015fc2:	2200      	movs	r2, #0
 8015fc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8015fc6:	4b0b      	ldr	r3, [pc, #44]	@ (8015ff4 <vPortSetupTimerInterrupt+0x38>)
 8015fc8:	2200      	movs	r2, #0
 8015fca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8015fcc:	4b0a      	ldr	r3, [pc, #40]	@ (8015ff8 <vPortSetupTimerInterrupt+0x3c>)
 8015fce:	681b      	ldr	r3, [r3, #0]
 8015fd0:	4a0a      	ldr	r2, [pc, #40]	@ (8015ffc <vPortSetupTimerInterrupt+0x40>)
 8015fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8015fd6:	099b      	lsrs	r3, r3, #6
 8015fd8:	4a09      	ldr	r2, [pc, #36]	@ (8016000 <vPortSetupTimerInterrupt+0x44>)
 8015fda:	3b01      	subs	r3, #1
 8015fdc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8015fde:	4b04      	ldr	r3, [pc, #16]	@ (8015ff0 <vPortSetupTimerInterrupt+0x34>)
 8015fe0:	2207      	movs	r2, #7
 8015fe2:	601a      	str	r2, [r3, #0]
}
 8015fe4:	bf00      	nop
 8015fe6:	46bd      	mov	sp, r7
 8015fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fec:	4770      	bx	lr
 8015fee:	bf00      	nop
 8015ff0:	e000e010 	.word	0xe000e010
 8015ff4:	e000e018 	.word	0xe000e018
 8015ff8:	24000000 	.word	0x24000000
 8015ffc:	10624dd3 	.word	0x10624dd3
 8016000:	e000e014 	.word	0xe000e014

08016004 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8016004:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8016014 <vPortEnableVFP+0x10>
 8016008:	6801      	ldr	r1, [r0, #0]
 801600a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801600e:	6001      	str	r1, [r0, #0]
 8016010:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8016012:	bf00      	nop
 8016014:	e000ed88 	.word	0xe000ed88

08016018 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8016018:	b480      	push	{r7}
 801601a:	b085      	sub	sp, #20
 801601c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801601e:	f3ef 8305 	mrs	r3, IPSR
 8016022:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8016024:	68fb      	ldr	r3, [r7, #12]
 8016026:	2b0f      	cmp	r3, #15
 8016028:	d915      	bls.n	8016056 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801602a:	4a18      	ldr	r2, [pc, #96]	@ (801608c <vPortValidateInterruptPriority+0x74>)
 801602c:	68fb      	ldr	r3, [r7, #12]
 801602e:	4413      	add	r3, r2
 8016030:	781b      	ldrb	r3, [r3, #0]
 8016032:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8016034:	4b16      	ldr	r3, [pc, #88]	@ (8016090 <vPortValidateInterruptPriority+0x78>)
 8016036:	781b      	ldrb	r3, [r3, #0]
 8016038:	7afa      	ldrb	r2, [r7, #11]
 801603a:	429a      	cmp	r2, r3
 801603c:	d20b      	bcs.n	8016056 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801603e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016042:	f383 8811 	msr	BASEPRI, r3
 8016046:	f3bf 8f6f 	isb	sy
 801604a:	f3bf 8f4f 	dsb	sy
 801604e:	607b      	str	r3, [r7, #4]
}
 8016050:	bf00      	nop
 8016052:	bf00      	nop
 8016054:	e7fd      	b.n	8016052 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8016056:	4b0f      	ldr	r3, [pc, #60]	@ (8016094 <vPortValidateInterruptPriority+0x7c>)
 8016058:	681b      	ldr	r3, [r3, #0]
 801605a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801605e:	4b0e      	ldr	r3, [pc, #56]	@ (8016098 <vPortValidateInterruptPriority+0x80>)
 8016060:	681b      	ldr	r3, [r3, #0]
 8016062:	429a      	cmp	r2, r3
 8016064:	d90b      	bls.n	801607e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8016066:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801606a:	f383 8811 	msr	BASEPRI, r3
 801606e:	f3bf 8f6f 	isb	sy
 8016072:	f3bf 8f4f 	dsb	sy
 8016076:	603b      	str	r3, [r7, #0]
}
 8016078:	bf00      	nop
 801607a:	bf00      	nop
 801607c:	e7fd      	b.n	801607a <vPortValidateInterruptPriority+0x62>
	}
 801607e:	bf00      	nop
 8016080:	3714      	adds	r7, #20
 8016082:	46bd      	mov	sp, r7
 8016084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016088:	4770      	bx	lr
 801608a:	bf00      	nop
 801608c:	e000e3f0 	.word	0xe000e3f0
 8016090:	2400182c 	.word	0x2400182c
 8016094:	e000ed0c 	.word	0xe000ed0c
 8016098:	24001830 	.word	0x24001830

0801609c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801609c:	b580      	push	{r7, lr}
 801609e:	b08a      	sub	sp, #40	@ 0x28
 80160a0:	af00      	add	r7, sp, #0
 80160a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80160a4:	2300      	movs	r3, #0
 80160a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80160a8:	f7fe f928 	bl	80142fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80160ac:	4b5c      	ldr	r3, [pc, #368]	@ (8016220 <pvPortMalloc+0x184>)
 80160ae:	681b      	ldr	r3, [r3, #0]
 80160b0:	2b00      	cmp	r3, #0
 80160b2:	d101      	bne.n	80160b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80160b4:	f000 f924 	bl	8016300 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80160b8:	4b5a      	ldr	r3, [pc, #360]	@ (8016224 <pvPortMalloc+0x188>)
 80160ba:	681a      	ldr	r2, [r3, #0]
 80160bc:	687b      	ldr	r3, [r7, #4]
 80160be:	4013      	ands	r3, r2
 80160c0:	2b00      	cmp	r3, #0
 80160c2:	f040 8095 	bne.w	80161f0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80160c6:	687b      	ldr	r3, [r7, #4]
 80160c8:	2b00      	cmp	r3, #0
 80160ca:	d01e      	beq.n	801610a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80160cc:	2208      	movs	r2, #8
 80160ce:	687b      	ldr	r3, [r7, #4]
 80160d0:	4413      	add	r3, r2
 80160d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80160d4:	687b      	ldr	r3, [r7, #4]
 80160d6:	f003 0307 	and.w	r3, r3, #7
 80160da:	2b00      	cmp	r3, #0
 80160dc:	d015      	beq.n	801610a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80160de:	687b      	ldr	r3, [r7, #4]
 80160e0:	f023 0307 	bic.w	r3, r3, #7
 80160e4:	3308      	adds	r3, #8
 80160e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80160e8:	687b      	ldr	r3, [r7, #4]
 80160ea:	f003 0307 	and.w	r3, r3, #7
 80160ee:	2b00      	cmp	r3, #0
 80160f0:	d00b      	beq.n	801610a <pvPortMalloc+0x6e>
	__asm volatile
 80160f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80160f6:	f383 8811 	msr	BASEPRI, r3
 80160fa:	f3bf 8f6f 	isb	sy
 80160fe:	f3bf 8f4f 	dsb	sy
 8016102:	617b      	str	r3, [r7, #20]
}
 8016104:	bf00      	nop
 8016106:	bf00      	nop
 8016108:	e7fd      	b.n	8016106 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	2b00      	cmp	r3, #0
 801610e:	d06f      	beq.n	80161f0 <pvPortMalloc+0x154>
 8016110:	4b45      	ldr	r3, [pc, #276]	@ (8016228 <pvPortMalloc+0x18c>)
 8016112:	681b      	ldr	r3, [r3, #0]
 8016114:	687a      	ldr	r2, [r7, #4]
 8016116:	429a      	cmp	r2, r3
 8016118:	d86a      	bhi.n	80161f0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801611a:	4b44      	ldr	r3, [pc, #272]	@ (801622c <pvPortMalloc+0x190>)
 801611c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801611e:	4b43      	ldr	r3, [pc, #268]	@ (801622c <pvPortMalloc+0x190>)
 8016120:	681b      	ldr	r3, [r3, #0]
 8016122:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016124:	e004      	b.n	8016130 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8016126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016128:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801612a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801612c:	681b      	ldr	r3, [r3, #0]
 801612e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016132:	685b      	ldr	r3, [r3, #4]
 8016134:	687a      	ldr	r2, [r7, #4]
 8016136:	429a      	cmp	r2, r3
 8016138:	d903      	bls.n	8016142 <pvPortMalloc+0xa6>
 801613a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801613c:	681b      	ldr	r3, [r3, #0]
 801613e:	2b00      	cmp	r3, #0
 8016140:	d1f1      	bne.n	8016126 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8016142:	4b37      	ldr	r3, [pc, #220]	@ (8016220 <pvPortMalloc+0x184>)
 8016144:	681b      	ldr	r3, [r3, #0]
 8016146:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016148:	429a      	cmp	r2, r3
 801614a:	d051      	beq.n	80161f0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801614c:	6a3b      	ldr	r3, [r7, #32]
 801614e:	681b      	ldr	r3, [r3, #0]
 8016150:	2208      	movs	r2, #8
 8016152:	4413      	add	r3, r2
 8016154:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8016156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016158:	681a      	ldr	r2, [r3, #0]
 801615a:	6a3b      	ldr	r3, [r7, #32]
 801615c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801615e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016160:	685a      	ldr	r2, [r3, #4]
 8016162:	687b      	ldr	r3, [r7, #4]
 8016164:	1ad2      	subs	r2, r2, r3
 8016166:	2308      	movs	r3, #8
 8016168:	005b      	lsls	r3, r3, #1
 801616a:	429a      	cmp	r2, r3
 801616c:	d920      	bls.n	80161b0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801616e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016170:	687b      	ldr	r3, [r7, #4]
 8016172:	4413      	add	r3, r2
 8016174:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016176:	69bb      	ldr	r3, [r7, #24]
 8016178:	f003 0307 	and.w	r3, r3, #7
 801617c:	2b00      	cmp	r3, #0
 801617e:	d00b      	beq.n	8016198 <pvPortMalloc+0xfc>
	__asm volatile
 8016180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016184:	f383 8811 	msr	BASEPRI, r3
 8016188:	f3bf 8f6f 	isb	sy
 801618c:	f3bf 8f4f 	dsb	sy
 8016190:	613b      	str	r3, [r7, #16]
}
 8016192:	bf00      	nop
 8016194:	bf00      	nop
 8016196:	e7fd      	b.n	8016194 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8016198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801619a:	685a      	ldr	r2, [r3, #4]
 801619c:	687b      	ldr	r3, [r7, #4]
 801619e:	1ad2      	subs	r2, r2, r3
 80161a0:	69bb      	ldr	r3, [r7, #24]
 80161a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80161a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80161a6:	687a      	ldr	r2, [r7, #4]
 80161a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80161aa:	69b8      	ldr	r0, [r7, #24]
 80161ac:	f000 f90a 	bl	80163c4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80161b0:	4b1d      	ldr	r3, [pc, #116]	@ (8016228 <pvPortMalloc+0x18c>)
 80161b2:	681a      	ldr	r2, [r3, #0]
 80161b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80161b6:	685b      	ldr	r3, [r3, #4]
 80161b8:	1ad3      	subs	r3, r2, r3
 80161ba:	4a1b      	ldr	r2, [pc, #108]	@ (8016228 <pvPortMalloc+0x18c>)
 80161bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80161be:	4b1a      	ldr	r3, [pc, #104]	@ (8016228 <pvPortMalloc+0x18c>)
 80161c0:	681a      	ldr	r2, [r3, #0]
 80161c2:	4b1b      	ldr	r3, [pc, #108]	@ (8016230 <pvPortMalloc+0x194>)
 80161c4:	681b      	ldr	r3, [r3, #0]
 80161c6:	429a      	cmp	r2, r3
 80161c8:	d203      	bcs.n	80161d2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80161ca:	4b17      	ldr	r3, [pc, #92]	@ (8016228 <pvPortMalloc+0x18c>)
 80161cc:	681b      	ldr	r3, [r3, #0]
 80161ce:	4a18      	ldr	r2, [pc, #96]	@ (8016230 <pvPortMalloc+0x194>)
 80161d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80161d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80161d4:	685a      	ldr	r2, [r3, #4]
 80161d6:	4b13      	ldr	r3, [pc, #76]	@ (8016224 <pvPortMalloc+0x188>)
 80161d8:	681b      	ldr	r3, [r3, #0]
 80161da:	431a      	orrs	r2, r3
 80161dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80161de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80161e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80161e2:	2200      	movs	r2, #0
 80161e4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80161e6:	4b13      	ldr	r3, [pc, #76]	@ (8016234 <pvPortMalloc+0x198>)
 80161e8:	681b      	ldr	r3, [r3, #0]
 80161ea:	3301      	adds	r3, #1
 80161ec:	4a11      	ldr	r2, [pc, #68]	@ (8016234 <pvPortMalloc+0x198>)
 80161ee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80161f0:	f7fe f892 	bl	8014318 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80161f4:	69fb      	ldr	r3, [r7, #28]
 80161f6:	f003 0307 	and.w	r3, r3, #7
 80161fa:	2b00      	cmp	r3, #0
 80161fc:	d00b      	beq.n	8016216 <pvPortMalloc+0x17a>
	__asm volatile
 80161fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016202:	f383 8811 	msr	BASEPRI, r3
 8016206:	f3bf 8f6f 	isb	sy
 801620a:	f3bf 8f4f 	dsb	sy
 801620e:	60fb      	str	r3, [r7, #12]
}
 8016210:	bf00      	nop
 8016212:	bf00      	nop
 8016214:	e7fd      	b.n	8016212 <pvPortMalloc+0x176>
	return pvReturn;
 8016216:	69fb      	ldr	r3, [r7, #28]
}
 8016218:	4618      	mov	r0, r3
 801621a:	3728      	adds	r7, #40	@ 0x28
 801621c:	46bd      	mov	sp, r7
 801621e:	bd80      	pop	{r7, pc}
 8016220:	2400543c 	.word	0x2400543c
 8016224:	24005450 	.word	0x24005450
 8016228:	24005440 	.word	0x24005440
 801622c:	24005434 	.word	0x24005434
 8016230:	24005444 	.word	0x24005444
 8016234:	24005448 	.word	0x24005448

08016238 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8016238:	b580      	push	{r7, lr}
 801623a:	b086      	sub	sp, #24
 801623c:	af00      	add	r7, sp, #0
 801623e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8016240:	687b      	ldr	r3, [r7, #4]
 8016242:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	2b00      	cmp	r3, #0
 8016248:	d04f      	beq.n	80162ea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801624a:	2308      	movs	r3, #8
 801624c:	425b      	negs	r3, r3
 801624e:	697a      	ldr	r2, [r7, #20]
 8016250:	4413      	add	r3, r2
 8016252:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8016254:	697b      	ldr	r3, [r7, #20]
 8016256:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8016258:	693b      	ldr	r3, [r7, #16]
 801625a:	685a      	ldr	r2, [r3, #4]
 801625c:	4b25      	ldr	r3, [pc, #148]	@ (80162f4 <vPortFree+0xbc>)
 801625e:	681b      	ldr	r3, [r3, #0]
 8016260:	4013      	ands	r3, r2
 8016262:	2b00      	cmp	r3, #0
 8016264:	d10b      	bne.n	801627e <vPortFree+0x46>
	__asm volatile
 8016266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801626a:	f383 8811 	msr	BASEPRI, r3
 801626e:	f3bf 8f6f 	isb	sy
 8016272:	f3bf 8f4f 	dsb	sy
 8016276:	60fb      	str	r3, [r7, #12]
}
 8016278:	bf00      	nop
 801627a:	bf00      	nop
 801627c:	e7fd      	b.n	801627a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801627e:	693b      	ldr	r3, [r7, #16]
 8016280:	681b      	ldr	r3, [r3, #0]
 8016282:	2b00      	cmp	r3, #0
 8016284:	d00b      	beq.n	801629e <vPortFree+0x66>
	__asm volatile
 8016286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801628a:	f383 8811 	msr	BASEPRI, r3
 801628e:	f3bf 8f6f 	isb	sy
 8016292:	f3bf 8f4f 	dsb	sy
 8016296:	60bb      	str	r3, [r7, #8]
}
 8016298:	bf00      	nop
 801629a:	bf00      	nop
 801629c:	e7fd      	b.n	801629a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801629e:	693b      	ldr	r3, [r7, #16]
 80162a0:	685a      	ldr	r2, [r3, #4]
 80162a2:	4b14      	ldr	r3, [pc, #80]	@ (80162f4 <vPortFree+0xbc>)
 80162a4:	681b      	ldr	r3, [r3, #0]
 80162a6:	4013      	ands	r3, r2
 80162a8:	2b00      	cmp	r3, #0
 80162aa:	d01e      	beq.n	80162ea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80162ac:	693b      	ldr	r3, [r7, #16]
 80162ae:	681b      	ldr	r3, [r3, #0]
 80162b0:	2b00      	cmp	r3, #0
 80162b2:	d11a      	bne.n	80162ea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80162b4:	693b      	ldr	r3, [r7, #16]
 80162b6:	685a      	ldr	r2, [r3, #4]
 80162b8:	4b0e      	ldr	r3, [pc, #56]	@ (80162f4 <vPortFree+0xbc>)
 80162ba:	681b      	ldr	r3, [r3, #0]
 80162bc:	43db      	mvns	r3, r3
 80162be:	401a      	ands	r2, r3
 80162c0:	693b      	ldr	r3, [r7, #16]
 80162c2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80162c4:	f7fe f81a 	bl	80142fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80162c8:	693b      	ldr	r3, [r7, #16]
 80162ca:	685a      	ldr	r2, [r3, #4]
 80162cc:	4b0a      	ldr	r3, [pc, #40]	@ (80162f8 <vPortFree+0xc0>)
 80162ce:	681b      	ldr	r3, [r3, #0]
 80162d0:	4413      	add	r3, r2
 80162d2:	4a09      	ldr	r2, [pc, #36]	@ (80162f8 <vPortFree+0xc0>)
 80162d4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80162d6:	6938      	ldr	r0, [r7, #16]
 80162d8:	f000 f874 	bl	80163c4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80162dc:	4b07      	ldr	r3, [pc, #28]	@ (80162fc <vPortFree+0xc4>)
 80162de:	681b      	ldr	r3, [r3, #0]
 80162e0:	3301      	adds	r3, #1
 80162e2:	4a06      	ldr	r2, [pc, #24]	@ (80162fc <vPortFree+0xc4>)
 80162e4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80162e6:	f7fe f817 	bl	8014318 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80162ea:	bf00      	nop
 80162ec:	3718      	adds	r7, #24
 80162ee:	46bd      	mov	sp, r7
 80162f0:	bd80      	pop	{r7, pc}
 80162f2:	bf00      	nop
 80162f4:	24005450 	.word	0x24005450
 80162f8:	24005440 	.word	0x24005440
 80162fc:	2400544c 	.word	0x2400544c

08016300 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8016300:	b480      	push	{r7}
 8016302:	b085      	sub	sp, #20
 8016304:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8016306:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 801630a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801630c:	4b27      	ldr	r3, [pc, #156]	@ (80163ac <prvHeapInit+0xac>)
 801630e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8016310:	68fb      	ldr	r3, [r7, #12]
 8016312:	f003 0307 	and.w	r3, r3, #7
 8016316:	2b00      	cmp	r3, #0
 8016318:	d00c      	beq.n	8016334 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801631a:	68fb      	ldr	r3, [r7, #12]
 801631c:	3307      	adds	r3, #7
 801631e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016320:	68fb      	ldr	r3, [r7, #12]
 8016322:	f023 0307 	bic.w	r3, r3, #7
 8016326:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8016328:	68ba      	ldr	r2, [r7, #8]
 801632a:	68fb      	ldr	r3, [r7, #12]
 801632c:	1ad3      	subs	r3, r2, r3
 801632e:	4a1f      	ldr	r2, [pc, #124]	@ (80163ac <prvHeapInit+0xac>)
 8016330:	4413      	add	r3, r2
 8016332:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016334:	68fb      	ldr	r3, [r7, #12]
 8016336:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8016338:	4a1d      	ldr	r2, [pc, #116]	@ (80163b0 <prvHeapInit+0xb0>)
 801633a:	687b      	ldr	r3, [r7, #4]
 801633c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801633e:	4b1c      	ldr	r3, [pc, #112]	@ (80163b0 <prvHeapInit+0xb0>)
 8016340:	2200      	movs	r2, #0
 8016342:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016344:	687b      	ldr	r3, [r7, #4]
 8016346:	68ba      	ldr	r2, [r7, #8]
 8016348:	4413      	add	r3, r2
 801634a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801634c:	2208      	movs	r2, #8
 801634e:	68fb      	ldr	r3, [r7, #12]
 8016350:	1a9b      	subs	r3, r3, r2
 8016352:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016354:	68fb      	ldr	r3, [r7, #12]
 8016356:	f023 0307 	bic.w	r3, r3, #7
 801635a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801635c:	68fb      	ldr	r3, [r7, #12]
 801635e:	4a15      	ldr	r2, [pc, #84]	@ (80163b4 <prvHeapInit+0xb4>)
 8016360:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8016362:	4b14      	ldr	r3, [pc, #80]	@ (80163b4 <prvHeapInit+0xb4>)
 8016364:	681b      	ldr	r3, [r3, #0]
 8016366:	2200      	movs	r2, #0
 8016368:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801636a:	4b12      	ldr	r3, [pc, #72]	@ (80163b4 <prvHeapInit+0xb4>)
 801636c:	681b      	ldr	r3, [r3, #0]
 801636e:	2200      	movs	r2, #0
 8016370:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8016372:	687b      	ldr	r3, [r7, #4]
 8016374:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8016376:	683b      	ldr	r3, [r7, #0]
 8016378:	68fa      	ldr	r2, [r7, #12]
 801637a:	1ad2      	subs	r2, r2, r3
 801637c:	683b      	ldr	r3, [r7, #0]
 801637e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8016380:	4b0c      	ldr	r3, [pc, #48]	@ (80163b4 <prvHeapInit+0xb4>)
 8016382:	681a      	ldr	r2, [r3, #0]
 8016384:	683b      	ldr	r3, [r7, #0]
 8016386:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016388:	683b      	ldr	r3, [r7, #0]
 801638a:	685b      	ldr	r3, [r3, #4]
 801638c:	4a0a      	ldr	r2, [pc, #40]	@ (80163b8 <prvHeapInit+0xb8>)
 801638e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016390:	683b      	ldr	r3, [r7, #0]
 8016392:	685b      	ldr	r3, [r3, #4]
 8016394:	4a09      	ldr	r2, [pc, #36]	@ (80163bc <prvHeapInit+0xbc>)
 8016396:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8016398:	4b09      	ldr	r3, [pc, #36]	@ (80163c0 <prvHeapInit+0xc0>)
 801639a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801639e:	601a      	str	r2, [r3, #0]
}
 80163a0:	bf00      	nop
 80163a2:	3714      	adds	r7, #20
 80163a4:	46bd      	mov	sp, r7
 80163a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163aa:	4770      	bx	lr
 80163ac:	24001834 	.word	0x24001834
 80163b0:	24005434 	.word	0x24005434
 80163b4:	2400543c 	.word	0x2400543c
 80163b8:	24005444 	.word	0x24005444
 80163bc:	24005440 	.word	0x24005440
 80163c0:	24005450 	.word	0x24005450

080163c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80163c4:	b480      	push	{r7}
 80163c6:	b085      	sub	sp, #20
 80163c8:	af00      	add	r7, sp, #0
 80163ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80163cc:	4b28      	ldr	r3, [pc, #160]	@ (8016470 <prvInsertBlockIntoFreeList+0xac>)
 80163ce:	60fb      	str	r3, [r7, #12]
 80163d0:	e002      	b.n	80163d8 <prvInsertBlockIntoFreeList+0x14>
 80163d2:	68fb      	ldr	r3, [r7, #12]
 80163d4:	681b      	ldr	r3, [r3, #0]
 80163d6:	60fb      	str	r3, [r7, #12]
 80163d8:	68fb      	ldr	r3, [r7, #12]
 80163da:	681b      	ldr	r3, [r3, #0]
 80163dc:	687a      	ldr	r2, [r7, #4]
 80163de:	429a      	cmp	r2, r3
 80163e0:	d8f7      	bhi.n	80163d2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80163e2:	68fb      	ldr	r3, [r7, #12]
 80163e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80163e6:	68fb      	ldr	r3, [r7, #12]
 80163e8:	685b      	ldr	r3, [r3, #4]
 80163ea:	68ba      	ldr	r2, [r7, #8]
 80163ec:	4413      	add	r3, r2
 80163ee:	687a      	ldr	r2, [r7, #4]
 80163f0:	429a      	cmp	r2, r3
 80163f2:	d108      	bne.n	8016406 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80163f4:	68fb      	ldr	r3, [r7, #12]
 80163f6:	685a      	ldr	r2, [r3, #4]
 80163f8:	687b      	ldr	r3, [r7, #4]
 80163fa:	685b      	ldr	r3, [r3, #4]
 80163fc:	441a      	add	r2, r3
 80163fe:	68fb      	ldr	r3, [r7, #12]
 8016400:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8016402:	68fb      	ldr	r3, [r7, #12]
 8016404:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8016406:	687b      	ldr	r3, [r7, #4]
 8016408:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	685b      	ldr	r3, [r3, #4]
 801640e:	68ba      	ldr	r2, [r7, #8]
 8016410:	441a      	add	r2, r3
 8016412:	68fb      	ldr	r3, [r7, #12]
 8016414:	681b      	ldr	r3, [r3, #0]
 8016416:	429a      	cmp	r2, r3
 8016418:	d118      	bne.n	801644c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801641a:	68fb      	ldr	r3, [r7, #12]
 801641c:	681a      	ldr	r2, [r3, #0]
 801641e:	4b15      	ldr	r3, [pc, #84]	@ (8016474 <prvInsertBlockIntoFreeList+0xb0>)
 8016420:	681b      	ldr	r3, [r3, #0]
 8016422:	429a      	cmp	r2, r3
 8016424:	d00d      	beq.n	8016442 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8016426:	687b      	ldr	r3, [r7, #4]
 8016428:	685a      	ldr	r2, [r3, #4]
 801642a:	68fb      	ldr	r3, [r7, #12]
 801642c:	681b      	ldr	r3, [r3, #0]
 801642e:	685b      	ldr	r3, [r3, #4]
 8016430:	441a      	add	r2, r3
 8016432:	687b      	ldr	r3, [r7, #4]
 8016434:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8016436:	68fb      	ldr	r3, [r7, #12]
 8016438:	681b      	ldr	r3, [r3, #0]
 801643a:	681a      	ldr	r2, [r3, #0]
 801643c:	687b      	ldr	r3, [r7, #4]
 801643e:	601a      	str	r2, [r3, #0]
 8016440:	e008      	b.n	8016454 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8016442:	4b0c      	ldr	r3, [pc, #48]	@ (8016474 <prvInsertBlockIntoFreeList+0xb0>)
 8016444:	681a      	ldr	r2, [r3, #0]
 8016446:	687b      	ldr	r3, [r7, #4]
 8016448:	601a      	str	r2, [r3, #0]
 801644a:	e003      	b.n	8016454 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801644c:	68fb      	ldr	r3, [r7, #12]
 801644e:	681a      	ldr	r2, [r3, #0]
 8016450:	687b      	ldr	r3, [r7, #4]
 8016452:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8016454:	68fa      	ldr	r2, [r7, #12]
 8016456:	687b      	ldr	r3, [r7, #4]
 8016458:	429a      	cmp	r2, r3
 801645a:	d002      	beq.n	8016462 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801645c:	68fb      	ldr	r3, [r7, #12]
 801645e:	687a      	ldr	r2, [r7, #4]
 8016460:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016462:	bf00      	nop
 8016464:	3714      	adds	r7, #20
 8016466:	46bd      	mov	sp, r7
 8016468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801646c:	4770      	bx	lr
 801646e:	bf00      	nop
 8016470:	24005434 	.word	0x24005434
 8016474:	2400543c 	.word	0x2400543c

08016478 <_ZdlPvj>:
 8016478:	f000 b800 	b.w	801647c <_ZdlPv>

0801647c <_ZdlPv>:
 801647c:	f000 b808 	b.w	8016490 <free>

08016480 <malloc>:
 8016480:	4b02      	ldr	r3, [pc, #8]	@ (801648c <malloc+0xc>)
 8016482:	4601      	mov	r1, r0
 8016484:	6818      	ldr	r0, [r3, #0]
 8016486:	f000 b82d 	b.w	80164e4 <_malloc_r>
 801648a:	bf00      	nop
 801648c:	24000020 	.word	0x24000020

08016490 <free>:
 8016490:	4b02      	ldr	r3, [pc, #8]	@ (801649c <free+0xc>)
 8016492:	4601      	mov	r1, r0
 8016494:	6818      	ldr	r0, [r3, #0]
 8016496:	f000 bc89 	b.w	8016dac <_free_r>
 801649a:	bf00      	nop
 801649c:	24000020 	.word	0x24000020

080164a0 <sbrk_aligned>:
 80164a0:	b570      	push	{r4, r5, r6, lr}
 80164a2:	4e0f      	ldr	r6, [pc, #60]	@ (80164e0 <sbrk_aligned+0x40>)
 80164a4:	460c      	mov	r4, r1
 80164a6:	6831      	ldr	r1, [r6, #0]
 80164a8:	4605      	mov	r5, r0
 80164aa:	b911      	cbnz	r1, 80164b2 <sbrk_aligned+0x12>
 80164ac:	f000 fc20 	bl	8016cf0 <_sbrk_r>
 80164b0:	6030      	str	r0, [r6, #0]
 80164b2:	4621      	mov	r1, r4
 80164b4:	4628      	mov	r0, r5
 80164b6:	f000 fc1b 	bl	8016cf0 <_sbrk_r>
 80164ba:	1c43      	adds	r3, r0, #1
 80164bc:	d103      	bne.n	80164c6 <sbrk_aligned+0x26>
 80164be:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80164c2:	4620      	mov	r0, r4
 80164c4:	bd70      	pop	{r4, r5, r6, pc}
 80164c6:	1cc4      	adds	r4, r0, #3
 80164c8:	f024 0403 	bic.w	r4, r4, #3
 80164cc:	42a0      	cmp	r0, r4
 80164ce:	d0f8      	beq.n	80164c2 <sbrk_aligned+0x22>
 80164d0:	1a21      	subs	r1, r4, r0
 80164d2:	4628      	mov	r0, r5
 80164d4:	f000 fc0c 	bl	8016cf0 <_sbrk_r>
 80164d8:	3001      	adds	r0, #1
 80164da:	d1f2      	bne.n	80164c2 <sbrk_aligned+0x22>
 80164dc:	e7ef      	b.n	80164be <sbrk_aligned+0x1e>
 80164de:	bf00      	nop
 80164e0:	24005454 	.word	0x24005454

080164e4 <_malloc_r>:
 80164e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80164e8:	1ccd      	adds	r5, r1, #3
 80164ea:	f025 0503 	bic.w	r5, r5, #3
 80164ee:	3508      	adds	r5, #8
 80164f0:	2d0c      	cmp	r5, #12
 80164f2:	bf38      	it	cc
 80164f4:	250c      	movcc	r5, #12
 80164f6:	2d00      	cmp	r5, #0
 80164f8:	4606      	mov	r6, r0
 80164fa:	db01      	blt.n	8016500 <_malloc_r+0x1c>
 80164fc:	42a9      	cmp	r1, r5
 80164fe:	d904      	bls.n	801650a <_malloc_r+0x26>
 8016500:	230c      	movs	r3, #12
 8016502:	6033      	str	r3, [r6, #0]
 8016504:	2000      	movs	r0, #0
 8016506:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801650a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80165e0 <_malloc_r+0xfc>
 801650e:	f000 f869 	bl	80165e4 <__malloc_lock>
 8016512:	f8d8 3000 	ldr.w	r3, [r8]
 8016516:	461c      	mov	r4, r3
 8016518:	bb44      	cbnz	r4, 801656c <_malloc_r+0x88>
 801651a:	4629      	mov	r1, r5
 801651c:	4630      	mov	r0, r6
 801651e:	f7ff ffbf 	bl	80164a0 <sbrk_aligned>
 8016522:	1c43      	adds	r3, r0, #1
 8016524:	4604      	mov	r4, r0
 8016526:	d158      	bne.n	80165da <_malloc_r+0xf6>
 8016528:	f8d8 4000 	ldr.w	r4, [r8]
 801652c:	4627      	mov	r7, r4
 801652e:	2f00      	cmp	r7, #0
 8016530:	d143      	bne.n	80165ba <_malloc_r+0xd6>
 8016532:	2c00      	cmp	r4, #0
 8016534:	d04b      	beq.n	80165ce <_malloc_r+0xea>
 8016536:	6823      	ldr	r3, [r4, #0]
 8016538:	4639      	mov	r1, r7
 801653a:	4630      	mov	r0, r6
 801653c:	eb04 0903 	add.w	r9, r4, r3
 8016540:	f000 fbd6 	bl	8016cf0 <_sbrk_r>
 8016544:	4581      	cmp	r9, r0
 8016546:	d142      	bne.n	80165ce <_malloc_r+0xea>
 8016548:	6821      	ldr	r1, [r4, #0]
 801654a:	1a6d      	subs	r5, r5, r1
 801654c:	4629      	mov	r1, r5
 801654e:	4630      	mov	r0, r6
 8016550:	f7ff ffa6 	bl	80164a0 <sbrk_aligned>
 8016554:	3001      	adds	r0, #1
 8016556:	d03a      	beq.n	80165ce <_malloc_r+0xea>
 8016558:	6823      	ldr	r3, [r4, #0]
 801655a:	442b      	add	r3, r5
 801655c:	6023      	str	r3, [r4, #0]
 801655e:	f8d8 3000 	ldr.w	r3, [r8]
 8016562:	685a      	ldr	r2, [r3, #4]
 8016564:	bb62      	cbnz	r2, 80165c0 <_malloc_r+0xdc>
 8016566:	f8c8 7000 	str.w	r7, [r8]
 801656a:	e00f      	b.n	801658c <_malloc_r+0xa8>
 801656c:	6822      	ldr	r2, [r4, #0]
 801656e:	1b52      	subs	r2, r2, r5
 8016570:	d420      	bmi.n	80165b4 <_malloc_r+0xd0>
 8016572:	2a0b      	cmp	r2, #11
 8016574:	d917      	bls.n	80165a6 <_malloc_r+0xc2>
 8016576:	1961      	adds	r1, r4, r5
 8016578:	42a3      	cmp	r3, r4
 801657a:	6025      	str	r5, [r4, #0]
 801657c:	bf18      	it	ne
 801657e:	6059      	strne	r1, [r3, #4]
 8016580:	6863      	ldr	r3, [r4, #4]
 8016582:	bf08      	it	eq
 8016584:	f8c8 1000 	streq.w	r1, [r8]
 8016588:	5162      	str	r2, [r4, r5]
 801658a:	604b      	str	r3, [r1, #4]
 801658c:	4630      	mov	r0, r6
 801658e:	f000 f82f 	bl	80165f0 <__malloc_unlock>
 8016592:	f104 000b 	add.w	r0, r4, #11
 8016596:	1d23      	adds	r3, r4, #4
 8016598:	f020 0007 	bic.w	r0, r0, #7
 801659c:	1ac2      	subs	r2, r0, r3
 801659e:	bf1c      	itt	ne
 80165a0:	1a1b      	subne	r3, r3, r0
 80165a2:	50a3      	strne	r3, [r4, r2]
 80165a4:	e7af      	b.n	8016506 <_malloc_r+0x22>
 80165a6:	6862      	ldr	r2, [r4, #4]
 80165a8:	42a3      	cmp	r3, r4
 80165aa:	bf0c      	ite	eq
 80165ac:	f8c8 2000 	streq.w	r2, [r8]
 80165b0:	605a      	strne	r2, [r3, #4]
 80165b2:	e7eb      	b.n	801658c <_malloc_r+0xa8>
 80165b4:	4623      	mov	r3, r4
 80165b6:	6864      	ldr	r4, [r4, #4]
 80165b8:	e7ae      	b.n	8016518 <_malloc_r+0x34>
 80165ba:	463c      	mov	r4, r7
 80165bc:	687f      	ldr	r7, [r7, #4]
 80165be:	e7b6      	b.n	801652e <_malloc_r+0x4a>
 80165c0:	461a      	mov	r2, r3
 80165c2:	685b      	ldr	r3, [r3, #4]
 80165c4:	42a3      	cmp	r3, r4
 80165c6:	d1fb      	bne.n	80165c0 <_malloc_r+0xdc>
 80165c8:	2300      	movs	r3, #0
 80165ca:	6053      	str	r3, [r2, #4]
 80165cc:	e7de      	b.n	801658c <_malloc_r+0xa8>
 80165ce:	230c      	movs	r3, #12
 80165d0:	6033      	str	r3, [r6, #0]
 80165d2:	4630      	mov	r0, r6
 80165d4:	f000 f80c 	bl	80165f0 <__malloc_unlock>
 80165d8:	e794      	b.n	8016504 <_malloc_r+0x20>
 80165da:	6005      	str	r5, [r0, #0]
 80165dc:	e7d6      	b.n	801658c <_malloc_r+0xa8>
 80165de:	bf00      	nop
 80165e0:	24005458 	.word	0x24005458

080165e4 <__malloc_lock>:
 80165e4:	4801      	ldr	r0, [pc, #4]	@ (80165ec <__malloc_lock+0x8>)
 80165e6:	f000 bbd0 	b.w	8016d8a <__retarget_lock_acquire_recursive>
 80165ea:	bf00      	nop
 80165ec:	2400559c 	.word	0x2400559c

080165f0 <__malloc_unlock>:
 80165f0:	4801      	ldr	r0, [pc, #4]	@ (80165f8 <__malloc_unlock+0x8>)
 80165f2:	f000 bbcb 	b.w	8016d8c <__retarget_lock_release_recursive>
 80165f6:	bf00      	nop
 80165f8:	2400559c 	.word	0x2400559c

080165fc <std>:
 80165fc:	2300      	movs	r3, #0
 80165fe:	b510      	push	{r4, lr}
 8016600:	4604      	mov	r4, r0
 8016602:	e9c0 3300 	strd	r3, r3, [r0]
 8016606:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801660a:	6083      	str	r3, [r0, #8]
 801660c:	8181      	strh	r1, [r0, #12]
 801660e:	6643      	str	r3, [r0, #100]	@ 0x64
 8016610:	81c2      	strh	r2, [r0, #14]
 8016612:	6183      	str	r3, [r0, #24]
 8016614:	4619      	mov	r1, r3
 8016616:	2208      	movs	r2, #8
 8016618:	305c      	adds	r0, #92	@ 0x5c
 801661a:	f000 facf 	bl	8016bbc <memset>
 801661e:	4b0d      	ldr	r3, [pc, #52]	@ (8016654 <std+0x58>)
 8016620:	6263      	str	r3, [r4, #36]	@ 0x24
 8016622:	4b0d      	ldr	r3, [pc, #52]	@ (8016658 <std+0x5c>)
 8016624:	62a3      	str	r3, [r4, #40]	@ 0x28
 8016626:	4b0d      	ldr	r3, [pc, #52]	@ (801665c <std+0x60>)
 8016628:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801662a:	4b0d      	ldr	r3, [pc, #52]	@ (8016660 <std+0x64>)
 801662c:	6323      	str	r3, [r4, #48]	@ 0x30
 801662e:	4b0d      	ldr	r3, [pc, #52]	@ (8016664 <std+0x68>)
 8016630:	6224      	str	r4, [r4, #32]
 8016632:	429c      	cmp	r4, r3
 8016634:	d006      	beq.n	8016644 <std+0x48>
 8016636:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801663a:	4294      	cmp	r4, r2
 801663c:	d002      	beq.n	8016644 <std+0x48>
 801663e:	33d0      	adds	r3, #208	@ 0xd0
 8016640:	429c      	cmp	r4, r3
 8016642:	d105      	bne.n	8016650 <std+0x54>
 8016644:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8016648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801664c:	f000 bb9c 	b.w	8016d88 <__retarget_lock_init_recursive>
 8016650:	bd10      	pop	{r4, pc}
 8016652:	bf00      	nop
 8016654:	08016a0d 	.word	0x08016a0d
 8016658:	08016a2f 	.word	0x08016a2f
 801665c:	08016a67 	.word	0x08016a67
 8016660:	08016a8b 	.word	0x08016a8b
 8016664:	2400545c 	.word	0x2400545c

08016668 <stdio_exit_handler>:
 8016668:	4a02      	ldr	r2, [pc, #8]	@ (8016674 <stdio_exit_handler+0xc>)
 801666a:	4903      	ldr	r1, [pc, #12]	@ (8016678 <stdio_exit_handler+0x10>)
 801666c:	4803      	ldr	r0, [pc, #12]	@ (801667c <stdio_exit_handler+0x14>)
 801666e:	f000 b869 	b.w	8016744 <_fwalk_sglue>
 8016672:	bf00      	nop
 8016674:	24000014 	.word	0x24000014
 8016678:	08017795 	.word	0x08017795
 801667c:	24000024 	.word	0x24000024

08016680 <cleanup_stdio>:
 8016680:	6841      	ldr	r1, [r0, #4]
 8016682:	4b0c      	ldr	r3, [pc, #48]	@ (80166b4 <cleanup_stdio+0x34>)
 8016684:	4299      	cmp	r1, r3
 8016686:	b510      	push	{r4, lr}
 8016688:	4604      	mov	r4, r0
 801668a:	d001      	beq.n	8016690 <cleanup_stdio+0x10>
 801668c:	f001 f882 	bl	8017794 <_fflush_r>
 8016690:	68a1      	ldr	r1, [r4, #8]
 8016692:	4b09      	ldr	r3, [pc, #36]	@ (80166b8 <cleanup_stdio+0x38>)
 8016694:	4299      	cmp	r1, r3
 8016696:	d002      	beq.n	801669e <cleanup_stdio+0x1e>
 8016698:	4620      	mov	r0, r4
 801669a:	f001 f87b 	bl	8017794 <_fflush_r>
 801669e:	68e1      	ldr	r1, [r4, #12]
 80166a0:	4b06      	ldr	r3, [pc, #24]	@ (80166bc <cleanup_stdio+0x3c>)
 80166a2:	4299      	cmp	r1, r3
 80166a4:	d004      	beq.n	80166b0 <cleanup_stdio+0x30>
 80166a6:	4620      	mov	r0, r4
 80166a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80166ac:	f001 b872 	b.w	8017794 <_fflush_r>
 80166b0:	bd10      	pop	{r4, pc}
 80166b2:	bf00      	nop
 80166b4:	2400545c 	.word	0x2400545c
 80166b8:	240054c4 	.word	0x240054c4
 80166bc:	2400552c 	.word	0x2400552c

080166c0 <global_stdio_init.part.0>:
 80166c0:	b510      	push	{r4, lr}
 80166c2:	4b0b      	ldr	r3, [pc, #44]	@ (80166f0 <global_stdio_init.part.0+0x30>)
 80166c4:	4c0b      	ldr	r4, [pc, #44]	@ (80166f4 <global_stdio_init.part.0+0x34>)
 80166c6:	4a0c      	ldr	r2, [pc, #48]	@ (80166f8 <global_stdio_init.part.0+0x38>)
 80166c8:	601a      	str	r2, [r3, #0]
 80166ca:	4620      	mov	r0, r4
 80166cc:	2200      	movs	r2, #0
 80166ce:	2104      	movs	r1, #4
 80166d0:	f7ff ff94 	bl	80165fc <std>
 80166d4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80166d8:	2201      	movs	r2, #1
 80166da:	2109      	movs	r1, #9
 80166dc:	f7ff ff8e 	bl	80165fc <std>
 80166e0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80166e4:	2202      	movs	r2, #2
 80166e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80166ea:	2112      	movs	r1, #18
 80166ec:	f7ff bf86 	b.w	80165fc <std>
 80166f0:	24005594 	.word	0x24005594
 80166f4:	2400545c 	.word	0x2400545c
 80166f8:	08016669 	.word	0x08016669

080166fc <__sfp_lock_acquire>:
 80166fc:	4801      	ldr	r0, [pc, #4]	@ (8016704 <__sfp_lock_acquire+0x8>)
 80166fe:	f000 bb44 	b.w	8016d8a <__retarget_lock_acquire_recursive>
 8016702:	bf00      	nop
 8016704:	2400559d 	.word	0x2400559d

08016708 <__sfp_lock_release>:
 8016708:	4801      	ldr	r0, [pc, #4]	@ (8016710 <__sfp_lock_release+0x8>)
 801670a:	f000 bb3f 	b.w	8016d8c <__retarget_lock_release_recursive>
 801670e:	bf00      	nop
 8016710:	2400559d 	.word	0x2400559d

08016714 <__sinit>:
 8016714:	b510      	push	{r4, lr}
 8016716:	4604      	mov	r4, r0
 8016718:	f7ff fff0 	bl	80166fc <__sfp_lock_acquire>
 801671c:	6a23      	ldr	r3, [r4, #32]
 801671e:	b11b      	cbz	r3, 8016728 <__sinit+0x14>
 8016720:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016724:	f7ff bff0 	b.w	8016708 <__sfp_lock_release>
 8016728:	4b04      	ldr	r3, [pc, #16]	@ (801673c <__sinit+0x28>)
 801672a:	6223      	str	r3, [r4, #32]
 801672c:	4b04      	ldr	r3, [pc, #16]	@ (8016740 <__sinit+0x2c>)
 801672e:	681b      	ldr	r3, [r3, #0]
 8016730:	2b00      	cmp	r3, #0
 8016732:	d1f5      	bne.n	8016720 <__sinit+0xc>
 8016734:	f7ff ffc4 	bl	80166c0 <global_stdio_init.part.0>
 8016738:	e7f2      	b.n	8016720 <__sinit+0xc>
 801673a:	bf00      	nop
 801673c:	08016681 	.word	0x08016681
 8016740:	24005594 	.word	0x24005594

08016744 <_fwalk_sglue>:
 8016744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016748:	4607      	mov	r7, r0
 801674a:	4688      	mov	r8, r1
 801674c:	4614      	mov	r4, r2
 801674e:	2600      	movs	r6, #0
 8016750:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016754:	f1b9 0901 	subs.w	r9, r9, #1
 8016758:	d505      	bpl.n	8016766 <_fwalk_sglue+0x22>
 801675a:	6824      	ldr	r4, [r4, #0]
 801675c:	2c00      	cmp	r4, #0
 801675e:	d1f7      	bne.n	8016750 <_fwalk_sglue+0xc>
 8016760:	4630      	mov	r0, r6
 8016762:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016766:	89ab      	ldrh	r3, [r5, #12]
 8016768:	2b01      	cmp	r3, #1
 801676a:	d907      	bls.n	801677c <_fwalk_sglue+0x38>
 801676c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016770:	3301      	adds	r3, #1
 8016772:	d003      	beq.n	801677c <_fwalk_sglue+0x38>
 8016774:	4629      	mov	r1, r5
 8016776:	4638      	mov	r0, r7
 8016778:	47c0      	blx	r8
 801677a:	4306      	orrs	r6, r0
 801677c:	3568      	adds	r5, #104	@ 0x68
 801677e:	e7e9      	b.n	8016754 <_fwalk_sglue+0x10>

08016780 <iprintf>:
 8016780:	b40f      	push	{r0, r1, r2, r3}
 8016782:	b507      	push	{r0, r1, r2, lr}
 8016784:	4906      	ldr	r1, [pc, #24]	@ (80167a0 <iprintf+0x20>)
 8016786:	ab04      	add	r3, sp, #16
 8016788:	6808      	ldr	r0, [r1, #0]
 801678a:	f853 2b04 	ldr.w	r2, [r3], #4
 801678e:	6881      	ldr	r1, [r0, #8]
 8016790:	9301      	str	r3, [sp, #4]
 8016792:	f000 fcd7 	bl	8017144 <_vfiprintf_r>
 8016796:	b003      	add	sp, #12
 8016798:	f85d eb04 	ldr.w	lr, [sp], #4
 801679c:	b004      	add	sp, #16
 801679e:	4770      	bx	lr
 80167a0:	24000020 	.word	0x24000020

080167a4 <_puts_r>:
 80167a4:	6a03      	ldr	r3, [r0, #32]
 80167a6:	b570      	push	{r4, r5, r6, lr}
 80167a8:	6884      	ldr	r4, [r0, #8]
 80167aa:	4605      	mov	r5, r0
 80167ac:	460e      	mov	r6, r1
 80167ae:	b90b      	cbnz	r3, 80167b4 <_puts_r+0x10>
 80167b0:	f7ff ffb0 	bl	8016714 <__sinit>
 80167b4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80167b6:	07db      	lsls	r3, r3, #31
 80167b8:	d405      	bmi.n	80167c6 <_puts_r+0x22>
 80167ba:	89a3      	ldrh	r3, [r4, #12]
 80167bc:	0598      	lsls	r0, r3, #22
 80167be:	d402      	bmi.n	80167c6 <_puts_r+0x22>
 80167c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80167c2:	f000 fae2 	bl	8016d8a <__retarget_lock_acquire_recursive>
 80167c6:	89a3      	ldrh	r3, [r4, #12]
 80167c8:	0719      	lsls	r1, r3, #28
 80167ca:	d502      	bpl.n	80167d2 <_puts_r+0x2e>
 80167cc:	6923      	ldr	r3, [r4, #16]
 80167ce:	2b00      	cmp	r3, #0
 80167d0:	d135      	bne.n	801683e <_puts_r+0x9a>
 80167d2:	4621      	mov	r1, r4
 80167d4:	4628      	mov	r0, r5
 80167d6:	f000 f99b 	bl	8016b10 <__swsetup_r>
 80167da:	b380      	cbz	r0, 801683e <_puts_r+0x9a>
 80167dc:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80167e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80167e2:	07da      	lsls	r2, r3, #31
 80167e4:	d405      	bmi.n	80167f2 <_puts_r+0x4e>
 80167e6:	89a3      	ldrh	r3, [r4, #12]
 80167e8:	059b      	lsls	r3, r3, #22
 80167ea:	d402      	bmi.n	80167f2 <_puts_r+0x4e>
 80167ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80167ee:	f000 facd 	bl	8016d8c <__retarget_lock_release_recursive>
 80167f2:	4628      	mov	r0, r5
 80167f4:	bd70      	pop	{r4, r5, r6, pc}
 80167f6:	2b00      	cmp	r3, #0
 80167f8:	da04      	bge.n	8016804 <_puts_r+0x60>
 80167fa:	69a2      	ldr	r2, [r4, #24]
 80167fc:	429a      	cmp	r2, r3
 80167fe:	dc17      	bgt.n	8016830 <_puts_r+0x8c>
 8016800:	290a      	cmp	r1, #10
 8016802:	d015      	beq.n	8016830 <_puts_r+0x8c>
 8016804:	6823      	ldr	r3, [r4, #0]
 8016806:	1c5a      	adds	r2, r3, #1
 8016808:	6022      	str	r2, [r4, #0]
 801680a:	7019      	strb	r1, [r3, #0]
 801680c:	68a3      	ldr	r3, [r4, #8]
 801680e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016812:	3b01      	subs	r3, #1
 8016814:	60a3      	str	r3, [r4, #8]
 8016816:	2900      	cmp	r1, #0
 8016818:	d1ed      	bne.n	80167f6 <_puts_r+0x52>
 801681a:	2b00      	cmp	r3, #0
 801681c:	da11      	bge.n	8016842 <_puts_r+0x9e>
 801681e:	4622      	mov	r2, r4
 8016820:	210a      	movs	r1, #10
 8016822:	4628      	mov	r0, r5
 8016824:	f000 f935 	bl	8016a92 <__swbuf_r>
 8016828:	3001      	adds	r0, #1
 801682a:	d0d7      	beq.n	80167dc <_puts_r+0x38>
 801682c:	250a      	movs	r5, #10
 801682e:	e7d7      	b.n	80167e0 <_puts_r+0x3c>
 8016830:	4622      	mov	r2, r4
 8016832:	4628      	mov	r0, r5
 8016834:	f000 f92d 	bl	8016a92 <__swbuf_r>
 8016838:	3001      	adds	r0, #1
 801683a:	d1e7      	bne.n	801680c <_puts_r+0x68>
 801683c:	e7ce      	b.n	80167dc <_puts_r+0x38>
 801683e:	3e01      	subs	r6, #1
 8016840:	e7e4      	b.n	801680c <_puts_r+0x68>
 8016842:	6823      	ldr	r3, [r4, #0]
 8016844:	1c5a      	adds	r2, r3, #1
 8016846:	6022      	str	r2, [r4, #0]
 8016848:	220a      	movs	r2, #10
 801684a:	701a      	strb	r2, [r3, #0]
 801684c:	e7ee      	b.n	801682c <_puts_r+0x88>
	...

08016850 <puts>:
 8016850:	4b02      	ldr	r3, [pc, #8]	@ (801685c <puts+0xc>)
 8016852:	4601      	mov	r1, r0
 8016854:	6818      	ldr	r0, [r3, #0]
 8016856:	f7ff bfa5 	b.w	80167a4 <_puts_r>
 801685a:	bf00      	nop
 801685c:	24000020 	.word	0x24000020

08016860 <setvbuf>:
 8016860:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016864:	461d      	mov	r5, r3
 8016866:	4b57      	ldr	r3, [pc, #348]	@ (80169c4 <setvbuf+0x164>)
 8016868:	681f      	ldr	r7, [r3, #0]
 801686a:	4604      	mov	r4, r0
 801686c:	460e      	mov	r6, r1
 801686e:	4690      	mov	r8, r2
 8016870:	b127      	cbz	r7, 801687c <setvbuf+0x1c>
 8016872:	6a3b      	ldr	r3, [r7, #32]
 8016874:	b913      	cbnz	r3, 801687c <setvbuf+0x1c>
 8016876:	4638      	mov	r0, r7
 8016878:	f7ff ff4c 	bl	8016714 <__sinit>
 801687c:	f1b8 0f02 	cmp.w	r8, #2
 8016880:	d006      	beq.n	8016890 <setvbuf+0x30>
 8016882:	f1b8 0f01 	cmp.w	r8, #1
 8016886:	f200 809a 	bhi.w	80169be <setvbuf+0x15e>
 801688a:	2d00      	cmp	r5, #0
 801688c:	f2c0 8097 	blt.w	80169be <setvbuf+0x15e>
 8016890:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016892:	07d9      	lsls	r1, r3, #31
 8016894:	d405      	bmi.n	80168a2 <setvbuf+0x42>
 8016896:	89a3      	ldrh	r3, [r4, #12]
 8016898:	059a      	lsls	r2, r3, #22
 801689a:	d402      	bmi.n	80168a2 <setvbuf+0x42>
 801689c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801689e:	f000 fa74 	bl	8016d8a <__retarget_lock_acquire_recursive>
 80168a2:	4621      	mov	r1, r4
 80168a4:	4638      	mov	r0, r7
 80168a6:	f000 ff75 	bl	8017794 <_fflush_r>
 80168aa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80168ac:	b141      	cbz	r1, 80168c0 <setvbuf+0x60>
 80168ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80168b2:	4299      	cmp	r1, r3
 80168b4:	d002      	beq.n	80168bc <setvbuf+0x5c>
 80168b6:	4638      	mov	r0, r7
 80168b8:	f000 fa78 	bl	8016dac <_free_r>
 80168bc:	2300      	movs	r3, #0
 80168be:	6363      	str	r3, [r4, #52]	@ 0x34
 80168c0:	2300      	movs	r3, #0
 80168c2:	61a3      	str	r3, [r4, #24]
 80168c4:	6063      	str	r3, [r4, #4]
 80168c6:	89a3      	ldrh	r3, [r4, #12]
 80168c8:	061b      	lsls	r3, r3, #24
 80168ca:	d503      	bpl.n	80168d4 <setvbuf+0x74>
 80168cc:	6921      	ldr	r1, [r4, #16]
 80168ce:	4638      	mov	r0, r7
 80168d0:	f000 fa6c 	bl	8016dac <_free_r>
 80168d4:	89a3      	ldrh	r3, [r4, #12]
 80168d6:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 80168da:	f023 0303 	bic.w	r3, r3, #3
 80168de:	f1b8 0f02 	cmp.w	r8, #2
 80168e2:	81a3      	strh	r3, [r4, #12]
 80168e4:	d061      	beq.n	80169aa <setvbuf+0x14a>
 80168e6:	ab01      	add	r3, sp, #4
 80168e8:	466a      	mov	r2, sp
 80168ea:	4621      	mov	r1, r4
 80168ec:	4638      	mov	r0, r7
 80168ee:	f000 ff79 	bl	80177e4 <__swhatbuf_r>
 80168f2:	89a3      	ldrh	r3, [r4, #12]
 80168f4:	4318      	orrs	r0, r3
 80168f6:	81a0      	strh	r0, [r4, #12]
 80168f8:	bb2d      	cbnz	r5, 8016946 <setvbuf+0xe6>
 80168fa:	9d00      	ldr	r5, [sp, #0]
 80168fc:	4628      	mov	r0, r5
 80168fe:	f7ff fdbf 	bl	8016480 <malloc>
 8016902:	4606      	mov	r6, r0
 8016904:	2800      	cmp	r0, #0
 8016906:	d152      	bne.n	80169ae <setvbuf+0x14e>
 8016908:	f8dd 9000 	ldr.w	r9, [sp]
 801690c:	45a9      	cmp	r9, r5
 801690e:	d140      	bne.n	8016992 <setvbuf+0x132>
 8016910:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8016914:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016918:	f043 0202 	orr.w	r2, r3, #2
 801691c:	81a2      	strh	r2, [r4, #12]
 801691e:	2200      	movs	r2, #0
 8016920:	60a2      	str	r2, [r4, #8]
 8016922:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8016926:	6022      	str	r2, [r4, #0]
 8016928:	6122      	str	r2, [r4, #16]
 801692a:	2201      	movs	r2, #1
 801692c:	6162      	str	r2, [r4, #20]
 801692e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8016930:	07d6      	lsls	r6, r2, #31
 8016932:	d404      	bmi.n	801693e <setvbuf+0xde>
 8016934:	0598      	lsls	r0, r3, #22
 8016936:	d402      	bmi.n	801693e <setvbuf+0xde>
 8016938:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801693a:	f000 fa27 	bl	8016d8c <__retarget_lock_release_recursive>
 801693e:	4628      	mov	r0, r5
 8016940:	b003      	add	sp, #12
 8016942:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016946:	2e00      	cmp	r6, #0
 8016948:	d0d8      	beq.n	80168fc <setvbuf+0x9c>
 801694a:	6a3b      	ldr	r3, [r7, #32]
 801694c:	b913      	cbnz	r3, 8016954 <setvbuf+0xf4>
 801694e:	4638      	mov	r0, r7
 8016950:	f7ff fee0 	bl	8016714 <__sinit>
 8016954:	f1b8 0f01 	cmp.w	r8, #1
 8016958:	bf08      	it	eq
 801695a:	89a3      	ldrheq	r3, [r4, #12]
 801695c:	6026      	str	r6, [r4, #0]
 801695e:	bf04      	itt	eq
 8016960:	f043 0301 	orreq.w	r3, r3, #1
 8016964:	81a3      	strheq	r3, [r4, #12]
 8016966:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801696a:	f013 0208 	ands.w	r2, r3, #8
 801696e:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8016972:	d01e      	beq.n	80169b2 <setvbuf+0x152>
 8016974:	07d9      	lsls	r1, r3, #31
 8016976:	bf41      	itttt	mi
 8016978:	2200      	movmi	r2, #0
 801697a:	426d      	negmi	r5, r5
 801697c:	60a2      	strmi	r2, [r4, #8]
 801697e:	61a5      	strmi	r5, [r4, #24]
 8016980:	bf58      	it	pl
 8016982:	60a5      	strpl	r5, [r4, #8]
 8016984:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8016986:	07d2      	lsls	r2, r2, #31
 8016988:	d401      	bmi.n	801698e <setvbuf+0x12e>
 801698a:	059b      	lsls	r3, r3, #22
 801698c:	d513      	bpl.n	80169b6 <setvbuf+0x156>
 801698e:	2500      	movs	r5, #0
 8016990:	e7d5      	b.n	801693e <setvbuf+0xde>
 8016992:	4648      	mov	r0, r9
 8016994:	f7ff fd74 	bl	8016480 <malloc>
 8016998:	4606      	mov	r6, r0
 801699a:	2800      	cmp	r0, #0
 801699c:	d0b8      	beq.n	8016910 <setvbuf+0xb0>
 801699e:	89a3      	ldrh	r3, [r4, #12]
 80169a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80169a4:	81a3      	strh	r3, [r4, #12]
 80169a6:	464d      	mov	r5, r9
 80169a8:	e7cf      	b.n	801694a <setvbuf+0xea>
 80169aa:	2500      	movs	r5, #0
 80169ac:	e7b2      	b.n	8016914 <setvbuf+0xb4>
 80169ae:	46a9      	mov	r9, r5
 80169b0:	e7f5      	b.n	801699e <setvbuf+0x13e>
 80169b2:	60a2      	str	r2, [r4, #8]
 80169b4:	e7e6      	b.n	8016984 <setvbuf+0x124>
 80169b6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80169b8:	f000 f9e8 	bl	8016d8c <__retarget_lock_release_recursive>
 80169bc:	e7e7      	b.n	801698e <setvbuf+0x12e>
 80169be:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80169c2:	e7bc      	b.n	801693e <setvbuf+0xde>
 80169c4:	24000020 	.word	0x24000020

080169c8 <siprintf>:
 80169c8:	b40e      	push	{r1, r2, r3}
 80169ca:	b510      	push	{r4, lr}
 80169cc:	b09d      	sub	sp, #116	@ 0x74
 80169ce:	ab1f      	add	r3, sp, #124	@ 0x7c
 80169d0:	9002      	str	r0, [sp, #8]
 80169d2:	9006      	str	r0, [sp, #24]
 80169d4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80169d8:	480a      	ldr	r0, [pc, #40]	@ (8016a04 <siprintf+0x3c>)
 80169da:	9107      	str	r1, [sp, #28]
 80169dc:	9104      	str	r1, [sp, #16]
 80169de:	490a      	ldr	r1, [pc, #40]	@ (8016a08 <siprintf+0x40>)
 80169e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80169e4:	9105      	str	r1, [sp, #20]
 80169e6:	2400      	movs	r4, #0
 80169e8:	a902      	add	r1, sp, #8
 80169ea:	6800      	ldr	r0, [r0, #0]
 80169ec:	9301      	str	r3, [sp, #4]
 80169ee:	941b      	str	r4, [sp, #108]	@ 0x6c
 80169f0:	f000 fa82 	bl	8016ef8 <_svfiprintf_r>
 80169f4:	9b02      	ldr	r3, [sp, #8]
 80169f6:	701c      	strb	r4, [r3, #0]
 80169f8:	b01d      	add	sp, #116	@ 0x74
 80169fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80169fe:	b003      	add	sp, #12
 8016a00:	4770      	bx	lr
 8016a02:	bf00      	nop
 8016a04:	24000020 	.word	0x24000020
 8016a08:	ffff0208 	.word	0xffff0208

08016a0c <__sread>:
 8016a0c:	b510      	push	{r4, lr}
 8016a0e:	460c      	mov	r4, r1
 8016a10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016a14:	f000 f95a 	bl	8016ccc <_read_r>
 8016a18:	2800      	cmp	r0, #0
 8016a1a:	bfab      	itete	ge
 8016a1c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8016a1e:	89a3      	ldrhlt	r3, [r4, #12]
 8016a20:	181b      	addge	r3, r3, r0
 8016a22:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8016a26:	bfac      	ite	ge
 8016a28:	6563      	strge	r3, [r4, #84]	@ 0x54
 8016a2a:	81a3      	strhlt	r3, [r4, #12]
 8016a2c:	bd10      	pop	{r4, pc}

08016a2e <__swrite>:
 8016a2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a32:	461f      	mov	r7, r3
 8016a34:	898b      	ldrh	r3, [r1, #12]
 8016a36:	05db      	lsls	r3, r3, #23
 8016a38:	4605      	mov	r5, r0
 8016a3a:	460c      	mov	r4, r1
 8016a3c:	4616      	mov	r6, r2
 8016a3e:	d505      	bpl.n	8016a4c <__swrite+0x1e>
 8016a40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016a44:	2302      	movs	r3, #2
 8016a46:	2200      	movs	r2, #0
 8016a48:	f000 f92e 	bl	8016ca8 <_lseek_r>
 8016a4c:	89a3      	ldrh	r3, [r4, #12]
 8016a4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016a52:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8016a56:	81a3      	strh	r3, [r4, #12]
 8016a58:	4632      	mov	r2, r6
 8016a5a:	463b      	mov	r3, r7
 8016a5c:	4628      	mov	r0, r5
 8016a5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016a62:	f000 b955 	b.w	8016d10 <_write_r>

08016a66 <__sseek>:
 8016a66:	b510      	push	{r4, lr}
 8016a68:	460c      	mov	r4, r1
 8016a6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016a6e:	f000 f91b 	bl	8016ca8 <_lseek_r>
 8016a72:	1c43      	adds	r3, r0, #1
 8016a74:	89a3      	ldrh	r3, [r4, #12]
 8016a76:	bf15      	itete	ne
 8016a78:	6560      	strne	r0, [r4, #84]	@ 0x54
 8016a7a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8016a7e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8016a82:	81a3      	strheq	r3, [r4, #12]
 8016a84:	bf18      	it	ne
 8016a86:	81a3      	strhne	r3, [r4, #12]
 8016a88:	bd10      	pop	{r4, pc}

08016a8a <__sclose>:
 8016a8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016a8e:	f000 b89d 	b.w	8016bcc <_close_r>

08016a92 <__swbuf_r>:
 8016a92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016a94:	460e      	mov	r6, r1
 8016a96:	4614      	mov	r4, r2
 8016a98:	4605      	mov	r5, r0
 8016a9a:	b118      	cbz	r0, 8016aa4 <__swbuf_r+0x12>
 8016a9c:	6a03      	ldr	r3, [r0, #32]
 8016a9e:	b90b      	cbnz	r3, 8016aa4 <__swbuf_r+0x12>
 8016aa0:	f7ff fe38 	bl	8016714 <__sinit>
 8016aa4:	69a3      	ldr	r3, [r4, #24]
 8016aa6:	60a3      	str	r3, [r4, #8]
 8016aa8:	89a3      	ldrh	r3, [r4, #12]
 8016aaa:	071a      	lsls	r2, r3, #28
 8016aac:	d501      	bpl.n	8016ab2 <__swbuf_r+0x20>
 8016aae:	6923      	ldr	r3, [r4, #16]
 8016ab0:	b943      	cbnz	r3, 8016ac4 <__swbuf_r+0x32>
 8016ab2:	4621      	mov	r1, r4
 8016ab4:	4628      	mov	r0, r5
 8016ab6:	f000 f82b 	bl	8016b10 <__swsetup_r>
 8016aba:	b118      	cbz	r0, 8016ac4 <__swbuf_r+0x32>
 8016abc:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8016ac0:	4638      	mov	r0, r7
 8016ac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016ac4:	6823      	ldr	r3, [r4, #0]
 8016ac6:	6922      	ldr	r2, [r4, #16]
 8016ac8:	1a98      	subs	r0, r3, r2
 8016aca:	6963      	ldr	r3, [r4, #20]
 8016acc:	b2f6      	uxtb	r6, r6
 8016ace:	4283      	cmp	r3, r0
 8016ad0:	4637      	mov	r7, r6
 8016ad2:	dc05      	bgt.n	8016ae0 <__swbuf_r+0x4e>
 8016ad4:	4621      	mov	r1, r4
 8016ad6:	4628      	mov	r0, r5
 8016ad8:	f000 fe5c 	bl	8017794 <_fflush_r>
 8016adc:	2800      	cmp	r0, #0
 8016ade:	d1ed      	bne.n	8016abc <__swbuf_r+0x2a>
 8016ae0:	68a3      	ldr	r3, [r4, #8]
 8016ae2:	3b01      	subs	r3, #1
 8016ae4:	60a3      	str	r3, [r4, #8]
 8016ae6:	6823      	ldr	r3, [r4, #0]
 8016ae8:	1c5a      	adds	r2, r3, #1
 8016aea:	6022      	str	r2, [r4, #0]
 8016aec:	701e      	strb	r6, [r3, #0]
 8016aee:	6962      	ldr	r2, [r4, #20]
 8016af0:	1c43      	adds	r3, r0, #1
 8016af2:	429a      	cmp	r2, r3
 8016af4:	d004      	beq.n	8016b00 <__swbuf_r+0x6e>
 8016af6:	89a3      	ldrh	r3, [r4, #12]
 8016af8:	07db      	lsls	r3, r3, #31
 8016afa:	d5e1      	bpl.n	8016ac0 <__swbuf_r+0x2e>
 8016afc:	2e0a      	cmp	r6, #10
 8016afe:	d1df      	bne.n	8016ac0 <__swbuf_r+0x2e>
 8016b00:	4621      	mov	r1, r4
 8016b02:	4628      	mov	r0, r5
 8016b04:	f000 fe46 	bl	8017794 <_fflush_r>
 8016b08:	2800      	cmp	r0, #0
 8016b0a:	d0d9      	beq.n	8016ac0 <__swbuf_r+0x2e>
 8016b0c:	e7d6      	b.n	8016abc <__swbuf_r+0x2a>
	...

08016b10 <__swsetup_r>:
 8016b10:	b538      	push	{r3, r4, r5, lr}
 8016b12:	4b29      	ldr	r3, [pc, #164]	@ (8016bb8 <__swsetup_r+0xa8>)
 8016b14:	4605      	mov	r5, r0
 8016b16:	6818      	ldr	r0, [r3, #0]
 8016b18:	460c      	mov	r4, r1
 8016b1a:	b118      	cbz	r0, 8016b24 <__swsetup_r+0x14>
 8016b1c:	6a03      	ldr	r3, [r0, #32]
 8016b1e:	b90b      	cbnz	r3, 8016b24 <__swsetup_r+0x14>
 8016b20:	f7ff fdf8 	bl	8016714 <__sinit>
 8016b24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016b28:	0719      	lsls	r1, r3, #28
 8016b2a:	d422      	bmi.n	8016b72 <__swsetup_r+0x62>
 8016b2c:	06da      	lsls	r2, r3, #27
 8016b2e:	d407      	bmi.n	8016b40 <__swsetup_r+0x30>
 8016b30:	2209      	movs	r2, #9
 8016b32:	602a      	str	r2, [r5, #0]
 8016b34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016b38:	81a3      	strh	r3, [r4, #12]
 8016b3a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016b3e:	e033      	b.n	8016ba8 <__swsetup_r+0x98>
 8016b40:	0758      	lsls	r0, r3, #29
 8016b42:	d512      	bpl.n	8016b6a <__swsetup_r+0x5a>
 8016b44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016b46:	b141      	cbz	r1, 8016b5a <__swsetup_r+0x4a>
 8016b48:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016b4c:	4299      	cmp	r1, r3
 8016b4e:	d002      	beq.n	8016b56 <__swsetup_r+0x46>
 8016b50:	4628      	mov	r0, r5
 8016b52:	f000 f92b 	bl	8016dac <_free_r>
 8016b56:	2300      	movs	r3, #0
 8016b58:	6363      	str	r3, [r4, #52]	@ 0x34
 8016b5a:	89a3      	ldrh	r3, [r4, #12]
 8016b5c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8016b60:	81a3      	strh	r3, [r4, #12]
 8016b62:	2300      	movs	r3, #0
 8016b64:	6063      	str	r3, [r4, #4]
 8016b66:	6923      	ldr	r3, [r4, #16]
 8016b68:	6023      	str	r3, [r4, #0]
 8016b6a:	89a3      	ldrh	r3, [r4, #12]
 8016b6c:	f043 0308 	orr.w	r3, r3, #8
 8016b70:	81a3      	strh	r3, [r4, #12]
 8016b72:	6923      	ldr	r3, [r4, #16]
 8016b74:	b94b      	cbnz	r3, 8016b8a <__swsetup_r+0x7a>
 8016b76:	89a3      	ldrh	r3, [r4, #12]
 8016b78:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8016b7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016b80:	d003      	beq.n	8016b8a <__swsetup_r+0x7a>
 8016b82:	4621      	mov	r1, r4
 8016b84:	4628      	mov	r0, r5
 8016b86:	f000 fe53 	bl	8017830 <__smakebuf_r>
 8016b8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016b8e:	f013 0201 	ands.w	r2, r3, #1
 8016b92:	d00a      	beq.n	8016baa <__swsetup_r+0x9a>
 8016b94:	2200      	movs	r2, #0
 8016b96:	60a2      	str	r2, [r4, #8]
 8016b98:	6962      	ldr	r2, [r4, #20]
 8016b9a:	4252      	negs	r2, r2
 8016b9c:	61a2      	str	r2, [r4, #24]
 8016b9e:	6922      	ldr	r2, [r4, #16]
 8016ba0:	b942      	cbnz	r2, 8016bb4 <__swsetup_r+0xa4>
 8016ba2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8016ba6:	d1c5      	bne.n	8016b34 <__swsetup_r+0x24>
 8016ba8:	bd38      	pop	{r3, r4, r5, pc}
 8016baa:	0799      	lsls	r1, r3, #30
 8016bac:	bf58      	it	pl
 8016bae:	6962      	ldrpl	r2, [r4, #20]
 8016bb0:	60a2      	str	r2, [r4, #8]
 8016bb2:	e7f4      	b.n	8016b9e <__swsetup_r+0x8e>
 8016bb4:	2000      	movs	r0, #0
 8016bb6:	e7f7      	b.n	8016ba8 <__swsetup_r+0x98>
 8016bb8:	24000020 	.word	0x24000020

08016bbc <memset>:
 8016bbc:	4402      	add	r2, r0
 8016bbe:	4603      	mov	r3, r0
 8016bc0:	4293      	cmp	r3, r2
 8016bc2:	d100      	bne.n	8016bc6 <memset+0xa>
 8016bc4:	4770      	bx	lr
 8016bc6:	f803 1b01 	strb.w	r1, [r3], #1
 8016bca:	e7f9      	b.n	8016bc0 <memset+0x4>

08016bcc <_close_r>:
 8016bcc:	b538      	push	{r3, r4, r5, lr}
 8016bce:	4d06      	ldr	r5, [pc, #24]	@ (8016be8 <_close_r+0x1c>)
 8016bd0:	2300      	movs	r3, #0
 8016bd2:	4604      	mov	r4, r0
 8016bd4:	4608      	mov	r0, r1
 8016bd6:	602b      	str	r3, [r5, #0]
 8016bd8:	f7ea fb66 	bl	80012a8 <_close>
 8016bdc:	1c43      	adds	r3, r0, #1
 8016bde:	d102      	bne.n	8016be6 <_close_r+0x1a>
 8016be0:	682b      	ldr	r3, [r5, #0]
 8016be2:	b103      	cbz	r3, 8016be6 <_close_r+0x1a>
 8016be4:	6023      	str	r3, [r4, #0]
 8016be6:	bd38      	pop	{r3, r4, r5, pc}
 8016be8:	24005598 	.word	0x24005598

08016bec <_reclaim_reent>:
 8016bec:	4b2d      	ldr	r3, [pc, #180]	@ (8016ca4 <_reclaim_reent+0xb8>)
 8016bee:	681b      	ldr	r3, [r3, #0]
 8016bf0:	4283      	cmp	r3, r0
 8016bf2:	b570      	push	{r4, r5, r6, lr}
 8016bf4:	4604      	mov	r4, r0
 8016bf6:	d053      	beq.n	8016ca0 <_reclaim_reent+0xb4>
 8016bf8:	69c3      	ldr	r3, [r0, #28]
 8016bfa:	b31b      	cbz	r3, 8016c44 <_reclaim_reent+0x58>
 8016bfc:	68db      	ldr	r3, [r3, #12]
 8016bfe:	b163      	cbz	r3, 8016c1a <_reclaim_reent+0x2e>
 8016c00:	2500      	movs	r5, #0
 8016c02:	69e3      	ldr	r3, [r4, #28]
 8016c04:	68db      	ldr	r3, [r3, #12]
 8016c06:	5959      	ldr	r1, [r3, r5]
 8016c08:	b9b1      	cbnz	r1, 8016c38 <_reclaim_reent+0x4c>
 8016c0a:	3504      	adds	r5, #4
 8016c0c:	2d80      	cmp	r5, #128	@ 0x80
 8016c0e:	d1f8      	bne.n	8016c02 <_reclaim_reent+0x16>
 8016c10:	69e3      	ldr	r3, [r4, #28]
 8016c12:	4620      	mov	r0, r4
 8016c14:	68d9      	ldr	r1, [r3, #12]
 8016c16:	f000 f8c9 	bl	8016dac <_free_r>
 8016c1a:	69e3      	ldr	r3, [r4, #28]
 8016c1c:	6819      	ldr	r1, [r3, #0]
 8016c1e:	b111      	cbz	r1, 8016c26 <_reclaim_reent+0x3a>
 8016c20:	4620      	mov	r0, r4
 8016c22:	f000 f8c3 	bl	8016dac <_free_r>
 8016c26:	69e3      	ldr	r3, [r4, #28]
 8016c28:	689d      	ldr	r5, [r3, #8]
 8016c2a:	b15d      	cbz	r5, 8016c44 <_reclaim_reent+0x58>
 8016c2c:	4629      	mov	r1, r5
 8016c2e:	4620      	mov	r0, r4
 8016c30:	682d      	ldr	r5, [r5, #0]
 8016c32:	f000 f8bb 	bl	8016dac <_free_r>
 8016c36:	e7f8      	b.n	8016c2a <_reclaim_reent+0x3e>
 8016c38:	680e      	ldr	r6, [r1, #0]
 8016c3a:	4620      	mov	r0, r4
 8016c3c:	f000 f8b6 	bl	8016dac <_free_r>
 8016c40:	4631      	mov	r1, r6
 8016c42:	e7e1      	b.n	8016c08 <_reclaim_reent+0x1c>
 8016c44:	6961      	ldr	r1, [r4, #20]
 8016c46:	b111      	cbz	r1, 8016c4e <_reclaim_reent+0x62>
 8016c48:	4620      	mov	r0, r4
 8016c4a:	f000 f8af 	bl	8016dac <_free_r>
 8016c4e:	69e1      	ldr	r1, [r4, #28]
 8016c50:	b111      	cbz	r1, 8016c58 <_reclaim_reent+0x6c>
 8016c52:	4620      	mov	r0, r4
 8016c54:	f000 f8aa 	bl	8016dac <_free_r>
 8016c58:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8016c5a:	b111      	cbz	r1, 8016c62 <_reclaim_reent+0x76>
 8016c5c:	4620      	mov	r0, r4
 8016c5e:	f000 f8a5 	bl	8016dac <_free_r>
 8016c62:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016c64:	b111      	cbz	r1, 8016c6c <_reclaim_reent+0x80>
 8016c66:	4620      	mov	r0, r4
 8016c68:	f000 f8a0 	bl	8016dac <_free_r>
 8016c6c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8016c6e:	b111      	cbz	r1, 8016c76 <_reclaim_reent+0x8a>
 8016c70:	4620      	mov	r0, r4
 8016c72:	f000 f89b 	bl	8016dac <_free_r>
 8016c76:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8016c78:	b111      	cbz	r1, 8016c80 <_reclaim_reent+0x94>
 8016c7a:	4620      	mov	r0, r4
 8016c7c:	f000 f896 	bl	8016dac <_free_r>
 8016c80:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8016c82:	b111      	cbz	r1, 8016c8a <_reclaim_reent+0x9e>
 8016c84:	4620      	mov	r0, r4
 8016c86:	f000 f891 	bl	8016dac <_free_r>
 8016c8a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8016c8c:	b111      	cbz	r1, 8016c94 <_reclaim_reent+0xa8>
 8016c8e:	4620      	mov	r0, r4
 8016c90:	f000 f88c 	bl	8016dac <_free_r>
 8016c94:	6a23      	ldr	r3, [r4, #32]
 8016c96:	b11b      	cbz	r3, 8016ca0 <_reclaim_reent+0xb4>
 8016c98:	4620      	mov	r0, r4
 8016c9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016c9e:	4718      	bx	r3
 8016ca0:	bd70      	pop	{r4, r5, r6, pc}
 8016ca2:	bf00      	nop
 8016ca4:	24000020 	.word	0x24000020

08016ca8 <_lseek_r>:
 8016ca8:	b538      	push	{r3, r4, r5, lr}
 8016caa:	4d07      	ldr	r5, [pc, #28]	@ (8016cc8 <_lseek_r+0x20>)
 8016cac:	4604      	mov	r4, r0
 8016cae:	4608      	mov	r0, r1
 8016cb0:	4611      	mov	r1, r2
 8016cb2:	2200      	movs	r2, #0
 8016cb4:	602a      	str	r2, [r5, #0]
 8016cb6:	461a      	mov	r2, r3
 8016cb8:	f7ea fb0d 	bl	80012d6 <_lseek>
 8016cbc:	1c43      	adds	r3, r0, #1
 8016cbe:	d102      	bne.n	8016cc6 <_lseek_r+0x1e>
 8016cc0:	682b      	ldr	r3, [r5, #0]
 8016cc2:	b103      	cbz	r3, 8016cc6 <_lseek_r+0x1e>
 8016cc4:	6023      	str	r3, [r4, #0]
 8016cc6:	bd38      	pop	{r3, r4, r5, pc}
 8016cc8:	24005598 	.word	0x24005598

08016ccc <_read_r>:
 8016ccc:	b538      	push	{r3, r4, r5, lr}
 8016cce:	4d07      	ldr	r5, [pc, #28]	@ (8016cec <_read_r+0x20>)
 8016cd0:	4604      	mov	r4, r0
 8016cd2:	4608      	mov	r0, r1
 8016cd4:	4611      	mov	r1, r2
 8016cd6:	2200      	movs	r2, #0
 8016cd8:	602a      	str	r2, [r5, #0]
 8016cda:	461a      	mov	r2, r3
 8016cdc:	f7ea fb0c 	bl	80012f8 <_read>
 8016ce0:	1c43      	adds	r3, r0, #1
 8016ce2:	d102      	bne.n	8016cea <_read_r+0x1e>
 8016ce4:	682b      	ldr	r3, [r5, #0]
 8016ce6:	b103      	cbz	r3, 8016cea <_read_r+0x1e>
 8016ce8:	6023      	str	r3, [r4, #0]
 8016cea:	bd38      	pop	{r3, r4, r5, pc}
 8016cec:	24005598 	.word	0x24005598

08016cf0 <_sbrk_r>:
 8016cf0:	b538      	push	{r3, r4, r5, lr}
 8016cf2:	4d06      	ldr	r5, [pc, #24]	@ (8016d0c <_sbrk_r+0x1c>)
 8016cf4:	2300      	movs	r3, #0
 8016cf6:	4604      	mov	r4, r0
 8016cf8:	4608      	mov	r0, r1
 8016cfa:	602b      	str	r3, [r5, #0]
 8016cfc:	f7ea fd82 	bl	8001804 <_sbrk>
 8016d00:	1c43      	adds	r3, r0, #1
 8016d02:	d102      	bne.n	8016d0a <_sbrk_r+0x1a>
 8016d04:	682b      	ldr	r3, [r5, #0]
 8016d06:	b103      	cbz	r3, 8016d0a <_sbrk_r+0x1a>
 8016d08:	6023      	str	r3, [r4, #0]
 8016d0a:	bd38      	pop	{r3, r4, r5, pc}
 8016d0c:	24005598 	.word	0x24005598

08016d10 <_write_r>:
 8016d10:	b538      	push	{r3, r4, r5, lr}
 8016d12:	4d07      	ldr	r5, [pc, #28]	@ (8016d30 <_write_r+0x20>)
 8016d14:	4604      	mov	r4, r0
 8016d16:	4608      	mov	r0, r1
 8016d18:	4611      	mov	r1, r2
 8016d1a:	2200      	movs	r2, #0
 8016d1c:	602a      	str	r2, [r5, #0]
 8016d1e:	461a      	mov	r2, r3
 8016d20:	f7ea fa96 	bl	8001250 <_write>
 8016d24:	1c43      	adds	r3, r0, #1
 8016d26:	d102      	bne.n	8016d2e <_write_r+0x1e>
 8016d28:	682b      	ldr	r3, [r5, #0]
 8016d2a:	b103      	cbz	r3, 8016d2e <_write_r+0x1e>
 8016d2c:	6023      	str	r3, [r4, #0]
 8016d2e:	bd38      	pop	{r3, r4, r5, pc}
 8016d30:	24005598 	.word	0x24005598

08016d34 <__errno>:
 8016d34:	4b01      	ldr	r3, [pc, #4]	@ (8016d3c <__errno+0x8>)
 8016d36:	6818      	ldr	r0, [r3, #0]
 8016d38:	4770      	bx	lr
 8016d3a:	bf00      	nop
 8016d3c:	24000020 	.word	0x24000020

08016d40 <__libc_init_array>:
 8016d40:	b570      	push	{r4, r5, r6, lr}
 8016d42:	4d0d      	ldr	r5, [pc, #52]	@ (8016d78 <__libc_init_array+0x38>)
 8016d44:	4c0d      	ldr	r4, [pc, #52]	@ (8016d7c <__libc_init_array+0x3c>)
 8016d46:	1b64      	subs	r4, r4, r5
 8016d48:	10a4      	asrs	r4, r4, #2
 8016d4a:	2600      	movs	r6, #0
 8016d4c:	42a6      	cmp	r6, r4
 8016d4e:	d109      	bne.n	8016d64 <__libc_init_array+0x24>
 8016d50:	4d0b      	ldr	r5, [pc, #44]	@ (8016d80 <__libc_init_array+0x40>)
 8016d52:	4c0c      	ldr	r4, [pc, #48]	@ (8016d84 <__libc_init_array+0x44>)
 8016d54:	f000 fe1a 	bl	801798c <_init>
 8016d58:	1b64      	subs	r4, r4, r5
 8016d5a:	10a4      	asrs	r4, r4, #2
 8016d5c:	2600      	movs	r6, #0
 8016d5e:	42a6      	cmp	r6, r4
 8016d60:	d105      	bne.n	8016d6e <__libc_init_array+0x2e>
 8016d62:	bd70      	pop	{r4, r5, r6, pc}
 8016d64:	f855 3b04 	ldr.w	r3, [r5], #4
 8016d68:	4798      	blx	r3
 8016d6a:	3601      	adds	r6, #1
 8016d6c:	e7ee      	b.n	8016d4c <__libc_init_array+0xc>
 8016d6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8016d72:	4798      	blx	r3
 8016d74:	3601      	adds	r6, #1
 8016d76:	e7f2      	b.n	8016d5e <__libc_init_array+0x1e>
 8016d78:	08017de4 	.word	0x08017de4
 8016d7c:	08017de4 	.word	0x08017de4
 8016d80:	08017de4 	.word	0x08017de4
 8016d84:	08017dec 	.word	0x08017dec

08016d88 <__retarget_lock_init_recursive>:
 8016d88:	4770      	bx	lr

08016d8a <__retarget_lock_acquire_recursive>:
 8016d8a:	4770      	bx	lr

08016d8c <__retarget_lock_release_recursive>:
 8016d8c:	4770      	bx	lr

08016d8e <memcpy>:
 8016d8e:	440a      	add	r2, r1
 8016d90:	4291      	cmp	r1, r2
 8016d92:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8016d96:	d100      	bne.n	8016d9a <memcpy+0xc>
 8016d98:	4770      	bx	lr
 8016d9a:	b510      	push	{r4, lr}
 8016d9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016da0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016da4:	4291      	cmp	r1, r2
 8016da6:	d1f9      	bne.n	8016d9c <memcpy+0xe>
 8016da8:	bd10      	pop	{r4, pc}
	...

08016dac <_free_r>:
 8016dac:	b538      	push	{r3, r4, r5, lr}
 8016dae:	4605      	mov	r5, r0
 8016db0:	2900      	cmp	r1, #0
 8016db2:	d041      	beq.n	8016e38 <_free_r+0x8c>
 8016db4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016db8:	1f0c      	subs	r4, r1, #4
 8016dba:	2b00      	cmp	r3, #0
 8016dbc:	bfb8      	it	lt
 8016dbe:	18e4      	addlt	r4, r4, r3
 8016dc0:	f7ff fc10 	bl	80165e4 <__malloc_lock>
 8016dc4:	4a1d      	ldr	r2, [pc, #116]	@ (8016e3c <_free_r+0x90>)
 8016dc6:	6813      	ldr	r3, [r2, #0]
 8016dc8:	b933      	cbnz	r3, 8016dd8 <_free_r+0x2c>
 8016dca:	6063      	str	r3, [r4, #4]
 8016dcc:	6014      	str	r4, [r2, #0]
 8016dce:	4628      	mov	r0, r5
 8016dd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016dd4:	f7ff bc0c 	b.w	80165f0 <__malloc_unlock>
 8016dd8:	42a3      	cmp	r3, r4
 8016dda:	d908      	bls.n	8016dee <_free_r+0x42>
 8016ddc:	6820      	ldr	r0, [r4, #0]
 8016dde:	1821      	adds	r1, r4, r0
 8016de0:	428b      	cmp	r3, r1
 8016de2:	bf01      	itttt	eq
 8016de4:	6819      	ldreq	r1, [r3, #0]
 8016de6:	685b      	ldreq	r3, [r3, #4]
 8016de8:	1809      	addeq	r1, r1, r0
 8016dea:	6021      	streq	r1, [r4, #0]
 8016dec:	e7ed      	b.n	8016dca <_free_r+0x1e>
 8016dee:	461a      	mov	r2, r3
 8016df0:	685b      	ldr	r3, [r3, #4]
 8016df2:	b10b      	cbz	r3, 8016df8 <_free_r+0x4c>
 8016df4:	42a3      	cmp	r3, r4
 8016df6:	d9fa      	bls.n	8016dee <_free_r+0x42>
 8016df8:	6811      	ldr	r1, [r2, #0]
 8016dfa:	1850      	adds	r0, r2, r1
 8016dfc:	42a0      	cmp	r0, r4
 8016dfe:	d10b      	bne.n	8016e18 <_free_r+0x6c>
 8016e00:	6820      	ldr	r0, [r4, #0]
 8016e02:	4401      	add	r1, r0
 8016e04:	1850      	adds	r0, r2, r1
 8016e06:	4283      	cmp	r3, r0
 8016e08:	6011      	str	r1, [r2, #0]
 8016e0a:	d1e0      	bne.n	8016dce <_free_r+0x22>
 8016e0c:	6818      	ldr	r0, [r3, #0]
 8016e0e:	685b      	ldr	r3, [r3, #4]
 8016e10:	6053      	str	r3, [r2, #4]
 8016e12:	4408      	add	r0, r1
 8016e14:	6010      	str	r0, [r2, #0]
 8016e16:	e7da      	b.n	8016dce <_free_r+0x22>
 8016e18:	d902      	bls.n	8016e20 <_free_r+0x74>
 8016e1a:	230c      	movs	r3, #12
 8016e1c:	602b      	str	r3, [r5, #0]
 8016e1e:	e7d6      	b.n	8016dce <_free_r+0x22>
 8016e20:	6820      	ldr	r0, [r4, #0]
 8016e22:	1821      	adds	r1, r4, r0
 8016e24:	428b      	cmp	r3, r1
 8016e26:	bf04      	itt	eq
 8016e28:	6819      	ldreq	r1, [r3, #0]
 8016e2a:	685b      	ldreq	r3, [r3, #4]
 8016e2c:	6063      	str	r3, [r4, #4]
 8016e2e:	bf04      	itt	eq
 8016e30:	1809      	addeq	r1, r1, r0
 8016e32:	6021      	streq	r1, [r4, #0]
 8016e34:	6054      	str	r4, [r2, #4]
 8016e36:	e7ca      	b.n	8016dce <_free_r+0x22>
 8016e38:	bd38      	pop	{r3, r4, r5, pc}
 8016e3a:	bf00      	nop
 8016e3c:	24005458 	.word	0x24005458

08016e40 <__ssputs_r>:
 8016e40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016e44:	688e      	ldr	r6, [r1, #8]
 8016e46:	461f      	mov	r7, r3
 8016e48:	42be      	cmp	r6, r7
 8016e4a:	680b      	ldr	r3, [r1, #0]
 8016e4c:	4682      	mov	sl, r0
 8016e4e:	460c      	mov	r4, r1
 8016e50:	4690      	mov	r8, r2
 8016e52:	d82d      	bhi.n	8016eb0 <__ssputs_r+0x70>
 8016e54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016e58:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8016e5c:	d026      	beq.n	8016eac <__ssputs_r+0x6c>
 8016e5e:	6965      	ldr	r5, [r4, #20]
 8016e60:	6909      	ldr	r1, [r1, #16]
 8016e62:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016e66:	eba3 0901 	sub.w	r9, r3, r1
 8016e6a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016e6e:	1c7b      	adds	r3, r7, #1
 8016e70:	444b      	add	r3, r9
 8016e72:	106d      	asrs	r5, r5, #1
 8016e74:	429d      	cmp	r5, r3
 8016e76:	bf38      	it	cc
 8016e78:	461d      	movcc	r5, r3
 8016e7a:	0553      	lsls	r3, r2, #21
 8016e7c:	d527      	bpl.n	8016ece <__ssputs_r+0x8e>
 8016e7e:	4629      	mov	r1, r5
 8016e80:	f7ff fb30 	bl	80164e4 <_malloc_r>
 8016e84:	4606      	mov	r6, r0
 8016e86:	b360      	cbz	r0, 8016ee2 <__ssputs_r+0xa2>
 8016e88:	6921      	ldr	r1, [r4, #16]
 8016e8a:	464a      	mov	r2, r9
 8016e8c:	f7ff ff7f 	bl	8016d8e <memcpy>
 8016e90:	89a3      	ldrh	r3, [r4, #12]
 8016e92:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8016e96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016e9a:	81a3      	strh	r3, [r4, #12]
 8016e9c:	6126      	str	r6, [r4, #16]
 8016e9e:	6165      	str	r5, [r4, #20]
 8016ea0:	444e      	add	r6, r9
 8016ea2:	eba5 0509 	sub.w	r5, r5, r9
 8016ea6:	6026      	str	r6, [r4, #0]
 8016ea8:	60a5      	str	r5, [r4, #8]
 8016eaa:	463e      	mov	r6, r7
 8016eac:	42be      	cmp	r6, r7
 8016eae:	d900      	bls.n	8016eb2 <__ssputs_r+0x72>
 8016eb0:	463e      	mov	r6, r7
 8016eb2:	6820      	ldr	r0, [r4, #0]
 8016eb4:	4632      	mov	r2, r6
 8016eb6:	4641      	mov	r1, r8
 8016eb8:	f000 fcf6 	bl	80178a8 <memmove>
 8016ebc:	68a3      	ldr	r3, [r4, #8]
 8016ebe:	1b9b      	subs	r3, r3, r6
 8016ec0:	60a3      	str	r3, [r4, #8]
 8016ec2:	6823      	ldr	r3, [r4, #0]
 8016ec4:	4433      	add	r3, r6
 8016ec6:	6023      	str	r3, [r4, #0]
 8016ec8:	2000      	movs	r0, #0
 8016eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016ece:	462a      	mov	r2, r5
 8016ed0:	f000 fd26 	bl	8017920 <_realloc_r>
 8016ed4:	4606      	mov	r6, r0
 8016ed6:	2800      	cmp	r0, #0
 8016ed8:	d1e0      	bne.n	8016e9c <__ssputs_r+0x5c>
 8016eda:	6921      	ldr	r1, [r4, #16]
 8016edc:	4650      	mov	r0, sl
 8016ede:	f7ff ff65 	bl	8016dac <_free_r>
 8016ee2:	230c      	movs	r3, #12
 8016ee4:	f8ca 3000 	str.w	r3, [sl]
 8016ee8:	89a3      	ldrh	r3, [r4, #12]
 8016eea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016eee:	81a3      	strh	r3, [r4, #12]
 8016ef0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016ef4:	e7e9      	b.n	8016eca <__ssputs_r+0x8a>
	...

08016ef8 <_svfiprintf_r>:
 8016ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016efc:	4698      	mov	r8, r3
 8016efe:	898b      	ldrh	r3, [r1, #12]
 8016f00:	061b      	lsls	r3, r3, #24
 8016f02:	b09d      	sub	sp, #116	@ 0x74
 8016f04:	4607      	mov	r7, r0
 8016f06:	460d      	mov	r5, r1
 8016f08:	4614      	mov	r4, r2
 8016f0a:	d510      	bpl.n	8016f2e <_svfiprintf_r+0x36>
 8016f0c:	690b      	ldr	r3, [r1, #16]
 8016f0e:	b973      	cbnz	r3, 8016f2e <_svfiprintf_r+0x36>
 8016f10:	2140      	movs	r1, #64	@ 0x40
 8016f12:	f7ff fae7 	bl	80164e4 <_malloc_r>
 8016f16:	6028      	str	r0, [r5, #0]
 8016f18:	6128      	str	r0, [r5, #16]
 8016f1a:	b930      	cbnz	r0, 8016f2a <_svfiprintf_r+0x32>
 8016f1c:	230c      	movs	r3, #12
 8016f1e:	603b      	str	r3, [r7, #0]
 8016f20:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016f24:	b01d      	add	sp, #116	@ 0x74
 8016f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f2a:	2340      	movs	r3, #64	@ 0x40
 8016f2c:	616b      	str	r3, [r5, #20]
 8016f2e:	2300      	movs	r3, #0
 8016f30:	9309      	str	r3, [sp, #36]	@ 0x24
 8016f32:	2320      	movs	r3, #32
 8016f34:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016f38:	f8cd 800c 	str.w	r8, [sp, #12]
 8016f3c:	2330      	movs	r3, #48	@ 0x30
 8016f3e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80170dc <_svfiprintf_r+0x1e4>
 8016f42:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016f46:	f04f 0901 	mov.w	r9, #1
 8016f4a:	4623      	mov	r3, r4
 8016f4c:	469a      	mov	sl, r3
 8016f4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016f52:	b10a      	cbz	r2, 8016f58 <_svfiprintf_r+0x60>
 8016f54:	2a25      	cmp	r2, #37	@ 0x25
 8016f56:	d1f9      	bne.n	8016f4c <_svfiprintf_r+0x54>
 8016f58:	ebba 0b04 	subs.w	fp, sl, r4
 8016f5c:	d00b      	beq.n	8016f76 <_svfiprintf_r+0x7e>
 8016f5e:	465b      	mov	r3, fp
 8016f60:	4622      	mov	r2, r4
 8016f62:	4629      	mov	r1, r5
 8016f64:	4638      	mov	r0, r7
 8016f66:	f7ff ff6b 	bl	8016e40 <__ssputs_r>
 8016f6a:	3001      	adds	r0, #1
 8016f6c:	f000 80a7 	beq.w	80170be <_svfiprintf_r+0x1c6>
 8016f70:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016f72:	445a      	add	r2, fp
 8016f74:	9209      	str	r2, [sp, #36]	@ 0x24
 8016f76:	f89a 3000 	ldrb.w	r3, [sl]
 8016f7a:	2b00      	cmp	r3, #0
 8016f7c:	f000 809f 	beq.w	80170be <_svfiprintf_r+0x1c6>
 8016f80:	2300      	movs	r3, #0
 8016f82:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8016f86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016f8a:	f10a 0a01 	add.w	sl, sl, #1
 8016f8e:	9304      	str	r3, [sp, #16]
 8016f90:	9307      	str	r3, [sp, #28]
 8016f92:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016f96:	931a      	str	r3, [sp, #104]	@ 0x68
 8016f98:	4654      	mov	r4, sl
 8016f9a:	2205      	movs	r2, #5
 8016f9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016fa0:	484e      	ldr	r0, [pc, #312]	@ (80170dc <_svfiprintf_r+0x1e4>)
 8016fa2:	f7e9 f9a5 	bl	80002f0 <memchr>
 8016fa6:	9a04      	ldr	r2, [sp, #16]
 8016fa8:	b9d8      	cbnz	r0, 8016fe2 <_svfiprintf_r+0xea>
 8016faa:	06d0      	lsls	r0, r2, #27
 8016fac:	bf44      	itt	mi
 8016fae:	2320      	movmi	r3, #32
 8016fb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016fb4:	0711      	lsls	r1, r2, #28
 8016fb6:	bf44      	itt	mi
 8016fb8:	232b      	movmi	r3, #43	@ 0x2b
 8016fba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016fbe:	f89a 3000 	ldrb.w	r3, [sl]
 8016fc2:	2b2a      	cmp	r3, #42	@ 0x2a
 8016fc4:	d015      	beq.n	8016ff2 <_svfiprintf_r+0xfa>
 8016fc6:	9a07      	ldr	r2, [sp, #28]
 8016fc8:	4654      	mov	r4, sl
 8016fca:	2000      	movs	r0, #0
 8016fcc:	f04f 0c0a 	mov.w	ip, #10
 8016fd0:	4621      	mov	r1, r4
 8016fd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016fd6:	3b30      	subs	r3, #48	@ 0x30
 8016fd8:	2b09      	cmp	r3, #9
 8016fda:	d94b      	bls.n	8017074 <_svfiprintf_r+0x17c>
 8016fdc:	b1b0      	cbz	r0, 801700c <_svfiprintf_r+0x114>
 8016fde:	9207      	str	r2, [sp, #28]
 8016fe0:	e014      	b.n	801700c <_svfiprintf_r+0x114>
 8016fe2:	eba0 0308 	sub.w	r3, r0, r8
 8016fe6:	fa09 f303 	lsl.w	r3, r9, r3
 8016fea:	4313      	orrs	r3, r2
 8016fec:	9304      	str	r3, [sp, #16]
 8016fee:	46a2      	mov	sl, r4
 8016ff0:	e7d2      	b.n	8016f98 <_svfiprintf_r+0xa0>
 8016ff2:	9b03      	ldr	r3, [sp, #12]
 8016ff4:	1d19      	adds	r1, r3, #4
 8016ff6:	681b      	ldr	r3, [r3, #0]
 8016ff8:	9103      	str	r1, [sp, #12]
 8016ffa:	2b00      	cmp	r3, #0
 8016ffc:	bfbb      	ittet	lt
 8016ffe:	425b      	neglt	r3, r3
 8017000:	f042 0202 	orrlt.w	r2, r2, #2
 8017004:	9307      	strge	r3, [sp, #28]
 8017006:	9307      	strlt	r3, [sp, #28]
 8017008:	bfb8      	it	lt
 801700a:	9204      	strlt	r2, [sp, #16]
 801700c:	7823      	ldrb	r3, [r4, #0]
 801700e:	2b2e      	cmp	r3, #46	@ 0x2e
 8017010:	d10a      	bne.n	8017028 <_svfiprintf_r+0x130>
 8017012:	7863      	ldrb	r3, [r4, #1]
 8017014:	2b2a      	cmp	r3, #42	@ 0x2a
 8017016:	d132      	bne.n	801707e <_svfiprintf_r+0x186>
 8017018:	9b03      	ldr	r3, [sp, #12]
 801701a:	1d1a      	adds	r2, r3, #4
 801701c:	681b      	ldr	r3, [r3, #0]
 801701e:	9203      	str	r2, [sp, #12]
 8017020:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017024:	3402      	adds	r4, #2
 8017026:	9305      	str	r3, [sp, #20]
 8017028:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80170ec <_svfiprintf_r+0x1f4>
 801702c:	7821      	ldrb	r1, [r4, #0]
 801702e:	2203      	movs	r2, #3
 8017030:	4650      	mov	r0, sl
 8017032:	f7e9 f95d 	bl	80002f0 <memchr>
 8017036:	b138      	cbz	r0, 8017048 <_svfiprintf_r+0x150>
 8017038:	9b04      	ldr	r3, [sp, #16]
 801703a:	eba0 000a 	sub.w	r0, r0, sl
 801703e:	2240      	movs	r2, #64	@ 0x40
 8017040:	4082      	lsls	r2, r0
 8017042:	4313      	orrs	r3, r2
 8017044:	3401      	adds	r4, #1
 8017046:	9304      	str	r3, [sp, #16]
 8017048:	f814 1b01 	ldrb.w	r1, [r4], #1
 801704c:	4824      	ldr	r0, [pc, #144]	@ (80170e0 <_svfiprintf_r+0x1e8>)
 801704e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017052:	2206      	movs	r2, #6
 8017054:	f7e9 f94c 	bl	80002f0 <memchr>
 8017058:	2800      	cmp	r0, #0
 801705a:	d036      	beq.n	80170ca <_svfiprintf_r+0x1d2>
 801705c:	4b21      	ldr	r3, [pc, #132]	@ (80170e4 <_svfiprintf_r+0x1ec>)
 801705e:	bb1b      	cbnz	r3, 80170a8 <_svfiprintf_r+0x1b0>
 8017060:	9b03      	ldr	r3, [sp, #12]
 8017062:	3307      	adds	r3, #7
 8017064:	f023 0307 	bic.w	r3, r3, #7
 8017068:	3308      	adds	r3, #8
 801706a:	9303      	str	r3, [sp, #12]
 801706c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801706e:	4433      	add	r3, r6
 8017070:	9309      	str	r3, [sp, #36]	@ 0x24
 8017072:	e76a      	b.n	8016f4a <_svfiprintf_r+0x52>
 8017074:	fb0c 3202 	mla	r2, ip, r2, r3
 8017078:	460c      	mov	r4, r1
 801707a:	2001      	movs	r0, #1
 801707c:	e7a8      	b.n	8016fd0 <_svfiprintf_r+0xd8>
 801707e:	2300      	movs	r3, #0
 8017080:	3401      	adds	r4, #1
 8017082:	9305      	str	r3, [sp, #20]
 8017084:	4619      	mov	r1, r3
 8017086:	f04f 0c0a 	mov.w	ip, #10
 801708a:	4620      	mov	r0, r4
 801708c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017090:	3a30      	subs	r2, #48	@ 0x30
 8017092:	2a09      	cmp	r2, #9
 8017094:	d903      	bls.n	801709e <_svfiprintf_r+0x1a6>
 8017096:	2b00      	cmp	r3, #0
 8017098:	d0c6      	beq.n	8017028 <_svfiprintf_r+0x130>
 801709a:	9105      	str	r1, [sp, #20]
 801709c:	e7c4      	b.n	8017028 <_svfiprintf_r+0x130>
 801709e:	fb0c 2101 	mla	r1, ip, r1, r2
 80170a2:	4604      	mov	r4, r0
 80170a4:	2301      	movs	r3, #1
 80170a6:	e7f0      	b.n	801708a <_svfiprintf_r+0x192>
 80170a8:	ab03      	add	r3, sp, #12
 80170aa:	9300      	str	r3, [sp, #0]
 80170ac:	462a      	mov	r2, r5
 80170ae:	4b0e      	ldr	r3, [pc, #56]	@ (80170e8 <_svfiprintf_r+0x1f0>)
 80170b0:	a904      	add	r1, sp, #16
 80170b2:	4638      	mov	r0, r7
 80170b4:	f3af 8000 	nop.w
 80170b8:	1c42      	adds	r2, r0, #1
 80170ba:	4606      	mov	r6, r0
 80170bc:	d1d6      	bne.n	801706c <_svfiprintf_r+0x174>
 80170be:	89ab      	ldrh	r3, [r5, #12]
 80170c0:	065b      	lsls	r3, r3, #25
 80170c2:	f53f af2d 	bmi.w	8016f20 <_svfiprintf_r+0x28>
 80170c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80170c8:	e72c      	b.n	8016f24 <_svfiprintf_r+0x2c>
 80170ca:	ab03      	add	r3, sp, #12
 80170cc:	9300      	str	r3, [sp, #0]
 80170ce:	462a      	mov	r2, r5
 80170d0:	4b05      	ldr	r3, [pc, #20]	@ (80170e8 <_svfiprintf_r+0x1f0>)
 80170d2:	a904      	add	r1, sp, #16
 80170d4:	4638      	mov	r0, r7
 80170d6:	f000 f9bb 	bl	8017450 <_printf_i>
 80170da:	e7ed      	b.n	80170b8 <_svfiprintf_r+0x1c0>
 80170dc:	08017da8 	.word	0x08017da8
 80170e0:	08017db2 	.word	0x08017db2
 80170e4:	00000000 	.word	0x00000000
 80170e8:	08016e41 	.word	0x08016e41
 80170ec:	08017dae 	.word	0x08017dae

080170f0 <__sfputc_r>:
 80170f0:	6893      	ldr	r3, [r2, #8]
 80170f2:	3b01      	subs	r3, #1
 80170f4:	2b00      	cmp	r3, #0
 80170f6:	b410      	push	{r4}
 80170f8:	6093      	str	r3, [r2, #8]
 80170fa:	da08      	bge.n	801710e <__sfputc_r+0x1e>
 80170fc:	6994      	ldr	r4, [r2, #24]
 80170fe:	42a3      	cmp	r3, r4
 8017100:	db01      	blt.n	8017106 <__sfputc_r+0x16>
 8017102:	290a      	cmp	r1, #10
 8017104:	d103      	bne.n	801710e <__sfputc_r+0x1e>
 8017106:	f85d 4b04 	ldr.w	r4, [sp], #4
 801710a:	f7ff bcc2 	b.w	8016a92 <__swbuf_r>
 801710e:	6813      	ldr	r3, [r2, #0]
 8017110:	1c58      	adds	r0, r3, #1
 8017112:	6010      	str	r0, [r2, #0]
 8017114:	7019      	strb	r1, [r3, #0]
 8017116:	4608      	mov	r0, r1
 8017118:	f85d 4b04 	ldr.w	r4, [sp], #4
 801711c:	4770      	bx	lr

0801711e <__sfputs_r>:
 801711e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017120:	4606      	mov	r6, r0
 8017122:	460f      	mov	r7, r1
 8017124:	4614      	mov	r4, r2
 8017126:	18d5      	adds	r5, r2, r3
 8017128:	42ac      	cmp	r4, r5
 801712a:	d101      	bne.n	8017130 <__sfputs_r+0x12>
 801712c:	2000      	movs	r0, #0
 801712e:	e007      	b.n	8017140 <__sfputs_r+0x22>
 8017130:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017134:	463a      	mov	r2, r7
 8017136:	4630      	mov	r0, r6
 8017138:	f7ff ffda 	bl	80170f0 <__sfputc_r>
 801713c:	1c43      	adds	r3, r0, #1
 801713e:	d1f3      	bne.n	8017128 <__sfputs_r+0xa>
 8017140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017144 <_vfiprintf_r>:
 8017144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017148:	460d      	mov	r5, r1
 801714a:	b09d      	sub	sp, #116	@ 0x74
 801714c:	4614      	mov	r4, r2
 801714e:	4698      	mov	r8, r3
 8017150:	4606      	mov	r6, r0
 8017152:	b118      	cbz	r0, 801715c <_vfiprintf_r+0x18>
 8017154:	6a03      	ldr	r3, [r0, #32]
 8017156:	b90b      	cbnz	r3, 801715c <_vfiprintf_r+0x18>
 8017158:	f7ff fadc 	bl	8016714 <__sinit>
 801715c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801715e:	07d9      	lsls	r1, r3, #31
 8017160:	d405      	bmi.n	801716e <_vfiprintf_r+0x2a>
 8017162:	89ab      	ldrh	r3, [r5, #12]
 8017164:	059a      	lsls	r2, r3, #22
 8017166:	d402      	bmi.n	801716e <_vfiprintf_r+0x2a>
 8017168:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801716a:	f7ff fe0e 	bl	8016d8a <__retarget_lock_acquire_recursive>
 801716e:	89ab      	ldrh	r3, [r5, #12]
 8017170:	071b      	lsls	r3, r3, #28
 8017172:	d501      	bpl.n	8017178 <_vfiprintf_r+0x34>
 8017174:	692b      	ldr	r3, [r5, #16]
 8017176:	b99b      	cbnz	r3, 80171a0 <_vfiprintf_r+0x5c>
 8017178:	4629      	mov	r1, r5
 801717a:	4630      	mov	r0, r6
 801717c:	f7ff fcc8 	bl	8016b10 <__swsetup_r>
 8017180:	b170      	cbz	r0, 80171a0 <_vfiprintf_r+0x5c>
 8017182:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017184:	07dc      	lsls	r4, r3, #31
 8017186:	d504      	bpl.n	8017192 <_vfiprintf_r+0x4e>
 8017188:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801718c:	b01d      	add	sp, #116	@ 0x74
 801718e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017192:	89ab      	ldrh	r3, [r5, #12]
 8017194:	0598      	lsls	r0, r3, #22
 8017196:	d4f7      	bmi.n	8017188 <_vfiprintf_r+0x44>
 8017198:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801719a:	f7ff fdf7 	bl	8016d8c <__retarget_lock_release_recursive>
 801719e:	e7f3      	b.n	8017188 <_vfiprintf_r+0x44>
 80171a0:	2300      	movs	r3, #0
 80171a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80171a4:	2320      	movs	r3, #32
 80171a6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80171aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80171ae:	2330      	movs	r3, #48	@ 0x30
 80171b0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8017360 <_vfiprintf_r+0x21c>
 80171b4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80171b8:	f04f 0901 	mov.w	r9, #1
 80171bc:	4623      	mov	r3, r4
 80171be:	469a      	mov	sl, r3
 80171c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80171c4:	b10a      	cbz	r2, 80171ca <_vfiprintf_r+0x86>
 80171c6:	2a25      	cmp	r2, #37	@ 0x25
 80171c8:	d1f9      	bne.n	80171be <_vfiprintf_r+0x7a>
 80171ca:	ebba 0b04 	subs.w	fp, sl, r4
 80171ce:	d00b      	beq.n	80171e8 <_vfiprintf_r+0xa4>
 80171d0:	465b      	mov	r3, fp
 80171d2:	4622      	mov	r2, r4
 80171d4:	4629      	mov	r1, r5
 80171d6:	4630      	mov	r0, r6
 80171d8:	f7ff ffa1 	bl	801711e <__sfputs_r>
 80171dc:	3001      	adds	r0, #1
 80171de:	f000 80a7 	beq.w	8017330 <_vfiprintf_r+0x1ec>
 80171e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80171e4:	445a      	add	r2, fp
 80171e6:	9209      	str	r2, [sp, #36]	@ 0x24
 80171e8:	f89a 3000 	ldrb.w	r3, [sl]
 80171ec:	2b00      	cmp	r3, #0
 80171ee:	f000 809f 	beq.w	8017330 <_vfiprintf_r+0x1ec>
 80171f2:	2300      	movs	r3, #0
 80171f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80171f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80171fc:	f10a 0a01 	add.w	sl, sl, #1
 8017200:	9304      	str	r3, [sp, #16]
 8017202:	9307      	str	r3, [sp, #28]
 8017204:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017208:	931a      	str	r3, [sp, #104]	@ 0x68
 801720a:	4654      	mov	r4, sl
 801720c:	2205      	movs	r2, #5
 801720e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017212:	4853      	ldr	r0, [pc, #332]	@ (8017360 <_vfiprintf_r+0x21c>)
 8017214:	f7e9 f86c 	bl	80002f0 <memchr>
 8017218:	9a04      	ldr	r2, [sp, #16]
 801721a:	b9d8      	cbnz	r0, 8017254 <_vfiprintf_r+0x110>
 801721c:	06d1      	lsls	r1, r2, #27
 801721e:	bf44      	itt	mi
 8017220:	2320      	movmi	r3, #32
 8017222:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017226:	0713      	lsls	r3, r2, #28
 8017228:	bf44      	itt	mi
 801722a:	232b      	movmi	r3, #43	@ 0x2b
 801722c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017230:	f89a 3000 	ldrb.w	r3, [sl]
 8017234:	2b2a      	cmp	r3, #42	@ 0x2a
 8017236:	d015      	beq.n	8017264 <_vfiprintf_r+0x120>
 8017238:	9a07      	ldr	r2, [sp, #28]
 801723a:	4654      	mov	r4, sl
 801723c:	2000      	movs	r0, #0
 801723e:	f04f 0c0a 	mov.w	ip, #10
 8017242:	4621      	mov	r1, r4
 8017244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017248:	3b30      	subs	r3, #48	@ 0x30
 801724a:	2b09      	cmp	r3, #9
 801724c:	d94b      	bls.n	80172e6 <_vfiprintf_r+0x1a2>
 801724e:	b1b0      	cbz	r0, 801727e <_vfiprintf_r+0x13a>
 8017250:	9207      	str	r2, [sp, #28]
 8017252:	e014      	b.n	801727e <_vfiprintf_r+0x13a>
 8017254:	eba0 0308 	sub.w	r3, r0, r8
 8017258:	fa09 f303 	lsl.w	r3, r9, r3
 801725c:	4313      	orrs	r3, r2
 801725e:	9304      	str	r3, [sp, #16]
 8017260:	46a2      	mov	sl, r4
 8017262:	e7d2      	b.n	801720a <_vfiprintf_r+0xc6>
 8017264:	9b03      	ldr	r3, [sp, #12]
 8017266:	1d19      	adds	r1, r3, #4
 8017268:	681b      	ldr	r3, [r3, #0]
 801726a:	9103      	str	r1, [sp, #12]
 801726c:	2b00      	cmp	r3, #0
 801726e:	bfbb      	ittet	lt
 8017270:	425b      	neglt	r3, r3
 8017272:	f042 0202 	orrlt.w	r2, r2, #2
 8017276:	9307      	strge	r3, [sp, #28]
 8017278:	9307      	strlt	r3, [sp, #28]
 801727a:	bfb8      	it	lt
 801727c:	9204      	strlt	r2, [sp, #16]
 801727e:	7823      	ldrb	r3, [r4, #0]
 8017280:	2b2e      	cmp	r3, #46	@ 0x2e
 8017282:	d10a      	bne.n	801729a <_vfiprintf_r+0x156>
 8017284:	7863      	ldrb	r3, [r4, #1]
 8017286:	2b2a      	cmp	r3, #42	@ 0x2a
 8017288:	d132      	bne.n	80172f0 <_vfiprintf_r+0x1ac>
 801728a:	9b03      	ldr	r3, [sp, #12]
 801728c:	1d1a      	adds	r2, r3, #4
 801728e:	681b      	ldr	r3, [r3, #0]
 8017290:	9203      	str	r2, [sp, #12]
 8017292:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017296:	3402      	adds	r4, #2
 8017298:	9305      	str	r3, [sp, #20]
 801729a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8017370 <_vfiprintf_r+0x22c>
 801729e:	7821      	ldrb	r1, [r4, #0]
 80172a0:	2203      	movs	r2, #3
 80172a2:	4650      	mov	r0, sl
 80172a4:	f7e9 f824 	bl	80002f0 <memchr>
 80172a8:	b138      	cbz	r0, 80172ba <_vfiprintf_r+0x176>
 80172aa:	9b04      	ldr	r3, [sp, #16]
 80172ac:	eba0 000a 	sub.w	r0, r0, sl
 80172b0:	2240      	movs	r2, #64	@ 0x40
 80172b2:	4082      	lsls	r2, r0
 80172b4:	4313      	orrs	r3, r2
 80172b6:	3401      	adds	r4, #1
 80172b8:	9304      	str	r3, [sp, #16]
 80172ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80172be:	4829      	ldr	r0, [pc, #164]	@ (8017364 <_vfiprintf_r+0x220>)
 80172c0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80172c4:	2206      	movs	r2, #6
 80172c6:	f7e9 f813 	bl	80002f0 <memchr>
 80172ca:	2800      	cmp	r0, #0
 80172cc:	d03f      	beq.n	801734e <_vfiprintf_r+0x20a>
 80172ce:	4b26      	ldr	r3, [pc, #152]	@ (8017368 <_vfiprintf_r+0x224>)
 80172d0:	bb1b      	cbnz	r3, 801731a <_vfiprintf_r+0x1d6>
 80172d2:	9b03      	ldr	r3, [sp, #12]
 80172d4:	3307      	adds	r3, #7
 80172d6:	f023 0307 	bic.w	r3, r3, #7
 80172da:	3308      	adds	r3, #8
 80172dc:	9303      	str	r3, [sp, #12]
 80172de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80172e0:	443b      	add	r3, r7
 80172e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80172e4:	e76a      	b.n	80171bc <_vfiprintf_r+0x78>
 80172e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80172ea:	460c      	mov	r4, r1
 80172ec:	2001      	movs	r0, #1
 80172ee:	e7a8      	b.n	8017242 <_vfiprintf_r+0xfe>
 80172f0:	2300      	movs	r3, #0
 80172f2:	3401      	adds	r4, #1
 80172f4:	9305      	str	r3, [sp, #20]
 80172f6:	4619      	mov	r1, r3
 80172f8:	f04f 0c0a 	mov.w	ip, #10
 80172fc:	4620      	mov	r0, r4
 80172fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017302:	3a30      	subs	r2, #48	@ 0x30
 8017304:	2a09      	cmp	r2, #9
 8017306:	d903      	bls.n	8017310 <_vfiprintf_r+0x1cc>
 8017308:	2b00      	cmp	r3, #0
 801730a:	d0c6      	beq.n	801729a <_vfiprintf_r+0x156>
 801730c:	9105      	str	r1, [sp, #20]
 801730e:	e7c4      	b.n	801729a <_vfiprintf_r+0x156>
 8017310:	fb0c 2101 	mla	r1, ip, r1, r2
 8017314:	4604      	mov	r4, r0
 8017316:	2301      	movs	r3, #1
 8017318:	e7f0      	b.n	80172fc <_vfiprintf_r+0x1b8>
 801731a:	ab03      	add	r3, sp, #12
 801731c:	9300      	str	r3, [sp, #0]
 801731e:	462a      	mov	r2, r5
 8017320:	4b12      	ldr	r3, [pc, #72]	@ (801736c <_vfiprintf_r+0x228>)
 8017322:	a904      	add	r1, sp, #16
 8017324:	4630      	mov	r0, r6
 8017326:	f3af 8000 	nop.w
 801732a:	4607      	mov	r7, r0
 801732c:	1c78      	adds	r0, r7, #1
 801732e:	d1d6      	bne.n	80172de <_vfiprintf_r+0x19a>
 8017330:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017332:	07d9      	lsls	r1, r3, #31
 8017334:	d405      	bmi.n	8017342 <_vfiprintf_r+0x1fe>
 8017336:	89ab      	ldrh	r3, [r5, #12]
 8017338:	059a      	lsls	r2, r3, #22
 801733a:	d402      	bmi.n	8017342 <_vfiprintf_r+0x1fe>
 801733c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801733e:	f7ff fd25 	bl	8016d8c <__retarget_lock_release_recursive>
 8017342:	89ab      	ldrh	r3, [r5, #12]
 8017344:	065b      	lsls	r3, r3, #25
 8017346:	f53f af1f 	bmi.w	8017188 <_vfiprintf_r+0x44>
 801734a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801734c:	e71e      	b.n	801718c <_vfiprintf_r+0x48>
 801734e:	ab03      	add	r3, sp, #12
 8017350:	9300      	str	r3, [sp, #0]
 8017352:	462a      	mov	r2, r5
 8017354:	4b05      	ldr	r3, [pc, #20]	@ (801736c <_vfiprintf_r+0x228>)
 8017356:	a904      	add	r1, sp, #16
 8017358:	4630      	mov	r0, r6
 801735a:	f000 f879 	bl	8017450 <_printf_i>
 801735e:	e7e4      	b.n	801732a <_vfiprintf_r+0x1e6>
 8017360:	08017da8 	.word	0x08017da8
 8017364:	08017db2 	.word	0x08017db2
 8017368:	00000000 	.word	0x00000000
 801736c:	0801711f 	.word	0x0801711f
 8017370:	08017dae 	.word	0x08017dae

08017374 <_printf_common>:
 8017374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017378:	4616      	mov	r6, r2
 801737a:	4698      	mov	r8, r3
 801737c:	688a      	ldr	r2, [r1, #8]
 801737e:	690b      	ldr	r3, [r1, #16]
 8017380:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017384:	4293      	cmp	r3, r2
 8017386:	bfb8      	it	lt
 8017388:	4613      	movlt	r3, r2
 801738a:	6033      	str	r3, [r6, #0]
 801738c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8017390:	4607      	mov	r7, r0
 8017392:	460c      	mov	r4, r1
 8017394:	b10a      	cbz	r2, 801739a <_printf_common+0x26>
 8017396:	3301      	adds	r3, #1
 8017398:	6033      	str	r3, [r6, #0]
 801739a:	6823      	ldr	r3, [r4, #0]
 801739c:	0699      	lsls	r1, r3, #26
 801739e:	bf42      	ittt	mi
 80173a0:	6833      	ldrmi	r3, [r6, #0]
 80173a2:	3302      	addmi	r3, #2
 80173a4:	6033      	strmi	r3, [r6, #0]
 80173a6:	6825      	ldr	r5, [r4, #0]
 80173a8:	f015 0506 	ands.w	r5, r5, #6
 80173ac:	d106      	bne.n	80173bc <_printf_common+0x48>
 80173ae:	f104 0a19 	add.w	sl, r4, #25
 80173b2:	68e3      	ldr	r3, [r4, #12]
 80173b4:	6832      	ldr	r2, [r6, #0]
 80173b6:	1a9b      	subs	r3, r3, r2
 80173b8:	42ab      	cmp	r3, r5
 80173ba:	dc26      	bgt.n	801740a <_printf_common+0x96>
 80173bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80173c0:	6822      	ldr	r2, [r4, #0]
 80173c2:	3b00      	subs	r3, #0
 80173c4:	bf18      	it	ne
 80173c6:	2301      	movne	r3, #1
 80173c8:	0692      	lsls	r2, r2, #26
 80173ca:	d42b      	bmi.n	8017424 <_printf_common+0xb0>
 80173cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80173d0:	4641      	mov	r1, r8
 80173d2:	4638      	mov	r0, r7
 80173d4:	47c8      	blx	r9
 80173d6:	3001      	adds	r0, #1
 80173d8:	d01e      	beq.n	8017418 <_printf_common+0xa4>
 80173da:	6823      	ldr	r3, [r4, #0]
 80173dc:	6922      	ldr	r2, [r4, #16]
 80173de:	f003 0306 	and.w	r3, r3, #6
 80173e2:	2b04      	cmp	r3, #4
 80173e4:	bf02      	ittt	eq
 80173e6:	68e5      	ldreq	r5, [r4, #12]
 80173e8:	6833      	ldreq	r3, [r6, #0]
 80173ea:	1aed      	subeq	r5, r5, r3
 80173ec:	68a3      	ldr	r3, [r4, #8]
 80173ee:	bf0c      	ite	eq
 80173f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80173f4:	2500      	movne	r5, #0
 80173f6:	4293      	cmp	r3, r2
 80173f8:	bfc4      	itt	gt
 80173fa:	1a9b      	subgt	r3, r3, r2
 80173fc:	18ed      	addgt	r5, r5, r3
 80173fe:	2600      	movs	r6, #0
 8017400:	341a      	adds	r4, #26
 8017402:	42b5      	cmp	r5, r6
 8017404:	d11a      	bne.n	801743c <_printf_common+0xc8>
 8017406:	2000      	movs	r0, #0
 8017408:	e008      	b.n	801741c <_printf_common+0xa8>
 801740a:	2301      	movs	r3, #1
 801740c:	4652      	mov	r2, sl
 801740e:	4641      	mov	r1, r8
 8017410:	4638      	mov	r0, r7
 8017412:	47c8      	blx	r9
 8017414:	3001      	adds	r0, #1
 8017416:	d103      	bne.n	8017420 <_printf_common+0xac>
 8017418:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801741c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017420:	3501      	adds	r5, #1
 8017422:	e7c6      	b.n	80173b2 <_printf_common+0x3e>
 8017424:	18e1      	adds	r1, r4, r3
 8017426:	1c5a      	adds	r2, r3, #1
 8017428:	2030      	movs	r0, #48	@ 0x30
 801742a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801742e:	4422      	add	r2, r4
 8017430:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8017434:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8017438:	3302      	adds	r3, #2
 801743a:	e7c7      	b.n	80173cc <_printf_common+0x58>
 801743c:	2301      	movs	r3, #1
 801743e:	4622      	mov	r2, r4
 8017440:	4641      	mov	r1, r8
 8017442:	4638      	mov	r0, r7
 8017444:	47c8      	blx	r9
 8017446:	3001      	adds	r0, #1
 8017448:	d0e6      	beq.n	8017418 <_printf_common+0xa4>
 801744a:	3601      	adds	r6, #1
 801744c:	e7d9      	b.n	8017402 <_printf_common+0x8e>
	...

08017450 <_printf_i>:
 8017450:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017454:	7e0f      	ldrb	r7, [r1, #24]
 8017456:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8017458:	2f78      	cmp	r7, #120	@ 0x78
 801745a:	4691      	mov	r9, r2
 801745c:	4680      	mov	r8, r0
 801745e:	460c      	mov	r4, r1
 8017460:	469a      	mov	sl, r3
 8017462:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8017466:	d807      	bhi.n	8017478 <_printf_i+0x28>
 8017468:	2f62      	cmp	r7, #98	@ 0x62
 801746a:	d80a      	bhi.n	8017482 <_printf_i+0x32>
 801746c:	2f00      	cmp	r7, #0
 801746e:	f000 80d1 	beq.w	8017614 <_printf_i+0x1c4>
 8017472:	2f58      	cmp	r7, #88	@ 0x58
 8017474:	f000 80b8 	beq.w	80175e8 <_printf_i+0x198>
 8017478:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801747c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8017480:	e03a      	b.n	80174f8 <_printf_i+0xa8>
 8017482:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8017486:	2b15      	cmp	r3, #21
 8017488:	d8f6      	bhi.n	8017478 <_printf_i+0x28>
 801748a:	a101      	add	r1, pc, #4	@ (adr r1, 8017490 <_printf_i+0x40>)
 801748c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017490:	080174e9 	.word	0x080174e9
 8017494:	080174fd 	.word	0x080174fd
 8017498:	08017479 	.word	0x08017479
 801749c:	08017479 	.word	0x08017479
 80174a0:	08017479 	.word	0x08017479
 80174a4:	08017479 	.word	0x08017479
 80174a8:	080174fd 	.word	0x080174fd
 80174ac:	08017479 	.word	0x08017479
 80174b0:	08017479 	.word	0x08017479
 80174b4:	08017479 	.word	0x08017479
 80174b8:	08017479 	.word	0x08017479
 80174bc:	080175fb 	.word	0x080175fb
 80174c0:	08017527 	.word	0x08017527
 80174c4:	080175b5 	.word	0x080175b5
 80174c8:	08017479 	.word	0x08017479
 80174cc:	08017479 	.word	0x08017479
 80174d0:	0801761d 	.word	0x0801761d
 80174d4:	08017479 	.word	0x08017479
 80174d8:	08017527 	.word	0x08017527
 80174dc:	08017479 	.word	0x08017479
 80174e0:	08017479 	.word	0x08017479
 80174e4:	080175bd 	.word	0x080175bd
 80174e8:	6833      	ldr	r3, [r6, #0]
 80174ea:	1d1a      	adds	r2, r3, #4
 80174ec:	681b      	ldr	r3, [r3, #0]
 80174ee:	6032      	str	r2, [r6, #0]
 80174f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80174f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80174f8:	2301      	movs	r3, #1
 80174fa:	e09c      	b.n	8017636 <_printf_i+0x1e6>
 80174fc:	6833      	ldr	r3, [r6, #0]
 80174fe:	6820      	ldr	r0, [r4, #0]
 8017500:	1d19      	adds	r1, r3, #4
 8017502:	6031      	str	r1, [r6, #0]
 8017504:	0606      	lsls	r6, r0, #24
 8017506:	d501      	bpl.n	801750c <_printf_i+0xbc>
 8017508:	681d      	ldr	r5, [r3, #0]
 801750a:	e003      	b.n	8017514 <_printf_i+0xc4>
 801750c:	0645      	lsls	r5, r0, #25
 801750e:	d5fb      	bpl.n	8017508 <_printf_i+0xb8>
 8017510:	f9b3 5000 	ldrsh.w	r5, [r3]
 8017514:	2d00      	cmp	r5, #0
 8017516:	da03      	bge.n	8017520 <_printf_i+0xd0>
 8017518:	232d      	movs	r3, #45	@ 0x2d
 801751a:	426d      	negs	r5, r5
 801751c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017520:	4858      	ldr	r0, [pc, #352]	@ (8017684 <_printf_i+0x234>)
 8017522:	230a      	movs	r3, #10
 8017524:	e011      	b.n	801754a <_printf_i+0xfa>
 8017526:	6821      	ldr	r1, [r4, #0]
 8017528:	6833      	ldr	r3, [r6, #0]
 801752a:	0608      	lsls	r0, r1, #24
 801752c:	f853 5b04 	ldr.w	r5, [r3], #4
 8017530:	d402      	bmi.n	8017538 <_printf_i+0xe8>
 8017532:	0649      	lsls	r1, r1, #25
 8017534:	bf48      	it	mi
 8017536:	b2ad      	uxthmi	r5, r5
 8017538:	2f6f      	cmp	r7, #111	@ 0x6f
 801753a:	4852      	ldr	r0, [pc, #328]	@ (8017684 <_printf_i+0x234>)
 801753c:	6033      	str	r3, [r6, #0]
 801753e:	bf14      	ite	ne
 8017540:	230a      	movne	r3, #10
 8017542:	2308      	moveq	r3, #8
 8017544:	2100      	movs	r1, #0
 8017546:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801754a:	6866      	ldr	r6, [r4, #4]
 801754c:	60a6      	str	r6, [r4, #8]
 801754e:	2e00      	cmp	r6, #0
 8017550:	db05      	blt.n	801755e <_printf_i+0x10e>
 8017552:	6821      	ldr	r1, [r4, #0]
 8017554:	432e      	orrs	r6, r5
 8017556:	f021 0104 	bic.w	r1, r1, #4
 801755a:	6021      	str	r1, [r4, #0]
 801755c:	d04b      	beq.n	80175f6 <_printf_i+0x1a6>
 801755e:	4616      	mov	r6, r2
 8017560:	fbb5 f1f3 	udiv	r1, r5, r3
 8017564:	fb03 5711 	mls	r7, r3, r1, r5
 8017568:	5dc7      	ldrb	r7, [r0, r7]
 801756a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801756e:	462f      	mov	r7, r5
 8017570:	42bb      	cmp	r3, r7
 8017572:	460d      	mov	r5, r1
 8017574:	d9f4      	bls.n	8017560 <_printf_i+0x110>
 8017576:	2b08      	cmp	r3, #8
 8017578:	d10b      	bne.n	8017592 <_printf_i+0x142>
 801757a:	6823      	ldr	r3, [r4, #0]
 801757c:	07df      	lsls	r7, r3, #31
 801757e:	d508      	bpl.n	8017592 <_printf_i+0x142>
 8017580:	6923      	ldr	r3, [r4, #16]
 8017582:	6861      	ldr	r1, [r4, #4]
 8017584:	4299      	cmp	r1, r3
 8017586:	bfde      	ittt	le
 8017588:	2330      	movle	r3, #48	@ 0x30
 801758a:	f806 3c01 	strble.w	r3, [r6, #-1]
 801758e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8017592:	1b92      	subs	r2, r2, r6
 8017594:	6122      	str	r2, [r4, #16]
 8017596:	f8cd a000 	str.w	sl, [sp]
 801759a:	464b      	mov	r3, r9
 801759c:	aa03      	add	r2, sp, #12
 801759e:	4621      	mov	r1, r4
 80175a0:	4640      	mov	r0, r8
 80175a2:	f7ff fee7 	bl	8017374 <_printf_common>
 80175a6:	3001      	adds	r0, #1
 80175a8:	d14a      	bne.n	8017640 <_printf_i+0x1f0>
 80175aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80175ae:	b004      	add	sp, #16
 80175b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80175b4:	6823      	ldr	r3, [r4, #0]
 80175b6:	f043 0320 	orr.w	r3, r3, #32
 80175ba:	6023      	str	r3, [r4, #0]
 80175bc:	4832      	ldr	r0, [pc, #200]	@ (8017688 <_printf_i+0x238>)
 80175be:	2778      	movs	r7, #120	@ 0x78
 80175c0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80175c4:	6823      	ldr	r3, [r4, #0]
 80175c6:	6831      	ldr	r1, [r6, #0]
 80175c8:	061f      	lsls	r7, r3, #24
 80175ca:	f851 5b04 	ldr.w	r5, [r1], #4
 80175ce:	d402      	bmi.n	80175d6 <_printf_i+0x186>
 80175d0:	065f      	lsls	r7, r3, #25
 80175d2:	bf48      	it	mi
 80175d4:	b2ad      	uxthmi	r5, r5
 80175d6:	6031      	str	r1, [r6, #0]
 80175d8:	07d9      	lsls	r1, r3, #31
 80175da:	bf44      	itt	mi
 80175dc:	f043 0320 	orrmi.w	r3, r3, #32
 80175e0:	6023      	strmi	r3, [r4, #0]
 80175e2:	b11d      	cbz	r5, 80175ec <_printf_i+0x19c>
 80175e4:	2310      	movs	r3, #16
 80175e6:	e7ad      	b.n	8017544 <_printf_i+0xf4>
 80175e8:	4826      	ldr	r0, [pc, #152]	@ (8017684 <_printf_i+0x234>)
 80175ea:	e7e9      	b.n	80175c0 <_printf_i+0x170>
 80175ec:	6823      	ldr	r3, [r4, #0]
 80175ee:	f023 0320 	bic.w	r3, r3, #32
 80175f2:	6023      	str	r3, [r4, #0]
 80175f4:	e7f6      	b.n	80175e4 <_printf_i+0x194>
 80175f6:	4616      	mov	r6, r2
 80175f8:	e7bd      	b.n	8017576 <_printf_i+0x126>
 80175fa:	6833      	ldr	r3, [r6, #0]
 80175fc:	6825      	ldr	r5, [r4, #0]
 80175fe:	6961      	ldr	r1, [r4, #20]
 8017600:	1d18      	adds	r0, r3, #4
 8017602:	6030      	str	r0, [r6, #0]
 8017604:	062e      	lsls	r6, r5, #24
 8017606:	681b      	ldr	r3, [r3, #0]
 8017608:	d501      	bpl.n	801760e <_printf_i+0x1be>
 801760a:	6019      	str	r1, [r3, #0]
 801760c:	e002      	b.n	8017614 <_printf_i+0x1c4>
 801760e:	0668      	lsls	r0, r5, #25
 8017610:	d5fb      	bpl.n	801760a <_printf_i+0x1ba>
 8017612:	8019      	strh	r1, [r3, #0]
 8017614:	2300      	movs	r3, #0
 8017616:	6123      	str	r3, [r4, #16]
 8017618:	4616      	mov	r6, r2
 801761a:	e7bc      	b.n	8017596 <_printf_i+0x146>
 801761c:	6833      	ldr	r3, [r6, #0]
 801761e:	1d1a      	adds	r2, r3, #4
 8017620:	6032      	str	r2, [r6, #0]
 8017622:	681e      	ldr	r6, [r3, #0]
 8017624:	6862      	ldr	r2, [r4, #4]
 8017626:	2100      	movs	r1, #0
 8017628:	4630      	mov	r0, r6
 801762a:	f7e8 fe61 	bl	80002f0 <memchr>
 801762e:	b108      	cbz	r0, 8017634 <_printf_i+0x1e4>
 8017630:	1b80      	subs	r0, r0, r6
 8017632:	6060      	str	r0, [r4, #4]
 8017634:	6863      	ldr	r3, [r4, #4]
 8017636:	6123      	str	r3, [r4, #16]
 8017638:	2300      	movs	r3, #0
 801763a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801763e:	e7aa      	b.n	8017596 <_printf_i+0x146>
 8017640:	6923      	ldr	r3, [r4, #16]
 8017642:	4632      	mov	r2, r6
 8017644:	4649      	mov	r1, r9
 8017646:	4640      	mov	r0, r8
 8017648:	47d0      	blx	sl
 801764a:	3001      	adds	r0, #1
 801764c:	d0ad      	beq.n	80175aa <_printf_i+0x15a>
 801764e:	6823      	ldr	r3, [r4, #0]
 8017650:	079b      	lsls	r3, r3, #30
 8017652:	d413      	bmi.n	801767c <_printf_i+0x22c>
 8017654:	68e0      	ldr	r0, [r4, #12]
 8017656:	9b03      	ldr	r3, [sp, #12]
 8017658:	4298      	cmp	r0, r3
 801765a:	bfb8      	it	lt
 801765c:	4618      	movlt	r0, r3
 801765e:	e7a6      	b.n	80175ae <_printf_i+0x15e>
 8017660:	2301      	movs	r3, #1
 8017662:	4632      	mov	r2, r6
 8017664:	4649      	mov	r1, r9
 8017666:	4640      	mov	r0, r8
 8017668:	47d0      	blx	sl
 801766a:	3001      	adds	r0, #1
 801766c:	d09d      	beq.n	80175aa <_printf_i+0x15a>
 801766e:	3501      	adds	r5, #1
 8017670:	68e3      	ldr	r3, [r4, #12]
 8017672:	9903      	ldr	r1, [sp, #12]
 8017674:	1a5b      	subs	r3, r3, r1
 8017676:	42ab      	cmp	r3, r5
 8017678:	dcf2      	bgt.n	8017660 <_printf_i+0x210>
 801767a:	e7eb      	b.n	8017654 <_printf_i+0x204>
 801767c:	2500      	movs	r5, #0
 801767e:	f104 0619 	add.w	r6, r4, #25
 8017682:	e7f5      	b.n	8017670 <_printf_i+0x220>
 8017684:	08017db9 	.word	0x08017db9
 8017688:	08017dca 	.word	0x08017dca

0801768c <__sflush_r>:
 801768c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017694:	0716      	lsls	r6, r2, #28
 8017696:	4605      	mov	r5, r0
 8017698:	460c      	mov	r4, r1
 801769a:	d454      	bmi.n	8017746 <__sflush_r+0xba>
 801769c:	684b      	ldr	r3, [r1, #4]
 801769e:	2b00      	cmp	r3, #0
 80176a0:	dc02      	bgt.n	80176a8 <__sflush_r+0x1c>
 80176a2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80176a4:	2b00      	cmp	r3, #0
 80176a6:	dd48      	ble.n	801773a <__sflush_r+0xae>
 80176a8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80176aa:	2e00      	cmp	r6, #0
 80176ac:	d045      	beq.n	801773a <__sflush_r+0xae>
 80176ae:	2300      	movs	r3, #0
 80176b0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80176b4:	682f      	ldr	r7, [r5, #0]
 80176b6:	6a21      	ldr	r1, [r4, #32]
 80176b8:	602b      	str	r3, [r5, #0]
 80176ba:	d030      	beq.n	801771e <__sflush_r+0x92>
 80176bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80176be:	89a3      	ldrh	r3, [r4, #12]
 80176c0:	0759      	lsls	r1, r3, #29
 80176c2:	d505      	bpl.n	80176d0 <__sflush_r+0x44>
 80176c4:	6863      	ldr	r3, [r4, #4]
 80176c6:	1ad2      	subs	r2, r2, r3
 80176c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80176ca:	b10b      	cbz	r3, 80176d0 <__sflush_r+0x44>
 80176cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80176ce:	1ad2      	subs	r2, r2, r3
 80176d0:	2300      	movs	r3, #0
 80176d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80176d4:	6a21      	ldr	r1, [r4, #32]
 80176d6:	4628      	mov	r0, r5
 80176d8:	47b0      	blx	r6
 80176da:	1c43      	adds	r3, r0, #1
 80176dc:	89a3      	ldrh	r3, [r4, #12]
 80176de:	d106      	bne.n	80176ee <__sflush_r+0x62>
 80176e0:	6829      	ldr	r1, [r5, #0]
 80176e2:	291d      	cmp	r1, #29
 80176e4:	d82b      	bhi.n	801773e <__sflush_r+0xb2>
 80176e6:	4a2a      	ldr	r2, [pc, #168]	@ (8017790 <__sflush_r+0x104>)
 80176e8:	40ca      	lsrs	r2, r1
 80176ea:	07d6      	lsls	r6, r2, #31
 80176ec:	d527      	bpl.n	801773e <__sflush_r+0xb2>
 80176ee:	2200      	movs	r2, #0
 80176f0:	6062      	str	r2, [r4, #4]
 80176f2:	04d9      	lsls	r1, r3, #19
 80176f4:	6922      	ldr	r2, [r4, #16]
 80176f6:	6022      	str	r2, [r4, #0]
 80176f8:	d504      	bpl.n	8017704 <__sflush_r+0x78>
 80176fa:	1c42      	adds	r2, r0, #1
 80176fc:	d101      	bne.n	8017702 <__sflush_r+0x76>
 80176fe:	682b      	ldr	r3, [r5, #0]
 8017700:	b903      	cbnz	r3, 8017704 <__sflush_r+0x78>
 8017702:	6560      	str	r0, [r4, #84]	@ 0x54
 8017704:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017706:	602f      	str	r7, [r5, #0]
 8017708:	b1b9      	cbz	r1, 801773a <__sflush_r+0xae>
 801770a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801770e:	4299      	cmp	r1, r3
 8017710:	d002      	beq.n	8017718 <__sflush_r+0x8c>
 8017712:	4628      	mov	r0, r5
 8017714:	f7ff fb4a 	bl	8016dac <_free_r>
 8017718:	2300      	movs	r3, #0
 801771a:	6363      	str	r3, [r4, #52]	@ 0x34
 801771c:	e00d      	b.n	801773a <__sflush_r+0xae>
 801771e:	2301      	movs	r3, #1
 8017720:	4628      	mov	r0, r5
 8017722:	47b0      	blx	r6
 8017724:	4602      	mov	r2, r0
 8017726:	1c50      	adds	r0, r2, #1
 8017728:	d1c9      	bne.n	80176be <__sflush_r+0x32>
 801772a:	682b      	ldr	r3, [r5, #0]
 801772c:	2b00      	cmp	r3, #0
 801772e:	d0c6      	beq.n	80176be <__sflush_r+0x32>
 8017730:	2b1d      	cmp	r3, #29
 8017732:	d001      	beq.n	8017738 <__sflush_r+0xac>
 8017734:	2b16      	cmp	r3, #22
 8017736:	d11e      	bne.n	8017776 <__sflush_r+0xea>
 8017738:	602f      	str	r7, [r5, #0]
 801773a:	2000      	movs	r0, #0
 801773c:	e022      	b.n	8017784 <__sflush_r+0xf8>
 801773e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017742:	b21b      	sxth	r3, r3
 8017744:	e01b      	b.n	801777e <__sflush_r+0xf2>
 8017746:	690f      	ldr	r7, [r1, #16]
 8017748:	2f00      	cmp	r7, #0
 801774a:	d0f6      	beq.n	801773a <__sflush_r+0xae>
 801774c:	0793      	lsls	r3, r2, #30
 801774e:	680e      	ldr	r6, [r1, #0]
 8017750:	bf08      	it	eq
 8017752:	694b      	ldreq	r3, [r1, #20]
 8017754:	600f      	str	r7, [r1, #0]
 8017756:	bf18      	it	ne
 8017758:	2300      	movne	r3, #0
 801775a:	eba6 0807 	sub.w	r8, r6, r7
 801775e:	608b      	str	r3, [r1, #8]
 8017760:	f1b8 0f00 	cmp.w	r8, #0
 8017764:	dde9      	ble.n	801773a <__sflush_r+0xae>
 8017766:	6a21      	ldr	r1, [r4, #32]
 8017768:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801776a:	4643      	mov	r3, r8
 801776c:	463a      	mov	r2, r7
 801776e:	4628      	mov	r0, r5
 8017770:	47b0      	blx	r6
 8017772:	2800      	cmp	r0, #0
 8017774:	dc08      	bgt.n	8017788 <__sflush_r+0xfc>
 8017776:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801777a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801777e:	81a3      	strh	r3, [r4, #12]
 8017780:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017788:	4407      	add	r7, r0
 801778a:	eba8 0800 	sub.w	r8, r8, r0
 801778e:	e7e7      	b.n	8017760 <__sflush_r+0xd4>
 8017790:	20400001 	.word	0x20400001

08017794 <_fflush_r>:
 8017794:	b538      	push	{r3, r4, r5, lr}
 8017796:	690b      	ldr	r3, [r1, #16]
 8017798:	4605      	mov	r5, r0
 801779a:	460c      	mov	r4, r1
 801779c:	b913      	cbnz	r3, 80177a4 <_fflush_r+0x10>
 801779e:	2500      	movs	r5, #0
 80177a0:	4628      	mov	r0, r5
 80177a2:	bd38      	pop	{r3, r4, r5, pc}
 80177a4:	b118      	cbz	r0, 80177ae <_fflush_r+0x1a>
 80177a6:	6a03      	ldr	r3, [r0, #32]
 80177a8:	b90b      	cbnz	r3, 80177ae <_fflush_r+0x1a>
 80177aa:	f7fe ffb3 	bl	8016714 <__sinit>
 80177ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80177b2:	2b00      	cmp	r3, #0
 80177b4:	d0f3      	beq.n	801779e <_fflush_r+0xa>
 80177b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80177b8:	07d0      	lsls	r0, r2, #31
 80177ba:	d404      	bmi.n	80177c6 <_fflush_r+0x32>
 80177bc:	0599      	lsls	r1, r3, #22
 80177be:	d402      	bmi.n	80177c6 <_fflush_r+0x32>
 80177c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80177c2:	f7ff fae2 	bl	8016d8a <__retarget_lock_acquire_recursive>
 80177c6:	4628      	mov	r0, r5
 80177c8:	4621      	mov	r1, r4
 80177ca:	f7ff ff5f 	bl	801768c <__sflush_r>
 80177ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80177d0:	07da      	lsls	r2, r3, #31
 80177d2:	4605      	mov	r5, r0
 80177d4:	d4e4      	bmi.n	80177a0 <_fflush_r+0xc>
 80177d6:	89a3      	ldrh	r3, [r4, #12]
 80177d8:	059b      	lsls	r3, r3, #22
 80177da:	d4e1      	bmi.n	80177a0 <_fflush_r+0xc>
 80177dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80177de:	f7ff fad5 	bl	8016d8c <__retarget_lock_release_recursive>
 80177e2:	e7dd      	b.n	80177a0 <_fflush_r+0xc>

080177e4 <__swhatbuf_r>:
 80177e4:	b570      	push	{r4, r5, r6, lr}
 80177e6:	460c      	mov	r4, r1
 80177e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80177ec:	2900      	cmp	r1, #0
 80177ee:	b096      	sub	sp, #88	@ 0x58
 80177f0:	4615      	mov	r5, r2
 80177f2:	461e      	mov	r6, r3
 80177f4:	da0d      	bge.n	8017812 <__swhatbuf_r+0x2e>
 80177f6:	89a3      	ldrh	r3, [r4, #12]
 80177f8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80177fc:	f04f 0100 	mov.w	r1, #0
 8017800:	bf14      	ite	ne
 8017802:	2340      	movne	r3, #64	@ 0x40
 8017804:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8017808:	2000      	movs	r0, #0
 801780a:	6031      	str	r1, [r6, #0]
 801780c:	602b      	str	r3, [r5, #0]
 801780e:	b016      	add	sp, #88	@ 0x58
 8017810:	bd70      	pop	{r4, r5, r6, pc}
 8017812:	466a      	mov	r2, sp
 8017814:	f000 f862 	bl	80178dc <_fstat_r>
 8017818:	2800      	cmp	r0, #0
 801781a:	dbec      	blt.n	80177f6 <__swhatbuf_r+0x12>
 801781c:	9901      	ldr	r1, [sp, #4]
 801781e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8017822:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8017826:	4259      	negs	r1, r3
 8017828:	4159      	adcs	r1, r3
 801782a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801782e:	e7eb      	b.n	8017808 <__swhatbuf_r+0x24>

08017830 <__smakebuf_r>:
 8017830:	898b      	ldrh	r3, [r1, #12]
 8017832:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017834:	079d      	lsls	r5, r3, #30
 8017836:	4606      	mov	r6, r0
 8017838:	460c      	mov	r4, r1
 801783a:	d507      	bpl.n	801784c <__smakebuf_r+0x1c>
 801783c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8017840:	6023      	str	r3, [r4, #0]
 8017842:	6123      	str	r3, [r4, #16]
 8017844:	2301      	movs	r3, #1
 8017846:	6163      	str	r3, [r4, #20]
 8017848:	b003      	add	sp, #12
 801784a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801784c:	ab01      	add	r3, sp, #4
 801784e:	466a      	mov	r2, sp
 8017850:	f7ff ffc8 	bl	80177e4 <__swhatbuf_r>
 8017854:	9f00      	ldr	r7, [sp, #0]
 8017856:	4605      	mov	r5, r0
 8017858:	4639      	mov	r1, r7
 801785a:	4630      	mov	r0, r6
 801785c:	f7fe fe42 	bl	80164e4 <_malloc_r>
 8017860:	b948      	cbnz	r0, 8017876 <__smakebuf_r+0x46>
 8017862:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017866:	059a      	lsls	r2, r3, #22
 8017868:	d4ee      	bmi.n	8017848 <__smakebuf_r+0x18>
 801786a:	f023 0303 	bic.w	r3, r3, #3
 801786e:	f043 0302 	orr.w	r3, r3, #2
 8017872:	81a3      	strh	r3, [r4, #12]
 8017874:	e7e2      	b.n	801783c <__smakebuf_r+0xc>
 8017876:	89a3      	ldrh	r3, [r4, #12]
 8017878:	6020      	str	r0, [r4, #0]
 801787a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801787e:	81a3      	strh	r3, [r4, #12]
 8017880:	9b01      	ldr	r3, [sp, #4]
 8017882:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8017886:	b15b      	cbz	r3, 80178a0 <__smakebuf_r+0x70>
 8017888:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801788c:	4630      	mov	r0, r6
 801788e:	f000 f837 	bl	8017900 <_isatty_r>
 8017892:	b128      	cbz	r0, 80178a0 <__smakebuf_r+0x70>
 8017894:	89a3      	ldrh	r3, [r4, #12]
 8017896:	f023 0303 	bic.w	r3, r3, #3
 801789a:	f043 0301 	orr.w	r3, r3, #1
 801789e:	81a3      	strh	r3, [r4, #12]
 80178a0:	89a3      	ldrh	r3, [r4, #12]
 80178a2:	431d      	orrs	r5, r3
 80178a4:	81a5      	strh	r5, [r4, #12]
 80178a6:	e7cf      	b.n	8017848 <__smakebuf_r+0x18>

080178a8 <memmove>:
 80178a8:	4288      	cmp	r0, r1
 80178aa:	b510      	push	{r4, lr}
 80178ac:	eb01 0402 	add.w	r4, r1, r2
 80178b0:	d902      	bls.n	80178b8 <memmove+0x10>
 80178b2:	4284      	cmp	r4, r0
 80178b4:	4623      	mov	r3, r4
 80178b6:	d807      	bhi.n	80178c8 <memmove+0x20>
 80178b8:	1e43      	subs	r3, r0, #1
 80178ba:	42a1      	cmp	r1, r4
 80178bc:	d008      	beq.n	80178d0 <memmove+0x28>
 80178be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80178c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80178c6:	e7f8      	b.n	80178ba <memmove+0x12>
 80178c8:	4402      	add	r2, r0
 80178ca:	4601      	mov	r1, r0
 80178cc:	428a      	cmp	r2, r1
 80178ce:	d100      	bne.n	80178d2 <memmove+0x2a>
 80178d0:	bd10      	pop	{r4, pc}
 80178d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80178d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80178da:	e7f7      	b.n	80178cc <memmove+0x24>

080178dc <_fstat_r>:
 80178dc:	b538      	push	{r3, r4, r5, lr}
 80178de:	4d07      	ldr	r5, [pc, #28]	@ (80178fc <_fstat_r+0x20>)
 80178e0:	2300      	movs	r3, #0
 80178e2:	4604      	mov	r4, r0
 80178e4:	4608      	mov	r0, r1
 80178e6:	4611      	mov	r1, r2
 80178e8:	602b      	str	r3, [r5, #0]
 80178ea:	f7e9 fd2d 	bl	8001348 <_fstat>
 80178ee:	1c43      	adds	r3, r0, #1
 80178f0:	d102      	bne.n	80178f8 <_fstat_r+0x1c>
 80178f2:	682b      	ldr	r3, [r5, #0]
 80178f4:	b103      	cbz	r3, 80178f8 <_fstat_r+0x1c>
 80178f6:	6023      	str	r3, [r4, #0]
 80178f8:	bd38      	pop	{r3, r4, r5, pc}
 80178fa:	bf00      	nop
 80178fc:	24005598 	.word	0x24005598

08017900 <_isatty_r>:
 8017900:	b538      	push	{r3, r4, r5, lr}
 8017902:	4d06      	ldr	r5, [pc, #24]	@ (801791c <_isatty_r+0x1c>)
 8017904:	2300      	movs	r3, #0
 8017906:	4604      	mov	r4, r0
 8017908:	4608      	mov	r0, r1
 801790a:	602b      	str	r3, [r5, #0]
 801790c:	f7e9 fc8a 	bl	8001224 <_isatty>
 8017910:	1c43      	adds	r3, r0, #1
 8017912:	d102      	bne.n	801791a <_isatty_r+0x1a>
 8017914:	682b      	ldr	r3, [r5, #0]
 8017916:	b103      	cbz	r3, 801791a <_isatty_r+0x1a>
 8017918:	6023      	str	r3, [r4, #0]
 801791a:	bd38      	pop	{r3, r4, r5, pc}
 801791c:	24005598 	.word	0x24005598

08017920 <_realloc_r>:
 8017920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017924:	4607      	mov	r7, r0
 8017926:	4614      	mov	r4, r2
 8017928:	460d      	mov	r5, r1
 801792a:	b921      	cbnz	r1, 8017936 <_realloc_r+0x16>
 801792c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017930:	4611      	mov	r1, r2
 8017932:	f7fe bdd7 	b.w	80164e4 <_malloc_r>
 8017936:	b92a      	cbnz	r2, 8017944 <_realloc_r+0x24>
 8017938:	f7ff fa38 	bl	8016dac <_free_r>
 801793c:	4625      	mov	r5, r4
 801793e:	4628      	mov	r0, r5
 8017940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017944:	f000 f81a 	bl	801797c <_malloc_usable_size_r>
 8017948:	4284      	cmp	r4, r0
 801794a:	4606      	mov	r6, r0
 801794c:	d802      	bhi.n	8017954 <_realloc_r+0x34>
 801794e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8017952:	d8f4      	bhi.n	801793e <_realloc_r+0x1e>
 8017954:	4621      	mov	r1, r4
 8017956:	4638      	mov	r0, r7
 8017958:	f7fe fdc4 	bl	80164e4 <_malloc_r>
 801795c:	4680      	mov	r8, r0
 801795e:	b908      	cbnz	r0, 8017964 <_realloc_r+0x44>
 8017960:	4645      	mov	r5, r8
 8017962:	e7ec      	b.n	801793e <_realloc_r+0x1e>
 8017964:	42b4      	cmp	r4, r6
 8017966:	4622      	mov	r2, r4
 8017968:	4629      	mov	r1, r5
 801796a:	bf28      	it	cs
 801796c:	4632      	movcs	r2, r6
 801796e:	f7ff fa0e 	bl	8016d8e <memcpy>
 8017972:	4629      	mov	r1, r5
 8017974:	4638      	mov	r0, r7
 8017976:	f7ff fa19 	bl	8016dac <_free_r>
 801797a:	e7f1      	b.n	8017960 <_realloc_r+0x40>

0801797c <_malloc_usable_size_r>:
 801797c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017980:	1f18      	subs	r0, r3, #4
 8017982:	2b00      	cmp	r3, #0
 8017984:	bfbc      	itt	lt
 8017986:	580b      	ldrlt	r3, [r1, r0]
 8017988:	18c0      	addlt	r0, r0, r3
 801798a:	4770      	bx	lr

0801798c <_init>:
 801798c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801798e:	bf00      	nop
 8017990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017992:	bc08      	pop	{r3}
 8017994:	469e      	mov	lr, r3
 8017996:	4770      	bx	lr

08017998 <_fini>:
 8017998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801799a:	bf00      	nop
 801799c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801799e:	bc08      	pop	{r3}
 80179a0:	469e      	mov	lr, r3
 80179a2:	4770      	bx	lr
