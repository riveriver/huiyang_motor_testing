
huiyang_motor_testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f364  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  0800f604  0800f604  00010604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f80c  0800f80c  0001080c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f814  0800f814  00010814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800f818  0800f818  00010818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  24000000  0800f81c  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000008b8  2400006c  0800f888  0001106c  2**2
                  ALLOC
  8 ._user_heap_stack 00004004  24000924  0800f888  00011924  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001106c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001ff7c  00000000  00000000  0001109a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003fdc  00000000  00000000  00031016  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001818  00000000  00000000  00034ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000012ac  00000000  00000000  00036810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003c19c  00000000  00000000  00037abc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00022f84  00000000  00000000  00073c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016e90f  00000000  00000000  00096bdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  002054eb  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006e60  00000000  00000000  00205530  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000056  00000000  00000000  0020c390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400006c 	.word	0x2400006c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800f5ec 	.word	0x0800f5ec

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000070 	.word	0x24000070
 80002dc:	0800f5ec 	.word	0x0800f5ec

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b08a      	sub	sp, #40	@ 0x28
 80006c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c2:	f107 0314 	add.w	r3, r7, #20
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	605a      	str	r2, [r3, #4]
 80006cc:	609a      	str	r2, [r3, #8]
 80006ce:	60da      	str	r2, [r3, #12]
 80006d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006d2:	4b31      	ldr	r3, [pc, #196]	@ (8000798 <MX_GPIO_Init+0xdc>)
 80006d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006d8:	4a2f      	ldr	r2, [pc, #188]	@ (8000798 <MX_GPIO_Init+0xdc>)
 80006da:	f043 0310 	orr.w	r3, r3, #16
 80006de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006e2:	4b2d      	ldr	r3, [pc, #180]	@ (8000798 <MX_GPIO_Init+0xdc>)
 80006e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006e8:	f003 0310 	and.w	r3, r3, #16
 80006ec:	613b      	str	r3, [r7, #16]
 80006ee:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006f0:	4b29      	ldr	r3, [pc, #164]	@ (8000798 <MX_GPIO_Init+0xdc>)
 80006f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006f6:	4a28      	ldr	r2, [pc, #160]	@ (8000798 <MX_GPIO_Init+0xdc>)
 80006f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000700:	4b25      	ldr	r3, [pc, #148]	@ (8000798 <MX_GPIO_Init+0xdc>)
 8000702:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000706:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800070e:	4b22      	ldr	r3, [pc, #136]	@ (8000798 <MX_GPIO_Init+0xdc>)
 8000710:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000714:	4a20      	ldr	r2, [pc, #128]	@ (8000798 <MX_GPIO_Init+0xdc>)
 8000716:	f043 0308 	orr.w	r3, r3, #8
 800071a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800071e:	4b1e      	ldr	r3, [pc, #120]	@ (8000798 <MX_GPIO_Init+0xdc>)
 8000720:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000724:	f003 0308 	and.w	r3, r3, #8
 8000728:	60bb      	str	r3, [r7, #8]
 800072a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800072c:	4b1a      	ldr	r3, [pc, #104]	@ (8000798 <MX_GPIO_Init+0xdc>)
 800072e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000732:	4a19      	ldr	r2, [pc, #100]	@ (8000798 <MX_GPIO_Init+0xdc>)
 8000734:	f043 0304 	orr.w	r3, r3, #4
 8000738:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800073c:	4b16      	ldr	r3, [pc, #88]	@ (8000798 <MX_GPIO_Init+0xdc>)
 800073e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000742:	f003 0304 	and.w	r3, r3, #4
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074a:	4b13      	ldr	r3, [pc, #76]	@ (8000798 <MX_GPIO_Init+0xdc>)
 800074c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000750:	4a11      	ldr	r2, [pc, #68]	@ (8000798 <MX_GPIO_Init+0xdc>)
 8000752:	f043 0301 	orr.w	r3, r3, #1
 8000756:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800075a:	4b0f      	ldr	r3, [pc, #60]	@ (8000798 <MX_GPIO_Init+0xdc>)
 800075c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000760:	f003 0301 	and.w	r3, r3, #1
 8000764:	603b      	str	r3, [r7, #0]
 8000766:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PE3_GPIO_Port, PE3_Pin, GPIO_PIN_RESET);
 8000768:	2200      	movs	r2, #0
 800076a:	2108      	movs	r1, #8
 800076c:	480b      	ldr	r0, [pc, #44]	@ (800079c <MX_GPIO_Init+0xe0>)
 800076e:	f002 f8f3 	bl	8002958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PE3_Pin;
 8000772:	2308      	movs	r3, #8
 8000774:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000776:	2301      	movs	r3, #1
 8000778:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077e:	2300      	movs	r3, #0
 8000780:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PE3_GPIO_Port, &GPIO_InitStruct);
 8000782:	f107 0314 	add.w	r3, r7, #20
 8000786:	4619      	mov	r1, r3
 8000788:	4804      	ldr	r0, [pc, #16]	@ (800079c <MX_GPIO_Init+0xe0>)
 800078a:	f001 ff35 	bl	80025f8 <HAL_GPIO_Init>

}
 800078e:	bf00      	nop
 8000790:	3728      	adds	r7, #40	@ 0x28
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	58024400 	.word	0x58024400
 800079c:	58021000 	.word	0x58021000

080007a0 <MPU_Config>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void MPU_Config(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80007a6:	463b      	mov	r3, r7
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	605a      	str	r2, [r3, #4]
 80007ae:	609a      	str	r2, [r3, #8]
 80007b0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80007b2:	f001 f941 	bl	8001a38 <HAL_MPU_Disable>

  /* Configure the MPU attributes for the QSPI 256MB without instruction access */
  MPU_InitStruct.Enable           = MPU_REGION_ENABLE;
 80007b6:	2301      	movs	r3, #1
 80007b8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number           = MPU_REGION_NUMBER0;
 80007ba:	2300      	movs	r3, #0
 80007bc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress      = QSPI_BASE;
 80007be:	f04f 4310 	mov.w	r3, #2415919104	@ 0x90000000
 80007c2:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size             = MPU_REGION_SIZE_256MB;
 80007c4:	231b      	movs	r3, #27
 80007c6:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80007c8:	2300      	movs	r3, #0
 80007ca:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable     = MPU_ACCESS_NOT_BUFFERABLE;
 80007cc:	2300      	movs	r3, #0
 80007ce:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable      = MPU_ACCESS_NOT_CACHEABLE;
 80007d0:	2300      	movs	r3, #0
 80007d2:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable      = MPU_ACCESS_NOT_SHAREABLE;
 80007d4:	2300      	movs	r3, #0
 80007d6:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.DisableExec      = MPU_INSTRUCTION_ACCESS_DISABLE;
 80007d8:	2301      	movs	r3, #1
 80007da:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.TypeExtField     = MPU_TEX_LEVEL1;
 80007dc:	2301      	movs	r3, #1
 80007de:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 80007e0:	2300      	movs	r3, #0
 80007e2:	727b      	strb	r3, [r7, #9]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007e4:	463b      	mov	r3, r7
 80007e6:	4618      	mov	r0, r3
 80007e8:	f001 f95e 	bl	8001aa8 <HAL_MPU_ConfigRegion>

  /* Configure the MPU attributes for the QSPI 8MB (QSPI Flash Size) to Cacheable WT */
  MPU_InitStruct.Enable           = MPU_REGION_ENABLE;
 80007ec:	2301      	movs	r3, #1
 80007ee:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number           = MPU_REGION_NUMBER1;
 80007f0:	2301      	movs	r3, #1
 80007f2:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress      = QSPI_BASE;
 80007f4:	f04f 4310 	mov.w	r3, #2415919104	@ 0x90000000
 80007f8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size             = MPU_REGION_SIZE_8MB;
 80007fa:	2316      	movs	r3, #22
 80007fc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RO;
 80007fe:	2305      	movs	r3, #5
 8000800:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable     = MPU_ACCESS_BUFFERABLE;
 8000802:	2301      	movs	r3, #1
 8000804:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable      = MPU_ACCESS_CACHEABLE;
 8000806:	2301      	movs	r3, #1
 8000808:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable      = MPU_ACCESS_NOT_SHAREABLE;
 800080a:	2300      	movs	r3, #0
 800080c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.DisableExec      = MPU_INSTRUCTION_ACCESS_ENABLE;
 800080e:	2300      	movs	r3, #0
 8000810:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.TypeExtField     = MPU_TEX_LEVEL1;
 8000812:	2301      	movs	r3, #1
 8000814:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 8000816:	2300      	movs	r3, #0
 8000818:	727b      	strb	r3, [r7, #9]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800081a:	463b      	mov	r3, r7
 800081c:	4618      	mov	r0, r3
 800081e:	f001 f943 	bl	8001aa8 <HAL_MPU_ConfigRegion>

  /* Setup AXI SRAM in Cacheable WB */
  MPU_InitStruct.Enable           = MPU_REGION_ENABLE;
 8000822:	2301      	movs	r3, #1
 8000824:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress      = D1_AXISRAM_BASE;
 8000826:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 800082a:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size             = MPU_REGION_SIZE_512KB;
 800082c:	2312      	movs	r3, #18
 800082e:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000830:	2303      	movs	r3, #3
 8000832:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable     = MPU_ACCESS_BUFFERABLE;
 8000834:	2301      	movs	r3, #1
 8000836:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable      = MPU_ACCESS_CACHEABLE;
 8000838:	2301      	movs	r3, #1
 800083a:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable      = MPU_ACCESS_SHAREABLE;
 800083c:	2301      	movs	r3, #1
 800083e:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number           = MPU_REGION_NUMBER2;
 8000840:	2302      	movs	r3, #2
 8000842:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField     = MPU_TEX_LEVEL1;
 8000844:	2301      	movs	r3, #1
 8000846:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 8000848:	2300      	movs	r3, #0
 800084a:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec      = MPU_INSTRUCTION_ACCESS_ENABLE;
 800084c:	2300      	movs	r3, #0
 800084e:	733b      	strb	r3, [r7, #12]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000850:	463b      	mov	r3, r7
 8000852:	4618      	mov	r0, r3
 8000854:	f001 f928 	bl	8001aa8 <HAL_MPU_ConfigRegion>

  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000858:	2004      	movs	r0, #4
 800085a:	f001 f905 	bl	8001a68 <HAL_MPU_Enable>
}
 800085e:	bf00      	nop
 8000860:	3710      	adds	r7, #16
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
	...

08000868 <CPU_CACHE_Enable>:

static void CPU_CACHE_Enable(void)
{
 8000868:	b480      	push	{r7}
 800086a:	b085      	sub	sp, #20
 800086c:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800086e:	4b34      	ldr	r3, [pc, #208]	@ (8000940 <CPU_CACHE_Enable+0xd8>)
 8000870:	695b      	ldr	r3, [r3, #20]
 8000872:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000876:	2b00      	cmp	r3, #0
 8000878:	d11b      	bne.n	80008b2 <CPU_CACHE_Enable+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800087a:	f3bf 8f4f 	dsb	sy
}
 800087e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000880:	f3bf 8f6f 	isb	sy
}
 8000884:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000886:	4b2e      	ldr	r3, [pc, #184]	@ (8000940 <CPU_CACHE_Enable+0xd8>)
 8000888:	2200      	movs	r2, #0
 800088a:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800088e:	f3bf 8f4f 	dsb	sy
}
 8000892:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000894:	f3bf 8f6f 	isb	sy
}
 8000898:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800089a:	4b29      	ldr	r3, [pc, #164]	@ (8000940 <CPU_CACHE_Enable+0xd8>)
 800089c:	695b      	ldr	r3, [r3, #20]
 800089e:	4a28      	ldr	r2, [pc, #160]	@ (8000940 <CPU_CACHE_Enable+0xd8>)
 80008a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008a4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80008a6:	f3bf 8f4f 	dsb	sy
}
 80008aa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008ac:	f3bf 8f6f 	isb	sy
}
 80008b0:	e000      	b.n	80008b4 <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80008b2:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80008b4:	4b22      	ldr	r3, [pc, #136]	@ (8000940 <CPU_CACHE_Enable+0xd8>)
 80008b6:	695b      	ldr	r3, [r3, #20]
 80008b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d138      	bne.n	8000932 <CPU_CACHE_Enable+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80008c0:	4b1f      	ldr	r3, [pc, #124]	@ (8000940 <CPU_CACHE_Enable+0xd8>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80008c8:	f3bf 8f4f 	dsb	sy
}
 80008cc:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80008ce:	4b1c      	ldr	r3, [pc, #112]	@ (8000940 <CPU_CACHE_Enable+0xd8>)
 80008d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80008d4:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	0b5b      	lsrs	r3, r3, #13
 80008da:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80008de:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	08db      	lsrs	r3, r3, #3
 80008e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80008e8:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008ea:	68bb      	ldr	r3, [r7, #8]
 80008ec:	015a      	lsls	r2, r3, #5
 80008ee:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80008f2:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80008f4:	687a      	ldr	r2, [r7, #4]
 80008f6:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008f8:	4911      	ldr	r1, [pc, #68]	@ (8000940 <CPU_CACHE_Enable+0xd8>)
 80008fa:	4313      	orrs	r3, r2
 80008fc:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	1e5a      	subs	r2, r3, #1
 8000904:	607a      	str	r2, [r7, #4]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d1ef      	bne.n	80008ea <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	1e5a      	subs	r2, r3, #1
 800090e:	60ba      	str	r2, [r7, #8]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d1e5      	bne.n	80008e0 <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8000914:	f3bf 8f4f 	dsb	sy
}
 8000918:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800091a:	4b09      	ldr	r3, [pc, #36]	@ (8000940 <CPU_CACHE_Enable+0xd8>)
 800091c:	695b      	ldr	r3, [r3, #20]
 800091e:	4a08      	ldr	r2, [pc, #32]	@ (8000940 <CPU_CACHE_Enable+0xd8>)
 8000920:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000924:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000926:	f3bf 8f4f 	dsb	sy
}
 800092a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800092c:	f3bf 8f6f 	isb	sy
}
 8000930:	e000      	b.n	8000934 <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000932:	bf00      	nop
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 8000934:	bf00      	nop
 8000936:	3714      	adds	r7, #20
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr
 8000940:	e000ed00 	.word	0xe000ed00

08000944 <LED_Blink>:

void LED_Blink(uint32_t delay)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(PE3_GPIO_Port,PE3_Pin,GPIO_PIN_SET);
 800094c:	2201      	movs	r2, #1
 800094e:	2108      	movs	r1, #8
 8000950:	480a      	ldr	r0, [pc, #40]	@ (800097c <LED_Blink+0x38>)
 8000952:	f002 f801 	bl	8002958 <HAL_GPIO_WritePin>
	HAL_Delay(delay - 1);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	3b01      	subs	r3, #1
 800095a:	4618      	mov	r0, r3
 800095c:	f000 ff2c 	bl	80017b8 <HAL_Delay>
	HAL_GPIO_WritePin(PE3_GPIO_Port,PE3_Pin,GPIO_PIN_RESET);
 8000960:	2200      	movs	r2, #0
 8000962:	2108      	movs	r1, #8
 8000964:	4805      	ldr	r0, [pc, #20]	@ (800097c <LED_Blink+0x38>)
 8000966:	f001 fff7 	bl	8002958 <HAL_GPIO_WritePin>
	HAL_Delay(500-1);
 800096a:	f240 10f3 	movw	r0, #499	@ 0x1f3
 800096e:	f000 ff23 	bl	80017b8 <HAL_Delay>
}
 8000972:	bf00      	nop
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	58021000 	.word	0x58021000

08000980 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08a      	sub	sp, #40	@ 0x28
 8000984:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	#ifdef W25Qxx
	  SCB->VTOR = QSPI_BASE;
		#endif
	MPU_Config();
 8000986:	f7ff ff0b 	bl	80007a0 <MPU_Config>
	CPU_CACHE_Enable();
 800098a:	f7ff ff6d 	bl	8000868 <CPU_CACHE_Enable>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800098e:	f000 fe81 	bl	8001694 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000992:	f000 f8d7 	bl	8000b44 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000996:	f000 f951 	bl	8000c3c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800099a:	f7ff fe8f 	bl	80006bc <MX_GPIO_Init>
  MX_SDMMC1_SD_Init();
 800099e:	f000 fa4d 	bl	8000e3c <MX_SDMMC1_SD_Init>
  MX_USART2_UART_Init();
 80009a2:	f000 fce3 	bl	800136c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80009a6:	f000 fd2d 	bl	8001404 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 80009aa:	f00a fbdd 	bl	800b168 <MX_FATFS_Init>
  MX_TIM3_Init();
 80009ae:	f000 fc11 	bl	80011d4 <MX_TIM3_Init>
  MX_UART4_Init();
 80009b2:	f000 fc8f 	bl	80012d4 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart3);
 80009b6:	4850      	ldr	r0, [pc, #320]	@ (8000af8 <main+0x178>)
 80009b8:	f000 f97a 	bl	8000cb0 <RetargetInit>
	printf("\r\n****** FatFs Example ******\r\n\r\n"); 
 80009bc:	484f      	ldr	r0, [pc, #316]	@ (8000afc <main+0x17c>)
 80009be:	f00d fd1f 	bl	800e400 <puts>
	//在外部 SD 卡挂载文件系统，文件系统挂载时会对 SD 卡初始化
    f_res = f_mount(&fs, "0:", 1);
 80009c2:	2201      	movs	r2, #1
 80009c4:	494e      	ldr	r1, [pc, #312]	@ (8000b00 <main+0x180>)
 80009c6:	484f      	ldr	r0, [pc, #316]	@ (8000b04 <main+0x184>)
 80009c8:	f00c fb02 	bl	800cfd0 <f_mount>
 80009cc:	4603      	mov	r3, r0
 80009ce:	461a      	mov	r2, r3
 80009d0:	4b4d      	ldr	r3, [pc, #308]	@ (8000b08 <main+0x188>)
 80009d2:	701a      	strb	r2, [r3, #0]
	if(f_res == FR_OK)
 80009d4:	4b4c      	ldr	r3, [pc, #304]	@ (8000b08 <main+0x188>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d121      	bne.n	8000a20 <main+0xa0>
	{
		printf("挂载成功\r\n");
 80009dc:	484b      	ldr	r0, [pc, #300]	@ (8000b0c <main+0x18c>)
 80009de:	f00d fd0f 	bl	800e400 <puts>
		f_res = f_open(&file, "testing.csv", FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
 80009e2:	2213      	movs	r2, #19
 80009e4:	494a      	ldr	r1, [pc, #296]	@ (8000b10 <main+0x190>)
 80009e6:	484b      	ldr	r0, [pc, #300]	@ (8000b14 <main+0x194>)
 80009e8:	f00c fb38 	bl	800d05c <f_open>
 80009ec:	4603      	mov	r3, r0
 80009ee:	461a      	mov	r2, r3
 80009f0:	4b45      	ldr	r3, [pc, #276]	@ (8000b08 <main+0x188>)
 80009f2:	701a      	strb	r2, [r3, #0]
		if(f_res == FR_OK)
 80009f4:	4b44      	ldr	r3, [pc, #272]	@ (8000b08 <main+0x188>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d114      	bne.n	8000a26 <main+0xa6>
		{
			printf("文件打开成功\r\n");
 80009fc:	4846      	ldr	r0, [pc, #280]	@ (8000b18 <main+0x198>)
 80009fe:	f00d fcff 	bl	800e400 <puts>
			// 将写指针移到文件末尾
			f_lseek(&file, f_size(&file));
 8000a02:	4b44      	ldr	r3, [pc, #272]	@ (8000b14 <main+0x194>)
 8000a04:	68db      	ldr	r3, [r3, #12]
 8000a06:	4619      	mov	r1, r3
 8000a08:	4842      	ldr	r0, [pc, #264]	@ (8000b14 <main+0x194>)
 8000a0a:	f00c fed4 	bl	800d7b6 <f_lseek>
			// 如果是新文件，写入表头
			if(f_size(&file) == 0) {
 8000a0e:	4b41      	ldr	r3, [pc, #260]	@ (8000b14 <main+0x194>)
 8000a10:	68db      	ldr	r3, [r3, #12]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d107      	bne.n	8000a26 <main+0xa6>
				f_printf(&file, "Time(hh:mm:ss:msms)\r\n");
 8000a16:	4941      	ldr	r1, [pc, #260]	@ (8000b1c <main+0x19c>)
 8000a18:	483e      	ldr	r0, [pc, #248]	@ (8000b14 <main+0x194>)
 8000a1a:	f00d f94d 	bl	800dcb8 <f_printf>
 8000a1e:	e002      	b.n	8000a26 <main+0xa6>
		  }
	  }
	}
    else{
		  printf("文件打开失败\r\n");
 8000a20:	483f      	ldr	r0, [pc, #252]	@ (8000b20 <main+0x1a0>)
 8000a22:	f00d fced 	bl	800e400 <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    uint32_t currentTime = HAL_GetTick();
 8000a26:	f000 febb 	bl	80017a0 <HAL_GetTick>
 8000a2a:	61f8      	str	r0, [r7, #28]

    // 每6000ms (6秒) 写入一次
    if(currentTime - lastWriteTime >= 6000)
 8000a2c:	4b3d      	ldr	r3, [pc, #244]	@ (8000b24 <main+0x1a4>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	69fa      	ldr	r2, [r7, #28]
 8000a32:	1ad3      	subs	r3, r2, r3
 8000a34:	f241 726f 	movw	r2, #5999	@ 0x176f
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	d958      	bls.n	8000aee <main+0x16e>
    {
      uint32_t totalMs = currentTime;
 8000a3c:	69fb      	ldr	r3, [r7, #28]
 8000a3e:	61bb      	str	r3, [r7, #24]
      uint32_t ms = totalMs % 1000;
 8000a40:	69bb      	ldr	r3, [r7, #24]
 8000a42:	4a39      	ldr	r2, [pc, #228]	@ (8000b28 <main+0x1a8>)
 8000a44:	fba2 1203 	umull	r1, r2, r2, r3
 8000a48:	0992      	lsrs	r2, r2, #6
 8000a4a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000a4e:	fb01 f202 	mul.w	r2, r1, r2
 8000a52:	1a9b      	subs	r3, r3, r2
 8000a54:	617b      	str	r3, [r7, #20]
      uint32_t totalSec = totalMs / 1000;
 8000a56:	69bb      	ldr	r3, [r7, #24]
 8000a58:	4a33      	ldr	r2, [pc, #204]	@ (8000b28 <main+0x1a8>)
 8000a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a5e:	099b      	lsrs	r3, r3, #6
 8000a60:	613b      	str	r3, [r7, #16]
      uint32_t sec = totalSec % 60;
 8000a62:	693a      	ldr	r2, [r7, #16]
 8000a64:	4b31      	ldr	r3, [pc, #196]	@ (8000b2c <main+0x1ac>)
 8000a66:	fba3 1302 	umull	r1, r3, r3, r2
 8000a6a:	0959      	lsrs	r1, r3, #5
 8000a6c:	460b      	mov	r3, r1
 8000a6e:	011b      	lsls	r3, r3, #4
 8000a70:	1a5b      	subs	r3, r3, r1
 8000a72:	009b      	lsls	r3, r3, #2
 8000a74:	1ad3      	subs	r3, r2, r3
 8000a76:	60fb      	str	r3, [r7, #12]
      uint32_t totalMin = totalSec / 60;
 8000a78:	693b      	ldr	r3, [r7, #16]
 8000a7a:	4a2c      	ldr	r2, [pc, #176]	@ (8000b2c <main+0x1ac>)
 8000a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8000a80:	095b      	lsrs	r3, r3, #5
 8000a82:	60bb      	str	r3, [r7, #8]
      uint32_t min = totalMin % 60;
 8000a84:	68ba      	ldr	r2, [r7, #8]
 8000a86:	4b29      	ldr	r3, [pc, #164]	@ (8000b2c <main+0x1ac>)
 8000a88:	fba3 1302 	umull	r1, r3, r3, r2
 8000a8c:	0959      	lsrs	r1, r3, #5
 8000a8e:	460b      	mov	r3, r1
 8000a90:	011b      	lsls	r3, r3, #4
 8000a92:	1a5b      	subs	r3, r3, r1
 8000a94:	009b      	lsls	r3, r3, #2
 8000a96:	1ad3      	subs	r3, r2, r3
 8000a98:	607b      	str	r3, [r7, #4]
      uint32_t hour = totalMin / 60;
 8000a9a:	68bb      	ldr	r3, [r7, #8]
 8000a9c:	4a23      	ldr	r2, [pc, #140]	@ (8000b2c <main+0x1ac>)
 8000a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000aa2:	095b      	lsrs	r3, r3, #5
 8000aa4:	603b      	str	r3, [r7, #0]
      
      // 格式化时间字符串
      sprintf(timeStr, "%02lu:%02lu:%02lu:%03lu\r\n", hour, min, sec, ms);
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	9301      	str	r3, [sp, #4]
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	9300      	str	r3, [sp, #0]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	683a      	ldr	r2, [r7, #0]
 8000ab2:	491f      	ldr	r1, [pc, #124]	@ (8000b30 <main+0x1b0>)
 8000ab4:	481f      	ldr	r0, [pc, #124]	@ (8000b34 <main+0x1b4>)
 8000ab6:	f00d fd5f 	bl	800e578 <siprintf>
      
      // 写入文件
      if(f_write(&file, timeStr, strlen(timeStr), &fnum) == FR_OK)
 8000aba:	481e      	ldr	r0, [pc, #120]	@ (8000b34 <main+0x1b4>)
 8000abc:	f7ff fc10 	bl	80002e0 <strlen>
 8000ac0:	4602      	mov	r2, r0
 8000ac2:	4b1d      	ldr	r3, [pc, #116]	@ (8000b38 <main+0x1b8>)
 8000ac4:	491b      	ldr	r1, [pc, #108]	@ (8000b34 <main+0x1b4>)
 8000ac6:	4813      	ldr	r0, [pc, #76]	@ (8000b14 <main+0x194>)
 8000ac8:	f00c fc82 	bl	800d3d0 <f_write>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d107      	bne.n	8000ae2 <main+0x162>
      {
        // 确保数据写入到磁盘
        f_sync(&file);
 8000ad2:	4810      	ldr	r0, [pc, #64]	@ (8000b14 <main+0x194>)
 8000ad4:	f00c fdf1 	bl	800d6ba <f_sync>
        printf("写入成功: %s", timeStr);
 8000ad8:	4916      	ldr	r1, [pc, #88]	@ (8000b34 <main+0x1b4>)
 8000ada:	4818      	ldr	r0, [pc, #96]	@ (8000b3c <main+0x1bc>)
 8000adc:	f00d fc28 	bl	800e330 <iprintf>
 8000ae0:	e002      	b.n	8000ae8 <main+0x168>
      }
      else
      {
        printf("写入失败\r\n");
 8000ae2:	4817      	ldr	r0, [pc, #92]	@ (8000b40 <main+0x1c0>)
 8000ae4:	f00d fc8c 	bl	800e400 <puts>
      }
      
      lastWriteTime = currentTime;
 8000ae8:	4a0e      	ldr	r2, [pc, #56]	@ (8000b24 <main+0x1a4>)
 8000aea:	69fb      	ldr	r3, [r7, #28]
 8000aec:	6013      	str	r3, [r2, #0]
    }
    
    LED_Blink(5);
 8000aee:	2005      	movs	r0, #5
 8000af0:	f7ff ff28 	bl	8000944 <LED_Blink>
  {
 8000af4:	e797      	b.n	8000a26 <main+0xa6>
 8000af6:	bf00      	nop
 8000af8:	240006fc 	.word	0x240006fc
 8000afc:	0800f604 	.word	0x0800f604
 8000b00:	0800f628 	.word	0x0800f628
 8000b04:	24000088 	.word	0x24000088
 8000b08:	240004e8 	.word	0x240004e8
 8000b0c:	0800f62c 	.word	0x0800f62c
 8000b10:	0800f63c 	.word	0x0800f63c
 8000b14:	240002b8 	.word	0x240002b8
 8000b18:	0800f648 	.word	0x0800f648
 8000b1c:	0800f65c 	.word	0x0800f65c
 8000b20:	0800f674 	.word	0x0800f674
 8000b24:	240004ec 	.word	0x240004ec
 8000b28:	10624dd3 	.word	0x10624dd3
 8000b2c:	88888889 	.word	0x88888889
 8000b30:	0800f688 	.word	0x0800f688
 8000b34:	240004f0 	.word	0x240004f0
 8000b38:	240004ea 	.word	0x240004ea
 8000b3c:	0800f6a4 	.word	0x0800f6a4
 8000b40:	0800f6b8 	.word	0x0800f6b8

08000b44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b09c      	sub	sp, #112	@ 0x70
 8000b48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b4e:	224c      	movs	r2, #76	@ 0x4c
 8000b50:	2100      	movs	r1, #0
 8000b52:	4618      	mov	r0, r3
 8000b54:	f00d fe0a 	bl	800e76c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b58:	1d3b      	adds	r3, r7, #4
 8000b5a:	2220      	movs	r2, #32
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f00d fe04 	bl	800e76c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000b64:	2002      	movs	r0, #2
 8000b66:	f001 ff11 	bl	800298c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	603b      	str	r3, [r7, #0]
 8000b6e:	4b31      	ldr	r3, [pc, #196]	@ (8000c34 <SystemClock_Config+0xf0>)
 8000b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b72:	4a30      	ldr	r2, [pc, #192]	@ (8000c34 <SystemClock_Config+0xf0>)
 8000b74:	f023 0301 	bic.w	r3, r3, #1
 8000b78:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000b7a:	4b2e      	ldr	r3, [pc, #184]	@ (8000c34 <SystemClock_Config+0xf0>)
 8000b7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b7e:	f003 0301 	and.w	r3, r3, #1
 8000b82:	603b      	str	r3, [r7, #0]
 8000b84:	4b2c      	ldr	r3, [pc, #176]	@ (8000c38 <SystemClock_Config+0xf4>)
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b8c:	4a2a      	ldr	r2, [pc, #168]	@ (8000c38 <SystemClock_Config+0xf4>)
 8000b8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b92:	6193      	str	r3, [r2, #24]
 8000b94:	4b28      	ldr	r3, [pc, #160]	@ (8000c38 <SystemClock_Config+0xf4>)
 8000b96:	699b      	ldr	r3, [r3, #24]
 8000b98:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b9c:	603b      	str	r3, [r7, #0]
 8000b9e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ba0:	bf00      	nop
 8000ba2:	4b25      	ldr	r3, [pc, #148]	@ (8000c38 <SystemClock_Config+0xf4>)
 8000ba4:	699b      	ldr	r3, [r3, #24]
 8000ba6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000baa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000bae:	d1f8      	bne.n	8000ba2 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bb4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000bc2:	2305      	movs	r3, #5
 8000bc4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000bc6:	2360      	movs	r3, #96	@ 0x60
 8000bc8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 10;
 8000bce:	230a      	movs	r3, #10
 8000bd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000bd6:	2308      	movs	r3, #8
 8000bd8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000bde:	2300      	movs	r3, #0
 8000be0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000be2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000be6:	4618      	mov	r0, r3
 8000be8:	f001 ff0a 	bl	8002a00 <HAL_RCC_OscConfig>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000bf2:	f000 f855 	bl	8000ca0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bf6:	233f      	movs	r3, #63	@ 0x3f
 8000bf8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000c02:	2308      	movs	r3, #8
 8000c04:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000c06:	2300      	movs	r3, #0
 8000c08:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000c12:	2300      	movs	r3, #0
 8000c14:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c16:	1d3b      	adds	r3, r7, #4
 8000c18:	2102      	movs	r1, #2
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f002 fb4a 	bl	80032b4 <HAL_RCC_ClockConfig>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000c26:	f000 f83b 	bl	8000ca0 <Error_Handler>
  }
}
 8000c2a:	bf00      	nop
 8000c2c:	3770      	adds	r7, #112	@ 0x70
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	58000400 	.word	0x58000400
 8000c38:	58024800 	.word	0x58024800

08000c3c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b0b0      	sub	sp, #192	@ 0xc0
 8000c40:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c42:	463b      	mov	r3, r7
 8000c44:	22c0      	movs	r2, #192	@ 0xc0
 8000c46:	2100      	movs	r1, #0
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f00d fd8f 	bl	800e76c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_UART4
 8000c4e:	4a13      	ldr	r2, [pc, #76]	@ (8000c9c <PeriphCommonClock_Config+0x60>)
 8000c50:	f04f 0300 	mov.w	r3, #0
 8000c54:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3;
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000c5c:	230c      	movs	r3, #12
 8000c5e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000c60:	2302      	movs	r3, #2
 8000c62:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000c64:	2302      	movs	r3, #2
 8000c66:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 3;
 8000c68:	2303      	movs	r3, #3
 8000c6a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000c6c:	23c0      	movs	r3, #192	@ 0xc0
 8000c6e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000c70:	2320      	movs	r3, #32
 8000c72:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000c74:	2300      	movs	r3, #0
 8000c76:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8000c78:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c7c:	653b      	str	r3, [r7, #80]	@ 0x50
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL2;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c82:	463b      	mov	r3, r7
 8000c84:	4618      	mov	r0, r3
 8000c86:	f002 fea1 	bl	80039cc <HAL_RCCEx_PeriphCLKConfig>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8000c90:	f000 f806 	bl	8000ca0 <Error_Handler>
  }
}
 8000c94:	bf00      	nop
 8000c96:	37c0      	adds	r7, #192	@ 0xc0
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	00010002 	.word	0x00010002

08000ca0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while (1)
  {
		LED_Blink(500);
 8000ca4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000ca8:	f7ff fe4c 	bl	8000944 <LED_Blink>
 8000cac:	e7fa      	b.n	8000ca4 <Error_Handler+0x4>
	...

08000cb0 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000cb8:	4a07      	ldr	r2, [pc, #28]	@ (8000cd8 <RetargetInit+0x28>)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8000cbe:	4b07      	ldr	r3, [pc, #28]	@ (8000cdc <RetargetInit+0x2c>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	6898      	ldr	r0, [r3, #8]
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	2202      	movs	r2, #2
 8000cc8:	2100      	movs	r1, #0
 8000cca:	f00d fba1 	bl	800e410 <setvbuf>
}
 8000cce:	bf00      	nop
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	24000504 	.word	0x24000504
 8000cdc:	2400001c 	.word	0x2400001c

08000ce0 <_isatty>:

int _isatty(int fd) {
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	db04      	blt.n	8000cf8 <_isatty+0x18>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2b02      	cmp	r3, #2
 8000cf2:	dc01      	bgt.n	8000cf8 <_isatty+0x18>
    return 1;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	e005      	b.n	8000d04 <_isatty+0x24>

  errno = EBADF;
 8000cf8:	f00d fd86 	bl	800e808 <__errno>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2209      	movs	r2, #9
 8000d00:	601a      	str	r2, [r3, #0]
  return 0;
 8000d02:	2300      	movs	r3, #0
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3708      	adds	r7, #8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <_write>:

int _write(int fd, char* ptr, int len) {
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b086      	sub	sp, #24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	60f8      	str	r0, [r7, #12]
 8000d14:	60b9      	str	r1, [r7, #8]
 8000d16:	607a      	str	r2, [r7, #4]
 HAL_StatusTypeDef hstatus;

 if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d002      	beq.n	8000d24 <_write+0x18>
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	2b02      	cmp	r3, #2
 8000d22:	d111      	bne.n	8000d48 <_write+0x3c>
   hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000d24:	4b0e      	ldr	r3, [pc, #56]	@ (8000d60 <_write+0x54>)
 8000d26:	6818      	ldr	r0, [r3, #0]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	b29a      	uxth	r2, r3
 8000d2c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d30:	68b9      	ldr	r1, [r7, #8]
 8000d32:	f007 fe3b 	bl	80089ac <HAL_UART_Transmit>
 8000d36:	4603      	mov	r3, r0
 8000d38:	75fb      	strb	r3, [r7, #23]
   if (hstatus == HAL_OK)
 8000d3a:	7dfb      	ldrb	r3, [r7, #23]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d101      	bne.n	8000d44 <_write+0x38>
     return len;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	e008      	b.n	8000d56 <_write+0x4a>
   else
     return EIO;
 8000d44:	2305      	movs	r3, #5
 8000d46:	e006      	b.n	8000d56 <_write+0x4a>
 }
 errno = EBADF;
 8000d48:	f00d fd5e 	bl	800e808 <__errno>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2209      	movs	r2, #9
 8000d50:	601a      	str	r2, [r3, #0]
 return -1;
 8000d52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3718      	adds	r7, #24
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	24000504 	.word	0x24000504

08000d64 <_close>:
//         ITM_SendChar(*ptr++);
//     }
//     return len;
// }

int _close(int fd) {
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	db04      	blt.n	8000d7c <_close+0x18>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2b02      	cmp	r3, #2
 8000d76:	dc01      	bgt.n	8000d7c <_close+0x18>
    return 0;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	e006      	b.n	8000d8a <_close+0x26>

  errno = EBADF;
 8000d7c:	f00d fd44 	bl	800e808 <__errno>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2209      	movs	r2, #9
 8000d84:	601a      	str	r2, [r3, #0]
  return -1;
 8000d86:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b084      	sub	sp, #16
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	60f8      	str	r0, [r7, #12]
 8000d9a:	60b9      	str	r1, [r7, #8]
 8000d9c:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8000d9e:	f00d fd33 	bl	800e808 <__errno>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2209      	movs	r2, #9
 8000da6:	601a      	str	r2, [r3, #0]
  return -1;
 8000da8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3710      	adds	r7, #16
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <_read>:

int _read(int fd, char* ptr, int len) {
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d110      	bne.n	8000de8 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000dc6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e00 <_read+0x4c>)
 8000dc8:	6818      	ldr	r0, [r3, #0]
 8000dca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000dce:	2201      	movs	r2, #1
 8000dd0:	68b9      	ldr	r1, [r7, #8]
 8000dd2:	f007 fe79 	bl	8008ac8 <HAL_UART_Receive>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000dda:	7dfb      	ldrb	r3, [r7, #23]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d101      	bne.n	8000de4 <_read+0x30>
      return 1;
 8000de0:	2301      	movs	r3, #1
 8000de2:	e008      	b.n	8000df6 <_read+0x42>
    else
      return EIO;
 8000de4:	2305      	movs	r3, #5
 8000de6:	e006      	b.n	8000df6 <_read+0x42>
  }
  errno = EBADF;
 8000de8:	f00d fd0e 	bl	800e808 <__errno>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2209      	movs	r2, #9
 8000df0:	601a      	str	r2, [r3, #0]
  return -1;
 8000df2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3718      	adds	r7, #24
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	24000504 	.word	0x24000504

08000e04 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	db08      	blt.n	8000e26 <_fstat+0x22>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2b02      	cmp	r3, #2
 8000e18:	dc05      	bgt.n	8000e26 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e20:	605a      	str	r2, [r3, #4]
    return 0;
 8000e22:	2300      	movs	r3, #0
 8000e24:	e005      	b.n	8000e32 <_fstat+0x2e>
  }

  errno = EBADF;
 8000e26:	f00d fcef 	bl	800e808 <__errno>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2209      	movs	r2, #9
 8000e2e:	601a      	str	r2, [r3, #0]
  return 0;
 8000e30:	2300      	movs	r3, #0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
	...

08000e3c <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000e40:	4b0b      	ldr	r3, [pc, #44]	@ (8000e70 <MX_SDMMC1_SD_Init+0x34>)
 8000e42:	4a0c      	ldr	r2, [pc, #48]	@ (8000e74 <MX_SDMMC1_SD_Init+0x38>)
 8000e44:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000e46:	4b0a      	ldr	r3, [pc, #40]	@ (8000e70 <MX_SDMMC1_SD_Init+0x34>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000e4c:	4b08      	ldr	r3, [pc, #32]	@ (8000e70 <MX_SDMMC1_SD_Init+0x34>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000e52:	4b07      	ldr	r3, [pc, #28]	@ (8000e70 <MX_SDMMC1_SD_Init+0x34>)
 8000e54:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e58:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000e5a:	4b05      	ldr	r3, [pc, #20]	@ (8000e70 <MX_SDMMC1_SD_Init+0x34>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000e60:	4b03      	ldr	r3, [pc, #12]	@ (8000e70 <MX_SDMMC1_SD_Init+0x34>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000e66:	bf00      	nop
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	24000508 	.word	0x24000508
 8000e74:	52007000 	.word	0x52007000

08000e78 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08a      	sub	sp, #40	@ 0x28
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e80:	f107 0314 	add.w	r3, r7, #20
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
 8000e8e:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a2e      	ldr	r2, [pc, #184]	@ (8000f50 <HAL_SD_MspInit+0xd8>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d155      	bne.n	8000f46 <HAL_SD_MspInit+0xce>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000e9a:	4b2e      	ldr	r3, [pc, #184]	@ (8000f54 <HAL_SD_MspInit+0xdc>)
 8000e9c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000ea0:	4a2c      	ldr	r2, [pc, #176]	@ (8000f54 <HAL_SD_MspInit+0xdc>)
 8000ea2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ea6:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8000eaa:	4b2a      	ldr	r3, [pc, #168]	@ (8000f54 <HAL_SD_MspInit+0xdc>)
 8000eac:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000eb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000eb4:	613b      	str	r3, [r7, #16]
 8000eb6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eb8:	4b26      	ldr	r3, [pc, #152]	@ (8000f54 <HAL_SD_MspInit+0xdc>)
 8000eba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ebe:	4a25      	ldr	r2, [pc, #148]	@ (8000f54 <HAL_SD_MspInit+0xdc>)
 8000ec0:	f043 0304 	orr.w	r3, r3, #4
 8000ec4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ec8:	4b22      	ldr	r3, [pc, #136]	@ (8000f54 <HAL_SD_MspInit+0xdc>)
 8000eca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ece:	f003 0304 	and.w	r3, r3, #4
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ed6:	4b1f      	ldr	r3, [pc, #124]	@ (8000f54 <HAL_SD_MspInit+0xdc>)
 8000ed8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000edc:	4a1d      	ldr	r2, [pc, #116]	@ (8000f54 <HAL_SD_MspInit+0xdc>)
 8000ede:	f043 0308 	orr.w	r3, r3, #8
 8000ee2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ee6:	4b1b      	ldr	r3, [pc, #108]	@ (8000f54 <HAL_SD_MspInit+0xdc>)
 8000ee8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eec:	f003 0308 	and.w	r3, r3, #8
 8000ef0:	60bb      	str	r3, [r7, #8]
 8000ef2:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000ef4:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8000ef8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efa:	2302      	movs	r3, #2
 8000efc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f02:	2303      	movs	r3, #3
 8000f04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000f06:	230c      	movs	r3, #12
 8000f08:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f0a:	f107 0314 	add.w	r3, r7, #20
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4811      	ldr	r0, [pc, #68]	@ (8000f58 <HAL_SD_MspInit+0xe0>)
 8000f12:	f001 fb71 	bl	80025f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f16:	2304      	movs	r3, #4
 8000f18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f22:	2303      	movs	r3, #3
 8000f24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000f26:	230c      	movs	r3, #12
 8000f28:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f2a:	f107 0314 	add.w	r3, r7, #20
 8000f2e:	4619      	mov	r1, r3
 8000f30:	480a      	ldr	r0, [pc, #40]	@ (8000f5c <HAL_SD_MspInit+0xe4>)
 8000f32:	f001 fb61 	bl	80025f8 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8000f36:	2200      	movs	r2, #0
 8000f38:	2100      	movs	r1, #0
 8000f3a:	2031      	movs	r0, #49	@ 0x31
 8000f3c:	f000 fd47 	bl	80019ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8000f40:	2031      	movs	r0, #49	@ 0x31
 8000f42:	f000 fd5e 	bl	8001a02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8000f46:	bf00      	nop
 8000f48:	3728      	adds	r7, #40	@ 0x28
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	52007000 	.word	0x52007000
 8000f54:	58024400 	.word	0x58024400
 8000f58:	58020800 	.word	0x58020800
 8000f5c:	58020c00 	.word	0x58020c00

08000f60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f66:	4b0a      	ldr	r3, [pc, #40]	@ (8000f90 <HAL_MspInit+0x30>)
 8000f68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f6c:	4a08      	ldr	r2, [pc, #32]	@ (8000f90 <HAL_MspInit+0x30>)
 8000f6e:	f043 0302 	orr.w	r3, r3, #2
 8000f72:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000f76:	4b06      	ldr	r3, [pc, #24]	@ (8000f90 <HAL_MspInit+0x30>)
 8000f78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f7c:	f003 0302 	and.w	r3, r3, #2
 8000f80:	607b      	str	r3, [r7, #4]
 8000f82:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f84:	bf00      	nop
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	58024400 	.word	0x58024400

08000f94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f98:	bf00      	nop
 8000f9a:	e7fd      	b.n	8000f98 <NMI_Handler+0x4>

08000f9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fa0:	bf00      	nop
 8000fa2:	e7fd      	b.n	8000fa0 <HardFault_Handler+0x4>

08000fa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fa8:	bf00      	nop
 8000faa:	e7fd      	b.n	8000fa8 <MemManage_Handler+0x4>

08000fac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fb0:	bf00      	nop
 8000fb2:	e7fd      	b.n	8000fb0 <BusFault_Handler+0x4>

08000fb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fb8:	bf00      	nop
 8000fba:	e7fd      	b.n	8000fb8 <UsageFault_Handler+0x4>

08000fbc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr

08000fca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr

08000fe6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fea:	f000 fbc5 	bl	8001778 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
	...

08000ff4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000ff8:	4802      	ldr	r0, [pc, #8]	@ (8001004 <TIM3_IRQHandler+0x10>)
 8000ffa:	f006 fea0 	bl	8007d3e <HAL_TIM_IRQHandler>

  // 如果需要进行任务切换，则执行
  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
#endif
  /* USER CODE END TIM3_IRQn 1 */
}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	24000588 	.word	0x24000588

08001008 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800100c:	4802      	ldr	r0, [pc, #8]	@ (8001018 <USART2_IRQHandler+0x10>)
 800100e:	f007 fe23 	bl	8008c58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	24000668 	.word	0x24000668

0800101c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001020:	4802      	ldr	r0, [pc, #8]	@ (800102c <USART3_IRQHandler+0x10>)
 8001022:	f007 fe19 	bl	8008c58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	240006fc 	.word	0x240006fc

08001030 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001034:	4802      	ldr	r0, [pc, #8]	@ (8001040 <SDMMC1_IRQHandler+0x10>)
 8001036:	f005 fc37 	bl	80068a8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	24000508 	.word	0x24000508

08001044 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001048:	4802      	ldr	r0, [pc, #8]	@ (8001054 <UART4_IRQHandler+0x10>)
 800104a:	f007 fe05 	bl	8008c58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	240005d4 	.word	0x240005d4

08001058 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001060:	4a14      	ldr	r2, [pc, #80]	@ (80010b4 <_sbrk+0x5c>)
 8001062:	4b15      	ldr	r3, [pc, #84]	@ (80010b8 <_sbrk+0x60>)
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800106c:	4b13      	ldr	r3, [pc, #76]	@ (80010bc <_sbrk+0x64>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d102      	bne.n	800107a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001074:	4b11      	ldr	r3, [pc, #68]	@ (80010bc <_sbrk+0x64>)
 8001076:	4a12      	ldr	r2, [pc, #72]	@ (80010c0 <_sbrk+0x68>)
 8001078:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800107a:	4b10      	ldr	r3, [pc, #64]	@ (80010bc <_sbrk+0x64>)
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4413      	add	r3, r2
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	429a      	cmp	r2, r3
 8001086:	d207      	bcs.n	8001098 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001088:	f00d fbbe 	bl	800e808 <__errno>
 800108c:	4603      	mov	r3, r0
 800108e:	220c      	movs	r2, #12
 8001090:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001092:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001096:	e009      	b.n	80010ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001098:	4b08      	ldr	r3, [pc, #32]	@ (80010bc <_sbrk+0x64>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800109e:	4b07      	ldr	r3, [pc, #28]	@ (80010bc <_sbrk+0x64>)
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4413      	add	r3, r2
 80010a6:	4a05      	ldr	r2, [pc, #20]	@ (80010bc <_sbrk+0x64>)
 80010a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010aa:	68fb      	ldr	r3, [r7, #12]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3718      	adds	r7, #24
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	24080000 	.word	0x24080000
 80010b8:	00002000 	.word	0x00002000
 80010bc:	24000584 	.word	0x24000584
 80010c0:	24000928 	.word	0x24000928

080010c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80010c8:	4b37      	ldr	r3, [pc, #220]	@ (80011a8 <SystemInit+0xe4>)
 80010ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010ce:	4a36      	ldr	r2, [pc, #216]	@ (80011a8 <SystemInit+0xe4>)
 80010d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80010d8:	4b34      	ldr	r3, [pc, #208]	@ (80011ac <SystemInit+0xe8>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f003 030f 	and.w	r3, r3, #15
 80010e0:	2b06      	cmp	r3, #6
 80010e2:	d807      	bhi.n	80010f4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010e4:	4b31      	ldr	r3, [pc, #196]	@ (80011ac <SystemInit+0xe8>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f023 030f 	bic.w	r3, r3, #15
 80010ec:	4a2f      	ldr	r2, [pc, #188]	@ (80011ac <SystemInit+0xe8>)
 80010ee:	f043 0307 	orr.w	r3, r3, #7
 80010f2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80010f4:	4b2e      	ldr	r3, [pc, #184]	@ (80011b0 <SystemInit+0xec>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a2d      	ldr	r2, [pc, #180]	@ (80011b0 <SystemInit+0xec>)
 80010fa:	f043 0301 	orr.w	r3, r3, #1
 80010fe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001100:	4b2b      	ldr	r3, [pc, #172]	@ (80011b0 <SystemInit+0xec>)
 8001102:	2200      	movs	r2, #0
 8001104:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001106:	4b2a      	ldr	r3, [pc, #168]	@ (80011b0 <SystemInit+0xec>)
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	4929      	ldr	r1, [pc, #164]	@ (80011b0 <SystemInit+0xec>)
 800110c:	4b29      	ldr	r3, [pc, #164]	@ (80011b4 <SystemInit+0xf0>)
 800110e:	4013      	ands	r3, r2
 8001110:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001112:	4b26      	ldr	r3, [pc, #152]	@ (80011ac <SystemInit+0xe8>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f003 0308 	and.w	r3, r3, #8
 800111a:	2b00      	cmp	r3, #0
 800111c:	d007      	beq.n	800112e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800111e:	4b23      	ldr	r3, [pc, #140]	@ (80011ac <SystemInit+0xe8>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f023 030f 	bic.w	r3, r3, #15
 8001126:	4a21      	ldr	r2, [pc, #132]	@ (80011ac <SystemInit+0xe8>)
 8001128:	f043 0307 	orr.w	r3, r3, #7
 800112c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800112e:	4b20      	ldr	r3, [pc, #128]	@ (80011b0 <SystemInit+0xec>)
 8001130:	2200      	movs	r2, #0
 8001132:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001134:	4b1e      	ldr	r3, [pc, #120]	@ (80011b0 <SystemInit+0xec>)
 8001136:	2200      	movs	r2, #0
 8001138:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800113a:	4b1d      	ldr	r3, [pc, #116]	@ (80011b0 <SystemInit+0xec>)
 800113c:	2200      	movs	r2, #0
 800113e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001140:	4b1b      	ldr	r3, [pc, #108]	@ (80011b0 <SystemInit+0xec>)
 8001142:	4a1d      	ldr	r2, [pc, #116]	@ (80011b8 <SystemInit+0xf4>)
 8001144:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001146:	4b1a      	ldr	r3, [pc, #104]	@ (80011b0 <SystemInit+0xec>)
 8001148:	4a1c      	ldr	r2, [pc, #112]	@ (80011bc <SystemInit+0xf8>)
 800114a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800114c:	4b18      	ldr	r3, [pc, #96]	@ (80011b0 <SystemInit+0xec>)
 800114e:	4a1c      	ldr	r2, [pc, #112]	@ (80011c0 <SystemInit+0xfc>)
 8001150:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001152:	4b17      	ldr	r3, [pc, #92]	@ (80011b0 <SystemInit+0xec>)
 8001154:	2200      	movs	r2, #0
 8001156:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001158:	4b15      	ldr	r3, [pc, #84]	@ (80011b0 <SystemInit+0xec>)
 800115a:	4a19      	ldr	r2, [pc, #100]	@ (80011c0 <SystemInit+0xfc>)
 800115c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800115e:	4b14      	ldr	r3, [pc, #80]	@ (80011b0 <SystemInit+0xec>)
 8001160:	2200      	movs	r2, #0
 8001162:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001164:	4b12      	ldr	r3, [pc, #72]	@ (80011b0 <SystemInit+0xec>)
 8001166:	4a16      	ldr	r2, [pc, #88]	@ (80011c0 <SystemInit+0xfc>)
 8001168:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800116a:	4b11      	ldr	r3, [pc, #68]	@ (80011b0 <SystemInit+0xec>)
 800116c:	2200      	movs	r2, #0
 800116e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001170:	4b0f      	ldr	r3, [pc, #60]	@ (80011b0 <SystemInit+0xec>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a0e      	ldr	r2, [pc, #56]	@ (80011b0 <SystemInit+0xec>)
 8001176:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800117a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800117c:	4b0c      	ldr	r3, [pc, #48]	@ (80011b0 <SystemInit+0xec>)
 800117e:	2200      	movs	r2, #0
 8001180:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001182:	4b10      	ldr	r3, [pc, #64]	@ (80011c4 <SystemInit+0x100>)
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	4b10      	ldr	r3, [pc, #64]	@ (80011c8 <SystemInit+0x104>)
 8001188:	4013      	ands	r3, r2
 800118a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800118e:	d202      	bcs.n	8001196 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001190:	4b0e      	ldr	r3, [pc, #56]	@ (80011cc <SystemInit+0x108>)
 8001192:	2201      	movs	r2, #1
 8001194:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001196:	4b0e      	ldr	r3, [pc, #56]	@ (80011d0 <SystemInit+0x10c>)
 8001198:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800119c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800119e:	bf00      	nop
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	e000ed00 	.word	0xe000ed00
 80011ac:	52002000 	.word	0x52002000
 80011b0:	58024400 	.word	0x58024400
 80011b4:	eaf6ed7f 	.word	0xeaf6ed7f
 80011b8:	02020200 	.word	0x02020200
 80011bc:	01ff0000 	.word	0x01ff0000
 80011c0:	01010280 	.word	0x01010280
 80011c4:	5c001000 	.word	0x5c001000
 80011c8:	ffff0000 	.word	0xffff0000
 80011cc:	51008108 	.word	0x51008108
 80011d0:	52004000 	.word	0x52004000

080011d4 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08a      	sub	sp, #40	@ 0x28
 80011d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011da:	f107 031c 	add.w	r3, r7, #28
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	605a      	str	r2, [r3, #4]
 80011e4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011e6:	463b      	mov	r3, r7
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]
 80011f2:	611a      	str	r2, [r3, #16]
 80011f4:	615a      	str	r2, [r3, #20]
 80011f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011f8:	4b20      	ldr	r3, [pc, #128]	@ (800127c <MX_TIM3_Init+0xa8>)
 80011fa:	4a21      	ldr	r2, [pc, #132]	@ (8001280 <MX_TIM3_Init+0xac>)
 80011fc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2399;
 80011fe:	4b1f      	ldr	r3, [pc, #124]	@ (800127c <MX_TIM3_Init+0xa8>)
 8001200:	f640 125f 	movw	r2, #2399	@ 0x95f
 8001204:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001206:	4b1d      	ldr	r3, [pc, #116]	@ (800127c <MX_TIM3_Init+0xa8>)
 8001208:	2200      	movs	r2, #0
 800120a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 800120c:	4b1b      	ldr	r3, [pc, #108]	@ (800127c <MX_TIM3_Init+0xa8>)
 800120e:	2263      	movs	r2, #99	@ 0x63
 8001210:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001212:	4b1a      	ldr	r3, [pc, #104]	@ (800127c <MX_TIM3_Init+0xa8>)
 8001214:	2200      	movs	r2, #0
 8001216:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001218:	4b18      	ldr	r3, [pc, #96]	@ (800127c <MX_TIM3_Init+0xa8>)
 800121a:	2200      	movs	r2, #0
 800121c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 800121e:	4817      	ldr	r0, [pc, #92]	@ (800127c <MX_TIM3_Init+0xa8>)
 8001220:	f006 fd36 	bl	8007c90 <HAL_TIM_OC_Init>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800122a:	f7ff fd39 	bl	8000ca0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800122e:	2300      	movs	r3, #0
 8001230:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001232:	2300      	movs	r3, #0
 8001234:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001236:	f107 031c 	add.w	r3, r7, #28
 800123a:	4619      	mov	r1, r3
 800123c:	480f      	ldr	r0, [pc, #60]	@ (800127c <MX_TIM3_Init+0xa8>)
 800123e:	f007 fab9 	bl	80087b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001248:	f7ff fd2a 	bl	8000ca0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800124c:	2300      	movs	r3, #0
 800124e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001250:	2300      	movs	r3, #0
 8001252:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001254:	2300      	movs	r3, #0
 8001256:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001258:	2300      	movs	r3, #0
 800125a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800125c:	463b      	mov	r3, r7
 800125e:	2200      	movs	r2, #0
 8001260:	4619      	mov	r1, r3
 8001262:	4806      	ldr	r0, [pc, #24]	@ (800127c <MX_TIM3_Init+0xa8>)
 8001264:	f006 fe8a 	bl	8007f7c <HAL_TIM_OC_ConfigChannel>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800126e:	f7ff fd17 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001272:	bf00      	nop
 8001274:	3728      	adds	r7, #40	@ 0x28
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	24000588 	.word	0x24000588
 8001280:	40000400 	.word	0x40000400

08001284 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM3)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a0e      	ldr	r2, [pc, #56]	@ (80012cc <HAL_TIM_OC_MspInit+0x48>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d116      	bne.n	80012c4 <HAL_TIM_OC_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001296:	4b0e      	ldr	r3, [pc, #56]	@ (80012d0 <HAL_TIM_OC_MspInit+0x4c>)
 8001298:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800129c:	4a0c      	ldr	r2, [pc, #48]	@ (80012d0 <HAL_TIM_OC_MspInit+0x4c>)
 800129e:	f043 0302 	orr.w	r3, r3, #2
 80012a2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80012a6:	4b0a      	ldr	r3, [pc, #40]	@ (80012d0 <HAL_TIM_OC_MspInit+0x4c>)
 80012a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80012ac:	f003 0302 	and.w	r3, r3, #2
 80012b0:	60fb      	str	r3, [r7, #12]
 80012b2:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80012b4:	2200      	movs	r2, #0
 80012b6:	2100      	movs	r1, #0
 80012b8:	201d      	movs	r0, #29
 80012ba:	f000 fb88 	bl	80019ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80012be:	201d      	movs	r0, #29
 80012c0:	f000 fb9f 	bl	8001a02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80012c4:	bf00      	nop
 80012c6:	3710      	adds	r7, #16
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40000400 	.word	0x40000400
 80012d0:	58024400 	.word	0x58024400

080012d4 <MX_UART4_Init>:
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80012d8:	4b22      	ldr	r3, [pc, #136]	@ (8001364 <MX_UART4_Init+0x90>)
 80012da:	4a23      	ldr	r2, [pc, #140]	@ (8001368 <MX_UART4_Init+0x94>)
 80012dc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80012de:	4b21      	ldr	r3, [pc, #132]	@ (8001364 <MX_UART4_Init+0x90>)
 80012e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012e4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80012e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001364 <MX_UART4_Init+0x90>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80012ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001364 <MX_UART4_Init+0x90>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80012f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001364 <MX_UART4_Init+0x90>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80012f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001364 <MX_UART4_Init+0x90>)
 80012fa:	220c      	movs	r2, #12
 80012fc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012fe:	4b19      	ldr	r3, [pc, #100]	@ (8001364 <MX_UART4_Init+0x90>)
 8001300:	2200      	movs	r2, #0
 8001302:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001304:	4b17      	ldr	r3, [pc, #92]	@ (8001364 <MX_UART4_Init+0x90>)
 8001306:	2200      	movs	r2, #0
 8001308:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800130a:	4b16      	ldr	r3, [pc, #88]	@ (8001364 <MX_UART4_Init+0x90>)
 800130c:	2200      	movs	r2, #0
 800130e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001310:	4b14      	ldr	r3, [pc, #80]	@ (8001364 <MX_UART4_Init+0x90>)
 8001312:	2200      	movs	r2, #0
 8001314:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001316:	4b13      	ldr	r3, [pc, #76]	@ (8001364 <MX_UART4_Init+0x90>)
 8001318:	2200      	movs	r2, #0
 800131a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800131c:	4811      	ldr	r0, [pc, #68]	@ (8001364 <MX_UART4_Init+0x90>)
 800131e:	f007 faf5 	bl	800890c <HAL_UART_Init>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001328:	f7ff fcba 	bl	8000ca0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800132c:	2100      	movs	r1, #0
 800132e:	480d      	ldr	r0, [pc, #52]	@ (8001364 <MX_UART4_Init+0x90>)
 8001330:	f009 f886 	bl	800a440 <HAL_UARTEx_SetTxFifoThreshold>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800133a:	f7ff fcb1 	bl	8000ca0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800133e:	2100      	movs	r1, #0
 8001340:	4808      	ldr	r0, [pc, #32]	@ (8001364 <MX_UART4_Init+0x90>)
 8001342:	f009 f8bb 	bl	800a4bc <HAL_UARTEx_SetRxFifoThreshold>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 800134c:	f7ff fca8 	bl	8000ca0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001350:	4804      	ldr	r0, [pc, #16]	@ (8001364 <MX_UART4_Init+0x90>)
 8001352:	f009 f83c 	bl	800a3ce <HAL_UARTEx_DisableFifoMode>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 800135c:	f7ff fca0 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001360:	bf00      	nop
 8001362:	bd80      	pop	{r7, pc}
 8001364:	240005d4 	.word	0x240005d4
 8001368:	40004c00 	.word	0x40004c00

0800136c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001370:	4b22      	ldr	r3, [pc, #136]	@ (80013fc <MX_USART2_UART_Init+0x90>)
 8001372:	4a23      	ldr	r2, [pc, #140]	@ (8001400 <MX_USART2_UART_Init+0x94>)
 8001374:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001376:	4b21      	ldr	r3, [pc, #132]	@ (80013fc <MX_USART2_UART_Init+0x90>)
 8001378:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800137c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800137e:	4b1f      	ldr	r3, [pc, #124]	@ (80013fc <MX_USART2_UART_Init+0x90>)
 8001380:	2200      	movs	r2, #0
 8001382:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001384:	4b1d      	ldr	r3, [pc, #116]	@ (80013fc <MX_USART2_UART_Init+0x90>)
 8001386:	2200      	movs	r2, #0
 8001388:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800138a:	4b1c      	ldr	r3, [pc, #112]	@ (80013fc <MX_USART2_UART_Init+0x90>)
 800138c:	2200      	movs	r2, #0
 800138e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001390:	4b1a      	ldr	r3, [pc, #104]	@ (80013fc <MX_USART2_UART_Init+0x90>)
 8001392:	220c      	movs	r2, #12
 8001394:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001396:	4b19      	ldr	r3, [pc, #100]	@ (80013fc <MX_USART2_UART_Init+0x90>)
 8001398:	2200      	movs	r2, #0
 800139a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800139c:	4b17      	ldr	r3, [pc, #92]	@ (80013fc <MX_USART2_UART_Init+0x90>)
 800139e:	2200      	movs	r2, #0
 80013a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013a2:	4b16      	ldr	r3, [pc, #88]	@ (80013fc <MX_USART2_UART_Init+0x90>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013a8:	4b14      	ldr	r3, [pc, #80]	@ (80013fc <MX_USART2_UART_Init+0x90>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013ae:	4b13      	ldr	r3, [pc, #76]	@ (80013fc <MX_USART2_UART_Init+0x90>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013b4:	4811      	ldr	r0, [pc, #68]	@ (80013fc <MX_USART2_UART_Init+0x90>)
 80013b6:	f007 faa9 	bl	800890c <HAL_UART_Init>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80013c0:	f7ff fc6e 	bl	8000ca0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013c4:	2100      	movs	r1, #0
 80013c6:	480d      	ldr	r0, [pc, #52]	@ (80013fc <MX_USART2_UART_Init+0x90>)
 80013c8:	f009 f83a 	bl	800a440 <HAL_UARTEx_SetTxFifoThreshold>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80013d2:	f7ff fc65 	bl	8000ca0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013d6:	2100      	movs	r1, #0
 80013d8:	4808      	ldr	r0, [pc, #32]	@ (80013fc <MX_USART2_UART_Init+0x90>)
 80013da:	f009 f86f 	bl	800a4bc <HAL_UARTEx_SetRxFifoThreshold>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80013e4:	f7ff fc5c 	bl	8000ca0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80013e8:	4804      	ldr	r0, [pc, #16]	@ (80013fc <MX_USART2_UART_Init+0x90>)
 80013ea:	f008 fff0 	bl	800a3ce <HAL_UARTEx_DisableFifoMode>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80013f4:	f7ff fc54 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013f8:	bf00      	nop
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	24000668 	.word	0x24000668
 8001400:	40004400 	.word	0x40004400

08001404 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001408:	4b22      	ldr	r3, [pc, #136]	@ (8001494 <MX_USART3_UART_Init+0x90>)
 800140a:	4a23      	ldr	r2, [pc, #140]	@ (8001498 <MX_USART3_UART_Init+0x94>)
 800140c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800140e:	4b21      	ldr	r3, [pc, #132]	@ (8001494 <MX_USART3_UART_Init+0x90>)
 8001410:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001414:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001416:	4b1f      	ldr	r3, [pc, #124]	@ (8001494 <MX_USART3_UART_Init+0x90>)
 8001418:	2200      	movs	r2, #0
 800141a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800141c:	4b1d      	ldr	r3, [pc, #116]	@ (8001494 <MX_USART3_UART_Init+0x90>)
 800141e:	2200      	movs	r2, #0
 8001420:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001422:	4b1c      	ldr	r3, [pc, #112]	@ (8001494 <MX_USART3_UART_Init+0x90>)
 8001424:	2200      	movs	r2, #0
 8001426:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001428:	4b1a      	ldr	r3, [pc, #104]	@ (8001494 <MX_USART3_UART_Init+0x90>)
 800142a:	220c      	movs	r2, #12
 800142c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800142e:	4b19      	ldr	r3, [pc, #100]	@ (8001494 <MX_USART3_UART_Init+0x90>)
 8001430:	2200      	movs	r2, #0
 8001432:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001434:	4b17      	ldr	r3, [pc, #92]	@ (8001494 <MX_USART3_UART_Init+0x90>)
 8001436:	2200      	movs	r2, #0
 8001438:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800143a:	4b16      	ldr	r3, [pc, #88]	@ (8001494 <MX_USART3_UART_Init+0x90>)
 800143c:	2200      	movs	r2, #0
 800143e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001440:	4b14      	ldr	r3, [pc, #80]	@ (8001494 <MX_USART3_UART_Init+0x90>)
 8001442:	2200      	movs	r2, #0
 8001444:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001446:	4b13      	ldr	r3, [pc, #76]	@ (8001494 <MX_USART3_UART_Init+0x90>)
 8001448:	2200      	movs	r2, #0
 800144a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800144c:	4811      	ldr	r0, [pc, #68]	@ (8001494 <MX_USART3_UART_Init+0x90>)
 800144e:	f007 fa5d 	bl	800890c <HAL_UART_Init>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001458:	f7ff fc22 	bl	8000ca0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800145c:	2100      	movs	r1, #0
 800145e:	480d      	ldr	r0, [pc, #52]	@ (8001494 <MX_USART3_UART_Init+0x90>)
 8001460:	f008 ffee 	bl	800a440 <HAL_UARTEx_SetTxFifoThreshold>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800146a:	f7ff fc19 	bl	8000ca0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800146e:	2100      	movs	r1, #0
 8001470:	4808      	ldr	r0, [pc, #32]	@ (8001494 <MX_USART3_UART_Init+0x90>)
 8001472:	f009 f823 	bl	800a4bc <HAL_UARTEx_SetRxFifoThreshold>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800147c:	f7ff fc10 	bl	8000ca0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001480:	4804      	ldr	r0, [pc, #16]	@ (8001494 <MX_USART3_UART_Init+0x90>)
 8001482:	f008 ffa4 	bl	800a3ce <HAL_UARTEx_DisableFifoMode>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800148c:	f7ff fc08 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001490:	bf00      	nop
 8001492:	bd80      	pop	{r7, pc}
 8001494:	240006fc 	.word	0x240006fc
 8001498:	40004800 	.word	0x40004800

0800149c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b08e      	sub	sp, #56	@ 0x38
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	60da      	str	r2, [r3, #12]
 80014b2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a5b      	ldr	r2, [pc, #364]	@ (8001628 <HAL_UART_MspInit+0x18c>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d137      	bne.n	800152e <HAL_UART_MspInit+0x92>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80014be:	4b5b      	ldr	r3, [pc, #364]	@ (800162c <HAL_UART_MspInit+0x190>)
 80014c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80014c4:	4a59      	ldr	r2, [pc, #356]	@ (800162c <HAL_UART_MspInit+0x190>)
 80014c6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80014ca:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80014ce:	4b57      	ldr	r3, [pc, #348]	@ (800162c <HAL_UART_MspInit+0x190>)
 80014d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80014d4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80014d8:	623b      	str	r3, [r7, #32]
 80014da:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014dc:	4b53      	ldr	r3, [pc, #332]	@ (800162c <HAL_UART_MspInit+0x190>)
 80014de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014e2:	4a52      	ldr	r2, [pc, #328]	@ (800162c <HAL_UART_MspInit+0x190>)
 80014e4:	f043 0301 	orr.w	r3, r3, #1
 80014e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014ec:	4b4f      	ldr	r3, [pc, #316]	@ (800162c <HAL_UART_MspInit+0x190>)
 80014ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	61fb      	str	r3, [r7, #28]
 80014f8:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA11     ------> UART4_RX
    PA12     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80014fa:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80014fe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001500:	2302      	movs	r3, #2
 8001502:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001508:	2300      	movs	r3, #0
 800150a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_UART4;
 800150c:	2306      	movs	r3, #6
 800150e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001510:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001514:	4619      	mov	r1, r3
 8001516:	4846      	ldr	r0, [pc, #280]	@ (8001630 <HAL_UART_MspInit+0x194>)
 8001518:	f001 f86e 	bl	80025f8 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800151c:	2200      	movs	r2, #0
 800151e:	2100      	movs	r1, #0
 8001520:	2034      	movs	r0, #52	@ 0x34
 8001522:	f000 fa54 	bl	80019ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001526:	2034      	movs	r0, #52	@ 0x34
 8001528:	f000 fa6b 	bl	8001a02 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800152c:	e077      	b.n	800161e <HAL_UART_MspInit+0x182>
  else if(uartHandle->Instance==USART2)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a40      	ldr	r2, [pc, #256]	@ (8001634 <HAL_UART_MspInit+0x198>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d136      	bne.n	80015a6 <HAL_UART_MspInit+0x10a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001538:	4b3c      	ldr	r3, [pc, #240]	@ (800162c <HAL_UART_MspInit+0x190>)
 800153a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800153e:	4a3b      	ldr	r2, [pc, #236]	@ (800162c <HAL_UART_MspInit+0x190>)
 8001540:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001544:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001548:	4b38      	ldr	r3, [pc, #224]	@ (800162c <HAL_UART_MspInit+0x190>)
 800154a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800154e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001552:	61bb      	str	r3, [r7, #24]
 8001554:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001556:	4b35      	ldr	r3, [pc, #212]	@ (800162c <HAL_UART_MspInit+0x190>)
 8001558:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800155c:	4a33      	ldr	r2, [pc, #204]	@ (800162c <HAL_UART_MspInit+0x190>)
 800155e:	f043 0308 	orr.w	r3, r3, #8
 8001562:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001566:	4b31      	ldr	r3, [pc, #196]	@ (800162c <HAL_UART_MspInit+0x190>)
 8001568:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800156c:	f003 0308 	and.w	r3, r3, #8
 8001570:	617b      	str	r3, [r7, #20]
 8001572:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001574:	2360      	movs	r3, #96	@ 0x60
 8001576:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001578:	2302      	movs	r3, #2
 800157a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001580:	2300      	movs	r3, #0
 8001582:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001584:	2307      	movs	r3, #7
 8001586:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001588:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800158c:	4619      	mov	r1, r3
 800158e:	482a      	ldr	r0, [pc, #168]	@ (8001638 <HAL_UART_MspInit+0x19c>)
 8001590:	f001 f832 	bl	80025f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001594:	2200      	movs	r2, #0
 8001596:	2100      	movs	r1, #0
 8001598:	2026      	movs	r0, #38	@ 0x26
 800159a:	f000 fa18 	bl	80019ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800159e:	2026      	movs	r0, #38	@ 0x26
 80015a0:	f000 fa2f 	bl	8001a02 <HAL_NVIC_EnableIRQ>
}
 80015a4:	e03b      	b.n	800161e <HAL_UART_MspInit+0x182>
  else if(uartHandle->Instance==USART3)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a24      	ldr	r2, [pc, #144]	@ (800163c <HAL_UART_MspInit+0x1a0>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d136      	bne.n	800161e <HAL_UART_MspInit+0x182>
    __HAL_RCC_USART3_CLK_ENABLE();
 80015b0:	4b1e      	ldr	r3, [pc, #120]	@ (800162c <HAL_UART_MspInit+0x190>)
 80015b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015b6:	4a1d      	ldr	r2, [pc, #116]	@ (800162c <HAL_UART_MspInit+0x190>)
 80015b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015bc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80015c0:	4b1a      	ldr	r3, [pc, #104]	@ (800162c <HAL_UART_MspInit+0x190>)
 80015c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015ca:	613b      	str	r3, [r7, #16]
 80015cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015ce:	4b17      	ldr	r3, [pc, #92]	@ (800162c <HAL_UART_MspInit+0x190>)
 80015d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015d4:	4a15      	ldr	r2, [pc, #84]	@ (800162c <HAL_UART_MspInit+0x190>)
 80015d6:	f043 0308 	orr.w	r3, r3, #8
 80015da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015de:	4b13      	ldr	r3, [pc, #76]	@ (800162c <HAL_UART_MspInit+0x190>)
 80015e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015e4:	f003 0308 	and.w	r3, r3, #8
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015ec:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80015f0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f2:	2302      	movs	r3, #2
 80015f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fa:	2300      	movs	r3, #0
 80015fc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015fe:	2307      	movs	r3, #7
 8001600:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001602:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001606:	4619      	mov	r1, r3
 8001608:	480b      	ldr	r0, [pc, #44]	@ (8001638 <HAL_UART_MspInit+0x19c>)
 800160a:	f000 fff5 	bl	80025f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800160e:	2200      	movs	r2, #0
 8001610:	2100      	movs	r1, #0
 8001612:	2027      	movs	r0, #39	@ 0x27
 8001614:	f000 f9db 	bl	80019ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001618:	2027      	movs	r0, #39	@ 0x27
 800161a:	f000 f9f2 	bl	8001a02 <HAL_NVIC_EnableIRQ>
}
 800161e:	bf00      	nop
 8001620:	3738      	adds	r7, #56	@ 0x38
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40004c00 	.word	0x40004c00
 800162c:	58024400 	.word	0x58024400
 8001630:	58020000 	.word	0x58020000
 8001634:	40004400 	.word	0x40004400
 8001638:	58020c00 	.word	0x58020c00
 800163c:	40004800 	.word	0x40004800

08001640 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001640:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001678 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001644:	f7ff fd3e 	bl	80010c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001648:	480c      	ldr	r0, [pc, #48]	@ (800167c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800164a:	490d      	ldr	r1, [pc, #52]	@ (8001680 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800164c:	4a0d      	ldr	r2, [pc, #52]	@ (8001684 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800164e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001650:	e002      	b.n	8001658 <LoopCopyDataInit>

08001652 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001652:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001654:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001656:	3304      	adds	r3, #4

08001658 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001658:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800165a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800165c:	d3f9      	bcc.n	8001652 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800165e:	4a0a      	ldr	r2, [pc, #40]	@ (8001688 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001660:	4c0a      	ldr	r4, [pc, #40]	@ (800168c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001662:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001664:	e001      	b.n	800166a <LoopFillZerobss>

08001666 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001666:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001668:	3204      	adds	r2, #4

0800166a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800166a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800166c:	d3fb      	bcc.n	8001666 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800166e:	f00d f8d1 	bl	800e814 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001672:	f7ff f985 	bl	8000980 <main>
  bx  lr
 8001676:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001678:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800167c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001680:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8001684:	0800f81c 	.word	0x0800f81c
  ldr r2, =_sbss
 8001688:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 800168c:	24000924 	.word	0x24000924

08001690 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001690:	e7fe      	b.n	8001690 <ADC3_IRQHandler>
	...

08001694 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800169a:	2003      	movs	r0, #3
 800169c:	f000 f98c 	bl	80019b8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80016a0:	f001 ffbe 	bl	8003620 <HAL_RCC_GetSysClockFreq>
 80016a4:	4602      	mov	r2, r0
 80016a6:	4b15      	ldr	r3, [pc, #84]	@ (80016fc <HAL_Init+0x68>)
 80016a8:	699b      	ldr	r3, [r3, #24]
 80016aa:	0a1b      	lsrs	r3, r3, #8
 80016ac:	f003 030f 	and.w	r3, r3, #15
 80016b0:	4913      	ldr	r1, [pc, #76]	@ (8001700 <HAL_Init+0x6c>)
 80016b2:	5ccb      	ldrb	r3, [r1, r3]
 80016b4:	f003 031f 	and.w	r3, r3, #31
 80016b8:	fa22 f303 	lsr.w	r3, r2, r3
 80016bc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80016be:	4b0f      	ldr	r3, [pc, #60]	@ (80016fc <HAL_Init+0x68>)
 80016c0:	699b      	ldr	r3, [r3, #24]
 80016c2:	f003 030f 	and.w	r3, r3, #15
 80016c6:	4a0e      	ldr	r2, [pc, #56]	@ (8001700 <HAL_Init+0x6c>)
 80016c8:	5cd3      	ldrb	r3, [r2, r3]
 80016ca:	f003 031f 	and.w	r3, r3, #31
 80016ce:	687a      	ldr	r2, [r7, #4]
 80016d0:	fa22 f303 	lsr.w	r3, r2, r3
 80016d4:	4a0b      	ldr	r2, [pc, #44]	@ (8001704 <HAL_Init+0x70>)
 80016d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80016d8:	4a0b      	ldr	r2, [pc, #44]	@ (8001708 <HAL_Init+0x74>)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016de:	200f      	movs	r0, #15
 80016e0:	f000 f814 	bl	800170c <HAL_InitTick>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e002      	b.n	80016f4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80016ee:	f7ff fc37 	bl	8000f60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016f2:	2300      	movs	r3, #0
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	58024400 	.word	0x58024400
 8001700:	0800f70c 	.word	0x0800f70c
 8001704:	24000004 	.word	0x24000004
 8001708:	24000000 	.word	0x24000000

0800170c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001714:	4b15      	ldr	r3, [pc, #84]	@ (800176c <HAL_InitTick+0x60>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d101      	bne.n	8001720 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e021      	b.n	8001764 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001720:	4b13      	ldr	r3, [pc, #76]	@ (8001770 <HAL_InitTick+0x64>)
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	4b11      	ldr	r3, [pc, #68]	@ (800176c <HAL_InitTick+0x60>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	4619      	mov	r1, r3
 800172a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800172e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001732:	fbb2 f3f3 	udiv	r3, r2, r3
 8001736:	4618      	mov	r0, r3
 8001738:	f000 f971 	bl	8001a1e <HAL_SYSTICK_Config>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e00e      	b.n	8001764 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2b0f      	cmp	r3, #15
 800174a:	d80a      	bhi.n	8001762 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800174c:	2200      	movs	r2, #0
 800174e:	6879      	ldr	r1, [r7, #4]
 8001750:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001754:	f000 f93b 	bl	80019ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001758:	4a06      	ldr	r2, [pc, #24]	@ (8001774 <HAL_InitTick+0x68>)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800175e:	2300      	movs	r3, #0
 8001760:	e000      	b.n	8001764 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
}
 8001764:	4618      	mov	r0, r3
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	2400000c 	.word	0x2400000c
 8001770:	24000000 	.word	0x24000000
 8001774:	24000008 	.word	0x24000008

08001778 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800177c:	4b06      	ldr	r3, [pc, #24]	@ (8001798 <HAL_IncTick+0x20>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	461a      	mov	r2, r3
 8001782:	4b06      	ldr	r3, [pc, #24]	@ (800179c <HAL_IncTick+0x24>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4413      	add	r3, r2
 8001788:	4a04      	ldr	r2, [pc, #16]	@ (800179c <HAL_IncTick+0x24>)
 800178a:	6013      	str	r3, [r2, #0]
}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	2400000c 	.word	0x2400000c
 800179c:	24000790 	.word	0x24000790

080017a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  return uwTick;
 80017a4:	4b03      	ldr	r3, [pc, #12]	@ (80017b4 <HAL_GetTick+0x14>)
 80017a6:	681b      	ldr	r3, [r3, #0]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	24000790 	.word	0x24000790

080017b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017c0:	f7ff ffee 	bl	80017a0 <HAL_GetTick>
 80017c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80017d0:	d005      	beq.n	80017de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017d2:	4b0a      	ldr	r3, [pc, #40]	@ (80017fc <HAL_Delay+0x44>)
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	461a      	mov	r2, r3
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	4413      	add	r3, r2
 80017dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017de:	bf00      	nop
 80017e0:	f7ff ffde 	bl	80017a0 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	68fa      	ldr	r2, [r7, #12]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d8f7      	bhi.n	80017e0 <HAL_Delay+0x28>
  {
  }
}
 80017f0:	bf00      	nop
 80017f2:	bf00      	nop
 80017f4:	3710      	adds	r7, #16
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	2400000c 	.word	0x2400000c

08001800 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001804:	4b03      	ldr	r3, [pc, #12]	@ (8001814 <HAL_GetREVID+0x14>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	0c1b      	lsrs	r3, r3, #16
}
 800180a:	4618      	mov	r0, r3
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr
 8001814:	5c001000 	.word	0x5c001000

08001818 <__NVIC_SetPriorityGrouping>:
{
 8001818:	b480      	push	{r7}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f003 0307 	and.w	r3, r3, #7
 8001826:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001828:	4b0b      	ldr	r3, [pc, #44]	@ (8001858 <__NVIC_SetPriorityGrouping+0x40>)
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800182e:	68ba      	ldr	r2, [r7, #8]
 8001830:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001834:	4013      	ands	r3, r2
 8001836:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001840:	4b06      	ldr	r3, [pc, #24]	@ (800185c <__NVIC_SetPriorityGrouping+0x44>)
 8001842:	4313      	orrs	r3, r2
 8001844:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001846:	4a04      	ldr	r2, [pc, #16]	@ (8001858 <__NVIC_SetPriorityGrouping+0x40>)
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	60d3      	str	r3, [r2, #12]
}
 800184c:	bf00      	nop
 800184e:	3714      	adds	r7, #20
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	e000ed00 	.word	0xe000ed00
 800185c:	05fa0000 	.word	0x05fa0000

08001860 <__NVIC_GetPriorityGrouping>:
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001864:	4b04      	ldr	r3, [pc, #16]	@ (8001878 <__NVIC_GetPriorityGrouping+0x18>)
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	0a1b      	lsrs	r3, r3, #8
 800186a:	f003 0307 	and.w	r3, r3, #7
}
 800186e:	4618      	mov	r0, r3
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	e000ed00 	.word	0xe000ed00

0800187c <__NVIC_EnableIRQ>:
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001886:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800188a:	2b00      	cmp	r3, #0
 800188c:	db0b      	blt.n	80018a6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800188e:	88fb      	ldrh	r3, [r7, #6]
 8001890:	f003 021f 	and.w	r2, r3, #31
 8001894:	4907      	ldr	r1, [pc, #28]	@ (80018b4 <__NVIC_EnableIRQ+0x38>)
 8001896:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800189a:	095b      	lsrs	r3, r3, #5
 800189c:	2001      	movs	r0, #1
 800189e:	fa00 f202 	lsl.w	r2, r0, r2
 80018a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	e000e100 	.word	0xe000e100

080018b8 <__NVIC_SetPriority>:
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	6039      	str	r1, [r7, #0]
 80018c2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	db0a      	blt.n	80018e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	b2da      	uxtb	r2, r3
 80018d0:	490c      	ldr	r1, [pc, #48]	@ (8001904 <__NVIC_SetPriority+0x4c>)
 80018d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018d6:	0112      	lsls	r2, r2, #4
 80018d8:	b2d2      	uxtb	r2, r2
 80018da:	440b      	add	r3, r1
 80018dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80018e0:	e00a      	b.n	80018f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	b2da      	uxtb	r2, r3
 80018e6:	4908      	ldr	r1, [pc, #32]	@ (8001908 <__NVIC_SetPriority+0x50>)
 80018e8:	88fb      	ldrh	r3, [r7, #6]
 80018ea:	f003 030f 	and.w	r3, r3, #15
 80018ee:	3b04      	subs	r3, #4
 80018f0:	0112      	lsls	r2, r2, #4
 80018f2:	b2d2      	uxtb	r2, r2
 80018f4:	440b      	add	r3, r1
 80018f6:	761a      	strb	r2, [r3, #24]
}
 80018f8:	bf00      	nop
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	e000e100 	.word	0xe000e100
 8001908:	e000ed00 	.word	0xe000ed00

0800190c <NVIC_EncodePriority>:
{
 800190c:	b480      	push	{r7}
 800190e:	b089      	sub	sp, #36	@ 0x24
 8001910:	af00      	add	r7, sp, #0
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	60b9      	str	r1, [r7, #8]
 8001916:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f003 0307 	and.w	r3, r3, #7
 800191e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	f1c3 0307 	rsb	r3, r3, #7
 8001926:	2b04      	cmp	r3, #4
 8001928:	bf28      	it	cs
 800192a:	2304      	movcs	r3, #4
 800192c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	3304      	adds	r3, #4
 8001932:	2b06      	cmp	r3, #6
 8001934:	d902      	bls.n	800193c <NVIC_EncodePriority+0x30>
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	3b03      	subs	r3, #3
 800193a:	e000      	b.n	800193e <NVIC_EncodePriority+0x32>
 800193c:	2300      	movs	r3, #0
 800193e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001940:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	43da      	mvns	r2, r3
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	401a      	ands	r2, r3
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001954:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	fa01 f303 	lsl.w	r3, r1, r3
 800195e:	43d9      	mvns	r1, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001964:	4313      	orrs	r3, r2
}
 8001966:	4618      	mov	r0, r3
 8001968:	3724      	adds	r7, #36	@ 0x24
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
	...

08001974 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	3b01      	subs	r3, #1
 8001980:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001984:	d301      	bcc.n	800198a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001986:	2301      	movs	r3, #1
 8001988:	e00f      	b.n	80019aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800198a:	4a0a      	ldr	r2, [pc, #40]	@ (80019b4 <SysTick_Config+0x40>)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	3b01      	subs	r3, #1
 8001990:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001992:	210f      	movs	r1, #15
 8001994:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001998:	f7ff ff8e 	bl	80018b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800199c:	4b05      	ldr	r3, [pc, #20]	@ (80019b4 <SysTick_Config+0x40>)
 800199e:	2200      	movs	r2, #0
 80019a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019a2:	4b04      	ldr	r3, [pc, #16]	@ (80019b4 <SysTick_Config+0x40>)
 80019a4:	2207      	movs	r2, #7
 80019a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	e000e010 	.word	0xe000e010

080019b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f7ff ff29 	bl	8001818 <__NVIC_SetPriorityGrouping>
}
 80019c6:	bf00      	nop
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b086      	sub	sp, #24
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	4603      	mov	r3, r0
 80019d6:	60b9      	str	r1, [r7, #8]
 80019d8:	607a      	str	r2, [r7, #4]
 80019da:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019dc:	f7ff ff40 	bl	8001860 <__NVIC_GetPriorityGrouping>
 80019e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	68b9      	ldr	r1, [r7, #8]
 80019e6:	6978      	ldr	r0, [r7, #20]
 80019e8:	f7ff ff90 	bl	800190c <NVIC_EncodePriority>
 80019ec:	4602      	mov	r2, r0
 80019ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019f2:	4611      	mov	r1, r2
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff ff5f 	bl	80018b8 <__NVIC_SetPriority>
}
 80019fa:	bf00      	nop
 80019fc:	3718      	adds	r7, #24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b082      	sub	sp, #8
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	4603      	mov	r3, r0
 8001a0a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff ff33 	bl	800187c <__NVIC_EnableIRQ>
}
 8001a16:	bf00      	nop
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b082      	sub	sp, #8
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f7ff ffa4 	bl	8001974 <SysTick_Config>
 8001a2c:	4603      	mov	r3, r0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
	...

08001a38 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001a3c:	f3bf 8f5f 	dmb	sy
}
 8001a40:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001a42:	4b07      	ldr	r3, [pc, #28]	@ (8001a60 <HAL_MPU_Disable+0x28>)
 8001a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a46:	4a06      	ldr	r2, [pc, #24]	@ (8001a60 <HAL_MPU_Disable+0x28>)
 8001a48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a4c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001a4e:	4b05      	ldr	r3, [pc, #20]	@ (8001a64 <HAL_MPU_Disable+0x2c>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	605a      	str	r2, [r3, #4]
}
 8001a54:	bf00      	nop
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	e000ed00 	.word	0xe000ed00
 8001a64:	e000ed90 	.word	0xe000ed90

08001a68 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001a70:	4a0b      	ldr	r2, [pc, #44]	@ (8001aa0 <HAL_MPU_Enable+0x38>)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f043 0301 	orr.w	r3, r3, #1
 8001a78:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001a7a:	4b0a      	ldr	r3, [pc, #40]	@ (8001aa4 <HAL_MPU_Enable+0x3c>)
 8001a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a7e:	4a09      	ldr	r2, [pc, #36]	@ (8001aa4 <HAL_MPU_Enable+0x3c>)
 8001a80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a84:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001a86:	f3bf 8f4f 	dsb	sy
}
 8001a8a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001a8c:	f3bf 8f6f 	isb	sy
}
 8001a90:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001a92:	bf00      	nop
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	e000ed90 	.word	0xe000ed90
 8001aa4:	e000ed00 	.word	0xe000ed00

08001aa8 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	785a      	ldrb	r2, [r3, #1]
 8001ab4:	4b1d      	ldr	r3, [pc, #116]	@ (8001b2c <HAL_MPU_ConfigRegion+0x84>)
 8001ab6:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d029      	beq.n	8001b14 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001ac0:	4a1a      	ldr	r2, [pc, #104]	@ (8001b2c <HAL_MPU_ConfigRegion+0x84>)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	7b1b      	ldrb	r3, [r3, #12]
 8001acc:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	7adb      	ldrb	r3, [r3, #11]
 8001ad2:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ad4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	7a9b      	ldrb	r3, [r3, #10]
 8001ada:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001adc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	7b5b      	ldrb	r3, [r3, #13]
 8001ae2:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001ae4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	7b9b      	ldrb	r3, [r3, #14]
 8001aea:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001aec:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	7bdb      	ldrb	r3, [r3, #15]
 8001af2:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001af4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	7a5b      	ldrb	r3, [r3, #9]
 8001afa:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001afc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	7a1b      	ldrb	r3, [r3, #8]
 8001b02:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001b04:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	7812      	ldrb	r2, [r2, #0]
 8001b0a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b0c:	4a07      	ldr	r2, [pc, #28]	@ (8001b2c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001b0e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b10:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001b12:	e005      	b.n	8001b20 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001b14:	4b05      	ldr	r3, [pc, #20]	@ (8001b2c <HAL_MPU_ConfigRegion+0x84>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001b1a:	4b04      	ldr	r3, [pc, #16]	@ (8001b2c <HAL_MPU_ConfigRegion+0x84>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	611a      	str	r2, [r3, #16]
}
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	e000ed90 	.word	0xe000ed90

08001b30 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001b38:	f7ff fe32 	bl	80017a0 <HAL_GetTick>
 8001b3c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d101      	bne.n	8001b48 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e2dc      	b.n	8002102 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d008      	beq.n	8001b66 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2280      	movs	r2, #128	@ 0x80
 8001b58:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e2cd      	b.n	8002102 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a76      	ldr	r2, [pc, #472]	@ (8001d44 <HAL_DMA_Abort+0x214>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d04a      	beq.n	8001c06 <HAL_DMA_Abort+0xd6>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a74      	ldr	r2, [pc, #464]	@ (8001d48 <HAL_DMA_Abort+0x218>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d045      	beq.n	8001c06 <HAL_DMA_Abort+0xd6>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a73      	ldr	r2, [pc, #460]	@ (8001d4c <HAL_DMA_Abort+0x21c>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d040      	beq.n	8001c06 <HAL_DMA_Abort+0xd6>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a71      	ldr	r2, [pc, #452]	@ (8001d50 <HAL_DMA_Abort+0x220>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d03b      	beq.n	8001c06 <HAL_DMA_Abort+0xd6>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a70      	ldr	r2, [pc, #448]	@ (8001d54 <HAL_DMA_Abort+0x224>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d036      	beq.n	8001c06 <HAL_DMA_Abort+0xd6>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a6e      	ldr	r2, [pc, #440]	@ (8001d58 <HAL_DMA_Abort+0x228>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d031      	beq.n	8001c06 <HAL_DMA_Abort+0xd6>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a6d      	ldr	r2, [pc, #436]	@ (8001d5c <HAL_DMA_Abort+0x22c>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d02c      	beq.n	8001c06 <HAL_DMA_Abort+0xd6>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a6b      	ldr	r2, [pc, #428]	@ (8001d60 <HAL_DMA_Abort+0x230>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d027      	beq.n	8001c06 <HAL_DMA_Abort+0xd6>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a6a      	ldr	r2, [pc, #424]	@ (8001d64 <HAL_DMA_Abort+0x234>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d022      	beq.n	8001c06 <HAL_DMA_Abort+0xd6>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a68      	ldr	r2, [pc, #416]	@ (8001d68 <HAL_DMA_Abort+0x238>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d01d      	beq.n	8001c06 <HAL_DMA_Abort+0xd6>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a67      	ldr	r2, [pc, #412]	@ (8001d6c <HAL_DMA_Abort+0x23c>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d018      	beq.n	8001c06 <HAL_DMA_Abort+0xd6>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a65      	ldr	r2, [pc, #404]	@ (8001d70 <HAL_DMA_Abort+0x240>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d013      	beq.n	8001c06 <HAL_DMA_Abort+0xd6>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a64      	ldr	r2, [pc, #400]	@ (8001d74 <HAL_DMA_Abort+0x244>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d00e      	beq.n	8001c06 <HAL_DMA_Abort+0xd6>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a62      	ldr	r2, [pc, #392]	@ (8001d78 <HAL_DMA_Abort+0x248>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d009      	beq.n	8001c06 <HAL_DMA_Abort+0xd6>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a61      	ldr	r2, [pc, #388]	@ (8001d7c <HAL_DMA_Abort+0x24c>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d004      	beq.n	8001c06 <HAL_DMA_Abort+0xd6>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a5f      	ldr	r2, [pc, #380]	@ (8001d80 <HAL_DMA_Abort+0x250>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d101      	bne.n	8001c0a <HAL_DMA_Abort+0xda>
 8001c06:	2301      	movs	r3, #1
 8001c08:	e000      	b.n	8001c0c <HAL_DMA_Abort+0xdc>
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d013      	beq.n	8001c38 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f022 021e 	bic.w	r2, r2, #30
 8001c1e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	695a      	ldr	r2, [r3, #20]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001c2e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	617b      	str	r3, [r7, #20]
 8001c36:	e00a      	b.n	8001c4e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f022 020e 	bic.w	r2, r2, #14
 8001c46:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a3c      	ldr	r2, [pc, #240]	@ (8001d44 <HAL_DMA_Abort+0x214>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d072      	beq.n	8001d3e <HAL_DMA_Abort+0x20e>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a3a      	ldr	r2, [pc, #232]	@ (8001d48 <HAL_DMA_Abort+0x218>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d06d      	beq.n	8001d3e <HAL_DMA_Abort+0x20e>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a39      	ldr	r2, [pc, #228]	@ (8001d4c <HAL_DMA_Abort+0x21c>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d068      	beq.n	8001d3e <HAL_DMA_Abort+0x20e>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a37      	ldr	r2, [pc, #220]	@ (8001d50 <HAL_DMA_Abort+0x220>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d063      	beq.n	8001d3e <HAL_DMA_Abort+0x20e>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a36      	ldr	r2, [pc, #216]	@ (8001d54 <HAL_DMA_Abort+0x224>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d05e      	beq.n	8001d3e <HAL_DMA_Abort+0x20e>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a34      	ldr	r2, [pc, #208]	@ (8001d58 <HAL_DMA_Abort+0x228>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d059      	beq.n	8001d3e <HAL_DMA_Abort+0x20e>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a33      	ldr	r2, [pc, #204]	@ (8001d5c <HAL_DMA_Abort+0x22c>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d054      	beq.n	8001d3e <HAL_DMA_Abort+0x20e>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a31      	ldr	r2, [pc, #196]	@ (8001d60 <HAL_DMA_Abort+0x230>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d04f      	beq.n	8001d3e <HAL_DMA_Abort+0x20e>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a30      	ldr	r2, [pc, #192]	@ (8001d64 <HAL_DMA_Abort+0x234>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d04a      	beq.n	8001d3e <HAL_DMA_Abort+0x20e>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a2e      	ldr	r2, [pc, #184]	@ (8001d68 <HAL_DMA_Abort+0x238>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d045      	beq.n	8001d3e <HAL_DMA_Abort+0x20e>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a2d      	ldr	r2, [pc, #180]	@ (8001d6c <HAL_DMA_Abort+0x23c>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d040      	beq.n	8001d3e <HAL_DMA_Abort+0x20e>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a2b      	ldr	r2, [pc, #172]	@ (8001d70 <HAL_DMA_Abort+0x240>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d03b      	beq.n	8001d3e <HAL_DMA_Abort+0x20e>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a2a      	ldr	r2, [pc, #168]	@ (8001d74 <HAL_DMA_Abort+0x244>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d036      	beq.n	8001d3e <HAL_DMA_Abort+0x20e>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a28      	ldr	r2, [pc, #160]	@ (8001d78 <HAL_DMA_Abort+0x248>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d031      	beq.n	8001d3e <HAL_DMA_Abort+0x20e>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a27      	ldr	r2, [pc, #156]	@ (8001d7c <HAL_DMA_Abort+0x24c>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d02c      	beq.n	8001d3e <HAL_DMA_Abort+0x20e>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a25      	ldr	r2, [pc, #148]	@ (8001d80 <HAL_DMA_Abort+0x250>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d027      	beq.n	8001d3e <HAL_DMA_Abort+0x20e>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a24      	ldr	r2, [pc, #144]	@ (8001d84 <HAL_DMA_Abort+0x254>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d022      	beq.n	8001d3e <HAL_DMA_Abort+0x20e>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a22      	ldr	r2, [pc, #136]	@ (8001d88 <HAL_DMA_Abort+0x258>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d01d      	beq.n	8001d3e <HAL_DMA_Abort+0x20e>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a21      	ldr	r2, [pc, #132]	@ (8001d8c <HAL_DMA_Abort+0x25c>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d018      	beq.n	8001d3e <HAL_DMA_Abort+0x20e>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a1f      	ldr	r2, [pc, #124]	@ (8001d90 <HAL_DMA_Abort+0x260>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d013      	beq.n	8001d3e <HAL_DMA_Abort+0x20e>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a1e      	ldr	r2, [pc, #120]	@ (8001d94 <HAL_DMA_Abort+0x264>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d00e      	beq.n	8001d3e <HAL_DMA_Abort+0x20e>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a1c      	ldr	r2, [pc, #112]	@ (8001d98 <HAL_DMA_Abort+0x268>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d009      	beq.n	8001d3e <HAL_DMA_Abort+0x20e>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a1b      	ldr	r2, [pc, #108]	@ (8001d9c <HAL_DMA_Abort+0x26c>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d004      	beq.n	8001d3e <HAL_DMA_Abort+0x20e>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a19      	ldr	r2, [pc, #100]	@ (8001da0 <HAL_DMA_Abort+0x270>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d132      	bne.n	8001da4 <HAL_DMA_Abort+0x274>
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e031      	b.n	8001da6 <HAL_DMA_Abort+0x276>
 8001d42:	bf00      	nop
 8001d44:	40020010 	.word	0x40020010
 8001d48:	40020028 	.word	0x40020028
 8001d4c:	40020040 	.word	0x40020040
 8001d50:	40020058 	.word	0x40020058
 8001d54:	40020070 	.word	0x40020070
 8001d58:	40020088 	.word	0x40020088
 8001d5c:	400200a0 	.word	0x400200a0
 8001d60:	400200b8 	.word	0x400200b8
 8001d64:	40020410 	.word	0x40020410
 8001d68:	40020428 	.word	0x40020428
 8001d6c:	40020440 	.word	0x40020440
 8001d70:	40020458 	.word	0x40020458
 8001d74:	40020470 	.word	0x40020470
 8001d78:	40020488 	.word	0x40020488
 8001d7c:	400204a0 	.word	0x400204a0
 8001d80:	400204b8 	.word	0x400204b8
 8001d84:	58025408 	.word	0x58025408
 8001d88:	5802541c 	.word	0x5802541c
 8001d8c:	58025430 	.word	0x58025430
 8001d90:	58025444 	.word	0x58025444
 8001d94:	58025458 	.word	0x58025458
 8001d98:	5802546c 	.word	0x5802546c
 8001d9c:	58025480 	.word	0x58025480
 8001da0:	58025494 	.word	0x58025494
 8001da4:	2300      	movs	r3, #0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d007      	beq.n	8001dba <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001db4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001db8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a6d      	ldr	r2, [pc, #436]	@ (8001f74 <HAL_DMA_Abort+0x444>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d04a      	beq.n	8001e5a <HAL_DMA_Abort+0x32a>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a6b      	ldr	r2, [pc, #428]	@ (8001f78 <HAL_DMA_Abort+0x448>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d045      	beq.n	8001e5a <HAL_DMA_Abort+0x32a>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a6a      	ldr	r2, [pc, #424]	@ (8001f7c <HAL_DMA_Abort+0x44c>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d040      	beq.n	8001e5a <HAL_DMA_Abort+0x32a>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a68      	ldr	r2, [pc, #416]	@ (8001f80 <HAL_DMA_Abort+0x450>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d03b      	beq.n	8001e5a <HAL_DMA_Abort+0x32a>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a67      	ldr	r2, [pc, #412]	@ (8001f84 <HAL_DMA_Abort+0x454>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d036      	beq.n	8001e5a <HAL_DMA_Abort+0x32a>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a65      	ldr	r2, [pc, #404]	@ (8001f88 <HAL_DMA_Abort+0x458>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d031      	beq.n	8001e5a <HAL_DMA_Abort+0x32a>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a64      	ldr	r2, [pc, #400]	@ (8001f8c <HAL_DMA_Abort+0x45c>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d02c      	beq.n	8001e5a <HAL_DMA_Abort+0x32a>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a62      	ldr	r2, [pc, #392]	@ (8001f90 <HAL_DMA_Abort+0x460>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d027      	beq.n	8001e5a <HAL_DMA_Abort+0x32a>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a61      	ldr	r2, [pc, #388]	@ (8001f94 <HAL_DMA_Abort+0x464>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d022      	beq.n	8001e5a <HAL_DMA_Abort+0x32a>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a5f      	ldr	r2, [pc, #380]	@ (8001f98 <HAL_DMA_Abort+0x468>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d01d      	beq.n	8001e5a <HAL_DMA_Abort+0x32a>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a5e      	ldr	r2, [pc, #376]	@ (8001f9c <HAL_DMA_Abort+0x46c>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d018      	beq.n	8001e5a <HAL_DMA_Abort+0x32a>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a5c      	ldr	r2, [pc, #368]	@ (8001fa0 <HAL_DMA_Abort+0x470>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d013      	beq.n	8001e5a <HAL_DMA_Abort+0x32a>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a5b      	ldr	r2, [pc, #364]	@ (8001fa4 <HAL_DMA_Abort+0x474>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d00e      	beq.n	8001e5a <HAL_DMA_Abort+0x32a>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a59      	ldr	r2, [pc, #356]	@ (8001fa8 <HAL_DMA_Abort+0x478>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d009      	beq.n	8001e5a <HAL_DMA_Abort+0x32a>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a58      	ldr	r2, [pc, #352]	@ (8001fac <HAL_DMA_Abort+0x47c>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d004      	beq.n	8001e5a <HAL_DMA_Abort+0x32a>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a56      	ldr	r2, [pc, #344]	@ (8001fb0 <HAL_DMA_Abort+0x480>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d108      	bne.n	8001e6c <HAL_DMA_Abort+0x33c>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f022 0201 	bic.w	r2, r2, #1
 8001e68:	601a      	str	r2, [r3, #0]
 8001e6a:	e007      	b.n	8001e7c <HAL_DMA_Abort+0x34c>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f022 0201 	bic.w	r2, r2, #1
 8001e7a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001e7c:	e013      	b.n	8001ea6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e7e:	f7ff fc8f 	bl	80017a0 <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	2b05      	cmp	r3, #5
 8001e8a:	d90c      	bls.n	8001ea6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2220      	movs	r2, #32
 8001e90:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2203      	movs	r2, #3
 8001e96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e12d      	b.n	8002102 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d1e5      	bne.n	8001e7e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a2f      	ldr	r2, [pc, #188]	@ (8001f74 <HAL_DMA_Abort+0x444>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d04a      	beq.n	8001f52 <HAL_DMA_Abort+0x422>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a2d      	ldr	r2, [pc, #180]	@ (8001f78 <HAL_DMA_Abort+0x448>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d045      	beq.n	8001f52 <HAL_DMA_Abort+0x422>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a2c      	ldr	r2, [pc, #176]	@ (8001f7c <HAL_DMA_Abort+0x44c>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d040      	beq.n	8001f52 <HAL_DMA_Abort+0x422>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a2a      	ldr	r2, [pc, #168]	@ (8001f80 <HAL_DMA_Abort+0x450>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d03b      	beq.n	8001f52 <HAL_DMA_Abort+0x422>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a29      	ldr	r2, [pc, #164]	@ (8001f84 <HAL_DMA_Abort+0x454>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d036      	beq.n	8001f52 <HAL_DMA_Abort+0x422>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a27      	ldr	r2, [pc, #156]	@ (8001f88 <HAL_DMA_Abort+0x458>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d031      	beq.n	8001f52 <HAL_DMA_Abort+0x422>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a26      	ldr	r2, [pc, #152]	@ (8001f8c <HAL_DMA_Abort+0x45c>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d02c      	beq.n	8001f52 <HAL_DMA_Abort+0x422>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a24      	ldr	r2, [pc, #144]	@ (8001f90 <HAL_DMA_Abort+0x460>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d027      	beq.n	8001f52 <HAL_DMA_Abort+0x422>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a23      	ldr	r2, [pc, #140]	@ (8001f94 <HAL_DMA_Abort+0x464>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d022      	beq.n	8001f52 <HAL_DMA_Abort+0x422>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a21      	ldr	r2, [pc, #132]	@ (8001f98 <HAL_DMA_Abort+0x468>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d01d      	beq.n	8001f52 <HAL_DMA_Abort+0x422>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a20      	ldr	r2, [pc, #128]	@ (8001f9c <HAL_DMA_Abort+0x46c>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d018      	beq.n	8001f52 <HAL_DMA_Abort+0x422>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a1e      	ldr	r2, [pc, #120]	@ (8001fa0 <HAL_DMA_Abort+0x470>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d013      	beq.n	8001f52 <HAL_DMA_Abort+0x422>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a1d      	ldr	r2, [pc, #116]	@ (8001fa4 <HAL_DMA_Abort+0x474>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d00e      	beq.n	8001f52 <HAL_DMA_Abort+0x422>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a1b      	ldr	r2, [pc, #108]	@ (8001fa8 <HAL_DMA_Abort+0x478>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d009      	beq.n	8001f52 <HAL_DMA_Abort+0x422>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a1a      	ldr	r2, [pc, #104]	@ (8001fac <HAL_DMA_Abort+0x47c>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d004      	beq.n	8001f52 <HAL_DMA_Abort+0x422>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a18      	ldr	r2, [pc, #96]	@ (8001fb0 <HAL_DMA_Abort+0x480>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d101      	bne.n	8001f56 <HAL_DMA_Abort+0x426>
 8001f52:	2301      	movs	r3, #1
 8001f54:	e000      	b.n	8001f58 <HAL_DMA_Abort+0x428>
 8001f56:	2300      	movs	r3, #0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d02b      	beq.n	8001fb4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f60:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f66:	f003 031f 	and.w	r3, r3, #31
 8001f6a:	223f      	movs	r2, #63	@ 0x3f
 8001f6c:	409a      	lsls	r2, r3
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	609a      	str	r2, [r3, #8]
 8001f72:	e02a      	b.n	8001fca <HAL_DMA_Abort+0x49a>
 8001f74:	40020010 	.word	0x40020010
 8001f78:	40020028 	.word	0x40020028
 8001f7c:	40020040 	.word	0x40020040
 8001f80:	40020058 	.word	0x40020058
 8001f84:	40020070 	.word	0x40020070
 8001f88:	40020088 	.word	0x40020088
 8001f8c:	400200a0 	.word	0x400200a0
 8001f90:	400200b8 	.word	0x400200b8
 8001f94:	40020410 	.word	0x40020410
 8001f98:	40020428 	.word	0x40020428
 8001f9c:	40020440 	.word	0x40020440
 8001fa0:	40020458 	.word	0x40020458
 8001fa4:	40020470 	.word	0x40020470
 8001fa8:	40020488 	.word	0x40020488
 8001fac:	400204a0 	.word	0x400204a0
 8001fb0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fb8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fbe:	f003 031f 	and.w	r3, r3, #31
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	409a      	lsls	r2, r3
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a4f      	ldr	r2, [pc, #316]	@ (800210c <HAL_DMA_Abort+0x5dc>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d072      	beq.n	80020ba <HAL_DMA_Abort+0x58a>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a4d      	ldr	r2, [pc, #308]	@ (8002110 <HAL_DMA_Abort+0x5e0>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d06d      	beq.n	80020ba <HAL_DMA_Abort+0x58a>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a4c      	ldr	r2, [pc, #304]	@ (8002114 <HAL_DMA_Abort+0x5e4>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d068      	beq.n	80020ba <HAL_DMA_Abort+0x58a>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a4a      	ldr	r2, [pc, #296]	@ (8002118 <HAL_DMA_Abort+0x5e8>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d063      	beq.n	80020ba <HAL_DMA_Abort+0x58a>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a49      	ldr	r2, [pc, #292]	@ (800211c <HAL_DMA_Abort+0x5ec>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d05e      	beq.n	80020ba <HAL_DMA_Abort+0x58a>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a47      	ldr	r2, [pc, #284]	@ (8002120 <HAL_DMA_Abort+0x5f0>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d059      	beq.n	80020ba <HAL_DMA_Abort+0x58a>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a46      	ldr	r2, [pc, #280]	@ (8002124 <HAL_DMA_Abort+0x5f4>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d054      	beq.n	80020ba <HAL_DMA_Abort+0x58a>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a44      	ldr	r2, [pc, #272]	@ (8002128 <HAL_DMA_Abort+0x5f8>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d04f      	beq.n	80020ba <HAL_DMA_Abort+0x58a>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a43      	ldr	r2, [pc, #268]	@ (800212c <HAL_DMA_Abort+0x5fc>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d04a      	beq.n	80020ba <HAL_DMA_Abort+0x58a>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a41      	ldr	r2, [pc, #260]	@ (8002130 <HAL_DMA_Abort+0x600>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d045      	beq.n	80020ba <HAL_DMA_Abort+0x58a>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a40      	ldr	r2, [pc, #256]	@ (8002134 <HAL_DMA_Abort+0x604>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d040      	beq.n	80020ba <HAL_DMA_Abort+0x58a>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a3e      	ldr	r2, [pc, #248]	@ (8002138 <HAL_DMA_Abort+0x608>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d03b      	beq.n	80020ba <HAL_DMA_Abort+0x58a>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a3d      	ldr	r2, [pc, #244]	@ (800213c <HAL_DMA_Abort+0x60c>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d036      	beq.n	80020ba <HAL_DMA_Abort+0x58a>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a3b      	ldr	r2, [pc, #236]	@ (8002140 <HAL_DMA_Abort+0x610>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d031      	beq.n	80020ba <HAL_DMA_Abort+0x58a>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a3a      	ldr	r2, [pc, #232]	@ (8002144 <HAL_DMA_Abort+0x614>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d02c      	beq.n	80020ba <HAL_DMA_Abort+0x58a>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a38      	ldr	r2, [pc, #224]	@ (8002148 <HAL_DMA_Abort+0x618>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d027      	beq.n	80020ba <HAL_DMA_Abort+0x58a>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a37      	ldr	r2, [pc, #220]	@ (800214c <HAL_DMA_Abort+0x61c>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d022      	beq.n	80020ba <HAL_DMA_Abort+0x58a>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a35      	ldr	r2, [pc, #212]	@ (8002150 <HAL_DMA_Abort+0x620>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d01d      	beq.n	80020ba <HAL_DMA_Abort+0x58a>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a34      	ldr	r2, [pc, #208]	@ (8002154 <HAL_DMA_Abort+0x624>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d018      	beq.n	80020ba <HAL_DMA_Abort+0x58a>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a32      	ldr	r2, [pc, #200]	@ (8002158 <HAL_DMA_Abort+0x628>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d013      	beq.n	80020ba <HAL_DMA_Abort+0x58a>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a31      	ldr	r2, [pc, #196]	@ (800215c <HAL_DMA_Abort+0x62c>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d00e      	beq.n	80020ba <HAL_DMA_Abort+0x58a>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a2f      	ldr	r2, [pc, #188]	@ (8002160 <HAL_DMA_Abort+0x630>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d009      	beq.n	80020ba <HAL_DMA_Abort+0x58a>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a2e      	ldr	r2, [pc, #184]	@ (8002164 <HAL_DMA_Abort+0x634>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d004      	beq.n	80020ba <HAL_DMA_Abort+0x58a>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a2c      	ldr	r2, [pc, #176]	@ (8002168 <HAL_DMA_Abort+0x638>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d101      	bne.n	80020be <HAL_DMA_Abort+0x58e>
 80020ba:	2301      	movs	r3, #1
 80020bc:	e000      	b.n	80020c0 <HAL_DMA_Abort+0x590>
 80020be:	2300      	movs	r3, #0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d015      	beq.n	80020f0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80020cc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d00c      	beq.n	80020f0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80020e4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80020ee:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	3718      	adds	r7, #24
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	40020010 	.word	0x40020010
 8002110:	40020028 	.word	0x40020028
 8002114:	40020040 	.word	0x40020040
 8002118:	40020058 	.word	0x40020058
 800211c:	40020070 	.word	0x40020070
 8002120:	40020088 	.word	0x40020088
 8002124:	400200a0 	.word	0x400200a0
 8002128:	400200b8 	.word	0x400200b8
 800212c:	40020410 	.word	0x40020410
 8002130:	40020428 	.word	0x40020428
 8002134:	40020440 	.word	0x40020440
 8002138:	40020458 	.word	0x40020458
 800213c:	40020470 	.word	0x40020470
 8002140:	40020488 	.word	0x40020488
 8002144:	400204a0 	.word	0x400204a0
 8002148:	400204b8 	.word	0x400204b8
 800214c:	58025408 	.word	0x58025408
 8002150:	5802541c 	.word	0x5802541c
 8002154:	58025430 	.word	0x58025430
 8002158:	58025444 	.word	0x58025444
 800215c:	58025458 	.word	0x58025458
 8002160:	5802546c 	.word	0x5802546c
 8002164:	58025480 	.word	0x58025480
 8002168:	58025494 	.word	0x58025494

0800216c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d101      	bne.n	800217e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e237      	b.n	80025ee <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b02      	cmp	r3, #2
 8002188:	d004      	beq.n	8002194 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2280      	movs	r2, #128	@ 0x80
 800218e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e22c      	b.n	80025ee <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a5c      	ldr	r2, [pc, #368]	@ (800230c <HAL_DMA_Abort_IT+0x1a0>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d04a      	beq.n	8002234 <HAL_DMA_Abort_IT+0xc8>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a5b      	ldr	r2, [pc, #364]	@ (8002310 <HAL_DMA_Abort_IT+0x1a4>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d045      	beq.n	8002234 <HAL_DMA_Abort_IT+0xc8>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a59      	ldr	r2, [pc, #356]	@ (8002314 <HAL_DMA_Abort_IT+0x1a8>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d040      	beq.n	8002234 <HAL_DMA_Abort_IT+0xc8>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a58      	ldr	r2, [pc, #352]	@ (8002318 <HAL_DMA_Abort_IT+0x1ac>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d03b      	beq.n	8002234 <HAL_DMA_Abort_IT+0xc8>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a56      	ldr	r2, [pc, #344]	@ (800231c <HAL_DMA_Abort_IT+0x1b0>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d036      	beq.n	8002234 <HAL_DMA_Abort_IT+0xc8>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a55      	ldr	r2, [pc, #340]	@ (8002320 <HAL_DMA_Abort_IT+0x1b4>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d031      	beq.n	8002234 <HAL_DMA_Abort_IT+0xc8>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a53      	ldr	r2, [pc, #332]	@ (8002324 <HAL_DMA_Abort_IT+0x1b8>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d02c      	beq.n	8002234 <HAL_DMA_Abort_IT+0xc8>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a52      	ldr	r2, [pc, #328]	@ (8002328 <HAL_DMA_Abort_IT+0x1bc>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d027      	beq.n	8002234 <HAL_DMA_Abort_IT+0xc8>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a50      	ldr	r2, [pc, #320]	@ (800232c <HAL_DMA_Abort_IT+0x1c0>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d022      	beq.n	8002234 <HAL_DMA_Abort_IT+0xc8>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a4f      	ldr	r2, [pc, #316]	@ (8002330 <HAL_DMA_Abort_IT+0x1c4>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d01d      	beq.n	8002234 <HAL_DMA_Abort_IT+0xc8>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a4d      	ldr	r2, [pc, #308]	@ (8002334 <HAL_DMA_Abort_IT+0x1c8>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d018      	beq.n	8002234 <HAL_DMA_Abort_IT+0xc8>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a4c      	ldr	r2, [pc, #304]	@ (8002338 <HAL_DMA_Abort_IT+0x1cc>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d013      	beq.n	8002234 <HAL_DMA_Abort_IT+0xc8>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a4a      	ldr	r2, [pc, #296]	@ (800233c <HAL_DMA_Abort_IT+0x1d0>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d00e      	beq.n	8002234 <HAL_DMA_Abort_IT+0xc8>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a49      	ldr	r2, [pc, #292]	@ (8002340 <HAL_DMA_Abort_IT+0x1d4>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d009      	beq.n	8002234 <HAL_DMA_Abort_IT+0xc8>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a47      	ldr	r2, [pc, #284]	@ (8002344 <HAL_DMA_Abort_IT+0x1d8>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d004      	beq.n	8002234 <HAL_DMA_Abort_IT+0xc8>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a46      	ldr	r2, [pc, #280]	@ (8002348 <HAL_DMA_Abort_IT+0x1dc>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d101      	bne.n	8002238 <HAL_DMA_Abort_IT+0xcc>
 8002234:	2301      	movs	r3, #1
 8002236:	e000      	b.n	800223a <HAL_DMA_Abort_IT+0xce>
 8002238:	2300      	movs	r3, #0
 800223a:	2b00      	cmp	r3, #0
 800223c:	f000 8086 	beq.w	800234c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2204      	movs	r2, #4
 8002244:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a2f      	ldr	r2, [pc, #188]	@ (800230c <HAL_DMA_Abort_IT+0x1a0>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d04a      	beq.n	80022e8 <HAL_DMA_Abort_IT+0x17c>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a2e      	ldr	r2, [pc, #184]	@ (8002310 <HAL_DMA_Abort_IT+0x1a4>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d045      	beq.n	80022e8 <HAL_DMA_Abort_IT+0x17c>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a2c      	ldr	r2, [pc, #176]	@ (8002314 <HAL_DMA_Abort_IT+0x1a8>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d040      	beq.n	80022e8 <HAL_DMA_Abort_IT+0x17c>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a2b      	ldr	r2, [pc, #172]	@ (8002318 <HAL_DMA_Abort_IT+0x1ac>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d03b      	beq.n	80022e8 <HAL_DMA_Abort_IT+0x17c>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a29      	ldr	r2, [pc, #164]	@ (800231c <HAL_DMA_Abort_IT+0x1b0>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d036      	beq.n	80022e8 <HAL_DMA_Abort_IT+0x17c>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a28      	ldr	r2, [pc, #160]	@ (8002320 <HAL_DMA_Abort_IT+0x1b4>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d031      	beq.n	80022e8 <HAL_DMA_Abort_IT+0x17c>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a26      	ldr	r2, [pc, #152]	@ (8002324 <HAL_DMA_Abort_IT+0x1b8>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d02c      	beq.n	80022e8 <HAL_DMA_Abort_IT+0x17c>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a25      	ldr	r2, [pc, #148]	@ (8002328 <HAL_DMA_Abort_IT+0x1bc>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d027      	beq.n	80022e8 <HAL_DMA_Abort_IT+0x17c>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a23      	ldr	r2, [pc, #140]	@ (800232c <HAL_DMA_Abort_IT+0x1c0>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d022      	beq.n	80022e8 <HAL_DMA_Abort_IT+0x17c>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a22      	ldr	r2, [pc, #136]	@ (8002330 <HAL_DMA_Abort_IT+0x1c4>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d01d      	beq.n	80022e8 <HAL_DMA_Abort_IT+0x17c>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a20      	ldr	r2, [pc, #128]	@ (8002334 <HAL_DMA_Abort_IT+0x1c8>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d018      	beq.n	80022e8 <HAL_DMA_Abort_IT+0x17c>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a1f      	ldr	r2, [pc, #124]	@ (8002338 <HAL_DMA_Abort_IT+0x1cc>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d013      	beq.n	80022e8 <HAL_DMA_Abort_IT+0x17c>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a1d      	ldr	r2, [pc, #116]	@ (800233c <HAL_DMA_Abort_IT+0x1d0>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d00e      	beq.n	80022e8 <HAL_DMA_Abort_IT+0x17c>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a1c      	ldr	r2, [pc, #112]	@ (8002340 <HAL_DMA_Abort_IT+0x1d4>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d009      	beq.n	80022e8 <HAL_DMA_Abort_IT+0x17c>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a1a      	ldr	r2, [pc, #104]	@ (8002344 <HAL_DMA_Abort_IT+0x1d8>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d004      	beq.n	80022e8 <HAL_DMA_Abort_IT+0x17c>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a19      	ldr	r2, [pc, #100]	@ (8002348 <HAL_DMA_Abort_IT+0x1dc>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d108      	bne.n	80022fa <HAL_DMA_Abort_IT+0x18e>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f022 0201 	bic.w	r2, r2, #1
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	e178      	b.n	80025ec <HAL_DMA_Abort_IT+0x480>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f022 0201 	bic.w	r2, r2, #1
 8002308:	601a      	str	r2, [r3, #0]
 800230a:	e16f      	b.n	80025ec <HAL_DMA_Abort_IT+0x480>
 800230c:	40020010 	.word	0x40020010
 8002310:	40020028 	.word	0x40020028
 8002314:	40020040 	.word	0x40020040
 8002318:	40020058 	.word	0x40020058
 800231c:	40020070 	.word	0x40020070
 8002320:	40020088 	.word	0x40020088
 8002324:	400200a0 	.word	0x400200a0
 8002328:	400200b8 	.word	0x400200b8
 800232c:	40020410 	.word	0x40020410
 8002330:	40020428 	.word	0x40020428
 8002334:	40020440 	.word	0x40020440
 8002338:	40020458 	.word	0x40020458
 800233c:	40020470 	.word	0x40020470
 8002340:	40020488 	.word	0x40020488
 8002344:	400204a0 	.word	0x400204a0
 8002348:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f022 020e 	bic.w	r2, r2, #14
 800235a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a6c      	ldr	r2, [pc, #432]	@ (8002514 <HAL_DMA_Abort_IT+0x3a8>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d04a      	beq.n	80023fc <HAL_DMA_Abort_IT+0x290>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a6b      	ldr	r2, [pc, #428]	@ (8002518 <HAL_DMA_Abort_IT+0x3ac>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d045      	beq.n	80023fc <HAL_DMA_Abort_IT+0x290>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a69      	ldr	r2, [pc, #420]	@ (800251c <HAL_DMA_Abort_IT+0x3b0>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d040      	beq.n	80023fc <HAL_DMA_Abort_IT+0x290>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a68      	ldr	r2, [pc, #416]	@ (8002520 <HAL_DMA_Abort_IT+0x3b4>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d03b      	beq.n	80023fc <HAL_DMA_Abort_IT+0x290>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a66      	ldr	r2, [pc, #408]	@ (8002524 <HAL_DMA_Abort_IT+0x3b8>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d036      	beq.n	80023fc <HAL_DMA_Abort_IT+0x290>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a65      	ldr	r2, [pc, #404]	@ (8002528 <HAL_DMA_Abort_IT+0x3bc>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d031      	beq.n	80023fc <HAL_DMA_Abort_IT+0x290>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a63      	ldr	r2, [pc, #396]	@ (800252c <HAL_DMA_Abort_IT+0x3c0>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d02c      	beq.n	80023fc <HAL_DMA_Abort_IT+0x290>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a62      	ldr	r2, [pc, #392]	@ (8002530 <HAL_DMA_Abort_IT+0x3c4>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d027      	beq.n	80023fc <HAL_DMA_Abort_IT+0x290>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a60      	ldr	r2, [pc, #384]	@ (8002534 <HAL_DMA_Abort_IT+0x3c8>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d022      	beq.n	80023fc <HAL_DMA_Abort_IT+0x290>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a5f      	ldr	r2, [pc, #380]	@ (8002538 <HAL_DMA_Abort_IT+0x3cc>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d01d      	beq.n	80023fc <HAL_DMA_Abort_IT+0x290>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a5d      	ldr	r2, [pc, #372]	@ (800253c <HAL_DMA_Abort_IT+0x3d0>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d018      	beq.n	80023fc <HAL_DMA_Abort_IT+0x290>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a5c      	ldr	r2, [pc, #368]	@ (8002540 <HAL_DMA_Abort_IT+0x3d4>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d013      	beq.n	80023fc <HAL_DMA_Abort_IT+0x290>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a5a      	ldr	r2, [pc, #360]	@ (8002544 <HAL_DMA_Abort_IT+0x3d8>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d00e      	beq.n	80023fc <HAL_DMA_Abort_IT+0x290>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a59      	ldr	r2, [pc, #356]	@ (8002548 <HAL_DMA_Abort_IT+0x3dc>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d009      	beq.n	80023fc <HAL_DMA_Abort_IT+0x290>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a57      	ldr	r2, [pc, #348]	@ (800254c <HAL_DMA_Abort_IT+0x3e0>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d004      	beq.n	80023fc <HAL_DMA_Abort_IT+0x290>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a56      	ldr	r2, [pc, #344]	@ (8002550 <HAL_DMA_Abort_IT+0x3e4>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d108      	bne.n	800240e <HAL_DMA_Abort_IT+0x2a2>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f022 0201 	bic.w	r2, r2, #1
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	e007      	b.n	800241e <HAL_DMA_Abort_IT+0x2b2>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f022 0201 	bic.w	r2, r2, #1
 800241c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a3c      	ldr	r2, [pc, #240]	@ (8002514 <HAL_DMA_Abort_IT+0x3a8>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d072      	beq.n	800250e <HAL_DMA_Abort_IT+0x3a2>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a3a      	ldr	r2, [pc, #232]	@ (8002518 <HAL_DMA_Abort_IT+0x3ac>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d06d      	beq.n	800250e <HAL_DMA_Abort_IT+0x3a2>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a39      	ldr	r2, [pc, #228]	@ (800251c <HAL_DMA_Abort_IT+0x3b0>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d068      	beq.n	800250e <HAL_DMA_Abort_IT+0x3a2>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a37      	ldr	r2, [pc, #220]	@ (8002520 <HAL_DMA_Abort_IT+0x3b4>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d063      	beq.n	800250e <HAL_DMA_Abort_IT+0x3a2>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a36      	ldr	r2, [pc, #216]	@ (8002524 <HAL_DMA_Abort_IT+0x3b8>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d05e      	beq.n	800250e <HAL_DMA_Abort_IT+0x3a2>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a34      	ldr	r2, [pc, #208]	@ (8002528 <HAL_DMA_Abort_IT+0x3bc>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d059      	beq.n	800250e <HAL_DMA_Abort_IT+0x3a2>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a33      	ldr	r2, [pc, #204]	@ (800252c <HAL_DMA_Abort_IT+0x3c0>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d054      	beq.n	800250e <HAL_DMA_Abort_IT+0x3a2>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a31      	ldr	r2, [pc, #196]	@ (8002530 <HAL_DMA_Abort_IT+0x3c4>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d04f      	beq.n	800250e <HAL_DMA_Abort_IT+0x3a2>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a30      	ldr	r2, [pc, #192]	@ (8002534 <HAL_DMA_Abort_IT+0x3c8>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d04a      	beq.n	800250e <HAL_DMA_Abort_IT+0x3a2>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a2e      	ldr	r2, [pc, #184]	@ (8002538 <HAL_DMA_Abort_IT+0x3cc>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d045      	beq.n	800250e <HAL_DMA_Abort_IT+0x3a2>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a2d      	ldr	r2, [pc, #180]	@ (800253c <HAL_DMA_Abort_IT+0x3d0>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d040      	beq.n	800250e <HAL_DMA_Abort_IT+0x3a2>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a2b      	ldr	r2, [pc, #172]	@ (8002540 <HAL_DMA_Abort_IT+0x3d4>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d03b      	beq.n	800250e <HAL_DMA_Abort_IT+0x3a2>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a2a      	ldr	r2, [pc, #168]	@ (8002544 <HAL_DMA_Abort_IT+0x3d8>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d036      	beq.n	800250e <HAL_DMA_Abort_IT+0x3a2>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a28      	ldr	r2, [pc, #160]	@ (8002548 <HAL_DMA_Abort_IT+0x3dc>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d031      	beq.n	800250e <HAL_DMA_Abort_IT+0x3a2>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a27      	ldr	r2, [pc, #156]	@ (800254c <HAL_DMA_Abort_IT+0x3e0>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d02c      	beq.n	800250e <HAL_DMA_Abort_IT+0x3a2>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a25      	ldr	r2, [pc, #148]	@ (8002550 <HAL_DMA_Abort_IT+0x3e4>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d027      	beq.n	800250e <HAL_DMA_Abort_IT+0x3a2>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a24      	ldr	r2, [pc, #144]	@ (8002554 <HAL_DMA_Abort_IT+0x3e8>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d022      	beq.n	800250e <HAL_DMA_Abort_IT+0x3a2>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a22      	ldr	r2, [pc, #136]	@ (8002558 <HAL_DMA_Abort_IT+0x3ec>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d01d      	beq.n	800250e <HAL_DMA_Abort_IT+0x3a2>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a21      	ldr	r2, [pc, #132]	@ (800255c <HAL_DMA_Abort_IT+0x3f0>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d018      	beq.n	800250e <HAL_DMA_Abort_IT+0x3a2>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a1f      	ldr	r2, [pc, #124]	@ (8002560 <HAL_DMA_Abort_IT+0x3f4>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d013      	beq.n	800250e <HAL_DMA_Abort_IT+0x3a2>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a1e      	ldr	r2, [pc, #120]	@ (8002564 <HAL_DMA_Abort_IT+0x3f8>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d00e      	beq.n	800250e <HAL_DMA_Abort_IT+0x3a2>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a1c      	ldr	r2, [pc, #112]	@ (8002568 <HAL_DMA_Abort_IT+0x3fc>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d009      	beq.n	800250e <HAL_DMA_Abort_IT+0x3a2>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a1b      	ldr	r2, [pc, #108]	@ (800256c <HAL_DMA_Abort_IT+0x400>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d004      	beq.n	800250e <HAL_DMA_Abort_IT+0x3a2>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a19      	ldr	r2, [pc, #100]	@ (8002570 <HAL_DMA_Abort_IT+0x404>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d132      	bne.n	8002574 <HAL_DMA_Abort_IT+0x408>
 800250e:	2301      	movs	r3, #1
 8002510:	e031      	b.n	8002576 <HAL_DMA_Abort_IT+0x40a>
 8002512:	bf00      	nop
 8002514:	40020010 	.word	0x40020010
 8002518:	40020028 	.word	0x40020028
 800251c:	40020040 	.word	0x40020040
 8002520:	40020058 	.word	0x40020058
 8002524:	40020070 	.word	0x40020070
 8002528:	40020088 	.word	0x40020088
 800252c:	400200a0 	.word	0x400200a0
 8002530:	400200b8 	.word	0x400200b8
 8002534:	40020410 	.word	0x40020410
 8002538:	40020428 	.word	0x40020428
 800253c:	40020440 	.word	0x40020440
 8002540:	40020458 	.word	0x40020458
 8002544:	40020470 	.word	0x40020470
 8002548:	40020488 	.word	0x40020488
 800254c:	400204a0 	.word	0x400204a0
 8002550:	400204b8 	.word	0x400204b8
 8002554:	58025408 	.word	0x58025408
 8002558:	5802541c 	.word	0x5802541c
 800255c:	58025430 	.word	0x58025430
 8002560:	58025444 	.word	0x58025444
 8002564:	58025458 	.word	0x58025458
 8002568:	5802546c 	.word	0x5802546c
 800256c:	58025480 	.word	0x58025480
 8002570:	58025494 	.word	0x58025494
 8002574:	2300      	movs	r3, #0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d028      	beq.n	80025cc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002584:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002588:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800258e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002594:	f003 031f 	and.w	r3, r3, #31
 8002598:	2201      	movs	r2, #1
 800259a:	409a      	lsls	r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80025a8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00c      	beq.n	80025cc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80025c0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80025ca:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d003      	beq.n	80025ec <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop

080025f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b089      	sub	sp, #36	@ 0x24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002602:	2300      	movs	r3, #0
 8002604:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002606:	4b89      	ldr	r3, [pc, #548]	@ (800282c <HAL_GPIO_Init+0x234>)
 8002608:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800260a:	e194      	b.n	8002936 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	2101      	movs	r1, #1
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	fa01 f303 	lsl.w	r3, r1, r3
 8002618:	4013      	ands	r3, r2
 800261a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	2b00      	cmp	r3, #0
 8002620:	f000 8186 	beq.w	8002930 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f003 0303 	and.w	r3, r3, #3
 800262c:	2b01      	cmp	r3, #1
 800262e:	d005      	beq.n	800263c <HAL_GPIO_Init+0x44>
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f003 0303 	and.w	r3, r3, #3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d130      	bne.n	800269e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	2203      	movs	r2, #3
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	43db      	mvns	r3, r3
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	4013      	ands	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	68da      	ldr	r2, [r3, #12]
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	4313      	orrs	r3, r2
 8002664:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002672:	2201      	movs	r2, #1
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	fa02 f303 	lsl.w	r3, r2, r3
 800267a:	43db      	mvns	r3, r3
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	4013      	ands	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	091b      	lsrs	r3, r3, #4
 8002688:	f003 0201 	and.w	r2, r3, #1
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	fa02 f303 	lsl.w	r3, r2, r3
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4313      	orrs	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f003 0303 	and.w	r3, r3, #3
 80026a6:	2b03      	cmp	r3, #3
 80026a8:	d017      	beq.n	80026da <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	2203      	movs	r2, #3
 80026b6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ba:	43db      	mvns	r3, r3
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	4013      	ands	r3, r2
 80026c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	689a      	ldr	r2, [r3, #8]
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	fa02 f303 	lsl.w	r3, r2, r3
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f003 0303 	and.w	r3, r3, #3
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d123      	bne.n	800272e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	08da      	lsrs	r2, r3, #3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	3208      	adds	r2, #8
 80026ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	f003 0307 	and.w	r3, r3, #7
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	220f      	movs	r2, #15
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	43db      	mvns	r3, r3
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	4013      	ands	r3, r2
 8002708:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	691a      	ldr	r2, [r3, #16]
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	f003 0307 	and.w	r3, r3, #7
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	fa02 f303 	lsl.w	r3, r2, r3
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	4313      	orrs	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	08da      	lsrs	r2, r3, #3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	3208      	adds	r2, #8
 8002728:	69b9      	ldr	r1, [r7, #24]
 800272a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	2203      	movs	r2, #3
 800273a:	fa02 f303 	lsl.w	r3, r2, r3
 800273e:	43db      	mvns	r3, r3
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	4013      	ands	r3, r2
 8002744:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f003 0203 	and.w	r2, r3, #3
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	fa02 f303 	lsl.w	r3, r2, r3
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	4313      	orrs	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800276a:	2b00      	cmp	r3, #0
 800276c:	f000 80e0 	beq.w	8002930 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002770:	4b2f      	ldr	r3, [pc, #188]	@ (8002830 <HAL_GPIO_Init+0x238>)
 8002772:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002776:	4a2e      	ldr	r2, [pc, #184]	@ (8002830 <HAL_GPIO_Init+0x238>)
 8002778:	f043 0302 	orr.w	r3, r3, #2
 800277c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002780:	4b2b      	ldr	r3, [pc, #172]	@ (8002830 <HAL_GPIO_Init+0x238>)
 8002782:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	60fb      	str	r3, [r7, #12]
 800278c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800278e:	4a29      	ldr	r2, [pc, #164]	@ (8002834 <HAL_GPIO_Init+0x23c>)
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	089b      	lsrs	r3, r3, #2
 8002794:	3302      	adds	r3, #2
 8002796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800279a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	f003 0303 	and.w	r3, r3, #3
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	220f      	movs	r2, #15
 80027a6:	fa02 f303 	lsl.w	r3, r2, r3
 80027aa:	43db      	mvns	r3, r3
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	4013      	ands	r3, r2
 80027b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a20      	ldr	r2, [pc, #128]	@ (8002838 <HAL_GPIO_Init+0x240>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d052      	beq.n	8002860 <HAL_GPIO_Init+0x268>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a1f      	ldr	r2, [pc, #124]	@ (800283c <HAL_GPIO_Init+0x244>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d031      	beq.n	8002826 <HAL_GPIO_Init+0x22e>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a1e      	ldr	r2, [pc, #120]	@ (8002840 <HAL_GPIO_Init+0x248>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d02b      	beq.n	8002822 <HAL_GPIO_Init+0x22a>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a1d      	ldr	r2, [pc, #116]	@ (8002844 <HAL_GPIO_Init+0x24c>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d025      	beq.n	800281e <HAL_GPIO_Init+0x226>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a1c      	ldr	r2, [pc, #112]	@ (8002848 <HAL_GPIO_Init+0x250>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d01f      	beq.n	800281a <HAL_GPIO_Init+0x222>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a1b      	ldr	r2, [pc, #108]	@ (800284c <HAL_GPIO_Init+0x254>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d019      	beq.n	8002816 <HAL_GPIO_Init+0x21e>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a1a      	ldr	r2, [pc, #104]	@ (8002850 <HAL_GPIO_Init+0x258>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d013      	beq.n	8002812 <HAL_GPIO_Init+0x21a>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a19      	ldr	r2, [pc, #100]	@ (8002854 <HAL_GPIO_Init+0x25c>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d00d      	beq.n	800280e <HAL_GPIO_Init+0x216>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a18      	ldr	r2, [pc, #96]	@ (8002858 <HAL_GPIO_Init+0x260>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d007      	beq.n	800280a <HAL_GPIO_Init+0x212>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a17      	ldr	r2, [pc, #92]	@ (800285c <HAL_GPIO_Init+0x264>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d101      	bne.n	8002806 <HAL_GPIO_Init+0x20e>
 8002802:	2309      	movs	r3, #9
 8002804:	e02d      	b.n	8002862 <HAL_GPIO_Init+0x26a>
 8002806:	230a      	movs	r3, #10
 8002808:	e02b      	b.n	8002862 <HAL_GPIO_Init+0x26a>
 800280a:	2308      	movs	r3, #8
 800280c:	e029      	b.n	8002862 <HAL_GPIO_Init+0x26a>
 800280e:	2307      	movs	r3, #7
 8002810:	e027      	b.n	8002862 <HAL_GPIO_Init+0x26a>
 8002812:	2306      	movs	r3, #6
 8002814:	e025      	b.n	8002862 <HAL_GPIO_Init+0x26a>
 8002816:	2305      	movs	r3, #5
 8002818:	e023      	b.n	8002862 <HAL_GPIO_Init+0x26a>
 800281a:	2304      	movs	r3, #4
 800281c:	e021      	b.n	8002862 <HAL_GPIO_Init+0x26a>
 800281e:	2303      	movs	r3, #3
 8002820:	e01f      	b.n	8002862 <HAL_GPIO_Init+0x26a>
 8002822:	2302      	movs	r3, #2
 8002824:	e01d      	b.n	8002862 <HAL_GPIO_Init+0x26a>
 8002826:	2301      	movs	r3, #1
 8002828:	e01b      	b.n	8002862 <HAL_GPIO_Init+0x26a>
 800282a:	bf00      	nop
 800282c:	58000080 	.word	0x58000080
 8002830:	58024400 	.word	0x58024400
 8002834:	58000400 	.word	0x58000400
 8002838:	58020000 	.word	0x58020000
 800283c:	58020400 	.word	0x58020400
 8002840:	58020800 	.word	0x58020800
 8002844:	58020c00 	.word	0x58020c00
 8002848:	58021000 	.word	0x58021000
 800284c:	58021400 	.word	0x58021400
 8002850:	58021800 	.word	0x58021800
 8002854:	58021c00 	.word	0x58021c00
 8002858:	58022000 	.word	0x58022000
 800285c:	58022400 	.word	0x58022400
 8002860:	2300      	movs	r3, #0
 8002862:	69fa      	ldr	r2, [r7, #28]
 8002864:	f002 0203 	and.w	r2, r2, #3
 8002868:	0092      	lsls	r2, r2, #2
 800286a:	4093      	lsls	r3, r2
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	4313      	orrs	r3, r2
 8002870:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002872:	4938      	ldr	r1, [pc, #224]	@ (8002954 <HAL_GPIO_Init+0x35c>)
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	089b      	lsrs	r3, r3, #2
 8002878:	3302      	adds	r3, #2
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002880:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	43db      	mvns	r3, r3
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	4013      	ands	r3, r2
 8002890:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d003      	beq.n	80028a6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80028a6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80028ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	43db      	mvns	r3, r3
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	4013      	ands	r3, r2
 80028be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d003      	beq.n	80028d4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80028d4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	43db      	mvns	r3, r3
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	4013      	ands	r3, r2
 80028ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d003      	beq.n	8002900 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	69ba      	ldr	r2, [r7, #24]
 8002904:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	43db      	mvns	r3, r3
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	4013      	ands	r3, r2
 8002914:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d003      	beq.n	800292a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	4313      	orrs	r3, r2
 8002928:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	3301      	adds	r3, #1
 8002934:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	fa22 f303 	lsr.w	r3, r2, r3
 8002940:	2b00      	cmp	r3, #0
 8002942:	f47f ae63 	bne.w	800260c <HAL_GPIO_Init+0x14>
  }
}
 8002946:	bf00      	nop
 8002948:	bf00      	nop
 800294a:	3724      	adds	r7, #36	@ 0x24
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr
 8002954:	58000400 	.word	0x58000400

08002958 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	460b      	mov	r3, r1
 8002962:	807b      	strh	r3, [r7, #2]
 8002964:	4613      	mov	r3, r2
 8002966:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002968:	787b      	ldrb	r3, [r7, #1]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d003      	beq.n	8002976 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800296e:	887a      	ldrh	r2, [r7, #2]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002974:	e003      	b.n	800297e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002976:	887b      	ldrh	r3, [r7, #2]
 8002978:	041a      	lsls	r2, r3, #16
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	619a      	str	r2, [r3, #24]
}
 800297e:	bf00      	nop
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
	...

0800298c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002994:	4b19      	ldr	r3, [pc, #100]	@ (80029fc <HAL_PWREx_ConfigSupply+0x70>)
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	f003 0304 	and.w	r3, r3, #4
 800299c:	2b04      	cmp	r3, #4
 800299e:	d00a      	beq.n	80029b6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80029a0:	4b16      	ldr	r3, [pc, #88]	@ (80029fc <HAL_PWREx_ConfigSupply+0x70>)
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	f003 0307 	and.w	r3, r3, #7
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d001      	beq.n	80029b2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e01f      	b.n	80029f2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80029b2:	2300      	movs	r3, #0
 80029b4:	e01d      	b.n	80029f2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80029b6:	4b11      	ldr	r3, [pc, #68]	@ (80029fc <HAL_PWREx_ConfigSupply+0x70>)
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	f023 0207 	bic.w	r2, r3, #7
 80029be:	490f      	ldr	r1, [pc, #60]	@ (80029fc <HAL_PWREx_ConfigSupply+0x70>)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80029c6:	f7fe feeb 	bl	80017a0 <HAL_GetTick>
 80029ca:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80029cc:	e009      	b.n	80029e2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80029ce:	f7fe fee7 	bl	80017a0 <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80029dc:	d901      	bls.n	80029e2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e007      	b.n	80029f2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80029e2:	4b06      	ldr	r3, [pc, #24]	@ (80029fc <HAL_PWREx_ConfigSupply+0x70>)
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029ee:	d1ee      	bne.n	80029ce <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3710      	adds	r7, #16
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	58024800 	.word	0x58024800

08002a00 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b08c      	sub	sp, #48	@ 0x30
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d102      	bne.n	8002a14 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	f000 bc48 	b.w	80032a4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0301 	and.w	r3, r3, #1
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f000 8088 	beq.w	8002b32 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a22:	4b99      	ldr	r3, [pc, #612]	@ (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a2c:	4b96      	ldr	r3, [pc, #600]	@ (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a30:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002a32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a34:	2b10      	cmp	r3, #16
 8002a36:	d007      	beq.n	8002a48 <HAL_RCC_OscConfig+0x48>
 8002a38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a3a:	2b18      	cmp	r3, #24
 8002a3c:	d111      	bne.n	8002a62 <HAL_RCC_OscConfig+0x62>
 8002a3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a40:	f003 0303 	and.w	r3, r3, #3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d10c      	bne.n	8002a62 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a48:	4b8f      	ldr	r3, [pc, #572]	@ (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d06d      	beq.n	8002b30 <HAL_RCC_OscConfig+0x130>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d169      	bne.n	8002b30 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	f000 bc21 	b.w	80032a4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a6a:	d106      	bne.n	8002a7a <HAL_RCC_OscConfig+0x7a>
 8002a6c:	4b86      	ldr	r3, [pc, #536]	@ (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a85      	ldr	r2, [pc, #532]	@ (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002a72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a76:	6013      	str	r3, [r2, #0]
 8002a78:	e02e      	b.n	8002ad8 <HAL_RCC_OscConfig+0xd8>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d10c      	bne.n	8002a9c <HAL_RCC_OscConfig+0x9c>
 8002a82:	4b81      	ldr	r3, [pc, #516]	@ (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a80      	ldr	r2, [pc, #512]	@ (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002a88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a8c:	6013      	str	r3, [r2, #0]
 8002a8e:	4b7e      	ldr	r3, [pc, #504]	@ (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a7d      	ldr	r2, [pc, #500]	@ (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002a94:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a98:	6013      	str	r3, [r2, #0]
 8002a9a:	e01d      	b.n	8002ad8 <HAL_RCC_OscConfig+0xd8>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002aa4:	d10c      	bne.n	8002ac0 <HAL_RCC_OscConfig+0xc0>
 8002aa6:	4b78      	ldr	r3, [pc, #480]	@ (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a77      	ldr	r2, [pc, #476]	@ (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002aac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ab0:	6013      	str	r3, [r2, #0]
 8002ab2:	4b75      	ldr	r3, [pc, #468]	@ (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a74      	ldr	r2, [pc, #464]	@ (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002ab8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002abc:	6013      	str	r3, [r2, #0]
 8002abe:	e00b      	b.n	8002ad8 <HAL_RCC_OscConfig+0xd8>
 8002ac0:	4b71      	ldr	r3, [pc, #452]	@ (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a70      	ldr	r2, [pc, #448]	@ (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002ac6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002aca:	6013      	str	r3, [r2, #0]
 8002acc:	4b6e      	ldr	r3, [pc, #440]	@ (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a6d      	ldr	r2, [pc, #436]	@ (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002ad2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ad6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d013      	beq.n	8002b08 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae0:	f7fe fe5e 	bl	80017a0 <HAL_GetTick>
 8002ae4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ae6:	e008      	b.n	8002afa <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ae8:	f7fe fe5a 	bl	80017a0 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b64      	cmp	r3, #100	@ 0x64
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e3d4      	b.n	80032a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002afa:	4b63      	ldr	r3, [pc, #396]	@ (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d0f0      	beq.n	8002ae8 <HAL_RCC_OscConfig+0xe8>
 8002b06:	e014      	b.n	8002b32 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b08:	f7fe fe4a 	bl	80017a0 <HAL_GetTick>
 8002b0c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b10:	f7fe fe46 	bl	80017a0 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b64      	cmp	r3, #100	@ 0x64
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e3c0      	b.n	80032a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002b22:	4b59      	ldr	r3, [pc, #356]	@ (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1f0      	bne.n	8002b10 <HAL_RCC_OscConfig+0x110>
 8002b2e:	e000      	b.n	8002b32 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	f000 80ca 	beq.w	8002cd4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b40:	4b51      	ldr	r3, [pc, #324]	@ (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002b48:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002b4a:	4b4f      	ldr	r3, [pc, #316]	@ (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b4e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002b50:	6a3b      	ldr	r3, [r7, #32]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d007      	beq.n	8002b66 <HAL_RCC_OscConfig+0x166>
 8002b56:	6a3b      	ldr	r3, [r7, #32]
 8002b58:	2b18      	cmp	r3, #24
 8002b5a:	d156      	bne.n	8002c0a <HAL_RCC_OscConfig+0x20a>
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	f003 0303 	and.w	r3, r3, #3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d151      	bne.n	8002c0a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b66:	4b48      	ldr	r3, [pc, #288]	@ (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0304 	and.w	r3, r3, #4
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d005      	beq.n	8002b7e <HAL_RCC_OscConfig+0x17e>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e392      	b.n	80032a4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002b7e:	4b42      	ldr	r3, [pc, #264]	@ (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f023 0219 	bic.w	r2, r3, #25
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	493f      	ldr	r1, [pc, #252]	@ (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b90:	f7fe fe06 	bl	80017a0 <HAL_GetTick>
 8002b94:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b96:	e008      	b.n	8002baa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b98:	f7fe fe02 	bl	80017a0 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e37c      	b.n	80032a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002baa:	4b37      	ldr	r3, [pc, #220]	@ (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0304 	and.w	r3, r3, #4
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d0f0      	beq.n	8002b98 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bb6:	f7fe fe23 	bl	8001800 <HAL_GetREVID>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d817      	bhi.n	8002bf4 <HAL_RCC_OscConfig+0x1f4>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	691b      	ldr	r3, [r3, #16]
 8002bc8:	2b40      	cmp	r3, #64	@ 0x40
 8002bca:	d108      	bne.n	8002bde <HAL_RCC_OscConfig+0x1de>
 8002bcc:	4b2e      	ldr	r3, [pc, #184]	@ (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002bd4:	4a2c      	ldr	r2, [pc, #176]	@ (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002bd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bda:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bdc:	e07a      	b.n	8002cd4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bde:	4b2a      	ldr	r3, [pc, #168]	@ (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	031b      	lsls	r3, r3, #12
 8002bec:	4926      	ldr	r1, [pc, #152]	@ (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bf2:	e06f      	b.n	8002cd4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bf4:	4b24      	ldr	r3, [pc, #144]	@ (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	061b      	lsls	r3, r3, #24
 8002c02:	4921      	ldr	r1, [pc, #132]	@ (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c08:	e064      	b.n	8002cd4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d047      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002c12:	4b1d      	ldr	r3, [pc, #116]	@ (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f023 0219 	bic.w	r2, r3, #25
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	491a      	ldr	r1, [pc, #104]	@ (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c24:	f7fe fdbc 	bl	80017a0 <HAL_GetTick>
 8002c28:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c2a:	e008      	b.n	8002c3e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c2c:	f7fe fdb8 	bl	80017a0 <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e332      	b.n	80032a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c3e:	4b12      	ldr	r3, [pc, #72]	@ (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0304 	and.w	r3, r3, #4
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d0f0      	beq.n	8002c2c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c4a:	f7fe fdd9 	bl	8001800 <HAL_GetREVID>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d819      	bhi.n	8002c8c <HAL_RCC_OscConfig+0x28c>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	691b      	ldr	r3, [r3, #16]
 8002c5c:	2b40      	cmp	r3, #64	@ 0x40
 8002c5e:	d108      	bne.n	8002c72 <HAL_RCC_OscConfig+0x272>
 8002c60:	4b09      	ldr	r3, [pc, #36]	@ (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002c68:	4a07      	ldr	r2, [pc, #28]	@ (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002c6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c6e:	6053      	str	r3, [r2, #4]
 8002c70:	e030      	b.n	8002cd4 <HAL_RCC_OscConfig+0x2d4>
 8002c72:	4b05      	ldr	r3, [pc, #20]	@ (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	031b      	lsls	r3, r3, #12
 8002c80:	4901      	ldr	r1, [pc, #4]	@ (8002c88 <HAL_RCC_OscConfig+0x288>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	604b      	str	r3, [r1, #4]
 8002c86:	e025      	b.n	8002cd4 <HAL_RCC_OscConfig+0x2d4>
 8002c88:	58024400 	.word	0x58024400
 8002c8c:	4b9a      	ldr	r3, [pc, #616]	@ (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	691b      	ldr	r3, [r3, #16]
 8002c98:	061b      	lsls	r3, r3, #24
 8002c9a:	4997      	ldr	r1, [pc, #604]	@ (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	604b      	str	r3, [r1, #4]
 8002ca0:	e018      	b.n	8002cd4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ca2:	4b95      	ldr	r3, [pc, #596]	@ (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a94      	ldr	r2, [pc, #592]	@ (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002ca8:	f023 0301 	bic.w	r3, r3, #1
 8002cac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cae:	f7fe fd77 	bl	80017a0 <HAL_GetTick>
 8002cb2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002cb4:	e008      	b.n	8002cc8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cb6:	f7fe fd73 	bl	80017a0 <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d901      	bls.n	8002cc8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e2ed      	b.n	80032a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002cc8:	4b8b      	ldr	r3, [pc, #556]	@ (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0304 	and.w	r3, r3, #4
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d1f0      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0310 	and.w	r3, r3, #16
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	f000 80a9 	beq.w	8002e34 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ce2:	4b85      	ldr	r3, [pc, #532]	@ (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002cea:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002cec:	4b82      	ldr	r3, [pc, #520]	@ (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cf0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	2b08      	cmp	r3, #8
 8002cf6:	d007      	beq.n	8002d08 <HAL_RCC_OscConfig+0x308>
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	2b18      	cmp	r3, #24
 8002cfc:	d13a      	bne.n	8002d74 <HAL_RCC_OscConfig+0x374>
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	f003 0303 	and.w	r3, r3, #3
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d135      	bne.n	8002d74 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002d08:	4b7b      	ldr	r3, [pc, #492]	@ (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d005      	beq.n	8002d20 <HAL_RCC_OscConfig+0x320>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	69db      	ldr	r3, [r3, #28]
 8002d18:	2b80      	cmp	r3, #128	@ 0x80
 8002d1a:	d001      	beq.n	8002d20 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e2c1      	b.n	80032a4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002d20:	f7fe fd6e 	bl	8001800 <HAL_GetREVID>
 8002d24:	4603      	mov	r3, r0
 8002d26:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d817      	bhi.n	8002d5e <HAL_RCC_OscConfig+0x35e>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a1b      	ldr	r3, [r3, #32]
 8002d32:	2b20      	cmp	r3, #32
 8002d34:	d108      	bne.n	8002d48 <HAL_RCC_OscConfig+0x348>
 8002d36:	4b70      	ldr	r3, [pc, #448]	@ (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002d3e:	4a6e      	ldr	r2, [pc, #440]	@ (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002d40:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002d44:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002d46:	e075      	b.n	8002e34 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002d48:	4b6b      	ldr	r3, [pc, #428]	@ (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	069b      	lsls	r3, r3, #26
 8002d56:	4968      	ldr	r1, [pc, #416]	@ (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002d5c:	e06a      	b.n	8002e34 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002d5e:	4b66      	ldr	r3, [pc, #408]	@ (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a1b      	ldr	r3, [r3, #32]
 8002d6a:	061b      	lsls	r3, r3, #24
 8002d6c:	4962      	ldr	r1, [pc, #392]	@ (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002d72:	e05f      	b.n	8002e34 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	69db      	ldr	r3, [r3, #28]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d042      	beq.n	8002e02 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002d7c:	4b5e      	ldr	r3, [pc, #376]	@ (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a5d      	ldr	r2, [pc, #372]	@ (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002d82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d88:	f7fe fd0a 	bl	80017a0 <HAL_GetTick>
 8002d8c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002d90:	f7fe fd06 	bl	80017a0 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e280      	b.n	80032a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002da2:	4b55      	ldr	r3, [pc, #340]	@ (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d0f0      	beq.n	8002d90 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002dae:	f7fe fd27 	bl	8001800 <HAL_GetREVID>
 8002db2:	4603      	mov	r3, r0
 8002db4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d817      	bhi.n	8002dec <HAL_RCC_OscConfig+0x3ec>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a1b      	ldr	r3, [r3, #32]
 8002dc0:	2b20      	cmp	r3, #32
 8002dc2:	d108      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x3d6>
 8002dc4:	4b4c      	ldr	r3, [pc, #304]	@ (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002dcc:	4a4a      	ldr	r2, [pc, #296]	@ (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002dce:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002dd2:	6053      	str	r3, [r2, #4]
 8002dd4:	e02e      	b.n	8002e34 <HAL_RCC_OscConfig+0x434>
 8002dd6:	4b48      	ldr	r3, [pc, #288]	@ (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a1b      	ldr	r3, [r3, #32]
 8002de2:	069b      	lsls	r3, r3, #26
 8002de4:	4944      	ldr	r1, [pc, #272]	@ (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	604b      	str	r3, [r1, #4]
 8002dea:	e023      	b.n	8002e34 <HAL_RCC_OscConfig+0x434>
 8002dec:	4b42      	ldr	r3, [pc, #264]	@ (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a1b      	ldr	r3, [r3, #32]
 8002df8:	061b      	lsls	r3, r3, #24
 8002dfa:	493f      	ldr	r1, [pc, #252]	@ (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	60cb      	str	r3, [r1, #12]
 8002e00:	e018      	b.n	8002e34 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002e02:	4b3d      	ldr	r3, [pc, #244]	@ (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a3c      	ldr	r2, [pc, #240]	@ (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002e08:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e0e:	f7fe fcc7 	bl	80017a0 <HAL_GetTick>
 8002e12:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002e14:	e008      	b.n	8002e28 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002e16:	f7fe fcc3 	bl	80017a0 <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d901      	bls.n	8002e28 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e23d      	b.n	80032a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002e28:	4b33      	ldr	r3, [pc, #204]	@ (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d1f0      	bne.n	8002e16 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0308 	and.w	r3, r3, #8
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d036      	beq.n	8002eae <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	695b      	ldr	r3, [r3, #20]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d019      	beq.n	8002e7c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e48:	4b2b      	ldr	r3, [pc, #172]	@ (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002e4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e4c:	4a2a      	ldr	r2, [pc, #168]	@ (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002e4e:	f043 0301 	orr.w	r3, r3, #1
 8002e52:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e54:	f7fe fca4 	bl	80017a0 <HAL_GetTick>
 8002e58:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e5a:	e008      	b.n	8002e6e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e5c:	f7fe fca0 	bl	80017a0 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e21a      	b.n	80032a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e6e:	4b22      	ldr	r3, [pc, #136]	@ (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002e70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d0f0      	beq.n	8002e5c <HAL_RCC_OscConfig+0x45c>
 8002e7a:	e018      	b.n	8002eae <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e7c:	4b1e      	ldr	r3, [pc, #120]	@ (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002e7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e80:	4a1d      	ldr	r2, [pc, #116]	@ (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002e82:	f023 0301 	bic.w	r3, r3, #1
 8002e86:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e88:	f7fe fc8a 	bl	80017a0 <HAL_GetTick>
 8002e8c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002e8e:	e008      	b.n	8002ea2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e90:	f7fe fc86 	bl	80017a0 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e200      	b.n	80032a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ea2:	4b15      	ldr	r3, [pc, #84]	@ (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002ea4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d1f0      	bne.n	8002e90 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0320 	and.w	r3, r3, #32
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d039      	beq.n	8002f2e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d01c      	beq.n	8002efc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a0c      	ldr	r2, [pc, #48]	@ (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002ec8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002ecc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002ece:	f7fe fc67 	bl	80017a0 <HAL_GetTick>
 8002ed2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002ed4:	e008      	b.n	8002ee8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ed6:	f7fe fc63 	bl	80017a0 <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d901      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e1dd      	b.n	80032a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002ee8:	4b03      	ldr	r3, [pc, #12]	@ (8002ef8 <HAL_RCC_OscConfig+0x4f8>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d0f0      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x4d6>
 8002ef4:	e01b      	b.n	8002f2e <HAL_RCC_OscConfig+0x52e>
 8002ef6:	bf00      	nop
 8002ef8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002efc:	4b9b      	ldr	r3, [pc, #620]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a9a      	ldr	r2, [pc, #616]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 8002f02:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002f06:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002f08:	f7fe fc4a 	bl	80017a0 <HAL_GetTick>
 8002f0c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002f0e:	e008      	b.n	8002f22 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f10:	f7fe fc46 	bl	80017a0 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e1c0      	b.n	80032a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002f22:	4b92      	ldr	r3, [pc, #584]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1f0      	bne.n	8002f10 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0304 	and.w	r3, r3, #4
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	f000 8081 	beq.w	800303e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002f3c:	4b8c      	ldr	r3, [pc, #560]	@ (8003170 <HAL_RCC_OscConfig+0x770>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a8b      	ldr	r2, [pc, #556]	@ (8003170 <HAL_RCC_OscConfig+0x770>)
 8002f42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f46:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f48:	f7fe fc2a 	bl	80017a0 <HAL_GetTick>
 8002f4c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f4e:	e008      	b.n	8002f62 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f50:	f7fe fc26 	bl	80017a0 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b64      	cmp	r3, #100	@ 0x64
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e1a0      	b.n	80032a4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f62:	4b83      	ldr	r3, [pc, #524]	@ (8003170 <HAL_RCC_OscConfig+0x770>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d0f0      	beq.n	8002f50 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d106      	bne.n	8002f84 <HAL_RCC_OscConfig+0x584>
 8002f76:	4b7d      	ldr	r3, [pc, #500]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 8002f78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f7a:	4a7c      	ldr	r2, [pc, #496]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 8002f7c:	f043 0301 	orr.w	r3, r3, #1
 8002f80:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f82:	e02d      	b.n	8002fe0 <HAL_RCC_OscConfig+0x5e0>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d10c      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x5a6>
 8002f8c:	4b77      	ldr	r3, [pc, #476]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 8002f8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f90:	4a76      	ldr	r2, [pc, #472]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 8002f92:	f023 0301 	bic.w	r3, r3, #1
 8002f96:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f98:	4b74      	ldr	r3, [pc, #464]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 8002f9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f9c:	4a73      	ldr	r2, [pc, #460]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 8002f9e:	f023 0304 	bic.w	r3, r3, #4
 8002fa2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fa4:	e01c      	b.n	8002fe0 <HAL_RCC_OscConfig+0x5e0>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	2b05      	cmp	r3, #5
 8002fac:	d10c      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x5c8>
 8002fae:	4b6f      	ldr	r3, [pc, #444]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 8002fb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fb2:	4a6e      	ldr	r2, [pc, #440]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 8002fb4:	f043 0304 	orr.w	r3, r3, #4
 8002fb8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fba:	4b6c      	ldr	r3, [pc, #432]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 8002fbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fbe:	4a6b      	ldr	r2, [pc, #428]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 8002fc0:	f043 0301 	orr.w	r3, r3, #1
 8002fc4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fc6:	e00b      	b.n	8002fe0 <HAL_RCC_OscConfig+0x5e0>
 8002fc8:	4b68      	ldr	r3, [pc, #416]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 8002fca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fcc:	4a67      	ldr	r2, [pc, #412]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 8002fce:	f023 0301 	bic.w	r3, r3, #1
 8002fd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fd4:	4b65      	ldr	r3, [pc, #404]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 8002fd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fd8:	4a64      	ldr	r2, [pc, #400]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 8002fda:	f023 0304 	bic.w	r3, r3, #4
 8002fde:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d015      	beq.n	8003014 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fe8:	f7fe fbda 	bl	80017a0 <HAL_GetTick>
 8002fec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002fee:	e00a      	b.n	8003006 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ff0:	f7fe fbd6 	bl	80017a0 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e14e      	b.n	80032a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003006:	4b59      	ldr	r3, [pc, #356]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 8003008:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d0ee      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x5f0>
 8003012:	e014      	b.n	800303e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003014:	f7fe fbc4 	bl	80017a0 <HAL_GetTick>
 8003018:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800301a:	e00a      	b.n	8003032 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800301c:	f7fe fbc0 	bl	80017a0 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	f241 3288 	movw	r2, #5000	@ 0x1388
 800302a:	4293      	cmp	r3, r2
 800302c:	d901      	bls.n	8003032 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e138      	b.n	80032a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003032:	4b4e      	ldr	r3, [pc, #312]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 8003034:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d1ee      	bne.n	800301c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003042:	2b00      	cmp	r3, #0
 8003044:	f000 812d 	beq.w	80032a2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003048:	4b48      	ldr	r3, [pc, #288]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 800304a:	691b      	ldr	r3, [r3, #16]
 800304c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003050:	2b18      	cmp	r3, #24
 8003052:	f000 80bd 	beq.w	80031d0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800305a:	2b02      	cmp	r3, #2
 800305c:	f040 809e 	bne.w	800319c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003060:	4b42      	ldr	r3, [pc, #264]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a41      	ldr	r2, [pc, #260]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 8003066:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800306a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800306c:	f7fe fb98 	bl	80017a0 <HAL_GetTick>
 8003070:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003072:	e008      	b.n	8003086 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003074:	f7fe fb94 	bl	80017a0 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b02      	cmp	r3, #2
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e10e      	b.n	80032a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003086:	4b39      	ldr	r3, [pc, #228]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1f0      	bne.n	8003074 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003092:	4b36      	ldr	r3, [pc, #216]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 8003094:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003096:	4b37      	ldr	r3, [pc, #220]	@ (8003174 <HAL_RCC_OscConfig+0x774>)
 8003098:	4013      	ands	r3, r2
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80030a2:	0112      	lsls	r2, r2, #4
 80030a4:	430a      	orrs	r2, r1
 80030a6:	4931      	ldr	r1, [pc, #196]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	628b      	str	r3, [r1, #40]	@ 0x28
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030b0:	3b01      	subs	r3, #1
 80030b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030ba:	3b01      	subs	r3, #1
 80030bc:	025b      	lsls	r3, r3, #9
 80030be:	b29b      	uxth	r3, r3
 80030c0:	431a      	orrs	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030c6:	3b01      	subs	r3, #1
 80030c8:	041b      	lsls	r3, r3, #16
 80030ca:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80030ce:	431a      	orrs	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030d4:	3b01      	subs	r3, #1
 80030d6:	061b      	lsls	r3, r3, #24
 80030d8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80030dc:	4923      	ldr	r1, [pc, #140]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80030e2:	4b22      	ldr	r3, [pc, #136]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 80030e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030e6:	4a21      	ldr	r2, [pc, #132]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 80030e8:	f023 0301 	bic.w	r3, r3, #1
 80030ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80030ee:	4b1f      	ldr	r3, [pc, #124]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 80030f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80030f2:	4b21      	ldr	r3, [pc, #132]	@ (8003178 <HAL_RCC_OscConfig+0x778>)
 80030f4:	4013      	ands	r3, r2
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80030fa:	00d2      	lsls	r2, r2, #3
 80030fc:	491b      	ldr	r1, [pc, #108]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003102:	4b1a      	ldr	r3, [pc, #104]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 8003104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003106:	f023 020c 	bic.w	r2, r3, #12
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800310e:	4917      	ldr	r1, [pc, #92]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 8003110:	4313      	orrs	r3, r2
 8003112:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003114:	4b15      	ldr	r3, [pc, #84]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 8003116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003118:	f023 0202 	bic.w	r2, r3, #2
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003120:	4912      	ldr	r1, [pc, #72]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 8003122:	4313      	orrs	r3, r2
 8003124:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003126:	4b11      	ldr	r3, [pc, #68]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 8003128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800312a:	4a10      	ldr	r2, [pc, #64]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 800312c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003130:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003132:	4b0e      	ldr	r3, [pc, #56]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 8003134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003136:	4a0d      	ldr	r2, [pc, #52]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 8003138:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800313c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800313e:	4b0b      	ldr	r3, [pc, #44]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 8003140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003142:	4a0a      	ldr	r2, [pc, #40]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 8003144:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003148:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800314a:	4b08      	ldr	r3, [pc, #32]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 800314c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800314e:	4a07      	ldr	r2, [pc, #28]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 8003150:	f043 0301 	orr.w	r3, r3, #1
 8003154:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003156:	4b05      	ldr	r3, [pc, #20]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a04      	ldr	r2, [pc, #16]	@ (800316c <HAL_RCC_OscConfig+0x76c>)
 800315c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003160:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003162:	f7fe fb1d 	bl	80017a0 <HAL_GetTick>
 8003166:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003168:	e011      	b.n	800318e <HAL_RCC_OscConfig+0x78e>
 800316a:	bf00      	nop
 800316c:	58024400 	.word	0x58024400
 8003170:	58024800 	.word	0x58024800
 8003174:	fffffc0c 	.word	0xfffffc0c
 8003178:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800317c:	f7fe fb10 	bl	80017a0 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b02      	cmp	r3, #2
 8003188:	d901      	bls.n	800318e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e08a      	b.n	80032a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800318e:	4b47      	ldr	r3, [pc, #284]	@ (80032ac <HAL_RCC_OscConfig+0x8ac>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d0f0      	beq.n	800317c <HAL_RCC_OscConfig+0x77c>
 800319a:	e082      	b.n	80032a2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800319c:	4b43      	ldr	r3, [pc, #268]	@ (80032ac <HAL_RCC_OscConfig+0x8ac>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a42      	ldr	r2, [pc, #264]	@ (80032ac <HAL_RCC_OscConfig+0x8ac>)
 80031a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80031a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a8:	f7fe fafa 	bl	80017a0 <HAL_GetTick>
 80031ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031ae:	e008      	b.n	80031c2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031b0:	f7fe faf6 	bl	80017a0 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e070      	b.n	80032a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031c2:	4b3a      	ldr	r3, [pc, #232]	@ (80032ac <HAL_RCC_OscConfig+0x8ac>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d1f0      	bne.n	80031b0 <HAL_RCC_OscConfig+0x7b0>
 80031ce:	e068      	b.n	80032a2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80031d0:	4b36      	ldr	r3, [pc, #216]	@ (80032ac <HAL_RCC_OscConfig+0x8ac>)
 80031d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031d4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80031d6:	4b35      	ldr	r3, [pc, #212]	@ (80032ac <HAL_RCC_OscConfig+0x8ac>)
 80031d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031da:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d031      	beq.n	8003248 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	f003 0203 	and.w	r2, r3, #3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d12a      	bne.n	8003248 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	091b      	lsrs	r3, r3, #4
 80031f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031fe:	429a      	cmp	r2, r3
 8003200:	d122      	bne.n	8003248 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800320c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800320e:	429a      	cmp	r2, r3
 8003210:	d11a      	bne.n	8003248 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	0a5b      	lsrs	r3, r3, #9
 8003216:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800321e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003220:	429a      	cmp	r2, r3
 8003222:	d111      	bne.n	8003248 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	0c1b      	lsrs	r3, r3, #16
 8003228:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003230:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003232:	429a      	cmp	r2, r3
 8003234:	d108      	bne.n	8003248 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	0e1b      	lsrs	r3, r3, #24
 800323a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003242:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003244:	429a      	cmp	r2, r3
 8003246:	d001      	beq.n	800324c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e02b      	b.n	80032a4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800324c:	4b17      	ldr	r3, [pc, #92]	@ (80032ac <HAL_RCC_OscConfig+0x8ac>)
 800324e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003250:	08db      	lsrs	r3, r3, #3
 8003252:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003256:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800325c:	693a      	ldr	r2, [r7, #16]
 800325e:	429a      	cmp	r2, r3
 8003260:	d01f      	beq.n	80032a2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003262:	4b12      	ldr	r3, [pc, #72]	@ (80032ac <HAL_RCC_OscConfig+0x8ac>)
 8003264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003266:	4a11      	ldr	r2, [pc, #68]	@ (80032ac <HAL_RCC_OscConfig+0x8ac>)
 8003268:	f023 0301 	bic.w	r3, r3, #1
 800326c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800326e:	f7fe fa97 	bl	80017a0 <HAL_GetTick>
 8003272:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003274:	bf00      	nop
 8003276:	f7fe fa93 	bl	80017a0 <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800327e:	4293      	cmp	r3, r2
 8003280:	d0f9      	beq.n	8003276 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003282:	4b0a      	ldr	r3, [pc, #40]	@ (80032ac <HAL_RCC_OscConfig+0x8ac>)
 8003284:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003286:	4b0a      	ldr	r3, [pc, #40]	@ (80032b0 <HAL_RCC_OscConfig+0x8b0>)
 8003288:	4013      	ands	r3, r2
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800328e:	00d2      	lsls	r2, r2, #3
 8003290:	4906      	ldr	r1, [pc, #24]	@ (80032ac <HAL_RCC_OscConfig+0x8ac>)
 8003292:	4313      	orrs	r3, r2
 8003294:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003296:	4b05      	ldr	r3, [pc, #20]	@ (80032ac <HAL_RCC_OscConfig+0x8ac>)
 8003298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800329a:	4a04      	ldr	r2, [pc, #16]	@ (80032ac <HAL_RCC_OscConfig+0x8ac>)
 800329c:	f043 0301 	orr.w	r3, r3, #1
 80032a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80032a2:	2300      	movs	r3, #0
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3730      	adds	r7, #48	@ 0x30
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	58024400 	.word	0x58024400
 80032b0:	ffff0007 	.word	0xffff0007

080032b4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b086      	sub	sp, #24
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d101      	bne.n	80032c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e19c      	b.n	8003602 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032c8:	4b8a      	ldr	r3, [pc, #552]	@ (80034f4 <HAL_RCC_ClockConfig+0x240>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 030f 	and.w	r3, r3, #15
 80032d0:	683a      	ldr	r2, [r7, #0]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d910      	bls.n	80032f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032d6:	4b87      	ldr	r3, [pc, #540]	@ (80034f4 <HAL_RCC_ClockConfig+0x240>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f023 020f 	bic.w	r2, r3, #15
 80032de:	4985      	ldr	r1, [pc, #532]	@ (80034f4 <HAL_RCC_ClockConfig+0x240>)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032e6:	4b83      	ldr	r3, [pc, #524]	@ (80034f4 <HAL_RCC_ClockConfig+0x240>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 030f 	and.w	r3, r3, #15
 80032ee:	683a      	ldr	r2, [r7, #0]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d001      	beq.n	80032f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e184      	b.n	8003602 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0304 	and.w	r3, r3, #4
 8003300:	2b00      	cmp	r3, #0
 8003302:	d010      	beq.n	8003326 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	691a      	ldr	r2, [r3, #16]
 8003308:	4b7b      	ldr	r3, [pc, #492]	@ (80034f8 <HAL_RCC_ClockConfig+0x244>)
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003310:	429a      	cmp	r2, r3
 8003312:	d908      	bls.n	8003326 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003314:	4b78      	ldr	r3, [pc, #480]	@ (80034f8 <HAL_RCC_ClockConfig+0x244>)
 8003316:	699b      	ldr	r3, [r3, #24]
 8003318:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	4975      	ldr	r1, [pc, #468]	@ (80034f8 <HAL_RCC_ClockConfig+0x244>)
 8003322:	4313      	orrs	r3, r2
 8003324:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0308 	and.w	r3, r3, #8
 800332e:	2b00      	cmp	r3, #0
 8003330:	d010      	beq.n	8003354 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	695a      	ldr	r2, [r3, #20]
 8003336:	4b70      	ldr	r3, [pc, #448]	@ (80034f8 <HAL_RCC_ClockConfig+0x244>)
 8003338:	69db      	ldr	r3, [r3, #28]
 800333a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800333e:	429a      	cmp	r2, r3
 8003340:	d908      	bls.n	8003354 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003342:	4b6d      	ldr	r3, [pc, #436]	@ (80034f8 <HAL_RCC_ClockConfig+0x244>)
 8003344:	69db      	ldr	r3, [r3, #28]
 8003346:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	496a      	ldr	r1, [pc, #424]	@ (80034f8 <HAL_RCC_ClockConfig+0x244>)
 8003350:	4313      	orrs	r3, r2
 8003352:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0310 	and.w	r3, r3, #16
 800335c:	2b00      	cmp	r3, #0
 800335e:	d010      	beq.n	8003382 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	699a      	ldr	r2, [r3, #24]
 8003364:	4b64      	ldr	r3, [pc, #400]	@ (80034f8 <HAL_RCC_ClockConfig+0x244>)
 8003366:	69db      	ldr	r3, [r3, #28]
 8003368:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800336c:	429a      	cmp	r2, r3
 800336e:	d908      	bls.n	8003382 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003370:	4b61      	ldr	r3, [pc, #388]	@ (80034f8 <HAL_RCC_ClockConfig+0x244>)
 8003372:	69db      	ldr	r3, [r3, #28]
 8003374:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	699b      	ldr	r3, [r3, #24]
 800337c:	495e      	ldr	r1, [pc, #376]	@ (80034f8 <HAL_RCC_ClockConfig+0x244>)
 800337e:	4313      	orrs	r3, r2
 8003380:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0320 	and.w	r3, r3, #32
 800338a:	2b00      	cmp	r3, #0
 800338c:	d010      	beq.n	80033b0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	69da      	ldr	r2, [r3, #28]
 8003392:	4b59      	ldr	r3, [pc, #356]	@ (80034f8 <HAL_RCC_ClockConfig+0x244>)
 8003394:	6a1b      	ldr	r3, [r3, #32]
 8003396:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800339a:	429a      	cmp	r2, r3
 800339c:	d908      	bls.n	80033b0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800339e:	4b56      	ldr	r3, [pc, #344]	@ (80034f8 <HAL_RCC_ClockConfig+0x244>)
 80033a0:	6a1b      	ldr	r3, [r3, #32]
 80033a2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	69db      	ldr	r3, [r3, #28]
 80033aa:	4953      	ldr	r1, [pc, #332]	@ (80034f8 <HAL_RCC_ClockConfig+0x244>)
 80033ac:	4313      	orrs	r3, r2
 80033ae:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0302 	and.w	r3, r3, #2
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d010      	beq.n	80033de <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	68da      	ldr	r2, [r3, #12]
 80033c0:	4b4d      	ldr	r3, [pc, #308]	@ (80034f8 <HAL_RCC_ClockConfig+0x244>)
 80033c2:	699b      	ldr	r3, [r3, #24]
 80033c4:	f003 030f 	and.w	r3, r3, #15
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d908      	bls.n	80033de <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033cc:	4b4a      	ldr	r3, [pc, #296]	@ (80034f8 <HAL_RCC_ClockConfig+0x244>)
 80033ce:	699b      	ldr	r3, [r3, #24]
 80033d0:	f023 020f 	bic.w	r2, r3, #15
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	4947      	ldr	r1, [pc, #284]	@ (80034f8 <HAL_RCC_ClockConfig+0x244>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0301 	and.w	r3, r3, #1
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d055      	beq.n	8003496 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80033ea:	4b43      	ldr	r3, [pc, #268]	@ (80034f8 <HAL_RCC_ClockConfig+0x244>)
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	4940      	ldr	r1, [pc, #256]	@ (80034f8 <HAL_RCC_ClockConfig+0x244>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	2b02      	cmp	r3, #2
 8003402:	d107      	bne.n	8003414 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003404:	4b3c      	ldr	r3, [pc, #240]	@ (80034f8 <HAL_RCC_ClockConfig+0x244>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d121      	bne.n	8003454 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e0f6      	b.n	8003602 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	2b03      	cmp	r3, #3
 800341a:	d107      	bne.n	800342c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800341c:	4b36      	ldr	r3, [pc, #216]	@ (80034f8 <HAL_RCC_ClockConfig+0x244>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d115      	bne.n	8003454 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e0ea      	b.n	8003602 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	2b01      	cmp	r3, #1
 8003432:	d107      	bne.n	8003444 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003434:	4b30      	ldr	r3, [pc, #192]	@ (80034f8 <HAL_RCC_ClockConfig+0x244>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800343c:	2b00      	cmp	r3, #0
 800343e:	d109      	bne.n	8003454 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e0de      	b.n	8003602 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003444:	4b2c      	ldr	r3, [pc, #176]	@ (80034f8 <HAL_RCC_ClockConfig+0x244>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0304 	and.w	r3, r3, #4
 800344c:	2b00      	cmp	r3, #0
 800344e:	d101      	bne.n	8003454 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e0d6      	b.n	8003602 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003454:	4b28      	ldr	r3, [pc, #160]	@ (80034f8 <HAL_RCC_ClockConfig+0x244>)
 8003456:	691b      	ldr	r3, [r3, #16]
 8003458:	f023 0207 	bic.w	r2, r3, #7
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	4925      	ldr	r1, [pc, #148]	@ (80034f8 <HAL_RCC_ClockConfig+0x244>)
 8003462:	4313      	orrs	r3, r2
 8003464:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003466:	f7fe f99b 	bl	80017a0 <HAL_GetTick>
 800346a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800346c:	e00a      	b.n	8003484 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800346e:	f7fe f997 	bl	80017a0 <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	f241 3288 	movw	r2, #5000	@ 0x1388
 800347c:	4293      	cmp	r3, r2
 800347e:	d901      	bls.n	8003484 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e0be      	b.n	8003602 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003484:	4b1c      	ldr	r3, [pc, #112]	@ (80034f8 <HAL_RCC_ClockConfig+0x244>)
 8003486:	691b      	ldr	r3, [r3, #16]
 8003488:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	00db      	lsls	r3, r3, #3
 8003492:	429a      	cmp	r2, r3
 8003494:	d1eb      	bne.n	800346e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d010      	beq.n	80034c4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	68da      	ldr	r2, [r3, #12]
 80034a6:	4b14      	ldr	r3, [pc, #80]	@ (80034f8 <HAL_RCC_ClockConfig+0x244>)
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	f003 030f 	and.w	r3, r3, #15
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d208      	bcs.n	80034c4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034b2:	4b11      	ldr	r3, [pc, #68]	@ (80034f8 <HAL_RCC_ClockConfig+0x244>)
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	f023 020f 	bic.w	r2, r3, #15
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	490e      	ldr	r1, [pc, #56]	@ (80034f8 <HAL_RCC_ClockConfig+0x244>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034c4:	4b0b      	ldr	r3, [pc, #44]	@ (80034f4 <HAL_RCC_ClockConfig+0x240>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 030f 	and.w	r3, r3, #15
 80034cc:	683a      	ldr	r2, [r7, #0]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d214      	bcs.n	80034fc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034d2:	4b08      	ldr	r3, [pc, #32]	@ (80034f4 <HAL_RCC_ClockConfig+0x240>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f023 020f 	bic.w	r2, r3, #15
 80034da:	4906      	ldr	r1, [pc, #24]	@ (80034f4 <HAL_RCC_ClockConfig+0x240>)
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	4313      	orrs	r3, r2
 80034e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034e2:	4b04      	ldr	r3, [pc, #16]	@ (80034f4 <HAL_RCC_ClockConfig+0x240>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 030f 	and.w	r3, r3, #15
 80034ea:	683a      	ldr	r2, [r7, #0]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d005      	beq.n	80034fc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e086      	b.n	8003602 <HAL_RCC_ClockConfig+0x34e>
 80034f4:	52002000 	.word	0x52002000
 80034f8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0304 	and.w	r3, r3, #4
 8003504:	2b00      	cmp	r3, #0
 8003506:	d010      	beq.n	800352a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	691a      	ldr	r2, [r3, #16]
 800350c:	4b3f      	ldr	r3, [pc, #252]	@ (800360c <HAL_RCC_ClockConfig+0x358>)
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003514:	429a      	cmp	r2, r3
 8003516:	d208      	bcs.n	800352a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003518:	4b3c      	ldr	r3, [pc, #240]	@ (800360c <HAL_RCC_ClockConfig+0x358>)
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	691b      	ldr	r3, [r3, #16]
 8003524:	4939      	ldr	r1, [pc, #228]	@ (800360c <HAL_RCC_ClockConfig+0x358>)
 8003526:	4313      	orrs	r3, r2
 8003528:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0308 	and.w	r3, r3, #8
 8003532:	2b00      	cmp	r3, #0
 8003534:	d010      	beq.n	8003558 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	695a      	ldr	r2, [r3, #20]
 800353a:	4b34      	ldr	r3, [pc, #208]	@ (800360c <HAL_RCC_ClockConfig+0x358>)
 800353c:	69db      	ldr	r3, [r3, #28]
 800353e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003542:	429a      	cmp	r2, r3
 8003544:	d208      	bcs.n	8003558 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003546:	4b31      	ldr	r3, [pc, #196]	@ (800360c <HAL_RCC_ClockConfig+0x358>)
 8003548:	69db      	ldr	r3, [r3, #28]
 800354a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	695b      	ldr	r3, [r3, #20]
 8003552:	492e      	ldr	r1, [pc, #184]	@ (800360c <HAL_RCC_ClockConfig+0x358>)
 8003554:	4313      	orrs	r3, r2
 8003556:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0310 	and.w	r3, r3, #16
 8003560:	2b00      	cmp	r3, #0
 8003562:	d010      	beq.n	8003586 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	699a      	ldr	r2, [r3, #24]
 8003568:	4b28      	ldr	r3, [pc, #160]	@ (800360c <HAL_RCC_ClockConfig+0x358>)
 800356a:	69db      	ldr	r3, [r3, #28]
 800356c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003570:	429a      	cmp	r2, r3
 8003572:	d208      	bcs.n	8003586 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003574:	4b25      	ldr	r3, [pc, #148]	@ (800360c <HAL_RCC_ClockConfig+0x358>)
 8003576:	69db      	ldr	r3, [r3, #28]
 8003578:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	4922      	ldr	r1, [pc, #136]	@ (800360c <HAL_RCC_ClockConfig+0x358>)
 8003582:	4313      	orrs	r3, r2
 8003584:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0320 	and.w	r3, r3, #32
 800358e:	2b00      	cmp	r3, #0
 8003590:	d010      	beq.n	80035b4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	69da      	ldr	r2, [r3, #28]
 8003596:	4b1d      	ldr	r3, [pc, #116]	@ (800360c <HAL_RCC_ClockConfig+0x358>)
 8003598:	6a1b      	ldr	r3, [r3, #32]
 800359a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800359e:	429a      	cmp	r2, r3
 80035a0:	d208      	bcs.n	80035b4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80035a2:	4b1a      	ldr	r3, [pc, #104]	@ (800360c <HAL_RCC_ClockConfig+0x358>)
 80035a4:	6a1b      	ldr	r3, [r3, #32]
 80035a6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	69db      	ldr	r3, [r3, #28]
 80035ae:	4917      	ldr	r1, [pc, #92]	@ (800360c <HAL_RCC_ClockConfig+0x358>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80035b4:	f000 f834 	bl	8003620 <HAL_RCC_GetSysClockFreq>
 80035b8:	4602      	mov	r2, r0
 80035ba:	4b14      	ldr	r3, [pc, #80]	@ (800360c <HAL_RCC_ClockConfig+0x358>)
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	0a1b      	lsrs	r3, r3, #8
 80035c0:	f003 030f 	and.w	r3, r3, #15
 80035c4:	4912      	ldr	r1, [pc, #72]	@ (8003610 <HAL_RCC_ClockConfig+0x35c>)
 80035c6:	5ccb      	ldrb	r3, [r1, r3]
 80035c8:	f003 031f 	and.w	r3, r3, #31
 80035cc:	fa22 f303 	lsr.w	r3, r2, r3
 80035d0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80035d2:	4b0e      	ldr	r3, [pc, #56]	@ (800360c <HAL_RCC_ClockConfig+0x358>)
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	f003 030f 	and.w	r3, r3, #15
 80035da:	4a0d      	ldr	r2, [pc, #52]	@ (8003610 <HAL_RCC_ClockConfig+0x35c>)
 80035dc:	5cd3      	ldrb	r3, [r2, r3]
 80035de:	f003 031f 	and.w	r3, r3, #31
 80035e2:	693a      	ldr	r2, [r7, #16]
 80035e4:	fa22 f303 	lsr.w	r3, r2, r3
 80035e8:	4a0a      	ldr	r2, [pc, #40]	@ (8003614 <HAL_RCC_ClockConfig+0x360>)
 80035ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80035ec:	4a0a      	ldr	r2, [pc, #40]	@ (8003618 <HAL_RCC_ClockConfig+0x364>)
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80035f2:	4b0a      	ldr	r3, [pc, #40]	@ (800361c <HAL_RCC_ClockConfig+0x368>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7fe f888 	bl	800170c <HAL_InitTick>
 80035fc:	4603      	mov	r3, r0
 80035fe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003600:	7bfb      	ldrb	r3, [r7, #15]
}
 8003602:	4618      	mov	r0, r3
 8003604:	3718      	adds	r7, #24
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	58024400 	.word	0x58024400
 8003610:	0800f70c 	.word	0x0800f70c
 8003614:	24000004 	.word	0x24000004
 8003618:	24000000 	.word	0x24000000
 800361c:	24000008 	.word	0x24000008

08003620 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003620:	b480      	push	{r7}
 8003622:	b089      	sub	sp, #36	@ 0x24
 8003624:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003626:	4bb3      	ldr	r3, [pc, #716]	@ (80038f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800362e:	2b18      	cmp	r3, #24
 8003630:	f200 8155 	bhi.w	80038de <HAL_RCC_GetSysClockFreq+0x2be>
 8003634:	a201      	add	r2, pc, #4	@ (adr r2, 800363c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800363a:	bf00      	nop
 800363c:	080036a1 	.word	0x080036a1
 8003640:	080038df 	.word	0x080038df
 8003644:	080038df 	.word	0x080038df
 8003648:	080038df 	.word	0x080038df
 800364c:	080038df 	.word	0x080038df
 8003650:	080038df 	.word	0x080038df
 8003654:	080038df 	.word	0x080038df
 8003658:	080038df 	.word	0x080038df
 800365c:	080036c7 	.word	0x080036c7
 8003660:	080038df 	.word	0x080038df
 8003664:	080038df 	.word	0x080038df
 8003668:	080038df 	.word	0x080038df
 800366c:	080038df 	.word	0x080038df
 8003670:	080038df 	.word	0x080038df
 8003674:	080038df 	.word	0x080038df
 8003678:	080038df 	.word	0x080038df
 800367c:	080036cd 	.word	0x080036cd
 8003680:	080038df 	.word	0x080038df
 8003684:	080038df 	.word	0x080038df
 8003688:	080038df 	.word	0x080038df
 800368c:	080038df 	.word	0x080038df
 8003690:	080038df 	.word	0x080038df
 8003694:	080038df 	.word	0x080038df
 8003698:	080038df 	.word	0x080038df
 800369c:	080036d3 	.word	0x080036d3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80036a0:	4b94      	ldr	r3, [pc, #592]	@ (80038f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0320 	and.w	r3, r3, #32
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d009      	beq.n	80036c0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80036ac:	4b91      	ldr	r3, [pc, #580]	@ (80038f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	08db      	lsrs	r3, r3, #3
 80036b2:	f003 0303 	and.w	r3, r3, #3
 80036b6:	4a90      	ldr	r2, [pc, #576]	@ (80038f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80036b8:	fa22 f303 	lsr.w	r3, r2, r3
 80036bc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80036be:	e111      	b.n	80038e4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80036c0:	4b8d      	ldr	r3, [pc, #564]	@ (80038f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80036c2:	61bb      	str	r3, [r7, #24]
      break;
 80036c4:	e10e      	b.n	80038e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80036c6:	4b8d      	ldr	r3, [pc, #564]	@ (80038fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80036c8:	61bb      	str	r3, [r7, #24]
      break;
 80036ca:	e10b      	b.n	80038e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80036cc:	4b8c      	ldr	r3, [pc, #560]	@ (8003900 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80036ce:	61bb      	str	r3, [r7, #24]
      break;
 80036d0:	e108      	b.n	80038e4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80036d2:	4b88      	ldr	r3, [pc, #544]	@ (80038f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036d6:	f003 0303 	and.w	r3, r3, #3
 80036da:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80036dc:	4b85      	ldr	r3, [pc, #532]	@ (80038f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036e0:	091b      	lsrs	r3, r3, #4
 80036e2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80036e6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80036e8:	4b82      	ldr	r3, [pc, #520]	@ (80038f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ec:	f003 0301 	and.w	r3, r3, #1
 80036f0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80036f2:	4b80      	ldr	r3, [pc, #512]	@ (80038f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036f6:	08db      	lsrs	r3, r3, #3
 80036f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80036fc:	68fa      	ldr	r2, [r7, #12]
 80036fe:	fb02 f303 	mul.w	r3, r2, r3
 8003702:	ee07 3a90 	vmov	s15, r3
 8003706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800370a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	2b00      	cmp	r3, #0
 8003712:	f000 80e1 	beq.w	80038d8 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	2b02      	cmp	r3, #2
 800371a:	f000 8083 	beq.w	8003824 <HAL_RCC_GetSysClockFreq+0x204>
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	2b02      	cmp	r3, #2
 8003722:	f200 80a1 	bhi.w	8003868 <HAL_RCC_GetSysClockFreq+0x248>
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d003      	beq.n	8003734 <HAL_RCC_GetSysClockFreq+0x114>
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	2b01      	cmp	r3, #1
 8003730:	d056      	beq.n	80037e0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003732:	e099      	b.n	8003868 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003734:	4b6f      	ldr	r3, [pc, #444]	@ (80038f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0320 	and.w	r3, r3, #32
 800373c:	2b00      	cmp	r3, #0
 800373e:	d02d      	beq.n	800379c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003740:	4b6c      	ldr	r3, [pc, #432]	@ (80038f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	08db      	lsrs	r3, r3, #3
 8003746:	f003 0303 	and.w	r3, r3, #3
 800374a:	4a6b      	ldr	r2, [pc, #428]	@ (80038f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800374c:	fa22 f303 	lsr.w	r3, r2, r3
 8003750:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	ee07 3a90 	vmov	s15, r3
 8003758:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	ee07 3a90 	vmov	s15, r3
 8003762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003766:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800376a:	4b62      	ldr	r3, [pc, #392]	@ (80038f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800376c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800376e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003772:	ee07 3a90 	vmov	s15, r3
 8003776:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800377a:	ed97 6a02 	vldr	s12, [r7, #8]
 800377e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003904 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003782:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003786:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800378a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800378e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003792:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003796:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800379a:	e087      	b.n	80038ac <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	ee07 3a90 	vmov	s15, r3
 80037a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037a6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003908 <HAL_RCC_GetSysClockFreq+0x2e8>
 80037aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037ae:	4b51      	ldr	r3, [pc, #324]	@ (80038f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037b6:	ee07 3a90 	vmov	s15, r3
 80037ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037be:	ed97 6a02 	vldr	s12, [r7, #8]
 80037c2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003904 <HAL_RCC_GetSysClockFreq+0x2e4>
 80037c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80037d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80037de:	e065      	b.n	80038ac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	ee07 3a90 	vmov	s15, r3
 80037e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037ea:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800390c <HAL_RCC_GetSysClockFreq+0x2ec>
 80037ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037f2:	4b40      	ldr	r3, [pc, #256]	@ (80038f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037fa:	ee07 3a90 	vmov	s15, r3
 80037fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003802:	ed97 6a02 	vldr	s12, [r7, #8]
 8003806:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003904 <HAL_RCC_GetSysClockFreq+0x2e4>
 800380a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800380e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003812:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003816:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800381a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800381e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003822:	e043      	b.n	80038ac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	ee07 3a90 	vmov	s15, r3
 800382a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800382e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003910 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003832:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003836:	4b2f      	ldr	r3, [pc, #188]	@ (80038f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800383a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800383e:	ee07 3a90 	vmov	s15, r3
 8003842:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003846:	ed97 6a02 	vldr	s12, [r7, #8]
 800384a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003904 <HAL_RCC_GetSysClockFreq+0x2e4>
 800384e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003852:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003856:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800385a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800385e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003862:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003866:	e021      	b.n	80038ac <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	ee07 3a90 	vmov	s15, r3
 800386e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003872:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800390c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003876:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800387a:	4b1e      	ldr	r3, [pc, #120]	@ (80038f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800387c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800387e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003882:	ee07 3a90 	vmov	s15, r3
 8003886:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800388a:	ed97 6a02 	vldr	s12, [r7, #8]
 800388e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003904 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003892:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003896:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800389a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800389e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80038aa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80038ac:	4b11      	ldr	r3, [pc, #68]	@ (80038f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038b0:	0a5b      	lsrs	r3, r3, #9
 80038b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80038b6:	3301      	adds	r3, #1
 80038b8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	ee07 3a90 	vmov	s15, r3
 80038c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80038c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80038c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038d0:	ee17 3a90 	vmov	r3, s15
 80038d4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80038d6:	e005      	b.n	80038e4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80038d8:	2300      	movs	r3, #0
 80038da:	61bb      	str	r3, [r7, #24]
      break;
 80038dc:	e002      	b.n	80038e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80038de:	4b07      	ldr	r3, [pc, #28]	@ (80038fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80038e0:	61bb      	str	r3, [r7, #24]
      break;
 80038e2:	bf00      	nop
  }

  return sysclockfreq;
 80038e4:	69bb      	ldr	r3, [r7, #24]
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3724      	adds	r7, #36	@ 0x24
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	58024400 	.word	0x58024400
 80038f8:	03d09000 	.word	0x03d09000
 80038fc:	003d0900 	.word	0x003d0900
 8003900:	017d7840 	.word	0x017d7840
 8003904:	46000000 	.word	0x46000000
 8003908:	4c742400 	.word	0x4c742400
 800390c:	4a742400 	.word	0x4a742400
 8003910:	4bbebc20 	.word	0x4bbebc20

08003914 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800391a:	f7ff fe81 	bl	8003620 <HAL_RCC_GetSysClockFreq>
 800391e:	4602      	mov	r2, r0
 8003920:	4b10      	ldr	r3, [pc, #64]	@ (8003964 <HAL_RCC_GetHCLKFreq+0x50>)
 8003922:	699b      	ldr	r3, [r3, #24]
 8003924:	0a1b      	lsrs	r3, r3, #8
 8003926:	f003 030f 	and.w	r3, r3, #15
 800392a:	490f      	ldr	r1, [pc, #60]	@ (8003968 <HAL_RCC_GetHCLKFreq+0x54>)
 800392c:	5ccb      	ldrb	r3, [r1, r3]
 800392e:	f003 031f 	and.w	r3, r3, #31
 8003932:	fa22 f303 	lsr.w	r3, r2, r3
 8003936:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003938:	4b0a      	ldr	r3, [pc, #40]	@ (8003964 <HAL_RCC_GetHCLKFreq+0x50>)
 800393a:	699b      	ldr	r3, [r3, #24]
 800393c:	f003 030f 	and.w	r3, r3, #15
 8003940:	4a09      	ldr	r2, [pc, #36]	@ (8003968 <HAL_RCC_GetHCLKFreq+0x54>)
 8003942:	5cd3      	ldrb	r3, [r2, r3]
 8003944:	f003 031f 	and.w	r3, r3, #31
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	fa22 f303 	lsr.w	r3, r2, r3
 800394e:	4a07      	ldr	r2, [pc, #28]	@ (800396c <HAL_RCC_GetHCLKFreq+0x58>)
 8003950:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003952:	4a07      	ldr	r2, [pc, #28]	@ (8003970 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003958:	4b04      	ldr	r3, [pc, #16]	@ (800396c <HAL_RCC_GetHCLKFreq+0x58>)
 800395a:	681b      	ldr	r3, [r3, #0]
}
 800395c:	4618      	mov	r0, r3
 800395e:	3708      	adds	r7, #8
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}
 8003964:	58024400 	.word	0x58024400
 8003968:	0800f70c 	.word	0x0800f70c
 800396c:	24000004 	.word	0x24000004
 8003970:	24000000 	.word	0x24000000

08003974 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003978:	f7ff ffcc 	bl	8003914 <HAL_RCC_GetHCLKFreq>
 800397c:	4602      	mov	r2, r0
 800397e:	4b06      	ldr	r3, [pc, #24]	@ (8003998 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003980:	69db      	ldr	r3, [r3, #28]
 8003982:	091b      	lsrs	r3, r3, #4
 8003984:	f003 0307 	and.w	r3, r3, #7
 8003988:	4904      	ldr	r1, [pc, #16]	@ (800399c <HAL_RCC_GetPCLK1Freq+0x28>)
 800398a:	5ccb      	ldrb	r3, [r1, r3]
 800398c:	f003 031f 	and.w	r3, r3, #31
 8003990:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003994:	4618      	mov	r0, r3
 8003996:	bd80      	pop	{r7, pc}
 8003998:	58024400 	.word	0x58024400
 800399c:	0800f70c 	.word	0x0800f70c

080039a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80039a4:	f7ff ffb6 	bl	8003914 <HAL_RCC_GetHCLKFreq>
 80039a8:	4602      	mov	r2, r0
 80039aa:	4b06      	ldr	r3, [pc, #24]	@ (80039c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039ac:	69db      	ldr	r3, [r3, #28]
 80039ae:	0a1b      	lsrs	r3, r3, #8
 80039b0:	f003 0307 	and.w	r3, r3, #7
 80039b4:	4904      	ldr	r1, [pc, #16]	@ (80039c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80039b6:	5ccb      	ldrb	r3, [r1, r3]
 80039b8:	f003 031f 	and.w	r3, r3, #31
 80039bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	58024400 	.word	0x58024400
 80039c8:	0800f70c 	.word	0x0800f70c

080039cc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039d0:	b0ca      	sub	sp, #296	@ 0x128
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80039d8:	2300      	movs	r3, #0
 80039da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80039de:	2300      	movs	r3, #0
 80039e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80039e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ec:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80039f0:	2500      	movs	r5, #0
 80039f2:	ea54 0305 	orrs.w	r3, r4, r5
 80039f6:	d049      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80039f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80039fe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003a02:	d02f      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003a04:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003a08:	d828      	bhi.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003a0a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a0e:	d01a      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003a10:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a14:	d822      	bhi.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d003      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003a1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a1e:	d007      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003a20:	e01c      	b.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a22:	4bb8      	ldr	r3, [pc, #736]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a26:	4ab7      	ldr	r2, [pc, #732]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003a2e:	e01a      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a34:	3308      	adds	r3, #8
 8003a36:	2102      	movs	r1, #2
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f002 fb61 	bl	8006100 <RCCEx_PLL2_Config>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003a44:	e00f      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a4a:	3328      	adds	r3, #40	@ 0x28
 8003a4c:	2102      	movs	r1, #2
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f002 fc08 	bl	8006264 <RCCEx_PLL3_Config>
 8003a54:	4603      	mov	r3, r0
 8003a56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003a5a:	e004      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a62:	e000      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003a64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d10a      	bne.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003a6e:	4ba5      	ldr	r3, [pc, #660]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a72:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a7a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a7c:	4aa1      	ldr	r2, [pc, #644]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a7e:	430b      	orrs	r3, r1
 8003a80:	6513      	str	r3, [r2, #80]	@ 0x50
 8003a82:	e003      	b.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003a8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a94:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003a98:	f04f 0900 	mov.w	r9, #0
 8003a9c:	ea58 0309 	orrs.w	r3, r8, r9
 8003aa0:	d047      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aa8:	2b04      	cmp	r3, #4
 8003aaa:	d82a      	bhi.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003aac:	a201      	add	r2, pc, #4	@ (adr r2, 8003ab4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ab2:	bf00      	nop
 8003ab4:	08003ac9 	.word	0x08003ac9
 8003ab8:	08003ad7 	.word	0x08003ad7
 8003abc:	08003aed 	.word	0x08003aed
 8003ac0:	08003b0b 	.word	0x08003b0b
 8003ac4:	08003b0b 	.word	0x08003b0b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ac8:	4b8e      	ldr	r3, [pc, #568]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003acc:	4a8d      	ldr	r2, [pc, #564]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ace:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ad2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ad4:	e01a      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ada:	3308      	adds	r3, #8
 8003adc:	2100      	movs	r1, #0
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f002 fb0e 	bl	8006100 <RCCEx_PLL2_Config>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003aea:	e00f      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003aec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003af0:	3328      	adds	r3, #40	@ 0x28
 8003af2:	2100      	movs	r1, #0
 8003af4:	4618      	mov	r0, r3
 8003af6:	f002 fbb5 	bl	8006264 <RCCEx_PLL3_Config>
 8003afa:	4603      	mov	r3, r0
 8003afc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003b00:	e004      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b08:	e000      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003b0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d10a      	bne.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b14:	4b7b      	ldr	r3, [pc, #492]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b18:	f023 0107 	bic.w	r1, r3, #7
 8003b1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b22:	4a78      	ldr	r2, [pc, #480]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b24:	430b      	orrs	r3, r1
 8003b26:	6513      	str	r3, [r2, #80]	@ 0x50
 8003b28:	e003      	b.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b3a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003b3e:	f04f 0b00 	mov.w	fp, #0
 8003b42:	ea5a 030b 	orrs.w	r3, sl, fp
 8003b46:	d04c      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003b48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b52:	d030      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003b54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b58:	d829      	bhi.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003b5a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b5c:	d02d      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003b5e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b60:	d825      	bhi.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003b62:	2b80      	cmp	r3, #128	@ 0x80
 8003b64:	d018      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003b66:	2b80      	cmp	r3, #128	@ 0x80
 8003b68:	d821      	bhi.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d002      	beq.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003b6e:	2b40      	cmp	r3, #64	@ 0x40
 8003b70:	d007      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003b72:	e01c      	b.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b74:	4b63      	ldr	r3, [pc, #396]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b78:	4a62      	ldr	r2, [pc, #392]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003b80:	e01c      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b86:	3308      	adds	r3, #8
 8003b88:	2100      	movs	r1, #0
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f002 fab8 	bl	8006100 <RCCEx_PLL2_Config>
 8003b90:	4603      	mov	r3, r0
 8003b92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003b96:	e011      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b9c:	3328      	adds	r3, #40	@ 0x28
 8003b9e:	2100      	movs	r1, #0
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f002 fb5f 	bl	8006264 <RCCEx_PLL3_Config>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003bac:	e006      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003bb4:	e002      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003bb6:	bf00      	nop
 8003bb8:	e000      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003bba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d10a      	bne.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003bc4:	4b4f      	ldr	r3, [pc, #316]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003bc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bc8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bd2:	4a4c      	ldr	r2, [pc, #304]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003bd4:	430b      	orrs	r3, r1
 8003bd6:	6513      	str	r3, [r2, #80]	@ 0x50
 8003bd8:	e003      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bde:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bea:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003bee:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003bf8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	d053      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c06:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003c0a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003c0e:	d035      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003c10:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003c14:	d82e      	bhi.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003c16:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003c1a:	d031      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003c1c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003c20:	d828      	bhi.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003c22:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c26:	d01a      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003c28:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c2c:	d822      	bhi.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d003      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003c32:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003c36:	d007      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003c38:	e01c      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c3a:	4b32      	ldr	r3, [pc, #200]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c3e:	4a31      	ldr	r2, [pc, #196]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c44:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c46:	e01c      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c4c:	3308      	adds	r3, #8
 8003c4e:	2100      	movs	r1, #0
 8003c50:	4618      	mov	r0, r3
 8003c52:	f002 fa55 	bl	8006100 <RCCEx_PLL2_Config>
 8003c56:	4603      	mov	r3, r0
 8003c58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003c5c:	e011      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c62:	3328      	adds	r3, #40	@ 0x28
 8003c64:	2100      	movs	r1, #0
 8003c66:	4618      	mov	r0, r3
 8003c68:	f002 fafc 	bl	8006264 <RCCEx_PLL3_Config>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c72:	e006      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c7a:	e002      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003c7c:	bf00      	nop
 8003c7e:	e000      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003c80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d10b      	bne.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003c8a:	4b1e      	ldr	r3, [pc, #120]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c8e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c96:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003c9a:	4a1a      	ldr	r2, [pc, #104]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c9c:	430b      	orrs	r3, r1
 8003c9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ca0:	e003      	b.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ca2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ca6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003cb6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003cba:	2300      	movs	r3, #0
 8003cbc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003cc0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	d056      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003cd2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003cd6:	d038      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003cd8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003cdc:	d831      	bhi.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003cde:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003ce2:	d034      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003ce4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003ce8:	d82b      	bhi.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003cea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003cee:	d01d      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003cf0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003cf4:	d825      	bhi.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d006      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003cfa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003cfe:	d00a      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003d00:	e01f      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003d02:	bf00      	nop
 8003d04:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d08:	4ba2      	ldr	r3, [pc, #648]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d0c:	4aa1      	ldr	r2, [pc, #644]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d14:	e01c      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d1a:	3308      	adds	r3, #8
 8003d1c:	2100      	movs	r1, #0
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f002 f9ee 	bl	8006100 <RCCEx_PLL2_Config>
 8003d24:	4603      	mov	r3, r0
 8003d26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003d2a:	e011      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003d2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d30:	3328      	adds	r3, #40	@ 0x28
 8003d32:	2100      	movs	r1, #0
 8003d34:	4618      	mov	r0, r3
 8003d36:	f002 fa95 	bl	8006264 <RCCEx_PLL3_Config>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d40:	e006      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d48:	e002      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003d4a:	bf00      	nop
 8003d4c:	e000      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003d4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d10b      	bne.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003d58:	4b8e      	ldr	r3, [pc, #568]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d5c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d64:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003d68:	4a8a      	ldr	r2, [pc, #552]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d6a:	430b      	orrs	r3, r1
 8003d6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d6e:	e003      	b.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d80:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003d84:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003d88:	2300      	movs	r3, #0
 8003d8a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003d8e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003d92:	460b      	mov	r3, r1
 8003d94:	4313      	orrs	r3, r2
 8003d96:	d03a      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003d98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d9e:	2b30      	cmp	r3, #48	@ 0x30
 8003da0:	d01f      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003da2:	2b30      	cmp	r3, #48	@ 0x30
 8003da4:	d819      	bhi.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003da6:	2b20      	cmp	r3, #32
 8003da8:	d00c      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003daa:	2b20      	cmp	r3, #32
 8003dac:	d815      	bhi.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d019      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003db2:	2b10      	cmp	r3, #16
 8003db4:	d111      	bne.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003db6:	4b77      	ldr	r3, [pc, #476]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dba:	4a76      	ldr	r2, [pc, #472]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003dbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003dc0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003dc2:	e011      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dc8:	3308      	adds	r3, #8
 8003dca:	2102      	movs	r1, #2
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f002 f997 	bl	8006100 <RCCEx_PLL2_Config>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003dd8:	e006      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003de0:	e002      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003de2:	bf00      	nop
 8003de4:	e000      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003de6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003de8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d10a      	bne.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003df0:	4b68      	ldr	r3, [pc, #416]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003df2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003df4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dfe:	4a65      	ldr	r2, [pc, #404]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e00:	430b      	orrs	r3, r1
 8003e02:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e04:	e003      	b.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e16:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003e1a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003e1e:	2300      	movs	r3, #0
 8003e20:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003e24:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003e28:	460b      	mov	r3, r1
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	d051      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e34:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e38:	d035      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003e3a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e3e:	d82e      	bhi.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003e40:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003e44:	d031      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003e46:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003e4a:	d828      	bhi.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003e4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e50:	d01a      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003e52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e56:	d822      	bhi.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d003      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003e5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e60:	d007      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003e62:	e01c      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e64:	4b4b      	ldr	r3, [pc, #300]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e68:	4a4a      	ldr	r2, [pc, #296]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003e70:	e01c      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e76:	3308      	adds	r3, #8
 8003e78:	2100      	movs	r1, #0
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f002 f940 	bl	8006100 <RCCEx_PLL2_Config>
 8003e80:	4603      	mov	r3, r0
 8003e82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003e86:	e011      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e8c:	3328      	adds	r3, #40	@ 0x28
 8003e8e:	2100      	movs	r1, #0
 8003e90:	4618      	mov	r0, r3
 8003e92:	f002 f9e7 	bl	8006264 <RCCEx_PLL3_Config>
 8003e96:	4603      	mov	r3, r0
 8003e98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003e9c:	e006      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ea4:	e002      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003ea6:	bf00      	nop
 8003ea8:	e000      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003eaa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003eac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d10a      	bne.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003eb4:	4b37      	ldr	r3, [pc, #220]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003eb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003eb8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003ebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ec0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ec2:	4a34      	ldr	r2, [pc, #208]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ec4:	430b      	orrs	r3, r1
 8003ec6:	6513      	str	r3, [r2, #80]	@ 0x50
 8003ec8:	e003      	b.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ece:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003ed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eda:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003ede:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003ee8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003eec:	460b      	mov	r3, r1
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	d056      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ef6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ef8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003efc:	d033      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003efe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f02:	d82c      	bhi.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003f04:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003f08:	d02f      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003f0a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003f0e:	d826      	bhi.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003f10:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003f14:	d02b      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003f16:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003f1a:	d820      	bhi.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003f1c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003f20:	d012      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003f22:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003f26:	d81a      	bhi.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d022      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003f2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f30:	d115      	bne.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f36:	3308      	adds	r3, #8
 8003f38:	2101      	movs	r1, #1
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f002 f8e0 	bl	8006100 <RCCEx_PLL2_Config>
 8003f40:	4603      	mov	r3, r0
 8003f42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003f46:	e015      	b.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f4c:	3328      	adds	r3, #40	@ 0x28
 8003f4e:	2101      	movs	r1, #1
 8003f50:	4618      	mov	r0, r3
 8003f52:	f002 f987 	bl	8006264 <RCCEx_PLL3_Config>
 8003f56:	4603      	mov	r3, r0
 8003f58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003f5c:	e00a      	b.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f64:	e006      	b.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003f66:	bf00      	nop
 8003f68:	e004      	b.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003f6a:	bf00      	nop
 8003f6c:	e002      	b.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003f6e:	bf00      	nop
 8003f70:	e000      	b.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003f72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d10d      	bne.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003f7c:	4b05      	ldr	r3, [pc, #20]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f80:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003f84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f8a:	4a02      	ldr	r2, [pc, #8]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f8c:	430b      	orrs	r3, r1
 8003f8e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003f90:	e006      	b.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003f92:	bf00      	nop
 8003f94:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f9c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003fac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003fb6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003fba:	460b      	mov	r3, r1
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	d055      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fc4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003fc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003fcc:	d033      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003fce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003fd2:	d82c      	bhi.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fd8:	d02f      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003fda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fde:	d826      	bhi.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003fe0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003fe4:	d02b      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003fe6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003fea:	d820      	bhi.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003fec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ff0:	d012      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003ff2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ff6:	d81a      	bhi.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d022      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003ffc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004000:	d115      	bne.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004002:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004006:	3308      	adds	r3, #8
 8004008:	2101      	movs	r1, #1
 800400a:	4618      	mov	r0, r3
 800400c:	f002 f878 	bl	8006100 <RCCEx_PLL2_Config>
 8004010:	4603      	mov	r3, r0
 8004012:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004016:	e015      	b.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004018:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800401c:	3328      	adds	r3, #40	@ 0x28
 800401e:	2101      	movs	r1, #1
 8004020:	4618      	mov	r0, r3
 8004022:	f002 f91f 	bl	8006264 <RCCEx_PLL3_Config>
 8004026:	4603      	mov	r3, r0
 8004028:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800402c:	e00a      	b.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004034:	e006      	b.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004036:	bf00      	nop
 8004038:	e004      	b.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800403a:	bf00      	nop
 800403c:	e002      	b.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800403e:	bf00      	nop
 8004040:	e000      	b.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004042:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004044:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004048:	2b00      	cmp	r3, #0
 800404a:	d10b      	bne.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800404c:	4ba3      	ldr	r3, [pc, #652]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800404e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004050:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004054:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004058:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800405c:	4a9f      	ldr	r2, [pc, #636]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800405e:	430b      	orrs	r3, r1
 8004060:	6593      	str	r3, [r2, #88]	@ 0x58
 8004062:	e003      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004064:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004068:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800406c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004074:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004078:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800407c:	2300      	movs	r3, #0
 800407e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004082:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004086:	460b      	mov	r3, r1
 8004088:	4313      	orrs	r3, r2
 800408a:	d037      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800408c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004090:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004092:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004096:	d00e      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004098:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800409c:	d816      	bhi.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x700>
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d018      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80040a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80040a6:	d111      	bne.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040a8:	4b8c      	ldr	r3, [pc, #560]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ac:	4a8b      	ldr	r2, [pc, #556]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80040b4:	e00f      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80040b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ba:	3308      	adds	r3, #8
 80040bc:	2101      	movs	r1, #1
 80040be:	4618      	mov	r0, r3
 80040c0:	f002 f81e 	bl	8006100 <RCCEx_PLL2_Config>
 80040c4:	4603      	mov	r3, r0
 80040c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80040ca:	e004      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80040d2:	e000      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80040d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d10a      	bne.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80040de:	4b7f      	ldr	r3, [pc, #508]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040e2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80040e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040ec:	4a7b      	ldr	r2, [pc, #492]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040ee:	430b      	orrs	r3, r1
 80040f0:	6513      	str	r3, [r2, #80]	@ 0x50
 80040f2:	e003      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80040fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004104:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004108:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800410c:	2300      	movs	r3, #0
 800410e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004112:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004116:	460b      	mov	r3, r1
 8004118:	4313      	orrs	r3, r2
 800411a:	d039      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800411c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004120:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004122:	2b03      	cmp	r3, #3
 8004124:	d81c      	bhi.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004126:	a201      	add	r2, pc, #4	@ (adr r2, 800412c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800412c:	08004169 	.word	0x08004169
 8004130:	0800413d 	.word	0x0800413d
 8004134:	0800414b 	.word	0x0800414b
 8004138:	08004169 	.word	0x08004169
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800413c:	4b67      	ldr	r3, [pc, #412]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800413e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004140:	4a66      	ldr	r2, [pc, #408]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004142:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004146:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004148:	e00f      	b.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800414a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800414e:	3308      	adds	r3, #8
 8004150:	2102      	movs	r1, #2
 8004152:	4618      	mov	r0, r3
 8004154:	f001 ffd4 	bl	8006100 <RCCEx_PLL2_Config>
 8004158:	4603      	mov	r3, r0
 800415a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800415e:	e004      	b.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004166:	e000      	b.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004168:	bf00      	nop
    }

    if (ret == HAL_OK)
 800416a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800416e:	2b00      	cmp	r3, #0
 8004170:	d10a      	bne.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004172:	4b5a      	ldr	r3, [pc, #360]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004176:	f023 0103 	bic.w	r1, r3, #3
 800417a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800417e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004180:	4a56      	ldr	r2, [pc, #344]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004182:	430b      	orrs	r3, r1
 8004184:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004186:	e003      	b.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004188:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800418c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004190:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004198:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800419c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80041a0:	2300      	movs	r3, #0
 80041a2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80041a6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80041aa:	460b      	mov	r3, r1
 80041ac:	4313      	orrs	r3, r2
 80041ae:	f000 809f 	beq.w	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041b2:	4b4b      	ldr	r3, [pc, #300]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a4a      	ldr	r2, [pc, #296]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80041b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041be:	f7fd faef 	bl	80017a0 <HAL_GetTick>
 80041c2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041c6:	e00b      	b.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041c8:	f7fd faea 	bl	80017a0 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	2b64      	cmp	r3, #100	@ 0x64
 80041d6:	d903      	bls.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041de:	e005      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041e0:	4b3f      	ldr	r3, [pc, #252]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d0ed      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80041ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d179      	bne.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80041f4:	4b39      	ldr	r3, [pc, #228]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041f6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80041f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041fc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004200:	4053      	eors	r3, r2
 8004202:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004206:	2b00      	cmp	r3, #0
 8004208:	d015      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800420a:	4b34      	ldr	r3, [pc, #208]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800420c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800420e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004212:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004216:	4b31      	ldr	r3, [pc, #196]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004218:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800421a:	4a30      	ldr	r2, [pc, #192]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800421c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004220:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004222:	4b2e      	ldr	r3, [pc, #184]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004224:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004226:	4a2d      	ldr	r2, [pc, #180]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004228:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800422c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800422e:	4a2b      	ldr	r2, [pc, #172]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004230:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004234:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004236:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800423a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800423e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004242:	d118      	bne.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004244:	f7fd faac 	bl	80017a0 <HAL_GetTick>
 8004248:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800424c:	e00d      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800424e:	f7fd faa7 	bl	80017a0 <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004258:	1ad2      	subs	r2, r2, r3
 800425a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800425e:	429a      	cmp	r2, r3
 8004260:	d903      	bls.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8004268:	e005      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800426a:	4b1c      	ldr	r3, [pc, #112]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800426c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800426e:	f003 0302 	and.w	r3, r3, #2
 8004272:	2b00      	cmp	r3, #0
 8004274:	d0eb      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004276:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800427a:	2b00      	cmp	r3, #0
 800427c:	d129      	bne.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800427e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004282:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004286:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800428a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800428e:	d10e      	bne.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004290:	4b12      	ldr	r3, [pc, #72]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004292:	691b      	ldr	r3, [r3, #16]
 8004294:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004298:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800429c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80042a0:	091a      	lsrs	r2, r3, #4
 80042a2:	4b10      	ldr	r3, [pc, #64]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80042a4:	4013      	ands	r3, r2
 80042a6:	4a0d      	ldr	r2, [pc, #52]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042a8:	430b      	orrs	r3, r1
 80042aa:	6113      	str	r3, [r2, #16]
 80042ac:	e005      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80042ae:	4b0b      	ldr	r3, [pc, #44]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	4a0a      	ldr	r2, [pc, #40]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042b4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80042b8:	6113      	str	r3, [r2, #16]
 80042ba:	4b08      	ldr	r3, [pc, #32]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042bc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80042be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80042c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042ca:	4a04      	ldr	r2, [pc, #16]	@ (80042dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042cc:	430b      	orrs	r3, r1
 80042ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80042d0:	e00e      	b.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80042d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80042da:	e009      	b.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80042dc:	58024400 	.word	0x58024400
 80042e0:	58024800 	.word	0x58024800
 80042e4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80042f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f8:	f002 0301 	and.w	r3, r2, #1
 80042fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004300:	2300      	movs	r3, #0
 8004302:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004306:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800430a:	460b      	mov	r3, r1
 800430c:	4313      	orrs	r3, r2
 800430e:	f000 8089 	beq.w	8004424 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004312:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004316:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004318:	2b28      	cmp	r3, #40	@ 0x28
 800431a:	d86b      	bhi.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800431c:	a201      	add	r2, pc, #4	@ (adr r2, 8004324 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800431e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004322:	bf00      	nop
 8004324:	080043fd 	.word	0x080043fd
 8004328:	080043f5 	.word	0x080043f5
 800432c:	080043f5 	.word	0x080043f5
 8004330:	080043f5 	.word	0x080043f5
 8004334:	080043f5 	.word	0x080043f5
 8004338:	080043f5 	.word	0x080043f5
 800433c:	080043f5 	.word	0x080043f5
 8004340:	080043f5 	.word	0x080043f5
 8004344:	080043c9 	.word	0x080043c9
 8004348:	080043f5 	.word	0x080043f5
 800434c:	080043f5 	.word	0x080043f5
 8004350:	080043f5 	.word	0x080043f5
 8004354:	080043f5 	.word	0x080043f5
 8004358:	080043f5 	.word	0x080043f5
 800435c:	080043f5 	.word	0x080043f5
 8004360:	080043f5 	.word	0x080043f5
 8004364:	080043df 	.word	0x080043df
 8004368:	080043f5 	.word	0x080043f5
 800436c:	080043f5 	.word	0x080043f5
 8004370:	080043f5 	.word	0x080043f5
 8004374:	080043f5 	.word	0x080043f5
 8004378:	080043f5 	.word	0x080043f5
 800437c:	080043f5 	.word	0x080043f5
 8004380:	080043f5 	.word	0x080043f5
 8004384:	080043fd 	.word	0x080043fd
 8004388:	080043f5 	.word	0x080043f5
 800438c:	080043f5 	.word	0x080043f5
 8004390:	080043f5 	.word	0x080043f5
 8004394:	080043f5 	.word	0x080043f5
 8004398:	080043f5 	.word	0x080043f5
 800439c:	080043f5 	.word	0x080043f5
 80043a0:	080043f5 	.word	0x080043f5
 80043a4:	080043fd 	.word	0x080043fd
 80043a8:	080043f5 	.word	0x080043f5
 80043ac:	080043f5 	.word	0x080043f5
 80043b0:	080043f5 	.word	0x080043f5
 80043b4:	080043f5 	.word	0x080043f5
 80043b8:	080043f5 	.word	0x080043f5
 80043bc:	080043f5 	.word	0x080043f5
 80043c0:	080043f5 	.word	0x080043f5
 80043c4:	080043fd 	.word	0x080043fd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80043c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043cc:	3308      	adds	r3, #8
 80043ce:	2101      	movs	r1, #1
 80043d0:	4618      	mov	r0, r3
 80043d2:	f001 fe95 	bl	8006100 <RCCEx_PLL2_Config>
 80043d6:	4603      	mov	r3, r0
 80043d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80043dc:	e00f      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80043de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043e2:	3328      	adds	r3, #40	@ 0x28
 80043e4:	2101      	movs	r1, #1
 80043e6:	4618      	mov	r0, r3
 80043e8:	f001 ff3c 	bl	8006264 <RCCEx_PLL3_Config>
 80043ec:	4603      	mov	r3, r0
 80043ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80043f2:	e004      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80043fa:	e000      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80043fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004402:	2b00      	cmp	r3, #0
 8004404:	d10a      	bne.n	800441c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004406:	4bbf      	ldr	r3, [pc, #764]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004408:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800440a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800440e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004412:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004414:	4abb      	ldr	r2, [pc, #748]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004416:	430b      	orrs	r3, r1
 8004418:	6553      	str	r3, [r2, #84]	@ 0x54
 800441a:	e003      	b.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800441c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004420:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004424:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800442c:	f002 0302 	and.w	r3, r2, #2
 8004430:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004434:	2300      	movs	r3, #0
 8004436:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800443a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800443e:	460b      	mov	r3, r1
 8004440:	4313      	orrs	r3, r2
 8004442:	d041      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004444:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004448:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800444a:	2b05      	cmp	r3, #5
 800444c:	d824      	bhi.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800444e:	a201      	add	r2, pc, #4	@ (adr r2, 8004454 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004454:	080044a1 	.word	0x080044a1
 8004458:	0800446d 	.word	0x0800446d
 800445c:	08004483 	.word	0x08004483
 8004460:	080044a1 	.word	0x080044a1
 8004464:	080044a1 	.word	0x080044a1
 8004468:	080044a1 	.word	0x080044a1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800446c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004470:	3308      	adds	r3, #8
 8004472:	2101      	movs	r1, #1
 8004474:	4618      	mov	r0, r3
 8004476:	f001 fe43 	bl	8006100 <RCCEx_PLL2_Config>
 800447a:	4603      	mov	r3, r0
 800447c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004480:	e00f      	b.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004482:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004486:	3328      	adds	r3, #40	@ 0x28
 8004488:	2101      	movs	r1, #1
 800448a:	4618      	mov	r0, r3
 800448c:	f001 feea 	bl	8006264 <RCCEx_PLL3_Config>
 8004490:	4603      	mov	r3, r0
 8004492:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004496:	e004      	b.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800449e:	e000      	b.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80044a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d10a      	bne.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80044aa:	4b96      	ldr	r3, [pc, #600]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80044ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044ae:	f023 0107 	bic.w	r1, r3, #7
 80044b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80044b8:	4a92      	ldr	r2, [pc, #584]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80044ba:	430b      	orrs	r3, r1
 80044bc:	6553      	str	r3, [r2, #84]	@ 0x54
 80044be:	e003      	b.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80044c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d0:	f002 0304 	and.w	r3, r2, #4
 80044d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80044d8:	2300      	movs	r3, #0
 80044da:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80044de:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80044e2:	460b      	mov	r3, r1
 80044e4:	4313      	orrs	r3, r2
 80044e6:	d044      	beq.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80044e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044f0:	2b05      	cmp	r3, #5
 80044f2:	d825      	bhi.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80044f4:	a201      	add	r2, pc, #4	@ (adr r2, 80044fc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80044f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044fa:	bf00      	nop
 80044fc:	08004549 	.word	0x08004549
 8004500:	08004515 	.word	0x08004515
 8004504:	0800452b 	.word	0x0800452b
 8004508:	08004549 	.word	0x08004549
 800450c:	08004549 	.word	0x08004549
 8004510:	08004549 	.word	0x08004549
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004514:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004518:	3308      	adds	r3, #8
 800451a:	2101      	movs	r1, #1
 800451c:	4618      	mov	r0, r3
 800451e:	f001 fdef 	bl	8006100 <RCCEx_PLL2_Config>
 8004522:	4603      	mov	r3, r0
 8004524:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004528:	e00f      	b.n	800454a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800452a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800452e:	3328      	adds	r3, #40	@ 0x28
 8004530:	2101      	movs	r1, #1
 8004532:	4618      	mov	r0, r3
 8004534:	f001 fe96 	bl	8006264 <RCCEx_PLL3_Config>
 8004538:	4603      	mov	r3, r0
 800453a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800453e:	e004      	b.n	800454a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004546:	e000      	b.n	800454a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004548:	bf00      	nop
    }

    if (ret == HAL_OK)
 800454a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800454e:	2b00      	cmp	r3, #0
 8004550:	d10b      	bne.n	800456a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004552:	4b6c      	ldr	r3, [pc, #432]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004556:	f023 0107 	bic.w	r1, r3, #7
 800455a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800455e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004562:	4a68      	ldr	r2, [pc, #416]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004564:	430b      	orrs	r3, r1
 8004566:	6593      	str	r3, [r2, #88]	@ 0x58
 8004568:	e003      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800456a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800456e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004572:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800457a:	f002 0320 	and.w	r3, r2, #32
 800457e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004582:	2300      	movs	r3, #0
 8004584:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004588:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800458c:	460b      	mov	r3, r1
 800458e:	4313      	orrs	r3, r2
 8004590:	d055      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004592:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004596:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800459a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800459e:	d033      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80045a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80045a4:	d82c      	bhi.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80045a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045aa:	d02f      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80045ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045b0:	d826      	bhi.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80045b2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80045b6:	d02b      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80045b8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80045bc:	d820      	bhi.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80045be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80045c2:	d012      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80045c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80045c8:	d81a      	bhi.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d022      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80045ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80045d2:	d115      	bne.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80045d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045d8:	3308      	adds	r3, #8
 80045da:	2100      	movs	r1, #0
 80045dc:	4618      	mov	r0, r3
 80045de:	f001 fd8f 	bl	8006100 <RCCEx_PLL2_Config>
 80045e2:	4603      	mov	r3, r0
 80045e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80045e8:	e015      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80045ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ee:	3328      	adds	r3, #40	@ 0x28
 80045f0:	2102      	movs	r1, #2
 80045f2:	4618      	mov	r0, r3
 80045f4:	f001 fe36 	bl	8006264 <RCCEx_PLL3_Config>
 80045f8:	4603      	mov	r3, r0
 80045fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80045fe:	e00a      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004606:	e006      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004608:	bf00      	nop
 800460a:	e004      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800460c:	bf00      	nop
 800460e:	e002      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004610:	bf00      	nop
 8004612:	e000      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004614:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004616:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800461a:	2b00      	cmp	r3, #0
 800461c:	d10b      	bne.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800461e:	4b39      	ldr	r3, [pc, #228]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004620:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004622:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004626:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800462a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800462e:	4a35      	ldr	r2, [pc, #212]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004630:	430b      	orrs	r3, r1
 8004632:	6553      	str	r3, [r2, #84]	@ 0x54
 8004634:	e003      	b.n	800463e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004636:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800463a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800463e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004646:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800464a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800464e:	2300      	movs	r3, #0
 8004650:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004654:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004658:	460b      	mov	r3, r1
 800465a:	4313      	orrs	r3, r2
 800465c:	d058      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800465e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004662:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004666:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800466a:	d033      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800466c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004670:	d82c      	bhi.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004672:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004676:	d02f      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004678:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800467c:	d826      	bhi.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800467e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004682:	d02b      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004684:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004688:	d820      	bhi.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800468a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800468e:	d012      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004690:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004694:	d81a      	bhi.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004696:	2b00      	cmp	r3, #0
 8004698:	d022      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800469a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800469e:	d115      	bne.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046a4:	3308      	adds	r3, #8
 80046a6:	2100      	movs	r1, #0
 80046a8:	4618      	mov	r0, r3
 80046aa:	f001 fd29 	bl	8006100 <RCCEx_PLL2_Config>
 80046ae:	4603      	mov	r3, r0
 80046b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80046b4:	e015      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80046b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ba:	3328      	adds	r3, #40	@ 0x28
 80046bc:	2102      	movs	r1, #2
 80046be:	4618      	mov	r0, r3
 80046c0:	f001 fdd0 	bl	8006264 <RCCEx_PLL3_Config>
 80046c4:	4603      	mov	r3, r0
 80046c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80046ca:	e00a      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80046d2:	e006      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80046d4:	bf00      	nop
 80046d6:	e004      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80046d8:	bf00      	nop
 80046da:	e002      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80046dc:	bf00      	nop
 80046de:	e000      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80046e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d10e      	bne.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80046ea:	4b06      	ldr	r3, [pc, #24]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80046ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046ee:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80046f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80046fa:	4a02      	ldr	r2, [pc, #8]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80046fc:	430b      	orrs	r3, r1
 80046fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8004700:	e006      	b.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004702:	bf00      	nop
 8004704:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004708:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800470c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004710:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004718:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800471c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004720:	2300      	movs	r3, #0
 8004722:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004726:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800472a:	460b      	mov	r3, r1
 800472c:	4313      	orrs	r3, r2
 800472e:	d055      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004730:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004734:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004738:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800473c:	d033      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800473e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004742:	d82c      	bhi.n	800479e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004744:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004748:	d02f      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800474a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800474e:	d826      	bhi.n	800479e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004750:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004754:	d02b      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004756:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800475a:	d820      	bhi.n	800479e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800475c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004760:	d012      	beq.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004762:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004766:	d81a      	bhi.n	800479e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004768:	2b00      	cmp	r3, #0
 800476a:	d022      	beq.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800476c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004770:	d115      	bne.n	800479e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004772:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004776:	3308      	adds	r3, #8
 8004778:	2100      	movs	r1, #0
 800477a:	4618      	mov	r0, r3
 800477c:	f001 fcc0 	bl	8006100 <RCCEx_PLL2_Config>
 8004780:	4603      	mov	r3, r0
 8004782:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004786:	e015      	b.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004788:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800478c:	3328      	adds	r3, #40	@ 0x28
 800478e:	2102      	movs	r1, #2
 8004790:	4618      	mov	r0, r3
 8004792:	f001 fd67 	bl	8006264 <RCCEx_PLL3_Config>
 8004796:	4603      	mov	r3, r0
 8004798:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800479c:	e00a      	b.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80047a4:	e006      	b.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80047a6:	bf00      	nop
 80047a8:	e004      	b.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80047aa:	bf00      	nop
 80047ac:	e002      	b.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80047ae:	bf00      	nop
 80047b0:	e000      	b.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80047b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d10b      	bne.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80047bc:	4ba1      	ldr	r3, [pc, #644]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047c0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80047c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80047cc:	4a9d      	ldr	r2, [pc, #628]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047ce:	430b      	orrs	r3, r1
 80047d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80047d2:	e003      	b.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80047dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e4:	f002 0308 	and.w	r3, r2, #8
 80047e8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80047ec:	2300      	movs	r3, #0
 80047ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80047f2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80047f6:	460b      	mov	r3, r1
 80047f8:	4313      	orrs	r3, r2
 80047fa:	d01e      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80047fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004800:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004804:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004808:	d10c      	bne.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800480a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800480e:	3328      	adds	r3, #40	@ 0x28
 8004810:	2102      	movs	r1, #2
 8004812:	4618      	mov	r0, r3
 8004814:	f001 fd26 	bl	8006264 <RCCEx_PLL3_Config>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d002      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004824:	4b87      	ldr	r3, [pc, #540]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004826:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004828:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800482c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004830:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004834:	4a83      	ldr	r2, [pc, #524]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004836:	430b      	orrs	r3, r1
 8004838:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800483a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800483e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004842:	f002 0310 	and.w	r3, r2, #16
 8004846:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800484a:	2300      	movs	r3, #0
 800484c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004850:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004854:	460b      	mov	r3, r1
 8004856:	4313      	orrs	r3, r2
 8004858:	d01e      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800485a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800485e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004862:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004866:	d10c      	bne.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004868:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800486c:	3328      	adds	r3, #40	@ 0x28
 800486e:	2102      	movs	r1, #2
 8004870:	4618      	mov	r0, r3
 8004872:	f001 fcf7 	bl	8006264 <RCCEx_PLL3_Config>
 8004876:	4603      	mov	r3, r0
 8004878:	2b00      	cmp	r3, #0
 800487a:	d002      	beq.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004882:	4b70      	ldr	r3, [pc, #448]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004886:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800488a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800488e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004892:	4a6c      	ldr	r2, [pc, #432]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004894:	430b      	orrs	r3, r1
 8004896:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004898:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800489c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80048a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80048a8:	2300      	movs	r3, #0
 80048aa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80048ae:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80048b2:	460b      	mov	r3, r1
 80048b4:	4313      	orrs	r3, r2
 80048b6:	d03e      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80048b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80048c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80048c4:	d022      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80048c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80048ca:	d81b      	bhi.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d003      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80048d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048d4:	d00b      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80048d6:	e015      	b.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80048d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048dc:	3308      	adds	r3, #8
 80048de:	2100      	movs	r1, #0
 80048e0:	4618      	mov	r0, r3
 80048e2:	f001 fc0d 	bl	8006100 <RCCEx_PLL2_Config>
 80048e6:	4603      	mov	r3, r0
 80048e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80048ec:	e00f      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80048ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048f2:	3328      	adds	r3, #40	@ 0x28
 80048f4:	2102      	movs	r1, #2
 80048f6:	4618      	mov	r0, r3
 80048f8:	f001 fcb4 	bl	8006264 <RCCEx_PLL3_Config>
 80048fc:	4603      	mov	r3, r0
 80048fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004902:	e004      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800490a:	e000      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800490c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800490e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004912:	2b00      	cmp	r3, #0
 8004914:	d10b      	bne.n	800492e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004916:	4b4b      	ldr	r3, [pc, #300]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004918:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800491a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800491e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004922:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004926:	4a47      	ldr	r2, [pc, #284]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004928:	430b      	orrs	r3, r1
 800492a:	6593      	str	r3, [r2, #88]	@ 0x58
 800492c:	e003      	b.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800492e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004932:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004936:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800493a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800493e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004942:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004944:	2300      	movs	r3, #0
 8004946:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004948:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800494c:	460b      	mov	r3, r1
 800494e:	4313      	orrs	r3, r2
 8004950:	d03b      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004952:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004956:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800495a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800495e:	d01f      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004960:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004964:	d818      	bhi.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004966:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800496a:	d003      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800496c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004970:	d007      	beq.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004972:	e011      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004974:	4b33      	ldr	r3, [pc, #204]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004978:	4a32      	ldr	r2, [pc, #200]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800497a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800497e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004980:	e00f      	b.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004982:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004986:	3328      	adds	r3, #40	@ 0x28
 8004988:	2101      	movs	r1, #1
 800498a:	4618      	mov	r0, r3
 800498c:	f001 fc6a 	bl	8006264 <RCCEx_PLL3_Config>
 8004990:	4603      	mov	r3, r0
 8004992:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004996:	e004      	b.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800499e:	e000      	b.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80049a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d10b      	bne.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80049aa:	4b26      	ldr	r3, [pc, #152]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049ae:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80049b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049ba:	4a22      	ldr	r2, [pc, #136]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049bc:	430b      	orrs	r3, r1
 80049be:	6553      	str	r3, [r2, #84]	@ 0x54
 80049c0:	e003      	b.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80049ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80049d6:	673b      	str	r3, [r7, #112]	@ 0x70
 80049d8:	2300      	movs	r3, #0
 80049da:	677b      	str	r3, [r7, #116]	@ 0x74
 80049dc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80049e0:	460b      	mov	r3, r1
 80049e2:	4313      	orrs	r3, r2
 80049e4:	d034      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80049e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d003      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80049f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049f4:	d007      	beq.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80049f6:	e011      	b.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049f8:	4b12      	ldr	r3, [pc, #72]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049fc:	4a11      	ldr	r2, [pc, #68]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004a04:	e00e      	b.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a0a:	3308      	adds	r3, #8
 8004a0c:	2102      	movs	r1, #2
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f001 fb76 	bl	8006100 <RCCEx_PLL2_Config>
 8004a14:	4603      	mov	r3, r0
 8004a16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004a1a:	e003      	b.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d10d      	bne.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004a2c:	4b05      	ldr	r3, [pc, #20]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a30:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004a34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a3a:	4a02      	ldr	r2, [pc, #8]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a3c:	430b      	orrs	r3, r1
 8004a3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004a40:	e006      	b.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004a42:	bf00      	nop
 8004a44:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a4c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a58:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004a5c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a5e:	2300      	movs	r3, #0
 8004a60:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004a62:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004a66:	460b      	mov	r3, r1
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	d00c      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a70:	3328      	adds	r3, #40	@ 0x28
 8004a72:	2102      	movs	r1, #2
 8004a74:	4618      	mov	r0, r3
 8004a76:	f001 fbf5 	bl	8006264 <RCCEx_PLL3_Config>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d002      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a8e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004a92:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a94:	2300      	movs	r3, #0
 8004a96:	667b      	str	r3, [r7, #100]	@ 0x64
 8004a98:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	d038      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004aaa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004aae:	d018      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004ab0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ab4:	d811      	bhi.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004ab6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004aba:	d014      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004abc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ac0:	d80b      	bhi.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d011      	beq.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004ac6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004aca:	d106      	bne.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004acc:	4bc3      	ldr	r3, [pc, #780]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ad0:	4ac2      	ldr	r2, [pc, #776]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ad2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ad6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004ad8:	e008      	b.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ae0:	e004      	b.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004ae2:	bf00      	nop
 8004ae4:	e002      	b.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004ae6:	bf00      	nop
 8004ae8:	e000      	b.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004aea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004aec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d10b      	bne.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004af4:	4bb9      	ldr	r3, [pc, #740]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004af6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004af8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004afc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b04:	4ab5      	ldr	r2, [pc, #724]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b06:	430b      	orrs	r3, r1
 8004b08:	6553      	str	r3, [r2, #84]	@ 0x54
 8004b0a:	e003      	b.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b10:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b1c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004b20:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004b22:	2300      	movs	r3, #0
 8004b24:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004b26:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004b2a:	460b      	mov	r3, r1
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	d009      	beq.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004b30:	4baa      	ldr	r3, [pc, #680]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b34:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004b38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b3e:	4aa7      	ldr	r2, [pc, #668]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b40:	430b      	orrs	r3, r1
 8004b42:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b4c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004b50:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b52:	2300      	movs	r3, #0
 8004b54:	657b      	str	r3, [r7, #84]	@ 0x54
 8004b56:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004b5a:	460b      	mov	r3, r1
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	d00a      	beq.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004b60:	4b9e      	ldr	r3, [pc, #632]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b62:	691b      	ldr	r3, [r3, #16]
 8004b64:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b6c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004b70:	4a9a      	ldr	r2, [pc, #616]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b72:	430b      	orrs	r3, r1
 8004b74:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b7e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004b82:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b84:	2300      	movs	r3, #0
 8004b86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b88:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	d009      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004b92:	4b92      	ldr	r3, [pc, #584]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b96:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ba0:	4a8e      	ldr	r2, [pc, #568]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ba2:	430b      	orrs	r3, r1
 8004ba4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004ba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bae:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004bb2:	643b      	str	r3, [r7, #64]	@ 0x40
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bb8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	d00e      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004bc2:	4b86      	ldr	r3, [pc, #536]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	4a85      	ldr	r2, [pc, #532]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bc8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004bcc:	6113      	str	r3, [r2, #16]
 8004bce:	4b83      	ldr	r3, [pc, #524]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bd0:	6919      	ldr	r1, [r3, #16]
 8004bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bd6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004bda:	4a80      	ldr	r2, [pc, #512]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bdc:	430b      	orrs	r3, r1
 8004bde:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004be8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004bec:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004bee:	2300      	movs	r3, #0
 8004bf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004bf2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004bf6:	460b      	mov	r3, r1
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	d009      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004bfc:	4b77      	ldr	r3, [pc, #476]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c00:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c0a:	4a74      	ldr	r2, [pc, #464]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c0c:	430b      	orrs	r3, r1
 8004c0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c18:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004c1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c1e:	2300      	movs	r3, #0
 8004c20:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c22:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004c26:	460b      	mov	r3, r1
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	d00a      	beq.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004c2c:	4b6b      	ldr	r3, [pc, #428]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c30:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004c34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c3c:	4a67      	ldr	r2, [pc, #412]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c3e:	430b      	orrs	r3, r1
 8004c40:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c4a:	2100      	movs	r1, #0
 8004c4c:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004c4e:	f003 0301 	and.w	r3, r3, #1
 8004c52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c54:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004c58:	460b      	mov	r3, r1
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	d011      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c62:	3308      	adds	r3, #8
 8004c64:	2100      	movs	r1, #0
 8004c66:	4618      	mov	r0, r3
 8004c68:	f001 fa4a 	bl	8006100 <RCCEx_PLL2_Config>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004c72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d003      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c8a:	2100      	movs	r1, #0
 8004c8c:	6239      	str	r1, [r7, #32]
 8004c8e:	f003 0302 	and.w	r3, r3, #2
 8004c92:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c94:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004c98:	460b      	mov	r3, r1
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	d011      	beq.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ca2:	3308      	adds	r3, #8
 8004ca4:	2101      	movs	r1, #1
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f001 fa2a 	bl	8006100 <RCCEx_PLL2_Config>
 8004cac:	4603      	mov	r3, r0
 8004cae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004cb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d003      	beq.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cbe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cca:	2100      	movs	r1, #0
 8004ccc:	61b9      	str	r1, [r7, #24]
 8004cce:	f003 0304 	and.w	r3, r3, #4
 8004cd2:	61fb      	str	r3, [r7, #28]
 8004cd4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004cd8:	460b      	mov	r3, r1
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	d011      	beq.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ce2:	3308      	adds	r3, #8
 8004ce4:	2102      	movs	r1, #2
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f001 fa0a 	bl	8006100 <RCCEx_PLL2_Config>
 8004cec:	4603      	mov	r3, r0
 8004cee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004cf2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d003      	beq.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cfe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d0a:	2100      	movs	r1, #0
 8004d0c:	6139      	str	r1, [r7, #16]
 8004d0e:	f003 0308 	and.w	r3, r3, #8
 8004d12:	617b      	str	r3, [r7, #20]
 8004d14:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004d18:	460b      	mov	r3, r1
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	d011      	beq.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d22:	3328      	adds	r3, #40	@ 0x28
 8004d24:	2100      	movs	r1, #0
 8004d26:	4618      	mov	r0, r3
 8004d28:	f001 fa9c 	bl	8006264 <RCCEx_PLL3_Config>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004d32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d003      	beq.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d4a:	2100      	movs	r1, #0
 8004d4c:	60b9      	str	r1, [r7, #8]
 8004d4e:	f003 0310 	and.w	r3, r3, #16
 8004d52:	60fb      	str	r3, [r7, #12]
 8004d54:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004d58:	460b      	mov	r3, r1
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	d011      	beq.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d62:	3328      	adds	r3, #40	@ 0x28
 8004d64:	2101      	movs	r1, #1
 8004d66:	4618      	mov	r0, r3
 8004d68:	f001 fa7c 	bl	8006264 <RCCEx_PLL3_Config>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004d72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d003      	beq.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d8a:	2100      	movs	r1, #0
 8004d8c:	6039      	str	r1, [r7, #0]
 8004d8e:	f003 0320 	and.w	r3, r3, #32
 8004d92:	607b      	str	r3, [r7, #4]
 8004d94:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004d98:	460b      	mov	r3, r1
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	d011      	beq.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004da2:	3328      	adds	r3, #40	@ 0x28
 8004da4:	2102      	movs	r1, #2
 8004da6:	4618      	mov	r0, r3
 8004da8:	f001 fa5c 	bl	8006264 <RCCEx_PLL3_Config>
 8004dac:	4603      	mov	r3, r0
 8004dae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004db2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d003      	beq.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dbe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004dc2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d101      	bne.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	e000      	b.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ddc:	58024400 	.word	0x58024400

08004de0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b090      	sub	sp, #64	@ 0x40
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004dea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004dee:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8004df2:	430b      	orrs	r3, r1
 8004df4:	f040 8094 	bne.w	8004f20 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8004df8:	4b9e      	ldr	r3, [pc, #632]	@ (8005074 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004dfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dfc:	f003 0307 	and.w	r3, r3, #7
 8004e00:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8004e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e04:	2b04      	cmp	r3, #4
 8004e06:	f200 8087 	bhi.w	8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8004e0a:	a201      	add	r2, pc, #4	@ (adr r2, 8004e10 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8004e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e10:	08004e25 	.word	0x08004e25
 8004e14:	08004e4d 	.word	0x08004e4d
 8004e18:	08004e75 	.word	0x08004e75
 8004e1c:	08004f11 	.word	0x08004f11
 8004e20:	08004e9d 	.word	0x08004e9d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004e24:	4b93      	ldr	r3, [pc, #588]	@ (8005074 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e2c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004e30:	d108      	bne.n	8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004e32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004e36:	4618      	mov	r0, r3
 8004e38:	f001 f810 	bl	8005e5c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004e40:	f000 bd45 	b.w	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004e44:	2300      	movs	r3, #0
 8004e46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e48:	f000 bd41 	b.w	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004e4c:	4b89      	ldr	r3, [pc, #548]	@ (8005074 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e54:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e58:	d108      	bne.n	8004e6c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e5a:	f107 0318 	add.w	r3, r7, #24
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f000 fd54 	bl	800590c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004e64:	69bb      	ldr	r3, [r7, #24]
 8004e66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004e68:	f000 bd31 	b.w	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e70:	f000 bd2d 	b.w	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004e74:	4b7f      	ldr	r3, [pc, #508]	@ (8005074 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e80:	d108      	bne.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004e82:	f107 030c 	add.w	r3, r7, #12
 8004e86:	4618      	mov	r0, r3
 8004e88:	f000 fe94 	bl	8005bb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004e90:	f000 bd1d 	b.w	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004e94:	2300      	movs	r3, #0
 8004e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e98:	f000 bd19 	b.w	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004e9c:	4b75      	ldr	r3, [pc, #468]	@ (8005074 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004e9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ea0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004ea4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004ea6:	4b73      	ldr	r3, [pc, #460]	@ (8005074 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 0304 	and.w	r3, r3, #4
 8004eae:	2b04      	cmp	r3, #4
 8004eb0:	d10c      	bne.n	8004ecc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8004eb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d109      	bne.n	8004ecc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004eb8:	4b6e      	ldr	r3, [pc, #440]	@ (8005074 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	08db      	lsrs	r3, r3, #3
 8004ebe:	f003 0303 	and.w	r3, r3, #3
 8004ec2:	4a6d      	ldr	r2, [pc, #436]	@ (8005078 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004ec4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004eca:	e01f      	b.n	8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004ecc:	4b69      	ldr	r3, [pc, #420]	@ (8005074 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ed4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ed8:	d106      	bne.n	8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8004eda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004edc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004ee0:	d102      	bne.n	8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004ee2:	4b66      	ldr	r3, [pc, #408]	@ (800507c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8004ee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ee6:	e011      	b.n	8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004ee8:	4b62      	ldr	r3, [pc, #392]	@ (8005074 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ef0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ef4:	d106      	bne.n	8004f04 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8004ef6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ef8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004efc:	d102      	bne.n	8004f04 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004efe:	4b60      	ldr	r3, [pc, #384]	@ (8005080 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8004f00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f02:	e003      	b.n	8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004f04:	2300      	movs	r3, #0
 8004f06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8004f08:	f000 bce1 	b.w	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004f0c:	f000 bcdf 	b.w	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004f10:	4b5c      	ldr	r3, [pc, #368]	@ (8005084 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8004f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f14:	f000 bcdb 	b.w	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f1c:	f000 bcd7 	b.w	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8004f20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f24:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8004f28:	430b      	orrs	r3, r1
 8004f2a:	f040 80ad 	bne.w	8005088 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8004f2e:	4b51      	ldr	r3, [pc, #324]	@ (8005074 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004f30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f32:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8004f36:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8004f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f3e:	d056      	beq.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8004f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f46:	f200 8090 	bhi.w	800506a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8004f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f4c:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f4e:	f000 8088 	beq.w	8005062 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8004f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f54:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f56:	f200 8088 	bhi.w	800506a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8004f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f5c:	2b80      	cmp	r3, #128	@ 0x80
 8004f5e:	d032      	beq.n	8004fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8004f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f62:	2b80      	cmp	r3, #128	@ 0x80
 8004f64:	f200 8081 	bhi.w	800506a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8004f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d003      	beq.n	8004f76 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8004f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f70:	2b40      	cmp	r3, #64	@ 0x40
 8004f72:	d014      	beq.n	8004f9e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8004f74:	e079      	b.n	800506a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004f76:	4b3f      	ldr	r3, [pc, #252]	@ (8005074 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f7e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004f82:	d108      	bne.n	8004f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004f84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f000 ff67 	bl	8005e5c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004f92:	f000 bc9c 	b.w	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004f96:	2300      	movs	r3, #0
 8004f98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f9a:	f000 bc98 	b.w	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004f9e:	4b35      	ldr	r3, [pc, #212]	@ (8005074 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004fa6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004faa:	d108      	bne.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004fac:	f107 0318 	add.w	r3, r7, #24
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f000 fcab 	bl	800590c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004fba:	f000 bc88 	b.w	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004fc2:	f000 bc84 	b.w	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004fc6:	4b2b      	ldr	r3, [pc, #172]	@ (8005074 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004fce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004fd2:	d108      	bne.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004fd4:	f107 030c 	add.w	r3, r7, #12
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f000 fdeb 	bl	8005bb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004fe2:	f000 bc74 	b.w	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004fea:	f000 bc70 	b.w	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004fee:	4b21      	ldr	r3, [pc, #132]	@ (8005074 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004ff0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ff2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004ff6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004ff8:	4b1e      	ldr	r3, [pc, #120]	@ (8005074 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 0304 	and.w	r3, r3, #4
 8005000:	2b04      	cmp	r3, #4
 8005002:	d10c      	bne.n	800501e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8005004:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005006:	2b00      	cmp	r3, #0
 8005008:	d109      	bne.n	800501e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800500a:	4b1a      	ldr	r3, [pc, #104]	@ (8005074 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	08db      	lsrs	r3, r3, #3
 8005010:	f003 0303 	and.w	r3, r3, #3
 8005014:	4a18      	ldr	r2, [pc, #96]	@ (8005078 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005016:	fa22 f303 	lsr.w	r3, r2, r3
 800501a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800501c:	e01f      	b.n	800505e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800501e:	4b15      	ldr	r3, [pc, #84]	@ (8005074 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005026:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800502a:	d106      	bne.n	800503a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800502c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800502e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005032:	d102      	bne.n	800503a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005034:	4b11      	ldr	r3, [pc, #68]	@ (800507c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005036:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005038:	e011      	b.n	800505e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800503a:	4b0e      	ldr	r3, [pc, #56]	@ (8005074 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005042:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005046:	d106      	bne.n	8005056 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8005048:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800504a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800504e:	d102      	bne.n	8005056 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005050:	4b0b      	ldr	r3, [pc, #44]	@ (8005080 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005052:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005054:	e003      	b.n	800505e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005056:	2300      	movs	r3, #0
 8005058:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800505a:	f000 bc38 	b.w	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800505e:	f000 bc36 	b.w	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005062:	4b08      	ldr	r3, [pc, #32]	@ (8005084 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8005064:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005066:	f000 bc32 	b.w	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800506a:	2300      	movs	r3, #0
 800506c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800506e:	f000 bc2e 	b.w	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005072:	bf00      	nop
 8005074:	58024400 	.word	0x58024400
 8005078:	03d09000 	.word	0x03d09000
 800507c:	003d0900 	.word	0x003d0900
 8005080:	017d7840 	.word	0x017d7840
 8005084:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005088:	e9d7 2300 	ldrd	r2, r3, [r7]
 800508c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8005090:	430b      	orrs	r3, r1
 8005092:	f040 809c 	bne.w	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8005096:	4b9e      	ldr	r3, [pc, #632]	@ (8005310 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005098:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800509a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800509e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80050a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050a2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80050a6:	d054      	beq.n	8005152 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80050a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050aa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80050ae:	f200 808b 	bhi.w	80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80050b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050b4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80050b8:	f000 8083 	beq.w	80051c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80050bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050be:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80050c2:	f200 8081 	bhi.w	80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80050c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80050cc:	d02f      	beq.n	800512e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80050ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80050d4:	d878      	bhi.n	80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80050d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d004      	beq.n	80050e6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80050dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80050e2:	d012      	beq.n	800510a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80050e4:	e070      	b.n	80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80050e6:	4b8a      	ldr	r3, [pc, #552]	@ (8005310 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80050f2:	d107      	bne.n	8005104 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80050f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80050f8:	4618      	mov	r0, r3
 80050fa:	f000 feaf 	bl	8005e5c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80050fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005100:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005102:	e3e4      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005104:	2300      	movs	r3, #0
 8005106:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005108:	e3e1      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800510a:	4b81      	ldr	r3, [pc, #516]	@ (8005310 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005112:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005116:	d107      	bne.n	8005128 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005118:	f107 0318 	add.w	r3, r7, #24
 800511c:	4618      	mov	r0, r3
 800511e:	f000 fbf5 	bl	800590c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005126:	e3d2      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005128:	2300      	movs	r3, #0
 800512a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800512c:	e3cf      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800512e:	4b78      	ldr	r3, [pc, #480]	@ (8005310 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005136:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800513a:	d107      	bne.n	800514c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800513c:	f107 030c 	add.w	r3, r7, #12
 8005140:	4618      	mov	r0, r3
 8005142:	f000 fd37 	bl	8005bb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800514a:	e3c0      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800514c:	2300      	movs	r3, #0
 800514e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005150:	e3bd      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005152:	4b6f      	ldr	r3, [pc, #444]	@ (8005310 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005154:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005156:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800515a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800515c:	4b6c      	ldr	r3, [pc, #432]	@ (8005310 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 0304 	and.w	r3, r3, #4
 8005164:	2b04      	cmp	r3, #4
 8005166:	d10c      	bne.n	8005182 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8005168:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800516a:	2b00      	cmp	r3, #0
 800516c:	d109      	bne.n	8005182 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800516e:	4b68      	ldr	r3, [pc, #416]	@ (8005310 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	08db      	lsrs	r3, r3, #3
 8005174:	f003 0303 	and.w	r3, r3, #3
 8005178:	4a66      	ldr	r2, [pc, #408]	@ (8005314 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800517a:	fa22 f303 	lsr.w	r3, r2, r3
 800517e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005180:	e01e      	b.n	80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005182:	4b63      	ldr	r3, [pc, #396]	@ (8005310 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800518a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800518e:	d106      	bne.n	800519e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8005190:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005192:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005196:	d102      	bne.n	800519e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005198:	4b5f      	ldr	r3, [pc, #380]	@ (8005318 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800519a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800519c:	e010      	b.n	80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800519e:	4b5c      	ldr	r3, [pc, #368]	@ (8005310 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80051aa:	d106      	bne.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80051ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80051b2:	d102      	bne.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80051b4:	4b59      	ldr	r3, [pc, #356]	@ (800531c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80051b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80051b8:	e002      	b.n	80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80051ba:	2300      	movs	r3, #0
 80051bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80051be:	e386      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80051c0:	e385      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80051c2:	4b57      	ldr	r3, [pc, #348]	@ (8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80051c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80051c6:	e382      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80051c8:	2300      	movs	r3, #0
 80051ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80051cc:	e37f      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80051ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051d2:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80051d6:	430b      	orrs	r3, r1
 80051d8:	f040 80a7 	bne.w	800532a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80051dc:	4b4c      	ldr	r3, [pc, #304]	@ (8005310 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80051de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051e0:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80051e4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80051e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80051ec:	d055      	beq.n	800529a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80051ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051f0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80051f4:	f200 8096 	bhi.w	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80051f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051fa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80051fe:	f000 8084 	beq.w	800530a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8005202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005204:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005208:	f200 808c 	bhi.w	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800520c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800520e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005212:	d030      	beq.n	8005276 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8005214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005216:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800521a:	f200 8083 	bhi.w	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800521e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005220:	2b00      	cmp	r3, #0
 8005222:	d004      	beq.n	800522e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8005224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005226:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800522a:	d012      	beq.n	8005252 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800522c:	e07a      	b.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800522e:	4b38      	ldr	r3, [pc, #224]	@ (8005310 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005236:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800523a:	d107      	bne.n	800524c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800523c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005240:	4618      	mov	r0, r3
 8005242:	f000 fe0b 	bl	8005e5c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005248:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800524a:	e340      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800524c:	2300      	movs	r3, #0
 800524e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005250:	e33d      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005252:	4b2f      	ldr	r3, [pc, #188]	@ (8005310 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800525a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800525e:	d107      	bne.n	8005270 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005260:	f107 0318 	add.w	r3, r7, #24
 8005264:	4618      	mov	r0, r3
 8005266:	f000 fb51 	bl	800590c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800526e:	e32e      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005270:	2300      	movs	r3, #0
 8005272:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005274:	e32b      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005276:	4b26      	ldr	r3, [pc, #152]	@ (8005310 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800527e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005282:	d107      	bne.n	8005294 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005284:	f107 030c 	add.w	r3, r7, #12
 8005288:	4618      	mov	r0, r3
 800528a:	f000 fc93 	bl	8005bb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005292:	e31c      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005294:	2300      	movs	r3, #0
 8005296:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005298:	e319      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800529a:	4b1d      	ldr	r3, [pc, #116]	@ (8005310 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800529c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800529e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80052a2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80052a4:	4b1a      	ldr	r3, [pc, #104]	@ (8005310 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 0304 	and.w	r3, r3, #4
 80052ac:	2b04      	cmp	r3, #4
 80052ae:	d10c      	bne.n	80052ca <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80052b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d109      	bne.n	80052ca <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80052b6:	4b16      	ldr	r3, [pc, #88]	@ (8005310 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	08db      	lsrs	r3, r3, #3
 80052bc:	f003 0303 	and.w	r3, r3, #3
 80052c0:	4a14      	ldr	r2, [pc, #80]	@ (8005314 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80052c2:	fa22 f303 	lsr.w	r3, r2, r3
 80052c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80052c8:	e01e      	b.n	8005308 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80052ca:	4b11      	ldr	r3, [pc, #68]	@ (8005310 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052d6:	d106      	bne.n	80052e6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80052d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80052de:	d102      	bne.n	80052e6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80052e0:	4b0d      	ldr	r3, [pc, #52]	@ (8005318 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80052e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80052e4:	e010      	b.n	8005308 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80052e6:	4b0a      	ldr	r3, [pc, #40]	@ (8005310 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80052f2:	d106      	bne.n	8005302 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80052f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80052fa:	d102      	bne.n	8005302 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80052fc:	4b07      	ldr	r3, [pc, #28]	@ (800531c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80052fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005300:	e002      	b.n	8005308 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005302:	2300      	movs	r3, #0
 8005304:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005306:	e2e2      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005308:	e2e1      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800530a:	4b05      	ldr	r3, [pc, #20]	@ (8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800530c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800530e:	e2de      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005310:	58024400 	.word	0x58024400
 8005314:	03d09000 	.word	0x03d09000
 8005318:	003d0900 	.word	0x003d0900
 800531c:	017d7840 	.word	0x017d7840
 8005320:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8005324:	2300      	movs	r3, #0
 8005326:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005328:	e2d1      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800532a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800532e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8005332:	430b      	orrs	r3, r1
 8005334:	f040 809c 	bne.w	8005470 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8005338:	4b93      	ldr	r3, [pc, #588]	@ (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800533a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800533c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8005340:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005344:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005348:	d054      	beq.n	80053f4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800534a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800534c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005350:	f200 808b 	bhi.w	800546a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005356:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800535a:	f000 8083 	beq.w	8005464 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800535e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005360:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005364:	f200 8081 	bhi.w	800546a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800536a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800536e:	d02f      	beq.n	80053d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8005370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005372:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005376:	d878      	bhi.n	800546a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005378:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800537a:	2b00      	cmp	r3, #0
 800537c:	d004      	beq.n	8005388 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800537e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005380:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005384:	d012      	beq.n	80053ac <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8005386:	e070      	b.n	800546a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005388:	4b7f      	ldr	r3, [pc, #508]	@ (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005390:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005394:	d107      	bne.n	80053a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005396:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800539a:	4618      	mov	r0, r3
 800539c:	f000 fd5e 	bl	8005e5c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80053a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80053a4:	e293      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80053a6:	2300      	movs	r3, #0
 80053a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80053aa:	e290      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80053ac:	4b76      	ldr	r3, [pc, #472]	@ (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80053b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80053b8:	d107      	bne.n	80053ca <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80053ba:	f107 0318 	add.w	r3, r7, #24
 80053be:	4618      	mov	r0, r3
 80053c0:	f000 faa4 	bl	800590c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80053c4:	69bb      	ldr	r3, [r7, #24]
 80053c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80053c8:	e281      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80053ca:	2300      	movs	r3, #0
 80053cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80053ce:	e27e      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80053d0:	4b6d      	ldr	r3, [pc, #436]	@ (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80053d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80053dc:	d107      	bne.n	80053ee <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80053de:	f107 030c 	add.w	r3, r7, #12
 80053e2:	4618      	mov	r0, r3
 80053e4:	f000 fbe6 	bl	8005bb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80053ec:	e26f      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80053ee:	2300      	movs	r3, #0
 80053f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80053f2:	e26c      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80053f4:	4b64      	ldr	r3, [pc, #400]	@ (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80053f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053f8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80053fc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80053fe:	4b62      	ldr	r3, [pc, #392]	@ (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 0304 	and.w	r3, r3, #4
 8005406:	2b04      	cmp	r3, #4
 8005408:	d10c      	bne.n	8005424 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800540a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800540c:	2b00      	cmp	r3, #0
 800540e:	d109      	bne.n	8005424 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005410:	4b5d      	ldr	r3, [pc, #372]	@ (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	08db      	lsrs	r3, r3, #3
 8005416:	f003 0303 	and.w	r3, r3, #3
 800541a:	4a5c      	ldr	r2, [pc, #368]	@ (800558c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800541c:	fa22 f303 	lsr.w	r3, r2, r3
 8005420:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005422:	e01e      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005424:	4b58      	ldr	r3, [pc, #352]	@ (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800542c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005430:	d106      	bne.n	8005440 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8005432:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005434:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005438:	d102      	bne.n	8005440 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800543a:	4b55      	ldr	r3, [pc, #340]	@ (8005590 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800543c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800543e:	e010      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005440:	4b51      	ldr	r3, [pc, #324]	@ (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005448:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800544c:	d106      	bne.n	800545c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800544e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005450:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005454:	d102      	bne.n	800545c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005456:	4b4f      	ldr	r3, [pc, #316]	@ (8005594 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8005458:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800545a:	e002      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800545c:	2300      	movs	r3, #0
 800545e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005460:	e235      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005462:	e234      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005464:	4b4c      	ldr	r3, [pc, #304]	@ (8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8005466:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005468:	e231      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800546a:	2300      	movs	r3, #0
 800546c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800546e:	e22e      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8005470:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005474:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8005478:	430b      	orrs	r3, r1
 800547a:	f040 808f 	bne.w	800559c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800547e:	4b42      	ldr	r3, [pc, #264]	@ (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005480:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005482:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8005486:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8005488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800548a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800548e:	d06b      	beq.n	8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8005490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005492:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005496:	d874      	bhi.n	8005582 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800549a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800549e:	d056      	beq.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80054a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054a2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80054a6:	d86c      	bhi.n	8005582 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80054a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054aa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80054ae:	d03b      	beq.n	8005528 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80054b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054b2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80054b6:	d864      	bhi.n	8005582 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80054b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80054be:	d021      	beq.n	8005504 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80054c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80054c6:	d85c      	bhi.n	8005582 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80054c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d004      	beq.n	80054d8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80054ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054d4:	d004      	beq.n	80054e0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 80054d6:	e054      	b.n	8005582 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80054d8:	f7fe fa4c 	bl	8003974 <HAL_RCC_GetPCLK1Freq>
 80054dc:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80054de:	e1f6      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80054e0:	4b29      	ldr	r3, [pc, #164]	@ (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80054e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80054ec:	d107      	bne.n	80054fe <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80054ee:	f107 0318 	add.w	r3, r7, #24
 80054f2:	4618      	mov	r0, r3
 80054f4:	f000 fa0a 	bl	800590c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80054fc:	e1e7      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80054fe:	2300      	movs	r3, #0
 8005500:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005502:	e1e4      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005504:	4b20      	ldr	r3, [pc, #128]	@ (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800550c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005510:	d107      	bne.n	8005522 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005512:	f107 030c 	add.w	r3, r7, #12
 8005516:	4618      	mov	r0, r3
 8005518:	f000 fb4c 	bl	8005bb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005520:	e1d5      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005522:	2300      	movs	r3, #0
 8005524:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005526:	e1d2      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005528:	4b17      	ldr	r3, [pc, #92]	@ (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0304 	and.w	r3, r3, #4
 8005530:	2b04      	cmp	r3, #4
 8005532:	d109      	bne.n	8005548 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005534:	4b14      	ldr	r3, [pc, #80]	@ (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	08db      	lsrs	r3, r3, #3
 800553a:	f003 0303 	and.w	r3, r3, #3
 800553e:	4a13      	ldr	r2, [pc, #76]	@ (800558c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8005540:	fa22 f303 	lsr.w	r3, r2, r3
 8005544:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005546:	e1c2      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005548:	2300      	movs	r3, #0
 800554a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800554c:	e1bf      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800554e:	4b0e      	ldr	r3, [pc, #56]	@ (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005556:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800555a:	d102      	bne.n	8005562 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800555c:	4b0c      	ldr	r3, [pc, #48]	@ (8005590 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800555e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005560:	e1b5      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005562:	2300      	movs	r3, #0
 8005564:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005566:	e1b2      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005568:	4b07      	ldr	r3, [pc, #28]	@ (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005570:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005574:	d102      	bne.n	800557c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8005576:	4b07      	ldr	r3, [pc, #28]	@ (8005594 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8005578:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800557a:	e1a8      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800557c:	2300      	movs	r3, #0
 800557e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005580:	e1a5      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005582:	2300      	movs	r3, #0
 8005584:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005586:	e1a2      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005588:	58024400 	.word	0x58024400
 800558c:	03d09000 	.word	0x03d09000
 8005590:	003d0900 	.word	0x003d0900
 8005594:	017d7840 	.word	0x017d7840
 8005598:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800559c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055a0:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80055a4:	430b      	orrs	r3, r1
 80055a6:	d173      	bne.n	8005690 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80055a8:	4b9c      	ldr	r3, [pc, #624]	@ (800581c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80055aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80055b0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80055b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80055b8:	d02f      	beq.n	800561a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80055ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80055c0:	d863      	bhi.n	800568a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80055c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d004      	beq.n	80055d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80055c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055ce:	d012      	beq.n	80055f6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80055d0:	e05b      	b.n	800568a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80055d2:	4b92      	ldr	r3, [pc, #584]	@ (800581c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80055da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80055de:	d107      	bne.n	80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80055e0:	f107 0318 	add.w	r3, r7, #24
 80055e4:	4618      	mov	r0, r3
 80055e6:	f000 f991 	bl	800590c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80055ea:	69bb      	ldr	r3, [r7, #24]
 80055ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80055ee:	e16e      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80055f0:	2300      	movs	r3, #0
 80055f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80055f4:	e16b      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80055f6:	4b89      	ldr	r3, [pc, #548]	@ (800581c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80055fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005602:	d107      	bne.n	8005614 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005604:	f107 030c 	add.w	r3, r7, #12
 8005608:	4618      	mov	r0, r3
 800560a:	f000 fad3 	bl	8005bb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005612:	e15c      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005614:	2300      	movs	r3, #0
 8005616:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005618:	e159      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800561a:	4b80      	ldr	r3, [pc, #512]	@ (800581c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800561c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800561e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005622:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005624:	4b7d      	ldr	r3, [pc, #500]	@ (800581c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 0304 	and.w	r3, r3, #4
 800562c:	2b04      	cmp	r3, #4
 800562e:	d10c      	bne.n	800564a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8005630:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005632:	2b00      	cmp	r3, #0
 8005634:	d109      	bne.n	800564a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005636:	4b79      	ldr	r3, [pc, #484]	@ (800581c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	08db      	lsrs	r3, r3, #3
 800563c:	f003 0303 	and.w	r3, r3, #3
 8005640:	4a77      	ldr	r2, [pc, #476]	@ (8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8005642:	fa22 f303 	lsr.w	r3, r2, r3
 8005646:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005648:	e01e      	b.n	8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800564a:	4b74      	ldr	r3, [pc, #464]	@ (800581c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005652:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005656:	d106      	bne.n	8005666 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8005658:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800565a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800565e:	d102      	bne.n	8005666 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005660:	4b70      	ldr	r3, [pc, #448]	@ (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8005662:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005664:	e010      	b.n	8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005666:	4b6d      	ldr	r3, [pc, #436]	@ (800581c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800566e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005672:	d106      	bne.n	8005682 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8005674:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005676:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800567a:	d102      	bne.n	8005682 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800567c:	4b6a      	ldr	r3, [pc, #424]	@ (8005828 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800567e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005680:	e002      	b.n	8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005682:	2300      	movs	r3, #0
 8005684:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005686:	e122      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005688:	e121      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800568a:	2300      	movs	r3, #0
 800568c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800568e:	e11e      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005690:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005694:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8005698:	430b      	orrs	r3, r1
 800569a:	d133      	bne.n	8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800569c:	4b5f      	ldr	r3, [pc, #380]	@ (800581c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800569e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056a4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80056a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d004      	beq.n	80056b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80056ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056b2:	d012      	beq.n	80056da <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 80056b4:	e023      	b.n	80056fe <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80056b6:	4b59      	ldr	r3, [pc, #356]	@ (800581c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80056c2:	d107      	bne.n	80056d4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80056c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80056c8:	4618      	mov	r0, r3
 80056ca:	f000 fbc7 	bl	8005e5c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80056ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80056d2:	e0fc      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80056d4:	2300      	movs	r3, #0
 80056d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80056d8:	e0f9      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80056da:	4b50      	ldr	r3, [pc, #320]	@ (800581c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80056e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80056e6:	d107      	bne.n	80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80056e8:	f107 0318 	add.w	r3, r7, #24
 80056ec:	4618      	mov	r0, r3
 80056ee:	f000 f90d 	bl	800590c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80056f2:	6a3b      	ldr	r3, [r7, #32]
 80056f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80056f6:	e0ea      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80056f8:	2300      	movs	r3, #0
 80056fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80056fc:	e0e7      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80056fe:	2300      	movs	r3, #0
 8005700:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005702:	e0e4      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005704:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005708:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800570c:	430b      	orrs	r3, r1
 800570e:	f040 808d 	bne.w	800582c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8005712:	4b42      	ldr	r3, [pc, #264]	@ (800581c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005716:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800571a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800571c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800571e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005722:	d06b      	beq.n	80057fc <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8005724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005726:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800572a:	d874      	bhi.n	8005816 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800572c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800572e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005732:	d056      	beq.n	80057e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8005734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005736:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800573a:	d86c      	bhi.n	8005816 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800573c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800573e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005742:	d03b      	beq.n	80057bc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8005744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005746:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800574a:	d864      	bhi.n	8005816 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800574c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800574e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005752:	d021      	beq.n	8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8005754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005756:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800575a:	d85c      	bhi.n	8005816 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800575c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800575e:	2b00      	cmp	r3, #0
 8005760:	d004      	beq.n	800576c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8005762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005764:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005768:	d004      	beq.n	8005774 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800576a:	e054      	b.n	8005816 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800576c:	f000 f8b8 	bl	80058e0 <HAL_RCCEx_GetD3PCLK1Freq>
 8005770:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005772:	e0ac      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005774:	4b29      	ldr	r3, [pc, #164]	@ (800581c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800577c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005780:	d107      	bne.n	8005792 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005782:	f107 0318 	add.w	r3, r7, #24
 8005786:	4618      	mov	r0, r3
 8005788:	f000 f8c0 	bl	800590c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005790:	e09d      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005792:	2300      	movs	r3, #0
 8005794:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005796:	e09a      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005798:	4b20      	ldr	r3, [pc, #128]	@ (800581c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80057a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80057a4:	d107      	bne.n	80057b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80057a6:	f107 030c 	add.w	r3, r7, #12
 80057aa:	4618      	mov	r0, r3
 80057ac:	f000 fa02 	bl	8005bb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80057b4:	e08b      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80057b6:	2300      	movs	r3, #0
 80057b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057ba:	e088      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80057bc:	4b17      	ldr	r3, [pc, #92]	@ (800581c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 0304 	and.w	r3, r3, #4
 80057c4:	2b04      	cmp	r3, #4
 80057c6:	d109      	bne.n	80057dc <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80057c8:	4b14      	ldr	r3, [pc, #80]	@ (800581c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	08db      	lsrs	r3, r3, #3
 80057ce:	f003 0303 	and.w	r3, r3, #3
 80057d2:	4a13      	ldr	r2, [pc, #76]	@ (8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80057d4:	fa22 f303 	lsr.w	r3, r2, r3
 80057d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80057da:	e078      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80057dc:	2300      	movs	r3, #0
 80057de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057e0:	e075      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80057e2:	4b0e      	ldr	r3, [pc, #56]	@ (800581c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057ee:	d102      	bne.n	80057f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 80057f0:	4b0c      	ldr	r3, [pc, #48]	@ (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80057f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80057f4:	e06b      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80057f6:	2300      	movs	r3, #0
 80057f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057fa:	e068      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80057fc:	4b07      	ldr	r3, [pc, #28]	@ (800581c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005804:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005808:	d102      	bne.n	8005810 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800580a:	4b07      	ldr	r3, [pc, #28]	@ (8005828 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800580c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800580e:	e05e      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005810:	2300      	movs	r3, #0
 8005812:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005814:	e05b      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8005816:	2300      	movs	r3, #0
 8005818:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800581a:	e058      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800581c:	58024400 	.word	0x58024400
 8005820:	03d09000 	.word	0x03d09000
 8005824:	003d0900 	.word	0x003d0900
 8005828:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800582c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005830:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8005834:	430b      	orrs	r3, r1
 8005836:	d148      	bne.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8005838:	4b27      	ldr	r3, [pc, #156]	@ (80058d8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800583a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800583c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005840:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005844:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005848:	d02a      	beq.n	80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800584a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800584c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005850:	d838      	bhi.n	80058c4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8005852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005854:	2b00      	cmp	r3, #0
 8005856:	d004      	beq.n	8005862 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8005858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800585a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800585e:	d00d      	beq.n	800587c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8005860:	e030      	b.n	80058c4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005862:	4b1d      	ldr	r3, [pc, #116]	@ (80058d8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800586a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800586e:	d102      	bne.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8005870:	4b1a      	ldr	r3, [pc, #104]	@ (80058dc <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8005872:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005874:	e02b      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005876:	2300      	movs	r3, #0
 8005878:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800587a:	e028      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800587c:	4b16      	ldr	r3, [pc, #88]	@ (80058d8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005884:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005888:	d107      	bne.n	800589a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800588a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800588e:	4618      	mov	r0, r3
 8005890:	f000 fae4 	bl	8005e5c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005896:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005898:	e019      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800589a:	2300      	movs	r3, #0
 800589c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800589e:	e016      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80058a0:	4b0d      	ldr	r3, [pc, #52]	@ (80058d8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80058a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80058ac:	d107      	bne.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80058ae:	f107 0318 	add.w	r3, r7, #24
 80058b2:	4618      	mov	r0, r3
 80058b4:	f000 f82a 	bl	800590c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80058b8:	69fb      	ldr	r3, [r7, #28]
 80058ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80058bc:	e007      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80058be:	2300      	movs	r3, #0
 80058c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058c2:	e004      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80058c4:	2300      	movs	r3, #0
 80058c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058c8:	e001      	b.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 80058ca:	2300      	movs	r3, #0
 80058cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 80058ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3740      	adds	r7, #64	@ 0x40
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}
 80058d8:	58024400 	.word	0x58024400
 80058dc:	017d7840 	.word	0x017d7840

080058e0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80058e4:	f7fe f816 	bl	8003914 <HAL_RCC_GetHCLKFreq>
 80058e8:	4602      	mov	r2, r0
 80058ea:	4b06      	ldr	r3, [pc, #24]	@ (8005904 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80058ec:	6a1b      	ldr	r3, [r3, #32]
 80058ee:	091b      	lsrs	r3, r3, #4
 80058f0:	f003 0307 	and.w	r3, r3, #7
 80058f4:	4904      	ldr	r1, [pc, #16]	@ (8005908 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80058f6:	5ccb      	ldrb	r3, [r1, r3]
 80058f8:	f003 031f 	and.w	r3, r3, #31
 80058fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005900:	4618      	mov	r0, r3
 8005902:	bd80      	pop	{r7, pc}
 8005904:	58024400 	.word	0x58024400
 8005908:	0800f70c 	.word	0x0800f70c

0800590c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800590c:	b480      	push	{r7}
 800590e:	b089      	sub	sp, #36	@ 0x24
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005914:	4ba1      	ldr	r3, [pc, #644]	@ (8005b9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005918:	f003 0303 	and.w	r3, r3, #3
 800591c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800591e:	4b9f      	ldr	r3, [pc, #636]	@ (8005b9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005922:	0b1b      	lsrs	r3, r3, #12
 8005924:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005928:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800592a:	4b9c      	ldr	r3, [pc, #624]	@ (8005b9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800592c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800592e:	091b      	lsrs	r3, r3, #4
 8005930:	f003 0301 	and.w	r3, r3, #1
 8005934:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005936:	4b99      	ldr	r3, [pc, #612]	@ (8005b9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005938:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800593a:	08db      	lsrs	r3, r3, #3
 800593c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005940:	693a      	ldr	r2, [r7, #16]
 8005942:	fb02 f303 	mul.w	r3, r2, r3
 8005946:	ee07 3a90 	vmov	s15, r3
 800594a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800594e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	2b00      	cmp	r3, #0
 8005956:	f000 8111 	beq.w	8005b7c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	2b02      	cmp	r3, #2
 800595e:	f000 8083 	beq.w	8005a68 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	2b02      	cmp	r3, #2
 8005966:	f200 80a1 	bhi.w	8005aac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d003      	beq.n	8005978 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005970:	69bb      	ldr	r3, [r7, #24]
 8005972:	2b01      	cmp	r3, #1
 8005974:	d056      	beq.n	8005a24 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005976:	e099      	b.n	8005aac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005978:	4b88      	ldr	r3, [pc, #544]	@ (8005b9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 0320 	and.w	r3, r3, #32
 8005980:	2b00      	cmp	r3, #0
 8005982:	d02d      	beq.n	80059e0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005984:	4b85      	ldr	r3, [pc, #532]	@ (8005b9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	08db      	lsrs	r3, r3, #3
 800598a:	f003 0303 	and.w	r3, r3, #3
 800598e:	4a84      	ldr	r2, [pc, #528]	@ (8005ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005990:	fa22 f303 	lsr.w	r3, r2, r3
 8005994:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	ee07 3a90 	vmov	s15, r3
 800599c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	ee07 3a90 	vmov	s15, r3
 80059a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059ae:	4b7b      	ldr	r3, [pc, #492]	@ (8005b9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059b6:	ee07 3a90 	vmov	s15, r3
 80059ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059be:	ed97 6a03 	vldr	s12, [r7, #12]
 80059c2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80059c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059da:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80059de:	e087      	b.n	8005af0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	ee07 3a90 	vmov	s15, r3
 80059e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059ea:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80059ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059f2:	4b6a      	ldr	r3, [pc, #424]	@ (8005b9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059fa:	ee07 3a90 	vmov	s15, r3
 80059fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a02:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a06:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005a0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a22:	e065      	b.n	8005af0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	ee07 3a90 	vmov	s15, r3
 8005a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a2e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005bac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005a32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a36:	4b59      	ldr	r3, [pc, #356]	@ (8005b9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a3e:	ee07 3a90 	vmov	s15, r3
 8005a42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a46:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a4a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005a4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a66:	e043      	b.n	8005af0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	ee07 3a90 	vmov	s15, r3
 8005a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a72:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005a76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a7a:	4b48      	ldr	r3, [pc, #288]	@ (8005b9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a82:	ee07 3a90 	vmov	s15, r3
 8005a86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a8e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005a92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005aa6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005aaa:	e021      	b.n	8005af0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	ee07 3a90 	vmov	s15, r3
 8005ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ab6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005bac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005aba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005abe:	4b37      	ldr	r3, [pc, #220]	@ (8005b9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ac0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ac6:	ee07 3a90 	vmov	s15, r3
 8005aca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ace:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ad2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005ad6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ada:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ade:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ae2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005aea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005aee:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005af0:	4b2a      	ldr	r3, [pc, #168]	@ (8005b9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005af2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005af4:	0a5b      	lsrs	r3, r3, #9
 8005af6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005afa:	ee07 3a90 	vmov	s15, r3
 8005afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b02:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005b06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b16:	ee17 2a90 	vmov	r2, s15
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005b1e:	4b1f      	ldr	r3, [pc, #124]	@ (8005b9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b22:	0c1b      	lsrs	r3, r3, #16
 8005b24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b28:	ee07 3a90 	vmov	s15, r3
 8005b2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b30:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005b34:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b38:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b44:	ee17 2a90 	vmov	r2, s15
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005b4c:	4b13      	ldr	r3, [pc, #76]	@ (8005b9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b50:	0e1b      	lsrs	r3, r3, #24
 8005b52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b56:	ee07 3a90 	vmov	s15, r3
 8005b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b5e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005b62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b66:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b72:	ee17 2a90 	vmov	r2, s15
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005b7a:	e008      	b.n	8005b8e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2200      	movs	r2, #0
 8005b86:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	609a      	str	r2, [r3, #8]
}
 8005b8e:	bf00      	nop
 8005b90:	3724      	adds	r7, #36	@ 0x24
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr
 8005b9a:	bf00      	nop
 8005b9c:	58024400 	.word	0x58024400
 8005ba0:	03d09000 	.word	0x03d09000
 8005ba4:	46000000 	.word	0x46000000
 8005ba8:	4c742400 	.word	0x4c742400
 8005bac:	4a742400 	.word	0x4a742400
 8005bb0:	4bbebc20 	.word	0x4bbebc20

08005bb4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b089      	sub	sp, #36	@ 0x24
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005bbc:	4ba1      	ldr	r3, [pc, #644]	@ (8005e44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bc0:	f003 0303 	and.w	r3, r3, #3
 8005bc4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005bc6:	4b9f      	ldr	r3, [pc, #636]	@ (8005e44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bca:	0d1b      	lsrs	r3, r3, #20
 8005bcc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005bd0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005bd2:	4b9c      	ldr	r3, [pc, #624]	@ (8005e44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bd6:	0a1b      	lsrs	r3, r3, #8
 8005bd8:	f003 0301 	and.w	r3, r3, #1
 8005bdc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005bde:	4b99      	ldr	r3, [pc, #612]	@ (8005e44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005be2:	08db      	lsrs	r3, r3, #3
 8005be4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005be8:	693a      	ldr	r2, [r7, #16]
 8005bea:	fb02 f303 	mul.w	r3, r2, r3
 8005bee:	ee07 3a90 	vmov	s15, r3
 8005bf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bf6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	f000 8111 	beq.w	8005e24 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	2b02      	cmp	r3, #2
 8005c06:	f000 8083 	beq.w	8005d10 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	2b02      	cmp	r3, #2
 8005c0e:	f200 80a1 	bhi.w	8005d54 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005c12:	69bb      	ldr	r3, [r7, #24]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d003      	beq.n	8005c20 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d056      	beq.n	8005ccc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005c1e:	e099      	b.n	8005d54 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c20:	4b88      	ldr	r3, [pc, #544]	@ (8005e44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 0320 	and.w	r3, r3, #32
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d02d      	beq.n	8005c88 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c2c:	4b85      	ldr	r3, [pc, #532]	@ (8005e44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	08db      	lsrs	r3, r3, #3
 8005c32:	f003 0303 	and.w	r3, r3, #3
 8005c36:	4a84      	ldr	r2, [pc, #528]	@ (8005e48 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005c38:	fa22 f303 	lsr.w	r3, r2, r3
 8005c3c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	ee07 3a90 	vmov	s15, r3
 8005c44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	ee07 3a90 	vmov	s15, r3
 8005c4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c56:	4b7b      	ldr	r3, [pc, #492]	@ (8005e44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c5e:	ee07 3a90 	vmov	s15, r3
 8005c62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c66:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c6a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005e4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005c6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c82:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005c86:	e087      	b.n	8005d98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	ee07 3a90 	vmov	s15, r3
 8005c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c92:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005e50 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005c96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c9a:	4b6a      	ldr	r3, [pc, #424]	@ (8005e44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ca2:	ee07 3a90 	vmov	s15, r3
 8005ca6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005caa:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cae:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005e4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005cb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005cbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005cca:	e065      	b.n	8005d98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	ee07 3a90 	vmov	s15, r3
 8005cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cd6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005e54 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005cda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cde:	4b59      	ldr	r3, [pc, #356]	@ (8005e44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ce2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ce6:	ee07 3a90 	vmov	s15, r3
 8005cea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cee:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cf2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005e4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005cf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cfe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d0e:	e043      	b.n	8005d98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	ee07 3a90 	vmov	s15, r3
 8005d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d1a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005e58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005d1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d22:	4b48      	ldr	r3, [pc, #288]	@ (8005e44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d2a:	ee07 3a90 	vmov	s15, r3
 8005d2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d32:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d36:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005e4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005d3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d52:	e021      	b.n	8005d98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	ee07 3a90 	vmov	s15, r3
 8005d5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d5e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005e54 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005d62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d66:	4b37      	ldr	r3, [pc, #220]	@ (8005e44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d6e:	ee07 3a90 	vmov	s15, r3
 8005d72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d76:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d7a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005e4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005d7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d96:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005d98:	4b2a      	ldr	r3, [pc, #168]	@ (8005e44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d9c:	0a5b      	lsrs	r3, r3, #9
 8005d9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005da2:	ee07 3a90 	vmov	s15, r3
 8005da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005daa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005dae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005db2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005db6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005dba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005dbe:	ee17 2a90 	vmov	r2, s15
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005dc6:	4b1f      	ldr	r3, [pc, #124]	@ (8005e44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dca:	0c1b      	lsrs	r3, r3, #16
 8005dcc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005dd0:	ee07 3a90 	vmov	s15, r3
 8005dd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dd8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005ddc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005de0:	edd7 6a07 	vldr	s13, [r7, #28]
 8005de4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005de8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005dec:	ee17 2a90 	vmov	r2, s15
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005df4:	4b13      	ldr	r3, [pc, #76]	@ (8005e44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005df8:	0e1b      	lsrs	r3, r3, #24
 8005dfa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005dfe:	ee07 3a90 	vmov	s15, r3
 8005e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e1a:	ee17 2a90 	vmov	r2, s15
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005e22:	e008      	b.n	8005e36 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	609a      	str	r2, [r3, #8]
}
 8005e36:	bf00      	nop
 8005e38:	3724      	adds	r7, #36	@ 0x24
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr
 8005e42:	bf00      	nop
 8005e44:	58024400 	.word	0x58024400
 8005e48:	03d09000 	.word	0x03d09000
 8005e4c:	46000000 	.word	0x46000000
 8005e50:	4c742400 	.word	0x4c742400
 8005e54:	4a742400 	.word	0x4a742400
 8005e58:	4bbebc20 	.word	0x4bbebc20

08005e5c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b089      	sub	sp, #36	@ 0x24
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005e64:	4ba0      	ldr	r3, [pc, #640]	@ (80060e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e68:	f003 0303 	and.w	r3, r3, #3
 8005e6c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8005e6e:	4b9e      	ldr	r3, [pc, #632]	@ (80060e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e72:	091b      	lsrs	r3, r3, #4
 8005e74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005e78:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005e7a:	4b9b      	ldr	r3, [pc, #620]	@ (80060e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e7e:	f003 0301 	and.w	r3, r3, #1
 8005e82:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005e84:	4b98      	ldr	r3, [pc, #608]	@ (80060e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005e86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e88:	08db      	lsrs	r3, r3, #3
 8005e8a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e8e:	693a      	ldr	r2, [r7, #16]
 8005e90:	fb02 f303 	mul.w	r3, r2, r3
 8005e94:	ee07 3a90 	vmov	s15, r3
 8005e98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e9c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	f000 8111 	beq.w	80060ca <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	2b02      	cmp	r3, #2
 8005eac:	f000 8083 	beq.w	8005fb6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	2b02      	cmp	r3, #2
 8005eb4:	f200 80a1 	bhi.w	8005ffa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d003      	beq.n	8005ec6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8005ebe:	69bb      	ldr	r3, [r7, #24]
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d056      	beq.n	8005f72 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8005ec4:	e099      	b.n	8005ffa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ec6:	4b88      	ldr	r3, [pc, #544]	@ (80060e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 0320 	and.w	r3, r3, #32
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d02d      	beq.n	8005f2e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ed2:	4b85      	ldr	r3, [pc, #532]	@ (80060e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	08db      	lsrs	r3, r3, #3
 8005ed8:	f003 0303 	and.w	r3, r3, #3
 8005edc:	4a83      	ldr	r2, [pc, #524]	@ (80060ec <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8005ede:	fa22 f303 	lsr.w	r3, r2, r3
 8005ee2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	ee07 3a90 	vmov	s15, r3
 8005eea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	ee07 3a90 	vmov	s15, r3
 8005ef4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ef8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005efc:	4b7a      	ldr	r3, [pc, #488]	@ (80060e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005efe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f04:	ee07 3a90 	vmov	s15, r3
 8005f08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f0c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f10:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80060f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005f14:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f1c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f28:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005f2c:	e087      	b.n	800603e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	ee07 3a90 	vmov	s15, r3
 8005f34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f38:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80060f4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005f3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f40:	4b69      	ldr	r3, [pc, #420]	@ (80060e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005f42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f48:	ee07 3a90 	vmov	s15, r3
 8005f4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f50:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f54:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80060f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005f58:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f60:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f6c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f70:	e065      	b.n	800603e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	ee07 3a90 	vmov	s15, r3
 8005f78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f7c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80060f8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8005f80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f84:	4b58      	ldr	r3, [pc, #352]	@ (80060e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f8c:	ee07 3a90 	vmov	s15, r3
 8005f90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f94:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f98:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80060f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005f9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fa0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fa4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005fa8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fb0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005fb4:	e043      	b.n	800603e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	ee07 3a90 	vmov	s15, r3
 8005fbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fc0:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80060fc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8005fc4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fc8:	4b47      	ldr	r3, [pc, #284]	@ (80060e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005fca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fd0:	ee07 3a90 	vmov	s15, r3
 8005fd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fd8:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fdc:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80060f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005fe0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fe4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fe8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005fec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ff0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ff4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ff8:	e021      	b.n	800603e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	ee07 3a90 	vmov	s15, r3
 8006000:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006004:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80060f4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006008:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800600c:	4b36      	ldr	r3, [pc, #216]	@ (80060e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800600e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006010:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006014:	ee07 3a90 	vmov	s15, r3
 8006018:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800601c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006020:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80060f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006024:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006028:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800602c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006030:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006034:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006038:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800603c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800603e:	4b2a      	ldr	r3, [pc, #168]	@ (80060e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006042:	0a5b      	lsrs	r3, r3, #9
 8006044:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006048:	ee07 3a90 	vmov	s15, r3
 800604c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006050:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006054:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006058:	edd7 6a07 	vldr	s13, [r7, #28]
 800605c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006060:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006064:	ee17 2a90 	vmov	r2, s15
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800606c:	4b1e      	ldr	r3, [pc, #120]	@ (80060e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800606e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006070:	0c1b      	lsrs	r3, r3, #16
 8006072:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006076:	ee07 3a90 	vmov	s15, r3
 800607a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800607e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006082:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006086:	edd7 6a07 	vldr	s13, [r7, #28]
 800608a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800608e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006092:	ee17 2a90 	vmov	r2, s15
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800609a:	4b13      	ldr	r3, [pc, #76]	@ (80060e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800609c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800609e:	0e1b      	lsrs	r3, r3, #24
 80060a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060a4:	ee07 3a90 	vmov	s15, r3
 80060a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80060b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80060b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80060b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060c0:	ee17 2a90 	vmov	r2, s15
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80060c8:	e008      	b.n	80060dc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2200      	movs	r2, #0
 80060ce:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2200      	movs	r2, #0
 80060d4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	609a      	str	r2, [r3, #8]
}
 80060dc:	bf00      	nop
 80060de:	3724      	adds	r7, #36	@ 0x24
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr
 80060e8:	58024400 	.word	0x58024400
 80060ec:	03d09000 	.word	0x03d09000
 80060f0:	46000000 	.word	0x46000000
 80060f4:	4c742400 	.word	0x4c742400
 80060f8:	4a742400 	.word	0x4a742400
 80060fc:	4bbebc20 	.word	0x4bbebc20

08006100 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b084      	sub	sp, #16
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800610a:	2300      	movs	r3, #0
 800610c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800610e:	4b53      	ldr	r3, [pc, #332]	@ (800625c <RCCEx_PLL2_Config+0x15c>)
 8006110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006112:	f003 0303 	and.w	r3, r3, #3
 8006116:	2b03      	cmp	r3, #3
 8006118:	d101      	bne.n	800611e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800611a:	2301      	movs	r3, #1
 800611c:	e099      	b.n	8006252 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800611e:	4b4f      	ldr	r3, [pc, #316]	@ (800625c <RCCEx_PLL2_Config+0x15c>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a4e      	ldr	r2, [pc, #312]	@ (800625c <RCCEx_PLL2_Config+0x15c>)
 8006124:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006128:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800612a:	f7fb fb39 	bl	80017a0 <HAL_GetTick>
 800612e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006130:	e008      	b.n	8006144 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006132:	f7fb fb35 	bl	80017a0 <HAL_GetTick>
 8006136:	4602      	mov	r2, r0
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	1ad3      	subs	r3, r2, r3
 800613c:	2b02      	cmp	r3, #2
 800613e:	d901      	bls.n	8006144 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006140:	2303      	movs	r3, #3
 8006142:	e086      	b.n	8006252 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006144:	4b45      	ldr	r3, [pc, #276]	@ (800625c <RCCEx_PLL2_Config+0x15c>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800614c:	2b00      	cmp	r3, #0
 800614e:	d1f0      	bne.n	8006132 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006150:	4b42      	ldr	r3, [pc, #264]	@ (800625c <RCCEx_PLL2_Config+0x15c>)
 8006152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006154:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	031b      	lsls	r3, r3, #12
 800615e:	493f      	ldr	r1, [pc, #252]	@ (800625c <RCCEx_PLL2_Config+0x15c>)
 8006160:	4313      	orrs	r3, r2
 8006162:	628b      	str	r3, [r1, #40]	@ 0x28
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	3b01      	subs	r3, #1
 800616a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	3b01      	subs	r3, #1
 8006174:	025b      	lsls	r3, r3, #9
 8006176:	b29b      	uxth	r3, r3
 8006178:	431a      	orrs	r2, r3
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	3b01      	subs	r3, #1
 8006180:	041b      	lsls	r3, r3, #16
 8006182:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006186:	431a      	orrs	r2, r3
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	691b      	ldr	r3, [r3, #16]
 800618c:	3b01      	subs	r3, #1
 800618e:	061b      	lsls	r3, r3, #24
 8006190:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006194:	4931      	ldr	r1, [pc, #196]	@ (800625c <RCCEx_PLL2_Config+0x15c>)
 8006196:	4313      	orrs	r3, r2
 8006198:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800619a:	4b30      	ldr	r3, [pc, #192]	@ (800625c <RCCEx_PLL2_Config+0x15c>)
 800619c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800619e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	695b      	ldr	r3, [r3, #20]
 80061a6:	492d      	ldr	r1, [pc, #180]	@ (800625c <RCCEx_PLL2_Config+0x15c>)
 80061a8:	4313      	orrs	r3, r2
 80061aa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80061ac:	4b2b      	ldr	r3, [pc, #172]	@ (800625c <RCCEx_PLL2_Config+0x15c>)
 80061ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061b0:	f023 0220 	bic.w	r2, r3, #32
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	699b      	ldr	r3, [r3, #24]
 80061b8:	4928      	ldr	r1, [pc, #160]	@ (800625c <RCCEx_PLL2_Config+0x15c>)
 80061ba:	4313      	orrs	r3, r2
 80061bc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80061be:	4b27      	ldr	r3, [pc, #156]	@ (800625c <RCCEx_PLL2_Config+0x15c>)
 80061c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061c2:	4a26      	ldr	r2, [pc, #152]	@ (800625c <RCCEx_PLL2_Config+0x15c>)
 80061c4:	f023 0310 	bic.w	r3, r3, #16
 80061c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80061ca:	4b24      	ldr	r3, [pc, #144]	@ (800625c <RCCEx_PLL2_Config+0x15c>)
 80061cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80061ce:	4b24      	ldr	r3, [pc, #144]	@ (8006260 <RCCEx_PLL2_Config+0x160>)
 80061d0:	4013      	ands	r3, r2
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	69d2      	ldr	r2, [r2, #28]
 80061d6:	00d2      	lsls	r2, r2, #3
 80061d8:	4920      	ldr	r1, [pc, #128]	@ (800625c <RCCEx_PLL2_Config+0x15c>)
 80061da:	4313      	orrs	r3, r2
 80061dc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80061de:	4b1f      	ldr	r3, [pc, #124]	@ (800625c <RCCEx_PLL2_Config+0x15c>)
 80061e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061e2:	4a1e      	ldr	r2, [pc, #120]	@ (800625c <RCCEx_PLL2_Config+0x15c>)
 80061e4:	f043 0310 	orr.w	r3, r3, #16
 80061e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d106      	bne.n	80061fe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80061f0:	4b1a      	ldr	r3, [pc, #104]	@ (800625c <RCCEx_PLL2_Config+0x15c>)
 80061f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061f4:	4a19      	ldr	r2, [pc, #100]	@ (800625c <RCCEx_PLL2_Config+0x15c>)
 80061f6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80061fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80061fc:	e00f      	b.n	800621e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	2b01      	cmp	r3, #1
 8006202:	d106      	bne.n	8006212 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006204:	4b15      	ldr	r3, [pc, #84]	@ (800625c <RCCEx_PLL2_Config+0x15c>)
 8006206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006208:	4a14      	ldr	r2, [pc, #80]	@ (800625c <RCCEx_PLL2_Config+0x15c>)
 800620a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800620e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006210:	e005      	b.n	800621e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006212:	4b12      	ldr	r3, [pc, #72]	@ (800625c <RCCEx_PLL2_Config+0x15c>)
 8006214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006216:	4a11      	ldr	r2, [pc, #68]	@ (800625c <RCCEx_PLL2_Config+0x15c>)
 8006218:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800621c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800621e:	4b0f      	ldr	r3, [pc, #60]	@ (800625c <RCCEx_PLL2_Config+0x15c>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a0e      	ldr	r2, [pc, #56]	@ (800625c <RCCEx_PLL2_Config+0x15c>)
 8006224:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006228:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800622a:	f7fb fab9 	bl	80017a0 <HAL_GetTick>
 800622e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006230:	e008      	b.n	8006244 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006232:	f7fb fab5 	bl	80017a0 <HAL_GetTick>
 8006236:	4602      	mov	r2, r0
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	1ad3      	subs	r3, r2, r3
 800623c:	2b02      	cmp	r3, #2
 800623e:	d901      	bls.n	8006244 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006240:	2303      	movs	r3, #3
 8006242:	e006      	b.n	8006252 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006244:	4b05      	ldr	r3, [pc, #20]	@ (800625c <RCCEx_PLL2_Config+0x15c>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800624c:	2b00      	cmp	r3, #0
 800624e:	d0f0      	beq.n	8006232 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006250:	7bfb      	ldrb	r3, [r7, #15]
}
 8006252:	4618      	mov	r0, r3
 8006254:	3710      	adds	r7, #16
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
 800625a:	bf00      	nop
 800625c:	58024400 	.word	0x58024400
 8006260:	ffff0007 	.word	0xffff0007

08006264 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b084      	sub	sp, #16
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800626e:	2300      	movs	r3, #0
 8006270:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006272:	4b53      	ldr	r3, [pc, #332]	@ (80063c0 <RCCEx_PLL3_Config+0x15c>)
 8006274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006276:	f003 0303 	and.w	r3, r3, #3
 800627a:	2b03      	cmp	r3, #3
 800627c:	d101      	bne.n	8006282 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	e099      	b.n	80063b6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006282:	4b4f      	ldr	r3, [pc, #316]	@ (80063c0 <RCCEx_PLL3_Config+0x15c>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a4e      	ldr	r2, [pc, #312]	@ (80063c0 <RCCEx_PLL3_Config+0x15c>)
 8006288:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800628c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800628e:	f7fb fa87 	bl	80017a0 <HAL_GetTick>
 8006292:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006294:	e008      	b.n	80062a8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006296:	f7fb fa83 	bl	80017a0 <HAL_GetTick>
 800629a:	4602      	mov	r2, r0
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	1ad3      	subs	r3, r2, r3
 80062a0:	2b02      	cmp	r3, #2
 80062a2:	d901      	bls.n	80062a8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80062a4:	2303      	movs	r3, #3
 80062a6:	e086      	b.n	80063b6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80062a8:	4b45      	ldr	r3, [pc, #276]	@ (80063c0 <RCCEx_PLL3_Config+0x15c>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d1f0      	bne.n	8006296 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80062b4:	4b42      	ldr	r3, [pc, #264]	@ (80063c0 <RCCEx_PLL3_Config+0x15c>)
 80062b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062b8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	051b      	lsls	r3, r3, #20
 80062c2:	493f      	ldr	r1, [pc, #252]	@ (80063c0 <RCCEx_PLL3_Config+0x15c>)
 80062c4:	4313      	orrs	r3, r2
 80062c6:	628b      	str	r3, [r1, #40]	@ 0x28
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	3b01      	subs	r3, #1
 80062ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	3b01      	subs	r3, #1
 80062d8:	025b      	lsls	r3, r3, #9
 80062da:	b29b      	uxth	r3, r3
 80062dc:	431a      	orrs	r2, r3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	3b01      	subs	r3, #1
 80062e4:	041b      	lsls	r3, r3, #16
 80062e6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80062ea:	431a      	orrs	r2, r3
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	691b      	ldr	r3, [r3, #16]
 80062f0:	3b01      	subs	r3, #1
 80062f2:	061b      	lsls	r3, r3, #24
 80062f4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80062f8:	4931      	ldr	r1, [pc, #196]	@ (80063c0 <RCCEx_PLL3_Config+0x15c>)
 80062fa:	4313      	orrs	r3, r2
 80062fc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80062fe:	4b30      	ldr	r3, [pc, #192]	@ (80063c0 <RCCEx_PLL3_Config+0x15c>)
 8006300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006302:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	695b      	ldr	r3, [r3, #20]
 800630a:	492d      	ldr	r1, [pc, #180]	@ (80063c0 <RCCEx_PLL3_Config+0x15c>)
 800630c:	4313      	orrs	r3, r2
 800630e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006310:	4b2b      	ldr	r3, [pc, #172]	@ (80063c0 <RCCEx_PLL3_Config+0x15c>)
 8006312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006314:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	699b      	ldr	r3, [r3, #24]
 800631c:	4928      	ldr	r1, [pc, #160]	@ (80063c0 <RCCEx_PLL3_Config+0x15c>)
 800631e:	4313      	orrs	r3, r2
 8006320:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006322:	4b27      	ldr	r3, [pc, #156]	@ (80063c0 <RCCEx_PLL3_Config+0x15c>)
 8006324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006326:	4a26      	ldr	r2, [pc, #152]	@ (80063c0 <RCCEx_PLL3_Config+0x15c>)
 8006328:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800632c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800632e:	4b24      	ldr	r3, [pc, #144]	@ (80063c0 <RCCEx_PLL3_Config+0x15c>)
 8006330:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006332:	4b24      	ldr	r3, [pc, #144]	@ (80063c4 <RCCEx_PLL3_Config+0x160>)
 8006334:	4013      	ands	r3, r2
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	69d2      	ldr	r2, [r2, #28]
 800633a:	00d2      	lsls	r2, r2, #3
 800633c:	4920      	ldr	r1, [pc, #128]	@ (80063c0 <RCCEx_PLL3_Config+0x15c>)
 800633e:	4313      	orrs	r3, r2
 8006340:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006342:	4b1f      	ldr	r3, [pc, #124]	@ (80063c0 <RCCEx_PLL3_Config+0x15c>)
 8006344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006346:	4a1e      	ldr	r2, [pc, #120]	@ (80063c0 <RCCEx_PLL3_Config+0x15c>)
 8006348:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800634c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d106      	bne.n	8006362 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006354:	4b1a      	ldr	r3, [pc, #104]	@ (80063c0 <RCCEx_PLL3_Config+0x15c>)
 8006356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006358:	4a19      	ldr	r2, [pc, #100]	@ (80063c0 <RCCEx_PLL3_Config+0x15c>)
 800635a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800635e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006360:	e00f      	b.n	8006382 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	2b01      	cmp	r3, #1
 8006366:	d106      	bne.n	8006376 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006368:	4b15      	ldr	r3, [pc, #84]	@ (80063c0 <RCCEx_PLL3_Config+0x15c>)
 800636a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800636c:	4a14      	ldr	r2, [pc, #80]	@ (80063c0 <RCCEx_PLL3_Config+0x15c>)
 800636e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006372:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006374:	e005      	b.n	8006382 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006376:	4b12      	ldr	r3, [pc, #72]	@ (80063c0 <RCCEx_PLL3_Config+0x15c>)
 8006378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800637a:	4a11      	ldr	r2, [pc, #68]	@ (80063c0 <RCCEx_PLL3_Config+0x15c>)
 800637c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006380:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006382:	4b0f      	ldr	r3, [pc, #60]	@ (80063c0 <RCCEx_PLL3_Config+0x15c>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a0e      	ldr	r2, [pc, #56]	@ (80063c0 <RCCEx_PLL3_Config+0x15c>)
 8006388:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800638c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800638e:	f7fb fa07 	bl	80017a0 <HAL_GetTick>
 8006392:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006394:	e008      	b.n	80063a8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006396:	f7fb fa03 	bl	80017a0 <HAL_GetTick>
 800639a:	4602      	mov	r2, r0
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	1ad3      	subs	r3, r2, r3
 80063a0:	2b02      	cmp	r3, #2
 80063a2:	d901      	bls.n	80063a8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80063a4:	2303      	movs	r3, #3
 80063a6:	e006      	b.n	80063b6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80063a8:	4b05      	ldr	r3, [pc, #20]	@ (80063c0 <RCCEx_PLL3_Config+0x15c>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d0f0      	beq.n	8006396 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80063b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3710      	adds	r7, #16
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	58024400 	.word	0x58024400
 80063c4:	ffff0007 	.word	0xffff0007

080063c8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b08a      	sub	sp, #40	@ 0x28
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d101      	bne.n	80063da <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	e075      	b.n	80064c6 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d105      	bne.n	80063f2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f7fa fd43 	bl	8000e78 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2204      	movs	r2, #4
 80063f6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 f868 	bl	80064d0 <HAL_SD_InitCard>
 8006400:	4603      	mov	r3, r0
 8006402:	2b00      	cmp	r3, #0
 8006404:	d001      	beq.n	800640a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	e05d      	b.n	80064c6 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800640a:	f107 0308 	add.w	r3, r7, #8
 800640e:	4619      	mov	r1, r3
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f000 fdaf 	bl	8006f74 <HAL_SD_GetCardStatus>
 8006416:	4603      	mov	r3, r0
 8006418:	2b00      	cmp	r3, #0
 800641a:	d001      	beq.n	8006420 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	e052      	b.n	80064c6 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8006420:	7e3b      	ldrb	r3, [r7, #24]
 8006422:	b2db      	uxtb	r3, r3
 8006424:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8006426:	7e7b      	ldrb	r3, [r7, #25]
 8006428:	b2db      	uxtb	r3, r3
 800642a:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006430:	2b01      	cmp	r3, #1
 8006432:	d10a      	bne.n	800644a <HAL_SD_Init+0x82>
 8006434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006436:	2b00      	cmp	r3, #0
 8006438:	d102      	bne.n	8006440 <HAL_SD_Init+0x78>
 800643a:	6a3b      	ldr	r3, [r7, #32]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d004      	beq.n	800644a <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006446:	659a      	str	r2, [r3, #88]	@ 0x58
 8006448:	e00b      	b.n	8006462 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800644e:	2b01      	cmp	r3, #1
 8006450:	d104      	bne.n	800645c <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006458:	659a      	str	r2, [r3, #88]	@ 0x58
 800645a:	e002      	b.n	8006462 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	68db      	ldr	r3, [r3, #12]
 8006466:	4619      	mov	r1, r3
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f000 fe6d 	bl	8007148 <HAL_SD_ConfigWideBusOperation>
 800646e:	4603      	mov	r3, r0
 8006470:	2b00      	cmp	r3, #0
 8006472:	d001      	beq.n	8006478 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	e026      	b.n	80064c6 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8006478:	f7fb f992 	bl	80017a0 <HAL_GetTick>
 800647c:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800647e:	e011      	b.n	80064a4 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006480:	f7fb f98e 	bl	80017a0 <HAL_GetTick>
 8006484:	4602      	mov	r2, r0
 8006486:	69fb      	ldr	r3, [r7, #28]
 8006488:	1ad3      	subs	r3, r2, r3
 800648a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800648e:	d109      	bne.n	80064a4 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006496:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 80064a0:	2303      	movs	r3, #3
 80064a2:	e010      	b.n	80064c6 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f000 ff61 	bl	800736c <HAL_SD_GetCardState>
 80064aa:	4603      	mov	r3, r0
 80064ac:	2b04      	cmp	r3, #4
 80064ae:	d1e7      	bne.n	8006480 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2200      	movs	r2, #0
 80064b4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2201      	movs	r2, #1
 80064c0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 80064c4:	2300      	movs	r3, #0
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3728      	adds	r7, #40	@ 0x28
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}
	...

080064d0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80064d0:	b590      	push	{r4, r7, lr}
 80064d2:	b08d      	sub	sp, #52	@ 0x34
 80064d4:	af02      	add	r7, sp, #8
 80064d6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80064d8:	2300      	movs	r3, #0
 80064da:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80064dc:	2300      	movs	r3, #0
 80064de:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80064e0:	2300      	movs	r3, #0
 80064e2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80064e4:	2300      	movs	r3, #0
 80064e6:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80064e8:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80064ec:	f04f 0100 	mov.w	r1, #0
 80064f0:	f7fe fc76 	bl	8004de0 <HAL_RCCEx_GetPeriphCLKFreq>
 80064f4:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 80064f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d109      	bne.n	8006510 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2201      	movs	r2, #1
 8006500:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800650a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800650c:	2301      	movs	r3, #1
 800650e:	e070      	b.n	80065f2 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8006510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006512:	0a1b      	lsrs	r3, r3, #8
 8006514:	4a39      	ldr	r2, [pc, #228]	@ (80065fc <HAL_SD_InitCard+0x12c>)
 8006516:	fba2 2303 	umull	r2, r3, r2, r3
 800651a:	091b      	lsrs	r3, r3, #4
 800651c:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681c      	ldr	r4, [r3, #0]
 8006522:	466a      	mov	r2, sp
 8006524:	f107 0318 	add.w	r3, r7, #24
 8006528:	e893 0003 	ldmia.w	r3, {r0, r1}
 800652c:	e882 0003 	stmia.w	r2, {r0, r1}
 8006530:	f107 030c 	add.w	r3, r7, #12
 8006534:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006536:	4620      	mov	r0, r4
 8006538:	f004 f84c 	bl	800a5d4 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4618      	mov	r0, r3
 8006542:	f004 f88f 	bl	800a664 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8006546:	69fb      	ldr	r3, [r7, #28]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d005      	beq.n	8006558 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800654c:	69fb      	ldr	r3, [r7, #28]
 800654e:	005b      	lsls	r3, r3, #1
 8006550:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006552:	fbb2 f3f3 	udiv	r3, r2, r3
 8006556:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8006558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800655a:	2b00      	cmp	r3, #0
 800655c:	d007      	beq.n	800656e <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800655e:	4a28      	ldr	r2, [pc, #160]	@ (8006600 <HAL_SD_InitCard+0x130>)
 8006560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006562:	fbb2 f3f3 	udiv	r3, r2, r3
 8006566:	3301      	adds	r3, #1
 8006568:	4618      	mov	r0, r3
 800656a:	f7fb f925 	bl	80017b8 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 ffea 	bl	8007548 <SD_PowerON>
 8006574:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006576:	6a3b      	ldr	r3, [r7, #32]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d00b      	beq.n	8006594 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2201      	movs	r2, #1
 8006580:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006588:	6a3b      	ldr	r3, [r7, #32]
 800658a:	431a      	orrs	r2, r3
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8006590:	2301      	movs	r3, #1
 8006592:	e02e      	b.n	80065f2 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f000 ff09 	bl	80073ac <SD_InitCard>
 800659a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800659c:	6a3b      	ldr	r3, [r7, #32]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d00b      	beq.n	80065ba <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2201      	movs	r2, #1
 80065a6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80065ae:	6a3b      	ldr	r3, [r7, #32]
 80065b0:	431a      	orrs	r2, r3
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	e01b      	b.n	80065f2 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80065c2:	4618      	mov	r0, r3
 80065c4:	f004 f8e4 	bl	800a790 <SDMMC_CmdBlockLength>
 80065c8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80065ca:	6a3b      	ldr	r3, [r7, #32]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d00f      	beq.n	80065f0 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a0b      	ldr	r2, [pc, #44]	@ (8006604 <HAL_SD_InitCard+0x134>)
 80065d6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80065dc:	6a3b      	ldr	r3, [r7, #32]
 80065de:	431a      	orrs	r2, r3
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2201      	movs	r2, #1
 80065e8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 80065ec:	2301      	movs	r3, #1
 80065ee:	e000      	b.n	80065f2 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 80065f0:	2300      	movs	r3, #0
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	372c      	adds	r7, #44	@ 0x2c
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd90      	pop	{r4, r7, pc}
 80065fa:	bf00      	nop
 80065fc:	014f8b59 	.word	0x014f8b59
 8006600:	00012110 	.word	0x00012110
 8006604:	1fe00fff 	.word	0x1fe00fff

08006608 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b08c      	sub	sp, #48	@ 0x30
 800660c:	af00      	add	r7, sp, #0
 800660e:	60f8      	str	r0, [r7, #12]
 8006610:	60b9      	str	r1, [r7, #8]
 8006612:	607a      	str	r2, [r7, #4]
 8006614:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d107      	bne.n	8006630 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006624:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	e08d      	b.n	800674c <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006636:	b2db      	uxtb	r3, r3
 8006638:	2b01      	cmp	r3, #1
 800663a:	f040 8086 	bne.w	800674a <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2200      	movs	r2, #0
 8006642:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006644:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	441a      	add	r2, r3
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800664e:	429a      	cmp	r2, r3
 8006650:	d907      	bls.n	8006662 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006656:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	e074      	b.n	800674c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2203      	movs	r2, #3
 8006666:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	2200      	movs	r2, #0
 8006670:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	68ba      	ldr	r2, [r7, #8]
 8006676:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	025a      	lsls	r2, r3, #9
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006684:	2b01      	cmp	r3, #1
 8006686:	d002      	beq.n	800668e <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8006688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800668a:	025b      	lsls	r3, r3, #9
 800668c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800668e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006692:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	025b      	lsls	r3, r3, #9
 8006698:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800669a:	2390      	movs	r3, #144	@ 0x90
 800669c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800669e:	2302      	movs	r3, #2
 80066a0:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80066a2:	2300      	movs	r3, #0
 80066a4:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80066a6:	2300      	movs	r3, #0
 80066a8:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f107 0210 	add.w	r2, r7, #16
 80066b2:	4611      	mov	r1, r2
 80066b4:	4618      	mov	r0, r3
 80066b6:	f004 f83f 	bl	800a738 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	68da      	ldr	r2, [r3, #12]
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80066c8:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	68ba      	ldr	r2, [r7, #8]
 80066d0:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	2201      	movs	r2, #1
 80066d8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d90a      	bls.n	80066f6 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2282      	movs	r2, #130	@ 0x82
 80066e4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80066ec:	4618      	mov	r0, r3
 80066ee:	f004 f895 	bl	800a81c <SDMMC_CmdReadMultiBlock>
 80066f2:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80066f4:	e009      	b.n	800670a <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2281      	movs	r2, #129	@ 0x81
 80066fa:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006702:	4618      	mov	r0, r3
 8006704:	f004 f867 	bl	800a7d6 <SDMMC_CmdReadSingleBlock>
 8006708:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800670a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800670c:	2b00      	cmp	r3, #0
 800670e:	d012      	beq.n	8006736 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a0f      	ldr	r2, [pc, #60]	@ (8006754 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8006716:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800671c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800671e:	431a      	orrs	r2, r3
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2201      	movs	r2, #1
 8006728:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2200      	movs	r2, #0
 8006730:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	e00a      	b.n	800674c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8006744:	63da      	str	r2, [r3, #60]	@ 0x3c


    return HAL_OK;
 8006746:	2300      	movs	r3, #0
 8006748:	e000      	b.n	800674c <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800674a:	2302      	movs	r3, #2
  }
}
 800674c:	4618      	mov	r0, r3
 800674e:	3730      	adds	r7, #48	@ 0x30
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}
 8006754:	1fe00fff 	.word	0x1fe00fff

08006758 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b08c      	sub	sp, #48	@ 0x30
 800675c:	af00      	add	r7, sp, #0
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	607a      	str	r2, [r7, #4]
 8006764:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d107      	bne.n	8006780 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006774:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	e08d      	b.n	800689c <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006786:	b2db      	uxtb	r3, r3
 8006788:	2b01      	cmp	r3, #1
 800678a:	f040 8086 	bne.w	800689a <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2200      	movs	r2, #0
 8006792:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006794:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	441a      	add	r2, r3
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800679e:	429a      	cmp	r2, r3
 80067a0:	d907      	bls.n	80067b2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067a6:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	e074      	b.n	800689c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2203      	movs	r2, #3
 80067b6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	2200      	movs	r2, #0
 80067c0:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	68ba      	ldr	r2, [r7, #8]
 80067c6:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	025a      	lsls	r2, r3, #9
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d002      	beq.n	80067de <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 80067d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067da:	025b      	lsls	r3, r3, #9
 80067dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80067de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80067e2:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	025b      	lsls	r3, r3, #9
 80067e8:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80067ea:	2390      	movs	r3, #144	@ 0x90
 80067ec:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80067ee:	2300      	movs	r3, #0
 80067f0:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80067f2:	2300      	movs	r3, #0
 80067f4:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80067f6:	2300      	movs	r3, #0
 80067f8:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f107 0210 	add.w	r2, r7, #16
 8006802:	4611      	mov	r1, r2
 8006804:	4618      	mov	r0, r3
 8006806:	f003 ff97 	bl	800a738 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	68da      	ldr	r2, [r3, #12]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006818:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	68ba      	ldr	r2, [r7, #8]
 8006820:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	2201      	movs	r2, #1
 8006828:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	2b01      	cmp	r3, #1
 800682e:	d90a      	bls.n	8006846 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	22a0      	movs	r2, #160	@ 0xa0
 8006834:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800683c:	4618      	mov	r0, r3
 800683e:	f004 f833 	bl	800a8a8 <SDMMC_CmdWriteMultiBlock>
 8006842:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8006844:	e009      	b.n	800685a <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2290      	movs	r2, #144	@ 0x90
 800684a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006852:	4618      	mov	r0, r3
 8006854:	f004 f805 	bl	800a862 <SDMMC_CmdWriteSingleBlock>
 8006858:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800685a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800685c:	2b00      	cmp	r3, #0
 800685e:	d012      	beq.n	8006886 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a0f      	ldr	r2, [pc, #60]	@ (80068a4 <HAL_SD_WriteBlocks_DMA+0x14c>)
 8006866:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800686c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800686e:	431a      	orrs	r2, r3
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2201      	movs	r2, #1
 8006878:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2200      	movs	r2, #0
 8006880:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	e00a      	b.n	800689c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 8006894:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006896:	2300      	movs	r3, #0
 8006898:	e000      	b.n	800689c <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800689a:	2302      	movs	r3, #2
  }
}
 800689c:	4618      	mov	r0, r3
 800689e:	3730      	adds	r7, #48	@ 0x30
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}
 80068a4:	1fe00fff 	.word	0x1fe00fff

080068a8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b084      	sub	sp, #16
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068b4:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d008      	beq.n	80068d6 <HAL_SD_IRQHandler+0x2e>
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f003 0308 	and.w	r3, r3, #8
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d003      	beq.n	80068d6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f001 f926 	bl	8007b20 <SD_Read_IT>
 80068d4:	e19a      	b.n	8006c0c <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	f000 80ac 	beq.w	8006a3e <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80068ee:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	4b59      	ldr	r3, [pc, #356]	@ (8006a60 <HAL_SD_IRQHandler+0x1b8>)
 80068fc:	400b      	ands	r3, r1
 80068fe:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800690e:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	68da      	ldr	r2, [r3, #12]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800691e:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f003 0308 	and.w	r3, r3, #8
 8006926:	2b00      	cmp	r3, #0
 8006928:	d038      	beq.n	800699c <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	f003 0302 	and.w	r3, r3, #2
 8006930:	2b00      	cmp	r3, #0
 8006932:	d104      	bne.n	800693e <HAL_SD_IRQHandler+0x96>
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f003 0320 	and.w	r3, r3, #32
 800693a:	2b00      	cmp	r3, #0
 800693c:	d011      	beq.n	8006962 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4618      	mov	r0, r3
 8006944:	f003 ffd4 	bl	800a8f0 <SDMMC_CmdStopTransfer>
 8006948:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d008      	beq.n	8006962 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	431a      	orrs	r2, r3
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f000 f95b 	bl	8006c18 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a3f      	ldr	r2, [pc, #252]	@ (8006a64 <HAL_SD_IRQHandler+0x1bc>)
 8006968:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2201      	movs	r2, #1
 800696e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2200      	movs	r2, #0
 8006976:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f003 0301 	and.w	r3, r3, #1
 800697e:	2b00      	cmp	r3, #0
 8006980:	d104      	bne.n	800698c <HAL_SD_IRQHandler+0xe4>
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f003 0302 	and.w	r3, r3, #2
 8006988:	2b00      	cmp	r3, #0
 800698a:	d003      	beq.n	8006994 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f004 fc87 	bl	800b2a0 <HAL_SD_RxCpltCallback>
 8006992:	e13b      	b.n	8006c0c <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f004 fc79 	bl	800b28c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800699a:	e137      	b.n	8006c0c <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	f000 8132 	beq.w	8006c0c <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	2200      	movs	r2, #0
 80069ae:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	2200      	movs	r2, #0
 80069b6:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	2200      	movs	r2, #0
 80069be:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f003 0302 	and.w	r3, r3, #2
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d104      	bne.n	80069d4 <HAL_SD_IRQHandler+0x12c>
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	f003 0320 	and.w	r3, r3, #32
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d011      	beq.n	80069f8 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4618      	mov	r0, r3
 80069da:	f003 ff89 	bl	800a8f0 <SDMMC_CmdStopTransfer>
 80069de:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d008      	beq.n	80069f8 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	431a      	orrs	r2, r3
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 f910 	bl	8006c18 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2201      	movs	r2, #1
 80069fc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2200      	movs	r2, #0
 8006a04:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	f003 0310 	and.w	r3, r3, #16
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d104      	bne.n	8006a1a <HAL_SD_IRQHandler+0x172>
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f003 0320 	and.w	r3, r3, #32
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d002      	beq.n	8006a20 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f004 fc36 	bl	800b28c <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f003 0301 	and.w	r3, r3, #1
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d105      	bne.n	8006a36 <HAL_SD_IRQHandler+0x18e>
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	f003 0302 	and.w	r3, r3, #2
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	f000 80eb 	beq.w	8006c0c <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f004 fc32 	bl	800b2a0 <HAL_SD_RxCpltCallback>
}
 8006a3c:	e0e6      	b.n	8006c0c <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d00d      	beq.n	8006a68 <HAL_SD_IRQHandler+0x1c0>
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f003 0308 	and.w	r3, r3, #8
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d008      	beq.n	8006a68 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f001 f8a8 	bl	8007bac <SD_Write_IT>
 8006a5c:	e0d6      	b.n	8006c0c <HAL_SD_IRQHandler+0x364>
 8006a5e:	bf00      	nop
 8006a60:	ffff3ec5 	.word	0xffff3ec5
 8006a64:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a6e:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	f000 809d 	beq.w	8006bb2 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a7e:	f003 0302 	and.w	r3, r3, #2
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d005      	beq.n	8006a92 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a8a:	f043 0202 	orr.w	r2, r3, #2
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a98:	f003 0308 	and.w	r3, r3, #8
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d005      	beq.n	8006aac <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006aa4:	f043 0208 	orr.w	r2, r3, #8
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ab2:	f003 0320 	and.w	r3, r3, #32
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d005      	beq.n	8006ac6 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006abe:	f043 0220 	orr.w	r2, r3, #32
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006acc:	f003 0310 	and.w	r3, r3, #16
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d005      	beq.n	8006ae0 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ad8:	f043 0210 	orr.w	r2, r3, #16
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a4b      	ldr	r2, [pc, #300]	@ (8006c14 <HAL_SD_IRQHandler+0x36c>)
 8006ae6:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8006af6:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	68da      	ldr	r2, [r3, #12]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b06:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006b16:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	68da      	ldr	r2, [r3, #12]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006b26:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f003 fedf 	bl	800a8f0 <SDMMC_CmdStopTransfer>
 8006b32:	4602      	mov	r2, r0
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b38:	431a      	orrs	r2, r3
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	68da      	ldr	r2, [r3, #12]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006b4c:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006b56:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f003 0308 	and.w	r3, r3, #8
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d00a      	beq.n	8006b78 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2201      	movs	r2, #1
 8006b66:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f000 f851 	bl	8006c18 <HAL_SD_ErrorCallback>
}
 8006b76:	e049      	b.n	8006c0c <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d044      	beq.n	8006c0c <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d040      	beq.n	8006c0c <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8006b98:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 f834 	bl	8006c18 <HAL_SD_ErrorCallback>
}
 8006bb0:	e02c      	b.n	8006c0c <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d025      	beq.n	8006c0c <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006bc8:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bd0:	f003 0304 	and.w	r3, r3, #4
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d10c      	bne.n	8006bf2 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f003 0320 	and.w	r3, r3, #32
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d003      	beq.n	8006bea <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f001 f84a 	bl	8007c7c <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8006be8:	e010      	b.n	8006c0c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f001 f832 	bl	8007c54 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8006bf0:	e00c      	b.n	8006c0c <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	f003 0320 	and.w	r3, r3, #32
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d003      	beq.n	8006c04 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f001 f833 	bl	8007c68 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 8006c02:	e003      	b.n	8006c0c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f001 f81b 	bl	8007c40 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8006c0a:	e7ff      	b.n	8006c0c <HAL_SD_IRQHandler+0x364>
 8006c0c:	bf00      	nop
 8006c0e:	3710      	adds	r7, #16
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}
 8006c14:	18000f3a 	.word	0x18000f3a

08006c18 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b083      	sub	sp, #12
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8006c20:	bf00      	nop
 8006c22:	370c      	adds	r7, #12
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr

08006c2c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b083      	sub	sp, #12
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c3a:	0f9b      	lsrs	r3, r3, #30
 8006c3c:	b2da      	uxtb	r2, r3
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c46:	0e9b      	lsrs	r3, r3, #26
 8006c48:	b2db      	uxtb	r3, r3
 8006c4a:	f003 030f 	and.w	r3, r3, #15
 8006c4e:	b2da      	uxtb	r2, r3
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c58:	0e1b      	lsrs	r3, r3, #24
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	f003 0303 	and.w	r3, r3, #3
 8006c60:	b2da      	uxtb	r2, r3
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c6a:	0c1b      	lsrs	r3, r3, #16
 8006c6c:	b2da      	uxtb	r2, r3
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c76:	0a1b      	lsrs	r3, r3, #8
 8006c78:	b2da      	uxtb	r2, r3
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c82:	b2da      	uxtb	r2, r3
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c8c:	0d1b      	lsrs	r3, r3, #20
 8006c8e:	b29a      	uxth	r2, r3
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c98:	0c1b      	lsrs	r3, r3, #16
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	f003 030f 	and.w	r3, r3, #15
 8006ca0:	b2da      	uxtb	r2, r3
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006caa:	0bdb      	lsrs	r3, r3, #15
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	f003 0301 	and.w	r3, r3, #1
 8006cb2:	b2da      	uxtb	r2, r3
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006cbc:	0b9b      	lsrs	r3, r3, #14
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	f003 0301 	and.w	r3, r3, #1
 8006cc4:	b2da      	uxtb	r2, r3
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006cce:	0b5b      	lsrs	r3, r3, #13
 8006cd0:	b2db      	uxtb	r3, r3
 8006cd2:	f003 0301 	and.w	r3, r3, #1
 8006cd6:	b2da      	uxtb	r2, r3
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ce0:	0b1b      	lsrs	r3, r3, #12
 8006ce2:	b2db      	uxtb	r3, r3
 8006ce4:	f003 0301 	and.w	r3, r3, #1
 8006ce8:	b2da      	uxtb	r2, r3
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d163      	bne.n	8006dc4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d00:	009a      	lsls	r2, r3, #2
 8006d02:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006d06:	4013      	ands	r3, r2
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8006d0c:	0f92      	lsrs	r2, r2, #30
 8006d0e:	431a      	orrs	r2, r3
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d18:	0edb      	lsrs	r3, r3, #27
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	f003 0307 	and.w	r3, r3, #7
 8006d20:	b2da      	uxtb	r2, r3
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d2a:	0e1b      	lsrs	r3, r3, #24
 8006d2c:	b2db      	uxtb	r3, r3
 8006d2e:	f003 0307 	and.w	r3, r3, #7
 8006d32:	b2da      	uxtb	r2, r3
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d3c:	0d5b      	lsrs	r3, r3, #21
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	f003 0307 	and.w	r3, r3, #7
 8006d44:	b2da      	uxtb	r2, r3
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d4e:	0c9b      	lsrs	r3, r3, #18
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	f003 0307 	and.w	r3, r3, #7
 8006d56:	b2da      	uxtb	r2, r3
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d60:	0bdb      	lsrs	r3, r3, #15
 8006d62:	b2db      	uxtb	r3, r3
 8006d64:	f003 0307 	and.w	r3, r3, #7
 8006d68:	b2da      	uxtb	r2, r3
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	691b      	ldr	r3, [r3, #16]
 8006d72:	1c5a      	adds	r2, r3, #1
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	7e1b      	ldrb	r3, [r3, #24]
 8006d7c:	b2db      	uxtb	r3, r3
 8006d7e:	f003 0307 	and.w	r3, r3, #7
 8006d82:	3302      	adds	r3, #2
 8006d84:	2201      	movs	r2, #1
 8006d86:	fa02 f303 	lsl.w	r3, r2, r3
 8006d8a:	687a      	ldr	r2, [r7, #4]
 8006d8c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006d8e:	fb03 f202 	mul.w	r2, r3, r2
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	7a1b      	ldrb	r3, [r3, #8]
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	f003 030f 	and.w	r3, r3, #15
 8006da0:	2201      	movs	r2, #1
 8006da2:	409a      	lsls	r2, r3
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8006db0:	0a52      	lsrs	r2, r2, #9
 8006db2:	fb03 f202 	mul.w	r2, r3, r2
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006dc0:	655a      	str	r2, [r3, #84]	@ 0x54
 8006dc2:	e031      	b.n	8006e28 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d11d      	bne.n	8006e08 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006dd0:	041b      	lsls	r3, r3, #16
 8006dd2:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006dda:	0c1b      	lsrs	r3, r3, #16
 8006ddc:	431a      	orrs	r2, r3
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	691b      	ldr	r3, [r3, #16]
 8006de6:	3301      	adds	r3, #1
 8006de8:	029a      	lsls	r2, r3, #10
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006dfc:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	655a      	str	r2, [r3, #84]	@ 0x54
 8006e06:	e00f      	b.n	8006e28 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a58      	ldr	r2, [pc, #352]	@ (8006f70 <HAL_SD_GetCardCSD+0x344>)
 8006e0e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e14:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8006e24:	2301      	movs	r3, #1
 8006e26:	e09d      	b.n	8006f64 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e2c:	0b9b      	lsrs	r3, r3, #14
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	f003 0301 	and.w	r3, r3, #1
 8006e34:	b2da      	uxtb	r2, r3
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e3e:	09db      	lsrs	r3, r3, #7
 8006e40:	b2db      	uxtb	r3, r3
 8006e42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e46:	b2da      	uxtb	r2, r3
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e50:	b2db      	uxtb	r3, r3
 8006e52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e56:	b2da      	uxtb	r2, r3
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006e60:	0fdb      	lsrs	r3, r3, #31
 8006e62:	b2da      	uxtb	r2, r3
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006e6c:	0f5b      	lsrs	r3, r3, #29
 8006e6e:	b2db      	uxtb	r3, r3
 8006e70:	f003 0303 	and.w	r3, r3, #3
 8006e74:	b2da      	uxtb	r2, r3
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006e7e:	0e9b      	lsrs	r3, r3, #26
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	f003 0307 	and.w	r3, r3, #7
 8006e86:	b2da      	uxtb	r2, r3
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006e90:	0d9b      	lsrs	r3, r3, #22
 8006e92:	b2db      	uxtb	r3, r3
 8006e94:	f003 030f 	and.w	r3, r3, #15
 8006e98:	b2da      	uxtb	r2, r3
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ea2:	0d5b      	lsrs	r3, r3, #21
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	f003 0301 	and.w	r3, r3, #1
 8006eaa:	b2da      	uxtb	r2, r3
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ebe:	0c1b      	lsrs	r3, r3, #16
 8006ec0:	b2db      	uxtb	r3, r3
 8006ec2:	f003 0301 	and.w	r3, r3, #1
 8006ec6:	b2da      	uxtb	r2, r3
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ed2:	0bdb      	lsrs	r3, r3, #15
 8006ed4:	b2db      	uxtb	r3, r3
 8006ed6:	f003 0301 	and.w	r3, r3, #1
 8006eda:	b2da      	uxtb	r2, r3
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ee6:	0b9b      	lsrs	r3, r3, #14
 8006ee8:	b2db      	uxtb	r3, r3
 8006eea:	f003 0301 	and.w	r3, r3, #1
 8006eee:	b2da      	uxtb	r2, r3
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006efa:	0b5b      	lsrs	r3, r3, #13
 8006efc:	b2db      	uxtb	r3, r3
 8006efe:	f003 0301 	and.w	r3, r3, #1
 8006f02:	b2da      	uxtb	r2, r3
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006f0e:	0b1b      	lsrs	r3, r3, #12
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	f003 0301 	and.w	r3, r3, #1
 8006f16:	b2da      	uxtb	r2, r3
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006f22:	0a9b      	lsrs	r3, r3, #10
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	f003 0303 	and.w	r3, r3, #3
 8006f2a:	b2da      	uxtb	r2, r3
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006f36:	0a1b      	lsrs	r3, r3, #8
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	f003 0303 	and.w	r3, r3, #3
 8006f3e:	b2da      	uxtb	r2, r3
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006f4a:	085b      	lsrs	r3, r3, #1
 8006f4c:	b2db      	uxtb	r3, r3
 8006f4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f52:	b2da      	uxtb	r2, r3
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8006f62:	2300      	movs	r3, #0
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	370c      	adds	r7, #12
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr
 8006f70:	1fe00fff 	.word	0x1fe00fff

08006f74 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b094      	sub	sp, #80	@ 0x50
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006f8a:	b2db      	uxtb	r3, r3
 8006f8c:	2b03      	cmp	r3, #3
 8006f8e:	d101      	bne.n	8006f94 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8006f90:	2301      	movs	r3, #1
 8006f92:	e0a7      	b.n	80070e4 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8006f94:	f107 0308 	add.w	r3, r7, #8
 8006f98:	4619      	mov	r1, r3
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 fb62 	bl	8007664 <SD_SendSDStatus>
 8006fa0:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8006fa2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d011      	beq.n	8006fcc <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a4f      	ldr	r2, [pc, #316]	@ (80070ec <HAL_SD_GetCardStatus+0x178>)
 8006fae:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006fb4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006fb6:	431a      	orrs	r2, r3
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8006fca:	e070      	b.n	80070ae <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	099b      	lsrs	r3, r3, #6
 8006fd0:	b2db      	uxtb	r3, r3
 8006fd2:	f003 0303 	and.w	r3, r3, #3
 8006fd6:	b2da      	uxtb	r2, r3
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	095b      	lsrs	r3, r3, #5
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	f003 0301 	and.w	r3, r3, #1
 8006fe6:	b2da      	uxtb	r2, r3
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	0a1b      	lsrs	r3, r3, #8
 8006ff0:	b29b      	uxth	r3, r3
 8006ff2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006ff6:	b29a      	uxth	r2, r3
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	0e1b      	lsrs	r3, r3, #24
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	4313      	orrs	r3, r2
 8007000:	b29a      	uxth	r2, r3
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	061a      	lsls	r2, r3, #24
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	021b      	lsls	r3, r3, #8
 800700e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007012:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	0a1b      	lsrs	r3, r3, #8
 8007018:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800701c:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	0e1b      	lsrs	r3, r3, #24
 8007022:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	b2da      	uxtb	r2, r3
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	0a1b      	lsrs	r3, r3, #8
 8007034:	b2da      	uxtb	r2, r3
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	0d1b      	lsrs	r3, r3, #20
 800703e:	b2db      	uxtb	r3, r3
 8007040:	f003 030f 	and.w	r3, r3, #15
 8007044:	b2da      	uxtb	r2, r3
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	0c1b      	lsrs	r3, r3, #16
 800704e:	b29b      	uxth	r3, r3
 8007050:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007054:	b29a      	uxth	r2, r3
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	b29b      	uxth	r3, r3
 800705a:	b2db      	uxtb	r3, r3
 800705c:	b29b      	uxth	r3, r3
 800705e:	4313      	orrs	r3, r2
 8007060:	b29a      	uxth	r2, r3
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	0a9b      	lsrs	r3, r3, #10
 800706a:	b2db      	uxtb	r3, r3
 800706c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007070:	b2da      	uxtb	r2, r3
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	0a1b      	lsrs	r3, r3, #8
 800707a:	b2db      	uxtb	r3, r3
 800707c:	f003 0303 	and.w	r3, r3, #3
 8007080:	b2da      	uxtb	r2, r3
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	091b      	lsrs	r3, r3, #4
 800708a:	b2db      	uxtb	r3, r3
 800708c:	f003 030f 	and.w	r3, r3, #15
 8007090:	b2da      	uxtb	r2, r3
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	b2db      	uxtb	r3, r3
 800709a:	f003 030f 	and.w	r3, r3, #15
 800709e:	b2da      	uxtb	r2, r3
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80070a4:	69bb      	ldr	r3, [r7, #24]
 80070a6:	0e1b      	lsrs	r3, r3, #24
 80070a8:	b2da      	uxtb	r2, r3
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80070b6:	4618      	mov	r0, r3
 80070b8:	f003 fb6a 	bl	800a790 <SDMMC_CmdBlockLength>
 80070bc:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80070be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d00d      	beq.n	80070e0 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a08      	ldr	r2, [pc, #32]	@ (80070ec <HAL_SD_GetCardStatus+0x178>)
 80070ca:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80070d0:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2201      	movs	r2, #1
 80070d6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 80070da:	2301      	movs	r3, #1
 80070dc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 80070e0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3750      	adds	r7, #80	@ 0x50
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}
 80070ec:	1fe00fff 	.word	0x1fe00fff

080070f0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b083      	sub	sp, #12
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800713a:	2300      	movs	r3, #0
}
 800713c:	4618      	mov	r0, r3
 800713e:	370c      	adds	r7, #12
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr

08007148 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007148:	b590      	push	{r4, r7, lr}
 800714a:	b08d      	sub	sp, #52	@ 0x34
 800714c:	af02      	add	r7, sp, #8
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8007152:	2300      	movs	r3, #0
 8007154:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2203      	movs	r2, #3
 800715c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007164:	2b03      	cmp	r3, #3
 8007166:	d02e      	beq.n	80071c6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800716e:	d106      	bne.n	800717e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007174:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	635a      	str	r2, [r3, #52]	@ 0x34
 800717c:	e029      	b.n	80071d2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007184:	d10a      	bne.n	800719c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f000 fb64 	bl	8007854 <SD_WideBus_Enable>
 800718c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007192:	6a3b      	ldr	r3, [r7, #32]
 8007194:	431a      	orrs	r2, r3
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	635a      	str	r2, [r3, #52]	@ 0x34
 800719a:	e01a      	b.n	80071d2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d10a      	bne.n	80071b8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f000 fba1 	bl	80078ea <SD_WideBus_Disable>
 80071a8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80071ae:	6a3b      	ldr	r3, [r7, #32]
 80071b0:	431a      	orrs	r2, r3
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	635a      	str	r2, [r3, #52]	@ 0x34
 80071b6:	e00c      	b.n	80071d2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071bc:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	635a      	str	r2, [r3, #52]	@ 0x34
 80071c4:	e005      	b.n	80071d2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071ca:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d007      	beq.n	80071ea <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a5f      	ldr	r2, [pc, #380]	@ (800735c <HAL_SD_ConfigWideBusOperation+0x214>)
 80071e0:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 80071e2:	2301      	movs	r3, #1
 80071e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80071e8:	e096      	b.n	8007318 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80071ea:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80071ee:	f04f 0100 	mov.w	r1, #0
 80071f2:	f7fd fdf5 	bl	8004de0 <HAL_RCCEx_GetPeriphCLKFreq>
 80071f6:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 80071f8:	69fb      	ldr	r3, [r7, #28]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	f000 8083 	beq.w	8007306 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	689b      	ldr	r3, [r3, #8]
 800720a:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	691b      	ldr	r3, [r3, #16]
 8007214:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	695a      	ldr	r2, [r3, #20]
 800721a:	69fb      	ldr	r3, [r7, #28]
 800721c:	4950      	ldr	r1, [pc, #320]	@ (8007360 <HAL_SD_ConfigWideBusOperation+0x218>)
 800721e:	fba1 1303 	umull	r1, r3, r1, r3
 8007222:	0e1b      	lsrs	r3, r3, #24
 8007224:	429a      	cmp	r2, r3
 8007226:	d303      	bcc.n	8007230 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	695b      	ldr	r3, [r3, #20]
 800722c:	61bb      	str	r3, [r7, #24]
 800722e:	e05a      	b.n	80072e6 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007234:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007238:	d103      	bne.n	8007242 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	695b      	ldr	r3, [r3, #20]
 800723e:	61bb      	str	r3, [r7, #24]
 8007240:	e051      	b.n	80072e6 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007246:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800724a:	d126      	bne.n	800729a <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	695b      	ldr	r3, [r3, #20]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d10e      	bne.n	8007272 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8007254:	69fb      	ldr	r3, [r7, #28]
 8007256:	4a43      	ldr	r2, [pc, #268]	@ (8007364 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d906      	bls.n	800726a <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800725c:	69fb      	ldr	r3, [r7, #28]
 800725e:	4a40      	ldr	r2, [pc, #256]	@ (8007360 <HAL_SD_ConfigWideBusOperation+0x218>)
 8007260:	fba2 2303 	umull	r2, r3, r2, r3
 8007264:	0e5b      	lsrs	r3, r3, #25
 8007266:	61bb      	str	r3, [r7, #24]
 8007268:	e03d      	b.n	80072e6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	695b      	ldr	r3, [r3, #20]
 800726e:	61bb      	str	r3, [r7, #24]
 8007270:	e039      	b.n	80072e6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	695b      	ldr	r3, [r3, #20]
 8007276:	005b      	lsls	r3, r3, #1
 8007278:	69fa      	ldr	r2, [r7, #28]
 800727a:	fbb2 f3f3 	udiv	r3, r2, r3
 800727e:	4a39      	ldr	r2, [pc, #228]	@ (8007364 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d906      	bls.n	8007292 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8007284:	69fb      	ldr	r3, [r7, #28]
 8007286:	4a36      	ldr	r2, [pc, #216]	@ (8007360 <HAL_SD_ConfigWideBusOperation+0x218>)
 8007288:	fba2 2303 	umull	r2, r3, r2, r3
 800728c:	0e5b      	lsrs	r3, r3, #25
 800728e:	61bb      	str	r3, [r7, #24]
 8007290:	e029      	b.n	80072e6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	695b      	ldr	r3, [r3, #20]
 8007296:	61bb      	str	r3, [r7, #24]
 8007298:	e025      	b.n	80072e6 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	695b      	ldr	r3, [r3, #20]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d10e      	bne.n	80072c0 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 80072a2:	69fb      	ldr	r3, [r7, #28]
 80072a4:	4a30      	ldr	r2, [pc, #192]	@ (8007368 <HAL_SD_ConfigWideBusOperation+0x220>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d906      	bls.n	80072b8 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80072aa:	69fb      	ldr	r3, [r7, #28]
 80072ac:	4a2c      	ldr	r2, [pc, #176]	@ (8007360 <HAL_SD_ConfigWideBusOperation+0x218>)
 80072ae:	fba2 2303 	umull	r2, r3, r2, r3
 80072b2:	0e1b      	lsrs	r3, r3, #24
 80072b4:	61bb      	str	r3, [r7, #24]
 80072b6:	e016      	b.n	80072e6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	695b      	ldr	r3, [r3, #20]
 80072bc:	61bb      	str	r3, [r7, #24]
 80072be:	e012      	b.n	80072e6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	695b      	ldr	r3, [r3, #20]
 80072c4:	005b      	lsls	r3, r3, #1
 80072c6:	69fa      	ldr	r2, [r7, #28]
 80072c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80072cc:	4a26      	ldr	r2, [pc, #152]	@ (8007368 <HAL_SD_ConfigWideBusOperation+0x220>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d906      	bls.n	80072e0 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80072d2:	69fb      	ldr	r3, [r7, #28]
 80072d4:	4a22      	ldr	r2, [pc, #136]	@ (8007360 <HAL_SD_ConfigWideBusOperation+0x218>)
 80072d6:	fba2 2303 	umull	r2, r3, r2, r3
 80072da:	0e1b      	lsrs	r3, r3, #24
 80072dc:	61bb      	str	r3, [r7, #24]
 80072de:	e002      	b.n	80072e6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	695b      	ldr	r3, [r3, #20]
 80072e4:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681c      	ldr	r4, [r3, #0]
 80072ea:	466a      	mov	r2, sp
 80072ec:	f107 0314 	add.w	r3, r7, #20
 80072f0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80072f4:	e882 0003 	stmia.w	r2, {r0, r1}
 80072f8:	f107 0308 	add.w	r3, r7, #8
 80072fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80072fe:	4620      	mov	r0, r4
 8007300:	f003 f968 	bl	800a5d4 <SDMMC_Init>
 8007304:	e008      	b.n	8007318 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800730a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 8007312:	2301      	movs	r3, #1
 8007314:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007320:	4618      	mov	r0, r3
 8007322:	f003 fa35 	bl	800a790 <SDMMC_CmdBlockLength>
 8007326:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007328:	6a3b      	ldr	r3, [r7, #32]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d00c      	beq.n	8007348 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a0a      	ldr	r2, [pc, #40]	@ (800735c <HAL_SD_ConfigWideBusOperation+0x214>)
 8007334:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800733a:	6a3b      	ldr	r3, [r7, #32]
 800733c:	431a      	orrs	r2, r3
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8007342:	2301      	movs	r3, #1
 8007344:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2201      	movs	r2, #1
 800734c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 8007350:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8007354:	4618      	mov	r0, r3
 8007356:	372c      	adds	r7, #44	@ 0x2c
 8007358:	46bd      	mov	sp, r7
 800735a:	bd90      	pop	{r4, r7, pc}
 800735c:	1fe00fff 	.word	0x1fe00fff
 8007360:	55e63b89 	.word	0x55e63b89
 8007364:	02faf080 	.word	0x02faf080
 8007368:	017d7840 	.word	0x017d7840

0800736c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b086      	sub	sp, #24
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007374:	2300      	movs	r3, #0
 8007376:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007378:	f107 030c 	add.w	r3, r7, #12
 800737c:	4619      	mov	r1, r3
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 fa40 	bl	8007804 <SD_SendStatus>
 8007384:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d005      	beq.n	8007398 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	431a      	orrs	r2, r3
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	0a5b      	lsrs	r3, r3, #9
 800739c:	f003 030f 	and.w	r3, r3, #15
 80073a0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80073a2:	693b      	ldr	r3, [r7, #16]
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3718      	adds	r7, #24
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}

080073ac <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b090      	sub	sp, #64	@ 0x40
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 80073b4:	2300      	movs	r3, #0
 80073b6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 80073b8:	f7fa f9f2 	bl	80017a0 <HAL_GetTick>
 80073bc:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4618      	mov	r0, r3
 80073c4:	f003 f95f 	bl	800a686 <SDMMC_GetPowerState>
 80073c8:	4603      	mov	r3, r0
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d102      	bne.n	80073d4 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80073ce:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80073d2:	e0b5      	b.n	8007540 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073d8:	2b03      	cmp	r3, #3
 80073da:	d02e      	beq.n	800743a <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4618      	mov	r0, r3
 80073e2:	f003 fbaa 	bl	800ab3a <SDMMC_CmdSendCID>
 80073e6:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80073e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d001      	beq.n	80073f2 <SD_InitCard+0x46>
    {
      return errorstate;
 80073ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073f0:	e0a6      	b.n	8007540 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	2100      	movs	r1, #0
 80073f8:	4618      	mov	r0, r3
 80073fa:	f003 f98a 	bl	800a712 <SDMMC_GetResponse>
 80073fe:	4602      	mov	r2, r0
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	2104      	movs	r1, #4
 800740a:	4618      	mov	r0, r3
 800740c:	f003 f981 	bl	800a712 <SDMMC_GetResponse>
 8007410:	4602      	mov	r2, r0
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	2108      	movs	r1, #8
 800741c:	4618      	mov	r0, r3
 800741e:	f003 f978 	bl	800a712 <SDMMC_GetResponse>
 8007422:	4602      	mov	r2, r0
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	210c      	movs	r1, #12
 800742e:	4618      	mov	r0, r3
 8007430:	f003 f96f 	bl	800a712 <SDMMC_GetResponse>
 8007434:	4602      	mov	r2, r0
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800743e:	2b03      	cmp	r3, #3
 8007440:	d01d      	beq.n	800747e <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8007442:	e019      	b.n	8007478 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f107 020a 	add.w	r2, r7, #10
 800744c:	4611      	mov	r1, r2
 800744e:	4618      	mov	r0, r3
 8007450:	f003 fbb2 	bl	800abb8 <SDMMC_CmdSetRelAdd>
 8007454:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8007456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007458:	2b00      	cmp	r3, #0
 800745a:	d001      	beq.n	8007460 <SD_InitCard+0xb4>
      {
        return errorstate;
 800745c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800745e:	e06f      	b.n	8007540 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8007460:	f7fa f99e 	bl	80017a0 <HAL_GetTick>
 8007464:	4602      	mov	r2, r0
 8007466:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007468:	1ad3      	subs	r3, r2, r3
 800746a:	f241 3287 	movw	r2, #4999	@ 0x1387
 800746e:	4293      	cmp	r3, r2
 8007470:	d902      	bls.n	8007478 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8007472:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007476:	e063      	b.n	8007540 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8007478:	897b      	ldrh	r3, [r7, #10]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d0e2      	beq.n	8007444 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007482:	2b03      	cmp	r3, #3
 8007484:	d036      	beq.n	80074f4 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007486:	897b      	ldrh	r3, [r7, #10]
 8007488:	461a      	mov	r2, r3
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007496:	041b      	lsls	r3, r3, #16
 8007498:	4619      	mov	r1, r3
 800749a:	4610      	mov	r0, r2
 800749c:	f003 fb6c 	bl	800ab78 <SDMMC_CmdSendCSD>
 80074a0:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80074a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d001      	beq.n	80074ac <SD_InitCard+0x100>
    {
      return errorstate;
 80074a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074aa:	e049      	b.n	8007540 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	2100      	movs	r1, #0
 80074b2:	4618      	mov	r0, r3
 80074b4:	f003 f92d 	bl	800a712 <SDMMC_GetResponse>
 80074b8:	4602      	mov	r2, r0
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	2104      	movs	r1, #4
 80074c4:	4618      	mov	r0, r3
 80074c6:	f003 f924 	bl	800a712 <SDMMC_GetResponse>
 80074ca:	4602      	mov	r2, r0
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	2108      	movs	r1, #8
 80074d6:	4618      	mov	r0, r3
 80074d8:	f003 f91b 	bl	800a712 <SDMMC_GetResponse>
 80074dc:	4602      	mov	r2, r0
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	210c      	movs	r1, #12
 80074e8:	4618      	mov	r0, r3
 80074ea:	f003 f912 	bl	800a712 <SDMMC_GetResponse>
 80074ee:	4602      	mov	r2, r0
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	2104      	movs	r1, #4
 80074fa:	4618      	mov	r0, r3
 80074fc:	f003 f909 	bl	800a712 <SDMMC_GetResponse>
 8007500:	4603      	mov	r3, r0
 8007502:	0d1a      	lsrs	r2, r3, #20
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007508:	f107 030c 	add.w	r3, r7, #12
 800750c:	4619      	mov	r1, r3
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f7ff fb8c 	bl	8006c2c <HAL_SD_GetCardCSD>
 8007514:	4603      	mov	r3, r0
 8007516:	2b00      	cmp	r3, #0
 8007518:	d002      	beq.n	8007520 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800751a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800751e:	e00f      	b.n	8007540 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007528:	041b      	lsls	r3, r3, #16
 800752a:	4619      	mov	r1, r3
 800752c:	4610      	mov	r0, r2
 800752e:	f003 fa1b 	bl	800a968 <SDMMC_CmdSelDesel>
 8007532:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8007534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007536:	2b00      	cmp	r3, #0
 8007538:	d001      	beq.n	800753e <SD_InitCard+0x192>
  {
    return errorstate;
 800753a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800753c:	e000      	b.n	8007540 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800753e:	2300      	movs	r3, #0
}
 8007540:	4618      	mov	r0, r3
 8007542:	3740      	adds	r7, #64	@ 0x40
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}

08007548 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b086      	sub	sp, #24
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007550:	2300      	movs	r3, #0
 8007552:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8007554:	2300      	movs	r3, #0
 8007556:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8007558:	2300      	movs	r3, #0
 800755a:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4618      	mov	r0, r3
 8007562:	f003 fa24 	bl	800a9ae <SDMMC_CmdGoIdleState>
 8007566:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d001      	beq.n	8007572 <SD_PowerON+0x2a>
  {
    return errorstate;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	e072      	b.n	8007658 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4618      	mov	r0, r3
 8007578:	f003 fa37 	bl	800a9ea <SDMMC_CmdOperCond>
 800757c:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007584:	d10d      	bne.n	80075a2 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2200      	movs	r2, #0
 800758a:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4618      	mov	r0, r3
 8007592:	f003 fa0c 	bl	800a9ae <SDMMC_CmdGoIdleState>
 8007596:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d004      	beq.n	80075a8 <SD_PowerON+0x60>
    {
      return errorstate;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	e05a      	b.n	8007658 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2201      	movs	r2, #1
 80075a6:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075ac:	2b01      	cmp	r3, #1
 80075ae:	d137      	bne.n	8007620 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	2100      	movs	r1, #0
 80075b6:	4618      	mov	r0, r3
 80075b8:	f003 fa37 	bl	800aa2a <SDMMC_CmdAppCommand>
 80075bc:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d02d      	beq.n	8007620 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80075c4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80075c8:	e046      	b.n	8007658 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	2100      	movs	r1, #0
 80075d0:	4618      	mov	r0, r3
 80075d2:	f003 fa2a 	bl	800aa2a <SDMMC_CmdAppCommand>
 80075d6:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d001      	beq.n	80075e2 <SD_PowerON+0x9a>
    {
      return errorstate;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	e03a      	b.n	8007658 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	491e      	ldr	r1, [pc, #120]	@ (8007660 <SD_PowerON+0x118>)
 80075e8:	4618      	mov	r0, r3
 80075ea:	f003 fa41 	bl	800aa70 <SDMMC_CmdAppOperCommand>
 80075ee:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d002      	beq.n	80075fc <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80075f6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80075fa:	e02d      	b.n	8007658 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	2100      	movs	r1, #0
 8007602:	4618      	mov	r0, r3
 8007604:	f003 f885 	bl	800a712 <SDMMC_GetResponse>
 8007608:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	0fdb      	lsrs	r3, r3, #31
 800760e:	2b01      	cmp	r3, #1
 8007610:	d101      	bne.n	8007616 <SD_PowerON+0xce>
 8007612:	2301      	movs	r3, #1
 8007614:	e000      	b.n	8007618 <SD_PowerON+0xd0>
 8007616:	2300      	movs	r3, #0
 8007618:	613b      	str	r3, [r7, #16]

    count++;
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	3301      	adds	r3, #1
 800761e:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8007626:	4293      	cmp	r3, r2
 8007628:	d802      	bhi.n	8007630 <SD_PowerON+0xe8>
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d0cc      	beq.n	80075ca <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8007636:	4293      	cmp	r3, r2
 8007638:	d902      	bls.n	8007640 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800763a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800763e:	e00b      	b.n	8007658 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2200      	movs	r2, #0
 8007644:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800764c:	2b00      	cmp	r3, #0
 800764e:	d002      	beq.n	8007656 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2201      	movs	r2, #1
 8007654:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8007656:	2300      	movs	r3, #0
}
 8007658:	4618      	mov	r0, r3
 800765a:	3718      	adds	r7, #24
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}
 8007660:	c1100000 	.word	0xc1100000

08007664 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b08c      	sub	sp, #48	@ 0x30
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800766e:	f7fa f897 	bl	80017a0 <HAL_GetTick>
 8007672:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	2100      	movs	r1, #0
 800767e:	4618      	mov	r0, r3
 8007680:	f003 f847 	bl	800a712 <SDMMC_GetResponse>
 8007684:	4603      	mov	r3, r0
 8007686:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800768a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800768e:	d102      	bne.n	8007696 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007690:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007694:	e0b0      	b.n	80077f8 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	2140      	movs	r1, #64	@ 0x40
 800769c:	4618      	mov	r0, r3
 800769e:	f003 f877 	bl	800a790 <SDMMC_CmdBlockLength>
 80076a2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80076a4:	6a3b      	ldr	r3, [r7, #32]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d005      	beq.n	80076b6 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 80076b2:	6a3b      	ldr	r3, [r7, #32]
 80076b4:	e0a0      	b.n	80077f8 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681a      	ldr	r2, [r3, #0]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076be:	041b      	lsls	r3, r3, #16
 80076c0:	4619      	mov	r1, r3
 80076c2:	4610      	mov	r0, r2
 80076c4:	f003 f9b1 	bl	800aa2a <SDMMC_CmdAppCommand>
 80076c8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80076ca:	6a3b      	ldr	r3, [r7, #32]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d005      	beq.n	80076dc <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 80076d8:	6a3b      	ldr	r3, [r7, #32]
 80076da:	e08d      	b.n	80077f8 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80076dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80076e0:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 80076e2:	2340      	movs	r3, #64	@ 0x40
 80076e4:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 80076e6:	2360      	movs	r3, #96	@ 0x60
 80076e8:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80076ea:	2302      	movs	r3, #2
 80076ec:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80076ee:	2300      	movs	r3, #0
 80076f0:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80076f2:	2301      	movs	r3, #1
 80076f4:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f107 0208 	add.w	r2, r7, #8
 80076fe:	4611      	mov	r1, r2
 8007700:	4618      	mov	r0, r3
 8007702:	f003 f819 	bl	800a738 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4618      	mov	r0, r3
 800770c:	f003 fa99 	bl	800ac42 <SDMMC_CmdStatusRegister>
 8007710:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007712:	6a3b      	ldr	r3, [r7, #32]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d02b      	beq.n	8007770 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8007720:	6a3b      	ldr	r3, [r7, #32]
 8007722:	e069      	b.n	80077f8 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800772a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800772e:	2b00      	cmp	r3, #0
 8007730:	d013      	beq.n	800775a <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8007732:	2300      	movs	r3, #0
 8007734:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007736:	e00d      	b.n	8007754 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4618      	mov	r0, r3
 800773e:	f002 ff73 	bl	800a628 <SDMMC_ReadFIFO>
 8007742:	4602      	mov	r2, r0
 8007744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007746:	601a      	str	r2, [r3, #0]
        pData++;
 8007748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800774a:	3304      	adds	r3, #4
 800774c:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 800774e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007750:	3301      	adds	r3, #1
 8007752:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007756:	2b07      	cmp	r3, #7
 8007758:	d9ee      	bls.n	8007738 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800775a:	f7fa f821 	bl	80017a0 <HAL_GetTick>
 800775e:	4602      	mov	r2, r0
 8007760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007762:	1ad3      	subs	r3, r2, r3
 8007764:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007768:	d102      	bne.n	8007770 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800776a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800776e:	e043      	b.n	80077f8 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007776:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800777a:	2b00      	cmp	r3, #0
 800777c:	d0d2      	beq.n	8007724 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007784:	f003 0308 	and.w	r3, r3, #8
 8007788:	2b00      	cmp	r3, #0
 800778a:	d001      	beq.n	8007790 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800778c:	2308      	movs	r3, #8
 800778e:	e033      	b.n	80077f8 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007796:	f003 0302 	and.w	r3, r3, #2
 800779a:	2b00      	cmp	r3, #0
 800779c:	d001      	beq.n	80077a2 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800779e:	2302      	movs	r3, #2
 80077a0:	e02a      	b.n	80077f8 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077a8:	f003 0320 	and.w	r3, r3, #32
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d017      	beq.n	80077e0 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 80077b0:	2320      	movs	r3, #32
 80077b2:	e021      	b.n	80077f8 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4618      	mov	r0, r3
 80077ba:	f002 ff35 	bl	800a628 <SDMMC_ReadFIFO>
 80077be:	4602      	mov	r2, r0
 80077c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077c2:	601a      	str	r2, [r3, #0]
    pData++;
 80077c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077c6:	3304      	adds	r3, #4
 80077c8:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80077ca:	f7f9 ffe9 	bl	80017a0 <HAL_GetTick>
 80077ce:	4602      	mov	r2, r0
 80077d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077d2:	1ad3      	subs	r3, r2, r3
 80077d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80077d8:	d102      	bne.n	80077e0 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80077da:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80077de:	e00b      	b.n	80077f8 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d1e2      	bne.n	80077b4 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a03      	ldr	r2, [pc, #12]	@ (8007800 <SD_SendSDStatus+0x19c>)
 80077f4:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 80077f6:	2300      	movs	r3, #0
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3730      	adds	r7, #48	@ 0x30
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}
 8007800:	18000f3a 	.word	0x18000f3a

08007804 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d102      	bne.n	800781a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007814:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007818:	e018      	b.n	800784c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007822:	041b      	lsls	r3, r3, #16
 8007824:	4619      	mov	r1, r3
 8007826:	4610      	mov	r0, r2
 8007828:	f003 f9e8 	bl	800abfc <SDMMC_CmdSendStatus>
 800782c:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d001      	beq.n	8007838 <SD_SendStatus+0x34>
  {
    return errorstate;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	e009      	b.n	800784c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	2100      	movs	r1, #0
 800783e:	4618      	mov	r0, r3
 8007840:	f002 ff67 	bl	800a712 <SDMMC_GetResponse>
 8007844:	4602      	mov	r2, r0
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800784a:	2300      	movs	r3, #0
}
 800784c:	4618      	mov	r0, r3
 800784e:	3710      	adds	r7, #16
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}

08007854 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b086      	sub	sp, #24
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800785c:	2300      	movs	r3, #0
 800785e:	60fb      	str	r3, [r7, #12]
 8007860:	2300      	movs	r3, #0
 8007862:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	2100      	movs	r1, #0
 800786a:	4618      	mov	r0, r3
 800786c:	f002 ff51 	bl	800a712 <SDMMC_GetResponse>
 8007870:	4603      	mov	r3, r0
 8007872:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007876:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800787a:	d102      	bne.n	8007882 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800787c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007880:	e02f      	b.n	80078e2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007882:	f107 030c 	add.w	r3, r7, #12
 8007886:	4619      	mov	r1, r3
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 f879 	bl	8007980 <SD_FindSCR>
 800788e:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d001      	beq.n	800789a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	e023      	b.n	80078e2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d01c      	beq.n	80078de <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681a      	ldr	r2, [r3, #0]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078ac:	041b      	lsls	r3, r3, #16
 80078ae:	4619      	mov	r1, r3
 80078b0:	4610      	mov	r0, r2
 80078b2:	f003 f8ba 	bl	800aa2a <SDMMC_CmdAppCommand>
 80078b6:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d001      	beq.n	80078c2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	e00f      	b.n	80078e2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	2102      	movs	r1, #2
 80078c8:	4618      	mov	r0, r3
 80078ca:	f003 f8f1 	bl	800aab0 <SDMMC_CmdBusWidth>
 80078ce:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d001      	beq.n	80078da <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	e003      	b.n	80078e2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80078da:	2300      	movs	r3, #0
 80078dc:	e001      	b.n	80078e2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80078de:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3718      	adds	r7, #24
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}

080078ea <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80078ea:	b580      	push	{r7, lr}
 80078ec:	b086      	sub	sp, #24
 80078ee:	af00      	add	r7, sp, #0
 80078f0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80078f2:	2300      	movs	r3, #0
 80078f4:	60fb      	str	r3, [r7, #12]
 80078f6:	2300      	movs	r3, #0
 80078f8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	2100      	movs	r1, #0
 8007900:	4618      	mov	r0, r3
 8007902:	f002 ff06 	bl	800a712 <SDMMC_GetResponse>
 8007906:	4603      	mov	r3, r0
 8007908:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800790c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007910:	d102      	bne.n	8007918 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007912:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007916:	e02f      	b.n	8007978 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007918:	f107 030c 	add.w	r3, r7, #12
 800791c:	4619      	mov	r1, r3
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 f82e 	bl	8007980 <SD_FindSCR>
 8007924:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d001      	beq.n	8007930 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	e023      	b.n	8007978 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007936:	2b00      	cmp	r3, #0
 8007938:	d01c      	beq.n	8007974 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681a      	ldr	r2, [r3, #0]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007942:	041b      	lsls	r3, r3, #16
 8007944:	4619      	mov	r1, r3
 8007946:	4610      	mov	r0, r2
 8007948:	f003 f86f 	bl	800aa2a <SDMMC_CmdAppCommand>
 800794c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d001      	beq.n	8007958 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	e00f      	b.n	8007978 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	2100      	movs	r1, #0
 800795e:	4618      	mov	r0, r3
 8007960:	f003 f8a6 	bl	800aab0 <SDMMC_CmdBusWidth>
 8007964:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d001      	beq.n	8007970 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	e003      	b.n	8007978 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007970:	2300      	movs	r3, #0
 8007972:	e001      	b.n	8007978 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007974:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8007978:	4618      	mov	r0, r3
 800797a:	3718      	adds	r7, #24
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b08e      	sub	sp, #56	@ 0x38
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800798a:	f7f9 ff09 	bl	80017a0 <HAL_GetTick>
 800798e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8007990:	2300      	movs	r3, #0
 8007992:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8007994:	2300      	movs	r3, #0
 8007996:	60bb      	str	r3, [r7, #8]
 8007998:	2300      	movs	r3, #0
 800799a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	2108      	movs	r1, #8
 80079a6:	4618      	mov	r0, r3
 80079a8:	f002 fef2 	bl	800a790 <SDMMC_CmdBlockLength>
 80079ac:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80079ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d001      	beq.n	80079b8 <SD_FindSCR+0x38>
  {
    return errorstate;
 80079b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079b6:	e0ad      	b.n	8007b14 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681a      	ldr	r2, [r3, #0]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079c0:	041b      	lsls	r3, r3, #16
 80079c2:	4619      	mov	r1, r3
 80079c4:	4610      	mov	r0, r2
 80079c6:	f003 f830 	bl	800aa2a <SDMMC_CmdAppCommand>
 80079ca:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80079cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d001      	beq.n	80079d6 <SD_FindSCR+0x56>
  {
    return errorstate;
 80079d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079d4:	e09e      	b.n	8007b14 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80079d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80079da:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80079dc:	2308      	movs	r3, #8
 80079de:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80079e0:	2330      	movs	r3, #48	@ 0x30
 80079e2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80079e4:	2302      	movs	r3, #2
 80079e6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80079e8:	2300      	movs	r3, #0
 80079ea:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80079ec:	2301      	movs	r3, #1
 80079ee:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f107 0210 	add.w	r2, r7, #16
 80079f8:	4611      	mov	r1, r2
 80079fa:	4618      	mov	r0, r3
 80079fc:	f002 fe9c 	bl	800a738 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4618      	mov	r0, r3
 8007a06:	f003 f876 	bl	800aaf6 <SDMMC_CmdSendSCR>
 8007a0a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d027      	beq.n	8007a62 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8007a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a14:	e07e      	b.n	8007b14 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a1c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d113      	bne.n	8007a4c <SD_FindSCR+0xcc>
 8007a24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d110      	bne.n	8007a4c <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f002 fdfa 	bl	800a628 <SDMMC_ReadFIFO>
 8007a34:	4603      	mov	r3, r0
 8007a36:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f002 fdf3 	bl	800a628 <SDMMC_ReadFIFO>
 8007a42:	4603      	mov	r3, r0
 8007a44:	60fb      	str	r3, [r7, #12]
      index++;
 8007a46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a48:	3301      	adds	r3, #1
 8007a4a:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007a4c:	f7f9 fea8 	bl	80017a0 <HAL_GetTick>
 8007a50:	4602      	mov	r2, r0
 8007a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a54:	1ad3      	subs	r3, r2, r3
 8007a56:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007a5a:	d102      	bne.n	8007a62 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007a5c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007a60:	e058      	b.n	8007b14 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007a68:	f240 532a 	movw	r3, #1322	@ 0x52a
 8007a6c:	4013      	ands	r3, r2
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d0d1      	beq.n	8007a16 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a78:	f003 0308 	and.w	r3, r3, #8
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d005      	beq.n	8007a8c <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	2208      	movs	r2, #8
 8007a86:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007a88:	2308      	movs	r3, #8
 8007a8a:	e043      	b.n	8007b14 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a92:	f003 0302 	and.w	r3, r3, #2
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d005      	beq.n	8007aa6 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	2202      	movs	r2, #2
 8007aa0:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007aa2:	2302      	movs	r3, #2
 8007aa4:	e036      	b.n	8007b14 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007aac:	f003 0320 	and.w	r3, r3, #32
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d005      	beq.n	8007ac0 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	2220      	movs	r2, #32
 8007aba:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007abc:	2320      	movs	r3, #32
 8007abe:	e029      	b.n	8007b14 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4a15      	ldr	r2, [pc, #84]	@ (8007b1c <SD_FindSCR+0x19c>)
 8007ac6:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	061a      	lsls	r2, r3, #24
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	021b      	lsls	r3, r3, #8
 8007ad0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007ad4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	0a1b      	lsrs	r3, r3, #8
 8007ada:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8007ade:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	0e1b      	lsrs	r3, r3, #24
 8007ae4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8007ae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ae8:	601a      	str	r2, [r3, #0]
    scr++;
 8007aea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007aec:	3304      	adds	r3, #4
 8007aee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	061a      	lsls	r2, r3, #24
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	021b      	lsls	r3, r3, #8
 8007af8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007afc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	0a1b      	lsrs	r3, r3, #8
 8007b02:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8007b06:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	0e1b      	lsrs	r3, r3, #24
 8007b0c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8007b0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b10:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8007b12:	2300      	movs	r3, #0
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3738      	adds	r7, #56	@ 0x38
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}
 8007b1c:	18000f3a 	.word	0x18000f3a

08007b20 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b086      	sub	sp, #24
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b2c:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b32:	2b1f      	cmp	r3, #31
 8007b34:	d936      	bls.n	8007ba4 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 8007b36:	2300      	movs	r3, #0
 8007b38:	617b      	str	r3, [r7, #20]
 8007b3a:	e027      	b.n	8007b8c <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4618      	mov	r0, r3
 8007b42:	f002 fd71 	bl	800a628 <SDMMC_ReadFIFO>
 8007b46:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	b2da      	uxtb	r2, r3
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	3301      	adds	r3, #1
 8007b54:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	0a1b      	lsrs	r3, r3, #8
 8007b5a:	b2da      	uxtb	r2, r3
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	3301      	adds	r3, #1
 8007b64:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	0c1b      	lsrs	r3, r3, #16
 8007b6a:	b2da      	uxtb	r2, r3
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	3301      	adds	r3, #1
 8007b74:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	0e1b      	lsrs	r3, r3, #24
 8007b7a:	b2da      	uxtb	r2, r3
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	3301      	adds	r3, #1
 8007b84:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	3301      	adds	r3, #1
 8007b8a:	617b      	str	r3, [r7, #20]
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	2b07      	cmp	r3, #7
 8007b90:	d9d4      	bls.n	8007b3c <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	693a      	ldr	r2, [r7, #16]
 8007b96:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b9c:	f1a3 0220 	sub.w	r2, r3, #32
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 8007ba4:	bf00      	nop
 8007ba6:	3718      	adds	r7, #24
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}

08007bac <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b086      	sub	sp, #24
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	69db      	ldr	r3, [r3, #28]
 8007bb8:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6a1b      	ldr	r3, [r3, #32]
 8007bbe:	2b1f      	cmp	r3, #31
 8007bc0:	d93a      	bls.n	8007c38 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	617b      	str	r3, [r7, #20]
 8007bc6:	e02b      	b.n	8007c20 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	781b      	ldrb	r3, [r3, #0]
 8007bcc:	60fb      	str	r3, [r7, #12]
      tmp++;
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	3301      	adds	r3, #1
 8007bd2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	781b      	ldrb	r3, [r3, #0]
 8007bd8:	021a      	lsls	r2, r3, #8
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	60fb      	str	r3, [r7, #12]
      tmp++;
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	3301      	adds	r3, #1
 8007be4:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	781b      	ldrb	r3, [r3, #0]
 8007bea:	041a      	lsls	r2, r3, #16
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	60fb      	str	r3, [r7, #12]
      tmp++;
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	3301      	adds	r3, #1
 8007bf6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	781b      	ldrb	r3, [r3, #0]
 8007bfc:	061a      	lsls	r2, r3, #24
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	4313      	orrs	r3, r2
 8007c02:	60fb      	str	r3, [r7, #12]
      tmp++;
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	3301      	adds	r3, #1
 8007c08:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f107 020c 	add.w	r2, r7, #12
 8007c12:	4611      	mov	r1, r2
 8007c14:	4618      	mov	r0, r3
 8007c16:	f002 fd14 	bl	800a642 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	3301      	adds	r3, #1
 8007c1e:	617b      	str	r3, [r7, #20]
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	2b07      	cmp	r3, #7
 8007c24:	d9d0      	bls.n	8007bc8 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	693a      	ldr	r2, [r7, #16]
 8007c2a:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6a1b      	ldr	r3, [r3, #32]
 8007c30:	f1a3 0220 	sub.w	r2, r3, #32
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	621a      	str	r2, [r3, #32]
  }
}
 8007c38:	bf00      	nop
 8007c3a:	3718      	adds	r7, #24
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}

08007c40 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b083      	sub	sp, #12
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8007c48:	bf00      	nop
 8007c4a:	370c      	adds	r7, #12
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr

08007c54 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b083      	sub	sp, #12
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8007c5c:	bf00      	nop
 8007c5e:	370c      	adds	r7, #12
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr

08007c68 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b083      	sub	sp, #12
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8007c70:	bf00      	nop
 8007c72:	370c      	adds	r7, #12
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr

08007c7c <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b083      	sub	sp, #12
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8007c84:	bf00      	nop
 8007c86:	370c      	adds	r7, #12
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8e:	4770      	bx	lr

08007c90 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b082      	sub	sp, #8
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d101      	bne.n	8007ca2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	e049      	b.n	8007d36 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ca8:	b2db      	uxtb	r3, r3
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d106      	bne.n	8007cbc <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f7f9 fae4 	bl	8001284 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2202      	movs	r2, #2
 8007cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681a      	ldr	r2, [r3, #0]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	3304      	adds	r3, #4
 8007ccc:	4619      	mov	r1, r3
 8007cce:	4610      	mov	r0, r2
 8007cd0:	f000 fa00 	bl	80080d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2201      	movs	r2, #1
 8007d00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2201      	movs	r2, #1
 8007d08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2201      	movs	r2, #1
 8007d10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2201      	movs	r2, #1
 8007d18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2201      	movs	r2, #1
 8007d20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2201      	movs	r2, #1
 8007d28:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2201      	movs	r2, #1
 8007d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007d34:	2300      	movs	r3, #0
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3708      	adds	r7, #8
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}

08007d3e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007d3e:	b580      	push	{r7, lr}
 8007d40:	b082      	sub	sp, #8
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	691b      	ldr	r3, [r3, #16]
 8007d4c:	f003 0302 	and.w	r3, r3, #2
 8007d50:	2b02      	cmp	r3, #2
 8007d52:	d122      	bne.n	8007d9a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	68db      	ldr	r3, [r3, #12]
 8007d5a:	f003 0302 	and.w	r3, r3, #2
 8007d5e:	2b02      	cmp	r3, #2
 8007d60:	d11b      	bne.n	8007d9a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f06f 0202 	mvn.w	r2, #2
 8007d6a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2201      	movs	r2, #1
 8007d70:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	699b      	ldr	r3, [r3, #24]
 8007d78:	f003 0303 	and.w	r3, r3, #3
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d003      	beq.n	8007d88 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f000 f989 	bl	8008098 <HAL_TIM_IC_CaptureCallback>
 8007d86:	e005      	b.n	8007d94 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f000 f97b 	bl	8008084 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f000 f98c 	bl	80080ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2200      	movs	r2, #0
 8007d98:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	691b      	ldr	r3, [r3, #16]
 8007da0:	f003 0304 	and.w	r3, r3, #4
 8007da4:	2b04      	cmp	r3, #4
 8007da6:	d122      	bne.n	8007dee <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	68db      	ldr	r3, [r3, #12]
 8007dae:	f003 0304 	and.w	r3, r3, #4
 8007db2:	2b04      	cmp	r3, #4
 8007db4:	d11b      	bne.n	8007dee <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f06f 0204 	mvn.w	r2, #4
 8007dbe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2202      	movs	r2, #2
 8007dc4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	699b      	ldr	r3, [r3, #24]
 8007dcc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d003      	beq.n	8007ddc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f000 f95f 	bl	8008098 <HAL_TIM_IC_CaptureCallback>
 8007dda:	e005      	b.n	8007de8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f000 f951 	bl	8008084 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 f962 	bl	80080ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2200      	movs	r2, #0
 8007dec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	691b      	ldr	r3, [r3, #16]
 8007df4:	f003 0308 	and.w	r3, r3, #8
 8007df8:	2b08      	cmp	r3, #8
 8007dfa:	d122      	bne.n	8007e42 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	68db      	ldr	r3, [r3, #12]
 8007e02:	f003 0308 	and.w	r3, r3, #8
 8007e06:	2b08      	cmp	r3, #8
 8007e08:	d11b      	bne.n	8007e42 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f06f 0208 	mvn.w	r2, #8
 8007e12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2204      	movs	r2, #4
 8007e18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	69db      	ldr	r3, [r3, #28]
 8007e20:	f003 0303 	and.w	r3, r3, #3
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d003      	beq.n	8007e30 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f000 f935 	bl	8008098 <HAL_TIM_IC_CaptureCallback>
 8007e2e:	e005      	b.n	8007e3c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f000 f927 	bl	8008084 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 f938 	bl	80080ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	691b      	ldr	r3, [r3, #16]
 8007e48:	f003 0310 	and.w	r3, r3, #16
 8007e4c:	2b10      	cmp	r3, #16
 8007e4e:	d122      	bne.n	8007e96 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	68db      	ldr	r3, [r3, #12]
 8007e56:	f003 0310 	and.w	r3, r3, #16
 8007e5a:	2b10      	cmp	r3, #16
 8007e5c:	d11b      	bne.n	8007e96 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f06f 0210 	mvn.w	r2, #16
 8007e66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2208      	movs	r2, #8
 8007e6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	69db      	ldr	r3, [r3, #28]
 8007e74:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d003      	beq.n	8007e84 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f000 f90b 	bl	8008098 <HAL_TIM_IC_CaptureCallback>
 8007e82:	e005      	b.n	8007e90 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f000 f8fd 	bl	8008084 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f000 f90e 	bl	80080ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2200      	movs	r2, #0
 8007e94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	691b      	ldr	r3, [r3, #16]
 8007e9c:	f003 0301 	and.w	r3, r3, #1
 8007ea0:	2b01      	cmp	r3, #1
 8007ea2:	d10e      	bne.n	8007ec2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	68db      	ldr	r3, [r3, #12]
 8007eaa:	f003 0301 	and.w	r3, r3, #1
 8007eae:	2b01      	cmp	r3, #1
 8007eb0:	d107      	bne.n	8007ec2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f06f 0201 	mvn.w	r2, #1
 8007eba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f000 f8d7 	bl	8008070 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	691b      	ldr	r3, [r3, #16]
 8007ec8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ecc:	2b80      	cmp	r3, #128	@ 0x80
 8007ece:	d10e      	bne.n	8007eee <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	68db      	ldr	r3, [r3, #12]
 8007ed6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007eda:	2b80      	cmp	r3, #128	@ 0x80
 8007edc:	d107      	bne.n	8007eee <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007ee6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f000 fcfb 	bl	80088e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	691b      	ldr	r3, [r3, #16]
 8007ef4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ef8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007efc:	d10e      	bne.n	8007f1c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	68db      	ldr	r3, [r3, #12]
 8007f04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f08:	2b80      	cmp	r3, #128	@ 0x80
 8007f0a:	d107      	bne.n	8007f1c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007f14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f000 fcee 	bl	80088f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	691b      	ldr	r3, [r3, #16]
 8007f22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f26:	2b40      	cmp	r3, #64	@ 0x40
 8007f28:	d10e      	bne.n	8007f48 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	68db      	ldr	r3, [r3, #12]
 8007f30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f34:	2b40      	cmp	r3, #64	@ 0x40
 8007f36:	d107      	bne.n	8007f48 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007f40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f000 f8bc 	bl	80080c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	691b      	ldr	r3, [r3, #16]
 8007f4e:	f003 0320 	and.w	r3, r3, #32
 8007f52:	2b20      	cmp	r3, #32
 8007f54:	d10e      	bne.n	8007f74 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	68db      	ldr	r3, [r3, #12]
 8007f5c:	f003 0320 	and.w	r3, r3, #32
 8007f60:	2b20      	cmp	r3, #32
 8007f62:	d107      	bne.n	8007f74 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f06f 0220 	mvn.w	r2, #32
 8007f6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f000 fcae 	bl	80088d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007f74:	bf00      	nop
 8007f76:	3708      	adds	r7, #8
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}

08007f7c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b086      	sub	sp, #24
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	60f8      	str	r0, [r7, #12]
 8007f84:	60b9      	str	r1, [r7, #8]
 8007f86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f92:	2b01      	cmp	r3, #1
 8007f94:	d101      	bne.n	8007f9a <HAL_TIM_OC_ConfigChannel+0x1e>
 8007f96:	2302      	movs	r3, #2
 8007f98:	e066      	b.n	8008068 <HAL_TIM_OC_ConfigChannel+0xec>
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2b14      	cmp	r3, #20
 8007fa6:	d857      	bhi.n	8008058 <HAL_TIM_OC_ConfigChannel+0xdc>
 8007fa8:	a201      	add	r2, pc, #4	@ (adr r2, 8007fb0 <HAL_TIM_OC_ConfigChannel+0x34>)
 8007faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fae:	bf00      	nop
 8007fb0:	08008005 	.word	0x08008005
 8007fb4:	08008059 	.word	0x08008059
 8007fb8:	08008059 	.word	0x08008059
 8007fbc:	08008059 	.word	0x08008059
 8007fc0:	08008013 	.word	0x08008013
 8007fc4:	08008059 	.word	0x08008059
 8007fc8:	08008059 	.word	0x08008059
 8007fcc:	08008059 	.word	0x08008059
 8007fd0:	08008021 	.word	0x08008021
 8007fd4:	08008059 	.word	0x08008059
 8007fd8:	08008059 	.word	0x08008059
 8007fdc:	08008059 	.word	0x08008059
 8007fe0:	0800802f 	.word	0x0800802f
 8007fe4:	08008059 	.word	0x08008059
 8007fe8:	08008059 	.word	0x08008059
 8007fec:	08008059 	.word	0x08008059
 8007ff0:	0800803d 	.word	0x0800803d
 8007ff4:	08008059 	.word	0x08008059
 8007ff8:	08008059 	.word	0x08008059
 8007ffc:	08008059 	.word	0x08008059
 8008000:	0800804b 	.word	0x0800804b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	68b9      	ldr	r1, [r7, #8]
 800800a:	4618      	mov	r0, r3
 800800c:	f000 f8fc 	bl	8008208 <TIM_OC1_SetConfig>
      break;
 8008010:	e025      	b.n	800805e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	68b9      	ldr	r1, [r7, #8]
 8008018:	4618      	mov	r0, r3
 800801a:	f000 f985 	bl	8008328 <TIM_OC2_SetConfig>
      break;
 800801e:	e01e      	b.n	800805e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	68b9      	ldr	r1, [r7, #8]
 8008026:	4618      	mov	r0, r3
 8008028:	f000 fa08 	bl	800843c <TIM_OC3_SetConfig>
      break;
 800802c:	e017      	b.n	800805e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	68b9      	ldr	r1, [r7, #8]
 8008034:	4618      	mov	r0, r3
 8008036:	f000 fa89 	bl	800854c <TIM_OC4_SetConfig>
      break;
 800803a:	e010      	b.n	800805e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	68b9      	ldr	r1, [r7, #8]
 8008042:	4618      	mov	r0, r3
 8008044:	f000 faec 	bl	8008620 <TIM_OC5_SetConfig>
      break;
 8008048:	e009      	b.n	800805e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	68b9      	ldr	r1, [r7, #8]
 8008050:	4618      	mov	r0, r3
 8008052:	f000 fb49 	bl	80086e8 <TIM_OC6_SetConfig>
      break;
 8008056:	e002      	b.n	800805e <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8008058:	2301      	movs	r3, #1
 800805a:	75fb      	strb	r3, [r7, #23]
      break;
 800805c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2200      	movs	r2, #0
 8008062:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008066:	7dfb      	ldrb	r3, [r7, #23]
}
 8008068:	4618      	mov	r0, r3
 800806a:	3718      	adds	r7, #24
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}

08008070 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008070:	b480      	push	{r7}
 8008072:	b083      	sub	sp, #12
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008078:	bf00      	nop
 800807a:	370c      	adds	r7, #12
 800807c:	46bd      	mov	sp, r7
 800807e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008082:	4770      	bx	lr

08008084 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008084:	b480      	push	{r7}
 8008086:	b083      	sub	sp, #12
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800808c:	bf00      	nop
 800808e:	370c      	adds	r7, #12
 8008090:	46bd      	mov	sp, r7
 8008092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008096:	4770      	bx	lr

08008098 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008098:	b480      	push	{r7}
 800809a:	b083      	sub	sp, #12
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80080a0:	bf00      	nop
 80080a2:	370c      	adds	r7, #12
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr

080080ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b083      	sub	sp, #12
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80080b4:	bf00      	nop
 80080b6:	370c      	adds	r7, #12
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr

080080c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b083      	sub	sp, #12
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80080c8:	bf00      	nop
 80080ca:	370c      	adds	r7, #12
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr

080080d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b085      	sub	sp, #20
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
 80080dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	4a40      	ldr	r2, [pc, #256]	@ (80081e8 <TIM_Base_SetConfig+0x114>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d013      	beq.n	8008114 <TIM_Base_SetConfig+0x40>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080f2:	d00f      	beq.n	8008114 <TIM_Base_SetConfig+0x40>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	4a3d      	ldr	r2, [pc, #244]	@ (80081ec <TIM_Base_SetConfig+0x118>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d00b      	beq.n	8008114 <TIM_Base_SetConfig+0x40>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	4a3c      	ldr	r2, [pc, #240]	@ (80081f0 <TIM_Base_SetConfig+0x11c>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d007      	beq.n	8008114 <TIM_Base_SetConfig+0x40>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	4a3b      	ldr	r2, [pc, #236]	@ (80081f4 <TIM_Base_SetConfig+0x120>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d003      	beq.n	8008114 <TIM_Base_SetConfig+0x40>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	4a3a      	ldr	r2, [pc, #232]	@ (80081f8 <TIM_Base_SetConfig+0x124>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d108      	bne.n	8008126 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800811a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	68fa      	ldr	r2, [r7, #12]
 8008122:	4313      	orrs	r3, r2
 8008124:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	4a2f      	ldr	r2, [pc, #188]	@ (80081e8 <TIM_Base_SetConfig+0x114>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d01f      	beq.n	800816e <TIM_Base_SetConfig+0x9a>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008134:	d01b      	beq.n	800816e <TIM_Base_SetConfig+0x9a>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	4a2c      	ldr	r2, [pc, #176]	@ (80081ec <TIM_Base_SetConfig+0x118>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d017      	beq.n	800816e <TIM_Base_SetConfig+0x9a>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	4a2b      	ldr	r2, [pc, #172]	@ (80081f0 <TIM_Base_SetConfig+0x11c>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d013      	beq.n	800816e <TIM_Base_SetConfig+0x9a>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	4a2a      	ldr	r2, [pc, #168]	@ (80081f4 <TIM_Base_SetConfig+0x120>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d00f      	beq.n	800816e <TIM_Base_SetConfig+0x9a>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	4a29      	ldr	r2, [pc, #164]	@ (80081f8 <TIM_Base_SetConfig+0x124>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d00b      	beq.n	800816e <TIM_Base_SetConfig+0x9a>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	4a28      	ldr	r2, [pc, #160]	@ (80081fc <TIM_Base_SetConfig+0x128>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d007      	beq.n	800816e <TIM_Base_SetConfig+0x9a>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	4a27      	ldr	r2, [pc, #156]	@ (8008200 <TIM_Base_SetConfig+0x12c>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d003      	beq.n	800816e <TIM_Base_SetConfig+0x9a>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	4a26      	ldr	r2, [pc, #152]	@ (8008204 <TIM_Base_SetConfig+0x130>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d108      	bne.n	8008180 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008174:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	68db      	ldr	r3, [r3, #12]
 800817a:	68fa      	ldr	r2, [r7, #12]
 800817c:	4313      	orrs	r3, r2
 800817e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	695b      	ldr	r3, [r3, #20]
 800818a:	4313      	orrs	r3, r2
 800818c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	68fa      	ldr	r2, [r7, #12]
 8008192:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	689a      	ldr	r2, [r3, #8]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	681a      	ldr	r2, [r3, #0]
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	4a10      	ldr	r2, [pc, #64]	@ (80081e8 <TIM_Base_SetConfig+0x114>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d00f      	beq.n	80081cc <TIM_Base_SetConfig+0xf8>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	4a12      	ldr	r2, [pc, #72]	@ (80081f8 <TIM_Base_SetConfig+0x124>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d00b      	beq.n	80081cc <TIM_Base_SetConfig+0xf8>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	4a11      	ldr	r2, [pc, #68]	@ (80081fc <TIM_Base_SetConfig+0x128>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d007      	beq.n	80081cc <TIM_Base_SetConfig+0xf8>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	4a10      	ldr	r2, [pc, #64]	@ (8008200 <TIM_Base_SetConfig+0x12c>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d003      	beq.n	80081cc <TIM_Base_SetConfig+0xf8>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	4a0f      	ldr	r2, [pc, #60]	@ (8008204 <TIM_Base_SetConfig+0x130>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d103      	bne.n	80081d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	691a      	ldr	r2, [r3, #16]
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2201      	movs	r2, #1
 80081d8:	615a      	str	r2, [r3, #20]
}
 80081da:	bf00      	nop
 80081dc:	3714      	adds	r7, #20
 80081de:	46bd      	mov	sp, r7
 80081e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e4:	4770      	bx	lr
 80081e6:	bf00      	nop
 80081e8:	40010000 	.word	0x40010000
 80081ec:	40000400 	.word	0x40000400
 80081f0:	40000800 	.word	0x40000800
 80081f4:	40000c00 	.word	0x40000c00
 80081f8:	40010400 	.word	0x40010400
 80081fc:	40014000 	.word	0x40014000
 8008200:	40014400 	.word	0x40014400
 8008204:	40014800 	.word	0x40014800

08008208 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008208:	b480      	push	{r7}
 800820a:	b087      	sub	sp, #28
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6a1b      	ldr	r3, [r3, #32]
 8008216:	f023 0201 	bic.w	r2, r3, #1
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6a1b      	ldr	r3, [r3, #32]
 8008222:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	699b      	ldr	r3, [r3, #24]
 800822e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008230:	68fa      	ldr	r2, [r7, #12]
 8008232:	4b37      	ldr	r3, [pc, #220]	@ (8008310 <TIM_OC1_SetConfig+0x108>)
 8008234:	4013      	ands	r3, r2
 8008236:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f023 0303 	bic.w	r3, r3, #3
 800823e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	68fa      	ldr	r2, [r7, #12]
 8008246:	4313      	orrs	r3, r2
 8008248:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	f023 0302 	bic.w	r3, r3, #2
 8008250:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	689b      	ldr	r3, [r3, #8]
 8008256:	697a      	ldr	r2, [r7, #20]
 8008258:	4313      	orrs	r3, r2
 800825a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	4a2d      	ldr	r2, [pc, #180]	@ (8008314 <TIM_OC1_SetConfig+0x10c>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d00f      	beq.n	8008284 <TIM_OC1_SetConfig+0x7c>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	4a2c      	ldr	r2, [pc, #176]	@ (8008318 <TIM_OC1_SetConfig+0x110>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d00b      	beq.n	8008284 <TIM_OC1_SetConfig+0x7c>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	4a2b      	ldr	r2, [pc, #172]	@ (800831c <TIM_OC1_SetConfig+0x114>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d007      	beq.n	8008284 <TIM_OC1_SetConfig+0x7c>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	4a2a      	ldr	r2, [pc, #168]	@ (8008320 <TIM_OC1_SetConfig+0x118>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d003      	beq.n	8008284 <TIM_OC1_SetConfig+0x7c>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	4a29      	ldr	r2, [pc, #164]	@ (8008324 <TIM_OC1_SetConfig+0x11c>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d10c      	bne.n	800829e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008284:	697b      	ldr	r3, [r7, #20]
 8008286:	f023 0308 	bic.w	r3, r3, #8
 800828a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	68db      	ldr	r3, [r3, #12]
 8008290:	697a      	ldr	r2, [r7, #20]
 8008292:	4313      	orrs	r3, r2
 8008294:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	f023 0304 	bic.w	r3, r3, #4
 800829c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	4a1c      	ldr	r2, [pc, #112]	@ (8008314 <TIM_OC1_SetConfig+0x10c>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d00f      	beq.n	80082c6 <TIM_OC1_SetConfig+0xbe>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	4a1b      	ldr	r2, [pc, #108]	@ (8008318 <TIM_OC1_SetConfig+0x110>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d00b      	beq.n	80082c6 <TIM_OC1_SetConfig+0xbe>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	4a1a      	ldr	r2, [pc, #104]	@ (800831c <TIM_OC1_SetConfig+0x114>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d007      	beq.n	80082c6 <TIM_OC1_SetConfig+0xbe>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	4a19      	ldr	r2, [pc, #100]	@ (8008320 <TIM_OC1_SetConfig+0x118>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d003      	beq.n	80082c6 <TIM_OC1_SetConfig+0xbe>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	4a18      	ldr	r2, [pc, #96]	@ (8008324 <TIM_OC1_SetConfig+0x11c>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d111      	bne.n	80082ea <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80082cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80082d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	695b      	ldr	r3, [r3, #20]
 80082da:	693a      	ldr	r2, [r7, #16]
 80082dc:	4313      	orrs	r3, r2
 80082de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	699b      	ldr	r3, [r3, #24]
 80082e4:	693a      	ldr	r2, [r7, #16]
 80082e6:	4313      	orrs	r3, r2
 80082e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	693a      	ldr	r2, [r7, #16]
 80082ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	68fa      	ldr	r2, [r7, #12]
 80082f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	685a      	ldr	r2, [r3, #4]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	697a      	ldr	r2, [r7, #20]
 8008302:	621a      	str	r2, [r3, #32]
}
 8008304:	bf00      	nop
 8008306:	371c      	adds	r7, #28
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr
 8008310:	fffeff8f 	.word	0xfffeff8f
 8008314:	40010000 	.word	0x40010000
 8008318:	40010400 	.word	0x40010400
 800831c:	40014000 	.word	0x40014000
 8008320:	40014400 	.word	0x40014400
 8008324:	40014800 	.word	0x40014800

08008328 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008328:	b480      	push	{r7}
 800832a:	b087      	sub	sp, #28
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
 8008330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6a1b      	ldr	r3, [r3, #32]
 8008336:	f023 0210 	bic.w	r2, r3, #16
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6a1b      	ldr	r3, [r3, #32]
 8008342:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	685b      	ldr	r3, [r3, #4]
 8008348:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	699b      	ldr	r3, [r3, #24]
 800834e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008350:	68fa      	ldr	r2, [r7, #12]
 8008352:	4b34      	ldr	r3, [pc, #208]	@ (8008424 <TIM_OC2_SetConfig+0xfc>)
 8008354:	4013      	ands	r3, r2
 8008356:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800835e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	021b      	lsls	r3, r3, #8
 8008366:	68fa      	ldr	r2, [r7, #12]
 8008368:	4313      	orrs	r3, r2
 800836a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	f023 0320 	bic.w	r3, r3, #32
 8008372:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	689b      	ldr	r3, [r3, #8]
 8008378:	011b      	lsls	r3, r3, #4
 800837a:	697a      	ldr	r2, [r7, #20]
 800837c:	4313      	orrs	r3, r2
 800837e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	4a29      	ldr	r2, [pc, #164]	@ (8008428 <TIM_OC2_SetConfig+0x100>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d003      	beq.n	8008390 <TIM_OC2_SetConfig+0x68>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	4a28      	ldr	r2, [pc, #160]	@ (800842c <TIM_OC2_SetConfig+0x104>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d10d      	bne.n	80083ac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008396:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	68db      	ldr	r3, [r3, #12]
 800839c:	011b      	lsls	r3, r3, #4
 800839e:	697a      	ldr	r2, [r7, #20]
 80083a0:	4313      	orrs	r3, r2
 80083a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80083aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	4a1e      	ldr	r2, [pc, #120]	@ (8008428 <TIM_OC2_SetConfig+0x100>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d00f      	beq.n	80083d4 <TIM_OC2_SetConfig+0xac>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	4a1d      	ldr	r2, [pc, #116]	@ (800842c <TIM_OC2_SetConfig+0x104>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d00b      	beq.n	80083d4 <TIM_OC2_SetConfig+0xac>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	4a1c      	ldr	r2, [pc, #112]	@ (8008430 <TIM_OC2_SetConfig+0x108>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d007      	beq.n	80083d4 <TIM_OC2_SetConfig+0xac>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	4a1b      	ldr	r2, [pc, #108]	@ (8008434 <TIM_OC2_SetConfig+0x10c>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d003      	beq.n	80083d4 <TIM_OC2_SetConfig+0xac>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	4a1a      	ldr	r2, [pc, #104]	@ (8008438 <TIM_OC2_SetConfig+0x110>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d113      	bne.n	80083fc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80083da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80083e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	695b      	ldr	r3, [r3, #20]
 80083e8:	009b      	lsls	r3, r3, #2
 80083ea:	693a      	ldr	r2, [r7, #16]
 80083ec:	4313      	orrs	r3, r2
 80083ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	699b      	ldr	r3, [r3, #24]
 80083f4:	009b      	lsls	r3, r3, #2
 80083f6:	693a      	ldr	r2, [r7, #16]
 80083f8:	4313      	orrs	r3, r2
 80083fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	693a      	ldr	r2, [r7, #16]
 8008400:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	68fa      	ldr	r2, [r7, #12]
 8008406:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	685a      	ldr	r2, [r3, #4]
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	697a      	ldr	r2, [r7, #20]
 8008414:	621a      	str	r2, [r3, #32]
}
 8008416:	bf00      	nop
 8008418:	371c      	adds	r7, #28
 800841a:	46bd      	mov	sp, r7
 800841c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008420:	4770      	bx	lr
 8008422:	bf00      	nop
 8008424:	feff8fff 	.word	0xfeff8fff
 8008428:	40010000 	.word	0x40010000
 800842c:	40010400 	.word	0x40010400
 8008430:	40014000 	.word	0x40014000
 8008434:	40014400 	.word	0x40014400
 8008438:	40014800 	.word	0x40014800

0800843c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800843c:	b480      	push	{r7}
 800843e:	b087      	sub	sp, #28
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6a1b      	ldr	r3, [r3, #32]
 800844a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6a1b      	ldr	r3, [r3, #32]
 8008456:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	685b      	ldr	r3, [r3, #4]
 800845c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	69db      	ldr	r3, [r3, #28]
 8008462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008464:	68fa      	ldr	r2, [r7, #12]
 8008466:	4b33      	ldr	r3, [pc, #204]	@ (8008534 <TIM_OC3_SetConfig+0xf8>)
 8008468:	4013      	ands	r3, r2
 800846a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	f023 0303 	bic.w	r3, r3, #3
 8008472:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	68fa      	ldr	r2, [r7, #12]
 800847a:	4313      	orrs	r3, r2
 800847c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008484:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	689b      	ldr	r3, [r3, #8]
 800848a:	021b      	lsls	r3, r3, #8
 800848c:	697a      	ldr	r2, [r7, #20]
 800848e:	4313      	orrs	r3, r2
 8008490:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	4a28      	ldr	r2, [pc, #160]	@ (8008538 <TIM_OC3_SetConfig+0xfc>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d003      	beq.n	80084a2 <TIM_OC3_SetConfig+0x66>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	4a27      	ldr	r2, [pc, #156]	@ (800853c <TIM_OC3_SetConfig+0x100>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d10d      	bne.n	80084be <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80084a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	68db      	ldr	r3, [r3, #12]
 80084ae:	021b      	lsls	r3, r3, #8
 80084b0:	697a      	ldr	r2, [r7, #20]
 80084b2:	4313      	orrs	r3, r2
 80084b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80084bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	4a1d      	ldr	r2, [pc, #116]	@ (8008538 <TIM_OC3_SetConfig+0xfc>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d00f      	beq.n	80084e6 <TIM_OC3_SetConfig+0xaa>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	4a1c      	ldr	r2, [pc, #112]	@ (800853c <TIM_OC3_SetConfig+0x100>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d00b      	beq.n	80084e6 <TIM_OC3_SetConfig+0xaa>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	4a1b      	ldr	r2, [pc, #108]	@ (8008540 <TIM_OC3_SetConfig+0x104>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d007      	beq.n	80084e6 <TIM_OC3_SetConfig+0xaa>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	4a1a      	ldr	r2, [pc, #104]	@ (8008544 <TIM_OC3_SetConfig+0x108>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d003      	beq.n	80084e6 <TIM_OC3_SetConfig+0xaa>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	4a19      	ldr	r2, [pc, #100]	@ (8008548 <TIM_OC3_SetConfig+0x10c>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d113      	bne.n	800850e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80084ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80084f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	695b      	ldr	r3, [r3, #20]
 80084fa:	011b      	lsls	r3, r3, #4
 80084fc:	693a      	ldr	r2, [r7, #16]
 80084fe:	4313      	orrs	r3, r2
 8008500:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	699b      	ldr	r3, [r3, #24]
 8008506:	011b      	lsls	r3, r3, #4
 8008508:	693a      	ldr	r2, [r7, #16]
 800850a:	4313      	orrs	r3, r2
 800850c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	693a      	ldr	r2, [r7, #16]
 8008512:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	68fa      	ldr	r2, [r7, #12]
 8008518:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	685a      	ldr	r2, [r3, #4]
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	697a      	ldr	r2, [r7, #20]
 8008526:	621a      	str	r2, [r3, #32]
}
 8008528:	bf00      	nop
 800852a:	371c      	adds	r7, #28
 800852c:	46bd      	mov	sp, r7
 800852e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008532:	4770      	bx	lr
 8008534:	fffeff8f 	.word	0xfffeff8f
 8008538:	40010000 	.word	0x40010000
 800853c:	40010400 	.word	0x40010400
 8008540:	40014000 	.word	0x40014000
 8008544:	40014400 	.word	0x40014400
 8008548:	40014800 	.word	0x40014800

0800854c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800854c:	b480      	push	{r7}
 800854e:	b087      	sub	sp, #28
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
 8008554:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6a1b      	ldr	r3, [r3, #32]
 800855a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6a1b      	ldr	r3, [r3, #32]
 8008566:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	685b      	ldr	r3, [r3, #4]
 800856c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	69db      	ldr	r3, [r3, #28]
 8008572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008574:	68fa      	ldr	r2, [r7, #12]
 8008576:	4b24      	ldr	r3, [pc, #144]	@ (8008608 <TIM_OC4_SetConfig+0xbc>)
 8008578:	4013      	ands	r3, r2
 800857a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008582:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	021b      	lsls	r3, r3, #8
 800858a:	68fa      	ldr	r2, [r7, #12]
 800858c:	4313      	orrs	r3, r2
 800858e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008596:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	689b      	ldr	r3, [r3, #8]
 800859c:	031b      	lsls	r3, r3, #12
 800859e:	693a      	ldr	r2, [r7, #16]
 80085a0:	4313      	orrs	r3, r2
 80085a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	4a19      	ldr	r2, [pc, #100]	@ (800860c <TIM_OC4_SetConfig+0xc0>)
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d00f      	beq.n	80085cc <TIM_OC4_SetConfig+0x80>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	4a18      	ldr	r2, [pc, #96]	@ (8008610 <TIM_OC4_SetConfig+0xc4>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d00b      	beq.n	80085cc <TIM_OC4_SetConfig+0x80>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	4a17      	ldr	r2, [pc, #92]	@ (8008614 <TIM_OC4_SetConfig+0xc8>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d007      	beq.n	80085cc <TIM_OC4_SetConfig+0x80>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	4a16      	ldr	r2, [pc, #88]	@ (8008618 <TIM_OC4_SetConfig+0xcc>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d003      	beq.n	80085cc <TIM_OC4_SetConfig+0x80>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	4a15      	ldr	r2, [pc, #84]	@ (800861c <TIM_OC4_SetConfig+0xd0>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d109      	bne.n	80085e0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80085d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	695b      	ldr	r3, [r3, #20]
 80085d8:	019b      	lsls	r3, r3, #6
 80085da:	697a      	ldr	r2, [r7, #20]
 80085dc:	4313      	orrs	r3, r2
 80085de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	697a      	ldr	r2, [r7, #20]
 80085e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	68fa      	ldr	r2, [r7, #12]
 80085ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	685a      	ldr	r2, [r3, #4]
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	693a      	ldr	r2, [r7, #16]
 80085f8:	621a      	str	r2, [r3, #32]
}
 80085fa:	bf00      	nop
 80085fc:	371c      	adds	r7, #28
 80085fe:	46bd      	mov	sp, r7
 8008600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008604:	4770      	bx	lr
 8008606:	bf00      	nop
 8008608:	feff8fff 	.word	0xfeff8fff
 800860c:	40010000 	.word	0x40010000
 8008610:	40010400 	.word	0x40010400
 8008614:	40014000 	.word	0x40014000
 8008618:	40014400 	.word	0x40014400
 800861c:	40014800 	.word	0x40014800

08008620 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008620:	b480      	push	{r7}
 8008622:	b087      	sub	sp, #28
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
 8008628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6a1b      	ldr	r3, [r3, #32]
 800862e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6a1b      	ldr	r3, [r3, #32]
 800863a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	685b      	ldr	r3, [r3, #4]
 8008640:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008648:	68fa      	ldr	r2, [r7, #12]
 800864a:	4b21      	ldr	r3, [pc, #132]	@ (80086d0 <TIM_OC5_SetConfig+0xb0>)
 800864c:	4013      	ands	r3, r2
 800864e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	68fa      	ldr	r2, [r7, #12]
 8008656:	4313      	orrs	r3, r2
 8008658:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800865a:	693b      	ldr	r3, [r7, #16]
 800865c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008660:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	689b      	ldr	r3, [r3, #8]
 8008666:	041b      	lsls	r3, r3, #16
 8008668:	693a      	ldr	r2, [r7, #16]
 800866a:	4313      	orrs	r3, r2
 800866c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	4a18      	ldr	r2, [pc, #96]	@ (80086d4 <TIM_OC5_SetConfig+0xb4>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d00f      	beq.n	8008696 <TIM_OC5_SetConfig+0x76>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	4a17      	ldr	r2, [pc, #92]	@ (80086d8 <TIM_OC5_SetConfig+0xb8>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d00b      	beq.n	8008696 <TIM_OC5_SetConfig+0x76>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	4a16      	ldr	r2, [pc, #88]	@ (80086dc <TIM_OC5_SetConfig+0xbc>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d007      	beq.n	8008696 <TIM_OC5_SetConfig+0x76>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	4a15      	ldr	r2, [pc, #84]	@ (80086e0 <TIM_OC5_SetConfig+0xc0>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d003      	beq.n	8008696 <TIM_OC5_SetConfig+0x76>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	4a14      	ldr	r2, [pc, #80]	@ (80086e4 <TIM_OC5_SetConfig+0xc4>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d109      	bne.n	80086aa <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800869c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	695b      	ldr	r3, [r3, #20]
 80086a2:	021b      	lsls	r3, r3, #8
 80086a4:	697a      	ldr	r2, [r7, #20]
 80086a6:	4313      	orrs	r3, r2
 80086a8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	697a      	ldr	r2, [r7, #20]
 80086ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	68fa      	ldr	r2, [r7, #12]
 80086b4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	685a      	ldr	r2, [r3, #4]
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	693a      	ldr	r2, [r7, #16]
 80086c2:	621a      	str	r2, [r3, #32]
}
 80086c4:	bf00      	nop
 80086c6:	371c      	adds	r7, #28
 80086c8:	46bd      	mov	sp, r7
 80086ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ce:	4770      	bx	lr
 80086d0:	fffeff8f 	.word	0xfffeff8f
 80086d4:	40010000 	.word	0x40010000
 80086d8:	40010400 	.word	0x40010400
 80086dc:	40014000 	.word	0x40014000
 80086e0:	40014400 	.word	0x40014400
 80086e4:	40014800 	.word	0x40014800

080086e8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b087      	sub	sp, #28
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
 80086f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6a1b      	ldr	r3, [r3, #32]
 80086f6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6a1b      	ldr	r3, [r3, #32]
 8008702:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	685b      	ldr	r3, [r3, #4]
 8008708:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800870e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008710:	68fa      	ldr	r2, [r7, #12]
 8008712:	4b22      	ldr	r3, [pc, #136]	@ (800879c <TIM_OC6_SetConfig+0xb4>)
 8008714:	4013      	ands	r3, r2
 8008716:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	021b      	lsls	r3, r3, #8
 800871e:	68fa      	ldr	r2, [r7, #12]
 8008720:	4313      	orrs	r3, r2
 8008722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008724:	693b      	ldr	r3, [r7, #16]
 8008726:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800872a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	689b      	ldr	r3, [r3, #8]
 8008730:	051b      	lsls	r3, r3, #20
 8008732:	693a      	ldr	r2, [r7, #16]
 8008734:	4313      	orrs	r3, r2
 8008736:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	4a19      	ldr	r2, [pc, #100]	@ (80087a0 <TIM_OC6_SetConfig+0xb8>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d00f      	beq.n	8008760 <TIM_OC6_SetConfig+0x78>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	4a18      	ldr	r2, [pc, #96]	@ (80087a4 <TIM_OC6_SetConfig+0xbc>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d00b      	beq.n	8008760 <TIM_OC6_SetConfig+0x78>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	4a17      	ldr	r2, [pc, #92]	@ (80087a8 <TIM_OC6_SetConfig+0xc0>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d007      	beq.n	8008760 <TIM_OC6_SetConfig+0x78>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	4a16      	ldr	r2, [pc, #88]	@ (80087ac <TIM_OC6_SetConfig+0xc4>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d003      	beq.n	8008760 <TIM_OC6_SetConfig+0x78>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	4a15      	ldr	r2, [pc, #84]	@ (80087b0 <TIM_OC6_SetConfig+0xc8>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d109      	bne.n	8008774 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008766:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	695b      	ldr	r3, [r3, #20]
 800876c:	029b      	lsls	r3, r3, #10
 800876e:	697a      	ldr	r2, [r7, #20]
 8008770:	4313      	orrs	r3, r2
 8008772:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	697a      	ldr	r2, [r7, #20]
 8008778:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	68fa      	ldr	r2, [r7, #12]
 800877e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	685a      	ldr	r2, [r3, #4]
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	693a      	ldr	r2, [r7, #16]
 800878c:	621a      	str	r2, [r3, #32]
}
 800878e:	bf00      	nop
 8008790:	371c      	adds	r7, #28
 8008792:	46bd      	mov	sp, r7
 8008794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008798:	4770      	bx	lr
 800879a:	bf00      	nop
 800879c:	feff8fff 	.word	0xfeff8fff
 80087a0:	40010000 	.word	0x40010000
 80087a4:	40010400 	.word	0x40010400
 80087a8:	40014000 	.word	0x40014000
 80087ac:	40014400 	.word	0x40014400
 80087b0:	40014800 	.word	0x40014800

080087b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b085      	sub	sp, #20
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
 80087bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80087c4:	2b01      	cmp	r3, #1
 80087c6:	d101      	bne.n	80087cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80087c8:	2302      	movs	r3, #2
 80087ca:	e06d      	b.n	80088a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2201      	movs	r2, #1
 80087d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2202      	movs	r2, #2
 80087d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	685b      	ldr	r3, [r3, #4]
 80087e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	689b      	ldr	r3, [r3, #8]
 80087ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a30      	ldr	r2, [pc, #192]	@ (80088b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d004      	beq.n	8008800 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4a2f      	ldr	r2, [pc, #188]	@ (80088b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d108      	bne.n	8008812 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008806:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	68fa      	ldr	r2, [r7, #12]
 800880e:	4313      	orrs	r3, r2
 8008810:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008818:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	68fa      	ldr	r2, [r7, #12]
 8008820:	4313      	orrs	r3, r2
 8008822:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	68fa      	ldr	r2, [r7, #12]
 800882a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a20      	ldr	r2, [pc, #128]	@ (80088b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d022      	beq.n	800887c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800883e:	d01d      	beq.n	800887c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a1d      	ldr	r2, [pc, #116]	@ (80088bc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d018      	beq.n	800887c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4a1c      	ldr	r2, [pc, #112]	@ (80088c0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d013      	beq.n	800887c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a1a      	ldr	r2, [pc, #104]	@ (80088c4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d00e      	beq.n	800887c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4a15      	ldr	r2, [pc, #84]	@ (80088b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d009      	beq.n	800887c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4a16      	ldr	r2, [pc, #88]	@ (80088c8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d004      	beq.n	800887c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4a15      	ldr	r2, [pc, #84]	@ (80088cc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d10c      	bne.n	8008896 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008882:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	689b      	ldr	r3, [r3, #8]
 8008888:	68ba      	ldr	r2, [r7, #8]
 800888a:	4313      	orrs	r3, r2
 800888c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	68ba      	ldr	r2, [r7, #8]
 8008894:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2201      	movs	r2, #1
 800889a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2200      	movs	r2, #0
 80088a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80088a6:	2300      	movs	r3, #0
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	3714      	adds	r7, #20
 80088ac:	46bd      	mov	sp, r7
 80088ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b2:	4770      	bx	lr
 80088b4:	40010000 	.word	0x40010000
 80088b8:	40010400 	.word	0x40010400
 80088bc:	40000400 	.word	0x40000400
 80088c0:	40000800 	.word	0x40000800
 80088c4:	40000c00 	.word	0x40000c00
 80088c8:	40001800 	.word	0x40001800
 80088cc:	40014000 	.word	0x40014000

080088d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b083      	sub	sp, #12
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80088d8:	bf00      	nop
 80088da:	370c      	adds	r7, #12
 80088dc:	46bd      	mov	sp, r7
 80088de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e2:	4770      	bx	lr

080088e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b083      	sub	sp, #12
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80088ec:	bf00      	nop
 80088ee:	370c      	adds	r7, #12
 80088f0:	46bd      	mov	sp, r7
 80088f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f6:	4770      	bx	lr

080088f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b083      	sub	sp, #12
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008900:	bf00      	nop
 8008902:	370c      	adds	r7, #12
 8008904:	46bd      	mov	sp, r7
 8008906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890a:	4770      	bx	lr

0800890c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b082      	sub	sp, #8
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d101      	bne.n	800891e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800891a:	2301      	movs	r3, #1
 800891c:	e042      	b.n	80089a4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008924:	2b00      	cmp	r3, #0
 8008926:	d106      	bne.n	8008936 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2200      	movs	r2, #0
 800892c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f7f8 fdb3 	bl	800149c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2224      	movs	r2, #36	@ 0x24
 800893a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	681a      	ldr	r2, [r3, #0]
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f022 0201 	bic.w	r2, r2, #1
 800894c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f000 fd5c 	bl	800940c <UART_SetConfig>
 8008954:	4603      	mov	r3, r0
 8008956:	2b01      	cmp	r3, #1
 8008958:	d101      	bne.n	800895e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800895a:	2301      	movs	r3, #1
 800895c:	e022      	b.n	80089a4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008962:	2b00      	cmp	r3, #0
 8008964:	d002      	beq.n	800896c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f001 fab8 	bl	8009edc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	685a      	ldr	r2, [r3, #4]
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800897a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	689a      	ldr	r2, [r3, #8]
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800898a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	681a      	ldr	r2, [r3, #0]
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f042 0201 	orr.w	r2, r2, #1
 800899a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f001 fb3f 	bl	800a020 <UART_CheckIdleState>
 80089a2:	4603      	mov	r3, r0
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3708      	adds	r7, #8
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b08a      	sub	sp, #40	@ 0x28
 80089b0:	af02      	add	r7, sp, #8
 80089b2:	60f8      	str	r0, [r7, #12]
 80089b4:	60b9      	str	r1, [r7, #8]
 80089b6:	603b      	str	r3, [r7, #0]
 80089b8:	4613      	mov	r3, r2
 80089ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089c2:	2b20      	cmp	r3, #32
 80089c4:	d17b      	bne.n	8008abe <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d002      	beq.n	80089d2 <HAL_UART_Transmit+0x26>
 80089cc:	88fb      	ldrh	r3, [r7, #6]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d101      	bne.n	80089d6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80089d2:	2301      	movs	r3, #1
 80089d4:	e074      	b.n	8008ac0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	2200      	movs	r2, #0
 80089da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	2221      	movs	r2, #33	@ 0x21
 80089e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80089e6:	f7f8 fedb 	bl	80017a0 <HAL_GetTick>
 80089ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	88fa      	ldrh	r2, [r7, #6]
 80089f0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	88fa      	ldrh	r2, [r7, #6]
 80089f8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	689b      	ldr	r3, [r3, #8]
 8008a00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a04:	d108      	bne.n	8008a18 <HAL_UART_Transmit+0x6c>
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	691b      	ldr	r3, [r3, #16]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d104      	bne.n	8008a18 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008a0e:	2300      	movs	r3, #0
 8008a10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	61bb      	str	r3, [r7, #24]
 8008a16:	e003      	b.n	8008a20 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008a20:	e030      	b.n	8008a84 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	9300      	str	r3, [sp, #0]
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	2180      	movs	r1, #128	@ 0x80
 8008a2c:	68f8      	ldr	r0, [r7, #12]
 8008a2e:	f001 fba1 	bl	800a174 <UART_WaitOnFlagUntilTimeout>
 8008a32:	4603      	mov	r3, r0
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d005      	beq.n	8008a44 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	2220      	movs	r2, #32
 8008a3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008a40:	2303      	movs	r3, #3
 8008a42:	e03d      	b.n	8008ac0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008a44:	69fb      	ldr	r3, [r7, #28]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d10b      	bne.n	8008a62 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008a4a:	69bb      	ldr	r3, [r7, #24]
 8008a4c:	881b      	ldrh	r3, [r3, #0]
 8008a4e:	461a      	mov	r2, r3
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008a58:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008a5a:	69bb      	ldr	r3, [r7, #24]
 8008a5c:	3302      	adds	r3, #2
 8008a5e:	61bb      	str	r3, [r7, #24]
 8008a60:	e007      	b.n	8008a72 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008a62:	69fb      	ldr	r3, [r7, #28]
 8008a64:	781a      	ldrb	r2, [r3, #0]
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008a6c:	69fb      	ldr	r3, [r7, #28]
 8008a6e:	3301      	adds	r3, #1
 8008a70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008a78:	b29b      	uxth	r3, r3
 8008a7a:	3b01      	subs	r3, #1
 8008a7c:	b29a      	uxth	r2, r3
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008a8a:	b29b      	uxth	r3, r3
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d1c8      	bne.n	8008a22 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	9300      	str	r3, [sp, #0]
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	2200      	movs	r2, #0
 8008a98:	2140      	movs	r1, #64	@ 0x40
 8008a9a:	68f8      	ldr	r0, [r7, #12]
 8008a9c:	f001 fb6a 	bl	800a174 <UART_WaitOnFlagUntilTimeout>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d005      	beq.n	8008ab2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	2220      	movs	r2, #32
 8008aaa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008aae:	2303      	movs	r3, #3
 8008ab0:	e006      	b.n	8008ac0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2220      	movs	r2, #32
 8008ab6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008aba:	2300      	movs	r3, #0
 8008abc:	e000      	b.n	8008ac0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008abe:	2302      	movs	r3, #2
  }
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3720      	adds	r7, #32
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}

08008ac8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b08a      	sub	sp, #40	@ 0x28
 8008acc:	af02      	add	r7, sp, #8
 8008ace:	60f8      	str	r0, [r7, #12]
 8008ad0:	60b9      	str	r1, [r7, #8]
 8008ad2:	603b      	str	r3, [r7, #0]
 8008ad4:	4613      	mov	r3, r2
 8008ad6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008ade:	2b20      	cmp	r3, #32
 8008ae0:	f040 80b5 	bne.w	8008c4e <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d002      	beq.n	8008af0 <HAL_UART_Receive+0x28>
 8008aea:	88fb      	ldrh	r3, [r7, #6]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d101      	bne.n	8008af4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8008af0:	2301      	movs	r3, #1
 8008af2:	e0ad      	b.n	8008c50 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	2200      	movs	r2, #0
 8008af8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	2222      	movs	r2, #34	@ 0x22
 8008b00:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	2200      	movs	r2, #0
 8008b08:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008b0a:	f7f8 fe49 	bl	80017a0 <HAL_GetTick>
 8008b0e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	88fa      	ldrh	r2, [r7, #6]
 8008b14:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	88fa      	ldrh	r2, [r7, #6]
 8008b1c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	689b      	ldr	r3, [r3, #8]
 8008b24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b28:	d10e      	bne.n	8008b48 <HAL_UART_Receive+0x80>
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	691b      	ldr	r3, [r3, #16]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d105      	bne.n	8008b3e <HAL_UART_Receive+0x76>
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008b38:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008b3c:	e02d      	b.n	8008b9a <HAL_UART_Receive+0xd2>
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	22ff      	movs	r2, #255	@ 0xff
 8008b42:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008b46:	e028      	b.n	8008b9a <HAL_UART_Receive+0xd2>
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	689b      	ldr	r3, [r3, #8]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d10d      	bne.n	8008b6c <HAL_UART_Receive+0xa4>
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	691b      	ldr	r3, [r3, #16]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d104      	bne.n	8008b62 <HAL_UART_Receive+0x9a>
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	22ff      	movs	r2, #255	@ 0xff
 8008b5c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008b60:	e01b      	b.n	8008b9a <HAL_UART_Receive+0xd2>
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	227f      	movs	r2, #127	@ 0x7f
 8008b66:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008b6a:	e016      	b.n	8008b9a <HAL_UART_Receive+0xd2>
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	689b      	ldr	r3, [r3, #8]
 8008b70:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008b74:	d10d      	bne.n	8008b92 <HAL_UART_Receive+0xca>
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	691b      	ldr	r3, [r3, #16]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d104      	bne.n	8008b88 <HAL_UART_Receive+0xc0>
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	227f      	movs	r2, #127	@ 0x7f
 8008b82:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008b86:	e008      	b.n	8008b9a <HAL_UART_Receive+0xd2>
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	223f      	movs	r2, #63	@ 0x3f
 8008b8c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008b90:	e003      	b.n	8008b9a <HAL_UART_Receive+0xd2>
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	2200      	movs	r2, #0
 8008b96:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008ba0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	689b      	ldr	r3, [r3, #8]
 8008ba6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008baa:	d108      	bne.n	8008bbe <HAL_UART_Receive+0xf6>
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	691b      	ldr	r3, [r3, #16]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d104      	bne.n	8008bbe <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	61bb      	str	r3, [r7, #24]
 8008bbc:	e003      	b.n	8008bc6 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8008bc6:	e036      	b.n	8008c36 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	9300      	str	r3, [sp, #0]
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	2120      	movs	r1, #32
 8008bd2:	68f8      	ldr	r0, [r7, #12]
 8008bd4:	f001 face 	bl	800a174 <UART_WaitOnFlagUntilTimeout>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d005      	beq.n	8008bea <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	2220      	movs	r2, #32
 8008be2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8008be6:	2303      	movs	r3, #3
 8008be8:	e032      	b.n	8008c50 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8008bea:	69fb      	ldr	r3, [r7, #28]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d10c      	bne.n	8008c0a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bf6:	b29a      	uxth	r2, r3
 8008bf8:	8a7b      	ldrh	r3, [r7, #18]
 8008bfa:	4013      	ands	r3, r2
 8008bfc:	b29a      	uxth	r2, r3
 8008bfe:	69bb      	ldr	r3, [r7, #24]
 8008c00:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008c02:	69bb      	ldr	r3, [r7, #24]
 8008c04:	3302      	adds	r3, #2
 8008c06:	61bb      	str	r3, [r7, #24]
 8008c08:	e00c      	b.n	8008c24 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c10:	b2da      	uxtb	r2, r3
 8008c12:	8a7b      	ldrh	r3, [r7, #18]
 8008c14:	b2db      	uxtb	r3, r3
 8008c16:	4013      	ands	r3, r2
 8008c18:	b2da      	uxtb	r2, r3
 8008c1a:	69fb      	ldr	r3, [r7, #28]
 8008c1c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8008c1e:	69fb      	ldr	r3, [r7, #28]
 8008c20:	3301      	adds	r3, #1
 8008c22:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008c2a:	b29b      	uxth	r3, r3
 8008c2c:	3b01      	subs	r3, #1
 8008c2e:	b29a      	uxth	r2, r3
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008c3c:	b29b      	uxth	r3, r3
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d1c2      	bne.n	8008bc8 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	2220      	movs	r2, #32
 8008c46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	e000      	b.n	8008c50 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8008c4e:	2302      	movs	r3, #2
  }
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3720      	adds	r7, #32
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}

08008c58 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b0ba      	sub	sp, #232	@ 0xe8
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	69db      	ldr	r3, [r3, #28]
 8008c66:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	689b      	ldr	r3, [r3, #8]
 8008c7a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008c7e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008c82:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008c86:	4013      	ands	r3, r2
 8008c88:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008c8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d11b      	bne.n	8008ccc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008c94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c98:	f003 0320 	and.w	r3, r3, #32
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d015      	beq.n	8008ccc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008ca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ca4:	f003 0320 	and.w	r3, r3, #32
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d105      	bne.n	8008cb8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008cac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008cb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d009      	beq.n	8008ccc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	f000 8377 	beq.w	80093b0 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	4798      	blx	r3
      }
      return;
 8008cca:	e371      	b.n	80093b0 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008ccc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	f000 8123 	beq.w	8008f1c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008cd6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008cda:	4b8d      	ldr	r3, [pc, #564]	@ (8008f10 <HAL_UART_IRQHandler+0x2b8>)
 8008cdc:	4013      	ands	r3, r2
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d106      	bne.n	8008cf0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008ce2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008ce6:	4b8b      	ldr	r3, [pc, #556]	@ (8008f14 <HAL_UART_IRQHandler+0x2bc>)
 8008ce8:	4013      	ands	r3, r2
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	f000 8116 	beq.w	8008f1c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008cf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cf4:	f003 0301 	and.w	r3, r3, #1
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d011      	beq.n	8008d20 <HAL_UART_IRQHandler+0xc8>
 8008cfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d00b      	beq.n	8008d20 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	2201      	movs	r2, #1
 8008d0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d16:	f043 0201 	orr.w	r2, r3, #1
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d24:	f003 0302 	and.w	r3, r3, #2
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d011      	beq.n	8008d50 <HAL_UART_IRQHandler+0xf8>
 8008d2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d30:	f003 0301 	and.w	r3, r3, #1
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d00b      	beq.n	8008d50 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	2202      	movs	r2, #2
 8008d3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d46:	f043 0204 	orr.w	r2, r3, #4
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d54:	f003 0304 	and.w	r3, r3, #4
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d011      	beq.n	8008d80 <HAL_UART_IRQHandler+0x128>
 8008d5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d60:	f003 0301 	and.w	r3, r3, #1
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d00b      	beq.n	8008d80 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	2204      	movs	r2, #4
 8008d6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d76:	f043 0202 	orr.w	r2, r3, #2
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008d80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d84:	f003 0308 	and.w	r3, r3, #8
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d017      	beq.n	8008dbc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008d8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d90:	f003 0320 	and.w	r3, r3, #32
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d105      	bne.n	8008da4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008d98:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008d9c:	4b5c      	ldr	r3, [pc, #368]	@ (8008f10 <HAL_UART_IRQHandler+0x2b8>)
 8008d9e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d00b      	beq.n	8008dbc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	2208      	movs	r2, #8
 8008daa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008db2:	f043 0208 	orr.w	r2, r3, #8
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008dbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008dc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d012      	beq.n	8008dee <HAL_UART_IRQHandler+0x196>
 8008dc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008dcc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d00c      	beq.n	8008dee <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008ddc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008de4:	f043 0220 	orr.w	r2, r3, #32
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	f000 82dd 	beq.w	80093b4 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008dfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008dfe:	f003 0320 	and.w	r3, r3, #32
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d013      	beq.n	8008e2e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008e06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e0a:	f003 0320 	and.w	r3, r3, #32
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d105      	bne.n	8008e1e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008e12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d007      	beq.n	8008e2e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d003      	beq.n	8008e2e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e34:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	689b      	ldr	r3, [r3, #8]
 8008e3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e42:	2b40      	cmp	r3, #64	@ 0x40
 8008e44:	d005      	beq.n	8008e52 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008e46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008e4a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d054      	beq.n	8008efc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f001 f9f6 	bl	800a244 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	689b      	ldr	r3, [r3, #8]
 8008e5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e62:	2b40      	cmp	r3, #64	@ 0x40
 8008e64:	d146      	bne.n	8008ef4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	3308      	adds	r3, #8
 8008e6c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e70:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008e74:	e853 3f00 	ldrex	r3, [r3]
 8008e78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008e7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008e80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e84:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	3308      	adds	r3, #8
 8008e8e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008e92:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008e96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008e9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008ea2:	e841 2300 	strex	r3, r2, [r1]
 8008ea6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008eaa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d1d9      	bne.n	8008e66 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d017      	beq.n	8008eec <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ec2:	4a15      	ldr	r2, [pc, #84]	@ (8008f18 <HAL_UART_IRQHandler+0x2c0>)
 8008ec4:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f7f9 f94d 	bl	800216c <HAL_DMA_Abort_IT>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d019      	beq.n	8008f0c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ede:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ee0:	687a      	ldr	r2, [r7, #4]
 8008ee2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008ee6:	4610      	mov	r0, r2
 8008ee8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008eea:	e00f      	b.n	8008f0c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f000 fa77 	bl	80093e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ef2:	e00b      	b.n	8008f0c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f000 fa73 	bl	80093e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008efa:	e007      	b.n	8008f0c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f000 fa6f 	bl	80093e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2200      	movs	r2, #0
 8008f06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008f0a:	e253      	b.n	80093b4 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f0c:	bf00      	nop
    return;
 8008f0e:	e251      	b.n	80093b4 <HAL_UART_IRQHandler+0x75c>
 8008f10:	10000001 	.word	0x10000001
 8008f14:	04000120 	.word	0x04000120
 8008f18:	0800a311 	.word	0x0800a311

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f20:	2b01      	cmp	r3, #1
 8008f22:	f040 81e7 	bne.w	80092f4 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008f26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f2a:	f003 0310 	and.w	r3, r3, #16
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	f000 81e0 	beq.w	80092f4 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008f34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f38:	f003 0310 	and.w	r3, r3, #16
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	f000 81d9 	beq.w	80092f4 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	2210      	movs	r2, #16
 8008f48:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	689b      	ldr	r3, [r3, #8]
 8008f50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f54:	2b40      	cmp	r3, #64	@ 0x40
 8008f56:	f040 8151 	bne.w	80091fc <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	4a96      	ldr	r2, [pc, #600]	@ (80091bc <HAL_UART_IRQHandler+0x564>)
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d068      	beq.n	800903a <HAL_UART_IRQHandler+0x3e2>
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4a93      	ldr	r2, [pc, #588]	@ (80091c0 <HAL_UART_IRQHandler+0x568>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d061      	beq.n	800903a <HAL_UART_IRQHandler+0x3e2>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	4a91      	ldr	r2, [pc, #580]	@ (80091c4 <HAL_UART_IRQHandler+0x56c>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d05a      	beq.n	800903a <HAL_UART_IRQHandler+0x3e2>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	4a8e      	ldr	r2, [pc, #568]	@ (80091c8 <HAL_UART_IRQHandler+0x570>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d053      	beq.n	800903a <HAL_UART_IRQHandler+0x3e2>
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	4a8c      	ldr	r2, [pc, #560]	@ (80091cc <HAL_UART_IRQHandler+0x574>)
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	d04c      	beq.n	800903a <HAL_UART_IRQHandler+0x3e2>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	4a89      	ldr	r2, [pc, #548]	@ (80091d0 <HAL_UART_IRQHandler+0x578>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d045      	beq.n	800903a <HAL_UART_IRQHandler+0x3e2>
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	4a87      	ldr	r2, [pc, #540]	@ (80091d4 <HAL_UART_IRQHandler+0x57c>)
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	d03e      	beq.n	800903a <HAL_UART_IRQHandler+0x3e2>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	4a84      	ldr	r2, [pc, #528]	@ (80091d8 <HAL_UART_IRQHandler+0x580>)
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	d037      	beq.n	800903a <HAL_UART_IRQHandler+0x3e2>
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	4a82      	ldr	r2, [pc, #520]	@ (80091dc <HAL_UART_IRQHandler+0x584>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d030      	beq.n	800903a <HAL_UART_IRQHandler+0x3e2>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	4a7f      	ldr	r2, [pc, #508]	@ (80091e0 <HAL_UART_IRQHandler+0x588>)
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	d029      	beq.n	800903a <HAL_UART_IRQHandler+0x3e2>
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	4a7d      	ldr	r2, [pc, #500]	@ (80091e4 <HAL_UART_IRQHandler+0x58c>)
 8008ff0:	4293      	cmp	r3, r2
 8008ff2:	d022      	beq.n	800903a <HAL_UART_IRQHandler+0x3e2>
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	4a7a      	ldr	r2, [pc, #488]	@ (80091e8 <HAL_UART_IRQHandler+0x590>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d01b      	beq.n	800903a <HAL_UART_IRQHandler+0x3e2>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	4a78      	ldr	r2, [pc, #480]	@ (80091ec <HAL_UART_IRQHandler+0x594>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d014      	beq.n	800903a <HAL_UART_IRQHandler+0x3e2>
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	4a75      	ldr	r2, [pc, #468]	@ (80091f0 <HAL_UART_IRQHandler+0x598>)
 800901a:	4293      	cmp	r3, r2
 800901c:	d00d      	beq.n	800903a <HAL_UART_IRQHandler+0x3e2>
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	4a73      	ldr	r2, [pc, #460]	@ (80091f4 <HAL_UART_IRQHandler+0x59c>)
 8009028:	4293      	cmp	r3, r2
 800902a:	d006      	beq.n	800903a <HAL_UART_IRQHandler+0x3e2>
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	4a70      	ldr	r2, [pc, #448]	@ (80091f8 <HAL_UART_IRQHandler+0x5a0>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d106      	bne.n	8009048 <HAL_UART_IRQHandler+0x3f0>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	685b      	ldr	r3, [r3, #4]
 8009044:	b29b      	uxth	r3, r3
 8009046:	e005      	b.n	8009054 <HAL_UART_IRQHandler+0x3fc>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	685b      	ldr	r3, [r3, #4]
 8009052:	b29b      	uxth	r3, r3
 8009054:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009058:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800905c:	2b00      	cmp	r3, #0
 800905e:	f000 81ab 	beq.w	80093b8 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009068:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800906c:	429a      	cmp	r2, r3
 800906e:	f080 81a3 	bcs.w	80093b8 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009078:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009082:	69db      	ldr	r3, [r3, #28]
 8009084:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009088:	f000 8087 	beq.w	800919a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009094:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009098:	e853 3f00 	ldrex	r3, [r3]
 800909c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80090a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80090a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80090a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	461a      	mov	r2, r3
 80090b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80090b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80090ba:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090be:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80090c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80090c6:	e841 2300 	strex	r3, r2, [r1]
 80090ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80090ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d1da      	bne.n	800908c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	3308      	adds	r3, #8
 80090dc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80090e0:	e853 3f00 	ldrex	r3, [r3]
 80090e4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80090e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80090e8:	f023 0301 	bic.w	r3, r3, #1
 80090ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	3308      	adds	r3, #8
 80090f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80090fa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80090fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009100:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009102:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009106:	e841 2300 	strex	r3, r2, [r1]
 800910a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800910c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800910e:	2b00      	cmp	r3, #0
 8009110:	d1e1      	bne.n	80090d6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	3308      	adds	r3, #8
 8009118:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800911a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800911c:	e853 3f00 	ldrex	r3, [r3]
 8009120:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009122:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009124:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009128:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	3308      	adds	r3, #8
 8009132:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009136:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009138:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800913a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800913c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800913e:	e841 2300 	strex	r3, r2, [r1]
 8009142:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009144:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009146:	2b00      	cmp	r3, #0
 8009148:	d1e3      	bne.n	8009112 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2220      	movs	r2, #32
 800914e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2200      	movs	r2, #0
 8009156:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800915e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009160:	e853 3f00 	ldrex	r3, [r3]
 8009164:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009166:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009168:	f023 0310 	bic.w	r3, r3, #16
 800916c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	461a      	mov	r2, r3
 8009176:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800917a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800917c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800917e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009180:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009182:	e841 2300 	strex	r3, r2, [r1]
 8009186:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009188:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800918a:	2b00      	cmp	r3, #0
 800918c:	d1e4      	bne.n	8009158 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009194:	4618      	mov	r0, r3
 8009196:	f7f8 fccb 	bl	8001b30 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2202      	movs	r2, #2
 800919e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80091ac:	b29b      	uxth	r3, r3
 80091ae:	1ad3      	subs	r3, r2, r3
 80091b0:	b29b      	uxth	r3, r3
 80091b2:	4619      	mov	r1, r3
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f000 f91d 	bl	80093f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80091ba:	e0fd      	b.n	80093b8 <HAL_UART_IRQHandler+0x760>
 80091bc:	40020010 	.word	0x40020010
 80091c0:	40020028 	.word	0x40020028
 80091c4:	40020040 	.word	0x40020040
 80091c8:	40020058 	.word	0x40020058
 80091cc:	40020070 	.word	0x40020070
 80091d0:	40020088 	.word	0x40020088
 80091d4:	400200a0 	.word	0x400200a0
 80091d8:	400200b8 	.word	0x400200b8
 80091dc:	40020410 	.word	0x40020410
 80091e0:	40020428 	.word	0x40020428
 80091e4:	40020440 	.word	0x40020440
 80091e8:	40020458 	.word	0x40020458
 80091ec:	40020470 	.word	0x40020470
 80091f0:	40020488 	.word	0x40020488
 80091f4:	400204a0 	.word	0x400204a0
 80091f8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009208:	b29b      	uxth	r3, r3
 800920a:	1ad3      	subs	r3, r2, r3
 800920c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009216:	b29b      	uxth	r3, r3
 8009218:	2b00      	cmp	r3, #0
 800921a:	f000 80cf 	beq.w	80093bc <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800921e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009222:	2b00      	cmp	r3, #0
 8009224:	f000 80ca 	beq.w	80093bc <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800922e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009230:	e853 3f00 	ldrex	r3, [r3]
 8009234:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009236:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009238:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800923c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	461a      	mov	r2, r3
 8009246:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800924a:	647b      	str	r3, [r7, #68]	@ 0x44
 800924c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800924e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009250:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009252:	e841 2300 	strex	r3, r2, [r1]
 8009256:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009258:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800925a:	2b00      	cmp	r3, #0
 800925c:	d1e4      	bne.n	8009228 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	3308      	adds	r3, #8
 8009264:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009268:	e853 3f00 	ldrex	r3, [r3]
 800926c:	623b      	str	r3, [r7, #32]
   return(result);
 800926e:	6a3a      	ldr	r2, [r7, #32]
 8009270:	4b55      	ldr	r3, [pc, #340]	@ (80093c8 <HAL_UART_IRQHandler+0x770>)
 8009272:	4013      	ands	r3, r2
 8009274:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	3308      	adds	r3, #8
 800927e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009282:	633a      	str	r2, [r7, #48]	@ 0x30
 8009284:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009286:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009288:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800928a:	e841 2300 	strex	r3, r2, [r1]
 800928e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009292:	2b00      	cmp	r3, #0
 8009294:	d1e3      	bne.n	800925e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2220      	movs	r2, #32
 800929a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2200      	movs	r2, #0
 80092a2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2200      	movs	r2, #0
 80092a8:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092b0:	693b      	ldr	r3, [r7, #16]
 80092b2:	e853 3f00 	ldrex	r3, [r3]
 80092b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	f023 0310 	bic.w	r3, r3, #16
 80092be:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	461a      	mov	r2, r3
 80092c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80092cc:	61fb      	str	r3, [r7, #28]
 80092ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092d0:	69b9      	ldr	r1, [r7, #24]
 80092d2:	69fa      	ldr	r2, [r7, #28]
 80092d4:	e841 2300 	strex	r3, r2, [r1]
 80092d8:	617b      	str	r3, [r7, #20]
   return(result);
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d1e4      	bne.n	80092aa <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2202      	movs	r2, #2
 80092e4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80092e6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80092ea:	4619      	mov	r1, r3
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f000 f881 	bl	80093f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80092f2:	e063      	b.n	80093bc <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80092f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d00e      	beq.n	800931e <HAL_UART_IRQHandler+0x6c6>
 8009300:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009304:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009308:	2b00      	cmp	r3, #0
 800930a:	d008      	beq.n	800931e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009314:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f001 f83b 	bl	800a392 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800931c:	e051      	b.n	80093c2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800931e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009322:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009326:	2b00      	cmp	r3, #0
 8009328:	d014      	beq.n	8009354 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800932a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800932e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009332:	2b00      	cmp	r3, #0
 8009334:	d105      	bne.n	8009342 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009336:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800933a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800933e:	2b00      	cmp	r3, #0
 8009340:	d008      	beq.n	8009354 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009346:	2b00      	cmp	r3, #0
 8009348:	d03a      	beq.n	80093c0 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	4798      	blx	r3
    }
    return;
 8009352:	e035      	b.n	80093c0 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009354:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009358:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800935c:	2b00      	cmp	r3, #0
 800935e:	d009      	beq.n	8009374 <HAL_UART_IRQHandler+0x71c>
 8009360:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009364:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009368:	2b00      	cmp	r3, #0
 800936a:	d003      	beq.n	8009374 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	f000 ffe5 	bl	800a33c <UART_EndTransmit_IT>
    return;
 8009372:	e026      	b.n	80093c2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009374:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009378:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800937c:	2b00      	cmp	r3, #0
 800937e:	d009      	beq.n	8009394 <HAL_UART_IRQHandler+0x73c>
 8009380:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009384:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009388:	2b00      	cmp	r3, #0
 800938a:	d003      	beq.n	8009394 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f001 f814 	bl	800a3ba <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009392:	e016      	b.n	80093c2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009394:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009398:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800939c:	2b00      	cmp	r3, #0
 800939e:	d010      	beq.n	80093c2 <HAL_UART_IRQHandler+0x76a>
 80093a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	da0c      	bge.n	80093c2 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f000 fffc 	bl	800a3a6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80093ae:	e008      	b.n	80093c2 <HAL_UART_IRQHandler+0x76a>
      return;
 80093b0:	bf00      	nop
 80093b2:	e006      	b.n	80093c2 <HAL_UART_IRQHandler+0x76a>
    return;
 80093b4:	bf00      	nop
 80093b6:	e004      	b.n	80093c2 <HAL_UART_IRQHandler+0x76a>
      return;
 80093b8:	bf00      	nop
 80093ba:	e002      	b.n	80093c2 <HAL_UART_IRQHandler+0x76a>
      return;
 80093bc:	bf00      	nop
 80093be:	e000      	b.n	80093c2 <HAL_UART_IRQHandler+0x76a>
    return;
 80093c0:	bf00      	nop
  }
}
 80093c2:	37e8      	adds	r7, #232	@ 0xe8
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}
 80093c8:	effffffe 	.word	0xeffffffe

080093cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80093cc:	b480      	push	{r7}
 80093ce:	b083      	sub	sp, #12
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80093d4:	bf00      	nop
 80093d6:	370c      	adds	r7, #12
 80093d8:	46bd      	mov	sp, r7
 80093da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093de:	4770      	bx	lr

080093e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80093e0:	b480      	push	{r7}
 80093e2:	b083      	sub	sp, #12
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80093e8:	bf00      	nop
 80093ea:	370c      	adds	r7, #12
 80093ec:	46bd      	mov	sp, r7
 80093ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f2:	4770      	bx	lr

080093f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80093f4:	b480      	push	{r7}
 80093f6:	b083      	sub	sp, #12
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
 80093fc:	460b      	mov	r3, r1
 80093fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009400:	bf00      	nop
 8009402:	370c      	adds	r7, #12
 8009404:	46bd      	mov	sp, r7
 8009406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940a:	4770      	bx	lr

0800940c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800940c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009410:	b092      	sub	sp, #72	@ 0x48
 8009412:	af00      	add	r7, sp, #0
 8009414:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009416:	2300      	movs	r3, #0
 8009418:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800941c:	697b      	ldr	r3, [r7, #20]
 800941e:	689a      	ldr	r2, [r3, #8]
 8009420:	697b      	ldr	r3, [r7, #20]
 8009422:	691b      	ldr	r3, [r3, #16]
 8009424:	431a      	orrs	r2, r3
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	695b      	ldr	r3, [r3, #20]
 800942a:	431a      	orrs	r2, r3
 800942c:	697b      	ldr	r3, [r7, #20]
 800942e:	69db      	ldr	r3, [r3, #28]
 8009430:	4313      	orrs	r3, r2
 8009432:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009434:	697b      	ldr	r3, [r7, #20]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	681a      	ldr	r2, [r3, #0]
 800943a:	4bbe      	ldr	r3, [pc, #760]	@ (8009734 <UART_SetConfig+0x328>)
 800943c:	4013      	ands	r3, r2
 800943e:	697a      	ldr	r2, [r7, #20]
 8009440:	6812      	ldr	r2, [r2, #0]
 8009442:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009444:	430b      	orrs	r3, r1
 8009446:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	685b      	ldr	r3, [r3, #4]
 800944e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009452:	697b      	ldr	r3, [r7, #20]
 8009454:	68da      	ldr	r2, [r3, #12]
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	430a      	orrs	r2, r1
 800945c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	699b      	ldr	r3, [r3, #24]
 8009462:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009464:	697b      	ldr	r3, [r7, #20]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4ab3      	ldr	r2, [pc, #716]	@ (8009738 <UART_SetConfig+0x32c>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d004      	beq.n	8009478 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800946e:	697b      	ldr	r3, [r7, #20]
 8009470:	6a1b      	ldr	r3, [r3, #32]
 8009472:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009474:	4313      	orrs	r3, r2
 8009476:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009478:	697b      	ldr	r3, [r7, #20]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	689a      	ldr	r2, [r3, #8]
 800947e:	4baf      	ldr	r3, [pc, #700]	@ (800973c <UART_SetConfig+0x330>)
 8009480:	4013      	ands	r3, r2
 8009482:	697a      	ldr	r2, [r7, #20]
 8009484:	6812      	ldr	r2, [r2, #0]
 8009486:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009488:	430b      	orrs	r3, r1
 800948a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800948c:	697b      	ldr	r3, [r7, #20]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009492:	f023 010f 	bic.w	r1, r3, #15
 8009496:	697b      	ldr	r3, [r7, #20]
 8009498:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800949a:	697b      	ldr	r3, [r7, #20]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	430a      	orrs	r2, r1
 80094a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80094a2:	697b      	ldr	r3, [r7, #20]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	4aa6      	ldr	r2, [pc, #664]	@ (8009740 <UART_SetConfig+0x334>)
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d177      	bne.n	800959c <UART_SetConfig+0x190>
 80094ac:	4ba5      	ldr	r3, [pc, #660]	@ (8009744 <UART_SetConfig+0x338>)
 80094ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094b0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80094b4:	2b28      	cmp	r3, #40	@ 0x28
 80094b6:	d86d      	bhi.n	8009594 <UART_SetConfig+0x188>
 80094b8:	a201      	add	r2, pc, #4	@ (adr r2, 80094c0 <UART_SetConfig+0xb4>)
 80094ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094be:	bf00      	nop
 80094c0:	08009565 	.word	0x08009565
 80094c4:	08009595 	.word	0x08009595
 80094c8:	08009595 	.word	0x08009595
 80094cc:	08009595 	.word	0x08009595
 80094d0:	08009595 	.word	0x08009595
 80094d4:	08009595 	.word	0x08009595
 80094d8:	08009595 	.word	0x08009595
 80094dc:	08009595 	.word	0x08009595
 80094e0:	0800956d 	.word	0x0800956d
 80094e4:	08009595 	.word	0x08009595
 80094e8:	08009595 	.word	0x08009595
 80094ec:	08009595 	.word	0x08009595
 80094f0:	08009595 	.word	0x08009595
 80094f4:	08009595 	.word	0x08009595
 80094f8:	08009595 	.word	0x08009595
 80094fc:	08009595 	.word	0x08009595
 8009500:	08009575 	.word	0x08009575
 8009504:	08009595 	.word	0x08009595
 8009508:	08009595 	.word	0x08009595
 800950c:	08009595 	.word	0x08009595
 8009510:	08009595 	.word	0x08009595
 8009514:	08009595 	.word	0x08009595
 8009518:	08009595 	.word	0x08009595
 800951c:	08009595 	.word	0x08009595
 8009520:	0800957d 	.word	0x0800957d
 8009524:	08009595 	.word	0x08009595
 8009528:	08009595 	.word	0x08009595
 800952c:	08009595 	.word	0x08009595
 8009530:	08009595 	.word	0x08009595
 8009534:	08009595 	.word	0x08009595
 8009538:	08009595 	.word	0x08009595
 800953c:	08009595 	.word	0x08009595
 8009540:	08009585 	.word	0x08009585
 8009544:	08009595 	.word	0x08009595
 8009548:	08009595 	.word	0x08009595
 800954c:	08009595 	.word	0x08009595
 8009550:	08009595 	.word	0x08009595
 8009554:	08009595 	.word	0x08009595
 8009558:	08009595 	.word	0x08009595
 800955c:	08009595 	.word	0x08009595
 8009560:	0800958d 	.word	0x0800958d
 8009564:	2301      	movs	r3, #1
 8009566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800956a:	e222      	b.n	80099b2 <UART_SetConfig+0x5a6>
 800956c:	2304      	movs	r3, #4
 800956e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009572:	e21e      	b.n	80099b2 <UART_SetConfig+0x5a6>
 8009574:	2308      	movs	r3, #8
 8009576:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800957a:	e21a      	b.n	80099b2 <UART_SetConfig+0x5a6>
 800957c:	2310      	movs	r3, #16
 800957e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009582:	e216      	b.n	80099b2 <UART_SetConfig+0x5a6>
 8009584:	2320      	movs	r3, #32
 8009586:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800958a:	e212      	b.n	80099b2 <UART_SetConfig+0x5a6>
 800958c:	2340      	movs	r3, #64	@ 0x40
 800958e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009592:	e20e      	b.n	80099b2 <UART_SetConfig+0x5a6>
 8009594:	2380      	movs	r3, #128	@ 0x80
 8009596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800959a:	e20a      	b.n	80099b2 <UART_SetConfig+0x5a6>
 800959c:	697b      	ldr	r3, [r7, #20]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	4a69      	ldr	r2, [pc, #420]	@ (8009748 <UART_SetConfig+0x33c>)
 80095a2:	4293      	cmp	r3, r2
 80095a4:	d130      	bne.n	8009608 <UART_SetConfig+0x1fc>
 80095a6:	4b67      	ldr	r3, [pc, #412]	@ (8009744 <UART_SetConfig+0x338>)
 80095a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095aa:	f003 0307 	and.w	r3, r3, #7
 80095ae:	2b05      	cmp	r3, #5
 80095b0:	d826      	bhi.n	8009600 <UART_SetConfig+0x1f4>
 80095b2:	a201      	add	r2, pc, #4	@ (adr r2, 80095b8 <UART_SetConfig+0x1ac>)
 80095b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095b8:	080095d1 	.word	0x080095d1
 80095bc:	080095d9 	.word	0x080095d9
 80095c0:	080095e1 	.word	0x080095e1
 80095c4:	080095e9 	.word	0x080095e9
 80095c8:	080095f1 	.word	0x080095f1
 80095cc:	080095f9 	.word	0x080095f9
 80095d0:	2300      	movs	r3, #0
 80095d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095d6:	e1ec      	b.n	80099b2 <UART_SetConfig+0x5a6>
 80095d8:	2304      	movs	r3, #4
 80095da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095de:	e1e8      	b.n	80099b2 <UART_SetConfig+0x5a6>
 80095e0:	2308      	movs	r3, #8
 80095e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095e6:	e1e4      	b.n	80099b2 <UART_SetConfig+0x5a6>
 80095e8:	2310      	movs	r3, #16
 80095ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095ee:	e1e0      	b.n	80099b2 <UART_SetConfig+0x5a6>
 80095f0:	2320      	movs	r3, #32
 80095f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095f6:	e1dc      	b.n	80099b2 <UART_SetConfig+0x5a6>
 80095f8:	2340      	movs	r3, #64	@ 0x40
 80095fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095fe:	e1d8      	b.n	80099b2 <UART_SetConfig+0x5a6>
 8009600:	2380      	movs	r3, #128	@ 0x80
 8009602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009606:	e1d4      	b.n	80099b2 <UART_SetConfig+0x5a6>
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	4a4f      	ldr	r2, [pc, #316]	@ (800974c <UART_SetConfig+0x340>)
 800960e:	4293      	cmp	r3, r2
 8009610:	d130      	bne.n	8009674 <UART_SetConfig+0x268>
 8009612:	4b4c      	ldr	r3, [pc, #304]	@ (8009744 <UART_SetConfig+0x338>)
 8009614:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009616:	f003 0307 	and.w	r3, r3, #7
 800961a:	2b05      	cmp	r3, #5
 800961c:	d826      	bhi.n	800966c <UART_SetConfig+0x260>
 800961e:	a201      	add	r2, pc, #4	@ (adr r2, 8009624 <UART_SetConfig+0x218>)
 8009620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009624:	0800963d 	.word	0x0800963d
 8009628:	08009645 	.word	0x08009645
 800962c:	0800964d 	.word	0x0800964d
 8009630:	08009655 	.word	0x08009655
 8009634:	0800965d 	.word	0x0800965d
 8009638:	08009665 	.word	0x08009665
 800963c:	2300      	movs	r3, #0
 800963e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009642:	e1b6      	b.n	80099b2 <UART_SetConfig+0x5a6>
 8009644:	2304      	movs	r3, #4
 8009646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800964a:	e1b2      	b.n	80099b2 <UART_SetConfig+0x5a6>
 800964c:	2308      	movs	r3, #8
 800964e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009652:	e1ae      	b.n	80099b2 <UART_SetConfig+0x5a6>
 8009654:	2310      	movs	r3, #16
 8009656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800965a:	e1aa      	b.n	80099b2 <UART_SetConfig+0x5a6>
 800965c:	2320      	movs	r3, #32
 800965e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009662:	e1a6      	b.n	80099b2 <UART_SetConfig+0x5a6>
 8009664:	2340      	movs	r3, #64	@ 0x40
 8009666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800966a:	e1a2      	b.n	80099b2 <UART_SetConfig+0x5a6>
 800966c:	2380      	movs	r3, #128	@ 0x80
 800966e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009672:	e19e      	b.n	80099b2 <UART_SetConfig+0x5a6>
 8009674:	697b      	ldr	r3, [r7, #20]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	4a35      	ldr	r2, [pc, #212]	@ (8009750 <UART_SetConfig+0x344>)
 800967a:	4293      	cmp	r3, r2
 800967c:	d130      	bne.n	80096e0 <UART_SetConfig+0x2d4>
 800967e:	4b31      	ldr	r3, [pc, #196]	@ (8009744 <UART_SetConfig+0x338>)
 8009680:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009682:	f003 0307 	and.w	r3, r3, #7
 8009686:	2b05      	cmp	r3, #5
 8009688:	d826      	bhi.n	80096d8 <UART_SetConfig+0x2cc>
 800968a:	a201      	add	r2, pc, #4	@ (adr r2, 8009690 <UART_SetConfig+0x284>)
 800968c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009690:	080096a9 	.word	0x080096a9
 8009694:	080096b1 	.word	0x080096b1
 8009698:	080096b9 	.word	0x080096b9
 800969c:	080096c1 	.word	0x080096c1
 80096a0:	080096c9 	.word	0x080096c9
 80096a4:	080096d1 	.word	0x080096d1
 80096a8:	2300      	movs	r3, #0
 80096aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096ae:	e180      	b.n	80099b2 <UART_SetConfig+0x5a6>
 80096b0:	2304      	movs	r3, #4
 80096b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096b6:	e17c      	b.n	80099b2 <UART_SetConfig+0x5a6>
 80096b8:	2308      	movs	r3, #8
 80096ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096be:	e178      	b.n	80099b2 <UART_SetConfig+0x5a6>
 80096c0:	2310      	movs	r3, #16
 80096c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096c6:	e174      	b.n	80099b2 <UART_SetConfig+0x5a6>
 80096c8:	2320      	movs	r3, #32
 80096ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096ce:	e170      	b.n	80099b2 <UART_SetConfig+0x5a6>
 80096d0:	2340      	movs	r3, #64	@ 0x40
 80096d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096d6:	e16c      	b.n	80099b2 <UART_SetConfig+0x5a6>
 80096d8:	2380      	movs	r3, #128	@ 0x80
 80096da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096de:	e168      	b.n	80099b2 <UART_SetConfig+0x5a6>
 80096e0:	697b      	ldr	r3, [r7, #20]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	4a1b      	ldr	r2, [pc, #108]	@ (8009754 <UART_SetConfig+0x348>)
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d142      	bne.n	8009770 <UART_SetConfig+0x364>
 80096ea:	4b16      	ldr	r3, [pc, #88]	@ (8009744 <UART_SetConfig+0x338>)
 80096ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096ee:	f003 0307 	and.w	r3, r3, #7
 80096f2:	2b05      	cmp	r3, #5
 80096f4:	d838      	bhi.n	8009768 <UART_SetConfig+0x35c>
 80096f6:	a201      	add	r2, pc, #4	@ (adr r2, 80096fc <UART_SetConfig+0x2f0>)
 80096f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096fc:	08009715 	.word	0x08009715
 8009700:	0800971d 	.word	0x0800971d
 8009704:	08009725 	.word	0x08009725
 8009708:	0800972d 	.word	0x0800972d
 800970c:	08009759 	.word	0x08009759
 8009710:	08009761 	.word	0x08009761
 8009714:	2300      	movs	r3, #0
 8009716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800971a:	e14a      	b.n	80099b2 <UART_SetConfig+0x5a6>
 800971c:	2304      	movs	r3, #4
 800971e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009722:	e146      	b.n	80099b2 <UART_SetConfig+0x5a6>
 8009724:	2308      	movs	r3, #8
 8009726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800972a:	e142      	b.n	80099b2 <UART_SetConfig+0x5a6>
 800972c:	2310      	movs	r3, #16
 800972e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009732:	e13e      	b.n	80099b2 <UART_SetConfig+0x5a6>
 8009734:	cfff69f3 	.word	0xcfff69f3
 8009738:	58000c00 	.word	0x58000c00
 800973c:	11fff4ff 	.word	0x11fff4ff
 8009740:	40011000 	.word	0x40011000
 8009744:	58024400 	.word	0x58024400
 8009748:	40004400 	.word	0x40004400
 800974c:	40004800 	.word	0x40004800
 8009750:	40004c00 	.word	0x40004c00
 8009754:	40005000 	.word	0x40005000
 8009758:	2320      	movs	r3, #32
 800975a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800975e:	e128      	b.n	80099b2 <UART_SetConfig+0x5a6>
 8009760:	2340      	movs	r3, #64	@ 0x40
 8009762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009766:	e124      	b.n	80099b2 <UART_SetConfig+0x5a6>
 8009768:	2380      	movs	r3, #128	@ 0x80
 800976a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800976e:	e120      	b.n	80099b2 <UART_SetConfig+0x5a6>
 8009770:	697b      	ldr	r3, [r7, #20]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	4acb      	ldr	r2, [pc, #812]	@ (8009aa4 <UART_SetConfig+0x698>)
 8009776:	4293      	cmp	r3, r2
 8009778:	d176      	bne.n	8009868 <UART_SetConfig+0x45c>
 800977a:	4bcb      	ldr	r3, [pc, #812]	@ (8009aa8 <UART_SetConfig+0x69c>)
 800977c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800977e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009782:	2b28      	cmp	r3, #40	@ 0x28
 8009784:	d86c      	bhi.n	8009860 <UART_SetConfig+0x454>
 8009786:	a201      	add	r2, pc, #4	@ (adr r2, 800978c <UART_SetConfig+0x380>)
 8009788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800978c:	08009831 	.word	0x08009831
 8009790:	08009861 	.word	0x08009861
 8009794:	08009861 	.word	0x08009861
 8009798:	08009861 	.word	0x08009861
 800979c:	08009861 	.word	0x08009861
 80097a0:	08009861 	.word	0x08009861
 80097a4:	08009861 	.word	0x08009861
 80097a8:	08009861 	.word	0x08009861
 80097ac:	08009839 	.word	0x08009839
 80097b0:	08009861 	.word	0x08009861
 80097b4:	08009861 	.word	0x08009861
 80097b8:	08009861 	.word	0x08009861
 80097bc:	08009861 	.word	0x08009861
 80097c0:	08009861 	.word	0x08009861
 80097c4:	08009861 	.word	0x08009861
 80097c8:	08009861 	.word	0x08009861
 80097cc:	08009841 	.word	0x08009841
 80097d0:	08009861 	.word	0x08009861
 80097d4:	08009861 	.word	0x08009861
 80097d8:	08009861 	.word	0x08009861
 80097dc:	08009861 	.word	0x08009861
 80097e0:	08009861 	.word	0x08009861
 80097e4:	08009861 	.word	0x08009861
 80097e8:	08009861 	.word	0x08009861
 80097ec:	08009849 	.word	0x08009849
 80097f0:	08009861 	.word	0x08009861
 80097f4:	08009861 	.word	0x08009861
 80097f8:	08009861 	.word	0x08009861
 80097fc:	08009861 	.word	0x08009861
 8009800:	08009861 	.word	0x08009861
 8009804:	08009861 	.word	0x08009861
 8009808:	08009861 	.word	0x08009861
 800980c:	08009851 	.word	0x08009851
 8009810:	08009861 	.word	0x08009861
 8009814:	08009861 	.word	0x08009861
 8009818:	08009861 	.word	0x08009861
 800981c:	08009861 	.word	0x08009861
 8009820:	08009861 	.word	0x08009861
 8009824:	08009861 	.word	0x08009861
 8009828:	08009861 	.word	0x08009861
 800982c:	08009859 	.word	0x08009859
 8009830:	2301      	movs	r3, #1
 8009832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009836:	e0bc      	b.n	80099b2 <UART_SetConfig+0x5a6>
 8009838:	2304      	movs	r3, #4
 800983a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800983e:	e0b8      	b.n	80099b2 <UART_SetConfig+0x5a6>
 8009840:	2308      	movs	r3, #8
 8009842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009846:	e0b4      	b.n	80099b2 <UART_SetConfig+0x5a6>
 8009848:	2310      	movs	r3, #16
 800984a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800984e:	e0b0      	b.n	80099b2 <UART_SetConfig+0x5a6>
 8009850:	2320      	movs	r3, #32
 8009852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009856:	e0ac      	b.n	80099b2 <UART_SetConfig+0x5a6>
 8009858:	2340      	movs	r3, #64	@ 0x40
 800985a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800985e:	e0a8      	b.n	80099b2 <UART_SetConfig+0x5a6>
 8009860:	2380      	movs	r3, #128	@ 0x80
 8009862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009866:	e0a4      	b.n	80099b2 <UART_SetConfig+0x5a6>
 8009868:	697b      	ldr	r3, [r7, #20]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	4a8f      	ldr	r2, [pc, #572]	@ (8009aac <UART_SetConfig+0x6a0>)
 800986e:	4293      	cmp	r3, r2
 8009870:	d130      	bne.n	80098d4 <UART_SetConfig+0x4c8>
 8009872:	4b8d      	ldr	r3, [pc, #564]	@ (8009aa8 <UART_SetConfig+0x69c>)
 8009874:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009876:	f003 0307 	and.w	r3, r3, #7
 800987a:	2b05      	cmp	r3, #5
 800987c:	d826      	bhi.n	80098cc <UART_SetConfig+0x4c0>
 800987e:	a201      	add	r2, pc, #4	@ (adr r2, 8009884 <UART_SetConfig+0x478>)
 8009880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009884:	0800989d 	.word	0x0800989d
 8009888:	080098a5 	.word	0x080098a5
 800988c:	080098ad 	.word	0x080098ad
 8009890:	080098b5 	.word	0x080098b5
 8009894:	080098bd 	.word	0x080098bd
 8009898:	080098c5 	.word	0x080098c5
 800989c:	2300      	movs	r3, #0
 800989e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098a2:	e086      	b.n	80099b2 <UART_SetConfig+0x5a6>
 80098a4:	2304      	movs	r3, #4
 80098a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098aa:	e082      	b.n	80099b2 <UART_SetConfig+0x5a6>
 80098ac:	2308      	movs	r3, #8
 80098ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098b2:	e07e      	b.n	80099b2 <UART_SetConfig+0x5a6>
 80098b4:	2310      	movs	r3, #16
 80098b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098ba:	e07a      	b.n	80099b2 <UART_SetConfig+0x5a6>
 80098bc:	2320      	movs	r3, #32
 80098be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098c2:	e076      	b.n	80099b2 <UART_SetConfig+0x5a6>
 80098c4:	2340      	movs	r3, #64	@ 0x40
 80098c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098ca:	e072      	b.n	80099b2 <UART_SetConfig+0x5a6>
 80098cc:	2380      	movs	r3, #128	@ 0x80
 80098ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098d2:	e06e      	b.n	80099b2 <UART_SetConfig+0x5a6>
 80098d4:	697b      	ldr	r3, [r7, #20]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	4a75      	ldr	r2, [pc, #468]	@ (8009ab0 <UART_SetConfig+0x6a4>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d130      	bne.n	8009940 <UART_SetConfig+0x534>
 80098de:	4b72      	ldr	r3, [pc, #456]	@ (8009aa8 <UART_SetConfig+0x69c>)
 80098e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098e2:	f003 0307 	and.w	r3, r3, #7
 80098e6:	2b05      	cmp	r3, #5
 80098e8:	d826      	bhi.n	8009938 <UART_SetConfig+0x52c>
 80098ea:	a201      	add	r2, pc, #4	@ (adr r2, 80098f0 <UART_SetConfig+0x4e4>)
 80098ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098f0:	08009909 	.word	0x08009909
 80098f4:	08009911 	.word	0x08009911
 80098f8:	08009919 	.word	0x08009919
 80098fc:	08009921 	.word	0x08009921
 8009900:	08009929 	.word	0x08009929
 8009904:	08009931 	.word	0x08009931
 8009908:	2300      	movs	r3, #0
 800990a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800990e:	e050      	b.n	80099b2 <UART_SetConfig+0x5a6>
 8009910:	2304      	movs	r3, #4
 8009912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009916:	e04c      	b.n	80099b2 <UART_SetConfig+0x5a6>
 8009918:	2308      	movs	r3, #8
 800991a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800991e:	e048      	b.n	80099b2 <UART_SetConfig+0x5a6>
 8009920:	2310      	movs	r3, #16
 8009922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009926:	e044      	b.n	80099b2 <UART_SetConfig+0x5a6>
 8009928:	2320      	movs	r3, #32
 800992a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800992e:	e040      	b.n	80099b2 <UART_SetConfig+0x5a6>
 8009930:	2340      	movs	r3, #64	@ 0x40
 8009932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009936:	e03c      	b.n	80099b2 <UART_SetConfig+0x5a6>
 8009938:	2380      	movs	r3, #128	@ 0x80
 800993a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800993e:	e038      	b.n	80099b2 <UART_SetConfig+0x5a6>
 8009940:	697b      	ldr	r3, [r7, #20]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	4a5b      	ldr	r2, [pc, #364]	@ (8009ab4 <UART_SetConfig+0x6a8>)
 8009946:	4293      	cmp	r3, r2
 8009948:	d130      	bne.n	80099ac <UART_SetConfig+0x5a0>
 800994a:	4b57      	ldr	r3, [pc, #348]	@ (8009aa8 <UART_SetConfig+0x69c>)
 800994c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800994e:	f003 0307 	and.w	r3, r3, #7
 8009952:	2b05      	cmp	r3, #5
 8009954:	d826      	bhi.n	80099a4 <UART_SetConfig+0x598>
 8009956:	a201      	add	r2, pc, #4	@ (adr r2, 800995c <UART_SetConfig+0x550>)
 8009958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800995c:	08009975 	.word	0x08009975
 8009960:	0800997d 	.word	0x0800997d
 8009964:	08009985 	.word	0x08009985
 8009968:	0800998d 	.word	0x0800998d
 800996c:	08009995 	.word	0x08009995
 8009970:	0800999d 	.word	0x0800999d
 8009974:	2302      	movs	r3, #2
 8009976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800997a:	e01a      	b.n	80099b2 <UART_SetConfig+0x5a6>
 800997c:	2304      	movs	r3, #4
 800997e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009982:	e016      	b.n	80099b2 <UART_SetConfig+0x5a6>
 8009984:	2308      	movs	r3, #8
 8009986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800998a:	e012      	b.n	80099b2 <UART_SetConfig+0x5a6>
 800998c:	2310      	movs	r3, #16
 800998e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009992:	e00e      	b.n	80099b2 <UART_SetConfig+0x5a6>
 8009994:	2320      	movs	r3, #32
 8009996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800999a:	e00a      	b.n	80099b2 <UART_SetConfig+0x5a6>
 800999c:	2340      	movs	r3, #64	@ 0x40
 800999e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099a2:	e006      	b.n	80099b2 <UART_SetConfig+0x5a6>
 80099a4:	2380      	movs	r3, #128	@ 0x80
 80099a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099aa:	e002      	b.n	80099b2 <UART_SetConfig+0x5a6>
 80099ac:	2380      	movs	r3, #128	@ 0x80
 80099ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	4a3f      	ldr	r2, [pc, #252]	@ (8009ab4 <UART_SetConfig+0x6a8>)
 80099b8:	4293      	cmp	r3, r2
 80099ba:	f040 80f8 	bne.w	8009bae <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80099be:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80099c2:	2b20      	cmp	r3, #32
 80099c4:	dc46      	bgt.n	8009a54 <UART_SetConfig+0x648>
 80099c6:	2b02      	cmp	r3, #2
 80099c8:	f2c0 8082 	blt.w	8009ad0 <UART_SetConfig+0x6c4>
 80099cc:	3b02      	subs	r3, #2
 80099ce:	2b1e      	cmp	r3, #30
 80099d0:	d87e      	bhi.n	8009ad0 <UART_SetConfig+0x6c4>
 80099d2:	a201      	add	r2, pc, #4	@ (adr r2, 80099d8 <UART_SetConfig+0x5cc>)
 80099d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099d8:	08009a5b 	.word	0x08009a5b
 80099dc:	08009ad1 	.word	0x08009ad1
 80099e0:	08009a63 	.word	0x08009a63
 80099e4:	08009ad1 	.word	0x08009ad1
 80099e8:	08009ad1 	.word	0x08009ad1
 80099ec:	08009ad1 	.word	0x08009ad1
 80099f0:	08009a73 	.word	0x08009a73
 80099f4:	08009ad1 	.word	0x08009ad1
 80099f8:	08009ad1 	.word	0x08009ad1
 80099fc:	08009ad1 	.word	0x08009ad1
 8009a00:	08009ad1 	.word	0x08009ad1
 8009a04:	08009ad1 	.word	0x08009ad1
 8009a08:	08009ad1 	.word	0x08009ad1
 8009a0c:	08009ad1 	.word	0x08009ad1
 8009a10:	08009a83 	.word	0x08009a83
 8009a14:	08009ad1 	.word	0x08009ad1
 8009a18:	08009ad1 	.word	0x08009ad1
 8009a1c:	08009ad1 	.word	0x08009ad1
 8009a20:	08009ad1 	.word	0x08009ad1
 8009a24:	08009ad1 	.word	0x08009ad1
 8009a28:	08009ad1 	.word	0x08009ad1
 8009a2c:	08009ad1 	.word	0x08009ad1
 8009a30:	08009ad1 	.word	0x08009ad1
 8009a34:	08009ad1 	.word	0x08009ad1
 8009a38:	08009ad1 	.word	0x08009ad1
 8009a3c:	08009ad1 	.word	0x08009ad1
 8009a40:	08009ad1 	.word	0x08009ad1
 8009a44:	08009ad1 	.word	0x08009ad1
 8009a48:	08009ad1 	.word	0x08009ad1
 8009a4c:	08009ad1 	.word	0x08009ad1
 8009a50:	08009ac3 	.word	0x08009ac3
 8009a54:	2b40      	cmp	r3, #64	@ 0x40
 8009a56:	d037      	beq.n	8009ac8 <UART_SetConfig+0x6bc>
 8009a58:	e03a      	b.n	8009ad0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009a5a:	f7fb ff41 	bl	80058e0 <HAL_RCCEx_GetD3PCLK1Freq>
 8009a5e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009a60:	e03c      	b.n	8009adc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009a66:	4618      	mov	r0, r3
 8009a68:	f7fb ff50 	bl	800590c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a70:	e034      	b.n	8009adc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a72:	f107 0318 	add.w	r3, r7, #24
 8009a76:	4618      	mov	r0, r3
 8009a78:	f7fc f89c 	bl	8005bb4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009a7c:	69fb      	ldr	r3, [r7, #28]
 8009a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a80:	e02c      	b.n	8009adc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a82:	4b09      	ldr	r3, [pc, #36]	@ (8009aa8 <UART_SetConfig+0x69c>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	f003 0320 	and.w	r3, r3, #32
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d016      	beq.n	8009abc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009a8e:	4b06      	ldr	r3, [pc, #24]	@ (8009aa8 <UART_SetConfig+0x69c>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	08db      	lsrs	r3, r3, #3
 8009a94:	f003 0303 	and.w	r3, r3, #3
 8009a98:	4a07      	ldr	r2, [pc, #28]	@ (8009ab8 <UART_SetConfig+0x6ac>)
 8009a9a:	fa22 f303 	lsr.w	r3, r2, r3
 8009a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009aa0:	e01c      	b.n	8009adc <UART_SetConfig+0x6d0>
 8009aa2:	bf00      	nop
 8009aa4:	40011400 	.word	0x40011400
 8009aa8:	58024400 	.word	0x58024400
 8009aac:	40007800 	.word	0x40007800
 8009ab0:	40007c00 	.word	0x40007c00
 8009ab4:	58000c00 	.word	0x58000c00
 8009ab8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8009abc:	4b9d      	ldr	r3, [pc, #628]	@ (8009d34 <UART_SetConfig+0x928>)
 8009abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ac0:	e00c      	b.n	8009adc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009ac2:	4b9d      	ldr	r3, [pc, #628]	@ (8009d38 <UART_SetConfig+0x92c>)
 8009ac4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ac6:	e009      	b.n	8009adc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009ac8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009acc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ace:	e005      	b.n	8009adc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009ada:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009adc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	f000 81de 	beq.w	8009ea0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009ae4:	697b      	ldr	r3, [r7, #20]
 8009ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ae8:	4a94      	ldr	r2, [pc, #592]	@ (8009d3c <UART_SetConfig+0x930>)
 8009aea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009aee:	461a      	mov	r2, r3
 8009af0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009af2:	fbb3 f3f2 	udiv	r3, r3, r2
 8009af6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009af8:	697b      	ldr	r3, [r7, #20]
 8009afa:	685a      	ldr	r2, [r3, #4]
 8009afc:	4613      	mov	r3, r2
 8009afe:	005b      	lsls	r3, r3, #1
 8009b00:	4413      	add	r3, r2
 8009b02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b04:	429a      	cmp	r2, r3
 8009b06:	d305      	bcc.n	8009b14 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009b08:	697b      	ldr	r3, [r7, #20]
 8009b0a:	685b      	ldr	r3, [r3, #4]
 8009b0c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009b0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b10:	429a      	cmp	r2, r3
 8009b12:	d903      	bls.n	8009b1c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8009b14:	2301      	movs	r3, #1
 8009b16:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009b1a:	e1c1      	b.n	8009ea0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b1e:	2200      	movs	r2, #0
 8009b20:	60bb      	str	r3, [r7, #8]
 8009b22:	60fa      	str	r2, [r7, #12]
 8009b24:	697b      	ldr	r3, [r7, #20]
 8009b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b28:	4a84      	ldr	r2, [pc, #528]	@ (8009d3c <UART_SetConfig+0x930>)
 8009b2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b2e:	b29b      	uxth	r3, r3
 8009b30:	2200      	movs	r2, #0
 8009b32:	603b      	str	r3, [r7, #0]
 8009b34:	607a      	str	r2, [r7, #4]
 8009b36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b3a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009b3e:	f7f6 fc27 	bl	8000390 <__aeabi_uldivmod>
 8009b42:	4602      	mov	r2, r0
 8009b44:	460b      	mov	r3, r1
 8009b46:	4610      	mov	r0, r2
 8009b48:	4619      	mov	r1, r3
 8009b4a:	f04f 0200 	mov.w	r2, #0
 8009b4e:	f04f 0300 	mov.w	r3, #0
 8009b52:	020b      	lsls	r3, r1, #8
 8009b54:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009b58:	0202      	lsls	r2, r0, #8
 8009b5a:	6979      	ldr	r1, [r7, #20]
 8009b5c:	6849      	ldr	r1, [r1, #4]
 8009b5e:	0849      	lsrs	r1, r1, #1
 8009b60:	2000      	movs	r0, #0
 8009b62:	460c      	mov	r4, r1
 8009b64:	4605      	mov	r5, r0
 8009b66:	eb12 0804 	adds.w	r8, r2, r4
 8009b6a:	eb43 0905 	adc.w	r9, r3, r5
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	685b      	ldr	r3, [r3, #4]
 8009b72:	2200      	movs	r2, #0
 8009b74:	469a      	mov	sl, r3
 8009b76:	4693      	mov	fp, r2
 8009b78:	4652      	mov	r2, sl
 8009b7a:	465b      	mov	r3, fp
 8009b7c:	4640      	mov	r0, r8
 8009b7e:	4649      	mov	r1, r9
 8009b80:	f7f6 fc06 	bl	8000390 <__aeabi_uldivmod>
 8009b84:	4602      	mov	r2, r0
 8009b86:	460b      	mov	r3, r1
 8009b88:	4613      	mov	r3, r2
 8009b8a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009b8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009b92:	d308      	bcc.n	8009ba6 <UART_SetConfig+0x79a>
 8009b94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009b9a:	d204      	bcs.n	8009ba6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8009b9c:	697b      	ldr	r3, [r7, #20]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009ba2:	60da      	str	r2, [r3, #12]
 8009ba4:	e17c      	b.n	8009ea0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009bac:	e178      	b.n	8009ea0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009bae:	697b      	ldr	r3, [r7, #20]
 8009bb0:	69db      	ldr	r3, [r3, #28]
 8009bb2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009bb6:	f040 80c5 	bne.w	8009d44 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8009bba:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009bbe:	2b20      	cmp	r3, #32
 8009bc0:	dc48      	bgt.n	8009c54 <UART_SetConfig+0x848>
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	db7b      	blt.n	8009cbe <UART_SetConfig+0x8b2>
 8009bc6:	2b20      	cmp	r3, #32
 8009bc8:	d879      	bhi.n	8009cbe <UART_SetConfig+0x8b2>
 8009bca:	a201      	add	r2, pc, #4	@ (adr r2, 8009bd0 <UART_SetConfig+0x7c4>)
 8009bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bd0:	08009c5b 	.word	0x08009c5b
 8009bd4:	08009c63 	.word	0x08009c63
 8009bd8:	08009cbf 	.word	0x08009cbf
 8009bdc:	08009cbf 	.word	0x08009cbf
 8009be0:	08009c6b 	.word	0x08009c6b
 8009be4:	08009cbf 	.word	0x08009cbf
 8009be8:	08009cbf 	.word	0x08009cbf
 8009bec:	08009cbf 	.word	0x08009cbf
 8009bf0:	08009c7b 	.word	0x08009c7b
 8009bf4:	08009cbf 	.word	0x08009cbf
 8009bf8:	08009cbf 	.word	0x08009cbf
 8009bfc:	08009cbf 	.word	0x08009cbf
 8009c00:	08009cbf 	.word	0x08009cbf
 8009c04:	08009cbf 	.word	0x08009cbf
 8009c08:	08009cbf 	.word	0x08009cbf
 8009c0c:	08009cbf 	.word	0x08009cbf
 8009c10:	08009c8b 	.word	0x08009c8b
 8009c14:	08009cbf 	.word	0x08009cbf
 8009c18:	08009cbf 	.word	0x08009cbf
 8009c1c:	08009cbf 	.word	0x08009cbf
 8009c20:	08009cbf 	.word	0x08009cbf
 8009c24:	08009cbf 	.word	0x08009cbf
 8009c28:	08009cbf 	.word	0x08009cbf
 8009c2c:	08009cbf 	.word	0x08009cbf
 8009c30:	08009cbf 	.word	0x08009cbf
 8009c34:	08009cbf 	.word	0x08009cbf
 8009c38:	08009cbf 	.word	0x08009cbf
 8009c3c:	08009cbf 	.word	0x08009cbf
 8009c40:	08009cbf 	.word	0x08009cbf
 8009c44:	08009cbf 	.word	0x08009cbf
 8009c48:	08009cbf 	.word	0x08009cbf
 8009c4c:	08009cbf 	.word	0x08009cbf
 8009c50:	08009cb1 	.word	0x08009cb1
 8009c54:	2b40      	cmp	r3, #64	@ 0x40
 8009c56:	d02e      	beq.n	8009cb6 <UART_SetConfig+0x8aa>
 8009c58:	e031      	b.n	8009cbe <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c5a:	f7f9 fe8b 	bl	8003974 <HAL_RCC_GetPCLK1Freq>
 8009c5e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009c60:	e033      	b.n	8009cca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c62:	f7f9 fe9d 	bl	80039a0 <HAL_RCC_GetPCLK2Freq>
 8009c66:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009c68:	e02f      	b.n	8009cca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f7fb fe4c 	bl	800590c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c78:	e027      	b.n	8009cca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c7a:	f107 0318 	add.w	r3, r7, #24
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f7fb ff98 	bl	8005bb4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009c84:	69fb      	ldr	r3, [r7, #28]
 8009c86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c88:	e01f      	b.n	8009cca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c8a:	4b2d      	ldr	r3, [pc, #180]	@ (8009d40 <UART_SetConfig+0x934>)
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	f003 0320 	and.w	r3, r3, #32
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d009      	beq.n	8009caa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009c96:	4b2a      	ldr	r3, [pc, #168]	@ (8009d40 <UART_SetConfig+0x934>)
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	08db      	lsrs	r3, r3, #3
 8009c9c:	f003 0303 	and.w	r3, r3, #3
 8009ca0:	4a24      	ldr	r2, [pc, #144]	@ (8009d34 <UART_SetConfig+0x928>)
 8009ca2:	fa22 f303 	lsr.w	r3, r2, r3
 8009ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009ca8:	e00f      	b.n	8009cca <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009caa:	4b22      	ldr	r3, [pc, #136]	@ (8009d34 <UART_SetConfig+0x928>)
 8009cac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cae:	e00c      	b.n	8009cca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009cb0:	4b21      	ldr	r3, [pc, #132]	@ (8009d38 <UART_SetConfig+0x92c>)
 8009cb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cb4:	e009      	b.n	8009cca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009cb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cbc:	e005      	b.n	8009cca <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009cc8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009cca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	f000 80e7 	beq.w	8009ea0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009cd2:	697b      	ldr	r3, [r7, #20]
 8009cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cd6:	4a19      	ldr	r2, [pc, #100]	@ (8009d3c <UART_SetConfig+0x930>)
 8009cd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009cdc:	461a      	mov	r2, r3
 8009cde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ce0:	fbb3 f3f2 	udiv	r3, r3, r2
 8009ce4:	005a      	lsls	r2, r3, #1
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	685b      	ldr	r3, [r3, #4]
 8009cea:	085b      	lsrs	r3, r3, #1
 8009cec:	441a      	add	r2, r3
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	685b      	ldr	r3, [r3, #4]
 8009cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cf6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009cf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cfa:	2b0f      	cmp	r3, #15
 8009cfc:	d916      	bls.n	8009d2c <UART_SetConfig+0x920>
 8009cfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d04:	d212      	bcs.n	8009d2c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009d06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d08:	b29b      	uxth	r3, r3
 8009d0a:	f023 030f 	bic.w	r3, r3, #15
 8009d0e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009d10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d12:	085b      	lsrs	r3, r3, #1
 8009d14:	b29b      	uxth	r3, r3
 8009d16:	f003 0307 	and.w	r3, r3, #7
 8009d1a:	b29a      	uxth	r2, r3
 8009d1c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009d1e:	4313      	orrs	r3, r2
 8009d20:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8009d22:	697b      	ldr	r3, [r7, #20]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009d28:	60da      	str	r2, [r3, #12]
 8009d2a:	e0b9      	b.n	8009ea0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009d32:	e0b5      	b.n	8009ea0 <UART_SetConfig+0xa94>
 8009d34:	03d09000 	.word	0x03d09000
 8009d38:	003d0900 	.word	0x003d0900
 8009d3c:	0800f71c 	.word	0x0800f71c
 8009d40:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8009d44:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009d48:	2b20      	cmp	r3, #32
 8009d4a:	dc49      	bgt.n	8009de0 <UART_SetConfig+0x9d4>
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	db7c      	blt.n	8009e4a <UART_SetConfig+0xa3e>
 8009d50:	2b20      	cmp	r3, #32
 8009d52:	d87a      	bhi.n	8009e4a <UART_SetConfig+0xa3e>
 8009d54:	a201      	add	r2, pc, #4	@ (adr r2, 8009d5c <UART_SetConfig+0x950>)
 8009d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d5a:	bf00      	nop
 8009d5c:	08009de7 	.word	0x08009de7
 8009d60:	08009def 	.word	0x08009def
 8009d64:	08009e4b 	.word	0x08009e4b
 8009d68:	08009e4b 	.word	0x08009e4b
 8009d6c:	08009df7 	.word	0x08009df7
 8009d70:	08009e4b 	.word	0x08009e4b
 8009d74:	08009e4b 	.word	0x08009e4b
 8009d78:	08009e4b 	.word	0x08009e4b
 8009d7c:	08009e07 	.word	0x08009e07
 8009d80:	08009e4b 	.word	0x08009e4b
 8009d84:	08009e4b 	.word	0x08009e4b
 8009d88:	08009e4b 	.word	0x08009e4b
 8009d8c:	08009e4b 	.word	0x08009e4b
 8009d90:	08009e4b 	.word	0x08009e4b
 8009d94:	08009e4b 	.word	0x08009e4b
 8009d98:	08009e4b 	.word	0x08009e4b
 8009d9c:	08009e17 	.word	0x08009e17
 8009da0:	08009e4b 	.word	0x08009e4b
 8009da4:	08009e4b 	.word	0x08009e4b
 8009da8:	08009e4b 	.word	0x08009e4b
 8009dac:	08009e4b 	.word	0x08009e4b
 8009db0:	08009e4b 	.word	0x08009e4b
 8009db4:	08009e4b 	.word	0x08009e4b
 8009db8:	08009e4b 	.word	0x08009e4b
 8009dbc:	08009e4b 	.word	0x08009e4b
 8009dc0:	08009e4b 	.word	0x08009e4b
 8009dc4:	08009e4b 	.word	0x08009e4b
 8009dc8:	08009e4b 	.word	0x08009e4b
 8009dcc:	08009e4b 	.word	0x08009e4b
 8009dd0:	08009e4b 	.word	0x08009e4b
 8009dd4:	08009e4b 	.word	0x08009e4b
 8009dd8:	08009e4b 	.word	0x08009e4b
 8009ddc:	08009e3d 	.word	0x08009e3d
 8009de0:	2b40      	cmp	r3, #64	@ 0x40
 8009de2:	d02e      	beq.n	8009e42 <UART_SetConfig+0xa36>
 8009de4:	e031      	b.n	8009e4a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009de6:	f7f9 fdc5 	bl	8003974 <HAL_RCC_GetPCLK1Freq>
 8009dea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009dec:	e033      	b.n	8009e56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009dee:	f7f9 fdd7 	bl	80039a0 <HAL_RCC_GetPCLK2Freq>
 8009df2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009df4:	e02f      	b.n	8009e56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009df6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	f7fb fd86 	bl	800590c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e04:	e027      	b.n	8009e56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e06:	f107 0318 	add.w	r3, r7, #24
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f7fb fed2 	bl	8005bb4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009e10:	69fb      	ldr	r3, [r7, #28]
 8009e12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e14:	e01f      	b.n	8009e56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e16:	4b2d      	ldr	r3, [pc, #180]	@ (8009ecc <UART_SetConfig+0xac0>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	f003 0320 	and.w	r3, r3, #32
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d009      	beq.n	8009e36 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009e22:	4b2a      	ldr	r3, [pc, #168]	@ (8009ecc <UART_SetConfig+0xac0>)
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	08db      	lsrs	r3, r3, #3
 8009e28:	f003 0303 	and.w	r3, r3, #3
 8009e2c:	4a28      	ldr	r2, [pc, #160]	@ (8009ed0 <UART_SetConfig+0xac4>)
 8009e2e:	fa22 f303 	lsr.w	r3, r2, r3
 8009e32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009e34:	e00f      	b.n	8009e56 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8009e36:	4b26      	ldr	r3, [pc, #152]	@ (8009ed0 <UART_SetConfig+0xac4>)
 8009e38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e3a:	e00c      	b.n	8009e56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009e3c:	4b25      	ldr	r3, [pc, #148]	@ (8009ed4 <UART_SetConfig+0xac8>)
 8009e3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e40:	e009      	b.n	8009e56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009e46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e48:	e005      	b.n	8009e56 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009e4e:	2301      	movs	r3, #1
 8009e50:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009e54:	bf00      	nop
    }

    if (pclk != 0U)
 8009e56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d021      	beq.n	8009ea0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e5c:	697b      	ldr	r3, [r7, #20]
 8009e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e60:	4a1d      	ldr	r2, [pc, #116]	@ (8009ed8 <UART_SetConfig+0xacc>)
 8009e62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e66:	461a      	mov	r2, r3
 8009e68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e6a:	fbb3 f2f2 	udiv	r2, r3, r2
 8009e6e:	697b      	ldr	r3, [r7, #20]
 8009e70:	685b      	ldr	r3, [r3, #4]
 8009e72:	085b      	lsrs	r3, r3, #1
 8009e74:	441a      	add	r2, r3
 8009e76:	697b      	ldr	r3, [r7, #20]
 8009e78:	685b      	ldr	r3, [r3, #4]
 8009e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e7e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e82:	2b0f      	cmp	r3, #15
 8009e84:	d909      	bls.n	8009e9a <UART_SetConfig+0xa8e>
 8009e86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e8c:	d205      	bcs.n	8009e9a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e90:	b29a      	uxth	r2, r3
 8009e92:	697b      	ldr	r3, [r7, #20]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	60da      	str	r2, [r3, #12]
 8009e98:	e002      	b.n	8009ea0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009e9a:	2301      	movs	r3, #1
 8009e9c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009ea0:	697b      	ldr	r3, [r7, #20]
 8009ea2:	2201      	movs	r2, #1
 8009ea4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009ea8:	697b      	ldr	r3, [r7, #20]
 8009eaa:	2201      	movs	r2, #1
 8009eac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009eb0:	697b      	ldr	r3, [r7, #20]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009eb6:	697b      	ldr	r3, [r7, #20]
 8009eb8:	2200      	movs	r2, #0
 8009eba:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009ebc:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	3748      	adds	r7, #72	@ 0x48
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009eca:	bf00      	nop
 8009ecc:	58024400 	.word	0x58024400
 8009ed0:	03d09000 	.word	0x03d09000
 8009ed4:	003d0900 	.word	0x003d0900
 8009ed8:	0800f71c 	.word	0x0800f71c

08009edc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009edc:	b480      	push	{r7}
 8009ede:	b083      	sub	sp, #12
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ee8:	f003 0301 	and.w	r3, r3, #1
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d00a      	beq.n	8009f06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	685b      	ldr	r3, [r3, #4]
 8009ef6:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	430a      	orrs	r2, r1
 8009f04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f0a:	f003 0302 	and.w	r3, r3, #2
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d00a      	beq.n	8009f28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	685b      	ldr	r3, [r3, #4]
 8009f18:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	430a      	orrs	r2, r1
 8009f26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f2c:	f003 0304 	and.w	r3, r3, #4
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d00a      	beq.n	8009f4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	685b      	ldr	r3, [r3, #4]
 8009f3a:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	430a      	orrs	r2, r1
 8009f48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f4e:	f003 0308 	and.w	r3, r3, #8
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d00a      	beq.n	8009f6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	685b      	ldr	r3, [r3, #4]
 8009f5c:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	430a      	orrs	r2, r1
 8009f6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f70:	f003 0310 	and.w	r3, r3, #16
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d00a      	beq.n	8009f8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	689b      	ldr	r3, [r3, #8]
 8009f7e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	430a      	orrs	r2, r1
 8009f8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f92:	f003 0320 	and.w	r3, r3, #32
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d00a      	beq.n	8009fb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	689b      	ldr	r3, [r3, #8]
 8009fa0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	430a      	orrs	r2, r1
 8009fae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d01a      	beq.n	8009ff2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	685b      	ldr	r3, [r3, #4]
 8009fc2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	430a      	orrs	r2, r1
 8009fd0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009fd6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009fda:	d10a      	bne.n	8009ff2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	685b      	ldr	r3, [r3, #4]
 8009fe2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	430a      	orrs	r2, r1
 8009ff0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ff6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d00a      	beq.n	800a014 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	685b      	ldr	r3, [r3, #4]
 800a004:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	430a      	orrs	r2, r1
 800a012:	605a      	str	r2, [r3, #4]
  }
}
 800a014:	bf00      	nop
 800a016:	370c      	adds	r7, #12
 800a018:	46bd      	mov	sp, r7
 800a01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01e:	4770      	bx	lr

0800a020 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b098      	sub	sp, #96	@ 0x60
 800a024:	af02      	add	r7, sp, #8
 800a026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2200      	movs	r2, #0
 800a02c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a030:	f7f7 fbb6 	bl	80017a0 <HAL_GetTick>
 800a034:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f003 0308 	and.w	r3, r3, #8
 800a040:	2b08      	cmp	r3, #8
 800a042:	d12f      	bne.n	800a0a4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a044:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a048:	9300      	str	r3, [sp, #0]
 800a04a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a04c:	2200      	movs	r2, #0
 800a04e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f000 f88e 	bl	800a174 <UART_WaitOnFlagUntilTimeout>
 800a058:	4603      	mov	r3, r0
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d022      	beq.n	800a0a4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a066:	e853 3f00 	ldrex	r3, [r3]
 800a06a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a06c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a06e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a072:	653b      	str	r3, [r7, #80]	@ 0x50
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	461a      	mov	r2, r3
 800a07a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a07c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a07e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a080:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a082:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a084:	e841 2300 	strex	r3, r2, [r1]
 800a088:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a08a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d1e6      	bne.n	800a05e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2220      	movs	r2, #32
 800a094:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2200      	movs	r2, #0
 800a09c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a0a0:	2303      	movs	r3, #3
 800a0a2:	e063      	b.n	800a16c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f003 0304 	and.w	r3, r3, #4
 800a0ae:	2b04      	cmp	r3, #4
 800a0b0:	d149      	bne.n	800a146 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a0b2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a0b6:	9300      	str	r3, [sp, #0]
 800a0b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	f000 f857 	bl	800a174 <UART_WaitOnFlagUntilTimeout>
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d03c      	beq.n	800a146 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0d4:	e853 3f00 	ldrex	r3, [r3]
 800a0d8:	623b      	str	r3, [r7, #32]
   return(result);
 800a0da:	6a3b      	ldr	r3, [r7, #32]
 800a0dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a0e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	461a      	mov	r2, r3
 800a0e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a0ea:	633b      	str	r3, [r7, #48]	@ 0x30
 800a0ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a0f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a0f2:	e841 2300 	strex	r3, r2, [r1]
 800a0f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a0f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d1e6      	bne.n	800a0cc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	3308      	adds	r3, #8
 800a104:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a106:	693b      	ldr	r3, [r7, #16]
 800a108:	e853 3f00 	ldrex	r3, [r3]
 800a10c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	f023 0301 	bic.w	r3, r3, #1
 800a114:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	3308      	adds	r3, #8
 800a11c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a11e:	61fa      	str	r2, [r7, #28]
 800a120:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a122:	69b9      	ldr	r1, [r7, #24]
 800a124:	69fa      	ldr	r2, [r7, #28]
 800a126:	e841 2300 	strex	r3, r2, [r1]
 800a12a:	617b      	str	r3, [r7, #20]
   return(result);
 800a12c:	697b      	ldr	r3, [r7, #20]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d1e5      	bne.n	800a0fe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2220      	movs	r2, #32
 800a136:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2200      	movs	r2, #0
 800a13e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a142:	2303      	movs	r3, #3
 800a144:	e012      	b.n	800a16c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2220      	movs	r2, #32
 800a14a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2220      	movs	r2, #32
 800a152:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2200      	movs	r2, #0
 800a15a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2200      	movs	r2, #0
 800a160:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2200      	movs	r2, #0
 800a166:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a16a:	2300      	movs	r3, #0
}
 800a16c:	4618      	mov	r0, r3
 800a16e:	3758      	adds	r7, #88	@ 0x58
 800a170:	46bd      	mov	sp, r7
 800a172:	bd80      	pop	{r7, pc}

0800a174 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b084      	sub	sp, #16
 800a178:	af00      	add	r7, sp, #0
 800a17a:	60f8      	str	r0, [r7, #12]
 800a17c:	60b9      	str	r1, [r7, #8]
 800a17e:	603b      	str	r3, [r7, #0]
 800a180:	4613      	mov	r3, r2
 800a182:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a184:	e049      	b.n	800a21a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a186:	69bb      	ldr	r3, [r7, #24]
 800a188:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a18c:	d045      	beq.n	800a21a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a18e:	f7f7 fb07 	bl	80017a0 <HAL_GetTick>
 800a192:	4602      	mov	r2, r0
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	1ad3      	subs	r3, r2, r3
 800a198:	69ba      	ldr	r2, [r7, #24]
 800a19a:	429a      	cmp	r2, r3
 800a19c:	d302      	bcc.n	800a1a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800a19e:	69bb      	ldr	r3, [r7, #24]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d101      	bne.n	800a1a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a1a4:	2303      	movs	r3, #3
 800a1a6:	e048      	b.n	800a23a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	f003 0304 	and.w	r3, r3, #4
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d031      	beq.n	800a21a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	69db      	ldr	r3, [r3, #28]
 800a1bc:	f003 0308 	and.w	r3, r3, #8
 800a1c0:	2b08      	cmp	r3, #8
 800a1c2:	d110      	bne.n	800a1e6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	2208      	movs	r2, #8
 800a1ca:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800a1cc:	68f8      	ldr	r0, [r7, #12]
 800a1ce:	f000 f839 	bl	800a244 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	2208      	movs	r2, #8
 800a1d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	2200      	movs	r2, #0
 800a1de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

           return HAL_ERROR;
 800a1e2:	2301      	movs	r3, #1
 800a1e4:	e029      	b.n	800a23a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	69db      	ldr	r3, [r3, #28]
 800a1ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a1f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a1f4:	d111      	bne.n	800a21a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a1fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a200:	68f8      	ldr	r0, [r7, #12]
 800a202:	f000 f81f 	bl	800a244 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	2220      	movs	r2, #32
 800a20a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	2200      	movs	r2, #0
 800a212:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a216:	2303      	movs	r3, #3
 800a218:	e00f      	b.n	800a23a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	69da      	ldr	r2, [r3, #28]
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	4013      	ands	r3, r2
 800a224:	68ba      	ldr	r2, [r7, #8]
 800a226:	429a      	cmp	r2, r3
 800a228:	bf0c      	ite	eq
 800a22a:	2301      	moveq	r3, #1
 800a22c:	2300      	movne	r3, #0
 800a22e:	b2db      	uxtb	r3, r3
 800a230:	461a      	mov	r2, r3
 800a232:	79fb      	ldrb	r3, [r7, #7]
 800a234:	429a      	cmp	r2, r3
 800a236:	d0a6      	beq.n	800a186 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a238:	2300      	movs	r3, #0
}
 800a23a:	4618      	mov	r0, r3
 800a23c:	3710      	adds	r7, #16
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}
	...

0800a244 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a244:	b480      	push	{r7}
 800a246:	b095      	sub	sp, #84	@ 0x54
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a252:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a254:	e853 3f00 	ldrex	r3, [r3]
 800a258:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a25a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a25c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a260:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	461a      	mov	r2, r3
 800a268:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a26a:	643b      	str	r3, [r7, #64]	@ 0x40
 800a26c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a26e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a270:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a272:	e841 2300 	strex	r3, r2, [r1]
 800a276:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d1e6      	bne.n	800a24c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	3308      	adds	r3, #8
 800a284:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a286:	6a3b      	ldr	r3, [r7, #32]
 800a288:	e853 3f00 	ldrex	r3, [r3]
 800a28c:	61fb      	str	r3, [r7, #28]
   return(result);
 800a28e:	69fa      	ldr	r2, [r7, #28]
 800a290:	4b1e      	ldr	r3, [pc, #120]	@ (800a30c <UART_EndRxTransfer+0xc8>)
 800a292:	4013      	ands	r3, r2
 800a294:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	3308      	adds	r3, #8
 800a29c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a29e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a2a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a2a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a2a6:	e841 2300 	strex	r3, r2, [r1]
 800a2aa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a2ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d1e5      	bne.n	800a27e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a2b6:	2b01      	cmp	r3, #1
 800a2b8:	d118      	bne.n	800a2ec <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	e853 3f00 	ldrex	r3, [r3]
 800a2c6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	f023 0310 	bic.w	r3, r3, #16
 800a2ce:	647b      	str	r3, [r7, #68]	@ 0x44
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	461a      	mov	r2, r3
 800a2d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a2d8:	61bb      	str	r3, [r7, #24]
 800a2da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2dc:	6979      	ldr	r1, [r7, #20]
 800a2de:	69ba      	ldr	r2, [r7, #24]
 800a2e0:	e841 2300 	strex	r3, r2, [r1]
 800a2e4:	613b      	str	r3, [r7, #16]
   return(result);
 800a2e6:	693b      	ldr	r3, [r7, #16]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d1e6      	bne.n	800a2ba <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2220      	movs	r2, #32
 800a2f0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a300:	bf00      	nop
 800a302:	3754      	adds	r7, #84	@ 0x54
 800a304:	46bd      	mov	sp, r7
 800a306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30a:	4770      	bx	lr
 800a30c:	effffffe 	.word	0xeffffffe

0800a310 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b084      	sub	sp, #16
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a31c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	2200      	movs	r2, #0
 800a322:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	2200      	movs	r2, #0
 800a32a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a32e:	68f8      	ldr	r0, [r7, #12]
 800a330:	f7ff f856 	bl	80093e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a334:	bf00      	nop
 800a336:	3710      	adds	r7, #16
 800a338:	46bd      	mov	sp, r7
 800a33a:	bd80      	pop	{r7, pc}

0800a33c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b088      	sub	sp, #32
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	e853 3f00 	ldrex	r3, [r3]
 800a350:	60bb      	str	r3, [r7, #8]
   return(result);
 800a352:	68bb      	ldr	r3, [r7, #8]
 800a354:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a358:	61fb      	str	r3, [r7, #28]
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	461a      	mov	r2, r3
 800a360:	69fb      	ldr	r3, [r7, #28]
 800a362:	61bb      	str	r3, [r7, #24]
 800a364:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a366:	6979      	ldr	r1, [r7, #20]
 800a368:	69ba      	ldr	r2, [r7, #24]
 800a36a:	e841 2300 	strex	r3, r2, [r1]
 800a36e:	613b      	str	r3, [r7, #16]
   return(result);
 800a370:	693b      	ldr	r3, [r7, #16]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d1e6      	bne.n	800a344 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2220      	movs	r2, #32
 800a37a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2200      	movs	r2, #0
 800a382:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a384:	6878      	ldr	r0, [r7, #4]
 800a386:	f7ff f821 	bl	80093cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a38a:	bf00      	nop
 800a38c:	3720      	adds	r7, #32
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}

0800a392 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a392:	b480      	push	{r7}
 800a394:	b083      	sub	sp, #12
 800a396:	af00      	add	r7, sp, #0
 800a398:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a39a:	bf00      	nop
 800a39c:	370c      	adds	r7, #12
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a4:	4770      	bx	lr

0800a3a6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a3a6:	b480      	push	{r7}
 800a3a8:	b083      	sub	sp, #12
 800a3aa:	af00      	add	r7, sp, #0
 800a3ac:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a3ae:	bf00      	nop
 800a3b0:	370c      	adds	r7, #12
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b8:	4770      	bx	lr

0800a3ba <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a3ba:	b480      	push	{r7}
 800a3bc:	b083      	sub	sp, #12
 800a3be:	af00      	add	r7, sp, #0
 800a3c0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a3c2:	bf00      	nop
 800a3c4:	370c      	adds	r7, #12
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3cc:	4770      	bx	lr

0800a3ce <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a3ce:	b480      	push	{r7}
 800a3d0:	b085      	sub	sp, #20
 800a3d2:	af00      	add	r7, sp, #0
 800a3d4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a3dc:	2b01      	cmp	r3, #1
 800a3de:	d101      	bne.n	800a3e4 <HAL_UARTEx_DisableFifoMode+0x16>
 800a3e0:	2302      	movs	r3, #2
 800a3e2:	e027      	b.n	800a434 <HAL_UARTEx_DisableFifoMode+0x66>
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2201      	movs	r2, #1
 800a3e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2224      	movs	r2, #36	@ 0x24
 800a3f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	681a      	ldr	r2, [r3, #0]
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f022 0201 	bic.w	r2, r2, #1
 800a40a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a412:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2200      	movs	r2, #0
 800a418:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	68fa      	ldr	r2, [r7, #12]
 800a420:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2220      	movs	r2, #32
 800a426:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2200      	movs	r2, #0
 800a42e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a432:	2300      	movs	r3, #0
}
 800a434:	4618      	mov	r0, r3
 800a436:	3714      	adds	r7, #20
 800a438:	46bd      	mov	sp, r7
 800a43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43e:	4770      	bx	lr

0800a440 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b084      	sub	sp, #16
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
 800a448:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a450:	2b01      	cmp	r3, #1
 800a452:	d101      	bne.n	800a458 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a454:	2302      	movs	r3, #2
 800a456:	e02d      	b.n	800a4b4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2201      	movs	r2, #1
 800a45c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2224      	movs	r2, #36	@ 0x24
 800a464:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	681a      	ldr	r2, [r3, #0]
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	f022 0201 	bic.w	r2, r2, #1
 800a47e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	689b      	ldr	r3, [r3, #8]
 800a486:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	683a      	ldr	r2, [r7, #0]
 800a490:	430a      	orrs	r2, r1
 800a492:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a494:	6878      	ldr	r0, [r7, #4]
 800a496:	f000 f84f 	bl	800a538 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	68fa      	ldr	r2, [r7, #12]
 800a4a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	2220      	movs	r2, #32
 800a4a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a4b2:	2300      	movs	r3, #0
}
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	3710      	adds	r7, #16
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	bd80      	pop	{r7, pc}

0800a4bc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b084      	sub	sp, #16
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
 800a4c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a4cc:	2b01      	cmp	r3, #1
 800a4ce:	d101      	bne.n	800a4d4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a4d0:	2302      	movs	r3, #2
 800a4d2:	e02d      	b.n	800a530 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2201      	movs	r2, #1
 800a4d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2224      	movs	r2, #36	@ 0x24
 800a4e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	681a      	ldr	r2, [r3, #0]
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f022 0201 	bic.w	r2, r2, #1
 800a4fa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	689b      	ldr	r3, [r3, #8]
 800a502:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	683a      	ldr	r2, [r7, #0]
 800a50c:	430a      	orrs	r2, r1
 800a50e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a510:	6878      	ldr	r0, [r7, #4]
 800a512:	f000 f811 	bl	800a538 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	68fa      	ldr	r2, [r7, #12]
 800a51c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2220      	movs	r2, #32
 800a522:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2200      	movs	r2, #0
 800a52a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a52e:	2300      	movs	r3, #0
}
 800a530:	4618      	mov	r0, r3
 800a532:	3710      	adds	r7, #16
 800a534:	46bd      	mov	sp, r7
 800a536:	bd80      	pop	{r7, pc}

0800a538 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a538:	b480      	push	{r7}
 800a53a:	b085      	sub	sp, #20
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a544:	2b00      	cmp	r3, #0
 800a546:	d108      	bne.n	800a55a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2201      	movs	r2, #1
 800a54c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2201      	movs	r2, #1
 800a554:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a558:	e031      	b.n	800a5be <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a55a:	2310      	movs	r3, #16
 800a55c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a55e:	2310      	movs	r3, #16
 800a560:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	689b      	ldr	r3, [r3, #8]
 800a568:	0e5b      	lsrs	r3, r3, #25
 800a56a:	b2db      	uxtb	r3, r3
 800a56c:	f003 0307 	and.w	r3, r3, #7
 800a570:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	689b      	ldr	r3, [r3, #8]
 800a578:	0f5b      	lsrs	r3, r3, #29
 800a57a:	b2db      	uxtb	r3, r3
 800a57c:	f003 0307 	and.w	r3, r3, #7
 800a580:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a582:	7bbb      	ldrb	r3, [r7, #14]
 800a584:	7b3a      	ldrb	r2, [r7, #12]
 800a586:	4911      	ldr	r1, [pc, #68]	@ (800a5cc <UARTEx_SetNbDataToProcess+0x94>)
 800a588:	5c8a      	ldrb	r2, [r1, r2]
 800a58a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a58e:	7b3a      	ldrb	r2, [r7, #12]
 800a590:	490f      	ldr	r1, [pc, #60]	@ (800a5d0 <UARTEx_SetNbDataToProcess+0x98>)
 800a592:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a594:	fb93 f3f2 	sdiv	r3, r3, r2
 800a598:	b29a      	uxth	r2, r3
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a5a0:	7bfb      	ldrb	r3, [r7, #15]
 800a5a2:	7b7a      	ldrb	r2, [r7, #13]
 800a5a4:	4909      	ldr	r1, [pc, #36]	@ (800a5cc <UARTEx_SetNbDataToProcess+0x94>)
 800a5a6:	5c8a      	ldrb	r2, [r1, r2]
 800a5a8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a5ac:	7b7a      	ldrb	r2, [r7, #13]
 800a5ae:	4908      	ldr	r1, [pc, #32]	@ (800a5d0 <UARTEx_SetNbDataToProcess+0x98>)
 800a5b0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a5b2:	fb93 f3f2 	sdiv	r3, r3, r2
 800a5b6:	b29a      	uxth	r2, r3
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a5be:	bf00      	nop
 800a5c0:	3714      	adds	r7, #20
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c8:	4770      	bx	lr
 800a5ca:	bf00      	nop
 800a5cc:	0800f734 	.word	0x0800f734
 800a5d0:	0800f73c 	.word	0x0800f73c

0800a5d4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800a5d4:	b084      	sub	sp, #16
 800a5d6:	b480      	push	{r7}
 800a5d8:	b085      	sub	sp, #20
 800a5da:	af00      	add	r7, sp, #0
 800a5dc:	6078      	str	r0, [r7, #4]
 800a5de:	f107 001c 	add.w	r0, r7, #28
 800a5e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800a5ea:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800a5ec:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800a5ee:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800a5f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800a5f2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800a5f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800a5f6:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a5f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800a5fa:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800a5fc:	68fa      	ldr	r2, [r7, #12]
 800a5fe:	4313      	orrs	r3, r2
 800a600:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	685a      	ldr	r2, [r3, #4]
 800a606:	4b07      	ldr	r3, [pc, #28]	@ (800a624 <SDMMC_Init+0x50>)
 800a608:	4013      	ands	r3, r2
 800a60a:	68fa      	ldr	r2, [r7, #12]
 800a60c:	431a      	orrs	r2, r3
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a612:	2300      	movs	r3, #0
}
 800a614:	4618      	mov	r0, r3
 800a616:	3714      	adds	r7, #20
 800a618:	46bd      	mov	sp, r7
 800a61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61e:	b004      	add	sp, #16
 800a620:	4770      	bx	lr
 800a622:	bf00      	nop
 800a624:	ffc02c00 	.word	0xffc02c00

0800a628 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800a628:	b480      	push	{r7}
 800a62a:	b083      	sub	sp, #12
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800a636:	4618      	mov	r0, r3
 800a638:	370c      	adds	r7, #12
 800a63a:	46bd      	mov	sp, r7
 800a63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a640:	4770      	bx	lr

0800a642 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800a642:	b480      	push	{r7}
 800a644:	b083      	sub	sp, #12
 800a646:	af00      	add	r7, sp, #0
 800a648:	6078      	str	r0, [r7, #4]
 800a64a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	681a      	ldr	r2, [r3, #0]
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a656:	2300      	movs	r3, #0
}
 800a658:	4618      	mov	r0, r3
 800a65a:	370c      	adds	r7, #12
 800a65c:	46bd      	mov	sp, r7
 800a65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a662:	4770      	bx	lr

0800a664 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800a664:	b480      	push	{r7}
 800a666:	b083      	sub	sp, #12
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	f043 0203 	orr.w	r2, r3, #3
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800a678:	2300      	movs	r3, #0
}
 800a67a:	4618      	mov	r0, r3
 800a67c:	370c      	adds	r7, #12
 800a67e:	46bd      	mov	sp, r7
 800a680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a684:	4770      	bx	lr

0800a686 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800a686:	b480      	push	{r7}
 800a688:	b083      	sub	sp, #12
 800a68a:	af00      	add	r7, sp, #0
 800a68c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	f003 0303 	and.w	r3, r3, #3
}
 800a696:	4618      	mov	r0, r3
 800a698:	370c      	adds	r7, #12
 800a69a:	46bd      	mov	sp, r7
 800a69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a0:	4770      	bx	lr
	...

0800a6a4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b085      	sub	sp, #20
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
 800a6ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	681a      	ldr	r2, [r3, #0]
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800a6c2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800a6c8:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800a6ce:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800a6d0:	68fa      	ldr	r2, [r7, #12]
 800a6d2:	4313      	orrs	r3, r2
 800a6d4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	68da      	ldr	r2, [r3, #12]
 800a6da:	4b06      	ldr	r3, [pc, #24]	@ (800a6f4 <SDMMC_SendCommand+0x50>)
 800a6dc:	4013      	ands	r3, r2
 800a6de:	68fa      	ldr	r2, [r7, #12]
 800a6e0:	431a      	orrs	r2, r3
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a6e6:	2300      	movs	r3, #0
}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	3714      	adds	r7, #20
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f2:	4770      	bx	lr
 800a6f4:	fffee0c0 	.word	0xfffee0c0

0800a6f8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800a6f8:	b480      	push	{r7}
 800a6fa:	b083      	sub	sp, #12
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	691b      	ldr	r3, [r3, #16]
 800a704:	b2db      	uxtb	r3, r3
}
 800a706:	4618      	mov	r0, r3
 800a708:	370c      	adds	r7, #12
 800a70a:	46bd      	mov	sp, r7
 800a70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a710:	4770      	bx	lr

0800a712 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800a712:	b480      	push	{r7}
 800a714:	b085      	sub	sp, #20
 800a716:	af00      	add	r7, sp, #0
 800a718:	6078      	str	r0, [r7, #4]
 800a71a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	3314      	adds	r3, #20
 800a720:	461a      	mov	r2, r3
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	4413      	add	r3, r2
 800a726:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	681b      	ldr	r3, [r3, #0]
}
 800a72c:	4618      	mov	r0, r3
 800a72e:	3714      	adds	r7, #20
 800a730:	46bd      	mov	sp, r7
 800a732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a736:	4770      	bx	lr

0800a738 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800a738:	b480      	push	{r7}
 800a73a:	b085      	sub	sp, #20
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
 800a740:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a742:	2300      	movs	r3, #0
 800a744:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	681a      	ldr	r2, [r3, #0]
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	685a      	ldr	r2, [r3, #4]
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800a75e:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800a764:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800a76a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800a76c:	68fa      	ldr	r2, [r7, #12]
 800a76e:	4313      	orrs	r3, r2
 800a770:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a776:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	431a      	orrs	r2, r3
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800a782:	2300      	movs	r3, #0

}
 800a784:	4618      	mov	r0, r3
 800a786:	3714      	adds	r7, #20
 800a788:	46bd      	mov	sp, r7
 800a78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78e:	4770      	bx	lr

0800a790 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b088      	sub	sp, #32
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
 800a798:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a79e:	2310      	movs	r3, #16
 800a7a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a7a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a7a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a7ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a7b0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a7b2:	f107 0308 	add.w	r3, r7, #8
 800a7b6:	4619      	mov	r1, r3
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	f7ff ff73 	bl	800a6a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800a7be:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a7c2:	2110      	movs	r1, #16
 800a7c4:	6878      	ldr	r0, [r7, #4]
 800a7c6:	f000 fa5f 	bl	800ac88 <SDMMC_GetCmdResp1>
 800a7ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a7cc:	69fb      	ldr	r3, [r7, #28]
}
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	3720      	adds	r7, #32
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}

0800a7d6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a7d6:	b580      	push	{r7, lr}
 800a7d8:	b088      	sub	sp, #32
 800a7da:	af00      	add	r7, sp, #0
 800a7dc:	6078      	str	r0, [r7, #4]
 800a7de:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a7e4:	2311      	movs	r3, #17
 800a7e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a7e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a7ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a7f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a7f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a7f8:	f107 0308 	add.w	r3, r7, #8
 800a7fc:	4619      	mov	r1, r3
 800a7fe:	6878      	ldr	r0, [r7, #4]
 800a800:	f7ff ff50 	bl	800a6a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a804:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a808:	2111      	movs	r1, #17
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	f000 fa3c 	bl	800ac88 <SDMMC_GetCmdResp1>
 800a810:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a812:	69fb      	ldr	r3, [r7, #28]
}
 800a814:	4618      	mov	r0, r3
 800a816:	3720      	adds	r7, #32
 800a818:	46bd      	mov	sp, r7
 800a81a:	bd80      	pop	{r7, pc}

0800a81c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b088      	sub	sp, #32
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
 800a824:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a82a:	2312      	movs	r3, #18
 800a82c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a82e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a832:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a834:	2300      	movs	r3, #0
 800a836:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a838:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a83c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a83e:	f107 0308 	add.w	r3, r7, #8
 800a842:	4619      	mov	r1, r3
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f7ff ff2d 	bl	800a6a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a84a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a84e:	2112      	movs	r1, #18
 800a850:	6878      	ldr	r0, [r7, #4]
 800a852:	f000 fa19 	bl	800ac88 <SDMMC_GetCmdResp1>
 800a856:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a858:	69fb      	ldr	r3, [r7, #28]
}
 800a85a:	4618      	mov	r0, r3
 800a85c:	3720      	adds	r7, #32
 800a85e:	46bd      	mov	sp, r7
 800a860:	bd80      	pop	{r7, pc}

0800a862 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a862:	b580      	push	{r7, lr}
 800a864:	b088      	sub	sp, #32
 800a866:	af00      	add	r7, sp, #0
 800a868:	6078      	str	r0, [r7, #4]
 800a86a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a870:	2318      	movs	r3, #24
 800a872:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a874:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a878:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a87a:	2300      	movs	r3, #0
 800a87c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a87e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a882:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a884:	f107 0308 	add.w	r3, r7, #8
 800a888:	4619      	mov	r1, r3
 800a88a:	6878      	ldr	r0, [r7, #4]
 800a88c:	f7ff ff0a 	bl	800a6a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a890:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a894:	2118      	movs	r1, #24
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f000 f9f6 	bl	800ac88 <SDMMC_GetCmdResp1>
 800a89c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a89e:	69fb      	ldr	r3, [r7, #28]
}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	3720      	adds	r7, #32
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}

0800a8a8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b088      	sub	sp, #32
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
 800a8b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a8b6:	2319      	movs	r3, #25
 800a8b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a8ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a8be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a8c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a8c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a8ca:	f107 0308 	add.w	r3, r7, #8
 800a8ce:	4619      	mov	r1, r3
 800a8d0:	6878      	ldr	r0, [r7, #4]
 800a8d2:	f7ff fee7 	bl	800a6a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a8d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a8da:	2119      	movs	r1, #25
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f000 f9d3 	bl	800ac88 <SDMMC_GetCmdResp1>
 800a8e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a8e4:	69fb      	ldr	r3, [r7, #28]
}
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	3720      	adds	r7, #32
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bd80      	pop	{r7, pc}
	...

0800a8f0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b088      	sub	sp, #32
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a8fc:	230c      	movs	r3, #12
 800a8fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a900:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a904:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a906:	2300      	movs	r3, #0
 800a908:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a90a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a90e:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	68db      	ldr	r3, [r3, #12]
 800a914:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	68db      	ldr	r3, [r3, #12]
 800a920:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a928:	f107 0308 	add.w	r3, r7, #8
 800a92c:	4619      	mov	r1, r3
 800a92e:	6878      	ldr	r0, [r7, #4]
 800a930:	f7ff feb8 	bl	800a6a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800a934:	4a0b      	ldr	r2, [pc, #44]	@ (800a964 <SDMMC_CmdStopTransfer+0x74>)
 800a936:	210c      	movs	r1, #12
 800a938:	6878      	ldr	r0, [r7, #4]
 800a93a:	f000 f9a5 	bl	800ac88 <SDMMC_GetCmdResp1>
 800a93e:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	68db      	ldr	r3, [r3, #12]
 800a944:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800a94c:	69fb      	ldr	r3, [r7, #28]
 800a94e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a952:	d101      	bne.n	800a958 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800a954:	2300      	movs	r3, #0
 800a956:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800a958:	69fb      	ldr	r3, [r7, #28]
}
 800a95a:	4618      	mov	r0, r3
 800a95c:	3720      	adds	r7, #32
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd80      	pop	{r7, pc}
 800a962:	bf00      	nop
 800a964:	05f5e100 	.word	0x05f5e100

0800a968 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b088      	sub	sp, #32
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
 800a970:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a976:	2307      	movs	r3, #7
 800a978:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a97a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a97e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a980:	2300      	movs	r3, #0
 800a982:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a984:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a988:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a98a:	f107 0308 	add.w	r3, r7, #8
 800a98e:	4619      	mov	r1, r3
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	f7ff fe87 	bl	800a6a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800a996:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a99a:	2107      	movs	r1, #7
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	f000 f973 	bl	800ac88 <SDMMC_GetCmdResp1>
 800a9a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a9a4:	69fb      	ldr	r3, [r7, #28]
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3720      	adds	r7, #32
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}

0800a9ae <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800a9ae:	b580      	push	{r7, lr}
 800a9b0:	b088      	sub	sp, #32
 800a9b2:	af00      	add	r7, sp, #0
 800a9b4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800a9be:	2300      	movs	r3, #0
 800a9c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a9c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a9ca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a9cc:	f107 0308 	add.w	r3, r7, #8
 800a9d0:	4619      	mov	r1, r3
 800a9d2:	6878      	ldr	r0, [r7, #4]
 800a9d4:	f7ff fe66 	bl	800a6a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800a9d8:	6878      	ldr	r0, [r7, #4]
 800a9da:	f000 fb97 	bl	800b10c <SDMMC_GetCmdError>
 800a9de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a9e0:	69fb      	ldr	r3, [r7, #28]
}
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	3720      	adds	r7, #32
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}

0800a9ea <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800a9ea:	b580      	push	{r7, lr}
 800a9ec:	b088      	sub	sp, #32
 800a9ee:	af00      	add	r7, sp, #0
 800a9f0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a9f2:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800a9f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a9f8:	2308      	movs	r3, #8
 800a9fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a9fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800aa00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aa02:	2300      	movs	r3, #0
 800aa04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aa06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800aa0a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aa0c:	f107 0308 	add.w	r3, r7, #8
 800aa10:	4619      	mov	r1, r3
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	f7ff fe46 	bl	800a6a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800aa18:	6878      	ldr	r0, [r7, #4]
 800aa1a:	f000 fb29 	bl	800b070 <SDMMC_GetCmdResp7>
 800aa1e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa20:	69fb      	ldr	r3, [r7, #28]
}
 800aa22:	4618      	mov	r0, r3
 800aa24:	3720      	adds	r7, #32
 800aa26:	46bd      	mov	sp, r7
 800aa28:	bd80      	pop	{r7, pc}

0800aa2a <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800aa2a:	b580      	push	{r7, lr}
 800aa2c:	b088      	sub	sp, #32
 800aa2e:	af00      	add	r7, sp, #0
 800aa30:	6078      	str	r0, [r7, #4]
 800aa32:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800aa38:	2337      	movs	r3, #55	@ 0x37
 800aa3a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aa3c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800aa40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aa42:	2300      	movs	r3, #0
 800aa44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aa46:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800aa4a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aa4c:	f107 0308 	add.w	r3, r7, #8
 800aa50:	4619      	mov	r1, r3
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	f7ff fe26 	bl	800a6a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800aa58:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aa5c:	2137      	movs	r1, #55	@ 0x37
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f000 f912 	bl	800ac88 <SDMMC_GetCmdResp1>
 800aa64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa66:	69fb      	ldr	r3, [r7, #28]
}
 800aa68:	4618      	mov	r0, r3
 800aa6a:	3720      	adds	r7, #32
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	bd80      	pop	{r7, pc}

0800aa70 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b088      	sub	sp, #32
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
 800aa78:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800aa7e:	2329      	movs	r3, #41	@ 0x29
 800aa80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aa82:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800aa86:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aa88:	2300      	movs	r3, #0
 800aa8a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aa8c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800aa90:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aa92:	f107 0308 	add.w	r3, r7, #8
 800aa96:	4619      	mov	r1, r3
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	f7ff fe03 	bl	800a6a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800aa9e:	6878      	ldr	r0, [r7, #4]
 800aaa0:	f000 fa2e 	bl	800af00 <SDMMC_GetCmdResp3>
 800aaa4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aaa6:	69fb      	ldr	r3, [r7, #28]
}
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	3720      	adds	r7, #32
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bd80      	pop	{r7, pc}

0800aab0 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b088      	sub	sp, #32
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
 800aab8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800aabe:	2306      	movs	r3, #6
 800aac0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aac2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800aac6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aac8:	2300      	movs	r3, #0
 800aaca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aacc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800aad0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aad2:	f107 0308 	add.w	r3, r7, #8
 800aad6:	4619      	mov	r1, r3
 800aad8:	6878      	ldr	r0, [r7, #4]
 800aada:	f7ff fde3 	bl	800a6a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800aade:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aae2:	2106      	movs	r1, #6
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	f000 f8cf 	bl	800ac88 <SDMMC_GetCmdResp1>
 800aaea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aaec:	69fb      	ldr	r3, [r7, #28]
}
 800aaee:	4618      	mov	r0, r3
 800aaf0:	3720      	adds	r7, #32
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	bd80      	pop	{r7, pc}

0800aaf6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800aaf6:	b580      	push	{r7, lr}
 800aaf8:	b088      	sub	sp, #32
 800aafa:	af00      	add	r7, sp, #0
 800aafc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800aafe:	2300      	movs	r3, #0
 800ab00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800ab02:	2333      	movs	r3, #51	@ 0x33
 800ab04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ab06:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ab0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ab10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ab14:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ab16:	f107 0308 	add.w	r3, r7, #8
 800ab1a:	4619      	mov	r1, r3
 800ab1c:	6878      	ldr	r0, [r7, #4]
 800ab1e:	f7ff fdc1 	bl	800a6a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800ab22:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ab26:	2133      	movs	r1, #51	@ 0x33
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	f000 f8ad 	bl	800ac88 <SDMMC_GetCmdResp1>
 800ab2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab30:	69fb      	ldr	r3, [r7, #28]
}
 800ab32:	4618      	mov	r0, r3
 800ab34:	3720      	adds	r7, #32
 800ab36:	46bd      	mov	sp, r7
 800ab38:	bd80      	pop	{r7, pc}

0800ab3a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800ab3a:	b580      	push	{r7, lr}
 800ab3c:	b088      	sub	sp, #32
 800ab3e:	af00      	add	r7, sp, #0
 800ab40:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800ab42:	2300      	movs	r3, #0
 800ab44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800ab46:	2302      	movs	r3, #2
 800ab48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ab4a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800ab4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ab50:	2300      	movs	r3, #0
 800ab52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ab54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ab58:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ab5a:	f107 0308 	add.w	r3, r7, #8
 800ab5e:	4619      	mov	r1, r3
 800ab60:	6878      	ldr	r0, [r7, #4]
 800ab62:	f7ff fd9f 	bl	800a6a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ab66:	6878      	ldr	r0, [r7, #4]
 800ab68:	f000 f980 	bl	800ae6c <SDMMC_GetCmdResp2>
 800ab6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab6e:	69fb      	ldr	r3, [r7, #28]
}
 800ab70:	4618      	mov	r0, r3
 800ab72:	3720      	adds	r7, #32
 800ab74:	46bd      	mov	sp, r7
 800ab76:	bd80      	pop	{r7, pc}

0800ab78 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b088      	sub	sp, #32
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
 800ab80:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800ab86:	2309      	movs	r3, #9
 800ab88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ab8a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800ab8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ab90:	2300      	movs	r3, #0
 800ab92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ab94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ab98:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ab9a:	f107 0308 	add.w	r3, r7, #8
 800ab9e:	4619      	mov	r1, r3
 800aba0:	6878      	ldr	r0, [r7, #4]
 800aba2:	f7ff fd7f 	bl	800a6a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800aba6:	6878      	ldr	r0, [r7, #4]
 800aba8:	f000 f960 	bl	800ae6c <SDMMC_GetCmdResp2>
 800abac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800abae:	69fb      	ldr	r3, [r7, #28]
}
 800abb0:	4618      	mov	r0, r3
 800abb2:	3720      	adds	r7, #32
 800abb4:	46bd      	mov	sp, r7
 800abb6:	bd80      	pop	{r7, pc}

0800abb8 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b088      	sub	sp, #32
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
 800abc0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800abc2:	2300      	movs	r3, #0
 800abc4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800abc6:	2303      	movs	r3, #3
 800abc8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800abca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800abce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800abd0:	2300      	movs	r3, #0
 800abd2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800abd4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800abd8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800abda:	f107 0308 	add.w	r3, r7, #8
 800abde:	4619      	mov	r1, r3
 800abe0:	6878      	ldr	r0, [r7, #4]
 800abe2:	f7ff fd5f 	bl	800a6a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800abe6:	683a      	ldr	r2, [r7, #0]
 800abe8:	2103      	movs	r1, #3
 800abea:	6878      	ldr	r0, [r7, #4]
 800abec:	f000 f9c8 	bl	800af80 <SDMMC_GetCmdResp6>
 800abf0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800abf2:	69fb      	ldr	r3, [r7, #28]
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	3720      	adds	r7, #32
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd80      	pop	{r7, pc}

0800abfc <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b088      	sub	sp, #32
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
 800ac04:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800ac0a:	230d      	movs	r3, #13
 800ac0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ac0e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ac12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac14:	2300      	movs	r3, #0
 800ac16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ac1c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac1e:	f107 0308 	add.w	r3, r7, #8
 800ac22:	4619      	mov	r1, r3
 800ac24:	6878      	ldr	r0, [r7, #4]
 800ac26:	f7ff fd3d 	bl	800a6a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800ac2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac2e:	210d      	movs	r1, #13
 800ac30:	6878      	ldr	r0, [r7, #4]
 800ac32:	f000 f829 	bl	800ac88 <SDMMC_GetCmdResp1>
 800ac36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac38:	69fb      	ldr	r3, [r7, #28]
}
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	3720      	adds	r7, #32
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}

0800ac42 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800ac42:	b580      	push	{r7, lr}
 800ac44:	b088      	sub	sp, #32
 800ac46:	af00      	add	r7, sp, #0
 800ac48:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800ac4e:	230d      	movs	r3, #13
 800ac50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ac52:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ac56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac58:	2300      	movs	r3, #0
 800ac5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac5c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ac60:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac62:	f107 0308 	add.w	r3, r7, #8
 800ac66:	4619      	mov	r1, r3
 800ac68:	6878      	ldr	r0, [r7, #4]
 800ac6a:	f7ff fd1b 	bl	800a6a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800ac6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac72:	210d      	movs	r1, #13
 800ac74:	6878      	ldr	r0, [r7, #4]
 800ac76:	f000 f807 	bl	800ac88 <SDMMC_GetCmdResp1>
 800ac7a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac7c:	69fb      	ldr	r3, [r7, #28]
}
 800ac7e:	4618      	mov	r0, r3
 800ac80:	3720      	adds	r7, #32
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bd80      	pop	{r7, pc}
	...

0800ac88 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b088      	sub	sp, #32
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	60f8      	str	r0, [r7, #12]
 800ac90:	460b      	mov	r3, r1
 800ac92:	607a      	str	r2, [r7, #4]
 800ac94:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ac96:	4b70      	ldr	r3, [pc, #448]	@ (800ae58 <SDMMC_GetCmdResp1+0x1d0>)
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	4a70      	ldr	r2, [pc, #448]	@ (800ae5c <SDMMC_GetCmdResp1+0x1d4>)
 800ac9c:	fba2 2303 	umull	r2, r3, r2, r3
 800aca0:	0a5a      	lsrs	r2, r3, #9
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	fb02 f303 	mul.w	r3, r2, r3
 800aca8:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800acaa:	69fb      	ldr	r3, [r7, #28]
 800acac:	1e5a      	subs	r2, r3, #1
 800acae:	61fa      	str	r2, [r7, #28]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d102      	bne.n	800acba <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800acb4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800acb8:	e0c9      	b.n	800ae4e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800acbe:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800acc0:	69ba      	ldr	r2, [r7, #24]
 800acc2:	4b67      	ldr	r3, [pc, #412]	@ (800ae60 <SDMMC_GetCmdResp1+0x1d8>)
 800acc4:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d0ef      	beq.n	800acaa <SDMMC_GetCmdResp1+0x22>
 800acca:	69bb      	ldr	r3, [r7, #24]
 800accc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d1ea      	bne.n	800acaa <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800acd8:	f003 0304 	and.w	r3, r3, #4
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d004      	beq.n	800acea <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	2204      	movs	r2, #4
 800ace4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ace6:	2304      	movs	r3, #4
 800ace8:	e0b1      	b.n	800ae4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800acee:	f003 0301 	and.w	r3, r3, #1
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d004      	beq.n	800ad00 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	2201      	movs	r2, #1
 800acfa:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800acfc:	2301      	movs	r3, #1
 800acfe:	e0a6      	b.n	800ae4e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	4a58      	ldr	r2, [pc, #352]	@ (800ae64 <SDMMC_GetCmdResp1+0x1dc>)
 800ad04:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ad06:	68f8      	ldr	r0, [r7, #12]
 800ad08:	f7ff fcf6 	bl	800a6f8 <SDMMC_GetCommandResponse>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	461a      	mov	r2, r3
 800ad10:	7afb      	ldrb	r3, [r7, #11]
 800ad12:	4293      	cmp	r3, r2
 800ad14:	d001      	beq.n	800ad1a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ad16:	2301      	movs	r3, #1
 800ad18:	e099      	b.n	800ae4e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ad1a:	2100      	movs	r1, #0
 800ad1c:	68f8      	ldr	r0, [r7, #12]
 800ad1e:	f7ff fcf8 	bl	800a712 <SDMMC_GetResponse>
 800ad22:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ad24:	697a      	ldr	r2, [r7, #20]
 800ad26:	4b50      	ldr	r3, [pc, #320]	@ (800ae68 <SDMMC_GetCmdResp1+0x1e0>)
 800ad28:	4013      	ands	r3, r2
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d101      	bne.n	800ad32 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800ad2e:	2300      	movs	r3, #0
 800ad30:	e08d      	b.n	800ae4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ad32:	697b      	ldr	r3, [r7, #20]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	da02      	bge.n	800ad3e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ad38:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ad3c:	e087      	b.n	800ae4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ad3e:	697b      	ldr	r3, [r7, #20]
 800ad40:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d001      	beq.n	800ad4c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ad48:	2340      	movs	r3, #64	@ 0x40
 800ad4a:	e080      	b.n	800ae4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ad4c:	697b      	ldr	r3, [r7, #20]
 800ad4e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d001      	beq.n	800ad5a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ad56:	2380      	movs	r3, #128	@ 0x80
 800ad58:	e079      	b.n	800ae4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ad5a:	697b      	ldr	r3, [r7, #20]
 800ad5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d002      	beq.n	800ad6a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ad64:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ad68:	e071      	b.n	800ae4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ad6a:	697b      	ldr	r3, [r7, #20]
 800ad6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d002      	beq.n	800ad7a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ad74:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ad78:	e069      	b.n	800ae4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ad7a:	697b      	ldr	r3, [r7, #20]
 800ad7c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d002      	beq.n	800ad8a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ad84:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ad88:	e061      	b.n	800ae4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ad8a:	697b      	ldr	r3, [r7, #20]
 800ad8c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d002      	beq.n	800ad9a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ad94:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ad98:	e059      	b.n	800ae4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ad9a:	697b      	ldr	r3, [r7, #20]
 800ad9c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d002      	beq.n	800adaa <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ada4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ada8:	e051      	b.n	800ae4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800adaa:	697b      	ldr	r3, [r7, #20]
 800adac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d002      	beq.n	800adba <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800adb4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800adb8:	e049      	b.n	800ae4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800adba:	697b      	ldr	r3, [r7, #20]
 800adbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d002      	beq.n	800adca <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800adc4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800adc8:	e041      	b.n	800ae4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800adca:	697b      	ldr	r3, [r7, #20]
 800adcc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800add0:	2b00      	cmp	r3, #0
 800add2:	d002      	beq.n	800adda <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800add4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800add8:	e039      	b.n	800ae4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800adda:	697b      	ldr	r3, [r7, #20]
 800addc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d002      	beq.n	800adea <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ade4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800ade8:	e031      	b.n	800ae4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800adea:	697b      	ldr	r3, [r7, #20]
 800adec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d002      	beq.n	800adfa <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800adf4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800adf8:	e029      	b.n	800ae4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800adfa:	697b      	ldr	r3, [r7, #20]
 800adfc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d002      	beq.n	800ae0a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ae04:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ae08:	e021      	b.n	800ae4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ae0a:	697b      	ldr	r3, [r7, #20]
 800ae0c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d002      	beq.n	800ae1a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ae14:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800ae18:	e019      	b.n	800ae4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ae1a:	697b      	ldr	r3, [r7, #20]
 800ae1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d002      	beq.n	800ae2a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ae24:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800ae28:	e011      	b.n	800ae4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ae2a:	697b      	ldr	r3, [r7, #20]
 800ae2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d002      	beq.n	800ae3a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800ae34:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800ae38:	e009      	b.n	800ae4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800ae3a:	697b      	ldr	r3, [r7, #20]
 800ae3c:	f003 0308 	and.w	r3, r3, #8
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d002      	beq.n	800ae4a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800ae44:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800ae48:	e001      	b.n	800ae4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ae4a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800ae4e:	4618      	mov	r0, r3
 800ae50:	3720      	adds	r7, #32
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd80      	pop	{r7, pc}
 800ae56:	bf00      	nop
 800ae58:	24000000 	.word	0x24000000
 800ae5c:	10624dd3 	.word	0x10624dd3
 800ae60:	00200045 	.word	0x00200045
 800ae64:	002000c5 	.word	0x002000c5
 800ae68:	fdffe008 	.word	0xfdffe008

0800ae6c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	b085      	sub	sp, #20
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ae74:	4b1f      	ldr	r3, [pc, #124]	@ (800aef4 <SDMMC_GetCmdResp2+0x88>)
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	4a1f      	ldr	r2, [pc, #124]	@ (800aef8 <SDMMC_GetCmdResp2+0x8c>)
 800ae7a:	fba2 2303 	umull	r2, r3, r2, r3
 800ae7e:	0a5b      	lsrs	r3, r3, #9
 800ae80:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ae84:	fb02 f303 	mul.w	r3, r2, r3
 800ae88:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	1e5a      	subs	r2, r3, #1
 800ae8e:	60fa      	str	r2, [r7, #12]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d102      	bne.n	800ae9a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ae94:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ae98:	e026      	b.n	800aee8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae9e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800aea0:	68bb      	ldr	r3, [r7, #8]
 800aea2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d0ef      	beq.n	800ae8a <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800aeaa:	68bb      	ldr	r3, [r7, #8]
 800aeac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d1ea      	bne.n	800ae8a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aeb8:	f003 0304 	and.w	r3, r3, #4
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d004      	beq.n	800aeca <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2204      	movs	r2, #4
 800aec4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aec6:	2304      	movs	r3, #4
 800aec8:	e00e      	b.n	800aee8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aece:	f003 0301 	and.w	r3, r3, #1
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d004      	beq.n	800aee0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	2201      	movs	r2, #1
 800aeda:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aedc:	2301      	movs	r3, #1
 800aede:	e003      	b.n	800aee8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	4a06      	ldr	r2, [pc, #24]	@ (800aefc <SDMMC_GetCmdResp2+0x90>)
 800aee4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800aee6:	2300      	movs	r3, #0
}
 800aee8:	4618      	mov	r0, r3
 800aeea:	3714      	adds	r7, #20
 800aeec:	46bd      	mov	sp, r7
 800aeee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef2:	4770      	bx	lr
 800aef4:	24000000 	.word	0x24000000
 800aef8:	10624dd3 	.word	0x10624dd3
 800aefc:	002000c5 	.word	0x002000c5

0800af00 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800af00:	b480      	push	{r7}
 800af02:	b085      	sub	sp, #20
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800af08:	4b1a      	ldr	r3, [pc, #104]	@ (800af74 <SDMMC_GetCmdResp3+0x74>)
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	4a1a      	ldr	r2, [pc, #104]	@ (800af78 <SDMMC_GetCmdResp3+0x78>)
 800af0e:	fba2 2303 	umull	r2, r3, r2, r3
 800af12:	0a5b      	lsrs	r3, r3, #9
 800af14:	f241 3288 	movw	r2, #5000	@ 0x1388
 800af18:	fb02 f303 	mul.w	r3, r2, r3
 800af1c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	1e5a      	subs	r2, r3, #1
 800af22:	60fa      	str	r2, [r7, #12]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d102      	bne.n	800af2e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800af28:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800af2c:	e01b      	b.n	800af66 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af32:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800af34:	68bb      	ldr	r3, [r7, #8]
 800af36:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d0ef      	beq.n	800af1e <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800af3e:	68bb      	ldr	r3, [r7, #8]
 800af40:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800af44:	2b00      	cmp	r3, #0
 800af46:	d1ea      	bne.n	800af1e <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af4c:	f003 0304 	and.w	r3, r3, #4
 800af50:	2b00      	cmp	r3, #0
 800af52:	d004      	beq.n	800af5e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2204      	movs	r2, #4
 800af58:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800af5a:	2304      	movs	r3, #4
 800af5c:	e003      	b.n	800af66 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	4a06      	ldr	r2, [pc, #24]	@ (800af7c <SDMMC_GetCmdResp3+0x7c>)
 800af62:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800af64:	2300      	movs	r3, #0
}
 800af66:	4618      	mov	r0, r3
 800af68:	3714      	adds	r7, #20
 800af6a:	46bd      	mov	sp, r7
 800af6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af70:	4770      	bx	lr
 800af72:	bf00      	nop
 800af74:	24000000 	.word	0x24000000
 800af78:	10624dd3 	.word	0x10624dd3
 800af7c:	002000c5 	.word	0x002000c5

0800af80 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b088      	sub	sp, #32
 800af84:	af00      	add	r7, sp, #0
 800af86:	60f8      	str	r0, [r7, #12]
 800af88:	460b      	mov	r3, r1
 800af8a:	607a      	str	r2, [r7, #4]
 800af8c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800af8e:	4b35      	ldr	r3, [pc, #212]	@ (800b064 <SDMMC_GetCmdResp6+0xe4>)
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	4a35      	ldr	r2, [pc, #212]	@ (800b068 <SDMMC_GetCmdResp6+0xe8>)
 800af94:	fba2 2303 	umull	r2, r3, r2, r3
 800af98:	0a5b      	lsrs	r3, r3, #9
 800af9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800af9e:	fb02 f303 	mul.w	r3, r2, r3
 800afa2:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800afa4:	69fb      	ldr	r3, [r7, #28]
 800afa6:	1e5a      	subs	r2, r3, #1
 800afa8:	61fa      	str	r2, [r7, #28]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d102      	bne.n	800afb4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800afae:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800afb2:	e052      	b.n	800b05a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800afb8:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800afba:	69bb      	ldr	r3, [r7, #24]
 800afbc:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d0ef      	beq.n	800afa4 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800afc4:	69bb      	ldr	r3, [r7, #24]
 800afc6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d1ea      	bne.n	800afa4 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800afd2:	f003 0304 	and.w	r3, r3, #4
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d004      	beq.n	800afe4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	2204      	movs	r2, #4
 800afde:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800afe0:	2304      	movs	r3, #4
 800afe2:	e03a      	b.n	800b05a <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800afe8:	f003 0301 	and.w	r3, r3, #1
 800afec:	2b00      	cmp	r3, #0
 800afee:	d004      	beq.n	800affa <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	2201      	movs	r2, #1
 800aff4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aff6:	2301      	movs	r3, #1
 800aff8:	e02f      	b.n	800b05a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800affa:	68f8      	ldr	r0, [r7, #12]
 800affc:	f7ff fb7c 	bl	800a6f8 <SDMMC_GetCommandResponse>
 800b000:	4603      	mov	r3, r0
 800b002:	461a      	mov	r2, r3
 800b004:	7afb      	ldrb	r3, [r7, #11]
 800b006:	4293      	cmp	r3, r2
 800b008:	d001      	beq.n	800b00e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b00a:	2301      	movs	r3, #1
 800b00c:	e025      	b.n	800b05a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	4a16      	ldr	r2, [pc, #88]	@ (800b06c <SDMMC_GetCmdResp6+0xec>)
 800b012:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b014:	2100      	movs	r1, #0
 800b016:	68f8      	ldr	r0, [r7, #12]
 800b018:	f7ff fb7b 	bl	800a712 <SDMMC_GetResponse>
 800b01c:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800b01e:	697b      	ldr	r3, [r7, #20]
 800b020:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800b024:	2b00      	cmp	r3, #0
 800b026:	d106      	bne.n	800b036 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800b028:	697b      	ldr	r3, [r7, #20]
 800b02a:	0c1b      	lsrs	r3, r3, #16
 800b02c:	b29a      	uxth	r2, r3
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800b032:	2300      	movs	r3, #0
 800b034:	e011      	b.n	800b05a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b036:	697b      	ldr	r3, [r7, #20]
 800b038:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d002      	beq.n	800b046 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b040:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b044:	e009      	b.n	800b05a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b046:	697b      	ldr	r3, [r7, #20]
 800b048:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d002      	beq.n	800b056 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b050:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b054:	e001      	b.n	800b05a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b056:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800b05a:	4618      	mov	r0, r3
 800b05c:	3720      	adds	r7, #32
 800b05e:	46bd      	mov	sp, r7
 800b060:	bd80      	pop	{r7, pc}
 800b062:	bf00      	nop
 800b064:	24000000 	.word	0x24000000
 800b068:	10624dd3 	.word	0x10624dd3
 800b06c:	002000c5 	.word	0x002000c5

0800b070 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800b070:	b480      	push	{r7}
 800b072:	b085      	sub	sp, #20
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b078:	4b22      	ldr	r3, [pc, #136]	@ (800b104 <SDMMC_GetCmdResp7+0x94>)
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	4a22      	ldr	r2, [pc, #136]	@ (800b108 <SDMMC_GetCmdResp7+0x98>)
 800b07e:	fba2 2303 	umull	r2, r3, r2, r3
 800b082:	0a5b      	lsrs	r3, r3, #9
 800b084:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b088:	fb02 f303 	mul.w	r3, r2, r3
 800b08c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	1e5a      	subs	r2, r3, #1
 800b092:	60fa      	str	r2, [r7, #12]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d102      	bne.n	800b09e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b098:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b09c:	e02c      	b.n	800b0f8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b0a2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d0ef      	beq.n	800b08e <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b0ae:	68bb      	ldr	r3, [r7, #8]
 800b0b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d1ea      	bne.n	800b08e <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b0bc:	f003 0304 	and.w	r3, r3, #4
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d004      	beq.n	800b0ce <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2204      	movs	r2, #4
 800b0c8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b0ca:	2304      	movs	r3, #4
 800b0cc:	e014      	b.n	800b0f8 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b0d2:	f003 0301 	and.w	r3, r3, #1
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d004      	beq.n	800b0e4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	2201      	movs	r2, #1
 800b0de:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b0e0:	2301      	movs	r3, #1
 800b0e2:	e009      	b.n	800b0f8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b0e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d002      	beq.n	800b0f6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	2240      	movs	r2, #64	@ 0x40
 800b0f4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800b0f6:	2300      	movs	r3, #0

}
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	3714      	adds	r7, #20
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b102:	4770      	bx	lr
 800b104:	24000000 	.word	0x24000000
 800b108:	10624dd3 	.word	0x10624dd3

0800b10c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800b10c:	b480      	push	{r7}
 800b10e:	b085      	sub	sp, #20
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b114:	4b11      	ldr	r3, [pc, #68]	@ (800b15c <SDMMC_GetCmdError+0x50>)
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	4a11      	ldr	r2, [pc, #68]	@ (800b160 <SDMMC_GetCmdError+0x54>)
 800b11a:	fba2 2303 	umull	r2, r3, r2, r3
 800b11e:	0a5b      	lsrs	r3, r3, #9
 800b120:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b124:	fb02 f303 	mul.w	r3, r2, r3
 800b128:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	1e5a      	subs	r2, r3, #1
 800b12e:	60fa      	str	r2, [r7, #12]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d102      	bne.n	800b13a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b134:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b138:	e009      	b.n	800b14e <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b13e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b142:	2b00      	cmp	r3, #0
 800b144:	d0f1      	beq.n	800b12a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	4a06      	ldr	r2, [pc, #24]	@ (800b164 <SDMMC_GetCmdError+0x58>)
 800b14a:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800b14c:	2300      	movs	r3, #0
}
 800b14e:	4618      	mov	r0, r3
 800b150:	3714      	adds	r7, #20
 800b152:	46bd      	mov	sp, r7
 800b154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b158:	4770      	bx	lr
 800b15a:	bf00      	nop
 800b15c:	24000000 	.word	0x24000000
 800b160:	10624dd3 	.word	0x10624dd3
 800b164:	002000c5 	.word	0x002000c5

0800b168 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800b16c:	4904      	ldr	r1, [pc, #16]	@ (800b180 <MX_FATFS_Init+0x18>)
 800b16e:	4805      	ldr	r0, [pc, #20]	@ (800b184 <MX_FATFS_Init+0x1c>)
 800b170:	f003 f80c 	bl	800e18c <FATFS_LinkDriver>
 800b174:	4603      	mov	r3, r0
 800b176:	461a      	mov	r2, r3
 800b178:	4b03      	ldr	r3, [pc, #12]	@ (800b188 <MX_FATFS_Init+0x20>)
 800b17a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b17c:	bf00      	nop
 800b17e:	bd80      	pop	{r7, pc}
 800b180:	24000798 	.word	0x24000798
 800b184:	0800f744 	.word	0x0800f744
 800b188:	24000794 	.word	0x24000794

0800b18c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800b18c:	b480      	push	{r7}
 800b18e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800b190:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800b192:	4618      	mov	r0, r3
 800b194:	46bd      	mov	sp, r7
 800b196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19a:	4770      	bx	lr

0800b19c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b082      	sub	sp, #8
 800b1a0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800b1a6:	f000 f885 	bl	800b2b4 <BSP_SD_IsDetected>
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	2b01      	cmp	r3, #1
 800b1ae:	d001      	beq.n	800b1b4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800b1b0:	2302      	movs	r3, #2
 800b1b2:	e012      	b.n	800b1da <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800b1b4:	480b      	ldr	r0, [pc, #44]	@ (800b1e4 <BSP_SD_Init+0x48>)
 800b1b6:	f7fb f907 	bl	80063c8 <HAL_SD_Init>
 800b1ba:	4603      	mov	r3, r0
 800b1bc:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800b1be:	79fb      	ldrb	r3, [r7, #7]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d109      	bne.n	800b1d8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800b1c4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800b1c8:	4806      	ldr	r0, [pc, #24]	@ (800b1e4 <BSP_SD_Init+0x48>)
 800b1ca:	f7fb ffbd 	bl	8007148 <HAL_SD_ConfigWideBusOperation>
 800b1ce:	4603      	mov	r3, r0
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d001      	beq.n	800b1d8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800b1d4:	2301      	movs	r3, #1
 800b1d6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800b1d8:	79fb      	ldrb	r3, [r7, #7]
}
 800b1da:	4618      	mov	r0, r3
 800b1dc:	3708      	adds	r7, #8
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	bd80      	pop	{r7, pc}
 800b1e2:	bf00      	nop
 800b1e4:	24000508 	.word	0x24000508

0800b1e8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b086      	sub	sp, #24
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	60f8      	str	r0, [r7, #12]
 800b1f0:	60b9      	str	r1, [r7, #8]
 800b1f2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	68ba      	ldr	r2, [r7, #8]
 800b1fc:	68f9      	ldr	r1, [r7, #12]
 800b1fe:	4806      	ldr	r0, [pc, #24]	@ (800b218 <BSP_SD_ReadBlocks_DMA+0x30>)
 800b200:	f7fb fa02 	bl	8006608 <HAL_SD_ReadBlocks_DMA>
 800b204:	4603      	mov	r3, r0
 800b206:	2b00      	cmp	r3, #0
 800b208:	d001      	beq.n	800b20e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b20a:	2301      	movs	r3, #1
 800b20c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b20e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b210:	4618      	mov	r0, r3
 800b212:	3718      	adds	r7, #24
 800b214:	46bd      	mov	sp, r7
 800b216:	bd80      	pop	{r7, pc}
 800b218:	24000508 	.word	0x24000508

0800b21c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b086      	sub	sp, #24
 800b220:	af00      	add	r7, sp, #0
 800b222:	60f8      	str	r0, [r7, #12]
 800b224:	60b9      	str	r1, [r7, #8]
 800b226:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b228:	2300      	movs	r3, #0
 800b22a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	68ba      	ldr	r2, [r7, #8]
 800b230:	68f9      	ldr	r1, [r7, #12]
 800b232:	4806      	ldr	r0, [pc, #24]	@ (800b24c <BSP_SD_WriteBlocks_DMA+0x30>)
 800b234:	f7fb fa90 	bl	8006758 <HAL_SD_WriteBlocks_DMA>
 800b238:	4603      	mov	r3, r0
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d001      	beq.n	800b242 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b23e:	2301      	movs	r3, #1
 800b240:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b242:	7dfb      	ldrb	r3, [r7, #23]
}
 800b244:	4618      	mov	r0, r3
 800b246:	3718      	adds	r7, #24
 800b248:	46bd      	mov	sp, r7
 800b24a:	bd80      	pop	{r7, pc}
 800b24c:	24000508 	.word	0x24000508

0800b250 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800b254:	4805      	ldr	r0, [pc, #20]	@ (800b26c <BSP_SD_GetCardState+0x1c>)
 800b256:	f7fc f889 	bl	800736c <HAL_SD_GetCardState>
 800b25a:	4603      	mov	r3, r0
 800b25c:	2b04      	cmp	r3, #4
 800b25e:	bf14      	ite	ne
 800b260:	2301      	movne	r3, #1
 800b262:	2300      	moveq	r3, #0
 800b264:	b2db      	uxtb	r3, r3
}
 800b266:	4618      	mov	r0, r3
 800b268:	bd80      	pop	{r7, pc}
 800b26a:	bf00      	nop
 800b26c:	24000508 	.word	0x24000508

0800b270 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b082      	sub	sp, #8
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800b278:	6879      	ldr	r1, [r7, #4]
 800b27a:	4803      	ldr	r0, [pc, #12]	@ (800b288 <BSP_SD_GetCardInfo+0x18>)
 800b27c:	f7fb ff38 	bl	80070f0 <HAL_SD_GetCardInfo>
}
 800b280:	bf00      	nop
 800b282:	3708      	adds	r7, #8
 800b284:	46bd      	mov	sp, r7
 800b286:	bd80      	pop	{r7, pc}
 800b288:	24000508 	.word	0x24000508

0800b28c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b082      	sub	sp, #8
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800b294:	f000 f984 	bl	800b5a0 <BSP_SD_WriteCpltCallback>
}
 800b298:	bf00      	nop
 800b29a:	3708      	adds	r7, #8
 800b29c:	46bd      	mov	sp, r7
 800b29e:	bd80      	pop	{r7, pc}

0800b2a0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b082      	sub	sp, #8
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800b2a8:	f000 f986 	bl	800b5b8 <BSP_SD_ReadCpltCallback>
}
 800b2ac:	bf00      	nop
 800b2ae:	3708      	adds	r7, #8
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	bd80      	pop	{r7, pc}

0800b2b4 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800b2b4:	b480      	push	{r7}
 800b2b6:	b083      	sub	sp, #12
 800b2b8:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800b2ba:	2301      	movs	r3, #1
 800b2bc:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 800b2be:	79fb      	ldrb	r3, [r7, #7]
 800b2c0:	b2db      	uxtb	r3, r3
}
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	370c      	adds	r7, #12
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2cc:	4770      	bx	lr

0800b2ce <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800b2ce:	b580      	push	{r7, lr}
 800b2d0:	b084      	sub	sp, #16
 800b2d2:	af00      	add	r7, sp, #0
 800b2d4:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800b2d6:	f7f6 fa63 	bl	80017a0 <HAL_GetTick>
 800b2da:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800b2dc:	e006      	b.n	800b2ec <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b2de:	f7ff ffb7 	bl	800b250 <BSP_SD_GetCardState>
 800b2e2:	4603      	mov	r3, r0
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d101      	bne.n	800b2ec <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	e009      	b.n	800b300 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800b2ec:	f7f6 fa58 	bl	80017a0 <HAL_GetTick>
 800b2f0:	4602      	mov	r2, r0
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	1ad3      	subs	r3, r2, r3
 800b2f6:	687a      	ldr	r2, [r7, #4]
 800b2f8:	429a      	cmp	r2, r3
 800b2fa:	d8f0      	bhi.n	800b2de <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800b2fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800b300:	4618      	mov	r0, r3
 800b302:	3710      	adds	r7, #16
 800b304:	46bd      	mov	sp, r7
 800b306:	bd80      	pop	{r7, pc}

0800b308 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b082      	sub	sp, #8
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	4603      	mov	r3, r0
 800b310:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b312:	4b0b      	ldr	r3, [pc, #44]	@ (800b340 <SD_CheckStatus+0x38>)
 800b314:	2201      	movs	r2, #1
 800b316:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800b318:	f7ff ff9a 	bl	800b250 <BSP_SD_GetCardState>
 800b31c:	4603      	mov	r3, r0
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d107      	bne.n	800b332 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b322:	4b07      	ldr	r3, [pc, #28]	@ (800b340 <SD_CheckStatus+0x38>)
 800b324:	781b      	ldrb	r3, [r3, #0]
 800b326:	b2db      	uxtb	r3, r3
 800b328:	f023 0301 	bic.w	r3, r3, #1
 800b32c:	b2da      	uxtb	r2, r3
 800b32e:	4b04      	ldr	r3, [pc, #16]	@ (800b340 <SD_CheckStatus+0x38>)
 800b330:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b332:	4b03      	ldr	r3, [pc, #12]	@ (800b340 <SD_CheckStatus+0x38>)
 800b334:	781b      	ldrb	r3, [r3, #0]
 800b336:	b2db      	uxtb	r3, r3
}
 800b338:	4618      	mov	r0, r3
 800b33a:	3708      	adds	r7, #8
 800b33c:	46bd      	mov	sp, r7
 800b33e:	bd80      	pop	{r7, pc}
 800b340:	2400000d 	.word	0x2400000d

0800b344 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b344:	b580      	push	{r7, lr}
 800b346:	b082      	sub	sp, #8
 800b348:	af00      	add	r7, sp, #0
 800b34a:	4603      	mov	r3, r0
 800b34c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800b34e:	f7ff ff25 	bl	800b19c <BSP_SD_Init>
 800b352:	4603      	mov	r3, r0
 800b354:	2b00      	cmp	r3, #0
 800b356:	d107      	bne.n	800b368 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800b358:	79fb      	ldrb	r3, [r7, #7]
 800b35a:	4618      	mov	r0, r3
 800b35c:	f7ff ffd4 	bl	800b308 <SD_CheckStatus>
 800b360:	4603      	mov	r3, r0
 800b362:	461a      	mov	r2, r3
 800b364:	4b04      	ldr	r3, [pc, #16]	@ (800b378 <SD_initialize+0x34>)
 800b366:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800b368:	4b03      	ldr	r3, [pc, #12]	@ (800b378 <SD_initialize+0x34>)
 800b36a:	781b      	ldrb	r3, [r3, #0]
 800b36c:	b2db      	uxtb	r3, r3
}
 800b36e:	4618      	mov	r0, r3
 800b370:	3708      	adds	r7, #8
 800b372:	46bd      	mov	sp, r7
 800b374:	bd80      	pop	{r7, pc}
 800b376:	bf00      	nop
 800b378:	2400000d 	.word	0x2400000d

0800b37c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b082      	sub	sp, #8
 800b380:	af00      	add	r7, sp, #0
 800b382:	4603      	mov	r3, r0
 800b384:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b386:	79fb      	ldrb	r3, [r7, #7]
 800b388:	4618      	mov	r0, r3
 800b38a:	f7ff ffbd 	bl	800b308 <SD_CheckStatus>
 800b38e:	4603      	mov	r3, r0
}
 800b390:	4618      	mov	r0, r3
 800b392:	3708      	adds	r7, #8
 800b394:	46bd      	mov	sp, r7
 800b396:	bd80      	pop	{r7, pc}

0800b398 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b086      	sub	sp, #24
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	60b9      	str	r1, [r7, #8]
 800b3a0:	607a      	str	r2, [r7, #4]
 800b3a2:	603b      	str	r3, [r7, #0]
 800b3a4:	4603      	mov	r3, r0
 800b3a6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b3a8:	2301      	movs	r3, #1
 800b3aa:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b3ac:	f247 5030 	movw	r0, #30000	@ 0x7530
 800b3b0:	f7ff ff8d 	bl	800b2ce <SD_CheckStatusWithTimeout>
 800b3b4:	4603      	mov	r3, r0
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	da01      	bge.n	800b3be <SD_read+0x26>
  {
    return res;
 800b3ba:	7dfb      	ldrb	r3, [r7, #23]
 800b3bc:	e03b      	b.n	800b436 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800b3be:	683a      	ldr	r2, [r7, #0]
 800b3c0:	6879      	ldr	r1, [r7, #4]
 800b3c2:	68b8      	ldr	r0, [r7, #8]
 800b3c4:	f7ff ff10 	bl	800b1e8 <BSP_SD_ReadBlocks_DMA>
 800b3c8:	4603      	mov	r3, r0
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d132      	bne.n	800b434 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800b3ce:	4b1c      	ldr	r3, [pc, #112]	@ (800b440 <SD_read+0xa8>)
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800b3d4:	f7f6 f9e4 	bl	80017a0 <HAL_GetTick>
 800b3d8:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800b3da:	bf00      	nop
 800b3dc:	4b18      	ldr	r3, [pc, #96]	@ (800b440 <SD_read+0xa8>)
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d108      	bne.n	800b3f6 <SD_read+0x5e>
 800b3e4:	f7f6 f9dc 	bl	80017a0 <HAL_GetTick>
 800b3e8:	4602      	mov	r2, r0
 800b3ea:	693b      	ldr	r3, [r7, #16]
 800b3ec:	1ad3      	subs	r3, r2, r3
 800b3ee:	f247 522f 	movw	r2, #29999	@ 0x752f
 800b3f2:	4293      	cmp	r3, r2
 800b3f4:	d9f2      	bls.n	800b3dc <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800b3f6:	4b12      	ldr	r3, [pc, #72]	@ (800b440 <SD_read+0xa8>)
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d102      	bne.n	800b404 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800b3fe:	2301      	movs	r3, #1
 800b400:	75fb      	strb	r3, [r7, #23]
 800b402:	e017      	b.n	800b434 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800b404:	4b0e      	ldr	r3, [pc, #56]	@ (800b440 <SD_read+0xa8>)
 800b406:	2200      	movs	r2, #0
 800b408:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800b40a:	f7f6 f9c9 	bl	80017a0 <HAL_GetTick>
 800b40e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b410:	e007      	b.n	800b422 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b412:	f7ff ff1d 	bl	800b250 <BSP_SD_GetCardState>
 800b416:	4603      	mov	r3, r0
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d102      	bne.n	800b422 <SD_read+0x8a>
          {
            res = RES_OK;
 800b41c:	2300      	movs	r3, #0
 800b41e:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800b420:	e008      	b.n	800b434 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b422:	f7f6 f9bd 	bl	80017a0 <HAL_GetTick>
 800b426:	4602      	mov	r2, r0
 800b428:	693b      	ldr	r3, [r7, #16]
 800b42a:	1ad3      	subs	r3, r2, r3
 800b42c:	f247 522f 	movw	r2, #29999	@ 0x752f
 800b430:	4293      	cmp	r3, r2
 800b432:	d9ee      	bls.n	800b412 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800b434:	7dfb      	ldrb	r3, [r7, #23]
}
 800b436:	4618      	mov	r0, r3
 800b438:	3718      	adds	r7, #24
 800b43a:	46bd      	mov	sp, r7
 800b43c:	bd80      	pop	{r7, pc}
 800b43e:	bf00      	nop
 800b440:	240007a0 	.word	0x240007a0

0800b444 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b086      	sub	sp, #24
 800b448:	af00      	add	r7, sp, #0
 800b44a:	60b9      	str	r1, [r7, #8]
 800b44c:	607a      	str	r2, [r7, #4]
 800b44e:	603b      	str	r3, [r7, #0]
 800b450:	4603      	mov	r3, r0
 800b452:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b454:	2301      	movs	r3, #1
 800b456:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800b458:	4b24      	ldr	r3, [pc, #144]	@ (800b4ec <SD_write+0xa8>)
 800b45a:	2200      	movs	r2, #0
 800b45c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b45e:	f247 5030 	movw	r0, #30000	@ 0x7530
 800b462:	f7ff ff34 	bl	800b2ce <SD_CheckStatusWithTimeout>
 800b466:	4603      	mov	r3, r0
 800b468:	2b00      	cmp	r3, #0
 800b46a:	da01      	bge.n	800b470 <SD_write+0x2c>
  {
    return res;
 800b46c:	7dfb      	ldrb	r3, [r7, #23]
 800b46e:	e038      	b.n	800b4e2 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800b470:	683a      	ldr	r2, [r7, #0]
 800b472:	6879      	ldr	r1, [r7, #4]
 800b474:	68b8      	ldr	r0, [r7, #8]
 800b476:	f7ff fed1 	bl	800b21c <BSP_SD_WriteBlocks_DMA>
 800b47a:	4603      	mov	r3, r0
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d12f      	bne.n	800b4e0 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800b480:	f7f6 f98e 	bl	80017a0 <HAL_GetTick>
 800b484:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800b486:	bf00      	nop
 800b488:	4b18      	ldr	r3, [pc, #96]	@ (800b4ec <SD_write+0xa8>)
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d108      	bne.n	800b4a2 <SD_write+0x5e>
 800b490:	f7f6 f986 	bl	80017a0 <HAL_GetTick>
 800b494:	4602      	mov	r2, r0
 800b496:	693b      	ldr	r3, [r7, #16]
 800b498:	1ad3      	subs	r3, r2, r3
 800b49a:	f247 522f 	movw	r2, #29999	@ 0x752f
 800b49e:	4293      	cmp	r3, r2
 800b4a0:	d9f2      	bls.n	800b488 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800b4a2:	4b12      	ldr	r3, [pc, #72]	@ (800b4ec <SD_write+0xa8>)
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d102      	bne.n	800b4b0 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800b4aa:	2301      	movs	r3, #1
 800b4ac:	75fb      	strb	r3, [r7, #23]
 800b4ae:	e017      	b.n	800b4e0 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800b4b0:	4b0e      	ldr	r3, [pc, #56]	@ (800b4ec <SD_write+0xa8>)
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800b4b6:	f7f6 f973 	bl	80017a0 <HAL_GetTick>
 800b4ba:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b4bc:	e007      	b.n	800b4ce <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b4be:	f7ff fec7 	bl	800b250 <BSP_SD_GetCardState>
 800b4c2:	4603      	mov	r3, r0
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d102      	bne.n	800b4ce <SD_write+0x8a>
          {
            res = RES_OK;
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	75fb      	strb	r3, [r7, #23]
            break;
 800b4cc:	e008      	b.n	800b4e0 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b4ce:	f7f6 f967 	bl	80017a0 <HAL_GetTick>
 800b4d2:	4602      	mov	r2, r0
 800b4d4:	693b      	ldr	r3, [r7, #16]
 800b4d6:	1ad3      	subs	r3, r2, r3
 800b4d8:	f247 522f 	movw	r2, #29999	@ 0x752f
 800b4dc:	4293      	cmp	r3, r2
 800b4de:	d9ee      	bls.n	800b4be <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800b4e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	3718      	adds	r7, #24
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}
 800b4ea:	bf00      	nop
 800b4ec:	2400079c 	.word	0x2400079c

0800b4f0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b08c      	sub	sp, #48	@ 0x30
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	603a      	str	r2, [r7, #0]
 800b4fa:	71fb      	strb	r3, [r7, #7]
 800b4fc:	460b      	mov	r3, r1
 800b4fe:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b500:	2301      	movs	r3, #1
 800b502:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b506:	4b25      	ldr	r3, [pc, #148]	@ (800b59c <SD_ioctl+0xac>)
 800b508:	781b      	ldrb	r3, [r3, #0]
 800b50a:	b2db      	uxtb	r3, r3
 800b50c:	f003 0301 	and.w	r3, r3, #1
 800b510:	2b00      	cmp	r3, #0
 800b512:	d001      	beq.n	800b518 <SD_ioctl+0x28>
 800b514:	2303      	movs	r3, #3
 800b516:	e03c      	b.n	800b592 <SD_ioctl+0xa2>

  switch (cmd)
 800b518:	79bb      	ldrb	r3, [r7, #6]
 800b51a:	2b03      	cmp	r3, #3
 800b51c:	d834      	bhi.n	800b588 <SD_ioctl+0x98>
 800b51e:	a201      	add	r2, pc, #4	@ (adr r2, 800b524 <SD_ioctl+0x34>)
 800b520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b524:	0800b535 	.word	0x0800b535
 800b528:	0800b53d 	.word	0x0800b53d
 800b52c:	0800b555 	.word	0x0800b555
 800b530:	0800b56f 	.word	0x0800b56f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b534:	2300      	movs	r3, #0
 800b536:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b53a:	e028      	b.n	800b58e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b53c:	f107 0308 	add.w	r3, r7, #8
 800b540:	4618      	mov	r0, r3
 800b542:	f7ff fe95 	bl	800b270 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b546:	6a3a      	ldr	r2, [r7, #32]
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b54c:	2300      	movs	r3, #0
 800b54e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b552:	e01c      	b.n	800b58e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b554:	f107 0308 	add.w	r3, r7, #8
 800b558:	4618      	mov	r0, r3
 800b55a:	f7ff fe89 	bl	800b270 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b55e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b560:	b29a      	uxth	r2, r3
 800b562:	683b      	ldr	r3, [r7, #0]
 800b564:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b566:	2300      	movs	r3, #0
 800b568:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b56c:	e00f      	b.n	800b58e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b56e:	f107 0308 	add.w	r3, r7, #8
 800b572:	4618      	mov	r0, r3
 800b574:	f7ff fe7c 	bl	800b270 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b57a:	0a5a      	lsrs	r2, r3, #9
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b580:	2300      	movs	r3, #0
 800b582:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b586:	e002      	b.n	800b58e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b588:	2304      	movs	r3, #4
 800b58a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800b58e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800b592:	4618      	mov	r0, r3
 800b594:	3730      	adds	r7, #48	@ 0x30
 800b596:	46bd      	mov	sp, r7
 800b598:	bd80      	pop	{r7, pc}
 800b59a:	bf00      	nop
 800b59c:	2400000d 	.word	0x2400000d

0800b5a0 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800b5a0:	b480      	push	{r7}
 800b5a2:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800b5a4:	4b03      	ldr	r3, [pc, #12]	@ (800b5b4 <BSP_SD_WriteCpltCallback+0x14>)
 800b5a6:	2201      	movs	r2, #1
 800b5a8:	601a      	str	r2, [r3, #0]
}
 800b5aa:	bf00      	nop
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b2:	4770      	bx	lr
 800b5b4:	2400079c 	.word	0x2400079c

0800b5b8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800b5b8:	b480      	push	{r7}
 800b5ba:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800b5bc:	4b03      	ldr	r3, [pc, #12]	@ (800b5cc <BSP_SD_ReadCpltCallback+0x14>)
 800b5be:	2201      	movs	r2, #1
 800b5c0:	601a      	str	r2, [r3, #0]
}
 800b5c2:	bf00      	nop
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ca:	4770      	bx	lr
 800b5cc:	240007a0 	.word	0x240007a0

0800b5d0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b084      	sub	sp, #16
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b5da:	79fb      	ldrb	r3, [r7, #7]
 800b5dc:	4a08      	ldr	r2, [pc, #32]	@ (800b600 <disk_status+0x30>)
 800b5de:	009b      	lsls	r3, r3, #2
 800b5e0:	4413      	add	r3, r2
 800b5e2:	685b      	ldr	r3, [r3, #4]
 800b5e4:	685b      	ldr	r3, [r3, #4]
 800b5e6:	79fa      	ldrb	r2, [r7, #7]
 800b5e8:	4905      	ldr	r1, [pc, #20]	@ (800b600 <disk_status+0x30>)
 800b5ea:	440a      	add	r2, r1
 800b5ec:	7a12      	ldrb	r2, [r2, #8]
 800b5ee:	4610      	mov	r0, r2
 800b5f0:	4798      	blx	r3
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b5f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	3710      	adds	r7, #16
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	bd80      	pop	{r7, pc}
 800b600:	240007cc 	.word	0x240007cc

0800b604 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b084      	sub	sp, #16
 800b608:	af00      	add	r7, sp, #0
 800b60a:	4603      	mov	r3, r0
 800b60c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b60e:	2300      	movs	r3, #0
 800b610:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b612:	79fb      	ldrb	r3, [r7, #7]
 800b614:	4a0d      	ldr	r2, [pc, #52]	@ (800b64c <disk_initialize+0x48>)
 800b616:	5cd3      	ldrb	r3, [r2, r3]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d111      	bne.n	800b640 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b61c:	79fb      	ldrb	r3, [r7, #7]
 800b61e:	4a0b      	ldr	r2, [pc, #44]	@ (800b64c <disk_initialize+0x48>)
 800b620:	2101      	movs	r1, #1
 800b622:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b624:	79fb      	ldrb	r3, [r7, #7]
 800b626:	4a09      	ldr	r2, [pc, #36]	@ (800b64c <disk_initialize+0x48>)
 800b628:	009b      	lsls	r3, r3, #2
 800b62a:	4413      	add	r3, r2
 800b62c:	685b      	ldr	r3, [r3, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	79fa      	ldrb	r2, [r7, #7]
 800b632:	4906      	ldr	r1, [pc, #24]	@ (800b64c <disk_initialize+0x48>)
 800b634:	440a      	add	r2, r1
 800b636:	7a12      	ldrb	r2, [r2, #8]
 800b638:	4610      	mov	r0, r2
 800b63a:	4798      	blx	r3
 800b63c:	4603      	mov	r3, r0
 800b63e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b640:	7bfb      	ldrb	r3, [r7, #15]
}
 800b642:	4618      	mov	r0, r3
 800b644:	3710      	adds	r7, #16
 800b646:	46bd      	mov	sp, r7
 800b648:	bd80      	pop	{r7, pc}
 800b64a:	bf00      	nop
 800b64c:	240007cc 	.word	0x240007cc

0800b650 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b650:	b590      	push	{r4, r7, lr}
 800b652:	b087      	sub	sp, #28
 800b654:	af00      	add	r7, sp, #0
 800b656:	60b9      	str	r1, [r7, #8]
 800b658:	607a      	str	r2, [r7, #4]
 800b65a:	603b      	str	r3, [r7, #0]
 800b65c:	4603      	mov	r3, r0
 800b65e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b660:	7bfb      	ldrb	r3, [r7, #15]
 800b662:	4a0a      	ldr	r2, [pc, #40]	@ (800b68c <disk_read+0x3c>)
 800b664:	009b      	lsls	r3, r3, #2
 800b666:	4413      	add	r3, r2
 800b668:	685b      	ldr	r3, [r3, #4]
 800b66a:	689c      	ldr	r4, [r3, #8]
 800b66c:	7bfb      	ldrb	r3, [r7, #15]
 800b66e:	4a07      	ldr	r2, [pc, #28]	@ (800b68c <disk_read+0x3c>)
 800b670:	4413      	add	r3, r2
 800b672:	7a18      	ldrb	r0, [r3, #8]
 800b674:	683b      	ldr	r3, [r7, #0]
 800b676:	687a      	ldr	r2, [r7, #4]
 800b678:	68b9      	ldr	r1, [r7, #8]
 800b67a:	47a0      	blx	r4
 800b67c:	4603      	mov	r3, r0
 800b67e:	75fb      	strb	r3, [r7, #23]
  return res;
 800b680:	7dfb      	ldrb	r3, [r7, #23]
}
 800b682:	4618      	mov	r0, r3
 800b684:	371c      	adds	r7, #28
 800b686:	46bd      	mov	sp, r7
 800b688:	bd90      	pop	{r4, r7, pc}
 800b68a:	bf00      	nop
 800b68c:	240007cc 	.word	0x240007cc

0800b690 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b690:	b590      	push	{r4, r7, lr}
 800b692:	b087      	sub	sp, #28
 800b694:	af00      	add	r7, sp, #0
 800b696:	60b9      	str	r1, [r7, #8]
 800b698:	607a      	str	r2, [r7, #4]
 800b69a:	603b      	str	r3, [r7, #0]
 800b69c:	4603      	mov	r3, r0
 800b69e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b6a0:	7bfb      	ldrb	r3, [r7, #15]
 800b6a2:	4a0a      	ldr	r2, [pc, #40]	@ (800b6cc <disk_write+0x3c>)
 800b6a4:	009b      	lsls	r3, r3, #2
 800b6a6:	4413      	add	r3, r2
 800b6a8:	685b      	ldr	r3, [r3, #4]
 800b6aa:	68dc      	ldr	r4, [r3, #12]
 800b6ac:	7bfb      	ldrb	r3, [r7, #15]
 800b6ae:	4a07      	ldr	r2, [pc, #28]	@ (800b6cc <disk_write+0x3c>)
 800b6b0:	4413      	add	r3, r2
 800b6b2:	7a18      	ldrb	r0, [r3, #8]
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	687a      	ldr	r2, [r7, #4]
 800b6b8:	68b9      	ldr	r1, [r7, #8]
 800b6ba:	47a0      	blx	r4
 800b6bc:	4603      	mov	r3, r0
 800b6be:	75fb      	strb	r3, [r7, #23]
  return res;
 800b6c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	371c      	adds	r7, #28
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	bd90      	pop	{r4, r7, pc}
 800b6ca:	bf00      	nop
 800b6cc:	240007cc 	.word	0x240007cc

0800b6d0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b084      	sub	sp, #16
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	603a      	str	r2, [r7, #0]
 800b6da:	71fb      	strb	r3, [r7, #7]
 800b6dc:	460b      	mov	r3, r1
 800b6de:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b6e0:	79fb      	ldrb	r3, [r7, #7]
 800b6e2:	4a09      	ldr	r2, [pc, #36]	@ (800b708 <disk_ioctl+0x38>)
 800b6e4:	009b      	lsls	r3, r3, #2
 800b6e6:	4413      	add	r3, r2
 800b6e8:	685b      	ldr	r3, [r3, #4]
 800b6ea:	691b      	ldr	r3, [r3, #16]
 800b6ec:	79fa      	ldrb	r2, [r7, #7]
 800b6ee:	4906      	ldr	r1, [pc, #24]	@ (800b708 <disk_ioctl+0x38>)
 800b6f0:	440a      	add	r2, r1
 800b6f2:	7a10      	ldrb	r0, [r2, #8]
 800b6f4:	79b9      	ldrb	r1, [r7, #6]
 800b6f6:	683a      	ldr	r2, [r7, #0]
 800b6f8:	4798      	blx	r3
 800b6fa:	4603      	mov	r3, r0
 800b6fc:	73fb      	strb	r3, [r7, #15]
  return res;
 800b6fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800b700:	4618      	mov	r0, r3
 800b702:	3710      	adds	r7, #16
 800b704:	46bd      	mov	sp, r7
 800b706:	bd80      	pop	{r7, pc}
 800b708:	240007cc 	.word	0x240007cc

0800b70c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b70c:	b480      	push	{r7}
 800b70e:	b085      	sub	sp, #20
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	3301      	adds	r3, #1
 800b718:	781b      	ldrb	r3, [r3, #0]
 800b71a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b71c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b720:	021b      	lsls	r3, r3, #8
 800b722:	b21a      	sxth	r2, r3
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	781b      	ldrb	r3, [r3, #0]
 800b728:	b21b      	sxth	r3, r3
 800b72a:	4313      	orrs	r3, r2
 800b72c:	b21b      	sxth	r3, r3
 800b72e:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b730:	89fb      	ldrh	r3, [r7, #14]
}
 800b732:	4618      	mov	r0, r3
 800b734:	3714      	adds	r7, #20
 800b736:	46bd      	mov	sp, r7
 800b738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73c:	4770      	bx	lr

0800b73e <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b73e:	b480      	push	{r7}
 800b740:	b085      	sub	sp, #20
 800b742:	af00      	add	r7, sp, #0
 800b744:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	3303      	adds	r3, #3
 800b74a:	781b      	ldrb	r3, [r3, #0]
 800b74c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	021b      	lsls	r3, r3, #8
 800b752:	687a      	ldr	r2, [r7, #4]
 800b754:	3202      	adds	r2, #2
 800b756:	7812      	ldrb	r2, [r2, #0]
 800b758:	4313      	orrs	r3, r2
 800b75a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	021b      	lsls	r3, r3, #8
 800b760:	687a      	ldr	r2, [r7, #4]
 800b762:	3201      	adds	r2, #1
 800b764:	7812      	ldrb	r2, [r2, #0]
 800b766:	4313      	orrs	r3, r2
 800b768:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	021b      	lsls	r3, r3, #8
 800b76e:	687a      	ldr	r2, [r7, #4]
 800b770:	7812      	ldrb	r2, [r2, #0]
 800b772:	4313      	orrs	r3, r2
 800b774:	60fb      	str	r3, [r7, #12]
	return rv;
 800b776:	68fb      	ldr	r3, [r7, #12]
}
 800b778:	4618      	mov	r0, r3
 800b77a:	3714      	adds	r7, #20
 800b77c:	46bd      	mov	sp, r7
 800b77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b782:	4770      	bx	lr

0800b784 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b784:	b480      	push	{r7}
 800b786:	b083      	sub	sp, #12
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
 800b78c:	460b      	mov	r3, r1
 800b78e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	1c5a      	adds	r2, r3, #1
 800b794:	607a      	str	r2, [r7, #4]
 800b796:	887a      	ldrh	r2, [r7, #2]
 800b798:	b2d2      	uxtb	r2, r2
 800b79a:	701a      	strb	r2, [r3, #0]
 800b79c:	887b      	ldrh	r3, [r7, #2]
 800b79e:	0a1b      	lsrs	r3, r3, #8
 800b7a0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	1c5a      	adds	r2, r3, #1
 800b7a6:	607a      	str	r2, [r7, #4]
 800b7a8:	887a      	ldrh	r2, [r7, #2]
 800b7aa:	b2d2      	uxtb	r2, r2
 800b7ac:	701a      	strb	r2, [r3, #0]
}
 800b7ae:	bf00      	nop
 800b7b0:	370c      	adds	r7, #12
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b8:	4770      	bx	lr

0800b7ba <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b7ba:	b480      	push	{r7}
 800b7bc:	b083      	sub	sp, #12
 800b7be:	af00      	add	r7, sp, #0
 800b7c0:	6078      	str	r0, [r7, #4]
 800b7c2:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	1c5a      	adds	r2, r3, #1
 800b7c8:	607a      	str	r2, [r7, #4]
 800b7ca:	683a      	ldr	r2, [r7, #0]
 800b7cc:	b2d2      	uxtb	r2, r2
 800b7ce:	701a      	strb	r2, [r3, #0]
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	0a1b      	lsrs	r3, r3, #8
 800b7d4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	1c5a      	adds	r2, r3, #1
 800b7da:	607a      	str	r2, [r7, #4]
 800b7dc:	683a      	ldr	r2, [r7, #0]
 800b7de:	b2d2      	uxtb	r2, r2
 800b7e0:	701a      	strb	r2, [r3, #0]
 800b7e2:	683b      	ldr	r3, [r7, #0]
 800b7e4:	0a1b      	lsrs	r3, r3, #8
 800b7e6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	1c5a      	adds	r2, r3, #1
 800b7ec:	607a      	str	r2, [r7, #4]
 800b7ee:	683a      	ldr	r2, [r7, #0]
 800b7f0:	b2d2      	uxtb	r2, r2
 800b7f2:	701a      	strb	r2, [r3, #0]
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	0a1b      	lsrs	r3, r3, #8
 800b7f8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	1c5a      	adds	r2, r3, #1
 800b7fe:	607a      	str	r2, [r7, #4]
 800b800:	683a      	ldr	r2, [r7, #0]
 800b802:	b2d2      	uxtb	r2, r2
 800b804:	701a      	strb	r2, [r3, #0]
}
 800b806:	bf00      	nop
 800b808:	370c      	adds	r7, #12
 800b80a:	46bd      	mov	sp, r7
 800b80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b810:	4770      	bx	lr

0800b812 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b812:	b480      	push	{r7}
 800b814:	b087      	sub	sp, #28
 800b816:	af00      	add	r7, sp, #0
 800b818:	60f8      	str	r0, [r7, #12]
 800b81a:	60b9      	str	r1, [r7, #8]
 800b81c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b822:	68bb      	ldr	r3, [r7, #8]
 800b824:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d00d      	beq.n	800b848 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b82c:	693a      	ldr	r2, [r7, #16]
 800b82e:	1c53      	adds	r3, r2, #1
 800b830:	613b      	str	r3, [r7, #16]
 800b832:	697b      	ldr	r3, [r7, #20]
 800b834:	1c59      	adds	r1, r3, #1
 800b836:	6179      	str	r1, [r7, #20]
 800b838:	7812      	ldrb	r2, [r2, #0]
 800b83a:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	3b01      	subs	r3, #1
 800b840:	607b      	str	r3, [r7, #4]
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d1f1      	bne.n	800b82c <mem_cpy+0x1a>
	}
}
 800b848:	bf00      	nop
 800b84a:	371c      	adds	r7, #28
 800b84c:	46bd      	mov	sp, r7
 800b84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b852:	4770      	bx	lr

0800b854 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b854:	b480      	push	{r7}
 800b856:	b087      	sub	sp, #28
 800b858:	af00      	add	r7, sp, #0
 800b85a:	60f8      	str	r0, [r7, #12]
 800b85c:	60b9      	str	r1, [r7, #8]
 800b85e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b864:	697b      	ldr	r3, [r7, #20]
 800b866:	1c5a      	adds	r2, r3, #1
 800b868:	617a      	str	r2, [r7, #20]
 800b86a:	68ba      	ldr	r2, [r7, #8]
 800b86c:	b2d2      	uxtb	r2, r2
 800b86e:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	3b01      	subs	r3, #1
 800b874:	607b      	str	r3, [r7, #4]
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d1f3      	bne.n	800b864 <mem_set+0x10>
}
 800b87c:	bf00      	nop
 800b87e:	bf00      	nop
 800b880:	371c      	adds	r7, #28
 800b882:	46bd      	mov	sp, r7
 800b884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b888:	4770      	bx	lr

0800b88a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b88a:	b480      	push	{r7}
 800b88c:	b089      	sub	sp, #36	@ 0x24
 800b88e:	af00      	add	r7, sp, #0
 800b890:	60f8      	str	r0, [r7, #12]
 800b892:	60b9      	str	r1, [r7, #8]
 800b894:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	61fb      	str	r3, [r7, #28]
 800b89a:	68bb      	ldr	r3, [r7, #8]
 800b89c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b89e:	2300      	movs	r3, #0
 800b8a0:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b8a2:	69fb      	ldr	r3, [r7, #28]
 800b8a4:	1c5a      	adds	r2, r3, #1
 800b8a6:	61fa      	str	r2, [r7, #28]
 800b8a8:	781b      	ldrb	r3, [r3, #0]
 800b8aa:	4619      	mov	r1, r3
 800b8ac:	69bb      	ldr	r3, [r7, #24]
 800b8ae:	1c5a      	adds	r2, r3, #1
 800b8b0:	61ba      	str	r2, [r7, #24]
 800b8b2:	781b      	ldrb	r3, [r3, #0]
 800b8b4:	1acb      	subs	r3, r1, r3
 800b8b6:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	3b01      	subs	r3, #1
 800b8bc:	607b      	str	r3, [r7, #4]
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d002      	beq.n	800b8ca <mem_cmp+0x40>
 800b8c4:	697b      	ldr	r3, [r7, #20]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d0eb      	beq.n	800b8a2 <mem_cmp+0x18>

	return r;
 800b8ca:	697b      	ldr	r3, [r7, #20]
}
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	3724      	adds	r7, #36	@ 0x24
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d6:	4770      	bx	lr

0800b8d8 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b8d8:	b480      	push	{r7}
 800b8da:	b083      	sub	sp, #12
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
 800b8e0:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b8e2:	e002      	b.n	800b8ea <chk_chr+0x12>
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	3301      	adds	r3, #1
 800b8e8:	607b      	str	r3, [r7, #4]
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	781b      	ldrb	r3, [r3, #0]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d005      	beq.n	800b8fe <chk_chr+0x26>
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	781b      	ldrb	r3, [r3, #0]
 800b8f6:	461a      	mov	r2, r3
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	4293      	cmp	r3, r2
 800b8fc:	d1f2      	bne.n	800b8e4 <chk_chr+0xc>
	return *str;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	781b      	ldrb	r3, [r3, #0]
}
 800b902:	4618      	mov	r0, r3
 800b904:	370c      	adds	r7, #12
 800b906:	46bd      	mov	sp, r7
 800b908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90c:	4770      	bx	lr
	...

0800b910 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b910:	b480      	push	{r7}
 800b912:	b085      	sub	sp, #20
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
 800b918:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b91a:	2300      	movs	r3, #0
 800b91c:	60bb      	str	r3, [r7, #8]
 800b91e:	68bb      	ldr	r3, [r7, #8]
 800b920:	60fb      	str	r3, [r7, #12]
 800b922:	e029      	b.n	800b978 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b924:	4a27      	ldr	r2, [pc, #156]	@ (800b9c4 <chk_lock+0xb4>)
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	011b      	lsls	r3, r3, #4
 800b92a:	4413      	add	r3, r2
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d01d      	beq.n	800b96e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b932:	4a24      	ldr	r2, [pc, #144]	@ (800b9c4 <chk_lock+0xb4>)
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	011b      	lsls	r3, r3, #4
 800b938:	4413      	add	r3, r2
 800b93a:	681a      	ldr	r2, [r3, #0]
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	429a      	cmp	r2, r3
 800b942:	d116      	bne.n	800b972 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b944:	4a1f      	ldr	r2, [pc, #124]	@ (800b9c4 <chk_lock+0xb4>)
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	011b      	lsls	r3, r3, #4
 800b94a:	4413      	add	r3, r2
 800b94c:	3304      	adds	r3, #4
 800b94e:	681a      	ldr	r2, [r3, #0]
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b954:	429a      	cmp	r2, r3
 800b956:	d10c      	bne.n	800b972 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b958:	4a1a      	ldr	r2, [pc, #104]	@ (800b9c4 <chk_lock+0xb4>)
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	011b      	lsls	r3, r3, #4
 800b95e:	4413      	add	r3, r2
 800b960:	3308      	adds	r3, #8
 800b962:	681a      	ldr	r2, [r3, #0]
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b968:	429a      	cmp	r2, r3
 800b96a:	d102      	bne.n	800b972 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b96c:	e007      	b.n	800b97e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b96e:	2301      	movs	r3, #1
 800b970:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	3301      	adds	r3, #1
 800b976:	60fb      	str	r3, [r7, #12]
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	2b01      	cmp	r3, #1
 800b97c:	d9d2      	bls.n	800b924 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	2b02      	cmp	r3, #2
 800b982:	d109      	bne.n	800b998 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b984:	68bb      	ldr	r3, [r7, #8]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d102      	bne.n	800b990 <chk_lock+0x80>
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	2b02      	cmp	r3, #2
 800b98e:	d101      	bne.n	800b994 <chk_lock+0x84>
 800b990:	2300      	movs	r3, #0
 800b992:	e010      	b.n	800b9b6 <chk_lock+0xa6>
 800b994:	2312      	movs	r3, #18
 800b996:	e00e      	b.n	800b9b6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b998:	683b      	ldr	r3, [r7, #0]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d108      	bne.n	800b9b0 <chk_lock+0xa0>
 800b99e:	4a09      	ldr	r2, [pc, #36]	@ (800b9c4 <chk_lock+0xb4>)
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	011b      	lsls	r3, r3, #4
 800b9a4:	4413      	add	r3, r2
 800b9a6:	330c      	adds	r3, #12
 800b9a8:	881b      	ldrh	r3, [r3, #0]
 800b9aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b9ae:	d101      	bne.n	800b9b4 <chk_lock+0xa4>
 800b9b0:	2310      	movs	r3, #16
 800b9b2:	e000      	b.n	800b9b6 <chk_lock+0xa6>
 800b9b4:	2300      	movs	r3, #0
}
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	3714      	adds	r7, #20
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c0:	4770      	bx	lr
 800b9c2:	bf00      	nop
 800b9c4:	240007ac 	.word	0x240007ac

0800b9c8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b9c8:	b480      	push	{r7}
 800b9ca:	b083      	sub	sp, #12
 800b9cc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	607b      	str	r3, [r7, #4]
 800b9d2:	e002      	b.n	800b9da <enq_lock+0x12>
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	3301      	adds	r3, #1
 800b9d8:	607b      	str	r3, [r7, #4]
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	2b01      	cmp	r3, #1
 800b9de:	d806      	bhi.n	800b9ee <enq_lock+0x26>
 800b9e0:	4a09      	ldr	r2, [pc, #36]	@ (800ba08 <enq_lock+0x40>)
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	011b      	lsls	r3, r3, #4
 800b9e6:	4413      	add	r3, r2
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d1f2      	bne.n	800b9d4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	2b02      	cmp	r3, #2
 800b9f2:	bf14      	ite	ne
 800b9f4:	2301      	movne	r3, #1
 800b9f6:	2300      	moveq	r3, #0
 800b9f8:	b2db      	uxtb	r3, r3
}
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	370c      	adds	r7, #12
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba04:	4770      	bx	lr
 800ba06:	bf00      	nop
 800ba08:	240007ac 	.word	0x240007ac

0800ba0c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ba0c:	b480      	push	{r7}
 800ba0e:	b085      	sub	sp, #20
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
 800ba14:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ba16:	2300      	movs	r3, #0
 800ba18:	60fb      	str	r3, [r7, #12]
 800ba1a:	e01f      	b.n	800ba5c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800ba1c:	4a41      	ldr	r2, [pc, #260]	@ (800bb24 <inc_lock+0x118>)
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	011b      	lsls	r3, r3, #4
 800ba22:	4413      	add	r3, r2
 800ba24:	681a      	ldr	r2, [r3, #0]
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	429a      	cmp	r2, r3
 800ba2c:	d113      	bne.n	800ba56 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800ba2e:	4a3d      	ldr	r2, [pc, #244]	@ (800bb24 <inc_lock+0x118>)
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	011b      	lsls	r3, r3, #4
 800ba34:	4413      	add	r3, r2
 800ba36:	3304      	adds	r3, #4
 800ba38:	681a      	ldr	r2, [r3, #0]
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800ba3e:	429a      	cmp	r2, r3
 800ba40:	d109      	bne.n	800ba56 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800ba42:	4a38      	ldr	r2, [pc, #224]	@ (800bb24 <inc_lock+0x118>)
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	011b      	lsls	r3, r3, #4
 800ba48:	4413      	add	r3, r2
 800ba4a:	3308      	adds	r3, #8
 800ba4c:	681a      	ldr	r2, [r3, #0]
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800ba52:	429a      	cmp	r2, r3
 800ba54:	d006      	beq.n	800ba64 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	3301      	adds	r3, #1
 800ba5a:	60fb      	str	r3, [r7, #12]
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	2b01      	cmp	r3, #1
 800ba60:	d9dc      	bls.n	800ba1c <inc_lock+0x10>
 800ba62:	e000      	b.n	800ba66 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800ba64:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	2b02      	cmp	r3, #2
 800ba6a:	d132      	bne.n	800bad2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	60fb      	str	r3, [r7, #12]
 800ba70:	e002      	b.n	800ba78 <inc_lock+0x6c>
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	3301      	adds	r3, #1
 800ba76:	60fb      	str	r3, [r7, #12]
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	2b01      	cmp	r3, #1
 800ba7c:	d806      	bhi.n	800ba8c <inc_lock+0x80>
 800ba7e:	4a29      	ldr	r2, [pc, #164]	@ (800bb24 <inc_lock+0x118>)
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	011b      	lsls	r3, r3, #4
 800ba84:	4413      	add	r3, r2
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d1f2      	bne.n	800ba72 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	2b02      	cmp	r3, #2
 800ba90:	d101      	bne.n	800ba96 <inc_lock+0x8a>
 800ba92:	2300      	movs	r3, #0
 800ba94:	e040      	b.n	800bb18 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681a      	ldr	r2, [r3, #0]
 800ba9a:	4922      	ldr	r1, [pc, #136]	@ (800bb24 <inc_lock+0x118>)
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	011b      	lsls	r3, r3, #4
 800baa0:	440b      	add	r3, r1
 800baa2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	689a      	ldr	r2, [r3, #8]
 800baa8:	491e      	ldr	r1, [pc, #120]	@ (800bb24 <inc_lock+0x118>)
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	011b      	lsls	r3, r3, #4
 800baae:	440b      	add	r3, r1
 800bab0:	3304      	adds	r3, #4
 800bab2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	695a      	ldr	r2, [r3, #20]
 800bab8:	491a      	ldr	r1, [pc, #104]	@ (800bb24 <inc_lock+0x118>)
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	011b      	lsls	r3, r3, #4
 800babe:	440b      	add	r3, r1
 800bac0:	3308      	adds	r3, #8
 800bac2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800bac4:	4a17      	ldr	r2, [pc, #92]	@ (800bb24 <inc_lock+0x118>)
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	011b      	lsls	r3, r3, #4
 800baca:	4413      	add	r3, r2
 800bacc:	330c      	adds	r3, #12
 800bace:	2200      	movs	r2, #0
 800bad0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d009      	beq.n	800baec <inc_lock+0xe0>
 800bad8:	4a12      	ldr	r2, [pc, #72]	@ (800bb24 <inc_lock+0x118>)
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	011b      	lsls	r3, r3, #4
 800bade:	4413      	add	r3, r2
 800bae0:	330c      	adds	r3, #12
 800bae2:	881b      	ldrh	r3, [r3, #0]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d001      	beq.n	800baec <inc_lock+0xe0>
 800bae8:	2300      	movs	r3, #0
 800baea:	e015      	b.n	800bb18 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800baec:	683b      	ldr	r3, [r7, #0]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d108      	bne.n	800bb04 <inc_lock+0xf8>
 800baf2:	4a0c      	ldr	r2, [pc, #48]	@ (800bb24 <inc_lock+0x118>)
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	011b      	lsls	r3, r3, #4
 800baf8:	4413      	add	r3, r2
 800bafa:	330c      	adds	r3, #12
 800bafc:	881b      	ldrh	r3, [r3, #0]
 800bafe:	3301      	adds	r3, #1
 800bb00:	b29a      	uxth	r2, r3
 800bb02:	e001      	b.n	800bb08 <inc_lock+0xfc>
 800bb04:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bb08:	4906      	ldr	r1, [pc, #24]	@ (800bb24 <inc_lock+0x118>)
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	011b      	lsls	r3, r3, #4
 800bb0e:	440b      	add	r3, r1
 800bb10:	330c      	adds	r3, #12
 800bb12:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	3301      	adds	r3, #1
}
 800bb18:	4618      	mov	r0, r3
 800bb1a:	3714      	adds	r7, #20
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb22:	4770      	bx	lr
 800bb24:	240007ac 	.word	0x240007ac

0800bb28 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800bb28:	b480      	push	{r7}
 800bb2a:	b085      	sub	sp, #20
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800bb30:	2300      	movs	r3, #0
 800bb32:	60fb      	str	r3, [r7, #12]
 800bb34:	e010      	b.n	800bb58 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800bb36:	4a0d      	ldr	r2, [pc, #52]	@ (800bb6c <clear_lock+0x44>)
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	011b      	lsls	r3, r3, #4
 800bb3c:	4413      	add	r3, r2
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	687a      	ldr	r2, [r7, #4]
 800bb42:	429a      	cmp	r2, r3
 800bb44:	d105      	bne.n	800bb52 <clear_lock+0x2a>
 800bb46:	4a09      	ldr	r2, [pc, #36]	@ (800bb6c <clear_lock+0x44>)
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	011b      	lsls	r3, r3, #4
 800bb4c:	4413      	add	r3, r2
 800bb4e:	2200      	movs	r2, #0
 800bb50:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	3301      	adds	r3, #1
 800bb56:	60fb      	str	r3, [r7, #12]
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	2b01      	cmp	r3, #1
 800bb5c:	d9eb      	bls.n	800bb36 <clear_lock+0xe>
	}
}
 800bb5e:	bf00      	nop
 800bb60:	bf00      	nop
 800bb62:	3714      	adds	r7, #20
 800bb64:	46bd      	mov	sp, r7
 800bb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6a:	4770      	bx	lr
 800bb6c:	240007ac 	.word	0x240007ac

0800bb70 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b086      	sub	sp, #24
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800bb78:	2300      	movs	r3, #0
 800bb7a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	78db      	ldrb	r3, [r3, #3]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d034      	beq.n	800bbee <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb88:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	7858      	ldrb	r0, [r3, #1]
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bb94:	2301      	movs	r3, #1
 800bb96:	697a      	ldr	r2, [r7, #20]
 800bb98:	f7ff fd7a 	bl	800b690 <disk_write>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d002      	beq.n	800bba8 <sync_window+0x38>
			res = FR_DISK_ERR;
 800bba2:	2301      	movs	r3, #1
 800bba4:	73fb      	strb	r3, [r7, #15]
 800bba6:	e022      	b.n	800bbee <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	2200      	movs	r2, #0
 800bbac:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	6a1b      	ldr	r3, [r3, #32]
 800bbb2:	697a      	ldr	r2, [r7, #20]
 800bbb4:	1ad2      	subs	r2, r2, r3
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	699b      	ldr	r3, [r3, #24]
 800bbba:	429a      	cmp	r2, r3
 800bbbc:	d217      	bcs.n	800bbee <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	789b      	ldrb	r3, [r3, #2]
 800bbc2:	613b      	str	r3, [r7, #16]
 800bbc4:	e010      	b.n	800bbe8 <sync_window+0x78>
					wsect += fs->fsize;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	699b      	ldr	r3, [r3, #24]
 800bbca:	697a      	ldr	r2, [r7, #20]
 800bbcc:	4413      	add	r3, r2
 800bbce:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	7858      	ldrb	r0, [r3, #1]
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bbda:	2301      	movs	r3, #1
 800bbdc:	697a      	ldr	r2, [r7, #20]
 800bbde:	f7ff fd57 	bl	800b690 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bbe2:	693b      	ldr	r3, [r7, #16]
 800bbe4:	3b01      	subs	r3, #1
 800bbe6:	613b      	str	r3, [r7, #16]
 800bbe8:	693b      	ldr	r3, [r7, #16]
 800bbea:	2b01      	cmp	r3, #1
 800bbec:	d8eb      	bhi.n	800bbc6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800bbee:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	3718      	adds	r7, #24
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bd80      	pop	{r7, pc}

0800bbf8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b084      	sub	sp, #16
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
 800bc00:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800bc02:	2300      	movs	r3, #0
 800bc04:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc0a:	683a      	ldr	r2, [r7, #0]
 800bc0c:	429a      	cmp	r2, r3
 800bc0e:	d01b      	beq.n	800bc48 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800bc10:	6878      	ldr	r0, [r7, #4]
 800bc12:	f7ff ffad 	bl	800bb70 <sync_window>
 800bc16:	4603      	mov	r3, r0
 800bc18:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800bc1a:	7bfb      	ldrb	r3, [r7, #15]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d113      	bne.n	800bc48 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	7858      	ldrb	r0, [r3, #1]
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bc2a:	2301      	movs	r3, #1
 800bc2c:	683a      	ldr	r2, [r7, #0]
 800bc2e:	f7ff fd0f 	bl	800b650 <disk_read>
 800bc32:	4603      	mov	r3, r0
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d004      	beq.n	800bc42 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800bc38:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bc3c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800bc3e:	2301      	movs	r3, #1
 800bc40:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	683a      	ldr	r2, [r7, #0]
 800bc46:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800bc48:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	3710      	adds	r7, #16
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	bd80      	pop	{r7, pc}
	...

0800bc54 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b084      	sub	sp, #16
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800bc5c:	6878      	ldr	r0, [r7, #4]
 800bc5e:	f7ff ff87 	bl	800bb70 <sync_window>
 800bc62:	4603      	mov	r3, r0
 800bc64:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800bc66:	7bfb      	ldrb	r3, [r7, #15]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d158      	bne.n	800bd1e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	781b      	ldrb	r3, [r3, #0]
 800bc70:	2b03      	cmp	r3, #3
 800bc72:	d148      	bne.n	800bd06 <sync_fs+0xb2>
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	791b      	ldrb	r3, [r3, #4]
 800bc78:	2b01      	cmp	r3, #1
 800bc7a:	d144      	bne.n	800bd06 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	3330      	adds	r3, #48	@ 0x30
 800bc80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bc84:	2100      	movs	r1, #0
 800bc86:	4618      	mov	r0, r3
 800bc88:	f7ff fde4 	bl	800b854 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	3330      	adds	r3, #48	@ 0x30
 800bc90:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800bc94:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800bc98:	4618      	mov	r0, r3
 800bc9a:	f7ff fd73 	bl	800b784 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	3330      	adds	r3, #48	@ 0x30
 800bca2:	4921      	ldr	r1, [pc, #132]	@ (800bd28 <sync_fs+0xd4>)
 800bca4:	4618      	mov	r0, r3
 800bca6:	f7ff fd88 	bl	800b7ba <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	3330      	adds	r3, #48	@ 0x30
 800bcae:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800bcb2:	491e      	ldr	r1, [pc, #120]	@ (800bd2c <sync_fs+0xd8>)
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	f7ff fd80 	bl	800b7ba <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	3330      	adds	r3, #48	@ 0x30
 800bcbe:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	691b      	ldr	r3, [r3, #16]
 800bcc6:	4619      	mov	r1, r3
 800bcc8:	4610      	mov	r0, r2
 800bcca:	f7ff fd76 	bl	800b7ba <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	3330      	adds	r3, #48	@ 0x30
 800bcd2:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	68db      	ldr	r3, [r3, #12]
 800bcda:	4619      	mov	r1, r3
 800bcdc:	4610      	mov	r0, r2
 800bcde:	f7ff fd6c 	bl	800b7ba <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	69db      	ldr	r3, [r3, #28]
 800bce6:	1c5a      	adds	r2, r3, #1
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	7858      	ldrb	r0, [r3, #1]
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bcfa:	2301      	movs	r3, #1
 800bcfc:	f7ff fcc8 	bl	800b690 <disk_write>
			fs->fsi_flag = 0;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2200      	movs	r2, #0
 800bd04:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	785b      	ldrb	r3, [r3, #1]
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	2100      	movs	r1, #0
 800bd0e:	4618      	mov	r0, r3
 800bd10:	f7ff fcde 	bl	800b6d0 <disk_ioctl>
 800bd14:	4603      	mov	r3, r0
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d001      	beq.n	800bd1e <sync_fs+0xca>
 800bd1a:	2301      	movs	r3, #1
 800bd1c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800bd1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd20:	4618      	mov	r0, r3
 800bd22:	3710      	adds	r7, #16
 800bd24:	46bd      	mov	sp, r7
 800bd26:	bd80      	pop	{r7, pc}
 800bd28:	41615252 	.word	0x41615252
 800bd2c:	61417272 	.word	0x61417272

0800bd30 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800bd30:	b480      	push	{r7}
 800bd32:	b083      	sub	sp, #12
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
 800bd38:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800bd3a:	683b      	ldr	r3, [r7, #0]
 800bd3c:	3b02      	subs	r3, #2
 800bd3e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	695b      	ldr	r3, [r3, #20]
 800bd44:	3b02      	subs	r3, #2
 800bd46:	683a      	ldr	r2, [r7, #0]
 800bd48:	429a      	cmp	r2, r3
 800bd4a:	d301      	bcc.n	800bd50 <clust2sect+0x20>
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	e008      	b.n	800bd62 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	895b      	ldrh	r3, [r3, #10]
 800bd54:	461a      	mov	r2, r3
 800bd56:	683b      	ldr	r3, [r7, #0]
 800bd58:	fb03 f202 	mul.w	r2, r3, r2
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd60:	4413      	add	r3, r2
}
 800bd62:	4618      	mov	r0, r3
 800bd64:	370c      	adds	r7, #12
 800bd66:	46bd      	mov	sp, r7
 800bd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6c:	4770      	bx	lr

0800bd6e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800bd6e:	b580      	push	{r7, lr}
 800bd70:	b086      	sub	sp, #24
 800bd72:	af00      	add	r7, sp, #0
 800bd74:	6078      	str	r0, [r7, #4]
 800bd76:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	2b01      	cmp	r3, #1
 800bd82:	d904      	bls.n	800bd8e <get_fat+0x20>
 800bd84:	693b      	ldr	r3, [r7, #16]
 800bd86:	695b      	ldr	r3, [r3, #20]
 800bd88:	683a      	ldr	r2, [r7, #0]
 800bd8a:	429a      	cmp	r2, r3
 800bd8c:	d302      	bcc.n	800bd94 <get_fat+0x26>
		val = 1;	/* Internal error */
 800bd8e:	2301      	movs	r3, #1
 800bd90:	617b      	str	r3, [r7, #20]
 800bd92:	e08e      	b.n	800beb2 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800bd94:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bd98:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800bd9a:	693b      	ldr	r3, [r7, #16]
 800bd9c:	781b      	ldrb	r3, [r3, #0]
 800bd9e:	2b03      	cmp	r3, #3
 800bda0:	d061      	beq.n	800be66 <get_fat+0xf8>
 800bda2:	2b03      	cmp	r3, #3
 800bda4:	dc7b      	bgt.n	800be9e <get_fat+0x130>
 800bda6:	2b01      	cmp	r3, #1
 800bda8:	d002      	beq.n	800bdb0 <get_fat+0x42>
 800bdaa:	2b02      	cmp	r3, #2
 800bdac:	d041      	beq.n	800be32 <get_fat+0xc4>
 800bdae:	e076      	b.n	800be9e <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800bdb0:	683b      	ldr	r3, [r7, #0]
 800bdb2:	60fb      	str	r3, [r7, #12]
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	085b      	lsrs	r3, r3, #1
 800bdb8:	68fa      	ldr	r2, [r7, #12]
 800bdba:	4413      	add	r3, r2
 800bdbc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bdbe:	693b      	ldr	r3, [r7, #16]
 800bdc0:	6a1a      	ldr	r2, [r3, #32]
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	0a5b      	lsrs	r3, r3, #9
 800bdc6:	4413      	add	r3, r2
 800bdc8:	4619      	mov	r1, r3
 800bdca:	6938      	ldr	r0, [r7, #16]
 800bdcc:	f7ff ff14 	bl	800bbf8 <move_window>
 800bdd0:	4603      	mov	r3, r0
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d166      	bne.n	800bea4 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	1c5a      	adds	r2, r3, #1
 800bdda:	60fa      	str	r2, [r7, #12]
 800bddc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bde0:	693a      	ldr	r2, [r7, #16]
 800bde2:	4413      	add	r3, r2
 800bde4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bde8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bdea:	693b      	ldr	r3, [r7, #16]
 800bdec:	6a1a      	ldr	r2, [r3, #32]
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	0a5b      	lsrs	r3, r3, #9
 800bdf2:	4413      	add	r3, r2
 800bdf4:	4619      	mov	r1, r3
 800bdf6:	6938      	ldr	r0, [r7, #16]
 800bdf8:	f7ff fefe 	bl	800bbf8 <move_window>
 800bdfc:	4603      	mov	r3, r0
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d152      	bne.n	800bea8 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be08:	693a      	ldr	r2, [r7, #16]
 800be0a:	4413      	add	r3, r2
 800be0c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800be10:	021b      	lsls	r3, r3, #8
 800be12:	68ba      	ldr	r2, [r7, #8]
 800be14:	4313      	orrs	r3, r2
 800be16:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	f003 0301 	and.w	r3, r3, #1
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d002      	beq.n	800be28 <get_fat+0xba>
 800be22:	68bb      	ldr	r3, [r7, #8]
 800be24:	091b      	lsrs	r3, r3, #4
 800be26:	e002      	b.n	800be2e <get_fat+0xc0>
 800be28:	68bb      	ldr	r3, [r7, #8]
 800be2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800be2e:	617b      	str	r3, [r7, #20]
			break;
 800be30:	e03f      	b.n	800beb2 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800be32:	693b      	ldr	r3, [r7, #16]
 800be34:	6a1a      	ldr	r2, [r3, #32]
 800be36:	683b      	ldr	r3, [r7, #0]
 800be38:	0a1b      	lsrs	r3, r3, #8
 800be3a:	4413      	add	r3, r2
 800be3c:	4619      	mov	r1, r3
 800be3e:	6938      	ldr	r0, [r7, #16]
 800be40:	f7ff feda 	bl	800bbf8 <move_window>
 800be44:	4603      	mov	r3, r0
 800be46:	2b00      	cmp	r3, #0
 800be48:	d130      	bne.n	800beac <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800be4a:	693b      	ldr	r3, [r7, #16]
 800be4c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800be50:	683b      	ldr	r3, [r7, #0]
 800be52:	005b      	lsls	r3, r3, #1
 800be54:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800be58:	4413      	add	r3, r2
 800be5a:	4618      	mov	r0, r3
 800be5c:	f7ff fc56 	bl	800b70c <ld_word>
 800be60:	4603      	mov	r3, r0
 800be62:	617b      	str	r3, [r7, #20]
			break;
 800be64:	e025      	b.n	800beb2 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800be66:	693b      	ldr	r3, [r7, #16]
 800be68:	6a1a      	ldr	r2, [r3, #32]
 800be6a:	683b      	ldr	r3, [r7, #0]
 800be6c:	09db      	lsrs	r3, r3, #7
 800be6e:	4413      	add	r3, r2
 800be70:	4619      	mov	r1, r3
 800be72:	6938      	ldr	r0, [r7, #16]
 800be74:	f7ff fec0 	bl	800bbf8 <move_window>
 800be78:	4603      	mov	r3, r0
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d118      	bne.n	800beb0 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800be7e:	693b      	ldr	r3, [r7, #16]
 800be80:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	009b      	lsls	r3, r3, #2
 800be88:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800be8c:	4413      	add	r3, r2
 800be8e:	4618      	mov	r0, r3
 800be90:	f7ff fc55 	bl	800b73e <ld_dword>
 800be94:	4603      	mov	r3, r0
 800be96:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800be9a:	617b      	str	r3, [r7, #20]
			break;
 800be9c:	e009      	b.n	800beb2 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800be9e:	2301      	movs	r3, #1
 800bea0:	617b      	str	r3, [r7, #20]
 800bea2:	e006      	b.n	800beb2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bea4:	bf00      	nop
 800bea6:	e004      	b.n	800beb2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bea8:	bf00      	nop
 800beaa:	e002      	b.n	800beb2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800beac:	bf00      	nop
 800beae:	e000      	b.n	800beb2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800beb0:	bf00      	nop
		}
	}

	return val;
 800beb2:	697b      	ldr	r3, [r7, #20]
}
 800beb4:	4618      	mov	r0, r3
 800beb6:	3718      	adds	r7, #24
 800beb8:	46bd      	mov	sp, r7
 800beba:	bd80      	pop	{r7, pc}

0800bebc <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800bebc:	b590      	push	{r4, r7, lr}
 800bebe:	b089      	sub	sp, #36	@ 0x24
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	60f8      	str	r0, [r7, #12]
 800bec4:	60b9      	str	r1, [r7, #8]
 800bec6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800bec8:	2302      	movs	r3, #2
 800beca:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800becc:	68bb      	ldr	r3, [r7, #8]
 800bece:	2b01      	cmp	r3, #1
 800bed0:	f240 80d9 	bls.w	800c086 <put_fat+0x1ca>
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	695b      	ldr	r3, [r3, #20]
 800bed8:	68ba      	ldr	r2, [r7, #8]
 800beda:	429a      	cmp	r2, r3
 800bedc:	f080 80d3 	bcs.w	800c086 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	781b      	ldrb	r3, [r3, #0]
 800bee4:	2b03      	cmp	r3, #3
 800bee6:	f000 8096 	beq.w	800c016 <put_fat+0x15a>
 800beea:	2b03      	cmp	r3, #3
 800beec:	f300 80cb 	bgt.w	800c086 <put_fat+0x1ca>
 800bef0:	2b01      	cmp	r3, #1
 800bef2:	d002      	beq.n	800befa <put_fat+0x3e>
 800bef4:	2b02      	cmp	r3, #2
 800bef6:	d06e      	beq.n	800bfd6 <put_fat+0x11a>
 800bef8:	e0c5      	b.n	800c086 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800befa:	68bb      	ldr	r3, [r7, #8]
 800befc:	61bb      	str	r3, [r7, #24]
 800befe:	69bb      	ldr	r3, [r7, #24]
 800bf00:	085b      	lsrs	r3, r3, #1
 800bf02:	69ba      	ldr	r2, [r7, #24]
 800bf04:	4413      	add	r3, r2
 800bf06:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	6a1a      	ldr	r2, [r3, #32]
 800bf0c:	69bb      	ldr	r3, [r7, #24]
 800bf0e:	0a5b      	lsrs	r3, r3, #9
 800bf10:	4413      	add	r3, r2
 800bf12:	4619      	mov	r1, r3
 800bf14:	68f8      	ldr	r0, [r7, #12]
 800bf16:	f7ff fe6f 	bl	800bbf8 <move_window>
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bf1e:	7ffb      	ldrb	r3, [r7, #31]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	f040 80a9 	bne.w	800c078 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bf2c:	69bb      	ldr	r3, [r7, #24]
 800bf2e:	1c59      	adds	r1, r3, #1
 800bf30:	61b9      	str	r1, [r7, #24]
 800bf32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf36:	4413      	add	r3, r2
 800bf38:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800bf3a:	68bb      	ldr	r3, [r7, #8]
 800bf3c:	f003 0301 	and.w	r3, r3, #1
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d00d      	beq.n	800bf60 <put_fat+0xa4>
 800bf44:	697b      	ldr	r3, [r7, #20]
 800bf46:	781b      	ldrb	r3, [r3, #0]
 800bf48:	b25b      	sxtb	r3, r3
 800bf4a:	f003 030f 	and.w	r3, r3, #15
 800bf4e:	b25a      	sxtb	r2, r3
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	b25b      	sxtb	r3, r3
 800bf54:	011b      	lsls	r3, r3, #4
 800bf56:	b25b      	sxtb	r3, r3
 800bf58:	4313      	orrs	r3, r2
 800bf5a:	b25b      	sxtb	r3, r3
 800bf5c:	b2db      	uxtb	r3, r3
 800bf5e:	e001      	b.n	800bf64 <put_fat+0xa8>
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	b2db      	uxtb	r3, r3
 800bf64:	697a      	ldr	r2, [r7, #20]
 800bf66:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	2201      	movs	r2, #1
 800bf6c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	6a1a      	ldr	r2, [r3, #32]
 800bf72:	69bb      	ldr	r3, [r7, #24]
 800bf74:	0a5b      	lsrs	r3, r3, #9
 800bf76:	4413      	add	r3, r2
 800bf78:	4619      	mov	r1, r3
 800bf7a:	68f8      	ldr	r0, [r7, #12]
 800bf7c:	f7ff fe3c 	bl	800bbf8 <move_window>
 800bf80:	4603      	mov	r3, r0
 800bf82:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bf84:	7ffb      	ldrb	r3, [r7, #31]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d178      	bne.n	800c07c <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bf90:	69bb      	ldr	r3, [r7, #24]
 800bf92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf96:	4413      	add	r3, r2
 800bf98:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800bf9a:	68bb      	ldr	r3, [r7, #8]
 800bf9c:	f003 0301 	and.w	r3, r3, #1
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d003      	beq.n	800bfac <put_fat+0xf0>
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	091b      	lsrs	r3, r3, #4
 800bfa8:	b2db      	uxtb	r3, r3
 800bfaa:	e00e      	b.n	800bfca <put_fat+0x10e>
 800bfac:	697b      	ldr	r3, [r7, #20]
 800bfae:	781b      	ldrb	r3, [r3, #0]
 800bfb0:	b25b      	sxtb	r3, r3
 800bfb2:	f023 030f 	bic.w	r3, r3, #15
 800bfb6:	b25a      	sxtb	r2, r3
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	0a1b      	lsrs	r3, r3, #8
 800bfbc:	b25b      	sxtb	r3, r3
 800bfbe:	f003 030f 	and.w	r3, r3, #15
 800bfc2:	b25b      	sxtb	r3, r3
 800bfc4:	4313      	orrs	r3, r2
 800bfc6:	b25b      	sxtb	r3, r3
 800bfc8:	b2db      	uxtb	r3, r3
 800bfca:	697a      	ldr	r2, [r7, #20]
 800bfcc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	2201      	movs	r2, #1
 800bfd2:	70da      	strb	r2, [r3, #3]
			break;
 800bfd4:	e057      	b.n	800c086 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	6a1a      	ldr	r2, [r3, #32]
 800bfda:	68bb      	ldr	r3, [r7, #8]
 800bfdc:	0a1b      	lsrs	r3, r3, #8
 800bfde:	4413      	add	r3, r2
 800bfe0:	4619      	mov	r1, r3
 800bfe2:	68f8      	ldr	r0, [r7, #12]
 800bfe4:	f7ff fe08 	bl	800bbf8 <move_window>
 800bfe8:	4603      	mov	r3, r0
 800bfea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bfec:	7ffb      	ldrb	r3, [r7, #31]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d146      	bne.n	800c080 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bff8:	68bb      	ldr	r3, [r7, #8]
 800bffa:	005b      	lsls	r3, r3, #1
 800bffc:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800c000:	4413      	add	r3, r2
 800c002:	687a      	ldr	r2, [r7, #4]
 800c004:	b292      	uxth	r2, r2
 800c006:	4611      	mov	r1, r2
 800c008:	4618      	mov	r0, r3
 800c00a:	f7ff fbbb 	bl	800b784 <st_word>
			fs->wflag = 1;
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	2201      	movs	r2, #1
 800c012:	70da      	strb	r2, [r3, #3]
			break;
 800c014:	e037      	b.n	800c086 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	6a1a      	ldr	r2, [r3, #32]
 800c01a:	68bb      	ldr	r3, [r7, #8]
 800c01c:	09db      	lsrs	r3, r3, #7
 800c01e:	4413      	add	r3, r2
 800c020:	4619      	mov	r1, r3
 800c022:	68f8      	ldr	r0, [r7, #12]
 800c024:	f7ff fde8 	bl	800bbf8 <move_window>
 800c028:	4603      	mov	r3, r0
 800c02a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c02c:	7ffb      	ldrb	r3, [r7, #31]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d128      	bne.n	800c084 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c03e:	68bb      	ldr	r3, [r7, #8]
 800c040:	009b      	lsls	r3, r3, #2
 800c042:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800c046:	4413      	add	r3, r2
 800c048:	4618      	mov	r0, r3
 800c04a:	f7ff fb78 	bl	800b73e <ld_dword>
 800c04e:	4603      	mov	r3, r0
 800c050:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800c054:	4323      	orrs	r3, r4
 800c056:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c05e:	68bb      	ldr	r3, [r7, #8]
 800c060:	009b      	lsls	r3, r3, #2
 800c062:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800c066:	4413      	add	r3, r2
 800c068:	6879      	ldr	r1, [r7, #4]
 800c06a:	4618      	mov	r0, r3
 800c06c:	f7ff fba5 	bl	800b7ba <st_dword>
			fs->wflag = 1;
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	2201      	movs	r2, #1
 800c074:	70da      	strb	r2, [r3, #3]
			break;
 800c076:	e006      	b.n	800c086 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c078:	bf00      	nop
 800c07a:	e004      	b.n	800c086 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c07c:	bf00      	nop
 800c07e:	e002      	b.n	800c086 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c080:	bf00      	nop
 800c082:	e000      	b.n	800c086 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c084:	bf00      	nop
		}
	}
	return res;
 800c086:	7ffb      	ldrb	r3, [r7, #31]
}
 800c088:	4618      	mov	r0, r3
 800c08a:	3724      	adds	r7, #36	@ 0x24
 800c08c:	46bd      	mov	sp, r7
 800c08e:	bd90      	pop	{r4, r7, pc}

0800c090 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b088      	sub	sp, #32
 800c094:	af00      	add	r7, sp, #0
 800c096:	60f8      	str	r0, [r7, #12]
 800c098:	60b9      	str	r1, [r7, #8]
 800c09a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c09c:	2300      	movs	r3, #0
 800c09e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c0a6:	68bb      	ldr	r3, [r7, #8]
 800c0a8:	2b01      	cmp	r3, #1
 800c0aa:	d904      	bls.n	800c0b6 <remove_chain+0x26>
 800c0ac:	69bb      	ldr	r3, [r7, #24]
 800c0ae:	695b      	ldr	r3, [r3, #20]
 800c0b0:	68ba      	ldr	r2, [r7, #8]
 800c0b2:	429a      	cmp	r2, r3
 800c0b4:	d301      	bcc.n	800c0ba <remove_chain+0x2a>
 800c0b6:	2302      	movs	r3, #2
 800c0b8:	e04b      	b.n	800c152 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d00c      	beq.n	800c0da <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c0c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c0c4:	6879      	ldr	r1, [r7, #4]
 800c0c6:	69b8      	ldr	r0, [r7, #24]
 800c0c8:	f7ff fef8 	bl	800bebc <put_fat>
 800c0cc:	4603      	mov	r3, r0
 800c0ce:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c0d0:	7ffb      	ldrb	r3, [r7, #31]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d001      	beq.n	800c0da <remove_chain+0x4a>
 800c0d6:	7ffb      	ldrb	r3, [r7, #31]
 800c0d8:	e03b      	b.n	800c152 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c0da:	68b9      	ldr	r1, [r7, #8]
 800c0dc:	68f8      	ldr	r0, [r7, #12]
 800c0de:	f7ff fe46 	bl	800bd6e <get_fat>
 800c0e2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c0e4:	697b      	ldr	r3, [r7, #20]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d031      	beq.n	800c14e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c0ea:	697b      	ldr	r3, [r7, #20]
 800c0ec:	2b01      	cmp	r3, #1
 800c0ee:	d101      	bne.n	800c0f4 <remove_chain+0x64>
 800c0f0:	2302      	movs	r3, #2
 800c0f2:	e02e      	b.n	800c152 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c0f4:	697b      	ldr	r3, [r7, #20]
 800c0f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c0fa:	d101      	bne.n	800c100 <remove_chain+0x70>
 800c0fc:	2301      	movs	r3, #1
 800c0fe:	e028      	b.n	800c152 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c100:	2200      	movs	r2, #0
 800c102:	68b9      	ldr	r1, [r7, #8]
 800c104:	69b8      	ldr	r0, [r7, #24]
 800c106:	f7ff fed9 	bl	800bebc <put_fat>
 800c10a:	4603      	mov	r3, r0
 800c10c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c10e:	7ffb      	ldrb	r3, [r7, #31]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d001      	beq.n	800c118 <remove_chain+0x88>
 800c114:	7ffb      	ldrb	r3, [r7, #31]
 800c116:	e01c      	b.n	800c152 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c118:	69bb      	ldr	r3, [r7, #24]
 800c11a:	691a      	ldr	r2, [r3, #16]
 800c11c:	69bb      	ldr	r3, [r7, #24]
 800c11e:	695b      	ldr	r3, [r3, #20]
 800c120:	3b02      	subs	r3, #2
 800c122:	429a      	cmp	r2, r3
 800c124:	d20b      	bcs.n	800c13e <remove_chain+0xae>
			fs->free_clst++;
 800c126:	69bb      	ldr	r3, [r7, #24]
 800c128:	691b      	ldr	r3, [r3, #16]
 800c12a:	1c5a      	adds	r2, r3, #1
 800c12c:	69bb      	ldr	r3, [r7, #24]
 800c12e:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800c130:	69bb      	ldr	r3, [r7, #24]
 800c132:	791b      	ldrb	r3, [r3, #4]
 800c134:	f043 0301 	orr.w	r3, r3, #1
 800c138:	b2da      	uxtb	r2, r3
 800c13a:	69bb      	ldr	r3, [r7, #24]
 800c13c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c13e:	697b      	ldr	r3, [r7, #20]
 800c140:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c142:	69bb      	ldr	r3, [r7, #24]
 800c144:	695b      	ldr	r3, [r3, #20]
 800c146:	68ba      	ldr	r2, [r7, #8]
 800c148:	429a      	cmp	r2, r3
 800c14a:	d3c6      	bcc.n	800c0da <remove_chain+0x4a>
 800c14c:	e000      	b.n	800c150 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c14e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c150:	2300      	movs	r3, #0
}
 800c152:	4618      	mov	r0, r3
 800c154:	3720      	adds	r7, #32
 800c156:	46bd      	mov	sp, r7
 800c158:	bd80      	pop	{r7, pc}

0800c15a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c15a:	b580      	push	{r7, lr}
 800c15c:	b088      	sub	sp, #32
 800c15e:	af00      	add	r7, sp, #0
 800c160:	6078      	str	r0, [r7, #4]
 800c162:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c16a:	683b      	ldr	r3, [r7, #0]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d10d      	bne.n	800c18c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c170:	693b      	ldr	r3, [r7, #16]
 800c172:	68db      	ldr	r3, [r3, #12]
 800c174:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c176:	69bb      	ldr	r3, [r7, #24]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d004      	beq.n	800c186 <create_chain+0x2c>
 800c17c:	693b      	ldr	r3, [r7, #16]
 800c17e:	695b      	ldr	r3, [r3, #20]
 800c180:	69ba      	ldr	r2, [r7, #24]
 800c182:	429a      	cmp	r2, r3
 800c184:	d31b      	bcc.n	800c1be <create_chain+0x64>
 800c186:	2301      	movs	r3, #1
 800c188:	61bb      	str	r3, [r7, #24]
 800c18a:	e018      	b.n	800c1be <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c18c:	6839      	ldr	r1, [r7, #0]
 800c18e:	6878      	ldr	r0, [r7, #4]
 800c190:	f7ff fded 	bl	800bd6e <get_fat>
 800c194:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	2b01      	cmp	r3, #1
 800c19a:	d801      	bhi.n	800c1a0 <create_chain+0x46>
 800c19c:	2301      	movs	r3, #1
 800c19e:	e070      	b.n	800c282 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c1a6:	d101      	bne.n	800c1ac <create_chain+0x52>
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	e06a      	b.n	800c282 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c1ac:	693b      	ldr	r3, [r7, #16]
 800c1ae:	695b      	ldr	r3, [r3, #20]
 800c1b0:	68fa      	ldr	r2, [r7, #12]
 800c1b2:	429a      	cmp	r2, r3
 800c1b4:	d201      	bcs.n	800c1ba <create_chain+0x60>
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	e063      	b.n	800c282 <create_chain+0x128>
		scl = clst;
 800c1ba:	683b      	ldr	r3, [r7, #0]
 800c1bc:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c1be:	69bb      	ldr	r3, [r7, #24]
 800c1c0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c1c2:	69fb      	ldr	r3, [r7, #28]
 800c1c4:	3301      	adds	r3, #1
 800c1c6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c1c8:	693b      	ldr	r3, [r7, #16]
 800c1ca:	695b      	ldr	r3, [r3, #20]
 800c1cc:	69fa      	ldr	r2, [r7, #28]
 800c1ce:	429a      	cmp	r2, r3
 800c1d0:	d307      	bcc.n	800c1e2 <create_chain+0x88>
				ncl = 2;
 800c1d2:	2302      	movs	r3, #2
 800c1d4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c1d6:	69fa      	ldr	r2, [r7, #28]
 800c1d8:	69bb      	ldr	r3, [r7, #24]
 800c1da:	429a      	cmp	r2, r3
 800c1dc:	d901      	bls.n	800c1e2 <create_chain+0x88>
 800c1de:	2300      	movs	r3, #0
 800c1e0:	e04f      	b.n	800c282 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c1e2:	69f9      	ldr	r1, [r7, #28]
 800c1e4:	6878      	ldr	r0, [r7, #4]
 800c1e6:	f7ff fdc2 	bl	800bd6e <get_fat>
 800c1ea:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d00e      	beq.n	800c210 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	2b01      	cmp	r3, #1
 800c1f6:	d003      	beq.n	800c200 <create_chain+0xa6>
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c1fe:	d101      	bne.n	800c204 <create_chain+0xaa>
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	e03e      	b.n	800c282 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c204:	69fa      	ldr	r2, [r7, #28]
 800c206:	69bb      	ldr	r3, [r7, #24]
 800c208:	429a      	cmp	r2, r3
 800c20a:	d1da      	bne.n	800c1c2 <create_chain+0x68>
 800c20c:	2300      	movs	r3, #0
 800c20e:	e038      	b.n	800c282 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c210:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c212:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c216:	69f9      	ldr	r1, [r7, #28]
 800c218:	6938      	ldr	r0, [r7, #16]
 800c21a:	f7ff fe4f 	bl	800bebc <put_fat>
 800c21e:	4603      	mov	r3, r0
 800c220:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c222:	7dfb      	ldrb	r3, [r7, #23]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d109      	bne.n	800c23c <create_chain+0xe2>
 800c228:	683b      	ldr	r3, [r7, #0]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d006      	beq.n	800c23c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c22e:	69fa      	ldr	r2, [r7, #28]
 800c230:	6839      	ldr	r1, [r7, #0]
 800c232:	6938      	ldr	r0, [r7, #16]
 800c234:	f7ff fe42 	bl	800bebc <put_fat>
 800c238:	4603      	mov	r3, r0
 800c23a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c23c:	7dfb      	ldrb	r3, [r7, #23]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d116      	bne.n	800c270 <create_chain+0x116>
		fs->last_clst = ncl;
 800c242:	693b      	ldr	r3, [r7, #16]
 800c244:	69fa      	ldr	r2, [r7, #28]
 800c246:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c248:	693b      	ldr	r3, [r7, #16]
 800c24a:	691a      	ldr	r2, [r3, #16]
 800c24c:	693b      	ldr	r3, [r7, #16]
 800c24e:	695b      	ldr	r3, [r3, #20]
 800c250:	3b02      	subs	r3, #2
 800c252:	429a      	cmp	r2, r3
 800c254:	d804      	bhi.n	800c260 <create_chain+0x106>
 800c256:	693b      	ldr	r3, [r7, #16]
 800c258:	691b      	ldr	r3, [r3, #16]
 800c25a:	1e5a      	subs	r2, r3, #1
 800c25c:	693b      	ldr	r3, [r7, #16]
 800c25e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800c260:	693b      	ldr	r3, [r7, #16]
 800c262:	791b      	ldrb	r3, [r3, #4]
 800c264:	f043 0301 	orr.w	r3, r3, #1
 800c268:	b2da      	uxtb	r2, r3
 800c26a:	693b      	ldr	r3, [r7, #16]
 800c26c:	711a      	strb	r2, [r3, #4]
 800c26e:	e007      	b.n	800c280 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c270:	7dfb      	ldrb	r3, [r7, #23]
 800c272:	2b01      	cmp	r3, #1
 800c274:	d102      	bne.n	800c27c <create_chain+0x122>
 800c276:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c27a:	e000      	b.n	800c27e <create_chain+0x124>
 800c27c:	2301      	movs	r3, #1
 800c27e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c280:	69fb      	ldr	r3, [r7, #28]
}
 800c282:	4618      	mov	r0, r3
 800c284:	3720      	adds	r7, #32
 800c286:	46bd      	mov	sp, r7
 800c288:	bd80      	pop	{r7, pc}

0800c28a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c28a:	b480      	push	{r7}
 800c28c:	b087      	sub	sp, #28
 800c28e:	af00      	add	r7, sp, #0
 800c290:	6078      	str	r0, [r7, #4]
 800c292:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c29e:	3304      	adds	r3, #4
 800c2a0:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c2a2:	683b      	ldr	r3, [r7, #0]
 800c2a4:	0a5b      	lsrs	r3, r3, #9
 800c2a6:	68fa      	ldr	r2, [r7, #12]
 800c2a8:	8952      	ldrh	r2, [r2, #10]
 800c2aa:	fbb3 f3f2 	udiv	r3, r3, r2
 800c2ae:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c2b0:	693b      	ldr	r3, [r7, #16]
 800c2b2:	1d1a      	adds	r2, r3, #4
 800c2b4:	613a      	str	r2, [r7, #16]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c2ba:	68bb      	ldr	r3, [r7, #8]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d101      	bne.n	800c2c4 <clmt_clust+0x3a>
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	e010      	b.n	800c2e6 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800c2c4:	697a      	ldr	r2, [r7, #20]
 800c2c6:	68bb      	ldr	r3, [r7, #8]
 800c2c8:	429a      	cmp	r2, r3
 800c2ca:	d307      	bcc.n	800c2dc <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800c2cc:	697a      	ldr	r2, [r7, #20]
 800c2ce:	68bb      	ldr	r3, [r7, #8]
 800c2d0:	1ad3      	subs	r3, r2, r3
 800c2d2:	617b      	str	r3, [r7, #20]
 800c2d4:	693b      	ldr	r3, [r7, #16]
 800c2d6:	3304      	adds	r3, #4
 800c2d8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c2da:	e7e9      	b.n	800c2b0 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800c2dc:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c2de:	693b      	ldr	r3, [r7, #16]
 800c2e0:	681a      	ldr	r2, [r3, #0]
 800c2e2:	697b      	ldr	r3, [r7, #20]
 800c2e4:	4413      	add	r3, r2
}
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	371c      	adds	r7, #28
 800c2ea:	46bd      	mov	sp, r7
 800c2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f0:	4770      	bx	lr

0800c2f2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c2f2:	b580      	push	{r7, lr}
 800c2f4:	b086      	sub	sp, #24
 800c2f6:	af00      	add	r7, sp, #0
 800c2f8:	6078      	str	r0, [r7, #4]
 800c2fa:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c302:	683b      	ldr	r3, [r7, #0]
 800c304:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c308:	d204      	bcs.n	800c314 <dir_sdi+0x22>
 800c30a:	683b      	ldr	r3, [r7, #0]
 800c30c:	f003 031f 	and.w	r3, r3, #31
 800c310:	2b00      	cmp	r3, #0
 800c312:	d001      	beq.n	800c318 <dir_sdi+0x26>
		return FR_INT_ERR;
 800c314:	2302      	movs	r3, #2
 800c316:	e063      	b.n	800c3e0 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	683a      	ldr	r2, [r7, #0]
 800c31c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	689b      	ldr	r3, [r3, #8]
 800c322:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c324:	697b      	ldr	r3, [r7, #20]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d106      	bne.n	800c338 <dir_sdi+0x46>
 800c32a:	693b      	ldr	r3, [r7, #16]
 800c32c:	781b      	ldrb	r3, [r3, #0]
 800c32e:	2b02      	cmp	r3, #2
 800c330:	d902      	bls.n	800c338 <dir_sdi+0x46>
		clst = fs->dirbase;
 800c332:	693b      	ldr	r3, [r7, #16]
 800c334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c336:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c338:	697b      	ldr	r3, [r7, #20]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d10c      	bne.n	800c358 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c33e:	683b      	ldr	r3, [r7, #0]
 800c340:	095b      	lsrs	r3, r3, #5
 800c342:	693a      	ldr	r2, [r7, #16]
 800c344:	8912      	ldrh	r2, [r2, #8]
 800c346:	4293      	cmp	r3, r2
 800c348:	d301      	bcc.n	800c34e <dir_sdi+0x5c>
 800c34a:	2302      	movs	r3, #2
 800c34c:	e048      	b.n	800c3e0 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800c34e:	693b      	ldr	r3, [r7, #16]
 800c350:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	61da      	str	r2, [r3, #28]
 800c356:	e029      	b.n	800c3ac <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c358:	693b      	ldr	r3, [r7, #16]
 800c35a:	895b      	ldrh	r3, [r3, #10]
 800c35c:	025b      	lsls	r3, r3, #9
 800c35e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c360:	e019      	b.n	800c396 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	6979      	ldr	r1, [r7, #20]
 800c366:	4618      	mov	r0, r3
 800c368:	f7ff fd01 	bl	800bd6e <get_fat>
 800c36c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c36e:	697b      	ldr	r3, [r7, #20]
 800c370:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c374:	d101      	bne.n	800c37a <dir_sdi+0x88>
 800c376:	2301      	movs	r3, #1
 800c378:	e032      	b.n	800c3e0 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c37a:	697b      	ldr	r3, [r7, #20]
 800c37c:	2b01      	cmp	r3, #1
 800c37e:	d904      	bls.n	800c38a <dir_sdi+0x98>
 800c380:	693b      	ldr	r3, [r7, #16]
 800c382:	695b      	ldr	r3, [r3, #20]
 800c384:	697a      	ldr	r2, [r7, #20]
 800c386:	429a      	cmp	r2, r3
 800c388:	d301      	bcc.n	800c38e <dir_sdi+0x9c>
 800c38a:	2302      	movs	r3, #2
 800c38c:	e028      	b.n	800c3e0 <dir_sdi+0xee>
			ofs -= csz;
 800c38e:	683a      	ldr	r2, [r7, #0]
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	1ad3      	subs	r3, r2, r3
 800c394:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c396:	683a      	ldr	r2, [r7, #0]
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	429a      	cmp	r2, r3
 800c39c:	d2e1      	bcs.n	800c362 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800c39e:	6979      	ldr	r1, [r7, #20]
 800c3a0:	6938      	ldr	r0, [r7, #16]
 800c3a2:	f7ff fcc5 	bl	800bd30 <clust2sect>
 800c3a6:	4602      	mov	r2, r0
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	697a      	ldr	r2, [r7, #20]
 800c3b0:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	69db      	ldr	r3, [r3, #28]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d101      	bne.n	800c3be <dir_sdi+0xcc>
 800c3ba:	2302      	movs	r3, #2
 800c3bc:	e010      	b.n	800c3e0 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	69da      	ldr	r2, [r3, #28]
 800c3c2:	683b      	ldr	r3, [r7, #0]
 800c3c4:	0a5b      	lsrs	r3, r3, #9
 800c3c6:	441a      	add	r2, r3
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c3cc:	693b      	ldr	r3, [r7, #16]
 800c3ce:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c3d2:	683b      	ldr	r3, [r7, #0]
 800c3d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3d8:	441a      	add	r2, r3
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c3de:	2300      	movs	r3, #0
}
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	3718      	adds	r7, #24
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	bd80      	pop	{r7, pc}

0800c3e8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b086      	sub	sp, #24
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
 800c3f0:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	695b      	ldr	r3, [r3, #20]
 800c3fc:	3320      	adds	r3, #32
 800c3fe:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	69db      	ldr	r3, [r3, #28]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d003      	beq.n	800c410 <dir_next+0x28>
 800c408:	68bb      	ldr	r3, [r7, #8]
 800c40a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c40e:	d301      	bcc.n	800c414 <dir_next+0x2c>
 800c410:	2304      	movs	r3, #4
 800c412:	e0aa      	b.n	800c56a <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c414:	68bb      	ldr	r3, [r7, #8]
 800c416:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	f040 8098 	bne.w	800c550 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	69db      	ldr	r3, [r3, #28]
 800c424:	1c5a      	adds	r2, r3, #1
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	699b      	ldr	r3, [r3, #24]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d10b      	bne.n	800c44a <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c432:	68bb      	ldr	r3, [r7, #8]
 800c434:	095b      	lsrs	r3, r3, #5
 800c436:	68fa      	ldr	r2, [r7, #12]
 800c438:	8912      	ldrh	r2, [r2, #8]
 800c43a:	4293      	cmp	r3, r2
 800c43c:	f0c0 8088 	bcc.w	800c550 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	2200      	movs	r2, #0
 800c444:	61da      	str	r2, [r3, #28]
 800c446:	2304      	movs	r3, #4
 800c448:	e08f      	b.n	800c56a <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c44a:	68bb      	ldr	r3, [r7, #8]
 800c44c:	0a5b      	lsrs	r3, r3, #9
 800c44e:	68fa      	ldr	r2, [r7, #12]
 800c450:	8952      	ldrh	r2, [r2, #10]
 800c452:	3a01      	subs	r2, #1
 800c454:	4013      	ands	r3, r2
 800c456:	2b00      	cmp	r3, #0
 800c458:	d17a      	bne.n	800c550 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c45a:	687a      	ldr	r2, [r7, #4]
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	699b      	ldr	r3, [r3, #24]
 800c460:	4619      	mov	r1, r3
 800c462:	4610      	mov	r0, r2
 800c464:	f7ff fc83 	bl	800bd6e <get_fat>
 800c468:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c46a:	697b      	ldr	r3, [r7, #20]
 800c46c:	2b01      	cmp	r3, #1
 800c46e:	d801      	bhi.n	800c474 <dir_next+0x8c>
 800c470:	2302      	movs	r3, #2
 800c472:	e07a      	b.n	800c56a <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c474:	697b      	ldr	r3, [r7, #20]
 800c476:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c47a:	d101      	bne.n	800c480 <dir_next+0x98>
 800c47c:	2301      	movs	r3, #1
 800c47e:	e074      	b.n	800c56a <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	695b      	ldr	r3, [r3, #20]
 800c484:	697a      	ldr	r2, [r7, #20]
 800c486:	429a      	cmp	r2, r3
 800c488:	d358      	bcc.n	800c53c <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c48a:	683b      	ldr	r3, [r7, #0]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d104      	bne.n	800c49a <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	2200      	movs	r2, #0
 800c494:	61da      	str	r2, [r3, #28]
 800c496:	2304      	movs	r3, #4
 800c498:	e067      	b.n	800c56a <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c49a:	687a      	ldr	r2, [r7, #4]
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	699b      	ldr	r3, [r3, #24]
 800c4a0:	4619      	mov	r1, r3
 800c4a2:	4610      	mov	r0, r2
 800c4a4:	f7ff fe59 	bl	800c15a <create_chain>
 800c4a8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c4aa:	697b      	ldr	r3, [r7, #20]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d101      	bne.n	800c4b4 <dir_next+0xcc>
 800c4b0:	2307      	movs	r3, #7
 800c4b2:	e05a      	b.n	800c56a <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c4b4:	697b      	ldr	r3, [r7, #20]
 800c4b6:	2b01      	cmp	r3, #1
 800c4b8:	d101      	bne.n	800c4be <dir_next+0xd6>
 800c4ba:	2302      	movs	r3, #2
 800c4bc:	e055      	b.n	800c56a <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c4be:	697b      	ldr	r3, [r7, #20]
 800c4c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c4c4:	d101      	bne.n	800c4ca <dir_next+0xe2>
 800c4c6:	2301      	movs	r3, #1
 800c4c8:	e04f      	b.n	800c56a <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c4ca:	68f8      	ldr	r0, [r7, #12]
 800c4cc:	f7ff fb50 	bl	800bb70 <sync_window>
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d001      	beq.n	800c4da <dir_next+0xf2>
 800c4d6:	2301      	movs	r3, #1
 800c4d8:	e047      	b.n	800c56a <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	3330      	adds	r3, #48	@ 0x30
 800c4de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c4e2:	2100      	movs	r1, #0
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	f7ff f9b5 	bl	800b854 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	613b      	str	r3, [r7, #16]
 800c4ee:	6979      	ldr	r1, [r7, #20]
 800c4f0:	68f8      	ldr	r0, [r7, #12]
 800c4f2:	f7ff fc1d 	bl	800bd30 <clust2sect>
 800c4f6:	4602      	mov	r2, r0
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c4fc:	e012      	b.n	800c524 <dir_next+0x13c>
						fs->wflag = 1;
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	2201      	movs	r2, #1
 800c502:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c504:	68f8      	ldr	r0, [r7, #12]
 800c506:	f7ff fb33 	bl	800bb70 <sync_window>
 800c50a:	4603      	mov	r3, r0
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d001      	beq.n	800c514 <dir_next+0x12c>
 800c510:	2301      	movs	r3, #1
 800c512:	e02a      	b.n	800c56a <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c514:	693b      	ldr	r3, [r7, #16]
 800c516:	3301      	adds	r3, #1
 800c518:	613b      	str	r3, [r7, #16]
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c51e:	1c5a      	adds	r2, r3, #1
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	895b      	ldrh	r3, [r3, #10]
 800c528:	461a      	mov	r2, r3
 800c52a:	693b      	ldr	r3, [r7, #16]
 800c52c:	4293      	cmp	r3, r2
 800c52e:	d3e6      	bcc.n	800c4fe <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c534:	693b      	ldr	r3, [r7, #16]
 800c536:	1ad2      	subs	r2, r2, r3
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	697a      	ldr	r2, [r7, #20]
 800c540:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c542:	6979      	ldr	r1, [r7, #20]
 800c544:	68f8      	ldr	r0, [r7, #12]
 800c546:	f7ff fbf3 	bl	800bd30 <clust2sect>
 800c54a:	4602      	mov	r2, r0
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	68ba      	ldr	r2, [r7, #8]
 800c554:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c55c:	68bb      	ldr	r3, [r7, #8]
 800c55e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c562:	441a      	add	r2, r3
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c568:	2300      	movs	r3, #0
}
 800c56a:	4618      	mov	r0, r3
 800c56c:	3718      	adds	r7, #24
 800c56e:	46bd      	mov	sp, r7
 800c570:	bd80      	pop	{r7, pc}

0800c572 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c572:	b580      	push	{r7, lr}
 800c574:	b086      	sub	sp, #24
 800c576:	af00      	add	r7, sp, #0
 800c578:	6078      	str	r0, [r7, #4]
 800c57a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c582:	2100      	movs	r1, #0
 800c584:	6878      	ldr	r0, [r7, #4]
 800c586:	f7ff feb4 	bl	800c2f2 <dir_sdi>
 800c58a:	4603      	mov	r3, r0
 800c58c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c58e:	7dfb      	ldrb	r3, [r7, #23]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d12b      	bne.n	800c5ec <dir_alloc+0x7a>
		n = 0;
 800c594:	2300      	movs	r3, #0
 800c596:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	69db      	ldr	r3, [r3, #28]
 800c59c:	4619      	mov	r1, r3
 800c59e:	68f8      	ldr	r0, [r7, #12]
 800c5a0:	f7ff fb2a 	bl	800bbf8 <move_window>
 800c5a4:	4603      	mov	r3, r0
 800c5a6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c5a8:	7dfb      	ldrb	r3, [r7, #23]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d11d      	bne.n	800c5ea <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	6a1b      	ldr	r3, [r3, #32]
 800c5b2:	781b      	ldrb	r3, [r3, #0]
 800c5b4:	2be5      	cmp	r3, #229	@ 0xe5
 800c5b6:	d004      	beq.n	800c5c2 <dir_alloc+0x50>
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	6a1b      	ldr	r3, [r3, #32]
 800c5bc:	781b      	ldrb	r3, [r3, #0]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d107      	bne.n	800c5d2 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c5c2:	693b      	ldr	r3, [r7, #16]
 800c5c4:	3301      	adds	r3, #1
 800c5c6:	613b      	str	r3, [r7, #16]
 800c5c8:	693a      	ldr	r2, [r7, #16]
 800c5ca:	683b      	ldr	r3, [r7, #0]
 800c5cc:	429a      	cmp	r2, r3
 800c5ce:	d102      	bne.n	800c5d6 <dir_alloc+0x64>
 800c5d0:	e00c      	b.n	800c5ec <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c5d6:	2101      	movs	r1, #1
 800c5d8:	6878      	ldr	r0, [r7, #4]
 800c5da:	f7ff ff05 	bl	800c3e8 <dir_next>
 800c5de:	4603      	mov	r3, r0
 800c5e0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c5e2:	7dfb      	ldrb	r3, [r7, #23]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d0d7      	beq.n	800c598 <dir_alloc+0x26>
 800c5e8:	e000      	b.n	800c5ec <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c5ea:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c5ec:	7dfb      	ldrb	r3, [r7, #23]
 800c5ee:	2b04      	cmp	r3, #4
 800c5f0:	d101      	bne.n	800c5f6 <dir_alloc+0x84>
 800c5f2:	2307      	movs	r3, #7
 800c5f4:	75fb      	strb	r3, [r7, #23]
	return res;
 800c5f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	3718      	adds	r7, #24
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	bd80      	pop	{r7, pc}

0800c600 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c600:	b580      	push	{r7, lr}
 800c602:	b084      	sub	sp, #16
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
 800c608:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	331a      	adds	r3, #26
 800c60e:	4618      	mov	r0, r3
 800c610:	f7ff f87c 	bl	800b70c <ld_word>
 800c614:	4603      	mov	r3, r0
 800c616:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	781b      	ldrb	r3, [r3, #0]
 800c61c:	2b03      	cmp	r3, #3
 800c61e:	d109      	bne.n	800c634 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	3314      	adds	r3, #20
 800c624:	4618      	mov	r0, r3
 800c626:	f7ff f871 	bl	800b70c <ld_word>
 800c62a:	4603      	mov	r3, r0
 800c62c:	041b      	lsls	r3, r3, #16
 800c62e:	68fa      	ldr	r2, [r7, #12]
 800c630:	4313      	orrs	r3, r2
 800c632:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c634:	68fb      	ldr	r3, [r7, #12]
}
 800c636:	4618      	mov	r0, r3
 800c638:	3710      	adds	r7, #16
 800c63a:	46bd      	mov	sp, r7
 800c63c:	bd80      	pop	{r7, pc}

0800c63e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c63e:	b580      	push	{r7, lr}
 800c640:	b084      	sub	sp, #16
 800c642:	af00      	add	r7, sp, #0
 800c644:	60f8      	str	r0, [r7, #12]
 800c646:	60b9      	str	r1, [r7, #8]
 800c648:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c64a:	68bb      	ldr	r3, [r7, #8]
 800c64c:	331a      	adds	r3, #26
 800c64e:	687a      	ldr	r2, [r7, #4]
 800c650:	b292      	uxth	r2, r2
 800c652:	4611      	mov	r1, r2
 800c654:	4618      	mov	r0, r3
 800c656:	f7ff f895 	bl	800b784 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	781b      	ldrb	r3, [r3, #0]
 800c65e:	2b03      	cmp	r3, #3
 800c660:	d109      	bne.n	800c676 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c662:	68bb      	ldr	r3, [r7, #8]
 800c664:	f103 0214 	add.w	r2, r3, #20
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	0c1b      	lsrs	r3, r3, #16
 800c66c:	b29b      	uxth	r3, r3
 800c66e:	4619      	mov	r1, r3
 800c670:	4610      	mov	r0, r2
 800c672:	f7ff f887 	bl	800b784 <st_word>
	}
}
 800c676:	bf00      	nop
 800c678:	3710      	adds	r7, #16
 800c67a:	46bd      	mov	sp, r7
 800c67c:	bd80      	pop	{r7, pc}

0800c67e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c67e:	b580      	push	{r7, lr}
 800c680:	b086      	sub	sp, #24
 800c682:	af00      	add	r7, sp, #0
 800c684:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c68c:	2100      	movs	r1, #0
 800c68e:	6878      	ldr	r0, [r7, #4]
 800c690:	f7ff fe2f 	bl	800c2f2 <dir_sdi>
 800c694:	4603      	mov	r3, r0
 800c696:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c698:	7dfb      	ldrb	r3, [r7, #23]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d001      	beq.n	800c6a2 <dir_find+0x24>
 800c69e:	7dfb      	ldrb	r3, [r7, #23]
 800c6a0:	e03e      	b.n	800c720 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	69db      	ldr	r3, [r3, #28]
 800c6a6:	4619      	mov	r1, r3
 800c6a8:	6938      	ldr	r0, [r7, #16]
 800c6aa:	f7ff faa5 	bl	800bbf8 <move_window>
 800c6ae:	4603      	mov	r3, r0
 800c6b0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c6b2:	7dfb      	ldrb	r3, [r7, #23]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d12f      	bne.n	800c718 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	6a1b      	ldr	r3, [r3, #32]
 800c6bc:	781b      	ldrb	r3, [r3, #0]
 800c6be:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c6c0:	7bfb      	ldrb	r3, [r7, #15]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d102      	bne.n	800c6cc <dir_find+0x4e>
 800c6c6:	2304      	movs	r3, #4
 800c6c8:	75fb      	strb	r3, [r7, #23]
 800c6ca:	e028      	b.n	800c71e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	6a1b      	ldr	r3, [r3, #32]
 800c6d0:	330b      	adds	r3, #11
 800c6d2:	781b      	ldrb	r3, [r3, #0]
 800c6d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c6d8:	b2da      	uxtb	r2, r3
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	6a1b      	ldr	r3, [r3, #32]
 800c6e2:	330b      	adds	r3, #11
 800c6e4:	781b      	ldrb	r3, [r3, #0]
 800c6e6:	f003 0308 	and.w	r3, r3, #8
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d10a      	bne.n	800c704 <dir_find+0x86>
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	6a18      	ldr	r0, [r3, #32]
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	3324      	adds	r3, #36	@ 0x24
 800c6f6:	220b      	movs	r2, #11
 800c6f8:	4619      	mov	r1, r3
 800c6fa:	f7ff f8c6 	bl	800b88a <mem_cmp>
 800c6fe:	4603      	mov	r3, r0
 800c700:	2b00      	cmp	r3, #0
 800c702:	d00b      	beq.n	800c71c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c704:	2100      	movs	r1, #0
 800c706:	6878      	ldr	r0, [r7, #4]
 800c708:	f7ff fe6e 	bl	800c3e8 <dir_next>
 800c70c:	4603      	mov	r3, r0
 800c70e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c710:	7dfb      	ldrb	r3, [r7, #23]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d0c5      	beq.n	800c6a2 <dir_find+0x24>
 800c716:	e002      	b.n	800c71e <dir_find+0xa0>
		if (res != FR_OK) break;
 800c718:	bf00      	nop
 800c71a:	e000      	b.n	800c71e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c71c:	bf00      	nop

	return res;
 800c71e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c720:	4618      	mov	r0, r3
 800c722:	3718      	adds	r7, #24
 800c724:	46bd      	mov	sp, r7
 800c726:	bd80      	pop	{r7, pc}

0800c728 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c728:	b580      	push	{r7, lr}
 800c72a:	b084      	sub	sp, #16
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800c736:	2101      	movs	r1, #1
 800c738:	6878      	ldr	r0, [r7, #4]
 800c73a:	f7ff ff1a 	bl	800c572 <dir_alloc>
 800c73e:	4603      	mov	r3, r0
 800c740:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c742:	7bfb      	ldrb	r3, [r7, #15]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d11c      	bne.n	800c782 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	69db      	ldr	r3, [r3, #28]
 800c74c:	4619      	mov	r1, r3
 800c74e:	68b8      	ldr	r0, [r7, #8]
 800c750:	f7ff fa52 	bl	800bbf8 <move_window>
 800c754:	4603      	mov	r3, r0
 800c756:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c758:	7bfb      	ldrb	r3, [r7, #15]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d111      	bne.n	800c782 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	6a1b      	ldr	r3, [r3, #32]
 800c762:	2220      	movs	r2, #32
 800c764:	2100      	movs	r1, #0
 800c766:	4618      	mov	r0, r3
 800c768:	f7ff f874 	bl	800b854 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	6a18      	ldr	r0, [r3, #32]
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	3324      	adds	r3, #36	@ 0x24
 800c774:	220b      	movs	r2, #11
 800c776:	4619      	mov	r1, r3
 800c778:	f7ff f84b 	bl	800b812 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800c77c:	68bb      	ldr	r3, [r7, #8]
 800c77e:	2201      	movs	r2, #1
 800c780:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c782:	7bfb      	ldrb	r3, [r7, #15]
}
 800c784:	4618      	mov	r0, r3
 800c786:	3710      	adds	r7, #16
 800c788:	46bd      	mov	sp, r7
 800c78a:	bd80      	pop	{r7, pc}

0800c78c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b088      	sub	sp, #32
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
 800c794:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800c796:	683b      	ldr	r3, [r7, #0]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	60fb      	str	r3, [r7, #12]
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	3324      	adds	r3, #36	@ 0x24
 800c7a0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800c7a2:	220b      	movs	r2, #11
 800c7a4:	2120      	movs	r1, #32
 800c7a6:	68b8      	ldr	r0, [r7, #8]
 800c7a8:	f7ff f854 	bl	800b854 <mem_set>
	si = i = 0; ni = 8;
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	613b      	str	r3, [r7, #16]
 800c7b0:	693b      	ldr	r3, [r7, #16]
 800c7b2:	61fb      	str	r3, [r7, #28]
 800c7b4:	2308      	movs	r3, #8
 800c7b6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800c7b8:	69fb      	ldr	r3, [r7, #28]
 800c7ba:	1c5a      	adds	r2, r3, #1
 800c7bc:	61fa      	str	r2, [r7, #28]
 800c7be:	68fa      	ldr	r2, [r7, #12]
 800c7c0:	4413      	add	r3, r2
 800c7c2:	781b      	ldrb	r3, [r3, #0]
 800c7c4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c7c6:	7efb      	ldrb	r3, [r7, #27]
 800c7c8:	2b20      	cmp	r3, #32
 800c7ca:	d94e      	bls.n	800c86a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800c7cc:	7efb      	ldrb	r3, [r7, #27]
 800c7ce:	2b2f      	cmp	r3, #47	@ 0x2f
 800c7d0:	d006      	beq.n	800c7e0 <create_name+0x54>
 800c7d2:	7efb      	ldrb	r3, [r7, #27]
 800c7d4:	2b5c      	cmp	r3, #92	@ 0x5c
 800c7d6:	d110      	bne.n	800c7fa <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c7d8:	e002      	b.n	800c7e0 <create_name+0x54>
 800c7da:	69fb      	ldr	r3, [r7, #28]
 800c7dc:	3301      	adds	r3, #1
 800c7de:	61fb      	str	r3, [r7, #28]
 800c7e0:	68fa      	ldr	r2, [r7, #12]
 800c7e2:	69fb      	ldr	r3, [r7, #28]
 800c7e4:	4413      	add	r3, r2
 800c7e6:	781b      	ldrb	r3, [r3, #0]
 800c7e8:	2b2f      	cmp	r3, #47	@ 0x2f
 800c7ea:	d0f6      	beq.n	800c7da <create_name+0x4e>
 800c7ec:	68fa      	ldr	r2, [r7, #12]
 800c7ee:	69fb      	ldr	r3, [r7, #28]
 800c7f0:	4413      	add	r3, r2
 800c7f2:	781b      	ldrb	r3, [r3, #0]
 800c7f4:	2b5c      	cmp	r3, #92	@ 0x5c
 800c7f6:	d0f0      	beq.n	800c7da <create_name+0x4e>
			break;
 800c7f8:	e038      	b.n	800c86c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800c7fa:	7efb      	ldrb	r3, [r7, #27]
 800c7fc:	2b2e      	cmp	r3, #46	@ 0x2e
 800c7fe:	d003      	beq.n	800c808 <create_name+0x7c>
 800c800:	693a      	ldr	r2, [r7, #16]
 800c802:	697b      	ldr	r3, [r7, #20]
 800c804:	429a      	cmp	r2, r3
 800c806:	d30c      	bcc.n	800c822 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800c808:	697b      	ldr	r3, [r7, #20]
 800c80a:	2b0b      	cmp	r3, #11
 800c80c:	d002      	beq.n	800c814 <create_name+0x88>
 800c80e:	7efb      	ldrb	r3, [r7, #27]
 800c810:	2b2e      	cmp	r3, #46	@ 0x2e
 800c812:	d001      	beq.n	800c818 <create_name+0x8c>
 800c814:	2306      	movs	r3, #6
 800c816:	e044      	b.n	800c8a2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800c818:	2308      	movs	r3, #8
 800c81a:	613b      	str	r3, [r7, #16]
 800c81c:	230b      	movs	r3, #11
 800c81e:	617b      	str	r3, [r7, #20]
			continue;
 800c820:	e022      	b.n	800c868 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800c822:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c826:	2b00      	cmp	r3, #0
 800c828:	da04      	bge.n	800c834 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800c82a:	7efb      	ldrb	r3, [r7, #27]
 800c82c:	3b80      	subs	r3, #128	@ 0x80
 800c82e:	4a1f      	ldr	r2, [pc, #124]	@ (800c8ac <create_name+0x120>)
 800c830:	5cd3      	ldrb	r3, [r2, r3]
 800c832:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800c834:	7efb      	ldrb	r3, [r7, #27]
 800c836:	4619      	mov	r1, r3
 800c838:	481d      	ldr	r0, [pc, #116]	@ (800c8b0 <create_name+0x124>)
 800c83a:	f7ff f84d 	bl	800b8d8 <chk_chr>
 800c83e:	4603      	mov	r3, r0
 800c840:	2b00      	cmp	r3, #0
 800c842:	d001      	beq.n	800c848 <create_name+0xbc>
 800c844:	2306      	movs	r3, #6
 800c846:	e02c      	b.n	800c8a2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800c848:	7efb      	ldrb	r3, [r7, #27]
 800c84a:	2b60      	cmp	r3, #96	@ 0x60
 800c84c:	d905      	bls.n	800c85a <create_name+0xce>
 800c84e:	7efb      	ldrb	r3, [r7, #27]
 800c850:	2b7a      	cmp	r3, #122	@ 0x7a
 800c852:	d802      	bhi.n	800c85a <create_name+0xce>
 800c854:	7efb      	ldrb	r3, [r7, #27]
 800c856:	3b20      	subs	r3, #32
 800c858:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800c85a:	693b      	ldr	r3, [r7, #16]
 800c85c:	1c5a      	adds	r2, r3, #1
 800c85e:	613a      	str	r2, [r7, #16]
 800c860:	68ba      	ldr	r2, [r7, #8]
 800c862:	4413      	add	r3, r2
 800c864:	7efa      	ldrb	r2, [r7, #27]
 800c866:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800c868:	e7a6      	b.n	800c7b8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c86a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800c86c:	68fa      	ldr	r2, [r7, #12]
 800c86e:	69fb      	ldr	r3, [r7, #28]
 800c870:	441a      	add	r2, r3
 800c872:	683b      	ldr	r3, [r7, #0]
 800c874:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800c876:	693b      	ldr	r3, [r7, #16]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d101      	bne.n	800c880 <create_name+0xf4>
 800c87c:	2306      	movs	r3, #6
 800c87e:	e010      	b.n	800c8a2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c880:	68bb      	ldr	r3, [r7, #8]
 800c882:	781b      	ldrb	r3, [r3, #0]
 800c884:	2be5      	cmp	r3, #229	@ 0xe5
 800c886:	d102      	bne.n	800c88e <create_name+0x102>
 800c888:	68bb      	ldr	r3, [r7, #8]
 800c88a:	2205      	movs	r2, #5
 800c88c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c88e:	7efb      	ldrb	r3, [r7, #27]
 800c890:	2b20      	cmp	r3, #32
 800c892:	d801      	bhi.n	800c898 <create_name+0x10c>
 800c894:	2204      	movs	r2, #4
 800c896:	e000      	b.n	800c89a <create_name+0x10e>
 800c898:	2200      	movs	r2, #0
 800c89a:	68bb      	ldr	r3, [r7, #8]
 800c89c:	330b      	adds	r3, #11
 800c89e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800c8a0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	3720      	adds	r7, #32
 800c8a6:	46bd      	mov	sp, r7
 800c8a8:	bd80      	pop	{r7, pc}
 800c8aa:	bf00      	nop
 800c8ac:	0800f758 	.word	0x0800f758
 800c8b0:	0800f6c8 	.word	0x0800f6c8

0800c8b4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b086      	sub	sp, #24
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
 800c8bc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c8c2:	693b      	ldr	r3, [r7, #16]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c8c8:	e002      	b.n	800c8d0 <follow_path+0x1c>
 800c8ca:	683b      	ldr	r3, [r7, #0]
 800c8cc:	3301      	adds	r3, #1
 800c8ce:	603b      	str	r3, [r7, #0]
 800c8d0:	683b      	ldr	r3, [r7, #0]
 800c8d2:	781b      	ldrb	r3, [r3, #0]
 800c8d4:	2b2f      	cmp	r3, #47	@ 0x2f
 800c8d6:	d0f8      	beq.n	800c8ca <follow_path+0x16>
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	781b      	ldrb	r3, [r3, #0]
 800c8dc:	2b5c      	cmp	r3, #92	@ 0x5c
 800c8de:	d0f4      	beq.n	800c8ca <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c8e0:	693b      	ldr	r3, [r7, #16]
 800c8e2:	2200      	movs	r2, #0
 800c8e4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c8e6:	683b      	ldr	r3, [r7, #0]
 800c8e8:	781b      	ldrb	r3, [r3, #0]
 800c8ea:	2b1f      	cmp	r3, #31
 800c8ec:	d80a      	bhi.n	800c904 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	2280      	movs	r2, #128	@ 0x80
 800c8f2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800c8f6:	2100      	movs	r1, #0
 800c8f8:	6878      	ldr	r0, [r7, #4]
 800c8fa:	f7ff fcfa 	bl	800c2f2 <dir_sdi>
 800c8fe:	4603      	mov	r3, r0
 800c900:	75fb      	strb	r3, [r7, #23]
 800c902:	e043      	b.n	800c98c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c904:	463b      	mov	r3, r7
 800c906:	4619      	mov	r1, r3
 800c908:	6878      	ldr	r0, [r7, #4]
 800c90a:	f7ff ff3f 	bl	800c78c <create_name>
 800c90e:	4603      	mov	r3, r0
 800c910:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c912:	7dfb      	ldrb	r3, [r7, #23]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d134      	bne.n	800c982 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c918:	6878      	ldr	r0, [r7, #4]
 800c91a:	f7ff feb0 	bl	800c67e <dir_find>
 800c91e:	4603      	mov	r3, r0
 800c920:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c928:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c92a:	7dfb      	ldrb	r3, [r7, #23]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d00a      	beq.n	800c946 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c930:	7dfb      	ldrb	r3, [r7, #23]
 800c932:	2b04      	cmp	r3, #4
 800c934:	d127      	bne.n	800c986 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c936:	7afb      	ldrb	r3, [r7, #11]
 800c938:	f003 0304 	and.w	r3, r3, #4
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d122      	bne.n	800c986 <follow_path+0xd2>
 800c940:	2305      	movs	r3, #5
 800c942:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c944:	e01f      	b.n	800c986 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c946:	7afb      	ldrb	r3, [r7, #11]
 800c948:	f003 0304 	and.w	r3, r3, #4
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d11c      	bne.n	800c98a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c950:	693b      	ldr	r3, [r7, #16]
 800c952:	799b      	ldrb	r3, [r3, #6]
 800c954:	f003 0310 	and.w	r3, r3, #16
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d102      	bne.n	800c962 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c95c:	2305      	movs	r3, #5
 800c95e:	75fb      	strb	r3, [r7, #23]
 800c960:	e014      	b.n	800c98c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	695b      	ldr	r3, [r3, #20]
 800c96c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c970:	4413      	add	r3, r2
 800c972:	4619      	mov	r1, r3
 800c974:	68f8      	ldr	r0, [r7, #12]
 800c976:	f7ff fe43 	bl	800c600 <ld_clust>
 800c97a:	4602      	mov	r2, r0
 800c97c:	693b      	ldr	r3, [r7, #16]
 800c97e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c980:	e7c0      	b.n	800c904 <follow_path+0x50>
			if (res != FR_OK) break;
 800c982:	bf00      	nop
 800c984:	e002      	b.n	800c98c <follow_path+0xd8>
				break;
 800c986:	bf00      	nop
 800c988:	e000      	b.n	800c98c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c98a:	bf00      	nop
			}
		}
	}

	return res;
 800c98c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c98e:	4618      	mov	r0, r3
 800c990:	3718      	adds	r7, #24
 800c992:	46bd      	mov	sp, r7
 800c994:	bd80      	pop	{r7, pc}

0800c996 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c996:	b480      	push	{r7}
 800c998:	b087      	sub	sp, #28
 800c99a:	af00      	add	r7, sp, #0
 800c99c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c99e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c9a2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d031      	beq.n	800ca10 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	617b      	str	r3, [r7, #20]
 800c9b2:	e002      	b.n	800c9ba <get_ldnumber+0x24>
 800c9b4:	697b      	ldr	r3, [r7, #20]
 800c9b6:	3301      	adds	r3, #1
 800c9b8:	617b      	str	r3, [r7, #20]
 800c9ba:	697b      	ldr	r3, [r7, #20]
 800c9bc:	781b      	ldrb	r3, [r3, #0]
 800c9be:	2b20      	cmp	r3, #32
 800c9c0:	d903      	bls.n	800c9ca <get_ldnumber+0x34>
 800c9c2:	697b      	ldr	r3, [r7, #20]
 800c9c4:	781b      	ldrb	r3, [r3, #0]
 800c9c6:	2b3a      	cmp	r3, #58	@ 0x3a
 800c9c8:	d1f4      	bne.n	800c9b4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c9ca:	697b      	ldr	r3, [r7, #20]
 800c9cc:	781b      	ldrb	r3, [r3, #0]
 800c9ce:	2b3a      	cmp	r3, #58	@ 0x3a
 800c9d0:	d11c      	bne.n	800ca0c <get_ldnumber+0x76>
			tp = *path;
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	1c5a      	adds	r2, r3, #1
 800c9dc:	60fa      	str	r2, [r7, #12]
 800c9de:	781b      	ldrb	r3, [r3, #0]
 800c9e0:	3b30      	subs	r3, #48	@ 0x30
 800c9e2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c9e4:	68bb      	ldr	r3, [r7, #8]
 800c9e6:	2b09      	cmp	r3, #9
 800c9e8:	d80e      	bhi.n	800ca08 <get_ldnumber+0x72>
 800c9ea:	68fa      	ldr	r2, [r7, #12]
 800c9ec:	697b      	ldr	r3, [r7, #20]
 800c9ee:	429a      	cmp	r2, r3
 800c9f0:	d10a      	bne.n	800ca08 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c9f2:	68bb      	ldr	r3, [r7, #8]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d107      	bne.n	800ca08 <get_ldnumber+0x72>
					vol = (int)i;
 800c9f8:	68bb      	ldr	r3, [r7, #8]
 800c9fa:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c9fc:	697b      	ldr	r3, [r7, #20]
 800c9fe:	3301      	adds	r3, #1
 800ca00:	617b      	str	r3, [r7, #20]
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	697a      	ldr	r2, [r7, #20]
 800ca06:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ca08:	693b      	ldr	r3, [r7, #16]
 800ca0a:	e002      	b.n	800ca12 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ca10:	693b      	ldr	r3, [r7, #16]
}
 800ca12:	4618      	mov	r0, r3
 800ca14:	371c      	adds	r7, #28
 800ca16:	46bd      	mov	sp, r7
 800ca18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca1c:	4770      	bx	lr
	...

0800ca20 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b082      	sub	sp, #8
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
 800ca28:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	70da      	strb	r2, [r3, #3]
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ca36:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ca38:	6839      	ldr	r1, [r7, #0]
 800ca3a:	6878      	ldr	r0, [r7, #4]
 800ca3c:	f7ff f8dc 	bl	800bbf8 <move_window>
 800ca40:	4603      	mov	r3, r0
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d001      	beq.n	800ca4a <check_fs+0x2a>
 800ca46:	2304      	movs	r3, #4
 800ca48:	e038      	b.n	800cabc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	3330      	adds	r3, #48	@ 0x30
 800ca4e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800ca52:	4618      	mov	r0, r3
 800ca54:	f7fe fe5a 	bl	800b70c <ld_word>
 800ca58:	4603      	mov	r3, r0
 800ca5a:	461a      	mov	r2, r3
 800ca5c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800ca60:	429a      	cmp	r2, r3
 800ca62:	d001      	beq.n	800ca68 <check_fs+0x48>
 800ca64:	2303      	movs	r3, #3
 800ca66:	e029      	b.n	800cabc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ca6e:	2be9      	cmp	r3, #233	@ 0xe9
 800ca70:	d009      	beq.n	800ca86 <check_fs+0x66>
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ca78:	2beb      	cmp	r3, #235	@ 0xeb
 800ca7a:	d11e      	bne.n	800caba <check_fs+0x9a>
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800ca82:	2b90      	cmp	r3, #144	@ 0x90
 800ca84:	d119      	bne.n	800caba <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	3330      	adds	r3, #48	@ 0x30
 800ca8a:	3336      	adds	r3, #54	@ 0x36
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	f7fe fe56 	bl	800b73e <ld_dword>
 800ca92:	4603      	mov	r3, r0
 800ca94:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800ca98:	4a0a      	ldr	r2, [pc, #40]	@ (800cac4 <check_fs+0xa4>)
 800ca9a:	4293      	cmp	r3, r2
 800ca9c:	d101      	bne.n	800caa2 <check_fs+0x82>
 800ca9e:	2300      	movs	r3, #0
 800caa0:	e00c      	b.n	800cabc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	3330      	adds	r3, #48	@ 0x30
 800caa6:	3352      	adds	r3, #82	@ 0x52
 800caa8:	4618      	mov	r0, r3
 800caaa:	f7fe fe48 	bl	800b73e <ld_dword>
 800caae:	4603      	mov	r3, r0
 800cab0:	4a05      	ldr	r2, [pc, #20]	@ (800cac8 <check_fs+0xa8>)
 800cab2:	4293      	cmp	r3, r2
 800cab4:	d101      	bne.n	800caba <check_fs+0x9a>
 800cab6:	2300      	movs	r3, #0
 800cab8:	e000      	b.n	800cabc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800caba:	2302      	movs	r3, #2
}
 800cabc:	4618      	mov	r0, r3
 800cabe:	3708      	adds	r7, #8
 800cac0:	46bd      	mov	sp, r7
 800cac2:	bd80      	pop	{r7, pc}
 800cac4:	00544146 	.word	0x00544146
 800cac8:	33544146 	.word	0x33544146

0800cacc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800cacc:	b580      	push	{r7, lr}
 800cace:	b096      	sub	sp, #88	@ 0x58
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	60f8      	str	r0, [r7, #12]
 800cad4:	60b9      	str	r1, [r7, #8]
 800cad6:	4613      	mov	r3, r2
 800cad8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800cada:	68bb      	ldr	r3, [r7, #8]
 800cadc:	2200      	movs	r2, #0
 800cade:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800cae0:	68f8      	ldr	r0, [r7, #12]
 800cae2:	f7ff ff58 	bl	800c996 <get_ldnumber>
 800cae6:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800cae8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800caea:	2b00      	cmp	r3, #0
 800caec:	da01      	bge.n	800caf2 <find_volume+0x26>
 800caee:	230b      	movs	r3, #11
 800caf0:	e22d      	b.n	800cf4e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800caf2:	4aa1      	ldr	r2, [pc, #644]	@ (800cd78 <find_volume+0x2ac>)
 800caf4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800caf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cafa:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800cafc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d101      	bne.n	800cb06 <find_volume+0x3a>
 800cb02:	230c      	movs	r3, #12
 800cb04:	e223      	b.n	800cf4e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800cb06:	68bb      	ldr	r3, [r7, #8]
 800cb08:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cb0a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800cb0c:	79fb      	ldrb	r3, [r7, #7]
 800cb0e:	f023 0301 	bic.w	r3, r3, #1
 800cb12:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800cb14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb16:	781b      	ldrb	r3, [r3, #0]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d01a      	beq.n	800cb52 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800cb1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb1e:	785b      	ldrb	r3, [r3, #1]
 800cb20:	4618      	mov	r0, r3
 800cb22:	f7fe fd55 	bl	800b5d0 <disk_status>
 800cb26:	4603      	mov	r3, r0
 800cb28:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800cb2c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cb30:	f003 0301 	and.w	r3, r3, #1
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d10c      	bne.n	800cb52 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800cb38:	79fb      	ldrb	r3, [r7, #7]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d007      	beq.n	800cb4e <find_volume+0x82>
 800cb3e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cb42:	f003 0304 	and.w	r3, r3, #4
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d001      	beq.n	800cb4e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800cb4a:	230a      	movs	r3, #10
 800cb4c:	e1ff      	b.n	800cf4e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800cb4e:	2300      	movs	r3, #0
 800cb50:	e1fd      	b.n	800cf4e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800cb52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb54:	2200      	movs	r2, #0
 800cb56:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800cb58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb5a:	b2da      	uxtb	r2, r3
 800cb5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb5e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800cb60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb62:	785b      	ldrb	r3, [r3, #1]
 800cb64:	4618      	mov	r0, r3
 800cb66:	f7fe fd4d 	bl	800b604 <disk_initialize>
 800cb6a:	4603      	mov	r3, r0
 800cb6c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800cb70:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cb74:	f003 0301 	and.w	r3, r3, #1
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d001      	beq.n	800cb80 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800cb7c:	2303      	movs	r3, #3
 800cb7e:	e1e6      	b.n	800cf4e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800cb80:	79fb      	ldrb	r3, [r7, #7]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d007      	beq.n	800cb96 <find_volume+0xca>
 800cb86:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cb8a:	f003 0304 	and.w	r3, r3, #4
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d001      	beq.n	800cb96 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800cb92:	230a      	movs	r3, #10
 800cb94:	e1db      	b.n	800cf4e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800cb96:	2300      	movs	r3, #0
 800cb98:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800cb9a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cb9c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800cb9e:	f7ff ff3f 	bl	800ca20 <check_fs>
 800cba2:	4603      	mov	r3, r0
 800cba4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800cba8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cbac:	2b02      	cmp	r3, #2
 800cbae:	d149      	bne.n	800cc44 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	643b      	str	r3, [r7, #64]	@ 0x40
 800cbb4:	e01e      	b.n	800cbf4 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800cbb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbb8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cbbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cbbe:	011b      	lsls	r3, r3, #4
 800cbc0:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800cbc4:	4413      	add	r3, r2
 800cbc6:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800cbc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbca:	3304      	adds	r3, #4
 800cbcc:	781b      	ldrb	r3, [r3, #0]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d006      	beq.n	800cbe0 <find_volume+0x114>
 800cbd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbd4:	3308      	adds	r3, #8
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	f7fe fdb1 	bl	800b73e <ld_dword>
 800cbdc:	4602      	mov	r2, r0
 800cbde:	e000      	b.n	800cbe2 <find_volume+0x116>
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cbe4:	009b      	lsls	r3, r3, #2
 800cbe6:	3358      	adds	r3, #88	@ 0x58
 800cbe8:	443b      	add	r3, r7
 800cbea:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cbee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cbf0:	3301      	adds	r3, #1
 800cbf2:	643b      	str	r3, [r7, #64]	@ 0x40
 800cbf4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cbf6:	2b03      	cmp	r3, #3
 800cbf8:	d9dd      	bls.n	800cbb6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800cbfe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d002      	beq.n	800cc0a <find_volume+0x13e>
 800cc04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cc06:	3b01      	subs	r3, #1
 800cc08:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800cc0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cc0c:	009b      	lsls	r3, r3, #2
 800cc0e:	3358      	adds	r3, #88	@ 0x58
 800cc10:	443b      	add	r3, r7
 800cc12:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800cc16:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800cc18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d005      	beq.n	800cc2a <find_volume+0x15e>
 800cc1e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cc20:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800cc22:	f7ff fefd 	bl	800ca20 <check_fs>
 800cc26:	4603      	mov	r3, r0
 800cc28:	e000      	b.n	800cc2c <find_volume+0x160>
 800cc2a:	2303      	movs	r3, #3
 800cc2c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800cc30:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cc34:	2b01      	cmp	r3, #1
 800cc36:	d905      	bls.n	800cc44 <find_volume+0x178>
 800cc38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cc3a:	3301      	adds	r3, #1
 800cc3c:	643b      	str	r3, [r7, #64]	@ 0x40
 800cc3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cc40:	2b03      	cmp	r3, #3
 800cc42:	d9e2      	bls.n	800cc0a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800cc44:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cc48:	2b04      	cmp	r3, #4
 800cc4a:	d101      	bne.n	800cc50 <find_volume+0x184>
 800cc4c:	2301      	movs	r3, #1
 800cc4e:	e17e      	b.n	800cf4e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800cc50:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cc54:	2b01      	cmp	r3, #1
 800cc56:	d901      	bls.n	800cc5c <find_volume+0x190>
 800cc58:	230d      	movs	r3, #13
 800cc5a:	e178      	b.n	800cf4e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800cc5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc5e:	3330      	adds	r3, #48	@ 0x30
 800cc60:	330b      	adds	r3, #11
 800cc62:	4618      	mov	r0, r3
 800cc64:	f7fe fd52 	bl	800b70c <ld_word>
 800cc68:	4603      	mov	r3, r0
 800cc6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cc6e:	d001      	beq.n	800cc74 <find_volume+0x1a8>
 800cc70:	230d      	movs	r3, #13
 800cc72:	e16c      	b.n	800cf4e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800cc74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc76:	3330      	adds	r3, #48	@ 0x30
 800cc78:	3316      	adds	r3, #22
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	f7fe fd46 	bl	800b70c <ld_word>
 800cc80:	4603      	mov	r3, r0
 800cc82:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800cc84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d106      	bne.n	800cc98 <find_volume+0x1cc>
 800cc8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc8c:	3330      	adds	r3, #48	@ 0x30
 800cc8e:	3324      	adds	r3, #36	@ 0x24
 800cc90:	4618      	mov	r0, r3
 800cc92:	f7fe fd54 	bl	800b73e <ld_dword>
 800cc96:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800cc98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc9a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cc9c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800cc9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cca0:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800cca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cca6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800cca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccaa:	789b      	ldrb	r3, [r3, #2]
 800ccac:	2b01      	cmp	r3, #1
 800ccae:	d005      	beq.n	800ccbc <find_volume+0x1f0>
 800ccb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccb2:	789b      	ldrb	r3, [r3, #2]
 800ccb4:	2b02      	cmp	r3, #2
 800ccb6:	d001      	beq.n	800ccbc <find_volume+0x1f0>
 800ccb8:	230d      	movs	r3, #13
 800ccba:	e148      	b.n	800cf4e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800ccbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccbe:	789b      	ldrb	r3, [r3, #2]
 800ccc0:	461a      	mov	r2, r3
 800ccc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ccc4:	fb02 f303 	mul.w	r3, r2, r3
 800ccc8:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800ccca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cccc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ccd0:	461a      	mov	r2, r3
 800ccd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccd4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ccd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccd8:	895b      	ldrh	r3, [r3, #10]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d008      	beq.n	800ccf0 <find_volume+0x224>
 800ccde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cce0:	895b      	ldrh	r3, [r3, #10]
 800cce2:	461a      	mov	r2, r3
 800cce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cce6:	895b      	ldrh	r3, [r3, #10]
 800cce8:	3b01      	subs	r3, #1
 800ccea:	4013      	ands	r3, r2
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d001      	beq.n	800ccf4 <find_volume+0x228>
 800ccf0:	230d      	movs	r3, #13
 800ccf2:	e12c      	b.n	800cf4e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ccf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccf6:	3330      	adds	r3, #48	@ 0x30
 800ccf8:	3311      	adds	r3, #17
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	f7fe fd06 	bl	800b70c <ld_word>
 800cd00:	4603      	mov	r3, r0
 800cd02:	461a      	mov	r2, r3
 800cd04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd06:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800cd08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd0a:	891b      	ldrh	r3, [r3, #8]
 800cd0c:	f003 030f 	and.w	r3, r3, #15
 800cd10:	b29b      	uxth	r3, r3
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d001      	beq.n	800cd1a <find_volume+0x24e>
 800cd16:	230d      	movs	r3, #13
 800cd18:	e119      	b.n	800cf4e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800cd1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd1c:	3330      	adds	r3, #48	@ 0x30
 800cd1e:	3313      	adds	r3, #19
 800cd20:	4618      	mov	r0, r3
 800cd22:	f7fe fcf3 	bl	800b70c <ld_word>
 800cd26:	4603      	mov	r3, r0
 800cd28:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800cd2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d106      	bne.n	800cd3e <find_volume+0x272>
 800cd30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd32:	3330      	adds	r3, #48	@ 0x30
 800cd34:	3320      	adds	r3, #32
 800cd36:	4618      	mov	r0, r3
 800cd38:	f7fe fd01 	bl	800b73e <ld_dword>
 800cd3c:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800cd3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd40:	3330      	adds	r3, #48	@ 0x30
 800cd42:	330e      	adds	r3, #14
 800cd44:	4618      	mov	r0, r3
 800cd46:	f7fe fce1 	bl	800b70c <ld_word>
 800cd4a:	4603      	mov	r3, r0
 800cd4c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800cd4e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d101      	bne.n	800cd58 <find_volume+0x28c>
 800cd54:	230d      	movs	r3, #13
 800cd56:	e0fa      	b.n	800cf4e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800cd58:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800cd5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cd5c:	4413      	add	r3, r2
 800cd5e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cd60:	8912      	ldrh	r2, [r2, #8]
 800cd62:	0912      	lsrs	r2, r2, #4
 800cd64:	b292      	uxth	r2, r2
 800cd66:	4413      	add	r3, r2
 800cd68:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800cd6a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cd6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd6e:	429a      	cmp	r2, r3
 800cd70:	d204      	bcs.n	800cd7c <find_volume+0x2b0>
 800cd72:	230d      	movs	r3, #13
 800cd74:	e0eb      	b.n	800cf4e <find_volume+0x482>
 800cd76:	bf00      	nop
 800cd78:	240007a4 	.word	0x240007a4
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800cd7c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cd7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd80:	1ad3      	subs	r3, r2, r3
 800cd82:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cd84:	8952      	ldrh	r2, [r2, #10]
 800cd86:	fbb3 f3f2 	udiv	r3, r3, r2
 800cd8a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800cd8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d101      	bne.n	800cd96 <find_volume+0x2ca>
 800cd92:	230d      	movs	r3, #13
 800cd94:	e0db      	b.n	800cf4e <find_volume+0x482>
		fmt = FS_FAT32;
 800cd96:	2303      	movs	r3, #3
 800cd98:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800cd9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd9e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800cda2:	4293      	cmp	r3, r2
 800cda4:	d802      	bhi.n	800cdac <find_volume+0x2e0>
 800cda6:	2302      	movs	r3, #2
 800cda8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800cdac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdae:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800cdb2:	4293      	cmp	r3, r2
 800cdb4:	d802      	bhi.n	800cdbc <find_volume+0x2f0>
 800cdb6:	2301      	movs	r3, #1
 800cdb8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800cdbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdbe:	1c9a      	adds	r2, r3, #2
 800cdc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdc2:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800cdc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdc6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cdc8:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800cdca:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800cdcc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cdce:	441a      	add	r2, r3
 800cdd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdd2:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800cdd4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cdd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdd8:	441a      	add	r2, r3
 800cdda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cddc:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800cdde:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cde2:	2b03      	cmp	r3, #3
 800cde4:	d11e      	bne.n	800ce24 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800cde6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cde8:	3330      	adds	r3, #48	@ 0x30
 800cdea:	332a      	adds	r3, #42	@ 0x2a
 800cdec:	4618      	mov	r0, r3
 800cdee:	f7fe fc8d 	bl	800b70c <ld_word>
 800cdf2:	4603      	mov	r3, r0
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d001      	beq.n	800cdfc <find_volume+0x330>
 800cdf8:	230d      	movs	r3, #13
 800cdfa:	e0a8      	b.n	800cf4e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800cdfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdfe:	891b      	ldrh	r3, [r3, #8]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d001      	beq.n	800ce08 <find_volume+0x33c>
 800ce04:	230d      	movs	r3, #13
 800ce06:	e0a2      	b.n	800cf4e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ce08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce0a:	3330      	adds	r3, #48	@ 0x30
 800ce0c:	332c      	adds	r3, #44	@ 0x2c
 800ce0e:	4618      	mov	r0, r3
 800ce10:	f7fe fc95 	bl	800b73e <ld_dword>
 800ce14:	4602      	mov	r2, r0
 800ce16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce18:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800ce1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce1c:	695b      	ldr	r3, [r3, #20]
 800ce1e:	009b      	lsls	r3, r3, #2
 800ce20:	647b      	str	r3, [r7, #68]	@ 0x44
 800ce22:	e01f      	b.n	800ce64 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800ce24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce26:	891b      	ldrh	r3, [r3, #8]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d101      	bne.n	800ce30 <find_volume+0x364>
 800ce2c:	230d      	movs	r3, #13
 800ce2e:	e08e      	b.n	800cf4e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ce30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce32:	6a1a      	ldr	r2, [r3, #32]
 800ce34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ce36:	441a      	add	r2, r3
 800ce38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce3a:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ce3c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ce40:	2b02      	cmp	r3, #2
 800ce42:	d103      	bne.n	800ce4c <find_volume+0x380>
 800ce44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce46:	695b      	ldr	r3, [r3, #20]
 800ce48:	005b      	lsls	r3, r3, #1
 800ce4a:	e00a      	b.n	800ce62 <find_volume+0x396>
 800ce4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce4e:	695a      	ldr	r2, [r3, #20]
 800ce50:	4613      	mov	r3, r2
 800ce52:	005b      	lsls	r3, r3, #1
 800ce54:	4413      	add	r3, r2
 800ce56:	085a      	lsrs	r2, r3, #1
 800ce58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce5a:	695b      	ldr	r3, [r3, #20]
 800ce5c:	f003 0301 	and.w	r3, r3, #1
 800ce60:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800ce62:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800ce64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce66:	699a      	ldr	r2, [r3, #24]
 800ce68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ce6a:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800ce6e:	0a5b      	lsrs	r3, r3, #9
 800ce70:	429a      	cmp	r2, r3
 800ce72:	d201      	bcs.n	800ce78 <find_volume+0x3ac>
 800ce74:	230d      	movs	r3, #13
 800ce76:	e06a      	b.n	800cf4e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ce78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce7a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ce7e:	611a      	str	r2, [r3, #16]
 800ce80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce82:	691a      	ldr	r2, [r3, #16]
 800ce84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce86:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800ce88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce8a:	2280      	movs	r2, #128	@ 0x80
 800ce8c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800ce8e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ce92:	2b03      	cmp	r3, #3
 800ce94:	d149      	bne.n	800cf2a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ce96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce98:	3330      	adds	r3, #48	@ 0x30
 800ce9a:	3330      	adds	r3, #48	@ 0x30
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	f7fe fc35 	bl	800b70c <ld_word>
 800cea2:	4603      	mov	r3, r0
 800cea4:	2b01      	cmp	r3, #1
 800cea6:	d140      	bne.n	800cf2a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800cea8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ceaa:	3301      	adds	r3, #1
 800ceac:	4619      	mov	r1, r3
 800ceae:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ceb0:	f7fe fea2 	bl	800bbf8 <move_window>
 800ceb4:	4603      	mov	r3, r0
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d137      	bne.n	800cf2a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800ceba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cebc:	2200      	movs	r2, #0
 800cebe:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800cec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cec2:	3330      	adds	r3, #48	@ 0x30
 800cec4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800cec8:	4618      	mov	r0, r3
 800ceca:	f7fe fc1f 	bl	800b70c <ld_word>
 800cece:	4603      	mov	r3, r0
 800ced0:	461a      	mov	r2, r3
 800ced2:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800ced6:	429a      	cmp	r2, r3
 800ced8:	d127      	bne.n	800cf2a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800ceda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cedc:	3330      	adds	r3, #48	@ 0x30
 800cede:	4618      	mov	r0, r3
 800cee0:	f7fe fc2d 	bl	800b73e <ld_dword>
 800cee4:	4603      	mov	r3, r0
 800cee6:	4a1c      	ldr	r2, [pc, #112]	@ (800cf58 <find_volume+0x48c>)
 800cee8:	4293      	cmp	r3, r2
 800ceea:	d11e      	bne.n	800cf2a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800ceec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ceee:	3330      	adds	r3, #48	@ 0x30
 800cef0:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800cef4:	4618      	mov	r0, r3
 800cef6:	f7fe fc22 	bl	800b73e <ld_dword>
 800cefa:	4603      	mov	r3, r0
 800cefc:	4a17      	ldr	r2, [pc, #92]	@ (800cf5c <find_volume+0x490>)
 800cefe:	4293      	cmp	r3, r2
 800cf00:	d113      	bne.n	800cf2a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800cf02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf04:	3330      	adds	r3, #48	@ 0x30
 800cf06:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	f7fe fc17 	bl	800b73e <ld_dword>
 800cf10:	4602      	mov	r2, r0
 800cf12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf14:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800cf16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf18:	3330      	adds	r3, #48	@ 0x30
 800cf1a:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800cf1e:	4618      	mov	r0, r3
 800cf20:	f7fe fc0d 	bl	800b73e <ld_dword>
 800cf24:	4602      	mov	r2, r0
 800cf26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf28:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800cf2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf2c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800cf30:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800cf32:	4b0b      	ldr	r3, [pc, #44]	@ (800cf60 <find_volume+0x494>)
 800cf34:	881b      	ldrh	r3, [r3, #0]
 800cf36:	3301      	adds	r3, #1
 800cf38:	b29a      	uxth	r2, r3
 800cf3a:	4b09      	ldr	r3, [pc, #36]	@ (800cf60 <find_volume+0x494>)
 800cf3c:	801a      	strh	r2, [r3, #0]
 800cf3e:	4b08      	ldr	r3, [pc, #32]	@ (800cf60 <find_volume+0x494>)
 800cf40:	881a      	ldrh	r2, [r3, #0]
 800cf42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf44:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800cf46:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800cf48:	f7fe fdee 	bl	800bb28 <clear_lock>
#endif
	return FR_OK;
 800cf4c:	2300      	movs	r3, #0
}
 800cf4e:	4618      	mov	r0, r3
 800cf50:	3758      	adds	r7, #88	@ 0x58
 800cf52:	46bd      	mov	sp, r7
 800cf54:	bd80      	pop	{r7, pc}
 800cf56:	bf00      	nop
 800cf58:	41615252 	.word	0x41615252
 800cf5c:	61417272 	.word	0x61417272
 800cf60:	240007a8 	.word	0x240007a8

0800cf64 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b084      	sub	sp, #16
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
 800cf6c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800cf6e:	2309      	movs	r3, #9
 800cf70:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d01c      	beq.n	800cfb2 <validate+0x4e>
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d018      	beq.n	800cfb2 <validate+0x4e>
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	781b      	ldrb	r3, [r3, #0]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d013      	beq.n	800cfb2 <validate+0x4e>
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	889a      	ldrh	r2, [r3, #4]
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	88db      	ldrh	r3, [r3, #6]
 800cf94:	429a      	cmp	r2, r3
 800cf96:	d10c      	bne.n	800cfb2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	785b      	ldrb	r3, [r3, #1]
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	f7fe fb16 	bl	800b5d0 <disk_status>
 800cfa4:	4603      	mov	r3, r0
 800cfa6:	f003 0301 	and.w	r3, r3, #1
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d101      	bne.n	800cfb2 <validate+0x4e>
			res = FR_OK;
 800cfae:	2300      	movs	r3, #0
 800cfb0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800cfb2:	7bfb      	ldrb	r3, [r7, #15]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d102      	bne.n	800cfbe <validate+0x5a>
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	e000      	b.n	800cfc0 <validate+0x5c>
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	683a      	ldr	r2, [r7, #0]
 800cfc2:	6013      	str	r3, [r2, #0]
	return res;
 800cfc4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	3710      	adds	r7, #16
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	bd80      	pop	{r7, pc}
	...

0800cfd0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b088      	sub	sp, #32
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	60f8      	str	r0, [r7, #12]
 800cfd8:	60b9      	str	r1, [r7, #8]
 800cfda:	4613      	mov	r3, r2
 800cfdc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800cfde:	68bb      	ldr	r3, [r7, #8]
 800cfe0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800cfe2:	f107 0310 	add.w	r3, r7, #16
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	f7ff fcd5 	bl	800c996 <get_ldnumber>
 800cfec:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800cfee:	69fb      	ldr	r3, [r7, #28]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	da01      	bge.n	800cff8 <f_mount+0x28>
 800cff4:	230b      	movs	r3, #11
 800cff6:	e02b      	b.n	800d050 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800cff8:	4a17      	ldr	r2, [pc, #92]	@ (800d058 <f_mount+0x88>)
 800cffa:	69fb      	ldr	r3, [r7, #28]
 800cffc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d000:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d002:	69bb      	ldr	r3, [r7, #24]
 800d004:	2b00      	cmp	r3, #0
 800d006:	d005      	beq.n	800d014 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d008:	69b8      	ldr	r0, [r7, #24]
 800d00a:	f7fe fd8d 	bl	800bb28 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d00e:	69bb      	ldr	r3, [r7, #24]
 800d010:	2200      	movs	r2, #0
 800d012:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d002      	beq.n	800d020 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	2200      	movs	r2, #0
 800d01e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d020:	68fa      	ldr	r2, [r7, #12]
 800d022:	490d      	ldr	r1, [pc, #52]	@ (800d058 <f_mount+0x88>)
 800d024:	69fb      	ldr	r3, [r7, #28]
 800d026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d002      	beq.n	800d036 <f_mount+0x66>
 800d030:	79fb      	ldrb	r3, [r7, #7]
 800d032:	2b01      	cmp	r3, #1
 800d034:	d001      	beq.n	800d03a <f_mount+0x6a>
 800d036:	2300      	movs	r3, #0
 800d038:	e00a      	b.n	800d050 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d03a:	f107 010c 	add.w	r1, r7, #12
 800d03e:	f107 0308 	add.w	r3, r7, #8
 800d042:	2200      	movs	r2, #0
 800d044:	4618      	mov	r0, r3
 800d046:	f7ff fd41 	bl	800cacc <find_volume>
 800d04a:	4603      	mov	r3, r0
 800d04c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d04e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d050:	4618      	mov	r0, r3
 800d052:	3720      	adds	r7, #32
 800d054:	46bd      	mov	sp, r7
 800d056:	bd80      	pop	{r7, pc}
 800d058:	240007a4 	.word	0x240007a4

0800d05c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b098      	sub	sp, #96	@ 0x60
 800d060:	af00      	add	r7, sp, #0
 800d062:	60f8      	str	r0, [r7, #12]
 800d064:	60b9      	str	r1, [r7, #8]
 800d066:	4613      	mov	r3, r2
 800d068:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d101      	bne.n	800d074 <f_open+0x18>
 800d070:	2309      	movs	r3, #9
 800d072:	e1a9      	b.n	800d3c8 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d074:	79fb      	ldrb	r3, [r7, #7]
 800d076:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d07a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800d07c:	79fa      	ldrb	r2, [r7, #7]
 800d07e:	f107 0110 	add.w	r1, r7, #16
 800d082:	f107 0308 	add.w	r3, r7, #8
 800d086:	4618      	mov	r0, r3
 800d088:	f7ff fd20 	bl	800cacc <find_volume>
 800d08c:	4603      	mov	r3, r0
 800d08e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800d092:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d096:	2b00      	cmp	r3, #0
 800d098:	f040 818d 	bne.w	800d3b6 <f_open+0x35a>
		dj.obj.fs = fs;
 800d09c:	693b      	ldr	r3, [r7, #16]
 800d09e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d0a0:	68ba      	ldr	r2, [r7, #8]
 800d0a2:	f107 0314 	add.w	r3, r7, #20
 800d0a6:	4611      	mov	r1, r2
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	f7ff fc03 	bl	800c8b4 <follow_path>
 800d0ae:	4603      	mov	r3, r0
 800d0b0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d0b4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d118      	bne.n	800d0ee <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d0bc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d0c0:	b25b      	sxtb	r3, r3
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	da03      	bge.n	800d0ce <f_open+0x72>
				res = FR_INVALID_NAME;
 800d0c6:	2306      	movs	r3, #6
 800d0c8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d0cc:	e00f      	b.n	800d0ee <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d0ce:	79fb      	ldrb	r3, [r7, #7]
 800d0d0:	2b01      	cmp	r3, #1
 800d0d2:	bf8c      	ite	hi
 800d0d4:	2301      	movhi	r3, #1
 800d0d6:	2300      	movls	r3, #0
 800d0d8:	b2db      	uxtb	r3, r3
 800d0da:	461a      	mov	r2, r3
 800d0dc:	f107 0314 	add.w	r3, r7, #20
 800d0e0:	4611      	mov	r1, r2
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	f7fe fc14 	bl	800b910 <chk_lock>
 800d0e8:	4603      	mov	r3, r0
 800d0ea:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d0ee:	79fb      	ldrb	r3, [r7, #7]
 800d0f0:	f003 031c 	and.w	r3, r3, #28
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d07f      	beq.n	800d1f8 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800d0f8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d017      	beq.n	800d130 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d100:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d104:	2b04      	cmp	r3, #4
 800d106:	d10e      	bne.n	800d126 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d108:	f7fe fc5e 	bl	800b9c8 <enq_lock>
 800d10c:	4603      	mov	r3, r0
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d006      	beq.n	800d120 <f_open+0xc4>
 800d112:	f107 0314 	add.w	r3, r7, #20
 800d116:	4618      	mov	r0, r3
 800d118:	f7ff fb06 	bl	800c728 <dir_register>
 800d11c:	4603      	mov	r3, r0
 800d11e:	e000      	b.n	800d122 <f_open+0xc6>
 800d120:	2312      	movs	r3, #18
 800d122:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d126:	79fb      	ldrb	r3, [r7, #7]
 800d128:	f043 0308 	orr.w	r3, r3, #8
 800d12c:	71fb      	strb	r3, [r7, #7]
 800d12e:	e010      	b.n	800d152 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d130:	7ebb      	ldrb	r3, [r7, #26]
 800d132:	f003 0311 	and.w	r3, r3, #17
 800d136:	2b00      	cmp	r3, #0
 800d138:	d003      	beq.n	800d142 <f_open+0xe6>
					res = FR_DENIED;
 800d13a:	2307      	movs	r3, #7
 800d13c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d140:	e007      	b.n	800d152 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d142:	79fb      	ldrb	r3, [r7, #7]
 800d144:	f003 0304 	and.w	r3, r3, #4
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d002      	beq.n	800d152 <f_open+0xf6>
 800d14c:	2308      	movs	r3, #8
 800d14e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d152:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d156:	2b00      	cmp	r3, #0
 800d158:	d168      	bne.n	800d22c <f_open+0x1d0>
 800d15a:	79fb      	ldrb	r3, [r7, #7]
 800d15c:	f003 0308 	and.w	r3, r3, #8
 800d160:	2b00      	cmp	r3, #0
 800d162:	d063      	beq.n	800d22c <f_open+0x1d0>
				dw = GET_FATTIME();
 800d164:	f7fe f812 	bl	800b18c <get_fattime>
 800d168:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d16a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d16c:	330e      	adds	r3, #14
 800d16e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d170:	4618      	mov	r0, r3
 800d172:	f7fe fb22 	bl	800b7ba <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d176:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d178:	3316      	adds	r3, #22
 800d17a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d17c:	4618      	mov	r0, r3
 800d17e:	f7fe fb1c 	bl	800b7ba <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d182:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d184:	330b      	adds	r3, #11
 800d186:	2220      	movs	r2, #32
 800d188:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d18a:	693b      	ldr	r3, [r7, #16]
 800d18c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d18e:	4611      	mov	r1, r2
 800d190:	4618      	mov	r0, r3
 800d192:	f7ff fa35 	bl	800c600 <ld_clust>
 800d196:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d198:	693b      	ldr	r3, [r7, #16]
 800d19a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800d19c:	2200      	movs	r2, #0
 800d19e:	4618      	mov	r0, r3
 800d1a0:	f7ff fa4d 	bl	800c63e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d1a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1a6:	331c      	adds	r3, #28
 800d1a8:	2100      	movs	r1, #0
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	f7fe fb05 	bl	800b7ba <st_dword>
					fs->wflag = 1;
 800d1b0:	693b      	ldr	r3, [r7, #16]
 800d1b2:	2201      	movs	r2, #1
 800d1b4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d1b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d037      	beq.n	800d22c <f_open+0x1d0>
						dw = fs->winsect;
 800d1bc:	693b      	ldr	r3, [r7, #16]
 800d1be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1c0:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800d1c2:	f107 0314 	add.w	r3, r7, #20
 800d1c6:	2200      	movs	r2, #0
 800d1c8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	f7fe ff60 	bl	800c090 <remove_chain>
 800d1d0:	4603      	mov	r3, r0
 800d1d2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800d1d6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d126      	bne.n	800d22c <f_open+0x1d0>
							res = move_window(fs, dw);
 800d1de:	693b      	ldr	r3, [r7, #16]
 800d1e0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	f7fe fd08 	bl	800bbf8 <move_window>
 800d1e8:	4603      	mov	r3, r0
 800d1ea:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d1ee:	693b      	ldr	r3, [r7, #16]
 800d1f0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d1f2:	3a01      	subs	r2, #1
 800d1f4:	60da      	str	r2, [r3, #12]
 800d1f6:	e019      	b.n	800d22c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d1f8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d115      	bne.n	800d22c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d200:	7ebb      	ldrb	r3, [r7, #26]
 800d202:	f003 0310 	and.w	r3, r3, #16
 800d206:	2b00      	cmp	r3, #0
 800d208:	d003      	beq.n	800d212 <f_open+0x1b6>
					res = FR_NO_FILE;
 800d20a:	2304      	movs	r3, #4
 800d20c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d210:	e00c      	b.n	800d22c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d212:	79fb      	ldrb	r3, [r7, #7]
 800d214:	f003 0302 	and.w	r3, r3, #2
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d007      	beq.n	800d22c <f_open+0x1d0>
 800d21c:	7ebb      	ldrb	r3, [r7, #26]
 800d21e:	f003 0301 	and.w	r3, r3, #1
 800d222:	2b00      	cmp	r3, #0
 800d224:	d002      	beq.n	800d22c <f_open+0x1d0>
						res = FR_DENIED;
 800d226:	2307      	movs	r3, #7
 800d228:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800d22c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d230:	2b00      	cmp	r3, #0
 800d232:	d126      	bne.n	800d282 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d234:	79fb      	ldrb	r3, [r7, #7]
 800d236:	f003 0308 	and.w	r3, r3, #8
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d003      	beq.n	800d246 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800d23e:	79fb      	ldrb	r3, [r7, #7]
 800d240:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d244:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d246:	693b      	ldr	r3, [r7, #16]
 800d248:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800d24e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d254:	79fb      	ldrb	r3, [r7, #7]
 800d256:	2b01      	cmp	r3, #1
 800d258:	bf8c      	ite	hi
 800d25a:	2301      	movhi	r3, #1
 800d25c:	2300      	movls	r3, #0
 800d25e:	b2db      	uxtb	r3, r3
 800d260:	461a      	mov	r2, r3
 800d262:	f107 0314 	add.w	r3, r7, #20
 800d266:	4611      	mov	r1, r2
 800d268:	4618      	mov	r0, r3
 800d26a:	f7fe fbcf 	bl	800ba0c <inc_lock>
 800d26e:	4602      	mov	r2, r0
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	691b      	ldr	r3, [r3, #16]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d102      	bne.n	800d282 <f_open+0x226>
 800d27c:	2302      	movs	r3, #2
 800d27e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d282:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d286:	2b00      	cmp	r3, #0
 800d288:	f040 8095 	bne.w	800d3b6 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d28c:	693b      	ldr	r3, [r7, #16]
 800d28e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d290:	4611      	mov	r1, r2
 800d292:	4618      	mov	r0, r3
 800d294:	f7ff f9b4 	bl	800c600 <ld_clust>
 800d298:	4602      	mov	r2, r0
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d29e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d2a0:	331c      	adds	r3, #28
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	f7fe fa4b 	bl	800b73e <ld_dword>
 800d2a8:	4602      	mov	r2, r0
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	2200      	movs	r2, #0
 800d2b2:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d2b4:	693a      	ldr	r2, [r7, #16]
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d2ba:	693b      	ldr	r3, [r7, #16]
 800d2bc:	88da      	ldrh	r2, [r3, #6]
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	79fa      	ldrb	r2, [r7, #7]
 800d2c6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	2200      	movs	r2, #0
 800d2cc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	2200      	movs	r2, #0
 800d2d2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	3330      	adds	r3, #48	@ 0x30
 800d2de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d2e2:	2100      	movs	r1, #0
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	f7fe fab5 	bl	800b854 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d2ea:	79fb      	ldrb	r3, [r7, #7]
 800d2ec:	f003 0320 	and.w	r3, r3, #32
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d060      	beq.n	800d3b6 <f_open+0x35a>
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	68db      	ldr	r3, [r3, #12]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d05c      	beq.n	800d3b6 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	68da      	ldr	r2, [r3, #12]
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d304:	693b      	ldr	r3, [r7, #16]
 800d306:	895b      	ldrh	r3, [r3, #10]
 800d308:	025b      	lsls	r3, r3, #9
 800d30a:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	689b      	ldr	r3, [r3, #8]
 800d310:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	68db      	ldr	r3, [r3, #12]
 800d316:	657b      	str	r3, [r7, #84]	@ 0x54
 800d318:	e016      	b.n	800d348 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d31e:	4618      	mov	r0, r3
 800d320:	f7fe fd25 	bl	800bd6e <get_fat>
 800d324:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800d326:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d328:	2b01      	cmp	r3, #1
 800d32a:	d802      	bhi.n	800d332 <f_open+0x2d6>
 800d32c:	2302      	movs	r3, #2
 800d32e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d332:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d334:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d338:	d102      	bne.n	800d340 <f_open+0x2e4>
 800d33a:	2301      	movs	r3, #1
 800d33c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d340:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d342:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d344:	1ad3      	subs	r3, r2, r3
 800d346:	657b      	str	r3, [r7, #84]	@ 0x54
 800d348:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d103      	bne.n	800d358 <f_open+0x2fc>
 800d350:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d352:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d354:	429a      	cmp	r2, r3
 800d356:	d8e0      	bhi.n	800d31a <f_open+0x2be>
				}
				fp->clust = clst;
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d35c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d35e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d362:	2b00      	cmp	r3, #0
 800d364:	d127      	bne.n	800d3b6 <f_open+0x35a>
 800d366:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d368:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d022      	beq.n	800d3b6 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d370:	693b      	ldr	r3, [r7, #16]
 800d372:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d374:	4618      	mov	r0, r3
 800d376:	f7fe fcdb 	bl	800bd30 <clust2sect>
 800d37a:	6478      	str	r0, [r7, #68]	@ 0x44
 800d37c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d103      	bne.n	800d38a <f_open+0x32e>
						res = FR_INT_ERR;
 800d382:	2302      	movs	r3, #2
 800d384:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d388:	e015      	b.n	800d3b6 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d38a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d38c:	0a5a      	lsrs	r2, r3, #9
 800d38e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d390:	441a      	add	r2, r3
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d396:	693b      	ldr	r3, [r7, #16]
 800d398:	7858      	ldrb	r0, [r3, #1]
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	6a1a      	ldr	r2, [r3, #32]
 800d3a4:	2301      	movs	r3, #1
 800d3a6:	f7fe f953 	bl	800b650 <disk_read>
 800d3aa:	4603      	mov	r3, r0
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d002      	beq.n	800d3b6 <f_open+0x35a>
 800d3b0:	2301      	movs	r3, #1
 800d3b2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d3b6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d002      	beq.n	800d3c4 <f_open+0x368>
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	2200      	movs	r2, #0
 800d3c2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d3c4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	3760      	adds	r7, #96	@ 0x60
 800d3cc:	46bd      	mov	sp, r7
 800d3ce:	bd80      	pop	{r7, pc}

0800d3d0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800d3d0:	b580      	push	{r7, lr}
 800d3d2:	b08c      	sub	sp, #48	@ 0x30
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	60f8      	str	r0, [r7, #12]
 800d3d8:	60b9      	str	r1, [r7, #8]
 800d3da:	607a      	str	r2, [r7, #4]
 800d3dc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800d3de:	68bb      	ldr	r3, [r7, #8]
 800d3e0:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800d3e2:	683b      	ldr	r3, [r7, #0]
 800d3e4:	2200      	movs	r2, #0
 800d3e6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	f107 0210 	add.w	r2, r7, #16
 800d3ee:	4611      	mov	r1, r2
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	f7ff fdb7 	bl	800cf64 <validate>
 800d3f6:	4603      	mov	r3, r0
 800d3f8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d3fc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d400:	2b00      	cmp	r3, #0
 800d402:	d107      	bne.n	800d414 <f_write+0x44>
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	7d5b      	ldrb	r3, [r3, #21]
 800d408:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800d40c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d410:	2b00      	cmp	r3, #0
 800d412:	d002      	beq.n	800d41a <f_write+0x4a>
 800d414:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d418:	e14b      	b.n	800d6b2 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	7d1b      	ldrb	r3, [r3, #20]
 800d41e:	f003 0302 	and.w	r3, r3, #2
 800d422:	2b00      	cmp	r3, #0
 800d424:	d101      	bne.n	800d42a <f_write+0x5a>
 800d426:	2307      	movs	r3, #7
 800d428:	e143      	b.n	800d6b2 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	699a      	ldr	r2, [r3, #24]
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	441a      	add	r2, r3
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	699b      	ldr	r3, [r3, #24]
 800d436:	429a      	cmp	r2, r3
 800d438:	f080 812d 	bcs.w	800d696 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	699b      	ldr	r3, [r3, #24]
 800d440:	43db      	mvns	r3, r3
 800d442:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800d444:	e127      	b.n	800d696 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	699b      	ldr	r3, [r3, #24]
 800d44a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d44e:	2b00      	cmp	r3, #0
 800d450:	f040 80e3 	bne.w	800d61a <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	699b      	ldr	r3, [r3, #24]
 800d458:	0a5b      	lsrs	r3, r3, #9
 800d45a:	693a      	ldr	r2, [r7, #16]
 800d45c:	8952      	ldrh	r2, [r2, #10]
 800d45e:	3a01      	subs	r2, #1
 800d460:	4013      	ands	r3, r2
 800d462:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800d464:	69bb      	ldr	r3, [r7, #24]
 800d466:	2b00      	cmp	r3, #0
 800d468:	d143      	bne.n	800d4f2 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	699b      	ldr	r3, [r3, #24]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d10c      	bne.n	800d48c <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	689b      	ldr	r3, [r3, #8]
 800d476:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800d478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d11a      	bne.n	800d4b4 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	2100      	movs	r1, #0
 800d482:	4618      	mov	r0, r3
 800d484:	f7fe fe69 	bl	800c15a <create_chain>
 800d488:	62b8      	str	r0, [r7, #40]	@ 0x28
 800d48a:	e013      	b.n	800d4b4 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d490:	2b00      	cmp	r3, #0
 800d492:	d007      	beq.n	800d4a4 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	699b      	ldr	r3, [r3, #24]
 800d498:	4619      	mov	r1, r3
 800d49a:	68f8      	ldr	r0, [r7, #12]
 800d49c:	f7fe fef5 	bl	800c28a <clmt_clust>
 800d4a0:	62b8      	str	r0, [r7, #40]	@ 0x28
 800d4a2:	e007      	b.n	800d4b4 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d4a4:	68fa      	ldr	r2, [r7, #12]
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	69db      	ldr	r3, [r3, #28]
 800d4aa:	4619      	mov	r1, r3
 800d4ac:	4610      	mov	r0, r2
 800d4ae:	f7fe fe54 	bl	800c15a <create_chain>
 800d4b2:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d4b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	f000 80f2 	beq.w	800d6a0 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d4bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4be:	2b01      	cmp	r3, #1
 800d4c0:	d104      	bne.n	800d4cc <f_write+0xfc>
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	2202      	movs	r2, #2
 800d4c6:	755a      	strb	r2, [r3, #21]
 800d4c8:	2302      	movs	r3, #2
 800d4ca:	e0f2      	b.n	800d6b2 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d4cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d4d2:	d104      	bne.n	800d4de <f_write+0x10e>
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	2201      	movs	r2, #1
 800d4d8:	755a      	strb	r2, [r3, #21]
 800d4da:	2301      	movs	r3, #1
 800d4dc:	e0e9      	b.n	800d6b2 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d4e2:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	689b      	ldr	r3, [r3, #8]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d102      	bne.n	800d4f2 <f_write+0x122>
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d4f0:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	7d1b      	ldrb	r3, [r3, #20]
 800d4f6:	b25b      	sxtb	r3, r3
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	da18      	bge.n	800d52e <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d4fc:	693b      	ldr	r3, [r7, #16]
 800d4fe:	7858      	ldrb	r0, [r3, #1]
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	6a1a      	ldr	r2, [r3, #32]
 800d50a:	2301      	movs	r3, #1
 800d50c:	f7fe f8c0 	bl	800b690 <disk_write>
 800d510:	4603      	mov	r3, r0
 800d512:	2b00      	cmp	r3, #0
 800d514:	d004      	beq.n	800d520 <f_write+0x150>
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	2201      	movs	r2, #1
 800d51a:	755a      	strb	r2, [r3, #21]
 800d51c:	2301      	movs	r3, #1
 800d51e:	e0c8      	b.n	800d6b2 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	7d1b      	ldrb	r3, [r3, #20]
 800d524:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d528:	b2da      	uxtb	r2, r3
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d52e:	693a      	ldr	r2, [r7, #16]
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	69db      	ldr	r3, [r3, #28]
 800d534:	4619      	mov	r1, r3
 800d536:	4610      	mov	r0, r2
 800d538:	f7fe fbfa 	bl	800bd30 <clust2sect>
 800d53c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d53e:	697b      	ldr	r3, [r7, #20]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d104      	bne.n	800d54e <f_write+0x17e>
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	2202      	movs	r2, #2
 800d548:	755a      	strb	r2, [r3, #21]
 800d54a:	2302      	movs	r3, #2
 800d54c:	e0b1      	b.n	800d6b2 <f_write+0x2e2>
			sect += csect;
 800d54e:	697a      	ldr	r2, [r7, #20]
 800d550:	69bb      	ldr	r3, [r7, #24]
 800d552:	4413      	add	r3, r2
 800d554:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	0a5b      	lsrs	r3, r3, #9
 800d55a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d55c:	6a3b      	ldr	r3, [r7, #32]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d03c      	beq.n	800d5dc <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d562:	69ba      	ldr	r2, [r7, #24]
 800d564:	6a3b      	ldr	r3, [r7, #32]
 800d566:	4413      	add	r3, r2
 800d568:	693a      	ldr	r2, [r7, #16]
 800d56a:	8952      	ldrh	r2, [r2, #10]
 800d56c:	4293      	cmp	r3, r2
 800d56e:	d905      	bls.n	800d57c <f_write+0x1ac>
					cc = fs->csize - csect;
 800d570:	693b      	ldr	r3, [r7, #16]
 800d572:	895b      	ldrh	r3, [r3, #10]
 800d574:	461a      	mov	r2, r3
 800d576:	69bb      	ldr	r3, [r7, #24]
 800d578:	1ad3      	subs	r3, r2, r3
 800d57a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d57c:	693b      	ldr	r3, [r7, #16]
 800d57e:	7858      	ldrb	r0, [r3, #1]
 800d580:	6a3b      	ldr	r3, [r7, #32]
 800d582:	697a      	ldr	r2, [r7, #20]
 800d584:	69f9      	ldr	r1, [r7, #28]
 800d586:	f7fe f883 	bl	800b690 <disk_write>
 800d58a:	4603      	mov	r3, r0
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d004      	beq.n	800d59a <f_write+0x1ca>
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	2201      	movs	r2, #1
 800d594:	755a      	strb	r2, [r3, #21]
 800d596:	2301      	movs	r3, #1
 800d598:	e08b      	b.n	800d6b2 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	6a1a      	ldr	r2, [r3, #32]
 800d59e:	697b      	ldr	r3, [r7, #20]
 800d5a0:	1ad3      	subs	r3, r2, r3
 800d5a2:	6a3a      	ldr	r2, [r7, #32]
 800d5a4:	429a      	cmp	r2, r3
 800d5a6:	d915      	bls.n	800d5d4 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	6a1a      	ldr	r2, [r3, #32]
 800d5b2:	697b      	ldr	r3, [r7, #20]
 800d5b4:	1ad3      	subs	r3, r2, r3
 800d5b6:	025b      	lsls	r3, r3, #9
 800d5b8:	69fa      	ldr	r2, [r7, #28]
 800d5ba:	4413      	add	r3, r2
 800d5bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d5c0:	4619      	mov	r1, r3
 800d5c2:	f7fe f926 	bl	800b812 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	7d1b      	ldrb	r3, [r3, #20]
 800d5ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d5ce:	b2da      	uxtb	r2, r3
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800d5d4:	6a3b      	ldr	r3, [r7, #32]
 800d5d6:	025b      	lsls	r3, r3, #9
 800d5d8:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800d5da:	e03f      	b.n	800d65c <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	6a1b      	ldr	r3, [r3, #32]
 800d5e0:	697a      	ldr	r2, [r7, #20]
 800d5e2:	429a      	cmp	r2, r3
 800d5e4:	d016      	beq.n	800d614 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	699a      	ldr	r2, [r3, #24]
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d5ee:	429a      	cmp	r2, r3
 800d5f0:	d210      	bcs.n	800d614 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800d5f2:	693b      	ldr	r3, [r7, #16]
 800d5f4:	7858      	ldrb	r0, [r3, #1]
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d5fc:	2301      	movs	r3, #1
 800d5fe:	697a      	ldr	r2, [r7, #20]
 800d600:	f7fe f826 	bl	800b650 <disk_read>
 800d604:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800d606:	2b00      	cmp	r3, #0
 800d608:	d004      	beq.n	800d614 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	2201      	movs	r2, #1
 800d60e:	755a      	strb	r2, [r3, #21]
 800d610:	2301      	movs	r3, #1
 800d612:	e04e      	b.n	800d6b2 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	697a      	ldr	r2, [r7, #20]
 800d618:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	699b      	ldr	r3, [r3, #24]
 800d61e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d622:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800d626:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800d628:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	429a      	cmp	r2, r3
 800d62e:	d901      	bls.n	800d634 <f_write+0x264>
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	699b      	ldr	r3, [r3, #24]
 800d63e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d642:	4413      	add	r3, r2
 800d644:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d646:	69f9      	ldr	r1, [r7, #28]
 800d648:	4618      	mov	r0, r3
 800d64a:	f7fe f8e2 	bl	800b812 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	7d1b      	ldrb	r3, [r3, #20]
 800d652:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d656:	b2da      	uxtb	r2, r3
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800d65c:	69fa      	ldr	r2, [r7, #28]
 800d65e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d660:	4413      	add	r3, r2
 800d662:	61fb      	str	r3, [r7, #28]
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	699a      	ldr	r2, [r3, #24]
 800d668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d66a:	441a      	add	r2, r3
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	619a      	str	r2, [r3, #24]
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	68da      	ldr	r2, [r3, #12]
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	699b      	ldr	r3, [r3, #24]
 800d678:	429a      	cmp	r2, r3
 800d67a:	bf38      	it	cc
 800d67c:	461a      	movcc	r2, r3
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	60da      	str	r2, [r3, #12]
 800d682:	683b      	ldr	r3, [r7, #0]
 800d684:	681a      	ldr	r2, [r3, #0]
 800d686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d688:	441a      	add	r2, r3
 800d68a:	683b      	ldr	r3, [r7, #0]
 800d68c:	601a      	str	r2, [r3, #0]
 800d68e:	687a      	ldr	r2, [r7, #4]
 800d690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d692:	1ad3      	subs	r3, r2, r3
 800d694:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	f47f aed4 	bne.w	800d446 <f_write+0x76>
 800d69e:	e000      	b.n	800d6a2 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d6a0:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	7d1b      	ldrb	r3, [r3, #20]
 800d6a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d6aa:	b2da      	uxtb	r2, r3
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800d6b0:	2300      	movs	r3, #0
}
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	3730      	adds	r7, #48	@ 0x30
 800d6b6:	46bd      	mov	sp, r7
 800d6b8:	bd80      	pop	{r7, pc}

0800d6ba <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d6ba:	b580      	push	{r7, lr}
 800d6bc:	b086      	sub	sp, #24
 800d6be:	af00      	add	r7, sp, #0
 800d6c0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	f107 0208 	add.w	r2, r7, #8
 800d6c8:	4611      	mov	r1, r2
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	f7ff fc4a 	bl	800cf64 <validate>
 800d6d0:	4603      	mov	r3, r0
 800d6d2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d6d4:	7dfb      	ldrb	r3, [r7, #23]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d168      	bne.n	800d7ac <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	7d1b      	ldrb	r3, [r3, #20]
 800d6de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d062      	beq.n	800d7ac <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	7d1b      	ldrb	r3, [r3, #20]
 800d6ea:	b25b      	sxtb	r3, r3
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	da15      	bge.n	800d71c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d6f0:	68bb      	ldr	r3, [r7, #8]
 800d6f2:	7858      	ldrb	r0, [r3, #1]
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	6a1a      	ldr	r2, [r3, #32]
 800d6fe:	2301      	movs	r3, #1
 800d700:	f7fd ffc6 	bl	800b690 <disk_write>
 800d704:	4603      	mov	r3, r0
 800d706:	2b00      	cmp	r3, #0
 800d708:	d001      	beq.n	800d70e <f_sync+0x54>
 800d70a:	2301      	movs	r3, #1
 800d70c:	e04f      	b.n	800d7ae <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	7d1b      	ldrb	r3, [r3, #20]
 800d712:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d716:	b2da      	uxtb	r2, r3
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d71c:	f7fd fd36 	bl	800b18c <get_fattime>
 800d720:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d722:	68ba      	ldr	r2, [r7, #8]
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d728:	4619      	mov	r1, r3
 800d72a:	4610      	mov	r0, r2
 800d72c:	f7fe fa64 	bl	800bbf8 <move_window>
 800d730:	4603      	mov	r3, r0
 800d732:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d734:	7dfb      	ldrb	r3, [r7, #23]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d138      	bne.n	800d7ac <f_sync+0xf2>
					dir = fp->dir_ptr;
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d73e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	330b      	adds	r3, #11
 800d744:	781a      	ldrb	r2, [r3, #0]
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	330b      	adds	r3, #11
 800d74a:	f042 0220 	orr.w	r2, r2, #32
 800d74e:	b2d2      	uxtb	r2, r2
 800d750:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	6818      	ldr	r0, [r3, #0]
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	689b      	ldr	r3, [r3, #8]
 800d75a:	461a      	mov	r2, r3
 800d75c:	68f9      	ldr	r1, [r7, #12]
 800d75e:	f7fe ff6e 	bl	800c63e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	f103 021c 	add.w	r2, r3, #28
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	68db      	ldr	r3, [r3, #12]
 800d76c:	4619      	mov	r1, r3
 800d76e:	4610      	mov	r0, r2
 800d770:	f7fe f823 	bl	800b7ba <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	3316      	adds	r3, #22
 800d778:	6939      	ldr	r1, [r7, #16]
 800d77a:	4618      	mov	r0, r3
 800d77c:	f7fe f81d 	bl	800b7ba <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	3312      	adds	r3, #18
 800d784:	2100      	movs	r1, #0
 800d786:	4618      	mov	r0, r3
 800d788:	f7fd fffc 	bl	800b784 <st_word>
					fs->wflag = 1;
 800d78c:	68bb      	ldr	r3, [r7, #8]
 800d78e:	2201      	movs	r2, #1
 800d790:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d792:	68bb      	ldr	r3, [r7, #8]
 800d794:	4618      	mov	r0, r3
 800d796:	f7fe fa5d 	bl	800bc54 <sync_fs>
 800d79a:	4603      	mov	r3, r0
 800d79c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	7d1b      	ldrb	r3, [r3, #20]
 800d7a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d7a6:	b2da      	uxtb	r2, r3
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d7ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	3718      	adds	r7, #24
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	bd80      	pop	{r7, pc}

0800d7b6 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800d7b6:	b580      	push	{r7, lr}
 800d7b8:	b090      	sub	sp, #64	@ 0x40
 800d7ba:	af00      	add	r7, sp, #0
 800d7bc:	6078      	str	r0, [r7, #4]
 800d7be:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	f107 0208 	add.w	r2, r7, #8
 800d7c6:	4611      	mov	r1, r2
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	f7ff fbcb 	bl	800cf64 <validate>
 800d7ce:	4603      	mov	r3, r0
 800d7d0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800d7d4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d103      	bne.n	800d7e4 <f_lseek+0x2e>
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	7d5b      	ldrb	r3, [r3, #21]
 800d7e0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800d7e4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d002      	beq.n	800d7f2 <f_lseek+0x3c>
 800d7ec:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d7f0:	e1e6      	b.n	800dbc0 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	f000 80d1 	beq.w	800d99e <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800d7fc:	683b      	ldr	r3, [r7, #0]
 800d7fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d802:	d15a      	bne.n	800d8ba <f_lseek+0x104>
			tbl = fp->cltbl;
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d808:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800d80a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d80c:	1d1a      	adds	r2, r3, #4
 800d80e:	627a      	str	r2, [r7, #36]	@ 0x24
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	617b      	str	r3, [r7, #20]
 800d814:	2302      	movs	r3, #2
 800d816:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	689b      	ldr	r3, [r3, #8]
 800d81c:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800d81e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d820:	2b00      	cmp	r3, #0
 800d822:	d03a      	beq.n	800d89a <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800d824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d826:	613b      	str	r3, [r7, #16]
 800d828:	2300      	movs	r3, #0
 800d82a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d82c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d82e:	3302      	adds	r3, #2
 800d830:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800d832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d834:	60fb      	str	r3, [r7, #12]
 800d836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d838:	3301      	adds	r3, #1
 800d83a:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d840:	4618      	mov	r0, r3
 800d842:	f7fe fa94 	bl	800bd6e <get_fat>
 800d846:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800d848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d84a:	2b01      	cmp	r3, #1
 800d84c:	d804      	bhi.n	800d858 <f_lseek+0xa2>
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	2202      	movs	r2, #2
 800d852:	755a      	strb	r2, [r3, #21]
 800d854:	2302      	movs	r3, #2
 800d856:	e1b3      	b.n	800dbc0 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d85a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d85e:	d104      	bne.n	800d86a <f_lseek+0xb4>
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	2201      	movs	r2, #1
 800d864:	755a      	strb	r2, [r3, #21]
 800d866:	2301      	movs	r3, #1
 800d868:	e1aa      	b.n	800dbc0 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	3301      	adds	r3, #1
 800d86e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d870:	429a      	cmp	r2, r3
 800d872:	d0de      	beq.n	800d832 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800d874:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d876:	697b      	ldr	r3, [r7, #20]
 800d878:	429a      	cmp	r2, r3
 800d87a:	d809      	bhi.n	800d890 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800d87c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d87e:	1d1a      	adds	r2, r3, #4
 800d880:	627a      	str	r2, [r7, #36]	@ 0x24
 800d882:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d884:	601a      	str	r2, [r3, #0]
 800d886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d888:	1d1a      	adds	r2, r3, #4
 800d88a:	627a      	str	r2, [r7, #36]	@ 0x24
 800d88c:	693a      	ldr	r2, [r7, #16]
 800d88e:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800d890:	68bb      	ldr	r3, [r7, #8]
 800d892:	695b      	ldr	r3, [r3, #20]
 800d894:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d896:	429a      	cmp	r2, r3
 800d898:	d3c4      	bcc.n	800d824 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d89e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d8a0:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800d8a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d8a4:	697b      	ldr	r3, [r7, #20]
 800d8a6:	429a      	cmp	r2, r3
 800d8a8:	d803      	bhi.n	800d8b2 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800d8aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8ac:	2200      	movs	r2, #0
 800d8ae:	601a      	str	r2, [r3, #0]
 800d8b0:	e184      	b.n	800dbbc <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800d8b2:	2311      	movs	r3, #17
 800d8b4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800d8b8:	e180      	b.n	800dbbc <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	68db      	ldr	r3, [r3, #12]
 800d8be:	683a      	ldr	r2, [r7, #0]
 800d8c0:	429a      	cmp	r2, r3
 800d8c2:	d902      	bls.n	800d8ca <f_lseek+0x114>
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	68db      	ldr	r3, [r3, #12]
 800d8c8:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	683a      	ldr	r2, [r7, #0]
 800d8ce:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800d8d0:	683b      	ldr	r3, [r7, #0]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	f000 8172 	beq.w	800dbbc <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800d8d8:	683b      	ldr	r3, [r7, #0]
 800d8da:	3b01      	subs	r3, #1
 800d8dc:	4619      	mov	r1, r3
 800d8de:	6878      	ldr	r0, [r7, #4]
 800d8e0:	f7fe fcd3 	bl	800c28a <clmt_clust>
 800d8e4:	4602      	mov	r2, r0
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800d8ea:	68ba      	ldr	r2, [r7, #8]
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	69db      	ldr	r3, [r3, #28]
 800d8f0:	4619      	mov	r1, r3
 800d8f2:	4610      	mov	r0, r2
 800d8f4:	f7fe fa1c 	bl	800bd30 <clust2sect>
 800d8f8:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800d8fa:	69bb      	ldr	r3, [r7, #24]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d104      	bne.n	800d90a <f_lseek+0x154>
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	2202      	movs	r2, #2
 800d904:	755a      	strb	r2, [r3, #21]
 800d906:	2302      	movs	r3, #2
 800d908:	e15a      	b.n	800dbc0 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800d90a:	683b      	ldr	r3, [r7, #0]
 800d90c:	3b01      	subs	r3, #1
 800d90e:	0a5b      	lsrs	r3, r3, #9
 800d910:	68ba      	ldr	r2, [r7, #8]
 800d912:	8952      	ldrh	r2, [r2, #10]
 800d914:	3a01      	subs	r2, #1
 800d916:	4013      	ands	r3, r2
 800d918:	69ba      	ldr	r2, [r7, #24]
 800d91a:	4413      	add	r3, r2
 800d91c:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	699b      	ldr	r3, [r3, #24]
 800d922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d926:	2b00      	cmp	r3, #0
 800d928:	f000 8148 	beq.w	800dbbc <f_lseek+0x406>
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	6a1b      	ldr	r3, [r3, #32]
 800d930:	69ba      	ldr	r2, [r7, #24]
 800d932:	429a      	cmp	r2, r3
 800d934:	f000 8142 	beq.w	800dbbc <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	7d1b      	ldrb	r3, [r3, #20]
 800d93c:	b25b      	sxtb	r3, r3
 800d93e:	2b00      	cmp	r3, #0
 800d940:	da18      	bge.n	800d974 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d942:	68bb      	ldr	r3, [r7, #8]
 800d944:	7858      	ldrb	r0, [r3, #1]
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	6a1a      	ldr	r2, [r3, #32]
 800d950:	2301      	movs	r3, #1
 800d952:	f7fd fe9d 	bl	800b690 <disk_write>
 800d956:	4603      	mov	r3, r0
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d004      	beq.n	800d966 <f_lseek+0x1b0>
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	2201      	movs	r2, #1
 800d960:	755a      	strb	r2, [r3, #21]
 800d962:	2301      	movs	r3, #1
 800d964:	e12c      	b.n	800dbc0 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	7d1b      	ldrb	r3, [r3, #20]
 800d96a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d96e:	b2da      	uxtb	r2, r3
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800d974:	68bb      	ldr	r3, [r7, #8]
 800d976:	7858      	ldrb	r0, [r3, #1]
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d97e:	2301      	movs	r3, #1
 800d980:	69ba      	ldr	r2, [r7, #24]
 800d982:	f7fd fe65 	bl	800b650 <disk_read>
 800d986:	4603      	mov	r3, r0
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d004      	beq.n	800d996 <f_lseek+0x1e0>
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	2201      	movs	r2, #1
 800d990:	755a      	strb	r2, [r3, #21]
 800d992:	2301      	movs	r3, #1
 800d994:	e114      	b.n	800dbc0 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	69ba      	ldr	r2, [r7, #24]
 800d99a:	621a      	str	r2, [r3, #32]
 800d99c:	e10e      	b.n	800dbbc <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	68db      	ldr	r3, [r3, #12]
 800d9a2:	683a      	ldr	r2, [r7, #0]
 800d9a4:	429a      	cmp	r2, r3
 800d9a6:	d908      	bls.n	800d9ba <f_lseek+0x204>
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	7d1b      	ldrb	r3, [r3, #20]
 800d9ac:	f003 0302 	and.w	r3, r3, #2
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d102      	bne.n	800d9ba <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	68db      	ldr	r3, [r3, #12]
 800d9b8:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	699b      	ldr	r3, [r3, #24]
 800d9be:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800d9c0:	2300      	movs	r3, #0
 800d9c2:	637b      	str	r3, [r7, #52]	@ 0x34
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d9c8:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800d9ca:	683b      	ldr	r3, [r7, #0]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	f000 80a7 	beq.w	800db20 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800d9d2:	68bb      	ldr	r3, [r7, #8]
 800d9d4:	895b      	ldrh	r3, [r3, #10]
 800d9d6:	025b      	lsls	r3, r3, #9
 800d9d8:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800d9da:	6a3b      	ldr	r3, [r7, #32]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d01b      	beq.n	800da18 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800d9e0:	683b      	ldr	r3, [r7, #0]
 800d9e2:	1e5a      	subs	r2, r3, #1
 800d9e4:	69fb      	ldr	r3, [r7, #28]
 800d9e6:	fbb2 f2f3 	udiv	r2, r2, r3
 800d9ea:	6a3b      	ldr	r3, [r7, #32]
 800d9ec:	1e59      	subs	r1, r3, #1
 800d9ee:	69fb      	ldr	r3, [r7, #28]
 800d9f0:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800d9f4:	429a      	cmp	r2, r3
 800d9f6:	d30f      	bcc.n	800da18 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800d9f8:	6a3b      	ldr	r3, [r7, #32]
 800d9fa:	1e5a      	subs	r2, r3, #1
 800d9fc:	69fb      	ldr	r3, [r7, #28]
 800d9fe:	425b      	negs	r3, r3
 800da00:	401a      	ands	r2, r3
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	699b      	ldr	r3, [r3, #24]
 800da0a:	683a      	ldr	r2, [r7, #0]
 800da0c:	1ad3      	subs	r3, r2, r3
 800da0e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	69db      	ldr	r3, [r3, #28]
 800da14:	63bb      	str	r3, [r7, #56]	@ 0x38
 800da16:	e022      	b.n	800da5e <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	689b      	ldr	r3, [r3, #8]
 800da1c:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800da1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da20:	2b00      	cmp	r3, #0
 800da22:	d119      	bne.n	800da58 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	2100      	movs	r1, #0
 800da28:	4618      	mov	r0, r3
 800da2a:	f7fe fb96 	bl	800c15a <create_chain>
 800da2e:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800da30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da32:	2b01      	cmp	r3, #1
 800da34:	d104      	bne.n	800da40 <f_lseek+0x28a>
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	2202      	movs	r2, #2
 800da3a:	755a      	strb	r2, [r3, #21]
 800da3c:	2302      	movs	r3, #2
 800da3e:	e0bf      	b.n	800dbc0 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800da40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da42:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800da46:	d104      	bne.n	800da52 <f_lseek+0x29c>
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	2201      	movs	r2, #1
 800da4c:	755a      	strb	r2, [r3, #21]
 800da4e:	2301      	movs	r3, #1
 800da50:	e0b6      	b.n	800dbc0 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800da56:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800da5c:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800da5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da60:	2b00      	cmp	r3, #0
 800da62:	d05d      	beq.n	800db20 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800da64:	e03a      	b.n	800dadc <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800da66:	683a      	ldr	r2, [r7, #0]
 800da68:	69fb      	ldr	r3, [r7, #28]
 800da6a:	1ad3      	subs	r3, r2, r3
 800da6c:	603b      	str	r3, [r7, #0]
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	699a      	ldr	r2, [r3, #24]
 800da72:	69fb      	ldr	r3, [r7, #28]
 800da74:	441a      	add	r2, r3
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	7d1b      	ldrb	r3, [r3, #20]
 800da7e:	f003 0302 	and.w	r3, r3, #2
 800da82:	2b00      	cmp	r3, #0
 800da84:	d00b      	beq.n	800da9e <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800da8a:	4618      	mov	r0, r3
 800da8c:	f7fe fb65 	bl	800c15a <create_chain>
 800da90:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800da92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da94:	2b00      	cmp	r3, #0
 800da96:	d108      	bne.n	800daaa <f_lseek+0x2f4>
							ofs = 0; break;
 800da98:	2300      	movs	r3, #0
 800da9a:	603b      	str	r3, [r7, #0]
 800da9c:	e022      	b.n	800dae4 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800daa2:	4618      	mov	r0, r3
 800daa4:	f7fe f963 	bl	800bd6e <get_fat>
 800daa8:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800daaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800daac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dab0:	d104      	bne.n	800dabc <f_lseek+0x306>
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	2201      	movs	r2, #1
 800dab6:	755a      	strb	r2, [r3, #21]
 800dab8:	2301      	movs	r3, #1
 800daba:	e081      	b.n	800dbc0 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800dabc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dabe:	2b01      	cmp	r3, #1
 800dac0:	d904      	bls.n	800dacc <f_lseek+0x316>
 800dac2:	68bb      	ldr	r3, [r7, #8]
 800dac4:	695b      	ldr	r3, [r3, #20]
 800dac6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dac8:	429a      	cmp	r2, r3
 800daca:	d304      	bcc.n	800dad6 <f_lseek+0x320>
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	2202      	movs	r2, #2
 800dad0:	755a      	strb	r2, [r3, #21]
 800dad2:	2302      	movs	r3, #2
 800dad4:	e074      	b.n	800dbc0 <f_lseek+0x40a>
					fp->clust = clst;
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dada:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800dadc:	683a      	ldr	r2, [r7, #0]
 800dade:	69fb      	ldr	r3, [r7, #28]
 800dae0:	429a      	cmp	r2, r3
 800dae2:	d8c0      	bhi.n	800da66 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	699a      	ldr	r2, [r3, #24]
 800dae8:	683b      	ldr	r3, [r7, #0]
 800daea:	441a      	add	r2, r3
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800daf0:	683b      	ldr	r3, [r7, #0]
 800daf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d012      	beq.n	800db20 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800dafa:	68bb      	ldr	r3, [r7, #8]
 800dafc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800dafe:	4618      	mov	r0, r3
 800db00:	f7fe f916 	bl	800bd30 <clust2sect>
 800db04:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800db06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d104      	bne.n	800db16 <f_lseek+0x360>
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	2202      	movs	r2, #2
 800db10:	755a      	strb	r2, [r3, #21]
 800db12:	2302      	movs	r3, #2
 800db14:	e054      	b.n	800dbc0 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800db16:	683b      	ldr	r3, [r7, #0]
 800db18:	0a5b      	lsrs	r3, r3, #9
 800db1a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800db1c:	4413      	add	r3, r2
 800db1e:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	699a      	ldr	r2, [r3, #24]
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	68db      	ldr	r3, [r3, #12]
 800db28:	429a      	cmp	r2, r3
 800db2a:	d90a      	bls.n	800db42 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	699a      	ldr	r2, [r3, #24]
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	7d1b      	ldrb	r3, [r3, #20]
 800db38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800db3c:	b2da      	uxtb	r2, r3
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	699b      	ldr	r3, [r3, #24]
 800db46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d036      	beq.n	800dbbc <f_lseek+0x406>
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	6a1b      	ldr	r3, [r3, #32]
 800db52:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800db54:	429a      	cmp	r2, r3
 800db56:	d031      	beq.n	800dbbc <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	7d1b      	ldrb	r3, [r3, #20]
 800db5c:	b25b      	sxtb	r3, r3
 800db5e:	2b00      	cmp	r3, #0
 800db60:	da18      	bge.n	800db94 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800db62:	68bb      	ldr	r3, [r7, #8]
 800db64:	7858      	ldrb	r0, [r3, #1]
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	6a1a      	ldr	r2, [r3, #32]
 800db70:	2301      	movs	r3, #1
 800db72:	f7fd fd8d 	bl	800b690 <disk_write>
 800db76:	4603      	mov	r3, r0
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d004      	beq.n	800db86 <f_lseek+0x3d0>
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	2201      	movs	r2, #1
 800db80:	755a      	strb	r2, [r3, #21]
 800db82:	2301      	movs	r3, #1
 800db84:	e01c      	b.n	800dbc0 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	7d1b      	ldrb	r3, [r3, #20]
 800db8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800db8e:	b2da      	uxtb	r2, r3
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800db94:	68bb      	ldr	r3, [r7, #8]
 800db96:	7858      	ldrb	r0, [r3, #1]
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800db9e:	2301      	movs	r3, #1
 800dba0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dba2:	f7fd fd55 	bl	800b650 <disk_read>
 800dba6:	4603      	mov	r3, r0
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d004      	beq.n	800dbb6 <f_lseek+0x400>
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	2201      	movs	r2, #1
 800dbb0:	755a      	strb	r2, [r3, #21]
 800dbb2:	2301      	movs	r3, #1
 800dbb4:	e004      	b.n	800dbc0 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dbba:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800dbbc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	3740      	adds	r7, #64	@ 0x40
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	bd80      	pop	{r7, pc}

0800dbc8 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800dbc8:	b580      	push	{r7, lr}
 800dbca:	b084      	sub	sp, #16
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	6078      	str	r0, [r7, #4]
 800dbd0:	460b      	mov	r3, r1
 800dbd2:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800dbd4:	78fb      	ldrb	r3, [r7, #3]
 800dbd6:	2b0a      	cmp	r3, #10
 800dbd8:	d103      	bne.n	800dbe2 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800dbda:	210d      	movs	r1, #13
 800dbdc:	6878      	ldr	r0, [r7, #4]
 800dbde:	f7ff fff3 	bl	800dbc8 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	685b      	ldr	r3, [r3, #4]
 800dbe6:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	db25      	blt.n	800dc3a <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	1c5a      	adds	r2, r3, #1
 800dbf2:	60fa      	str	r2, [r7, #12]
 800dbf4:	687a      	ldr	r2, [r7, #4]
 800dbf6:	4413      	add	r3, r2
 800dbf8:	78fa      	ldrb	r2, [r7, #3]
 800dbfa:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	2b3c      	cmp	r3, #60	@ 0x3c
 800dc00:	dd12      	ble.n	800dc28 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	6818      	ldr	r0, [r3, #0]
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	f103 010c 	add.w	r1, r3, #12
 800dc0c:	68fa      	ldr	r2, [r7, #12]
 800dc0e:	f107 0308 	add.w	r3, r7, #8
 800dc12:	f7ff fbdd 	bl	800d3d0 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800dc16:	68ba      	ldr	r2, [r7, #8]
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	429a      	cmp	r2, r3
 800dc1c:	d101      	bne.n	800dc22 <putc_bfd+0x5a>
 800dc1e:	2300      	movs	r3, #0
 800dc20:	e001      	b.n	800dc26 <putc_bfd+0x5e>
 800dc22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800dc26:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	68fa      	ldr	r2, [r7, #12]
 800dc2c:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	689b      	ldr	r3, [r3, #8]
 800dc32:	1c5a      	adds	r2, r3, #1
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	609a      	str	r2, [r3, #8]
 800dc38:	e000      	b.n	800dc3c <putc_bfd+0x74>
	if (i < 0) return;
 800dc3a:	bf00      	nop
}
 800dc3c:	3710      	adds	r7, #16
 800dc3e:	46bd      	mov	sp, r7
 800dc40:	bd80      	pop	{r7, pc}

0800dc42 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800dc42:	b580      	push	{r7, lr}
 800dc44:	b084      	sub	sp, #16
 800dc46:	af00      	add	r7, sp, #0
 800dc48:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	685b      	ldr	r3, [r3, #4]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	db16      	blt.n	800dc80 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	6818      	ldr	r0, [r3, #0]
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	f103 010c 	add.w	r1, r3, #12
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	685b      	ldr	r3, [r3, #4]
 800dc60:	461a      	mov	r2, r3
 800dc62:	f107 030c 	add.w	r3, r7, #12
 800dc66:	f7ff fbb3 	bl	800d3d0 <f_write>
 800dc6a:	4603      	mov	r3, r0
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d107      	bne.n	800dc80 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	685b      	ldr	r3, [r3, #4]
 800dc74:	68fa      	ldr	r2, [r7, #12]
 800dc76:	4293      	cmp	r3, r2
 800dc78:	d102      	bne.n	800dc80 <putc_flush+0x3e>
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	689b      	ldr	r3, [r3, #8]
 800dc7e:	e001      	b.n	800dc84 <putc_flush+0x42>
	return EOF;
 800dc80:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800dc84:	4618      	mov	r0, r3
 800dc86:	3710      	adds	r7, #16
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	bd80      	pop	{r7, pc}

0800dc8c <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800dc8c:	b480      	push	{r7}
 800dc8e:	b083      	sub	sp, #12
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	6078      	str	r0, [r7, #4]
 800dc94:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	683a      	ldr	r2, [r7, #0]
 800dc9a:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	2200      	movs	r2, #0
 800dca0:	605a      	str	r2, [r3, #4]
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	685a      	ldr	r2, [r3, #4]
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	609a      	str	r2, [r3, #8]
}
 800dcaa:	bf00      	nop
 800dcac:	370c      	adds	r7, #12
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb4:	4770      	bx	lr
	...

0800dcb8 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 800dcb8:	b40e      	push	{r1, r2, r3}
 800dcba:	b580      	push	{r7, lr}
 800dcbc:	b0a7      	sub	sp, #156	@ 0x9c
 800dcbe:	af00      	add	r7, sp, #0
 800dcc0:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 800dcc2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800dcc6:	6879      	ldr	r1, [r7, #4]
 800dcc8:	4618      	mov	r0, r3
 800dcca:	f7ff ffdf 	bl	800dc8c <putc_init>

	va_start(arp, fmt);
 800dcce:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800dcd2:	67bb      	str	r3, [r7, #120]	@ 0x78

	for (;;) {
		c = *fmt++;
 800dcd4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800dcd8:	1c5a      	adds	r2, r3, #1
 800dcda:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800dcde:	781b      	ldrb	r3, [r3, #0]
 800dce0:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == 0) break;			/* End of string */
 800dce4:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	f000 81f2 	beq.w	800e0d2 <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 800dcee:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800dcf2:	2b25      	cmp	r3, #37	@ 0x25
 800dcf4:	d008      	beq.n	800dd08 <f_printf+0x50>
			putc_bfd(&pb, c);
 800dcf6:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 800dcfa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800dcfe:	4611      	mov	r1, r2
 800dd00:	4618      	mov	r0, r3
 800dd02:	f7ff ff61 	bl	800dbc8 <putc_bfd>
			continue;
 800dd06:	e1e3      	b.n	800e0d0 <f_printf+0x418>
		}
		w = f = 0;
 800dd08:	2300      	movs	r3, #0
 800dd0a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800dd0e:	2300      	movs	r3, #0
 800dd10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
		c = *fmt++;
 800dd14:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800dd18:	1c5a      	adds	r2, r3, #1
 800dd1a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800dd1e:	781b      	ldrb	r3, [r3, #0]
 800dd20:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == '0') {				/* Flag: '0' padding */
 800dd24:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800dd28:	2b30      	cmp	r3, #48	@ 0x30
 800dd2a:	d10b      	bne.n	800dd44 <f_printf+0x8c>
			f = 1; c = *fmt++;
 800dd2c:	2301      	movs	r3, #1
 800dd2e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800dd32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800dd36:	1c5a      	adds	r2, r3, #1
 800dd38:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800dd3c:	781b      	ldrb	r3, [r3, #0]
 800dd3e:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 800dd42:	e024      	b.n	800dd8e <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 800dd44:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800dd48:	2b2d      	cmp	r3, #45	@ 0x2d
 800dd4a:	d120      	bne.n	800dd8e <f_printf+0xd6>
				f = 2; c = *fmt++;
 800dd4c:	2302      	movs	r3, #2
 800dd4e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800dd52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800dd56:	1c5a      	adds	r2, r3, #1
 800dd58:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800dd5c:	781b      	ldrb	r3, [r3, #0]
 800dd5e:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 800dd62:	e014      	b.n	800dd8e <f_printf+0xd6>
			w = w * 10 + c - '0';
 800dd64:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800dd68:	4613      	mov	r3, r2
 800dd6a:	009b      	lsls	r3, r3, #2
 800dd6c:	4413      	add	r3, r2
 800dd6e:	005b      	lsls	r3, r3, #1
 800dd70:	461a      	mov	r2, r3
 800dd72:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800dd76:	4413      	add	r3, r2
 800dd78:	3b30      	subs	r3, #48	@ 0x30
 800dd7a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			c = *fmt++;
 800dd7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800dd82:	1c5a      	adds	r2, r3, #1
 800dd84:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800dd88:	781b      	ldrb	r3, [r3, #0]
 800dd8a:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		while (IsDigit(c)) {		/* Precision */
 800dd8e:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800dd92:	2b2f      	cmp	r3, #47	@ 0x2f
 800dd94:	d903      	bls.n	800dd9e <f_printf+0xe6>
 800dd96:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800dd9a:	2b39      	cmp	r3, #57	@ 0x39
 800dd9c:	d9e2      	bls.n	800dd64 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800dd9e:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800dda2:	2b6c      	cmp	r3, #108	@ 0x6c
 800dda4:	d003      	beq.n	800ddae <f_printf+0xf6>
 800dda6:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800ddaa:	2b4c      	cmp	r3, #76	@ 0x4c
 800ddac:	d10d      	bne.n	800ddca <f_printf+0x112>
			f |= 4; c = *fmt++;
 800ddae:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800ddb2:	f043 0304 	orr.w	r3, r3, #4
 800ddb6:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800ddba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ddbe:	1c5a      	adds	r2, r3, #1
 800ddc0:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800ddc4:	781b      	ldrb	r3, [r3, #0]
 800ddc6:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		}
		if (!c) break;
 800ddca:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	f000 8181 	beq.w	800e0d6 <f_printf+0x41e>
		d = c;
 800ddd4:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800ddd8:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		if (IsLower(d)) d -= 0x20;
 800dddc:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800dde0:	2b60      	cmp	r3, #96	@ 0x60
 800dde2:	d908      	bls.n	800ddf6 <f_printf+0x13e>
 800dde4:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800dde8:	2b7a      	cmp	r3, #122	@ 0x7a
 800ddea:	d804      	bhi.n	800ddf6 <f_printf+0x13e>
 800ddec:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800ddf0:	3b20      	subs	r3, #32
 800ddf2:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		switch (d) {				/* Type is... */
 800ddf6:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800ddfa:	3b42      	subs	r3, #66	@ 0x42
 800ddfc:	2b16      	cmp	r3, #22
 800ddfe:	f200 8098 	bhi.w	800df32 <f_printf+0x27a>
 800de02:	a201      	add	r2, pc, #4	@ (adr r2, 800de08 <f_printf+0x150>)
 800de04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de08:	0800df13 	.word	0x0800df13
 800de0c:	0800defb 	.word	0x0800defb
 800de10:	0800df23 	.word	0x0800df23
 800de14:	0800df33 	.word	0x0800df33
 800de18:	0800df33 	.word	0x0800df33
 800de1c:	0800df33 	.word	0x0800df33
 800de20:	0800df33 	.word	0x0800df33
 800de24:	0800df33 	.word	0x0800df33
 800de28:	0800df33 	.word	0x0800df33
 800de2c:	0800df33 	.word	0x0800df33
 800de30:	0800df33 	.word	0x0800df33
 800de34:	0800df33 	.word	0x0800df33
 800de38:	0800df33 	.word	0x0800df33
 800de3c:	0800df1b 	.word	0x0800df1b
 800de40:	0800df33 	.word	0x0800df33
 800de44:	0800df33 	.word	0x0800df33
 800de48:	0800df33 	.word	0x0800df33
 800de4c:	0800de65 	.word	0x0800de65
 800de50:	0800df33 	.word	0x0800df33
 800de54:	0800df23 	.word	0x0800df23
 800de58:	0800df33 	.word	0x0800df33
 800de5c:	0800df33 	.word	0x0800df33
 800de60:	0800df2b 	.word	0x0800df2b
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 800de64:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800de66:	1d1a      	adds	r2, r3, #4
 800de68:	67ba      	str	r2, [r7, #120]	@ 0x78
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	67fb      	str	r3, [r7, #124]	@ 0x7c
			for (j = 0; p[j]; j++) ;
 800de6e:	2300      	movs	r3, #0
 800de70:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800de74:	e004      	b.n	800de80 <f_printf+0x1c8>
 800de76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800de7a:	3301      	adds	r3, #1
 800de7c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800de80:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800de82:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800de86:	4413      	add	r3, r2
 800de88:	781b      	ldrb	r3, [r3, #0]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d1f3      	bne.n	800de76 <f_printf+0x1be>
			if (!(f & 2)) {
 800de8e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800de92:	f003 0302 	and.w	r3, r3, #2
 800de96:	2b00      	cmp	r3, #0
 800de98:	d11a      	bne.n	800ded0 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 800de9a:	e005      	b.n	800dea8 <f_printf+0x1f0>
 800de9c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800dea0:	2120      	movs	r1, #32
 800dea2:	4618      	mov	r0, r3
 800dea4:	f7ff fe90 	bl	800dbc8 <putc_bfd>
 800dea8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800deac:	1c5a      	adds	r2, r3, #1
 800deae:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800deb2:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800deb6:	429a      	cmp	r2, r3
 800deb8:	d8f0      	bhi.n	800de9c <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 800deba:	e009      	b.n	800ded0 <f_printf+0x218>
 800debc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800debe:	1c5a      	adds	r2, r3, #1
 800dec0:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800dec2:	781a      	ldrb	r2, [r3, #0]
 800dec4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800dec8:	4611      	mov	r1, r2
 800deca:	4618      	mov	r0, r3
 800decc:	f7ff fe7c 	bl	800dbc8 <putc_bfd>
 800ded0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ded2:	781b      	ldrb	r3, [r3, #0]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d1f1      	bne.n	800debc <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 800ded8:	e005      	b.n	800dee6 <f_printf+0x22e>
 800deda:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800dede:	2120      	movs	r1, #32
 800dee0:	4618      	mov	r0, r3
 800dee2:	f7ff fe71 	bl	800dbc8 <putc_bfd>
 800dee6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800deea:	1c5a      	adds	r2, r3, #1
 800deec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800def0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800def4:	429a      	cmp	r2, r3
 800def6:	d8f0      	bhi.n	800deda <f_printf+0x222>
			continue;
 800def8:	e0ea      	b.n	800e0d0 <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 800defa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800defc:	1d1a      	adds	r2, r3, #4
 800defe:	67ba      	str	r2, [r7, #120]	@ 0x78
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	b2da      	uxtb	r2, r3
 800df04:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800df08:	4611      	mov	r1, r2
 800df0a:	4618      	mov	r0, r3
 800df0c:	f7ff fe5c 	bl	800dbc8 <putc_bfd>
 800df10:	e0de      	b.n	800e0d0 <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 800df12:	2302      	movs	r3, #2
 800df14:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 800df18:	e014      	b.n	800df44 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 800df1a:	2308      	movs	r3, #8
 800df1c:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 800df20:	e010      	b.n	800df44 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800df22:	230a      	movs	r3, #10
 800df24:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 800df28:	e00c      	b.n	800df44 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800df2a:	2310      	movs	r3, #16
 800df2c:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 800df30:	e008      	b.n	800df44 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 800df32:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 800df36:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800df3a:	4611      	mov	r1, r2
 800df3c:	4618      	mov	r0, r3
 800df3e:	f7ff fe43 	bl	800dbc8 <putc_bfd>
 800df42:	e0c5      	b.n	800e0d0 <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800df44:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800df48:	f003 0304 	and.w	r3, r3, #4
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d004      	beq.n	800df5a <f_printf+0x2a2>
 800df50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800df52:	1d1a      	adds	r2, r3, #4
 800df54:	67ba      	str	r2, [r7, #120]	@ 0x78
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	e00c      	b.n	800df74 <f_printf+0x2bc>
 800df5a:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800df5e:	2b44      	cmp	r3, #68	@ 0x44
 800df60:	d104      	bne.n	800df6c <f_printf+0x2b4>
 800df62:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800df64:	1d1a      	adds	r2, r3, #4
 800df66:	67ba      	str	r2, [r7, #120]	@ 0x78
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	e003      	b.n	800df74 <f_printf+0x2bc>
 800df6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800df6e:	1d1a      	adds	r2, r3, #4
 800df70:	67ba      	str	r2, [r7, #120]	@ 0x78
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		if (d == 'D' && (v & 0x80000000)) {
 800df78:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800df7c:	2b44      	cmp	r3, #68	@ 0x44
 800df7e:	d10e      	bne.n	800df9e <f_printf+0x2e6>
 800df80:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800df84:	2b00      	cmp	r3, #0
 800df86:	da0a      	bge.n	800df9e <f_printf+0x2e6>
			v = 0 - v;
 800df88:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800df8c:	425b      	negs	r3, r3
 800df8e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			f |= 8;
 800df92:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800df96:	f043 0308 	orr.w	r3, r3, #8
 800df9a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		}
		i = 0;
 800df9e:	2300      	movs	r3, #0
 800dfa0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 800dfa4:	f897 2096 	ldrb.w	r2, [r7, #150]	@ 0x96
 800dfa8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800dfac:	fbb3 f1f2 	udiv	r1, r3, r2
 800dfb0:	fb01 f202 	mul.w	r2, r1, r2
 800dfb4:	1a9b      	subs	r3, r3, r2
 800dfb6:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
 800dfba:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 800dfbe:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800dfc2:	fbb2 f3f3 	udiv	r3, r2, r3
 800dfc6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800dfca:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800dfce:	2b09      	cmp	r3, #9
 800dfd0:	d90b      	bls.n	800dfea <f_printf+0x332>
 800dfd2:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800dfd6:	2b78      	cmp	r3, #120	@ 0x78
 800dfd8:	d101      	bne.n	800dfde <f_printf+0x326>
 800dfda:	2227      	movs	r2, #39	@ 0x27
 800dfdc:	e000      	b.n	800dfe0 <f_printf+0x328>
 800dfde:	2207      	movs	r2, #7
 800dfe0:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800dfe4:	4413      	add	r3, r2
 800dfe6:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
			str[i++] = d + '0';
 800dfea:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800dfee:	1c5a      	adds	r2, r3, #1
 800dff0:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800dff4:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 800dff8:	3230      	adds	r2, #48	@ 0x30
 800dffa:	b2d2      	uxtb	r2, r2
 800dffc:	3398      	adds	r3, #152	@ 0x98
 800dffe:	443b      	add	r3, r7
 800e000:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 800e004:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d003      	beq.n	800e014 <f_printf+0x35c>
 800e00c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800e010:	2b1f      	cmp	r3, #31
 800e012:	d9c7      	bls.n	800dfa4 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 800e014:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800e018:	f003 0308 	and.w	r3, r3, #8
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d009      	beq.n	800e034 <f_printf+0x37c>
 800e020:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800e024:	1c5a      	adds	r2, r3, #1
 800e026:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800e02a:	3398      	adds	r3, #152	@ 0x98
 800e02c:	443b      	add	r3, r7
 800e02e:	222d      	movs	r2, #45	@ 0x2d
 800e030:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 800e034:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800e038:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800e03c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800e040:	f003 0301 	and.w	r3, r3, #1
 800e044:	2b00      	cmp	r3, #0
 800e046:	d001      	beq.n	800e04c <f_printf+0x394>
 800e048:	2330      	movs	r3, #48	@ 0x30
 800e04a:	e000      	b.n	800e04e <f_printf+0x396>
 800e04c:	2320      	movs	r3, #32
 800e04e:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 800e052:	e007      	b.n	800e064 <f_printf+0x3ac>
 800e054:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 800e058:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800e05c:	4611      	mov	r1, r2
 800e05e:	4618      	mov	r0, r3
 800e060:	f7ff fdb2 	bl	800dbc8 <putc_bfd>
 800e064:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800e068:	f003 0302 	and.w	r3, r3, #2
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d108      	bne.n	800e082 <f_printf+0x3ca>
 800e070:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e074:	1c5a      	adds	r2, r3, #1
 800e076:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800e07a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800e07e:	429a      	cmp	r2, r3
 800e080:	d8e8      	bhi.n	800e054 <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 800e082:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800e086:	3b01      	subs	r3, #1
 800e088:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e08c:	f107 020c 	add.w	r2, r7, #12
 800e090:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800e094:	4413      	add	r3, r2
 800e096:	781a      	ldrb	r2, [r3, #0]
 800e098:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800e09c:	4611      	mov	r1, r2
 800e09e:	4618      	mov	r0, r3
 800e0a0:	f7ff fd92 	bl	800dbc8 <putc_bfd>
		} while (i);
 800e0a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d1ea      	bne.n	800e082 <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 800e0ac:	e007      	b.n	800e0be <f_printf+0x406>
 800e0ae:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 800e0b2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800e0b6:	4611      	mov	r1, r2
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	f7ff fd85 	bl	800dbc8 <putc_bfd>
 800e0be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e0c2:	1c5a      	adds	r2, r3, #1
 800e0c4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800e0c8:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800e0cc:	429a      	cmp	r2, r3
 800e0ce:	d8ee      	bhi.n	800e0ae <f_printf+0x3f6>
		c = *fmt++;
 800e0d0:	e600      	b.n	800dcd4 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 800e0d2:	bf00      	nop
 800e0d4:	e000      	b.n	800e0d8 <f_printf+0x420>
		if (!c) break;
 800e0d6:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 800e0d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800e0dc:	4618      	mov	r0, r3
 800e0de:	f7ff fdb0 	bl	800dc42 <putc_flush>
 800e0e2:	4603      	mov	r3, r0
}
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	379c      	adds	r7, #156	@ 0x9c
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e0ee:	b003      	add	sp, #12
 800e0f0:	4770      	bx	lr
 800e0f2:	bf00      	nop

0800e0f4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e0f4:	b480      	push	{r7}
 800e0f6:	b087      	sub	sp, #28
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	60f8      	str	r0, [r7, #12]
 800e0fc:	60b9      	str	r1, [r7, #8]
 800e0fe:	4613      	mov	r3, r2
 800e100:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e102:	2301      	movs	r3, #1
 800e104:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e106:	2300      	movs	r3, #0
 800e108:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e10a:	4b1f      	ldr	r3, [pc, #124]	@ (800e188 <FATFS_LinkDriverEx+0x94>)
 800e10c:	7a5b      	ldrb	r3, [r3, #9]
 800e10e:	b2db      	uxtb	r3, r3
 800e110:	2b00      	cmp	r3, #0
 800e112:	d131      	bne.n	800e178 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e114:	4b1c      	ldr	r3, [pc, #112]	@ (800e188 <FATFS_LinkDriverEx+0x94>)
 800e116:	7a5b      	ldrb	r3, [r3, #9]
 800e118:	b2db      	uxtb	r3, r3
 800e11a:	461a      	mov	r2, r3
 800e11c:	4b1a      	ldr	r3, [pc, #104]	@ (800e188 <FATFS_LinkDriverEx+0x94>)
 800e11e:	2100      	movs	r1, #0
 800e120:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e122:	4b19      	ldr	r3, [pc, #100]	@ (800e188 <FATFS_LinkDriverEx+0x94>)
 800e124:	7a5b      	ldrb	r3, [r3, #9]
 800e126:	b2db      	uxtb	r3, r3
 800e128:	4a17      	ldr	r2, [pc, #92]	@ (800e188 <FATFS_LinkDriverEx+0x94>)
 800e12a:	009b      	lsls	r3, r3, #2
 800e12c:	4413      	add	r3, r2
 800e12e:	68fa      	ldr	r2, [r7, #12]
 800e130:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e132:	4b15      	ldr	r3, [pc, #84]	@ (800e188 <FATFS_LinkDriverEx+0x94>)
 800e134:	7a5b      	ldrb	r3, [r3, #9]
 800e136:	b2db      	uxtb	r3, r3
 800e138:	461a      	mov	r2, r3
 800e13a:	4b13      	ldr	r3, [pc, #76]	@ (800e188 <FATFS_LinkDriverEx+0x94>)
 800e13c:	4413      	add	r3, r2
 800e13e:	79fa      	ldrb	r2, [r7, #7]
 800e140:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e142:	4b11      	ldr	r3, [pc, #68]	@ (800e188 <FATFS_LinkDriverEx+0x94>)
 800e144:	7a5b      	ldrb	r3, [r3, #9]
 800e146:	b2db      	uxtb	r3, r3
 800e148:	1c5a      	adds	r2, r3, #1
 800e14a:	b2d1      	uxtb	r1, r2
 800e14c:	4a0e      	ldr	r2, [pc, #56]	@ (800e188 <FATFS_LinkDriverEx+0x94>)
 800e14e:	7251      	strb	r1, [r2, #9]
 800e150:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e152:	7dbb      	ldrb	r3, [r7, #22]
 800e154:	3330      	adds	r3, #48	@ 0x30
 800e156:	b2da      	uxtb	r2, r3
 800e158:	68bb      	ldr	r3, [r7, #8]
 800e15a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e15c:	68bb      	ldr	r3, [r7, #8]
 800e15e:	3301      	adds	r3, #1
 800e160:	223a      	movs	r2, #58	@ 0x3a
 800e162:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e164:	68bb      	ldr	r3, [r7, #8]
 800e166:	3302      	adds	r3, #2
 800e168:	222f      	movs	r2, #47	@ 0x2f
 800e16a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e16c:	68bb      	ldr	r3, [r7, #8]
 800e16e:	3303      	adds	r3, #3
 800e170:	2200      	movs	r2, #0
 800e172:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e174:	2300      	movs	r3, #0
 800e176:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e178:	7dfb      	ldrb	r3, [r7, #23]
}
 800e17a:	4618      	mov	r0, r3
 800e17c:	371c      	adds	r7, #28
 800e17e:	46bd      	mov	sp, r7
 800e180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e184:	4770      	bx	lr
 800e186:	bf00      	nop
 800e188:	240007cc 	.word	0x240007cc

0800e18c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e18c:	b580      	push	{r7, lr}
 800e18e:	b082      	sub	sp, #8
 800e190:	af00      	add	r7, sp, #0
 800e192:	6078      	str	r0, [r7, #4]
 800e194:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e196:	2200      	movs	r2, #0
 800e198:	6839      	ldr	r1, [r7, #0]
 800e19a:	6878      	ldr	r0, [r7, #4]
 800e19c:	f7ff ffaa 	bl	800e0f4 <FATFS_LinkDriverEx>
 800e1a0:	4603      	mov	r3, r0
}
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	3708      	adds	r7, #8
 800e1a6:	46bd      	mov	sp, r7
 800e1a8:	bd80      	pop	{r7, pc}
	...

0800e1ac <std>:
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	b510      	push	{r4, lr}
 800e1b0:	4604      	mov	r4, r0
 800e1b2:	e9c0 3300 	strd	r3, r3, [r0]
 800e1b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e1ba:	6083      	str	r3, [r0, #8]
 800e1bc:	8181      	strh	r1, [r0, #12]
 800e1be:	6643      	str	r3, [r0, #100]	@ 0x64
 800e1c0:	81c2      	strh	r2, [r0, #14]
 800e1c2:	6183      	str	r3, [r0, #24]
 800e1c4:	4619      	mov	r1, r3
 800e1c6:	2208      	movs	r2, #8
 800e1c8:	305c      	adds	r0, #92	@ 0x5c
 800e1ca:	f000 facf 	bl	800e76c <memset>
 800e1ce:	4b0d      	ldr	r3, [pc, #52]	@ (800e204 <std+0x58>)
 800e1d0:	6263      	str	r3, [r4, #36]	@ 0x24
 800e1d2:	4b0d      	ldr	r3, [pc, #52]	@ (800e208 <std+0x5c>)
 800e1d4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e1d6:	4b0d      	ldr	r3, [pc, #52]	@ (800e20c <std+0x60>)
 800e1d8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e1da:	4b0d      	ldr	r3, [pc, #52]	@ (800e210 <std+0x64>)
 800e1dc:	6323      	str	r3, [r4, #48]	@ 0x30
 800e1de:	4b0d      	ldr	r3, [pc, #52]	@ (800e214 <std+0x68>)
 800e1e0:	6224      	str	r4, [r4, #32]
 800e1e2:	429c      	cmp	r4, r3
 800e1e4:	d006      	beq.n	800e1f4 <std+0x48>
 800e1e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e1ea:	4294      	cmp	r4, r2
 800e1ec:	d002      	beq.n	800e1f4 <std+0x48>
 800e1ee:	33d0      	adds	r3, #208	@ 0xd0
 800e1f0:	429c      	cmp	r4, r3
 800e1f2:	d105      	bne.n	800e200 <std+0x54>
 800e1f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e1f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e1fc:	f000 bb2e 	b.w	800e85c <__retarget_lock_init_recursive>
 800e200:	bd10      	pop	{r4, pc}
 800e202:	bf00      	nop
 800e204:	0800e5bd 	.word	0x0800e5bd
 800e208:	0800e5df 	.word	0x0800e5df
 800e20c:	0800e617 	.word	0x0800e617
 800e210:	0800e63b 	.word	0x0800e63b
 800e214:	240007d8 	.word	0x240007d8

0800e218 <stdio_exit_handler>:
 800e218:	4a02      	ldr	r2, [pc, #8]	@ (800e224 <stdio_exit_handler+0xc>)
 800e21a:	4903      	ldr	r1, [pc, #12]	@ (800e228 <stdio_exit_handler+0x10>)
 800e21c:	4803      	ldr	r0, [pc, #12]	@ (800e22c <stdio_exit_handler+0x14>)
 800e21e:	f000 b869 	b.w	800e2f4 <_fwalk_sglue>
 800e222:	bf00      	nop
 800e224:	24000010 	.word	0x24000010
 800e228:	0800f3b9 	.word	0x0800f3b9
 800e22c:	24000020 	.word	0x24000020

0800e230 <cleanup_stdio>:
 800e230:	6841      	ldr	r1, [r0, #4]
 800e232:	4b0c      	ldr	r3, [pc, #48]	@ (800e264 <cleanup_stdio+0x34>)
 800e234:	4299      	cmp	r1, r3
 800e236:	b510      	push	{r4, lr}
 800e238:	4604      	mov	r4, r0
 800e23a:	d001      	beq.n	800e240 <cleanup_stdio+0x10>
 800e23c:	f001 f8bc 	bl	800f3b8 <_fflush_r>
 800e240:	68a1      	ldr	r1, [r4, #8]
 800e242:	4b09      	ldr	r3, [pc, #36]	@ (800e268 <cleanup_stdio+0x38>)
 800e244:	4299      	cmp	r1, r3
 800e246:	d002      	beq.n	800e24e <cleanup_stdio+0x1e>
 800e248:	4620      	mov	r0, r4
 800e24a:	f001 f8b5 	bl	800f3b8 <_fflush_r>
 800e24e:	68e1      	ldr	r1, [r4, #12]
 800e250:	4b06      	ldr	r3, [pc, #24]	@ (800e26c <cleanup_stdio+0x3c>)
 800e252:	4299      	cmp	r1, r3
 800e254:	d004      	beq.n	800e260 <cleanup_stdio+0x30>
 800e256:	4620      	mov	r0, r4
 800e258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e25c:	f001 b8ac 	b.w	800f3b8 <_fflush_r>
 800e260:	bd10      	pop	{r4, pc}
 800e262:	bf00      	nop
 800e264:	240007d8 	.word	0x240007d8
 800e268:	24000840 	.word	0x24000840
 800e26c:	240008a8 	.word	0x240008a8

0800e270 <global_stdio_init.part.0>:
 800e270:	b510      	push	{r4, lr}
 800e272:	4b0b      	ldr	r3, [pc, #44]	@ (800e2a0 <global_stdio_init.part.0+0x30>)
 800e274:	4c0b      	ldr	r4, [pc, #44]	@ (800e2a4 <global_stdio_init.part.0+0x34>)
 800e276:	4a0c      	ldr	r2, [pc, #48]	@ (800e2a8 <global_stdio_init.part.0+0x38>)
 800e278:	601a      	str	r2, [r3, #0]
 800e27a:	4620      	mov	r0, r4
 800e27c:	2200      	movs	r2, #0
 800e27e:	2104      	movs	r1, #4
 800e280:	f7ff ff94 	bl	800e1ac <std>
 800e284:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e288:	2201      	movs	r2, #1
 800e28a:	2109      	movs	r1, #9
 800e28c:	f7ff ff8e 	bl	800e1ac <std>
 800e290:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e294:	2202      	movs	r2, #2
 800e296:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e29a:	2112      	movs	r1, #18
 800e29c:	f7ff bf86 	b.w	800e1ac <std>
 800e2a0:	24000910 	.word	0x24000910
 800e2a4:	240007d8 	.word	0x240007d8
 800e2a8:	0800e219 	.word	0x0800e219

0800e2ac <__sfp_lock_acquire>:
 800e2ac:	4801      	ldr	r0, [pc, #4]	@ (800e2b4 <__sfp_lock_acquire+0x8>)
 800e2ae:	f000 bad6 	b.w	800e85e <__retarget_lock_acquire_recursive>
 800e2b2:	bf00      	nop
 800e2b4:	24000919 	.word	0x24000919

0800e2b8 <__sfp_lock_release>:
 800e2b8:	4801      	ldr	r0, [pc, #4]	@ (800e2c0 <__sfp_lock_release+0x8>)
 800e2ba:	f000 bad1 	b.w	800e860 <__retarget_lock_release_recursive>
 800e2be:	bf00      	nop
 800e2c0:	24000919 	.word	0x24000919

0800e2c4 <__sinit>:
 800e2c4:	b510      	push	{r4, lr}
 800e2c6:	4604      	mov	r4, r0
 800e2c8:	f7ff fff0 	bl	800e2ac <__sfp_lock_acquire>
 800e2cc:	6a23      	ldr	r3, [r4, #32]
 800e2ce:	b11b      	cbz	r3, 800e2d8 <__sinit+0x14>
 800e2d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e2d4:	f7ff bff0 	b.w	800e2b8 <__sfp_lock_release>
 800e2d8:	4b04      	ldr	r3, [pc, #16]	@ (800e2ec <__sinit+0x28>)
 800e2da:	6223      	str	r3, [r4, #32]
 800e2dc:	4b04      	ldr	r3, [pc, #16]	@ (800e2f0 <__sinit+0x2c>)
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d1f5      	bne.n	800e2d0 <__sinit+0xc>
 800e2e4:	f7ff ffc4 	bl	800e270 <global_stdio_init.part.0>
 800e2e8:	e7f2      	b.n	800e2d0 <__sinit+0xc>
 800e2ea:	bf00      	nop
 800e2ec:	0800e231 	.word	0x0800e231
 800e2f0:	24000910 	.word	0x24000910

0800e2f4 <_fwalk_sglue>:
 800e2f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e2f8:	4607      	mov	r7, r0
 800e2fa:	4688      	mov	r8, r1
 800e2fc:	4614      	mov	r4, r2
 800e2fe:	2600      	movs	r6, #0
 800e300:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e304:	f1b9 0901 	subs.w	r9, r9, #1
 800e308:	d505      	bpl.n	800e316 <_fwalk_sglue+0x22>
 800e30a:	6824      	ldr	r4, [r4, #0]
 800e30c:	2c00      	cmp	r4, #0
 800e30e:	d1f7      	bne.n	800e300 <_fwalk_sglue+0xc>
 800e310:	4630      	mov	r0, r6
 800e312:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e316:	89ab      	ldrh	r3, [r5, #12]
 800e318:	2b01      	cmp	r3, #1
 800e31a:	d907      	bls.n	800e32c <_fwalk_sglue+0x38>
 800e31c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e320:	3301      	adds	r3, #1
 800e322:	d003      	beq.n	800e32c <_fwalk_sglue+0x38>
 800e324:	4629      	mov	r1, r5
 800e326:	4638      	mov	r0, r7
 800e328:	47c0      	blx	r8
 800e32a:	4306      	orrs	r6, r0
 800e32c:	3568      	adds	r5, #104	@ 0x68
 800e32e:	e7e9      	b.n	800e304 <_fwalk_sglue+0x10>

0800e330 <iprintf>:
 800e330:	b40f      	push	{r0, r1, r2, r3}
 800e332:	b507      	push	{r0, r1, r2, lr}
 800e334:	4906      	ldr	r1, [pc, #24]	@ (800e350 <iprintf+0x20>)
 800e336:	ab04      	add	r3, sp, #16
 800e338:	6808      	ldr	r0, [r1, #0]
 800e33a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e33e:	6881      	ldr	r1, [r0, #8]
 800e340:	9301      	str	r3, [sp, #4]
 800e342:	f000 fd11 	bl	800ed68 <_vfiprintf_r>
 800e346:	b003      	add	sp, #12
 800e348:	f85d eb04 	ldr.w	lr, [sp], #4
 800e34c:	b004      	add	sp, #16
 800e34e:	4770      	bx	lr
 800e350:	2400001c 	.word	0x2400001c

0800e354 <_puts_r>:
 800e354:	6a03      	ldr	r3, [r0, #32]
 800e356:	b570      	push	{r4, r5, r6, lr}
 800e358:	6884      	ldr	r4, [r0, #8]
 800e35a:	4605      	mov	r5, r0
 800e35c:	460e      	mov	r6, r1
 800e35e:	b90b      	cbnz	r3, 800e364 <_puts_r+0x10>
 800e360:	f7ff ffb0 	bl	800e2c4 <__sinit>
 800e364:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e366:	07db      	lsls	r3, r3, #31
 800e368:	d405      	bmi.n	800e376 <_puts_r+0x22>
 800e36a:	89a3      	ldrh	r3, [r4, #12]
 800e36c:	0598      	lsls	r0, r3, #22
 800e36e:	d402      	bmi.n	800e376 <_puts_r+0x22>
 800e370:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e372:	f000 fa74 	bl	800e85e <__retarget_lock_acquire_recursive>
 800e376:	89a3      	ldrh	r3, [r4, #12]
 800e378:	0719      	lsls	r1, r3, #28
 800e37a:	d502      	bpl.n	800e382 <_puts_r+0x2e>
 800e37c:	6923      	ldr	r3, [r4, #16]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d135      	bne.n	800e3ee <_puts_r+0x9a>
 800e382:	4621      	mov	r1, r4
 800e384:	4628      	mov	r0, r5
 800e386:	f000 f99b 	bl	800e6c0 <__swsetup_r>
 800e38a:	b380      	cbz	r0, 800e3ee <_puts_r+0x9a>
 800e38c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800e390:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e392:	07da      	lsls	r2, r3, #31
 800e394:	d405      	bmi.n	800e3a2 <_puts_r+0x4e>
 800e396:	89a3      	ldrh	r3, [r4, #12]
 800e398:	059b      	lsls	r3, r3, #22
 800e39a:	d402      	bmi.n	800e3a2 <_puts_r+0x4e>
 800e39c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e39e:	f000 fa5f 	bl	800e860 <__retarget_lock_release_recursive>
 800e3a2:	4628      	mov	r0, r5
 800e3a4:	bd70      	pop	{r4, r5, r6, pc}
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	da04      	bge.n	800e3b4 <_puts_r+0x60>
 800e3aa:	69a2      	ldr	r2, [r4, #24]
 800e3ac:	429a      	cmp	r2, r3
 800e3ae:	dc17      	bgt.n	800e3e0 <_puts_r+0x8c>
 800e3b0:	290a      	cmp	r1, #10
 800e3b2:	d015      	beq.n	800e3e0 <_puts_r+0x8c>
 800e3b4:	6823      	ldr	r3, [r4, #0]
 800e3b6:	1c5a      	adds	r2, r3, #1
 800e3b8:	6022      	str	r2, [r4, #0]
 800e3ba:	7019      	strb	r1, [r3, #0]
 800e3bc:	68a3      	ldr	r3, [r4, #8]
 800e3be:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e3c2:	3b01      	subs	r3, #1
 800e3c4:	60a3      	str	r3, [r4, #8]
 800e3c6:	2900      	cmp	r1, #0
 800e3c8:	d1ed      	bne.n	800e3a6 <_puts_r+0x52>
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	da11      	bge.n	800e3f2 <_puts_r+0x9e>
 800e3ce:	4622      	mov	r2, r4
 800e3d0:	210a      	movs	r1, #10
 800e3d2:	4628      	mov	r0, r5
 800e3d4:	f000 f935 	bl	800e642 <__swbuf_r>
 800e3d8:	3001      	adds	r0, #1
 800e3da:	d0d7      	beq.n	800e38c <_puts_r+0x38>
 800e3dc:	250a      	movs	r5, #10
 800e3de:	e7d7      	b.n	800e390 <_puts_r+0x3c>
 800e3e0:	4622      	mov	r2, r4
 800e3e2:	4628      	mov	r0, r5
 800e3e4:	f000 f92d 	bl	800e642 <__swbuf_r>
 800e3e8:	3001      	adds	r0, #1
 800e3ea:	d1e7      	bne.n	800e3bc <_puts_r+0x68>
 800e3ec:	e7ce      	b.n	800e38c <_puts_r+0x38>
 800e3ee:	3e01      	subs	r6, #1
 800e3f0:	e7e4      	b.n	800e3bc <_puts_r+0x68>
 800e3f2:	6823      	ldr	r3, [r4, #0]
 800e3f4:	1c5a      	adds	r2, r3, #1
 800e3f6:	6022      	str	r2, [r4, #0]
 800e3f8:	220a      	movs	r2, #10
 800e3fa:	701a      	strb	r2, [r3, #0]
 800e3fc:	e7ee      	b.n	800e3dc <_puts_r+0x88>
	...

0800e400 <puts>:
 800e400:	4b02      	ldr	r3, [pc, #8]	@ (800e40c <puts+0xc>)
 800e402:	4601      	mov	r1, r0
 800e404:	6818      	ldr	r0, [r3, #0]
 800e406:	f7ff bfa5 	b.w	800e354 <_puts_r>
 800e40a:	bf00      	nop
 800e40c:	2400001c 	.word	0x2400001c

0800e410 <setvbuf>:
 800e410:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e414:	461d      	mov	r5, r3
 800e416:	4b57      	ldr	r3, [pc, #348]	@ (800e574 <setvbuf+0x164>)
 800e418:	681f      	ldr	r7, [r3, #0]
 800e41a:	4604      	mov	r4, r0
 800e41c:	460e      	mov	r6, r1
 800e41e:	4690      	mov	r8, r2
 800e420:	b127      	cbz	r7, 800e42c <setvbuf+0x1c>
 800e422:	6a3b      	ldr	r3, [r7, #32]
 800e424:	b913      	cbnz	r3, 800e42c <setvbuf+0x1c>
 800e426:	4638      	mov	r0, r7
 800e428:	f7ff ff4c 	bl	800e2c4 <__sinit>
 800e42c:	f1b8 0f02 	cmp.w	r8, #2
 800e430:	d006      	beq.n	800e440 <setvbuf+0x30>
 800e432:	f1b8 0f01 	cmp.w	r8, #1
 800e436:	f200 809a 	bhi.w	800e56e <setvbuf+0x15e>
 800e43a:	2d00      	cmp	r5, #0
 800e43c:	f2c0 8097 	blt.w	800e56e <setvbuf+0x15e>
 800e440:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e442:	07d9      	lsls	r1, r3, #31
 800e444:	d405      	bmi.n	800e452 <setvbuf+0x42>
 800e446:	89a3      	ldrh	r3, [r4, #12]
 800e448:	059a      	lsls	r2, r3, #22
 800e44a:	d402      	bmi.n	800e452 <setvbuf+0x42>
 800e44c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e44e:	f000 fa06 	bl	800e85e <__retarget_lock_acquire_recursive>
 800e452:	4621      	mov	r1, r4
 800e454:	4638      	mov	r0, r7
 800e456:	f000 ffaf 	bl	800f3b8 <_fflush_r>
 800e45a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e45c:	b141      	cbz	r1, 800e470 <setvbuf+0x60>
 800e45e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e462:	4299      	cmp	r1, r3
 800e464:	d002      	beq.n	800e46c <setvbuf+0x5c>
 800e466:	4638      	mov	r0, r7
 800e468:	f000 f9fc 	bl	800e864 <_free_r>
 800e46c:	2300      	movs	r3, #0
 800e46e:	6363      	str	r3, [r4, #52]	@ 0x34
 800e470:	2300      	movs	r3, #0
 800e472:	61a3      	str	r3, [r4, #24]
 800e474:	6063      	str	r3, [r4, #4]
 800e476:	89a3      	ldrh	r3, [r4, #12]
 800e478:	061b      	lsls	r3, r3, #24
 800e47a:	d503      	bpl.n	800e484 <setvbuf+0x74>
 800e47c:	6921      	ldr	r1, [r4, #16]
 800e47e:	4638      	mov	r0, r7
 800e480:	f000 f9f0 	bl	800e864 <_free_r>
 800e484:	89a3      	ldrh	r3, [r4, #12]
 800e486:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800e48a:	f023 0303 	bic.w	r3, r3, #3
 800e48e:	f1b8 0f02 	cmp.w	r8, #2
 800e492:	81a3      	strh	r3, [r4, #12]
 800e494:	d061      	beq.n	800e55a <setvbuf+0x14a>
 800e496:	ab01      	add	r3, sp, #4
 800e498:	466a      	mov	r2, sp
 800e49a:	4621      	mov	r1, r4
 800e49c:	4638      	mov	r0, r7
 800e49e:	f000 ffb3 	bl	800f408 <__swhatbuf_r>
 800e4a2:	89a3      	ldrh	r3, [r4, #12]
 800e4a4:	4318      	orrs	r0, r3
 800e4a6:	81a0      	strh	r0, [r4, #12]
 800e4a8:	bb2d      	cbnz	r5, 800e4f6 <setvbuf+0xe6>
 800e4aa:	9d00      	ldr	r5, [sp, #0]
 800e4ac:	4628      	mov	r0, r5
 800e4ae:	f000 fa23 	bl	800e8f8 <malloc>
 800e4b2:	4606      	mov	r6, r0
 800e4b4:	2800      	cmp	r0, #0
 800e4b6:	d152      	bne.n	800e55e <setvbuf+0x14e>
 800e4b8:	f8dd 9000 	ldr.w	r9, [sp]
 800e4bc:	45a9      	cmp	r9, r5
 800e4be:	d140      	bne.n	800e542 <setvbuf+0x132>
 800e4c0:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800e4c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e4c8:	f043 0202 	orr.w	r2, r3, #2
 800e4cc:	81a2      	strh	r2, [r4, #12]
 800e4ce:	2200      	movs	r2, #0
 800e4d0:	60a2      	str	r2, [r4, #8]
 800e4d2:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800e4d6:	6022      	str	r2, [r4, #0]
 800e4d8:	6122      	str	r2, [r4, #16]
 800e4da:	2201      	movs	r2, #1
 800e4dc:	6162      	str	r2, [r4, #20]
 800e4de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e4e0:	07d6      	lsls	r6, r2, #31
 800e4e2:	d404      	bmi.n	800e4ee <setvbuf+0xde>
 800e4e4:	0598      	lsls	r0, r3, #22
 800e4e6:	d402      	bmi.n	800e4ee <setvbuf+0xde>
 800e4e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e4ea:	f000 f9b9 	bl	800e860 <__retarget_lock_release_recursive>
 800e4ee:	4628      	mov	r0, r5
 800e4f0:	b003      	add	sp, #12
 800e4f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e4f6:	2e00      	cmp	r6, #0
 800e4f8:	d0d8      	beq.n	800e4ac <setvbuf+0x9c>
 800e4fa:	6a3b      	ldr	r3, [r7, #32]
 800e4fc:	b913      	cbnz	r3, 800e504 <setvbuf+0xf4>
 800e4fe:	4638      	mov	r0, r7
 800e500:	f7ff fee0 	bl	800e2c4 <__sinit>
 800e504:	f1b8 0f01 	cmp.w	r8, #1
 800e508:	bf08      	it	eq
 800e50a:	89a3      	ldrheq	r3, [r4, #12]
 800e50c:	6026      	str	r6, [r4, #0]
 800e50e:	bf04      	itt	eq
 800e510:	f043 0301 	orreq.w	r3, r3, #1
 800e514:	81a3      	strheq	r3, [r4, #12]
 800e516:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e51a:	f013 0208 	ands.w	r2, r3, #8
 800e51e:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800e522:	d01e      	beq.n	800e562 <setvbuf+0x152>
 800e524:	07d9      	lsls	r1, r3, #31
 800e526:	bf41      	itttt	mi
 800e528:	2200      	movmi	r2, #0
 800e52a:	426d      	negmi	r5, r5
 800e52c:	60a2      	strmi	r2, [r4, #8]
 800e52e:	61a5      	strmi	r5, [r4, #24]
 800e530:	bf58      	it	pl
 800e532:	60a5      	strpl	r5, [r4, #8]
 800e534:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e536:	07d2      	lsls	r2, r2, #31
 800e538:	d401      	bmi.n	800e53e <setvbuf+0x12e>
 800e53a:	059b      	lsls	r3, r3, #22
 800e53c:	d513      	bpl.n	800e566 <setvbuf+0x156>
 800e53e:	2500      	movs	r5, #0
 800e540:	e7d5      	b.n	800e4ee <setvbuf+0xde>
 800e542:	4648      	mov	r0, r9
 800e544:	f000 f9d8 	bl	800e8f8 <malloc>
 800e548:	4606      	mov	r6, r0
 800e54a:	2800      	cmp	r0, #0
 800e54c:	d0b8      	beq.n	800e4c0 <setvbuf+0xb0>
 800e54e:	89a3      	ldrh	r3, [r4, #12]
 800e550:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e554:	81a3      	strh	r3, [r4, #12]
 800e556:	464d      	mov	r5, r9
 800e558:	e7cf      	b.n	800e4fa <setvbuf+0xea>
 800e55a:	2500      	movs	r5, #0
 800e55c:	e7b2      	b.n	800e4c4 <setvbuf+0xb4>
 800e55e:	46a9      	mov	r9, r5
 800e560:	e7f5      	b.n	800e54e <setvbuf+0x13e>
 800e562:	60a2      	str	r2, [r4, #8]
 800e564:	e7e6      	b.n	800e534 <setvbuf+0x124>
 800e566:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e568:	f000 f97a 	bl	800e860 <__retarget_lock_release_recursive>
 800e56c:	e7e7      	b.n	800e53e <setvbuf+0x12e>
 800e56e:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800e572:	e7bc      	b.n	800e4ee <setvbuf+0xde>
 800e574:	2400001c 	.word	0x2400001c

0800e578 <siprintf>:
 800e578:	b40e      	push	{r1, r2, r3}
 800e57a:	b510      	push	{r4, lr}
 800e57c:	b09d      	sub	sp, #116	@ 0x74
 800e57e:	ab1f      	add	r3, sp, #124	@ 0x7c
 800e580:	9002      	str	r0, [sp, #8]
 800e582:	9006      	str	r0, [sp, #24]
 800e584:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e588:	480a      	ldr	r0, [pc, #40]	@ (800e5b4 <siprintf+0x3c>)
 800e58a:	9107      	str	r1, [sp, #28]
 800e58c:	9104      	str	r1, [sp, #16]
 800e58e:	490a      	ldr	r1, [pc, #40]	@ (800e5b8 <siprintf+0x40>)
 800e590:	f853 2b04 	ldr.w	r2, [r3], #4
 800e594:	9105      	str	r1, [sp, #20]
 800e596:	2400      	movs	r4, #0
 800e598:	a902      	add	r1, sp, #8
 800e59a:	6800      	ldr	r0, [r0, #0]
 800e59c:	9301      	str	r3, [sp, #4]
 800e59e:	941b      	str	r4, [sp, #108]	@ 0x6c
 800e5a0:	f000 fabc 	bl	800eb1c <_svfiprintf_r>
 800e5a4:	9b02      	ldr	r3, [sp, #8]
 800e5a6:	701c      	strb	r4, [r3, #0]
 800e5a8:	b01d      	add	sp, #116	@ 0x74
 800e5aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e5ae:	b003      	add	sp, #12
 800e5b0:	4770      	bx	lr
 800e5b2:	bf00      	nop
 800e5b4:	2400001c 	.word	0x2400001c
 800e5b8:	ffff0208 	.word	0xffff0208

0800e5bc <__sread>:
 800e5bc:	b510      	push	{r4, lr}
 800e5be:	460c      	mov	r4, r1
 800e5c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5c4:	f000 f8fc 	bl	800e7c0 <_read_r>
 800e5c8:	2800      	cmp	r0, #0
 800e5ca:	bfab      	itete	ge
 800e5cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e5ce:	89a3      	ldrhlt	r3, [r4, #12]
 800e5d0:	181b      	addge	r3, r3, r0
 800e5d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e5d6:	bfac      	ite	ge
 800e5d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e5da:	81a3      	strhlt	r3, [r4, #12]
 800e5dc:	bd10      	pop	{r4, pc}

0800e5de <__swrite>:
 800e5de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5e2:	461f      	mov	r7, r3
 800e5e4:	898b      	ldrh	r3, [r1, #12]
 800e5e6:	05db      	lsls	r3, r3, #23
 800e5e8:	4605      	mov	r5, r0
 800e5ea:	460c      	mov	r4, r1
 800e5ec:	4616      	mov	r6, r2
 800e5ee:	d505      	bpl.n	800e5fc <__swrite+0x1e>
 800e5f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5f4:	2302      	movs	r3, #2
 800e5f6:	2200      	movs	r2, #0
 800e5f8:	f000 f8d0 	bl	800e79c <_lseek_r>
 800e5fc:	89a3      	ldrh	r3, [r4, #12]
 800e5fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e602:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e606:	81a3      	strh	r3, [r4, #12]
 800e608:	4632      	mov	r2, r6
 800e60a:	463b      	mov	r3, r7
 800e60c:	4628      	mov	r0, r5
 800e60e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e612:	f000 b8e7 	b.w	800e7e4 <_write_r>

0800e616 <__sseek>:
 800e616:	b510      	push	{r4, lr}
 800e618:	460c      	mov	r4, r1
 800e61a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e61e:	f000 f8bd 	bl	800e79c <_lseek_r>
 800e622:	1c43      	adds	r3, r0, #1
 800e624:	89a3      	ldrh	r3, [r4, #12]
 800e626:	bf15      	itete	ne
 800e628:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e62a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e62e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e632:	81a3      	strheq	r3, [r4, #12]
 800e634:	bf18      	it	ne
 800e636:	81a3      	strhne	r3, [r4, #12]
 800e638:	bd10      	pop	{r4, pc}

0800e63a <__sclose>:
 800e63a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e63e:	f000 b89d 	b.w	800e77c <_close_r>

0800e642 <__swbuf_r>:
 800e642:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e644:	460e      	mov	r6, r1
 800e646:	4614      	mov	r4, r2
 800e648:	4605      	mov	r5, r0
 800e64a:	b118      	cbz	r0, 800e654 <__swbuf_r+0x12>
 800e64c:	6a03      	ldr	r3, [r0, #32]
 800e64e:	b90b      	cbnz	r3, 800e654 <__swbuf_r+0x12>
 800e650:	f7ff fe38 	bl	800e2c4 <__sinit>
 800e654:	69a3      	ldr	r3, [r4, #24]
 800e656:	60a3      	str	r3, [r4, #8]
 800e658:	89a3      	ldrh	r3, [r4, #12]
 800e65a:	071a      	lsls	r2, r3, #28
 800e65c:	d501      	bpl.n	800e662 <__swbuf_r+0x20>
 800e65e:	6923      	ldr	r3, [r4, #16]
 800e660:	b943      	cbnz	r3, 800e674 <__swbuf_r+0x32>
 800e662:	4621      	mov	r1, r4
 800e664:	4628      	mov	r0, r5
 800e666:	f000 f82b 	bl	800e6c0 <__swsetup_r>
 800e66a:	b118      	cbz	r0, 800e674 <__swbuf_r+0x32>
 800e66c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800e670:	4638      	mov	r0, r7
 800e672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e674:	6823      	ldr	r3, [r4, #0]
 800e676:	6922      	ldr	r2, [r4, #16]
 800e678:	1a98      	subs	r0, r3, r2
 800e67a:	6963      	ldr	r3, [r4, #20]
 800e67c:	b2f6      	uxtb	r6, r6
 800e67e:	4283      	cmp	r3, r0
 800e680:	4637      	mov	r7, r6
 800e682:	dc05      	bgt.n	800e690 <__swbuf_r+0x4e>
 800e684:	4621      	mov	r1, r4
 800e686:	4628      	mov	r0, r5
 800e688:	f000 fe96 	bl	800f3b8 <_fflush_r>
 800e68c:	2800      	cmp	r0, #0
 800e68e:	d1ed      	bne.n	800e66c <__swbuf_r+0x2a>
 800e690:	68a3      	ldr	r3, [r4, #8]
 800e692:	3b01      	subs	r3, #1
 800e694:	60a3      	str	r3, [r4, #8]
 800e696:	6823      	ldr	r3, [r4, #0]
 800e698:	1c5a      	adds	r2, r3, #1
 800e69a:	6022      	str	r2, [r4, #0]
 800e69c:	701e      	strb	r6, [r3, #0]
 800e69e:	6962      	ldr	r2, [r4, #20]
 800e6a0:	1c43      	adds	r3, r0, #1
 800e6a2:	429a      	cmp	r2, r3
 800e6a4:	d004      	beq.n	800e6b0 <__swbuf_r+0x6e>
 800e6a6:	89a3      	ldrh	r3, [r4, #12]
 800e6a8:	07db      	lsls	r3, r3, #31
 800e6aa:	d5e1      	bpl.n	800e670 <__swbuf_r+0x2e>
 800e6ac:	2e0a      	cmp	r6, #10
 800e6ae:	d1df      	bne.n	800e670 <__swbuf_r+0x2e>
 800e6b0:	4621      	mov	r1, r4
 800e6b2:	4628      	mov	r0, r5
 800e6b4:	f000 fe80 	bl	800f3b8 <_fflush_r>
 800e6b8:	2800      	cmp	r0, #0
 800e6ba:	d0d9      	beq.n	800e670 <__swbuf_r+0x2e>
 800e6bc:	e7d6      	b.n	800e66c <__swbuf_r+0x2a>
	...

0800e6c0 <__swsetup_r>:
 800e6c0:	b538      	push	{r3, r4, r5, lr}
 800e6c2:	4b29      	ldr	r3, [pc, #164]	@ (800e768 <__swsetup_r+0xa8>)
 800e6c4:	4605      	mov	r5, r0
 800e6c6:	6818      	ldr	r0, [r3, #0]
 800e6c8:	460c      	mov	r4, r1
 800e6ca:	b118      	cbz	r0, 800e6d4 <__swsetup_r+0x14>
 800e6cc:	6a03      	ldr	r3, [r0, #32]
 800e6ce:	b90b      	cbnz	r3, 800e6d4 <__swsetup_r+0x14>
 800e6d0:	f7ff fdf8 	bl	800e2c4 <__sinit>
 800e6d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e6d8:	0719      	lsls	r1, r3, #28
 800e6da:	d422      	bmi.n	800e722 <__swsetup_r+0x62>
 800e6dc:	06da      	lsls	r2, r3, #27
 800e6de:	d407      	bmi.n	800e6f0 <__swsetup_r+0x30>
 800e6e0:	2209      	movs	r2, #9
 800e6e2:	602a      	str	r2, [r5, #0]
 800e6e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e6e8:	81a3      	strh	r3, [r4, #12]
 800e6ea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e6ee:	e033      	b.n	800e758 <__swsetup_r+0x98>
 800e6f0:	0758      	lsls	r0, r3, #29
 800e6f2:	d512      	bpl.n	800e71a <__swsetup_r+0x5a>
 800e6f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e6f6:	b141      	cbz	r1, 800e70a <__swsetup_r+0x4a>
 800e6f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e6fc:	4299      	cmp	r1, r3
 800e6fe:	d002      	beq.n	800e706 <__swsetup_r+0x46>
 800e700:	4628      	mov	r0, r5
 800e702:	f000 f8af 	bl	800e864 <_free_r>
 800e706:	2300      	movs	r3, #0
 800e708:	6363      	str	r3, [r4, #52]	@ 0x34
 800e70a:	89a3      	ldrh	r3, [r4, #12]
 800e70c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e710:	81a3      	strh	r3, [r4, #12]
 800e712:	2300      	movs	r3, #0
 800e714:	6063      	str	r3, [r4, #4]
 800e716:	6923      	ldr	r3, [r4, #16]
 800e718:	6023      	str	r3, [r4, #0]
 800e71a:	89a3      	ldrh	r3, [r4, #12]
 800e71c:	f043 0308 	orr.w	r3, r3, #8
 800e720:	81a3      	strh	r3, [r4, #12]
 800e722:	6923      	ldr	r3, [r4, #16]
 800e724:	b94b      	cbnz	r3, 800e73a <__swsetup_r+0x7a>
 800e726:	89a3      	ldrh	r3, [r4, #12]
 800e728:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e72c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e730:	d003      	beq.n	800e73a <__swsetup_r+0x7a>
 800e732:	4621      	mov	r1, r4
 800e734:	4628      	mov	r0, r5
 800e736:	f000 fe8d 	bl	800f454 <__smakebuf_r>
 800e73a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e73e:	f013 0201 	ands.w	r2, r3, #1
 800e742:	d00a      	beq.n	800e75a <__swsetup_r+0x9a>
 800e744:	2200      	movs	r2, #0
 800e746:	60a2      	str	r2, [r4, #8]
 800e748:	6962      	ldr	r2, [r4, #20]
 800e74a:	4252      	negs	r2, r2
 800e74c:	61a2      	str	r2, [r4, #24]
 800e74e:	6922      	ldr	r2, [r4, #16]
 800e750:	b942      	cbnz	r2, 800e764 <__swsetup_r+0xa4>
 800e752:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e756:	d1c5      	bne.n	800e6e4 <__swsetup_r+0x24>
 800e758:	bd38      	pop	{r3, r4, r5, pc}
 800e75a:	0799      	lsls	r1, r3, #30
 800e75c:	bf58      	it	pl
 800e75e:	6962      	ldrpl	r2, [r4, #20]
 800e760:	60a2      	str	r2, [r4, #8]
 800e762:	e7f4      	b.n	800e74e <__swsetup_r+0x8e>
 800e764:	2000      	movs	r0, #0
 800e766:	e7f7      	b.n	800e758 <__swsetup_r+0x98>
 800e768:	2400001c 	.word	0x2400001c

0800e76c <memset>:
 800e76c:	4402      	add	r2, r0
 800e76e:	4603      	mov	r3, r0
 800e770:	4293      	cmp	r3, r2
 800e772:	d100      	bne.n	800e776 <memset+0xa>
 800e774:	4770      	bx	lr
 800e776:	f803 1b01 	strb.w	r1, [r3], #1
 800e77a:	e7f9      	b.n	800e770 <memset+0x4>

0800e77c <_close_r>:
 800e77c:	b538      	push	{r3, r4, r5, lr}
 800e77e:	4d06      	ldr	r5, [pc, #24]	@ (800e798 <_close_r+0x1c>)
 800e780:	2300      	movs	r3, #0
 800e782:	4604      	mov	r4, r0
 800e784:	4608      	mov	r0, r1
 800e786:	602b      	str	r3, [r5, #0]
 800e788:	f7f2 faec 	bl	8000d64 <_close>
 800e78c:	1c43      	adds	r3, r0, #1
 800e78e:	d102      	bne.n	800e796 <_close_r+0x1a>
 800e790:	682b      	ldr	r3, [r5, #0]
 800e792:	b103      	cbz	r3, 800e796 <_close_r+0x1a>
 800e794:	6023      	str	r3, [r4, #0]
 800e796:	bd38      	pop	{r3, r4, r5, pc}
 800e798:	24000914 	.word	0x24000914

0800e79c <_lseek_r>:
 800e79c:	b538      	push	{r3, r4, r5, lr}
 800e79e:	4d07      	ldr	r5, [pc, #28]	@ (800e7bc <_lseek_r+0x20>)
 800e7a0:	4604      	mov	r4, r0
 800e7a2:	4608      	mov	r0, r1
 800e7a4:	4611      	mov	r1, r2
 800e7a6:	2200      	movs	r2, #0
 800e7a8:	602a      	str	r2, [r5, #0]
 800e7aa:	461a      	mov	r2, r3
 800e7ac:	f7f2 faf1 	bl	8000d92 <_lseek>
 800e7b0:	1c43      	adds	r3, r0, #1
 800e7b2:	d102      	bne.n	800e7ba <_lseek_r+0x1e>
 800e7b4:	682b      	ldr	r3, [r5, #0]
 800e7b6:	b103      	cbz	r3, 800e7ba <_lseek_r+0x1e>
 800e7b8:	6023      	str	r3, [r4, #0]
 800e7ba:	bd38      	pop	{r3, r4, r5, pc}
 800e7bc:	24000914 	.word	0x24000914

0800e7c0 <_read_r>:
 800e7c0:	b538      	push	{r3, r4, r5, lr}
 800e7c2:	4d07      	ldr	r5, [pc, #28]	@ (800e7e0 <_read_r+0x20>)
 800e7c4:	4604      	mov	r4, r0
 800e7c6:	4608      	mov	r0, r1
 800e7c8:	4611      	mov	r1, r2
 800e7ca:	2200      	movs	r2, #0
 800e7cc:	602a      	str	r2, [r5, #0]
 800e7ce:	461a      	mov	r2, r3
 800e7d0:	f7f2 faf0 	bl	8000db4 <_read>
 800e7d4:	1c43      	adds	r3, r0, #1
 800e7d6:	d102      	bne.n	800e7de <_read_r+0x1e>
 800e7d8:	682b      	ldr	r3, [r5, #0]
 800e7da:	b103      	cbz	r3, 800e7de <_read_r+0x1e>
 800e7dc:	6023      	str	r3, [r4, #0]
 800e7de:	bd38      	pop	{r3, r4, r5, pc}
 800e7e0:	24000914 	.word	0x24000914

0800e7e4 <_write_r>:
 800e7e4:	b538      	push	{r3, r4, r5, lr}
 800e7e6:	4d07      	ldr	r5, [pc, #28]	@ (800e804 <_write_r+0x20>)
 800e7e8:	4604      	mov	r4, r0
 800e7ea:	4608      	mov	r0, r1
 800e7ec:	4611      	mov	r1, r2
 800e7ee:	2200      	movs	r2, #0
 800e7f0:	602a      	str	r2, [r5, #0]
 800e7f2:	461a      	mov	r2, r3
 800e7f4:	f7f2 fa8a 	bl	8000d0c <_write>
 800e7f8:	1c43      	adds	r3, r0, #1
 800e7fa:	d102      	bne.n	800e802 <_write_r+0x1e>
 800e7fc:	682b      	ldr	r3, [r5, #0]
 800e7fe:	b103      	cbz	r3, 800e802 <_write_r+0x1e>
 800e800:	6023      	str	r3, [r4, #0]
 800e802:	bd38      	pop	{r3, r4, r5, pc}
 800e804:	24000914 	.word	0x24000914

0800e808 <__errno>:
 800e808:	4b01      	ldr	r3, [pc, #4]	@ (800e810 <__errno+0x8>)
 800e80a:	6818      	ldr	r0, [r3, #0]
 800e80c:	4770      	bx	lr
 800e80e:	bf00      	nop
 800e810:	2400001c 	.word	0x2400001c

0800e814 <__libc_init_array>:
 800e814:	b570      	push	{r4, r5, r6, lr}
 800e816:	4d0d      	ldr	r5, [pc, #52]	@ (800e84c <__libc_init_array+0x38>)
 800e818:	4c0d      	ldr	r4, [pc, #52]	@ (800e850 <__libc_init_array+0x3c>)
 800e81a:	1b64      	subs	r4, r4, r5
 800e81c:	10a4      	asrs	r4, r4, #2
 800e81e:	2600      	movs	r6, #0
 800e820:	42a6      	cmp	r6, r4
 800e822:	d109      	bne.n	800e838 <__libc_init_array+0x24>
 800e824:	4d0b      	ldr	r5, [pc, #44]	@ (800e854 <__libc_init_array+0x40>)
 800e826:	4c0c      	ldr	r4, [pc, #48]	@ (800e858 <__libc_init_array+0x44>)
 800e828:	f000 fee0 	bl	800f5ec <_init>
 800e82c:	1b64      	subs	r4, r4, r5
 800e82e:	10a4      	asrs	r4, r4, #2
 800e830:	2600      	movs	r6, #0
 800e832:	42a6      	cmp	r6, r4
 800e834:	d105      	bne.n	800e842 <__libc_init_array+0x2e>
 800e836:	bd70      	pop	{r4, r5, r6, pc}
 800e838:	f855 3b04 	ldr.w	r3, [r5], #4
 800e83c:	4798      	blx	r3
 800e83e:	3601      	adds	r6, #1
 800e840:	e7ee      	b.n	800e820 <__libc_init_array+0xc>
 800e842:	f855 3b04 	ldr.w	r3, [r5], #4
 800e846:	4798      	blx	r3
 800e848:	3601      	adds	r6, #1
 800e84a:	e7f2      	b.n	800e832 <__libc_init_array+0x1e>
 800e84c:	0800f814 	.word	0x0800f814
 800e850:	0800f814 	.word	0x0800f814
 800e854:	0800f814 	.word	0x0800f814
 800e858:	0800f818 	.word	0x0800f818

0800e85c <__retarget_lock_init_recursive>:
 800e85c:	4770      	bx	lr

0800e85e <__retarget_lock_acquire_recursive>:
 800e85e:	4770      	bx	lr

0800e860 <__retarget_lock_release_recursive>:
 800e860:	4770      	bx	lr
	...

0800e864 <_free_r>:
 800e864:	b538      	push	{r3, r4, r5, lr}
 800e866:	4605      	mov	r5, r0
 800e868:	2900      	cmp	r1, #0
 800e86a:	d041      	beq.n	800e8f0 <_free_r+0x8c>
 800e86c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e870:	1f0c      	subs	r4, r1, #4
 800e872:	2b00      	cmp	r3, #0
 800e874:	bfb8      	it	lt
 800e876:	18e4      	addlt	r4, r4, r3
 800e878:	f000 f8e8 	bl	800ea4c <__malloc_lock>
 800e87c:	4a1d      	ldr	r2, [pc, #116]	@ (800e8f4 <_free_r+0x90>)
 800e87e:	6813      	ldr	r3, [r2, #0]
 800e880:	b933      	cbnz	r3, 800e890 <_free_r+0x2c>
 800e882:	6063      	str	r3, [r4, #4]
 800e884:	6014      	str	r4, [r2, #0]
 800e886:	4628      	mov	r0, r5
 800e888:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e88c:	f000 b8e4 	b.w	800ea58 <__malloc_unlock>
 800e890:	42a3      	cmp	r3, r4
 800e892:	d908      	bls.n	800e8a6 <_free_r+0x42>
 800e894:	6820      	ldr	r0, [r4, #0]
 800e896:	1821      	adds	r1, r4, r0
 800e898:	428b      	cmp	r3, r1
 800e89a:	bf01      	itttt	eq
 800e89c:	6819      	ldreq	r1, [r3, #0]
 800e89e:	685b      	ldreq	r3, [r3, #4]
 800e8a0:	1809      	addeq	r1, r1, r0
 800e8a2:	6021      	streq	r1, [r4, #0]
 800e8a4:	e7ed      	b.n	800e882 <_free_r+0x1e>
 800e8a6:	461a      	mov	r2, r3
 800e8a8:	685b      	ldr	r3, [r3, #4]
 800e8aa:	b10b      	cbz	r3, 800e8b0 <_free_r+0x4c>
 800e8ac:	42a3      	cmp	r3, r4
 800e8ae:	d9fa      	bls.n	800e8a6 <_free_r+0x42>
 800e8b0:	6811      	ldr	r1, [r2, #0]
 800e8b2:	1850      	adds	r0, r2, r1
 800e8b4:	42a0      	cmp	r0, r4
 800e8b6:	d10b      	bne.n	800e8d0 <_free_r+0x6c>
 800e8b8:	6820      	ldr	r0, [r4, #0]
 800e8ba:	4401      	add	r1, r0
 800e8bc:	1850      	adds	r0, r2, r1
 800e8be:	4283      	cmp	r3, r0
 800e8c0:	6011      	str	r1, [r2, #0]
 800e8c2:	d1e0      	bne.n	800e886 <_free_r+0x22>
 800e8c4:	6818      	ldr	r0, [r3, #0]
 800e8c6:	685b      	ldr	r3, [r3, #4]
 800e8c8:	6053      	str	r3, [r2, #4]
 800e8ca:	4408      	add	r0, r1
 800e8cc:	6010      	str	r0, [r2, #0]
 800e8ce:	e7da      	b.n	800e886 <_free_r+0x22>
 800e8d0:	d902      	bls.n	800e8d8 <_free_r+0x74>
 800e8d2:	230c      	movs	r3, #12
 800e8d4:	602b      	str	r3, [r5, #0]
 800e8d6:	e7d6      	b.n	800e886 <_free_r+0x22>
 800e8d8:	6820      	ldr	r0, [r4, #0]
 800e8da:	1821      	adds	r1, r4, r0
 800e8dc:	428b      	cmp	r3, r1
 800e8de:	bf04      	itt	eq
 800e8e0:	6819      	ldreq	r1, [r3, #0]
 800e8e2:	685b      	ldreq	r3, [r3, #4]
 800e8e4:	6063      	str	r3, [r4, #4]
 800e8e6:	bf04      	itt	eq
 800e8e8:	1809      	addeq	r1, r1, r0
 800e8ea:	6021      	streq	r1, [r4, #0]
 800e8ec:	6054      	str	r4, [r2, #4]
 800e8ee:	e7ca      	b.n	800e886 <_free_r+0x22>
 800e8f0:	bd38      	pop	{r3, r4, r5, pc}
 800e8f2:	bf00      	nop
 800e8f4:	24000920 	.word	0x24000920

0800e8f8 <malloc>:
 800e8f8:	4b02      	ldr	r3, [pc, #8]	@ (800e904 <malloc+0xc>)
 800e8fa:	4601      	mov	r1, r0
 800e8fc:	6818      	ldr	r0, [r3, #0]
 800e8fe:	f000 b825 	b.w	800e94c <_malloc_r>
 800e902:	bf00      	nop
 800e904:	2400001c 	.word	0x2400001c

0800e908 <sbrk_aligned>:
 800e908:	b570      	push	{r4, r5, r6, lr}
 800e90a:	4e0f      	ldr	r6, [pc, #60]	@ (800e948 <sbrk_aligned+0x40>)
 800e90c:	460c      	mov	r4, r1
 800e90e:	6831      	ldr	r1, [r6, #0]
 800e910:	4605      	mov	r5, r0
 800e912:	b911      	cbnz	r1, 800e91a <sbrk_aligned+0x12>
 800e914:	f000 fe16 	bl	800f544 <_sbrk_r>
 800e918:	6030      	str	r0, [r6, #0]
 800e91a:	4621      	mov	r1, r4
 800e91c:	4628      	mov	r0, r5
 800e91e:	f000 fe11 	bl	800f544 <_sbrk_r>
 800e922:	1c43      	adds	r3, r0, #1
 800e924:	d103      	bne.n	800e92e <sbrk_aligned+0x26>
 800e926:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800e92a:	4620      	mov	r0, r4
 800e92c:	bd70      	pop	{r4, r5, r6, pc}
 800e92e:	1cc4      	adds	r4, r0, #3
 800e930:	f024 0403 	bic.w	r4, r4, #3
 800e934:	42a0      	cmp	r0, r4
 800e936:	d0f8      	beq.n	800e92a <sbrk_aligned+0x22>
 800e938:	1a21      	subs	r1, r4, r0
 800e93a:	4628      	mov	r0, r5
 800e93c:	f000 fe02 	bl	800f544 <_sbrk_r>
 800e940:	3001      	adds	r0, #1
 800e942:	d1f2      	bne.n	800e92a <sbrk_aligned+0x22>
 800e944:	e7ef      	b.n	800e926 <sbrk_aligned+0x1e>
 800e946:	bf00      	nop
 800e948:	2400091c 	.word	0x2400091c

0800e94c <_malloc_r>:
 800e94c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e950:	1ccd      	adds	r5, r1, #3
 800e952:	f025 0503 	bic.w	r5, r5, #3
 800e956:	3508      	adds	r5, #8
 800e958:	2d0c      	cmp	r5, #12
 800e95a:	bf38      	it	cc
 800e95c:	250c      	movcc	r5, #12
 800e95e:	2d00      	cmp	r5, #0
 800e960:	4606      	mov	r6, r0
 800e962:	db01      	blt.n	800e968 <_malloc_r+0x1c>
 800e964:	42a9      	cmp	r1, r5
 800e966:	d904      	bls.n	800e972 <_malloc_r+0x26>
 800e968:	230c      	movs	r3, #12
 800e96a:	6033      	str	r3, [r6, #0]
 800e96c:	2000      	movs	r0, #0
 800e96e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e972:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ea48 <_malloc_r+0xfc>
 800e976:	f000 f869 	bl	800ea4c <__malloc_lock>
 800e97a:	f8d8 3000 	ldr.w	r3, [r8]
 800e97e:	461c      	mov	r4, r3
 800e980:	bb44      	cbnz	r4, 800e9d4 <_malloc_r+0x88>
 800e982:	4629      	mov	r1, r5
 800e984:	4630      	mov	r0, r6
 800e986:	f7ff ffbf 	bl	800e908 <sbrk_aligned>
 800e98a:	1c43      	adds	r3, r0, #1
 800e98c:	4604      	mov	r4, r0
 800e98e:	d158      	bne.n	800ea42 <_malloc_r+0xf6>
 800e990:	f8d8 4000 	ldr.w	r4, [r8]
 800e994:	4627      	mov	r7, r4
 800e996:	2f00      	cmp	r7, #0
 800e998:	d143      	bne.n	800ea22 <_malloc_r+0xd6>
 800e99a:	2c00      	cmp	r4, #0
 800e99c:	d04b      	beq.n	800ea36 <_malloc_r+0xea>
 800e99e:	6823      	ldr	r3, [r4, #0]
 800e9a0:	4639      	mov	r1, r7
 800e9a2:	4630      	mov	r0, r6
 800e9a4:	eb04 0903 	add.w	r9, r4, r3
 800e9a8:	f000 fdcc 	bl	800f544 <_sbrk_r>
 800e9ac:	4581      	cmp	r9, r0
 800e9ae:	d142      	bne.n	800ea36 <_malloc_r+0xea>
 800e9b0:	6821      	ldr	r1, [r4, #0]
 800e9b2:	1a6d      	subs	r5, r5, r1
 800e9b4:	4629      	mov	r1, r5
 800e9b6:	4630      	mov	r0, r6
 800e9b8:	f7ff ffa6 	bl	800e908 <sbrk_aligned>
 800e9bc:	3001      	adds	r0, #1
 800e9be:	d03a      	beq.n	800ea36 <_malloc_r+0xea>
 800e9c0:	6823      	ldr	r3, [r4, #0]
 800e9c2:	442b      	add	r3, r5
 800e9c4:	6023      	str	r3, [r4, #0]
 800e9c6:	f8d8 3000 	ldr.w	r3, [r8]
 800e9ca:	685a      	ldr	r2, [r3, #4]
 800e9cc:	bb62      	cbnz	r2, 800ea28 <_malloc_r+0xdc>
 800e9ce:	f8c8 7000 	str.w	r7, [r8]
 800e9d2:	e00f      	b.n	800e9f4 <_malloc_r+0xa8>
 800e9d4:	6822      	ldr	r2, [r4, #0]
 800e9d6:	1b52      	subs	r2, r2, r5
 800e9d8:	d420      	bmi.n	800ea1c <_malloc_r+0xd0>
 800e9da:	2a0b      	cmp	r2, #11
 800e9dc:	d917      	bls.n	800ea0e <_malloc_r+0xc2>
 800e9de:	1961      	adds	r1, r4, r5
 800e9e0:	42a3      	cmp	r3, r4
 800e9e2:	6025      	str	r5, [r4, #0]
 800e9e4:	bf18      	it	ne
 800e9e6:	6059      	strne	r1, [r3, #4]
 800e9e8:	6863      	ldr	r3, [r4, #4]
 800e9ea:	bf08      	it	eq
 800e9ec:	f8c8 1000 	streq.w	r1, [r8]
 800e9f0:	5162      	str	r2, [r4, r5]
 800e9f2:	604b      	str	r3, [r1, #4]
 800e9f4:	4630      	mov	r0, r6
 800e9f6:	f000 f82f 	bl	800ea58 <__malloc_unlock>
 800e9fa:	f104 000b 	add.w	r0, r4, #11
 800e9fe:	1d23      	adds	r3, r4, #4
 800ea00:	f020 0007 	bic.w	r0, r0, #7
 800ea04:	1ac2      	subs	r2, r0, r3
 800ea06:	bf1c      	itt	ne
 800ea08:	1a1b      	subne	r3, r3, r0
 800ea0a:	50a3      	strne	r3, [r4, r2]
 800ea0c:	e7af      	b.n	800e96e <_malloc_r+0x22>
 800ea0e:	6862      	ldr	r2, [r4, #4]
 800ea10:	42a3      	cmp	r3, r4
 800ea12:	bf0c      	ite	eq
 800ea14:	f8c8 2000 	streq.w	r2, [r8]
 800ea18:	605a      	strne	r2, [r3, #4]
 800ea1a:	e7eb      	b.n	800e9f4 <_malloc_r+0xa8>
 800ea1c:	4623      	mov	r3, r4
 800ea1e:	6864      	ldr	r4, [r4, #4]
 800ea20:	e7ae      	b.n	800e980 <_malloc_r+0x34>
 800ea22:	463c      	mov	r4, r7
 800ea24:	687f      	ldr	r7, [r7, #4]
 800ea26:	e7b6      	b.n	800e996 <_malloc_r+0x4a>
 800ea28:	461a      	mov	r2, r3
 800ea2a:	685b      	ldr	r3, [r3, #4]
 800ea2c:	42a3      	cmp	r3, r4
 800ea2e:	d1fb      	bne.n	800ea28 <_malloc_r+0xdc>
 800ea30:	2300      	movs	r3, #0
 800ea32:	6053      	str	r3, [r2, #4]
 800ea34:	e7de      	b.n	800e9f4 <_malloc_r+0xa8>
 800ea36:	230c      	movs	r3, #12
 800ea38:	6033      	str	r3, [r6, #0]
 800ea3a:	4630      	mov	r0, r6
 800ea3c:	f000 f80c 	bl	800ea58 <__malloc_unlock>
 800ea40:	e794      	b.n	800e96c <_malloc_r+0x20>
 800ea42:	6005      	str	r5, [r0, #0]
 800ea44:	e7d6      	b.n	800e9f4 <_malloc_r+0xa8>
 800ea46:	bf00      	nop
 800ea48:	24000920 	.word	0x24000920

0800ea4c <__malloc_lock>:
 800ea4c:	4801      	ldr	r0, [pc, #4]	@ (800ea54 <__malloc_lock+0x8>)
 800ea4e:	f7ff bf06 	b.w	800e85e <__retarget_lock_acquire_recursive>
 800ea52:	bf00      	nop
 800ea54:	24000918 	.word	0x24000918

0800ea58 <__malloc_unlock>:
 800ea58:	4801      	ldr	r0, [pc, #4]	@ (800ea60 <__malloc_unlock+0x8>)
 800ea5a:	f7ff bf01 	b.w	800e860 <__retarget_lock_release_recursive>
 800ea5e:	bf00      	nop
 800ea60:	24000918 	.word	0x24000918

0800ea64 <__ssputs_r>:
 800ea64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea68:	688e      	ldr	r6, [r1, #8]
 800ea6a:	461f      	mov	r7, r3
 800ea6c:	42be      	cmp	r6, r7
 800ea6e:	680b      	ldr	r3, [r1, #0]
 800ea70:	4682      	mov	sl, r0
 800ea72:	460c      	mov	r4, r1
 800ea74:	4690      	mov	r8, r2
 800ea76:	d82d      	bhi.n	800ead4 <__ssputs_r+0x70>
 800ea78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ea7c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ea80:	d026      	beq.n	800ead0 <__ssputs_r+0x6c>
 800ea82:	6965      	ldr	r5, [r4, #20]
 800ea84:	6909      	ldr	r1, [r1, #16]
 800ea86:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ea8a:	eba3 0901 	sub.w	r9, r3, r1
 800ea8e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ea92:	1c7b      	adds	r3, r7, #1
 800ea94:	444b      	add	r3, r9
 800ea96:	106d      	asrs	r5, r5, #1
 800ea98:	429d      	cmp	r5, r3
 800ea9a:	bf38      	it	cc
 800ea9c:	461d      	movcc	r5, r3
 800ea9e:	0553      	lsls	r3, r2, #21
 800eaa0:	d527      	bpl.n	800eaf2 <__ssputs_r+0x8e>
 800eaa2:	4629      	mov	r1, r5
 800eaa4:	f7ff ff52 	bl	800e94c <_malloc_r>
 800eaa8:	4606      	mov	r6, r0
 800eaaa:	b360      	cbz	r0, 800eb06 <__ssputs_r+0xa2>
 800eaac:	6921      	ldr	r1, [r4, #16]
 800eaae:	464a      	mov	r2, r9
 800eab0:	f000 fd58 	bl	800f564 <memcpy>
 800eab4:	89a3      	ldrh	r3, [r4, #12]
 800eab6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800eaba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eabe:	81a3      	strh	r3, [r4, #12]
 800eac0:	6126      	str	r6, [r4, #16]
 800eac2:	6165      	str	r5, [r4, #20]
 800eac4:	444e      	add	r6, r9
 800eac6:	eba5 0509 	sub.w	r5, r5, r9
 800eaca:	6026      	str	r6, [r4, #0]
 800eacc:	60a5      	str	r5, [r4, #8]
 800eace:	463e      	mov	r6, r7
 800ead0:	42be      	cmp	r6, r7
 800ead2:	d900      	bls.n	800ead6 <__ssputs_r+0x72>
 800ead4:	463e      	mov	r6, r7
 800ead6:	6820      	ldr	r0, [r4, #0]
 800ead8:	4632      	mov	r2, r6
 800eada:	4641      	mov	r1, r8
 800eadc:	f000 fcf6 	bl	800f4cc <memmove>
 800eae0:	68a3      	ldr	r3, [r4, #8]
 800eae2:	1b9b      	subs	r3, r3, r6
 800eae4:	60a3      	str	r3, [r4, #8]
 800eae6:	6823      	ldr	r3, [r4, #0]
 800eae8:	4433      	add	r3, r6
 800eaea:	6023      	str	r3, [r4, #0]
 800eaec:	2000      	movs	r0, #0
 800eaee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eaf2:	462a      	mov	r2, r5
 800eaf4:	f000 fd44 	bl	800f580 <_realloc_r>
 800eaf8:	4606      	mov	r6, r0
 800eafa:	2800      	cmp	r0, #0
 800eafc:	d1e0      	bne.n	800eac0 <__ssputs_r+0x5c>
 800eafe:	6921      	ldr	r1, [r4, #16]
 800eb00:	4650      	mov	r0, sl
 800eb02:	f7ff feaf 	bl	800e864 <_free_r>
 800eb06:	230c      	movs	r3, #12
 800eb08:	f8ca 3000 	str.w	r3, [sl]
 800eb0c:	89a3      	ldrh	r3, [r4, #12]
 800eb0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eb12:	81a3      	strh	r3, [r4, #12]
 800eb14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800eb18:	e7e9      	b.n	800eaee <__ssputs_r+0x8a>
	...

0800eb1c <_svfiprintf_r>:
 800eb1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb20:	4698      	mov	r8, r3
 800eb22:	898b      	ldrh	r3, [r1, #12]
 800eb24:	061b      	lsls	r3, r3, #24
 800eb26:	b09d      	sub	sp, #116	@ 0x74
 800eb28:	4607      	mov	r7, r0
 800eb2a:	460d      	mov	r5, r1
 800eb2c:	4614      	mov	r4, r2
 800eb2e:	d510      	bpl.n	800eb52 <_svfiprintf_r+0x36>
 800eb30:	690b      	ldr	r3, [r1, #16]
 800eb32:	b973      	cbnz	r3, 800eb52 <_svfiprintf_r+0x36>
 800eb34:	2140      	movs	r1, #64	@ 0x40
 800eb36:	f7ff ff09 	bl	800e94c <_malloc_r>
 800eb3a:	6028      	str	r0, [r5, #0]
 800eb3c:	6128      	str	r0, [r5, #16]
 800eb3e:	b930      	cbnz	r0, 800eb4e <_svfiprintf_r+0x32>
 800eb40:	230c      	movs	r3, #12
 800eb42:	603b      	str	r3, [r7, #0]
 800eb44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800eb48:	b01d      	add	sp, #116	@ 0x74
 800eb4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb4e:	2340      	movs	r3, #64	@ 0x40
 800eb50:	616b      	str	r3, [r5, #20]
 800eb52:	2300      	movs	r3, #0
 800eb54:	9309      	str	r3, [sp, #36]	@ 0x24
 800eb56:	2320      	movs	r3, #32
 800eb58:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800eb5c:	f8cd 800c 	str.w	r8, [sp, #12]
 800eb60:	2330      	movs	r3, #48	@ 0x30
 800eb62:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ed00 <_svfiprintf_r+0x1e4>
 800eb66:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800eb6a:	f04f 0901 	mov.w	r9, #1
 800eb6e:	4623      	mov	r3, r4
 800eb70:	469a      	mov	sl, r3
 800eb72:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eb76:	b10a      	cbz	r2, 800eb7c <_svfiprintf_r+0x60>
 800eb78:	2a25      	cmp	r2, #37	@ 0x25
 800eb7a:	d1f9      	bne.n	800eb70 <_svfiprintf_r+0x54>
 800eb7c:	ebba 0b04 	subs.w	fp, sl, r4
 800eb80:	d00b      	beq.n	800eb9a <_svfiprintf_r+0x7e>
 800eb82:	465b      	mov	r3, fp
 800eb84:	4622      	mov	r2, r4
 800eb86:	4629      	mov	r1, r5
 800eb88:	4638      	mov	r0, r7
 800eb8a:	f7ff ff6b 	bl	800ea64 <__ssputs_r>
 800eb8e:	3001      	adds	r0, #1
 800eb90:	f000 80a7 	beq.w	800ece2 <_svfiprintf_r+0x1c6>
 800eb94:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eb96:	445a      	add	r2, fp
 800eb98:	9209      	str	r2, [sp, #36]	@ 0x24
 800eb9a:	f89a 3000 	ldrb.w	r3, [sl]
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	f000 809f 	beq.w	800ece2 <_svfiprintf_r+0x1c6>
 800eba4:	2300      	movs	r3, #0
 800eba6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ebaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ebae:	f10a 0a01 	add.w	sl, sl, #1
 800ebb2:	9304      	str	r3, [sp, #16]
 800ebb4:	9307      	str	r3, [sp, #28]
 800ebb6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ebba:	931a      	str	r3, [sp, #104]	@ 0x68
 800ebbc:	4654      	mov	r4, sl
 800ebbe:	2205      	movs	r2, #5
 800ebc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ebc4:	484e      	ldr	r0, [pc, #312]	@ (800ed00 <_svfiprintf_r+0x1e4>)
 800ebc6:	f7f1 fb93 	bl	80002f0 <memchr>
 800ebca:	9a04      	ldr	r2, [sp, #16]
 800ebcc:	b9d8      	cbnz	r0, 800ec06 <_svfiprintf_r+0xea>
 800ebce:	06d0      	lsls	r0, r2, #27
 800ebd0:	bf44      	itt	mi
 800ebd2:	2320      	movmi	r3, #32
 800ebd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ebd8:	0711      	lsls	r1, r2, #28
 800ebda:	bf44      	itt	mi
 800ebdc:	232b      	movmi	r3, #43	@ 0x2b
 800ebde:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ebe2:	f89a 3000 	ldrb.w	r3, [sl]
 800ebe6:	2b2a      	cmp	r3, #42	@ 0x2a
 800ebe8:	d015      	beq.n	800ec16 <_svfiprintf_r+0xfa>
 800ebea:	9a07      	ldr	r2, [sp, #28]
 800ebec:	4654      	mov	r4, sl
 800ebee:	2000      	movs	r0, #0
 800ebf0:	f04f 0c0a 	mov.w	ip, #10
 800ebf4:	4621      	mov	r1, r4
 800ebf6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ebfa:	3b30      	subs	r3, #48	@ 0x30
 800ebfc:	2b09      	cmp	r3, #9
 800ebfe:	d94b      	bls.n	800ec98 <_svfiprintf_r+0x17c>
 800ec00:	b1b0      	cbz	r0, 800ec30 <_svfiprintf_r+0x114>
 800ec02:	9207      	str	r2, [sp, #28]
 800ec04:	e014      	b.n	800ec30 <_svfiprintf_r+0x114>
 800ec06:	eba0 0308 	sub.w	r3, r0, r8
 800ec0a:	fa09 f303 	lsl.w	r3, r9, r3
 800ec0e:	4313      	orrs	r3, r2
 800ec10:	9304      	str	r3, [sp, #16]
 800ec12:	46a2      	mov	sl, r4
 800ec14:	e7d2      	b.n	800ebbc <_svfiprintf_r+0xa0>
 800ec16:	9b03      	ldr	r3, [sp, #12]
 800ec18:	1d19      	adds	r1, r3, #4
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	9103      	str	r1, [sp, #12]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	bfbb      	ittet	lt
 800ec22:	425b      	neglt	r3, r3
 800ec24:	f042 0202 	orrlt.w	r2, r2, #2
 800ec28:	9307      	strge	r3, [sp, #28]
 800ec2a:	9307      	strlt	r3, [sp, #28]
 800ec2c:	bfb8      	it	lt
 800ec2e:	9204      	strlt	r2, [sp, #16]
 800ec30:	7823      	ldrb	r3, [r4, #0]
 800ec32:	2b2e      	cmp	r3, #46	@ 0x2e
 800ec34:	d10a      	bne.n	800ec4c <_svfiprintf_r+0x130>
 800ec36:	7863      	ldrb	r3, [r4, #1]
 800ec38:	2b2a      	cmp	r3, #42	@ 0x2a
 800ec3a:	d132      	bne.n	800eca2 <_svfiprintf_r+0x186>
 800ec3c:	9b03      	ldr	r3, [sp, #12]
 800ec3e:	1d1a      	adds	r2, r3, #4
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	9203      	str	r2, [sp, #12]
 800ec44:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ec48:	3402      	adds	r4, #2
 800ec4a:	9305      	str	r3, [sp, #20]
 800ec4c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ed10 <_svfiprintf_r+0x1f4>
 800ec50:	7821      	ldrb	r1, [r4, #0]
 800ec52:	2203      	movs	r2, #3
 800ec54:	4650      	mov	r0, sl
 800ec56:	f7f1 fb4b 	bl	80002f0 <memchr>
 800ec5a:	b138      	cbz	r0, 800ec6c <_svfiprintf_r+0x150>
 800ec5c:	9b04      	ldr	r3, [sp, #16]
 800ec5e:	eba0 000a 	sub.w	r0, r0, sl
 800ec62:	2240      	movs	r2, #64	@ 0x40
 800ec64:	4082      	lsls	r2, r0
 800ec66:	4313      	orrs	r3, r2
 800ec68:	3401      	adds	r4, #1
 800ec6a:	9304      	str	r3, [sp, #16]
 800ec6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec70:	4824      	ldr	r0, [pc, #144]	@ (800ed04 <_svfiprintf_r+0x1e8>)
 800ec72:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ec76:	2206      	movs	r2, #6
 800ec78:	f7f1 fb3a 	bl	80002f0 <memchr>
 800ec7c:	2800      	cmp	r0, #0
 800ec7e:	d036      	beq.n	800ecee <_svfiprintf_r+0x1d2>
 800ec80:	4b21      	ldr	r3, [pc, #132]	@ (800ed08 <_svfiprintf_r+0x1ec>)
 800ec82:	bb1b      	cbnz	r3, 800eccc <_svfiprintf_r+0x1b0>
 800ec84:	9b03      	ldr	r3, [sp, #12]
 800ec86:	3307      	adds	r3, #7
 800ec88:	f023 0307 	bic.w	r3, r3, #7
 800ec8c:	3308      	adds	r3, #8
 800ec8e:	9303      	str	r3, [sp, #12]
 800ec90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec92:	4433      	add	r3, r6
 800ec94:	9309      	str	r3, [sp, #36]	@ 0x24
 800ec96:	e76a      	b.n	800eb6e <_svfiprintf_r+0x52>
 800ec98:	fb0c 3202 	mla	r2, ip, r2, r3
 800ec9c:	460c      	mov	r4, r1
 800ec9e:	2001      	movs	r0, #1
 800eca0:	e7a8      	b.n	800ebf4 <_svfiprintf_r+0xd8>
 800eca2:	2300      	movs	r3, #0
 800eca4:	3401      	adds	r4, #1
 800eca6:	9305      	str	r3, [sp, #20]
 800eca8:	4619      	mov	r1, r3
 800ecaa:	f04f 0c0a 	mov.w	ip, #10
 800ecae:	4620      	mov	r0, r4
 800ecb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ecb4:	3a30      	subs	r2, #48	@ 0x30
 800ecb6:	2a09      	cmp	r2, #9
 800ecb8:	d903      	bls.n	800ecc2 <_svfiprintf_r+0x1a6>
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d0c6      	beq.n	800ec4c <_svfiprintf_r+0x130>
 800ecbe:	9105      	str	r1, [sp, #20]
 800ecc0:	e7c4      	b.n	800ec4c <_svfiprintf_r+0x130>
 800ecc2:	fb0c 2101 	mla	r1, ip, r1, r2
 800ecc6:	4604      	mov	r4, r0
 800ecc8:	2301      	movs	r3, #1
 800ecca:	e7f0      	b.n	800ecae <_svfiprintf_r+0x192>
 800eccc:	ab03      	add	r3, sp, #12
 800ecce:	9300      	str	r3, [sp, #0]
 800ecd0:	462a      	mov	r2, r5
 800ecd2:	4b0e      	ldr	r3, [pc, #56]	@ (800ed0c <_svfiprintf_r+0x1f0>)
 800ecd4:	a904      	add	r1, sp, #16
 800ecd6:	4638      	mov	r0, r7
 800ecd8:	f3af 8000 	nop.w
 800ecdc:	1c42      	adds	r2, r0, #1
 800ecde:	4606      	mov	r6, r0
 800ece0:	d1d6      	bne.n	800ec90 <_svfiprintf_r+0x174>
 800ece2:	89ab      	ldrh	r3, [r5, #12]
 800ece4:	065b      	lsls	r3, r3, #25
 800ece6:	f53f af2d 	bmi.w	800eb44 <_svfiprintf_r+0x28>
 800ecea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ecec:	e72c      	b.n	800eb48 <_svfiprintf_r+0x2c>
 800ecee:	ab03      	add	r3, sp, #12
 800ecf0:	9300      	str	r3, [sp, #0]
 800ecf2:	462a      	mov	r2, r5
 800ecf4:	4b05      	ldr	r3, [pc, #20]	@ (800ed0c <_svfiprintf_r+0x1f0>)
 800ecf6:	a904      	add	r1, sp, #16
 800ecf8:	4638      	mov	r0, r7
 800ecfa:	f000 f9bb 	bl	800f074 <_printf_i>
 800ecfe:	e7ed      	b.n	800ecdc <_svfiprintf_r+0x1c0>
 800ed00:	0800f7d8 	.word	0x0800f7d8
 800ed04:	0800f7e2 	.word	0x0800f7e2
 800ed08:	00000000 	.word	0x00000000
 800ed0c:	0800ea65 	.word	0x0800ea65
 800ed10:	0800f7de 	.word	0x0800f7de

0800ed14 <__sfputc_r>:
 800ed14:	6893      	ldr	r3, [r2, #8]
 800ed16:	3b01      	subs	r3, #1
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	b410      	push	{r4}
 800ed1c:	6093      	str	r3, [r2, #8]
 800ed1e:	da08      	bge.n	800ed32 <__sfputc_r+0x1e>
 800ed20:	6994      	ldr	r4, [r2, #24]
 800ed22:	42a3      	cmp	r3, r4
 800ed24:	db01      	blt.n	800ed2a <__sfputc_r+0x16>
 800ed26:	290a      	cmp	r1, #10
 800ed28:	d103      	bne.n	800ed32 <__sfputc_r+0x1e>
 800ed2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ed2e:	f7ff bc88 	b.w	800e642 <__swbuf_r>
 800ed32:	6813      	ldr	r3, [r2, #0]
 800ed34:	1c58      	adds	r0, r3, #1
 800ed36:	6010      	str	r0, [r2, #0]
 800ed38:	7019      	strb	r1, [r3, #0]
 800ed3a:	4608      	mov	r0, r1
 800ed3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ed40:	4770      	bx	lr

0800ed42 <__sfputs_r>:
 800ed42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed44:	4606      	mov	r6, r0
 800ed46:	460f      	mov	r7, r1
 800ed48:	4614      	mov	r4, r2
 800ed4a:	18d5      	adds	r5, r2, r3
 800ed4c:	42ac      	cmp	r4, r5
 800ed4e:	d101      	bne.n	800ed54 <__sfputs_r+0x12>
 800ed50:	2000      	movs	r0, #0
 800ed52:	e007      	b.n	800ed64 <__sfputs_r+0x22>
 800ed54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed58:	463a      	mov	r2, r7
 800ed5a:	4630      	mov	r0, r6
 800ed5c:	f7ff ffda 	bl	800ed14 <__sfputc_r>
 800ed60:	1c43      	adds	r3, r0, #1
 800ed62:	d1f3      	bne.n	800ed4c <__sfputs_r+0xa>
 800ed64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ed68 <_vfiprintf_r>:
 800ed68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed6c:	460d      	mov	r5, r1
 800ed6e:	b09d      	sub	sp, #116	@ 0x74
 800ed70:	4614      	mov	r4, r2
 800ed72:	4698      	mov	r8, r3
 800ed74:	4606      	mov	r6, r0
 800ed76:	b118      	cbz	r0, 800ed80 <_vfiprintf_r+0x18>
 800ed78:	6a03      	ldr	r3, [r0, #32]
 800ed7a:	b90b      	cbnz	r3, 800ed80 <_vfiprintf_r+0x18>
 800ed7c:	f7ff faa2 	bl	800e2c4 <__sinit>
 800ed80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ed82:	07d9      	lsls	r1, r3, #31
 800ed84:	d405      	bmi.n	800ed92 <_vfiprintf_r+0x2a>
 800ed86:	89ab      	ldrh	r3, [r5, #12]
 800ed88:	059a      	lsls	r2, r3, #22
 800ed8a:	d402      	bmi.n	800ed92 <_vfiprintf_r+0x2a>
 800ed8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ed8e:	f7ff fd66 	bl	800e85e <__retarget_lock_acquire_recursive>
 800ed92:	89ab      	ldrh	r3, [r5, #12]
 800ed94:	071b      	lsls	r3, r3, #28
 800ed96:	d501      	bpl.n	800ed9c <_vfiprintf_r+0x34>
 800ed98:	692b      	ldr	r3, [r5, #16]
 800ed9a:	b99b      	cbnz	r3, 800edc4 <_vfiprintf_r+0x5c>
 800ed9c:	4629      	mov	r1, r5
 800ed9e:	4630      	mov	r0, r6
 800eda0:	f7ff fc8e 	bl	800e6c0 <__swsetup_r>
 800eda4:	b170      	cbz	r0, 800edc4 <_vfiprintf_r+0x5c>
 800eda6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800eda8:	07dc      	lsls	r4, r3, #31
 800edaa:	d504      	bpl.n	800edb6 <_vfiprintf_r+0x4e>
 800edac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800edb0:	b01d      	add	sp, #116	@ 0x74
 800edb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edb6:	89ab      	ldrh	r3, [r5, #12]
 800edb8:	0598      	lsls	r0, r3, #22
 800edba:	d4f7      	bmi.n	800edac <_vfiprintf_r+0x44>
 800edbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800edbe:	f7ff fd4f 	bl	800e860 <__retarget_lock_release_recursive>
 800edc2:	e7f3      	b.n	800edac <_vfiprintf_r+0x44>
 800edc4:	2300      	movs	r3, #0
 800edc6:	9309      	str	r3, [sp, #36]	@ 0x24
 800edc8:	2320      	movs	r3, #32
 800edca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800edce:	f8cd 800c 	str.w	r8, [sp, #12]
 800edd2:	2330      	movs	r3, #48	@ 0x30
 800edd4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ef84 <_vfiprintf_r+0x21c>
 800edd8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800eddc:	f04f 0901 	mov.w	r9, #1
 800ede0:	4623      	mov	r3, r4
 800ede2:	469a      	mov	sl, r3
 800ede4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ede8:	b10a      	cbz	r2, 800edee <_vfiprintf_r+0x86>
 800edea:	2a25      	cmp	r2, #37	@ 0x25
 800edec:	d1f9      	bne.n	800ede2 <_vfiprintf_r+0x7a>
 800edee:	ebba 0b04 	subs.w	fp, sl, r4
 800edf2:	d00b      	beq.n	800ee0c <_vfiprintf_r+0xa4>
 800edf4:	465b      	mov	r3, fp
 800edf6:	4622      	mov	r2, r4
 800edf8:	4629      	mov	r1, r5
 800edfa:	4630      	mov	r0, r6
 800edfc:	f7ff ffa1 	bl	800ed42 <__sfputs_r>
 800ee00:	3001      	adds	r0, #1
 800ee02:	f000 80a7 	beq.w	800ef54 <_vfiprintf_r+0x1ec>
 800ee06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ee08:	445a      	add	r2, fp
 800ee0a:	9209      	str	r2, [sp, #36]	@ 0x24
 800ee0c:	f89a 3000 	ldrb.w	r3, [sl]
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	f000 809f 	beq.w	800ef54 <_vfiprintf_r+0x1ec>
 800ee16:	2300      	movs	r3, #0
 800ee18:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ee1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ee20:	f10a 0a01 	add.w	sl, sl, #1
 800ee24:	9304      	str	r3, [sp, #16]
 800ee26:	9307      	str	r3, [sp, #28]
 800ee28:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ee2c:	931a      	str	r3, [sp, #104]	@ 0x68
 800ee2e:	4654      	mov	r4, sl
 800ee30:	2205      	movs	r2, #5
 800ee32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee36:	4853      	ldr	r0, [pc, #332]	@ (800ef84 <_vfiprintf_r+0x21c>)
 800ee38:	f7f1 fa5a 	bl	80002f0 <memchr>
 800ee3c:	9a04      	ldr	r2, [sp, #16]
 800ee3e:	b9d8      	cbnz	r0, 800ee78 <_vfiprintf_r+0x110>
 800ee40:	06d1      	lsls	r1, r2, #27
 800ee42:	bf44      	itt	mi
 800ee44:	2320      	movmi	r3, #32
 800ee46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ee4a:	0713      	lsls	r3, r2, #28
 800ee4c:	bf44      	itt	mi
 800ee4e:	232b      	movmi	r3, #43	@ 0x2b
 800ee50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ee54:	f89a 3000 	ldrb.w	r3, [sl]
 800ee58:	2b2a      	cmp	r3, #42	@ 0x2a
 800ee5a:	d015      	beq.n	800ee88 <_vfiprintf_r+0x120>
 800ee5c:	9a07      	ldr	r2, [sp, #28]
 800ee5e:	4654      	mov	r4, sl
 800ee60:	2000      	movs	r0, #0
 800ee62:	f04f 0c0a 	mov.w	ip, #10
 800ee66:	4621      	mov	r1, r4
 800ee68:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ee6c:	3b30      	subs	r3, #48	@ 0x30
 800ee6e:	2b09      	cmp	r3, #9
 800ee70:	d94b      	bls.n	800ef0a <_vfiprintf_r+0x1a2>
 800ee72:	b1b0      	cbz	r0, 800eea2 <_vfiprintf_r+0x13a>
 800ee74:	9207      	str	r2, [sp, #28]
 800ee76:	e014      	b.n	800eea2 <_vfiprintf_r+0x13a>
 800ee78:	eba0 0308 	sub.w	r3, r0, r8
 800ee7c:	fa09 f303 	lsl.w	r3, r9, r3
 800ee80:	4313      	orrs	r3, r2
 800ee82:	9304      	str	r3, [sp, #16]
 800ee84:	46a2      	mov	sl, r4
 800ee86:	e7d2      	b.n	800ee2e <_vfiprintf_r+0xc6>
 800ee88:	9b03      	ldr	r3, [sp, #12]
 800ee8a:	1d19      	adds	r1, r3, #4
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	9103      	str	r1, [sp, #12]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	bfbb      	ittet	lt
 800ee94:	425b      	neglt	r3, r3
 800ee96:	f042 0202 	orrlt.w	r2, r2, #2
 800ee9a:	9307      	strge	r3, [sp, #28]
 800ee9c:	9307      	strlt	r3, [sp, #28]
 800ee9e:	bfb8      	it	lt
 800eea0:	9204      	strlt	r2, [sp, #16]
 800eea2:	7823      	ldrb	r3, [r4, #0]
 800eea4:	2b2e      	cmp	r3, #46	@ 0x2e
 800eea6:	d10a      	bne.n	800eebe <_vfiprintf_r+0x156>
 800eea8:	7863      	ldrb	r3, [r4, #1]
 800eeaa:	2b2a      	cmp	r3, #42	@ 0x2a
 800eeac:	d132      	bne.n	800ef14 <_vfiprintf_r+0x1ac>
 800eeae:	9b03      	ldr	r3, [sp, #12]
 800eeb0:	1d1a      	adds	r2, r3, #4
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	9203      	str	r2, [sp, #12]
 800eeb6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800eeba:	3402      	adds	r4, #2
 800eebc:	9305      	str	r3, [sp, #20]
 800eebe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ef94 <_vfiprintf_r+0x22c>
 800eec2:	7821      	ldrb	r1, [r4, #0]
 800eec4:	2203      	movs	r2, #3
 800eec6:	4650      	mov	r0, sl
 800eec8:	f7f1 fa12 	bl	80002f0 <memchr>
 800eecc:	b138      	cbz	r0, 800eede <_vfiprintf_r+0x176>
 800eece:	9b04      	ldr	r3, [sp, #16]
 800eed0:	eba0 000a 	sub.w	r0, r0, sl
 800eed4:	2240      	movs	r2, #64	@ 0x40
 800eed6:	4082      	lsls	r2, r0
 800eed8:	4313      	orrs	r3, r2
 800eeda:	3401      	adds	r4, #1
 800eedc:	9304      	str	r3, [sp, #16]
 800eede:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eee2:	4829      	ldr	r0, [pc, #164]	@ (800ef88 <_vfiprintf_r+0x220>)
 800eee4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800eee8:	2206      	movs	r2, #6
 800eeea:	f7f1 fa01 	bl	80002f0 <memchr>
 800eeee:	2800      	cmp	r0, #0
 800eef0:	d03f      	beq.n	800ef72 <_vfiprintf_r+0x20a>
 800eef2:	4b26      	ldr	r3, [pc, #152]	@ (800ef8c <_vfiprintf_r+0x224>)
 800eef4:	bb1b      	cbnz	r3, 800ef3e <_vfiprintf_r+0x1d6>
 800eef6:	9b03      	ldr	r3, [sp, #12]
 800eef8:	3307      	adds	r3, #7
 800eefa:	f023 0307 	bic.w	r3, r3, #7
 800eefe:	3308      	adds	r3, #8
 800ef00:	9303      	str	r3, [sp, #12]
 800ef02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef04:	443b      	add	r3, r7
 800ef06:	9309      	str	r3, [sp, #36]	@ 0x24
 800ef08:	e76a      	b.n	800ede0 <_vfiprintf_r+0x78>
 800ef0a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ef0e:	460c      	mov	r4, r1
 800ef10:	2001      	movs	r0, #1
 800ef12:	e7a8      	b.n	800ee66 <_vfiprintf_r+0xfe>
 800ef14:	2300      	movs	r3, #0
 800ef16:	3401      	adds	r4, #1
 800ef18:	9305      	str	r3, [sp, #20]
 800ef1a:	4619      	mov	r1, r3
 800ef1c:	f04f 0c0a 	mov.w	ip, #10
 800ef20:	4620      	mov	r0, r4
 800ef22:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ef26:	3a30      	subs	r2, #48	@ 0x30
 800ef28:	2a09      	cmp	r2, #9
 800ef2a:	d903      	bls.n	800ef34 <_vfiprintf_r+0x1cc>
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d0c6      	beq.n	800eebe <_vfiprintf_r+0x156>
 800ef30:	9105      	str	r1, [sp, #20]
 800ef32:	e7c4      	b.n	800eebe <_vfiprintf_r+0x156>
 800ef34:	fb0c 2101 	mla	r1, ip, r1, r2
 800ef38:	4604      	mov	r4, r0
 800ef3a:	2301      	movs	r3, #1
 800ef3c:	e7f0      	b.n	800ef20 <_vfiprintf_r+0x1b8>
 800ef3e:	ab03      	add	r3, sp, #12
 800ef40:	9300      	str	r3, [sp, #0]
 800ef42:	462a      	mov	r2, r5
 800ef44:	4b12      	ldr	r3, [pc, #72]	@ (800ef90 <_vfiprintf_r+0x228>)
 800ef46:	a904      	add	r1, sp, #16
 800ef48:	4630      	mov	r0, r6
 800ef4a:	f3af 8000 	nop.w
 800ef4e:	4607      	mov	r7, r0
 800ef50:	1c78      	adds	r0, r7, #1
 800ef52:	d1d6      	bne.n	800ef02 <_vfiprintf_r+0x19a>
 800ef54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ef56:	07d9      	lsls	r1, r3, #31
 800ef58:	d405      	bmi.n	800ef66 <_vfiprintf_r+0x1fe>
 800ef5a:	89ab      	ldrh	r3, [r5, #12]
 800ef5c:	059a      	lsls	r2, r3, #22
 800ef5e:	d402      	bmi.n	800ef66 <_vfiprintf_r+0x1fe>
 800ef60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ef62:	f7ff fc7d 	bl	800e860 <__retarget_lock_release_recursive>
 800ef66:	89ab      	ldrh	r3, [r5, #12]
 800ef68:	065b      	lsls	r3, r3, #25
 800ef6a:	f53f af1f 	bmi.w	800edac <_vfiprintf_r+0x44>
 800ef6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ef70:	e71e      	b.n	800edb0 <_vfiprintf_r+0x48>
 800ef72:	ab03      	add	r3, sp, #12
 800ef74:	9300      	str	r3, [sp, #0]
 800ef76:	462a      	mov	r2, r5
 800ef78:	4b05      	ldr	r3, [pc, #20]	@ (800ef90 <_vfiprintf_r+0x228>)
 800ef7a:	a904      	add	r1, sp, #16
 800ef7c:	4630      	mov	r0, r6
 800ef7e:	f000 f879 	bl	800f074 <_printf_i>
 800ef82:	e7e4      	b.n	800ef4e <_vfiprintf_r+0x1e6>
 800ef84:	0800f7d8 	.word	0x0800f7d8
 800ef88:	0800f7e2 	.word	0x0800f7e2
 800ef8c:	00000000 	.word	0x00000000
 800ef90:	0800ed43 	.word	0x0800ed43
 800ef94:	0800f7de 	.word	0x0800f7de

0800ef98 <_printf_common>:
 800ef98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef9c:	4616      	mov	r6, r2
 800ef9e:	4698      	mov	r8, r3
 800efa0:	688a      	ldr	r2, [r1, #8]
 800efa2:	690b      	ldr	r3, [r1, #16]
 800efa4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800efa8:	4293      	cmp	r3, r2
 800efaa:	bfb8      	it	lt
 800efac:	4613      	movlt	r3, r2
 800efae:	6033      	str	r3, [r6, #0]
 800efb0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800efb4:	4607      	mov	r7, r0
 800efb6:	460c      	mov	r4, r1
 800efb8:	b10a      	cbz	r2, 800efbe <_printf_common+0x26>
 800efba:	3301      	adds	r3, #1
 800efbc:	6033      	str	r3, [r6, #0]
 800efbe:	6823      	ldr	r3, [r4, #0]
 800efc0:	0699      	lsls	r1, r3, #26
 800efc2:	bf42      	ittt	mi
 800efc4:	6833      	ldrmi	r3, [r6, #0]
 800efc6:	3302      	addmi	r3, #2
 800efc8:	6033      	strmi	r3, [r6, #0]
 800efca:	6825      	ldr	r5, [r4, #0]
 800efcc:	f015 0506 	ands.w	r5, r5, #6
 800efd0:	d106      	bne.n	800efe0 <_printf_common+0x48>
 800efd2:	f104 0a19 	add.w	sl, r4, #25
 800efd6:	68e3      	ldr	r3, [r4, #12]
 800efd8:	6832      	ldr	r2, [r6, #0]
 800efda:	1a9b      	subs	r3, r3, r2
 800efdc:	42ab      	cmp	r3, r5
 800efde:	dc26      	bgt.n	800f02e <_printf_common+0x96>
 800efe0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800efe4:	6822      	ldr	r2, [r4, #0]
 800efe6:	3b00      	subs	r3, #0
 800efe8:	bf18      	it	ne
 800efea:	2301      	movne	r3, #1
 800efec:	0692      	lsls	r2, r2, #26
 800efee:	d42b      	bmi.n	800f048 <_printf_common+0xb0>
 800eff0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800eff4:	4641      	mov	r1, r8
 800eff6:	4638      	mov	r0, r7
 800eff8:	47c8      	blx	r9
 800effa:	3001      	adds	r0, #1
 800effc:	d01e      	beq.n	800f03c <_printf_common+0xa4>
 800effe:	6823      	ldr	r3, [r4, #0]
 800f000:	6922      	ldr	r2, [r4, #16]
 800f002:	f003 0306 	and.w	r3, r3, #6
 800f006:	2b04      	cmp	r3, #4
 800f008:	bf02      	ittt	eq
 800f00a:	68e5      	ldreq	r5, [r4, #12]
 800f00c:	6833      	ldreq	r3, [r6, #0]
 800f00e:	1aed      	subeq	r5, r5, r3
 800f010:	68a3      	ldr	r3, [r4, #8]
 800f012:	bf0c      	ite	eq
 800f014:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f018:	2500      	movne	r5, #0
 800f01a:	4293      	cmp	r3, r2
 800f01c:	bfc4      	itt	gt
 800f01e:	1a9b      	subgt	r3, r3, r2
 800f020:	18ed      	addgt	r5, r5, r3
 800f022:	2600      	movs	r6, #0
 800f024:	341a      	adds	r4, #26
 800f026:	42b5      	cmp	r5, r6
 800f028:	d11a      	bne.n	800f060 <_printf_common+0xc8>
 800f02a:	2000      	movs	r0, #0
 800f02c:	e008      	b.n	800f040 <_printf_common+0xa8>
 800f02e:	2301      	movs	r3, #1
 800f030:	4652      	mov	r2, sl
 800f032:	4641      	mov	r1, r8
 800f034:	4638      	mov	r0, r7
 800f036:	47c8      	blx	r9
 800f038:	3001      	adds	r0, #1
 800f03a:	d103      	bne.n	800f044 <_printf_common+0xac>
 800f03c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f044:	3501      	adds	r5, #1
 800f046:	e7c6      	b.n	800efd6 <_printf_common+0x3e>
 800f048:	18e1      	adds	r1, r4, r3
 800f04a:	1c5a      	adds	r2, r3, #1
 800f04c:	2030      	movs	r0, #48	@ 0x30
 800f04e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f052:	4422      	add	r2, r4
 800f054:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f058:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f05c:	3302      	adds	r3, #2
 800f05e:	e7c7      	b.n	800eff0 <_printf_common+0x58>
 800f060:	2301      	movs	r3, #1
 800f062:	4622      	mov	r2, r4
 800f064:	4641      	mov	r1, r8
 800f066:	4638      	mov	r0, r7
 800f068:	47c8      	blx	r9
 800f06a:	3001      	adds	r0, #1
 800f06c:	d0e6      	beq.n	800f03c <_printf_common+0xa4>
 800f06e:	3601      	adds	r6, #1
 800f070:	e7d9      	b.n	800f026 <_printf_common+0x8e>
	...

0800f074 <_printf_i>:
 800f074:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f078:	7e0f      	ldrb	r7, [r1, #24]
 800f07a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f07c:	2f78      	cmp	r7, #120	@ 0x78
 800f07e:	4691      	mov	r9, r2
 800f080:	4680      	mov	r8, r0
 800f082:	460c      	mov	r4, r1
 800f084:	469a      	mov	sl, r3
 800f086:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f08a:	d807      	bhi.n	800f09c <_printf_i+0x28>
 800f08c:	2f62      	cmp	r7, #98	@ 0x62
 800f08e:	d80a      	bhi.n	800f0a6 <_printf_i+0x32>
 800f090:	2f00      	cmp	r7, #0
 800f092:	f000 80d1 	beq.w	800f238 <_printf_i+0x1c4>
 800f096:	2f58      	cmp	r7, #88	@ 0x58
 800f098:	f000 80b8 	beq.w	800f20c <_printf_i+0x198>
 800f09c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f0a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f0a4:	e03a      	b.n	800f11c <_printf_i+0xa8>
 800f0a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f0aa:	2b15      	cmp	r3, #21
 800f0ac:	d8f6      	bhi.n	800f09c <_printf_i+0x28>
 800f0ae:	a101      	add	r1, pc, #4	@ (adr r1, 800f0b4 <_printf_i+0x40>)
 800f0b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f0b4:	0800f10d 	.word	0x0800f10d
 800f0b8:	0800f121 	.word	0x0800f121
 800f0bc:	0800f09d 	.word	0x0800f09d
 800f0c0:	0800f09d 	.word	0x0800f09d
 800f0c4:	0800f09d 	.word	0x0800f09d
 800f0c8:	0800f09d 	.word	0x0800f09d
 800f0cc:	0800f121 	.word	0x0800f121
 800f0d0:	0800f09d 	.word	0x0800f09d
 800f0d4:	0800f09d 	.word	0x0800f09d
 800f0d8:	0800f09d 	.word	0x0800f09d
 800f0dc:	0800f09d 	.word	0x0800f09d
 800f0e0:	0800f21f 	.word	0x0800f21f
 800f0e4:	0800f14b 	.word	0x0800f14b
 800f0e8:	0800f1d9 	.word	0x0800f1d9
 800f0ec:	0800f09d 	.word	0x0800f09d
 800f0f0:	0800f09d 	.word	0x0800f09d
 800f0f4:	0800f241 	.word	0x0800f241
 800f0f8:	0800f09d 	.word	0x0800f09d
 800f0fc:	0800f14b 	.word	0x0800f14b
 800f100:	0800f09d 	.word	0x0800f09d
 800f104:	0800f09d 	.word	0x0800f09d
 800f108:	0800f1e1 	.word	0x0800f1e1
 800f10c:	6833      	ldr	r3, [r6, #0]
 800f10e:	1d1a      	adds	r2, r3, #4
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	6032      	str	r2, [r6, #0]
 800f114:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f118:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f11c:	2301      	movs	r3, #1
 800f11e:	e09c      	b.n	800f25a <_printf_i+0x1e6>
 800f120:	6833      	ldr	r3, [r6, #0]
 800f122:	6820      	ldr	r0, [r4, #0]
 800f124:	1d19      	adds	r1, r3, #4
 800f126:	6031      	str	r1, [r6, #0]
 800f128:	0606      	lsls	r6, r0, #24
 800f12a:	d501      	bpl.n	800f130 <_printf_i+0xbc>
 800f12c:	681d      	ldr	r5, [r3, #0]
 800f12e:	e003      	b.n	800f138 <_printf_i+0xc4>
 800f130:	0645      	lsls	r5, r0, #25
 800f132:	d5fb      	bpl.n	800f12c <_printf_i+0xb8>
 800f134:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f138:	2d00      	cmp	r5, #0
 800f13a:	da03      	bge.n	800f144 <_printf_i+0xd0>
 800f13c:	232d      	movs	r3, #45	@ 0x2d
 800f13e:	426d      	negs	r5, r5
 800f140:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f144:	4858      	ldr	r0, [pc, #352]	@ (800f2a8 <_printf_i+0x234>)
 800f146:	230a      	movs	r3, #10
 800f148:	e011      	b.n	800f16e <_printf_i+0xfa>
 800f14a:	6821      	ldr	r1, [r4, #0]
 800f14c:	6833      	ldr	r3, [r6, #0]
 800f14e:	0608      	lsls	r0, r1, #24
 800f150:	f853 5b04 	ldr.w	r5, [r3], #4
 800f154:	d402      	bmi.n	800f15c <_printf_i+0xe8>
 800f156:	0649      	lsls	r1, r1, #25
 800f158:	bf48      	it	mi
 800f15a:	b2ad      	uxthmi	r5, r5
 800f15c:	2f6f      	cmp	r7, #111	@ 0x6f
 800f15e:	4852      	ldr	r0, [pc, #328]	@ (800f2a8 <_printf_i+0x234>)
 800f160:	6033      	str	r3, [r6, #0]
 800f162:	bf14      	ite	ne
 800f164:	230a      	movne	r3, #10
 800f166:	2308      	moveq	r3, #8
 800f168:	2100      	movs	r1, #0
 800f16a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f16e:	6866      	ldr	r6, [r4, #4]
 800f170:	60a6      	str	r6, [r4, #8]
 800f172:	2e00      	cmp	r6, #0
 800f174:	db05      	blt.n	800f182 <_printf_i+0x10e>
 800f176:	6821      	ldr	r1, [r4, #0]
 800f178:	432e      	orrs	r6, r5
 800f17a:	f021 0104 	bic.w	r1, r1, #4
 800f17e:	6021      	str	r1, [r4, #0]
 800f180:	d04b      	beq.n	800f21a <_printf_i+0x1a6>
 800f182:	4616      	mov	r6, r2
 800f184:	fbb5 f1f3 	udiv	r1, r5, r3
 800f188:	fb03 5711 	mls	r7, r3, r1, r5
 800f18c:	5dc7      	ldrb	r7, [r0, r7]
 800f18e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f192:	462f      	mov	r7, r5
 800f194:	42bb      	cmp	r3, r7
 800f196:	460d      	mov	r5, r1
 800f198:	d9f4      	bls.n	800f184 <_printf_i+0x110>
 800f19a:	2b08      	cmp	r3, #8
 800f19c:	d10b      	bne.n	800f1b6 <_printf_i+0x142>
 800f19e:	6823      	ldr	r3, [r4, #0]
 800f1a0:	07df      	lsls	r7, r3, #31
 800f1a2:	d508      	bpl.n	800f1b6 <_printf_i+0x142>
 800f1a4:	6923      	ldr	r3, [r4, #16]
 800f1a6:	6861      	ldr	r1, [r4, #4]
 800f1a8:	4299      	cmp	r1, r3
 800f1aa:	bfde      	ittt	le
 800f1ac:	2330      	movle	r3, #48	@ 0x30
 800f1ae:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f1b2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800f1b6:	1b92      	subs	r2, r2, r6
 800f1b8:	6122      	str	r2, [r4, #16]
 800f1ba:	f8cd a000 	str.w	sl, [sp]
 800f1be:	464b      	mov	r3, r9
 800f1c0:	aa03      	add	r2, sp, #12
 800f1c2:	4621      	mov	r1, r4
 800f1c4:	4640      	mov	r0, r8
 800f1c6:	f7ff fee7 	bl	800ef98 <_printf_common>
 800f1ca:	3001      	adds	r0, #1
 800f1cc:	d14a      	bne.n	800f264 <_printf_i+0x1f0>
 800f1ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f1d2:	b004      	add	sp, #16
 800f1d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f1d8:	6823      	ldr	r3, [r4, #0]
 800f1da:	f043 0320 	orr.w	r3, r3, #32
 800f1de:	6023      	str	r3, [r4, #0]
 800f1e0:	4832      	ldr	r0, [pc, #200]	@ (800f2ac <_printf_i+0x238>)
 800f1e2:	2778      	movs	r7, #120	@ 0x78
 800f1e4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f1e8:	6823      	ldr	r3, [r4, #0]
 800f1ea:	6831      	ldr	r1, [r6, #0]
 800f1ec:	061f      	lsls	r7, r3, #24
 800f1ee:	f851 5b04 	ldr.w	r5, [r1], #4
 800f1f2:	d402      	bmi.n	800f1fa <_printf_i+0x186>
 800f1f4:	065f      	lsls	r7, r3, #25
 800f1f6:	bf48      	it	mi
 800f1f8:	b2ad      	uxthmi	r5, r5
 800f1fa:	6031      	str	r1, [r6, #0]
 800f1fc:	07d9      	lsls	r1, r3, #31
 800f1fe:	bf44      	itt	mi
 800f200:	f043 0320 	orrmi.w	r3, r3, #32
 800f204:	6023      	strmi	r3, [r4, #0]
 800f206:	b11d      	cbz	r5, 800f210 <_printf_i+0x19c>
 800f208:	2310      	movs	r3, #16
 800f20a:	e7ad      	b.n	800f168 <_printf_i+0xf4>
 800f20c:	4826      	ldr	r0, [pc, #152]	@ (800f2a8 <_printf_i+0x234>)
 800f20e:	e7e9      	b.n	800f1e4 <_printf_i+0x170>
 800f210:	6823      	ldr	r3, [r4, #0]
 800f212:	f023 0320 	bic.w	r3, r3, #32
 800f216:	6023      	str	r3, [r4, #0]
 800f218:	e7f6      	b.n	800f208 <_printf_i+0x194>
 800f21a:	4616      	mov	r6, r2
 800f21c:	e7bd      	b.n	800f19a <_printf_i+0x126>
 800f21e:	6833      	ldr	r3, [r6, #0]
 800f220:	6825      	ldr	r5, [r4, #0]
 800f222:	6961      	ldr	r1, [r4, #20]
 800f224:	1d18      	adds	r0, r3, #4
 800f226:	6030      	str	r0, [r6, #0]
 800f228:	062e      	lsls	r6, r5, #24
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	d501      	bpl.n	800f232 <_printf_i+0x1be>
 800f22e:	6019      	str	r1, [r3, #0]
 800f230:	e002      	b.n	800f238 <_printf_i+0x1c4>
 800f232:	0668      	lsls	r0, r5, #25
 800f234:	d5fb      	bpl.n	800f22e <_printf_i+0x1ba>
 800f236:	8019      	strh	r1, [r3, #0]
 800f238:	2300      	movs	r3, #0
 800f23a:	6123      	str	r3, [r4, #16]
 800f23c:	4616      	mov	r6, r2
 800f23e:	e7bc      	b.n	800f1ba <_printf_i+0x146>
 800f240:	6833      	ldr	r3, [r6, #0]
 800f242:	1d1a      	adds	r2, r3, #4
 800f244:	6032      	str	r2, [r6, #0]
 800f246:	681e      	ldr	r6, [r3, #0]
 800f248:	6862      	ldr	r2, [r4, #4]
 800f24a:	2100      	movs	r1, #0
 800f24c:	4630      	mov	r0, r6
 800f24e:	f7f1 f84f 	bl	80002f0 <memchr>
 800f252:	b108      	cbz	r0, 800f258 <_printf_i+0x1e4>
 800f254:	1b80      	subs	r0, r0, r6
 800f256:	6060      	str	r0, [r4, #4]
 800f258:	6863      	ldr	r3, [r4, #4]
 800f25a:	6123      	str	r3, [r4, #16]
 800f25c:	2300      	movs	r3, #0
 800f25e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f262:	e7aa      	b.n	800f1ba <_printf_i+0x146>
 800f264:	6923      	ldr	r3, [r4, #16]
 800f266:	4632      	mov	r2, r6
 800f268:	4649      	mov	r1, r9
 800f26a:	4640      	mov	r0, r8
 800f26c:	47d0      	blx	sl
 800f26e:	3001      	adds	r0, #1
 800f270:	d0ad      	beq.n	800f1ce <_printf_i+0x15a>
 800f272:	6823      	ldr	r3, [r4, #0]
 800f274:	079b      	lsls	r3, r3, #30
 800f276:	d413      	bmi.n	800f2a0 <_printf_i+0x22c>
 800f278:	68e0      	ldr	r0, [r4, #12]
 800f27a:	9b03      	ldr	r3, [sp, #12]
 800f27c:	4298      	cmp	r0, r3
 800f27e:	bfb8      	it	lt
 800f280:	4618      	movlt	r0, r3
 800f282:	e7a6      	b.n	800f1d2 <_printf_i+0x15e>
 800f284:	2301      	movs	r3, #1
 800f286:	4632      	mov	r2, r6
 800f288:	4649      	mov	r1, r9
 800f28a:	4640      	mov	r0, r8
 800f28c:	47d0      	blx	sl
 800f28e:	3001      	adds	r0, #1
 800f290:	d09d      	beq.n	800f1ce <_printf_i+0x15a>
 800f292:	3501      	adds	r5, #1
 800f294:	68e3      	ldr	r3, [r4, #12]
 800f296:	9903      	ldr	r1, [sp, #12]
 800f298:	1a5b      	subs	r3, r3, r1
 800f29a:	42ab      	cmp	r3, r5
 800f29c:	dcf2      	bgt.n	800f284 <_printf_i+0x210>
 800f29e:	e7eb      	b.n	800f278 <_printf_i+0x204>
 800f2a0:	2500      	movs	r5, #0
 800f2a2:	f104 0619 	add.w	r6, r4, #25
 800f2a6:	e7f5      	b.n	800f294 <_printf_i+0x220>
 800f2a8:	0800f7e9 	.word	0x0800f7e9
 800f2ac:	0800f7fa 	.word	0x0800f7fa

0800f2b0 <__sflush_r>:
 800f2b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f2b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2b8:	0716      	lsls	r6, r2, #28
 800f2ba:	4605      	mov	r5, r0
 800f2bc:	460c      	mov	r4, r1
 800f2be:	d454      	bmi.n	800f36a <__sflush_r+0xba>
 800f2c0:	684b      	ldr	r3, [r1, #4]
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	dc02      	bgt.n	800f2cc <__sflush_r+0x1c>
 800f2c6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	dd48      	ble.n	800f35e <__sflush_r+0xae>
 800f2cc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f2ce:	2e00      	cmp	r6, #0
 800f2d0:	d045      	beq.n	800f35e <__sflush_r+0xae>
 800f2d2:	2300      	movs	r3, #0
 800f2d4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f2d8:	682f      	ldr	r7, [r5, #0]
 800f2da:	6a21      	ldr	r1, [r4, #32]
 800f2dc:	602b      	str	r3, [r5, #0]
 800f2de:	d030      	beq.n	800f342 <__sflush_r+0x92>
 800f2e0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f2e2:	89a3      	ldrh	r3, [r4, #12]
 800f2e4:	0759      	lsls	r1, r3, #29
 800f2e6:	d505      	bpl.n	800f2f4 <__sflush_r+0x44>
 800f2e8:	6863      	ldr	r3, [r4, #4]
 800f2ea:	1ad2      	subs	r2, r2, r3
 800f2ec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f2ee:	b10b      	cbz	r3, 800f2f4 <__sflush_r+0x44>
 800f2f0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f2f2:	1ad2      	subs	r2, r2, r3
 800f2f4:	2300      	movs	r3, #0
 800f2f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f2f8:	6a21      	ldr	r1, [r4, #32]
 800f2fa:	4628      	mov	r0, r5
 800f2fc:	47b0      	blx	r6
 800f2fe:	1c43      	adds	r3, r0, #1
 800f300:	89a3      	ldrh	r3, [r4, #12]
 800f302:	d106      	bne.n	800f312 <__sflush_r+0x62>
 800f304:	6829      	ldr	r1, [r5, #0]
 800f306:	291d      	cmp	r1, #29
 800f308:	d82b      	bhi.n	800f362 <__sflush_r+0xb2>
 800f30a:	4a2a      	ldr	r2, [pc, #168]	@ (800f3b4 <__sflush_r+0x104>)
 800f30c:	40ca      	lsrs	r2, r1
 800f30e:	07d6      	lsls	r6, r2, #31
 800f310:	d527      	bpl.n	800f362 <__sflush_r+0xb2>
 800f312:	2200      	movs	r2, #0
 800f314:	6062      	str	r2, [r4, #4]
 800f316:	04d9      	lsls	r1, r3, #19
 800f318:	6922      	ldr	r2, [r4, #16]
 800f31a:	6022      	str	r2, [r4, #0]
 800f31c:	d504      	bpl.n	800f328 <__sflush_r+0x78>
 800f31e:	1c42      	adds	r2, r0, #1
 800f320:	d101      	bne.n	800f326 <__sflush_r+0x76>
 800f322:	682b      	ldr	r3, [r5, #0]
 800f324:	b903      	cbnz	r3, 800f328 <__sflush_r+0x78>
 800f326:	6560      	str	r0, [r4, #84]	@ 0x54
 800f328:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f32a:	602f      	str	r7, [r5, #0]
 800f32c:	b1b9      	cbz	r1, 800f35e <__sflush_r+0xae>
 800f32e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f332:	4299      	cmp	r1, r3
 800f334:	d002      	beq.n	800f33c <__sflush_r+0x8c>
 800f336:	4628      	mov	r0, r5
 800f338:	f7ff fa94 	bl	800e864 <_free_r>
 800f33c:	2300      	movs	r3, #0
 800f33e:	6363      	str	r3, [r4, #52]	@ 0x34
 800f340:	e00d      	b.n	800f35e <__sflush_r+0xae>
 800f342:	2301      	movs	r3, #1
 800f344:	4628      	mov	r0, r5
 800f346:	47b0      	blx	r6
 800f348:	4602      	mov	r2, r0
 800f34a:	1c50      	adds	r0, r2, #1
 800f34c:	d1c9      	bne.n	800f2e2 <__sflush_r+0x32>
 800f34e:	682b      	ldr	r3, [r5, #0]
 800f350:	2b00      	cmp	r3, #0
 800f352:	d0c6      	beq.n	800f2e2 <__sflush_r+0x32>
 800f354:	2b1d      	cmp	r3, #29
 800f356:	d001      	beq.n	800f35c <__sflush_r+0xac>
 800f358:	2b16      	cmp	r3, #22
 800f35a:	d11e      	bne.n	800f39a <__sflush_r+0xea>
 800f35c:	602f      	str	r7, [r5, #0]
 800f35e:	2000      	movs	r0, #0
 800f360:	e022      	b.n	800f3a8 <__sflush_r+0xf8>
 800f362:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f366:	b21b      	sxth	r3, r3
 800f368:	e01b      	b.n	800f3a2 <__sflush_r+0xf2>
 800f36a:	690f      	ldr	r7, [r1, #16]
 800f36c:	2f00      	cmp	r7, #0
 800f36e:	d0f6      	beq.n	800f35e <__sflush_r+0xae>
 800f370:	0793      	lsls	r3, r2, #30
 800f372:	680e      	ldr	r6, [r1, #0]
 800f374:	bf08      	it	eq
 800f376:	694b      	ldreq	r3, [r1, #20]
 800f378:	600f      	str	r7, [r1, #0]
 800f37a:	bf18      	it	ne
 800f37c:	2300      	movne	r3, #0
 800f37e:	eba6 0807 	sub.w	r8, r6, r7
 800f382:	608b      	str	r3, [r1, #8]
 800f384:	f1b8 0f00 	cmp.w	r8, #0
 800f388:	dde9      	ble.n	800f35e <__sflush_r+0xae>
 800f38a:	6a21      	ldr	r1, [r4, #32]
 800f38c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f38e:	4643      	mov	r3, r8
 800f390:	463a      	mov	r2, r7
 800f392:	4628      	mov	r0, r5
 800f394:	47b0      	blx	r6
 800f396:	2800      	cmp	r0, #0
 800f398:	dc08      	bgt.n	800f3ac <__sflush_r+0xfc>
 800f39a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f39e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f3a2:	81a3      	strh	r3, [r4, #12]
 800f3a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f3a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3ac:	4407      	add	r7, r0
 800f3ae:	eba8 0800 	sub.w	r8, r8, r0
 800f3b2:	e7e7      	b.n	800f384 <__sflush_r+0xd4>
 800f3b4:	20400001 	.word	0x20400001

0800f3b8 <_fflush_r>:
 800f3b8:	b538      	push	{r3, r4, r5, lr}
 800f3ba:	690b      	ldr	r3, [r1, #16]
 800f3bc:	4605      	mov	r5, r0
 800f3be:	460c      	mov	r4, r1
 800f3c0:	b913      	cbnz	r3, 800f3c8 <_fflush_r+0x10>
 800f3c2:	2500      	movs	r5, #0
 800f3c4:	4628      	mov	r0, r5
 800f3c6:	bd38      	pop	{r3, r4, r5, pc}
 800f3c8:	b118      	cbz	r0, 800f3d2 <_fflush_r+0x1a>
 800f3ca:	6a03      	ldr	r3, [r0, #32]
 800f3cc:	b90b      	cbnz	r3, 800f3d2 <_fflush_r+0x1a>
 800f3ce:	f7fe ff79 	bl	800e2c4 <__sinit>
 800f3d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d0f3      	beq.n	800f3c2 <_fflush_r+0xa>
 800f3da:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f3dc:	07d0      	lsls	r0, r2, #31
 800f3de:	d404      	bmi.n	800f3ea <_fflush_r+0x32>
 800f3e0:	0599      	lsls	r1, r3, #22
 800f3e2:	d402      	bmi.n	800f3ea <_fflush_r+0x32>
 800f3e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f3e6:	f7ff fa3a 	bl	800e85e <__retarget_lock_acquire_recursive>
 800f3ea:	4628      	mov	r0, r5
 800f3ec:	4621      	mov	r1, r4
 800f3ee:	f7ff ff5f 	bl	800f2b0 <__sflush_r>
 800f3f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f3f4:	07da      	lsls	r2, r3, #31
 800f3f6:	4605      	mov	r5, r0
 800f3f8:	d4e4      	bmi.n	800f3c4 <_fflush_r+0xc>
 800f3fa:	89a3      	ldrh	r3, [r4, #12]
 800f3fc:	059b      	lsls	r3, r3, #22
 800f3fe:	d4e1      	bmi.n	800f3c4 <_fflush_r+0xc>
 800f400:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f402:	f7ff fa2d 	bl	800e860 <__retarget_lock_release_recursive>
 800f406:	e7dd      	b.n	800f3c4 <_fflush_r+0xc>

0800f408 <__swhatbuf_r>:
 800f408:	b570      	push	{r4, r5, r6, lr}
 800f40a:	460c      	mov	r4, r1
 800f40c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f410:	2900      	cmp	r1, #0
 800f412:	b096      	sub	sp, #88	@ 0x58
 800f414:	4615      	mov	r5, r2
 800f416:	461e      	mov	r6, r3
 800f418:	da0d      	bge.n	800f436 <__swhatbuf_r+0x2e>
 800f41a:	89a3      	ldrh	r3, [r4, #12]
 800f41c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f420:	f04f 0100 	mov.w	r1, #0
 800f424:	bf14      	ite	ne
 800f426:	2340      	movne	r3, #64	@ 0x40
 800f428:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f42c:	2000      	movs	r0, #0
 800f42e:	6031      	str	r1, [r6, #0]
 800f430:	602b      	str	r3, [r5, #0]
 800f432:	b016      	add	sp, #88	@ 0x58
 800f434:	bd70      	pop	{r4, r5, r6, pc}
 800f436:	466a      	mov	r2, sp
 800f438:	f000 f862 	bl	800f500 <_fstat_r>
 800f43c:	2800      	cmp	r0, #0
 800f43e:	dbec      	blt.n	800f41a <__swhatbuf_r+0x12>
 800f440:	9901      	ldr	r1, [sp, #4]
 800f442:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f446:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f44a:	4259      	negs	r1, r3
 800f44c:	4159      	adcs	r1, r3
 800f44e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f452:	e7eb      	b.n	800f42c <__swhatbuf_r+0x24>

0800f454 <__smakebuf_r>:
 800f454:	898b      	ldrh	r3, [r1, #12]
 800f456:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f458:	079d      	lsls	r5, r3, #30
 800f45a:	4606      	mov	r6, r0
 800f45c:	460c      	mov	r4, r1
 800f45e:	d507      	bpl.n	800f470 <__smakebuf_r+0x1c>
 800f460:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f464:	6023      	str	r3, [r4, #0]
 800f466:	6123      	str	r3, [r4, #16]
 800f468:	2301      	movs	r3, #1
 800f46a:	6163      	str	r3, [r4, #20]
 800f46c:	b003      	add	sp, #12
 800f46e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f470:	ab01      	add	r3, sp, #4
 800f472:	466a      	mov	r2, sp
 800f474:	f7ff ffc8 	bl	800f408 <__swhatbuf_r>
 800f478:	9f00      	ldr	r7, [sp, #0]
 800f47a:	4605      	mov	r5, r0
 800f47c:	4639      	mov	r1, r7
 800f47e:	4630      	mov	r0, r6
 800f480:	f7ff fa64 	bl	800e94c <_malloc_r>
 800f484:	b948      	cbnz	r0, 800f49a <__smakebuf_r+0x46>
 800f486:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f48a:	059a      	lsls	r2, r3, #22
 800f48c:	d4ee      	bmi.n	800f46c <__smakebuf_r+0x18>
 800f48e:	f023 0303 	bic.w	r3, r3, #3
 800f492:	f043 0302 	orr.w	r3, r3, #2
 800f496:	81a3      	strh	r3, [r4, #12]
 800f498:	e7e2      	b.n	800f460 <__smakebuf_r+0xc>
 800f49a:	89a3      	ldrh	r3, [r4, #12]
 800f49c:	6020      	str	r0, [r4, #0]
 800f49e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f4a2:	81a3      	strh	r3, [r4, #12]
 800f4a4:	9b01      	ldr	r3, [sp, #4]
 800f4a6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f4aa:	b15b      	cbz	r3, 800f4c4 <__smakebuf_r+0x70>
 800f4ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f4b0:	4630      	mov	r0, r6
 800f4b2:	f000 f837 	bl	800f524 <_isatty_r>
 800f4b6:	b128      	cbz	r0, 800f4c4 <__smakebuf_r+0x70>
 800f4b8:	89a3      	ldrh	r3, [r4, #12]
 800f4ba:	f023 0303 	bic.w	r3, r3, #3
 800f4be:	f043 0301 	orr.w	r3, r3, #1
 800f4c2:	81a3      	strh	r3, [r4, #12]
 800f4c4:	89a3      	ldrh	r3, [r4, #12]
 800f4c6:	431d      	orrs	r5, r3
 800f4c8:	81a5      	strh	r5, [r4, #12]
 800f4ca:	e7cf      	b.n	800f46c <__smakebuf_r+0x18>

0800f4cc <memmove>:
 800f4cc:	4288      	cmp	r0, r1
 800f4ce:	b510      	push	{r4, lr}
 800f4d0:	eb01 0402 	add.w	r4, r1, r2
 800f4d4:	d902      	bls.n	800f4dc <memmove+0x10>
 800f4d6:	4284      	cmp	r4, r0
 800f4d8:	4623      	mov	r3, r4
 800f4da:	d807      	bhi.n	800f4ec <memmove+0x20>
 800f4dc:	1e43      	subs	r3, r0, #1
 800f4de:	42a1      	cmp	r1, r4
 800f4e0:	d008      	beq.n	800f4f4 <memmove+0x28>
 800f4e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f4e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f4ea:	e7f8      	b.n	800f4de <memmove+0x12>
 800f4ec:	4402      	add	r2, r0
 800f4ee:	4601      	mov	r1, r0
 800f4f0:	428a      	cmp	r2, r1
 800f4f2:	d100      	bne.n	800f4f6 <memmove+0x2a>
 800f4f4:	bd10      	pop	{r4, pc}
 800f4f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f4fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f4fe:	e7f7      	b.n	800f4f0 <memmove+0x24>

0800f500 <_fstat_r>:
 800f500:	b538      	push	{r3, r4, r5, lr}
 800f502:	4d07      	ldr	r5, [pc, #28]	@ (800f520 <_fstat_r+0x20>)
 800f504:	2300      	movs	r3, #0
 800f506:	4604      	mov	r4, r0
 800f508:	4608      	mov	r0, r1
 800f50a:	4611      	mov	r1, r2
 800f50c:	602b      	str	r3, [r5, #0]
 800f50e:	f7f1 fc79 	bl	8000e04 <_fstat>
 800f512:	1c43      	adds	r3, r0, #1
 800f514:	d102      	bne.n	800f51c <_fstat_r+0x1c>
 800f516:	682b      	ldr	r3, [r5, #0]
 800f518:	b103      	cbz	r3, 800f51c <_fstat_r+0x1c>
 800f51a:	6023      	str	r3, [r4, #0]
 800f51c:	bd38      	pop	{r3, r4, r5, pc}
 800f51e:	bf00      	nop
 800f520:	24000914 	.word	0x24000914

0800f524 <_isatty_r>:
 800f524:	b538      	push	{r3, r4, r5, lr}
 800f526:	4d06      	ldr	r5, [pc, #24]	@ (800f540 <_isatty_r+0x1c>)
 800f528:	2300      	movs	r3, #0
 800f52a:	4604      	mov	r4, r0
 800f52c:	4608      	mov	r0, r1
 800f52e:	602b      	str	r3, [r5, #0]
 800f530:	f7f1 fbd6 	bl	8000ce0 <_isatty>
 800f534:	1c43      	adds	r3, r0, #1
 800f536:	d102      	bne.n	800f53e <_isatty_r+0x1a>
 800f538:	682b      	ldr	r3, [r5, #0]
 800f53a:	b103      	cbz	r3, 800f53e <_isatty_r+0x1a>
 800f53c:	6023      	str	r3, [r4, #0]
 800f53e:	bd38      	pop	{r3, r4, r5, pc}
 800f540:	24000914 	.word	0x24000914

0800f544 <_sbrk_r>:
 800f544:	b538      	push	{r3, r4, r5, lr}
 800f546:	4d06      	ldr	r5, [pc, #24]	@ (800f560 <_sbrk_r+0x1c>)
 800f548:	2300      	movs	r3, #0
 800f54a:	4604      	mov	r4, r0
 800f54c:	4608      	mov	r0, r1
 800f54e:	602b      	str	r3, [r5, #0]
 800f550:	f7f1 fd82 	bl	8001058 <_sbrk>
 800f554:	1c43      	adds	r3, r0, #1
 800f556:	d102      	bne.n	800f55e <_sbrk_r+0x1a>
 800f558:	682b      	ldr	r3, [r5, #0]
 800f55a:	b103      	cbz	r3, 800f55e <_sbrk_r+0x1a>
 800f55c:	6023      	str	r3, [r4, #0]
 800f55e:	bd38      	pop	{r3, r4, r5, pc}
 800f560:	24000914 	.word	0x24000914

0800f564 <memcpy>:
 800f564:	440a      	add	r2, r1
 800f566:	4291      	cmp	r1, r2
 800f568:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800f56c:	d100      	bne.n	800f570 <memcpy+0xc>
 800f56e:	4770      	bx	lr
 800f570:	b510      	push	{r4, lr}
 800f572:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f576:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f57a:	4291      	cmp	r1, r2
 800f57c:	d1f9      	bne.n	800f572 <memcpy+0xe>
 800f57e:	bd10      	pop	{r4, pc}

0800f580 <_realloc_r>:
 800f580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f584:	4607      	mov	r7, r0
 800f586:	4614      	mov	r4, r2
 800f588:	460d      	mov	r5, r1
 800f58a:	b921      	cbnz	r1, 800f596 <_realloc_r+0x16>
 800f58c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f590:	4611      	mov	r1, r2
 800f592:	f7ff b9db 	b.w	800e94c <_malloc_r>
 800f596:	b92a      	cbnz	r2, 800f5a4 <_realloc_r+0x24>
 800f598:	f7ff f964 	bl	800e864 <_free_r>
 800f59c:	4625      	mov	r5, r4
 800f59e:	4628      	mov	r0, r5
 800f5a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5a4:	f000 f81a 	bl	800f5dc <_malloc_usable_size_r>
 800f5a8:	4284      	cmp	r4, r0
 800f5aa:	4606      	mov	r6, r0
 800f5ac:	d802      	bhi.n	800f5b4 <_realloc_r+0x34>
 800f5ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f5b2:	d8f4      	bhi.n	800f59e <_realloc_r+0x1e>
 800f5b4:	4621      	mov	r1, r4
 800f5b6:	4638      	mov	r0, r7
 800f5b8:	f7ff f9c8 	bl	800e94c <_malloc_r>
 800f5bc:	4680      	mov	r8, r0
 800f5be:	b908      	cbnz	r0, 800f5c4 <_realloc_r+0x44>
 800f5c0:	4645      	mov	r5, r8
 800f5c2:	e7ec      	b.n	800f59e <_realloc_r+0x1e>
 800f5c4:	42b4      	cmp	r4, r6
 800f5c6:	4622      	mov	r2, r4
 800f5c8:	4629      	mov	r1, r5
 800f5ca:	bf28      	it	cs
 800f5cc:	4632      	movcs	r2, r6
 800f5ce:	f7ff ffc9 	bl	800f564 <memcpy>
 800f5d2:	4629      	mov	r1, r5
 800f5d4:	4638      	mov	r0, r7
 800f5d6:	f7ff f945 	bl	800e864 <_free_r>
 800f5da:	e7f1      	b.n	800f5c0 <_realloc_r+0x40>

0800f5dc <_malloc_usable_size_r>:
 800f5dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f5e0:	1f18      	subs	r0, r3, #4
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	bfbc      	itt	lt
 800f5e6:	580b      	ldrlt	r3, [r1, r0]
 800f5e8:	18c0      	addlt	r0, r0, r3
 800f5ea:	4770      	bx	lr

0800f5ec <_init>:
 800f5ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5ee:	bf00      	nop
 800f5f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f5f2:	bc08      	pop	{r3}
 800f5f4:	469e      	mov	lr, r3
 800f5f6:	4770      	bx	lr

0800f5f8 <_fini>:
 800f5f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5fa:	bf00      	nop
 800f5fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f5fe:	bc08      	pop	{r3}
 800f600:	469e      	mov	lr, r3
 800f602:	4770      	bx	lr
